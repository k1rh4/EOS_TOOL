(data (i32.const 4) "\80g\00\00")
(data (i32.const 16) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 80) "cannot create objects in table of another contract\00")
(data (i32.const 144) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 208) "invalid symbol name\00")
(data (i32.const 240) "write\00")
(data (i32.const 256) "error reading iterator\00")
(data (i32.const 288) "read\00")
(data (i32.const 304) "==============\00")
(data (i32.const 320) "cannot pass end iterator to modify\00")
(data (i32.const 368) "object passed to modify is not in multi_index\00")
(data (i32.const 416) "cannot modify objects in table of another contract\00")
(data (i32.const 480) "attempt to add asset with different symbol\00")
(data (i32.const 528) "addition underflow\00")
(data (i32.const 560) "addition overflow\00")
(data (i32.const 592) "updater cannot change primary key when modifying an object\00")
(data (i32.const 656) "alibabapoole\00")
(data (i32.const 672) "----------ept_balance----11-------\00")
(data (i32.const 720) "unable to find key\00")
(data (i32.const 752) "cannot pass end iterator to erase\00")
(data (i32.const 800) "cannot increment end iterator\00")
(data (i32.const 832) "object passed to erase is not in multi_index\00")
(data (i32.const 880) "cannot erase objects in table of another contract\00")
(data (i32.const 944) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1008) "------ept---------\00")
(data (i32.const 1040) "Insufficient surplus\00")
(data (i32.const 1072) "active\00")
(data (i32.const 1088) "rewards\00")
(data (i32.const 1104) "----------\e5\88\86\e7\ba\a2\e6\95\b0-------------\00")
(data (i32.const 1152) "attempt to subtract asset with different symbol\00")
(data (i32.const 1200) "subtraction underflow\00")
(data (i32.const 1232) "subtraction overflow\00")
(data (i32.const 1264) "transfer\00")
(data (i32.const 1280) "Redeem EPT\00")
(data (i32.const 1296) "--------33-11-----\00")
(data (i32.const 1328) "The amount received exceeds the amount of dividends paid.\00")
(data (i32.const 1392) "eosio.token\00")
(data (i32.const 1408) "Dividends  received\00")
(data (i32.const 1440) "=----1---\00")
(data (i32.const 1456) "=----2---\00")
(data (i32.const 1472) "=----3---\00")
(data (i32.const 1488) "=----21111---\00")
(data (i32.const 1504) "onerror\00")
(data (i32.const 1520) "eosio\00")
(data (i32.const 1536) "onerror action\'s  are only valid from the \"eosio\" system account\00")
(data (i32.const 1616) "get\00")
(data (i32.const 10016) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$13 (param i64)))
(import "env" "prints" (func $fimport$14 (param i32)))
(import "env" "printui" (func $fimport$15 (param i64)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$17 (param i64)))
(import "env" "require_auth2" (func $fimport$18 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$19 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5hello5helloC2Ey" (func $5))
(export "_ZN5hello5hello8transferEyyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE" (func $12))
(export "_ZN5hello5hello4gameEN5eosio5assetE" (func $14))
(export "_ZN5hello5hello8userinfoEyN5eosio5assetE" (func $15))
(export "_ZN5hello5hello6rewardEyN5eosio5assetE" (func $32))
(export "_ZN5hello5hello10rewardgameEN5eosio5assetE" (func $35))
(export "_ZN5hello5hello7rewardsEyN5eosio5assetE" (func $45))
(export "_ZN5hello5hello7receiveEyN5eosio5assetE" (func $49))
(export "_ZN5hello5hello2fcEyy" (func $50))
(export "apply" (func $51))
(export "malloc" (func $59))
(export "free" (func $62))
(export "memcmp" (func $69))
(export "strlen" (func $70))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $71 $12 $32 $45 $50 $49)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [256])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $63([112])
	CALL $16($6)
	*($6 + [96]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [24])
	*($8 + [44]) = ($6 + [40])
	*($8 + [48]) = ($6 + [56])
	*($8 + [52]) = ($6 + [72])
	*($8 + [56]) = ($6 + [88])
	CALL $20(($8 + [32]), ($8 + [24]))
	*($6 + [100]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [100])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $19(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $64($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10004])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9812]
	$1 = (((int_32)$2 * (int_32)[12]) + [9812])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $63(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $67($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $64($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $64($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $63(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $64($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $65 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $63($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $67($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $64($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $67 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [880])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [944])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $64($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $64($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [256])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $63([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [288])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $31(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $64($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	*($1) = *(*(*($0 + [4])))
	$2 = *($0)
	CALL eosio_assert([1], [144])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5525573
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [208])
	*(($1 + [32])) = (int_64)1414546692
	*($1 + [24]) = (int_64)0
	$5 = $7
	$4 = ($5 + [-48])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = $5
	CALL $10($6, $1)
	$3 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $3, $4, [48])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [16])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $24($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [16])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [656]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = *($1)
	*(($9 + [40])) = [0]
	*($9 + [16]) = $6
	*($9 + [8]) = $7
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$4 = CALL $23(($9 + [8]), (int_64)5525573, [720])
	*($0) = *($4)
	*(($0 + [8])) = *(($4 + [8]))
	$1 = *($9 + [32])
	if ( ($1 == 0) ){ goto $label$5 }
	$3 = ($9 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	CALL $64($2)
	
.LABEL $label$9
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$8 }
	$4 = *(($9 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$4 = $1
	
.LABEL $label$6
	*($3) = $1
	CALL $64($4)
	
.LABEL $label$5
	CALL prints([672])
	CALL printi(*($0))
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [256])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $63([32])
	$6 = CALL $25($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $26(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $64($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [80])
	*(($4 = CALL $63([24])) + [8]) = $1
	*($4) = (int_64)1
	CALL eosio_assert([1], [240])
	CALL memcpy(($9 + [16]), $4, [8])
	$5 = *($4)
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-4161105256143912960, $2, $5, ($9 + [16]), [8])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [8]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [12])
	*($9 + [4]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [8]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $31(($1 + [24]), ($9 + [8]), ($9 + [16]), ($9 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [8])
	*($9 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $64($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $63(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $67($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $64($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $64($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN5hello5hello7receiveEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [224])
	*([0] + [4]) = $13
	CALL require_auth($1)
	*(($13 + [88])) = [0]
	*($13 + [72]) = (int_64)-1
	*($13 + [80]) = (int_64)0
	$7 = *($0)
	*($13 + [56]) = $7
	*($13 + [64]) = $7
	$12 = CALL db_find_i64($7, $7, (int_64)-3020376800539705344, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$4 }
	$12 = CALL $18(($13 + [56]), $12)
	CALL eosio_assert(((int_32)*($12 + [96]) == (int_32)($13 + [56])), [16])
	$7 = *($12 + [72])
	$9 = *($12 + [56])
	CALL prints([1296])
	$7 = (int_64)
	CALL printi($7($9 - $7)))
	$9 = *($2)
	if ( ((int_64)$7 >= (int_64)$9) ){ goto $label$5 }
	CALL eosio_assert([0], [1328])
	$2 = *($13 + [80])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = *($0)
	CALL eosio_assert([1], [320])
	CALL eosio_assert(((int_32)*($12 + [96]) == (int_32)($13 + [56])), [368])
	CALL eosio_assert(((int_64)*($13 + [56]) == (int_64)CALL $fimport$2()), [416])
	$7 = *($12)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($12 + [80]))), [480])
	$9 = ((int_64)*($12 + [72]) + (int_64)$9)
	*($12 + [72]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)*($12 + [72]) < (int_64)4611686018427387904), [560])
	CALL eosio_assert(((int_64)$7 == (int_64)*($12)), [592])
	*($13 + [216]) = (($13 + [96]) + [96])
	*($13 + [212]) = ($13 + [96])
	*($13 + [208]) = ($13 + [96])
	*($13) = ($13 + [208])
	*($13 + [20]) = ($12 + [8])
	*($13 + [16]) = $12
	*($13 + [24]) = ($12 + [24])
	*($13 + [28]) = ($12 + [40])
	*($13 + [32]) = ($12 + [56])
	*($13 + [36]) = ($12 + [72])
	*($13 + [40]) = ($12 + [88])
	CALL $17(($13 + [16]), $13)
	CALL db_update_i64(*($12 + [100]), $6, ($13 + [96]), [96])
	$12 = ($13 + [72])
	if ( (uint_64)($7 <= *($12)) ){ goto $label$6 }
	*($12) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$3 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$12 = [1072]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$12 }
	$4 = *($12)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$12 = ($12 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	$7 = (int_64)0
	$6 = (int_64)59
	$12 = [1392]
	$10 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$18 }
	$4 = *($12)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [165])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$14
	$12 = ($12 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$13 }
	$7 = (int_64)0
	$6 = (int_64)59
	$12 = [1264]
	$11 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$24 }
	$4 = *($12)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$4 = ($4 + [165])
	goto $label$22 
	
.LABEL $label$24
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$20
	$12 = ($12 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$19 }
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	$12 = CALL strlen([1408])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$27 }
	*($13) = ($12 << [1])
	$4 = ($13 | [1])
	if ( $12 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$5 = (($12 + [16]) & [-16])
	$4 = CALL $63($5)
	*($13) = ($5 | [1])
	*($13 + [8]) = $4
	*($13 + [4]) = $12
	
.LABEL $label$26
	CALL memcpy($4, [1408], $12)
	
.LABEL $label$25
	*(($4 + $12)) = [0]
	*((($13 + [96]) + [28])) = *(($2 + [12]))
	*((($13 + [96]) + [24])) = *(($2 + [8]))
	*((($13 + [96]) + [20])) = *(($2 + [4]))
	*($13 + [104]) = $1
	*($13 + [96]) = *($0)
	*($13 + [112]) = *($2)
	$12 = ($13 + [8])
	*(($13 + [136])) = *($12)
	*($13 + [128]) = *($13)
	*($13) = [0]
	*($13 + [4]) = [0]
	*($12) = [0]
	*($13 + [16]) = $10
	*($13 + [24]) = $11
	*(($12 = CALL $63([16]))) = $3
	*($12 + [8]) = $8
	*((($13 + [16]) + [32])) = [0]
	$4 = ($12 + [16])
	*((($13 + [16]) + [24])) = $4
	*((($13 + [16]) + [20])) = $4
	*($13 + [32]) = $12
	*($13 + [44]) = [0]
	*((($13 + [16]) + [36])) = [0]
	$12 = *($13 + [128])
	$4 = ( *((($13 + [96]) + [36])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$12 = ($4 + [32])
	$7 = (CASTING uint_64)(uint_32 $4)
	$4 = (($13 + [16]) + [28])
	
.LOOP $label$28:
	$12 = ($12 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$28 }
	if ( ($12 == 0) ){ goto $label$30 }
	CALL $39($4, $12)
	$4 = *(($13 + [48]))
	$12 = *(($13 + [44]))
	goto $label$29 
	
.LABEL $label$30
	$4 = [0]
	$12 = [0]
	
.LABEL $label$29
	*($13 + [212]) = $12
	*($13 + [208]) = $12
	*($13 + [216]) = $4
	*($13 + [192]) = ($13 + [208])
	*($13 + [200]) = ($13 + [96])
	CALL $46(($13 + [200]), ($13 + [192]))
	CALL $47(($13 + [208]), ($13 + [16]))
	$12 = *($13 + [208])
	CALL send_inline($12, (*($13 + [212]) - $12))
	$12 = *($13 + [208])
	if ( ($12 == 0) ){ goto $label$31 }
	*($13 + [212]) = $12
	CALL $64($12)
	
.LABEL $label$31
	$12 = *($13 + [44])
	if ( ($12 == 0) ){ goto $label$32 }
	*(($13 + [48])) = $12
	CALL $64($12)
	
.LABEL $label$32
	$12 = *($13 + [32])
	if ( ($12 == 0) ){ goto $label$33 }
	*(($13 + [36])) = $12
	CALL $64($12)
	
.LABEL $label$33
	if ( ((*(($13 + [128])) & [1]) == 0) ){ goto $label$34 }
	CALL $64(*(($13 + [136])))
	
.LABEL $label$34
	if ( ((*($13) & [1]) == 0) ){ goto $label$4 }
	CALL $64(*(($13 + [8])))
	
.LABEL $label$4
	$2 = *($13 + [80])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$0 = ($13 + [84])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$36 }
	
.LOOP $label$37:
	$12 = ($12 + [-24])
	$4 = *($12)
	*($12) = [0]
	if ( ($4 == 0) ){ goto $label$38 }
	CALL $64($4)
	
.LABEL $label$38
	if ( ((int_32)$2 != (int_32)$12) ){ goto $label$37 }
	$12 = *(($13 + [80]))
	goto $label$35 
	
.LABEL $label$36
	$12 = $2
	
.LABEL $label$35
	*($0) = $2
	CALL $64($12)
	
.LABEL $label$2
	*([0] + [4]) = ($13 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $65($13)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [240])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [240])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $63($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [240])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [240])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [240])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [240])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $43($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [240])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [240])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [240])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $43(CALL $44($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [240])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [240])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [240])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [240])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [240])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $39($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [240])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [240])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $43(CALL $44($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [240])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $48(*($1), ($0 + [32]))
}

void .FUNC _ZN5hello5hello7rewardsEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [224])
	*([0] + [4]) = $13
	CALL require_auth(*($0))
	*(($13 + [88])) = [0]
	*($13 + [72]) = (int_64)-1
	*($13 + [80]) = (int_64)0
	$8 = *($0)
	*($13 + [56]) = $8
	*($13 + [64]) = $8
	$6 = CALL db_find_i64($8, $8, (int_64)-3020376800539705344, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $18(($13 + [56]), $6)
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)($13 + [56])), [16])
	$10 = *($0)
	CALL eosio_assert([1], [320])
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)($13 + [56])), [368])
	CALL eosio_assert(((int_64)*($13 + [56]) == (int_64)CALL $fimport$2()), [416])
	$8 = *($6)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($6 + [48]))), [1152])
	$7 = (int_64)
	*($6 + [40]) = $7(*($6 + [40]) - *($2)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1200])
	CALL eosio_assert(((int_64)*($6 + [40]) < (int_64)4611686018427387904), [1232])
	CALL eosio_assert(((int_64)$8 == (int_64)*($6)), [592])
	*($13 + [216]) = (($13 + [96]) + [96])
	*($13 + [212]) = ($13 + [96])
	*($13 + [208]) = ($13 + [96])
	*($13) = ($13 + [208])
	*($13 + [20]) = ($6 + [8])
	*($13 + [16]) = $6
	*($13 + [24]) = ($6 + [24])
	*($13 + [28]) = ($6 + [40])
	*($13 + [32]) = ($6 + [56])
	*($13 + [36]) = ($6 + [72])
	*($13 + [40]) = ($6 + [88])
	CALL $17(($13 + [16]), $13)
	CALL db_update_i64(*($6 + [100]), $10, ($13 + [96]), [96])
	$6 = ($13 + [72])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$3 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1072]
	$9 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$9 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$4 = ($4 + [165])
	goto $label$7 
	
.LABEL $label$9
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$5
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$4 }
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [656]
	$11 = (int_64)0
	
.LOOP $label$10:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$11 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$4 = ($4 + [165])
	goto $label$12 
	
.LABEL $label$13
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$11
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$7 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$10 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1264]
	$12 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$19 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$4 = ($4 + [165])
	goto $label$17 
	
.LABEL $label$19
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$14 }
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	$6 = CALL strlen([1280])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$22 }
	*($13) = ($6 << [1])
	$4 = ($13 | [1])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$5 = (($6 + [16]) & [-16])
	$4 = CALL $63($5)
	*($13) = ($5 | [1])
	*($13 + [8]) = $4
	*($13 + [4]) = $6
	
.LABEL $label$21
	CALL memcpy($4, [1280], $6)
	
.LABEL $label$20
	*(($4 + $6)) = [0]
	*((($13 + [96]) + [28])) = *(($2 + [12]))
	*((($13 + [96]) + [24])) = *(($2 + [8]))
	*((($13 + [96]) + [20])) = *(($2 + [4]))
	*($13 + [104]) = $1
	*($13 + [96]) = *($0)
	*($13 + [112]) = *($2)
	$6 = ($13 + [8])
	*(($13 + [136])) = *($6)
	*($13 + [128]) = *($13)
	*($13) = [0]
	*($13 + [4]) = [0]
	*($6) = [0]
	*($13 + [16]) = $11
	*($13 + [24]) = $12
	*(($6 = CALL $63([16]))) = $3
	*($6 + [8]) = $9
	*((($13 + [16]) + [32])) = [0]
	$4 = ($6 + [16])
	*((($13 + [16]) + [24])) = $4
	*((($13 + [16]) + [20])) = $4
	*($13 + [32]) = $6
	*($13 + [44]) = [0]
	*((($13 + [16]) + [36])) = [0]
	$6 = *($13 + [128])
	$4 = ( *((($13 + [96]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($4 + [32])
	$8 = (CASTING uint_64)(uint_32 $4)
	$4 = (($13 + [16]) + [28])
	
.LOOP $label$23:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$23 }
	if ( ($6 == 0) ){ goto $label$25 }
	CALL $39($4, $6)
	$4 = *(($13 + [48]))
	$6 = *(($13 + [44]))
	goto $label$24 
	
.LABEL $label$25
	$4 = [0]
	$6 = [0]
	
.LABEL $label$24
	*($13 + [212]) = $6
	*($13 + [208]) = $6
	*($13 + [216]) = $4
	*($13 + [192]) = ($13 + [208])
	*($13 + [200]) = ($13 + [96])
	CALL $46(($13 + [200]), ($13 + [192]))
	CALL $47(($13 + [208]), ($13 + [16]))
	$6 = *($13 + [208])
	CALL send_inline($6, (*($13 + [212]) - $6))
	$6 = *($13 + [208])
	if ( ($6 == 0) ){ goto $label$26 }
	*($13 + [212]) = $6
	CALL $64($6)
	
.LABEL $label$26
	$6 = *($13 + [44])
	if ( ($6 == 0) ){ goto $label$27 }
	*(($13 + [48])) = $6
	CALL $64($6)
	
.LABEL $label$27
	$6 = *($13 + [32])
	if ( ($6 == 0) ){ goto $label$28 }
	*(($13 + [36])) = $6
	CALL $64($6)
	
.LABEL $label$28
	if ( ((*(($13 + [128])) & [1]) == 0) ){ goto $label$29 }
	CALL $64(*(($13 + [136])))
	
.LABEL $label$29
	if ( ((*($13) & [1]) == 0) ){ goto $label$2 }
	CALL $64(*(($13 + [8])))
	
.LABEL $label$2
	$0 = *($13 + [80])
	if ( ($0 == 0) ){ goto $label$30 }
	$2 = ($13 + [84])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$32 }
	
.LOOP $label$33:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$34 }
	CALL $64($4)
	
.LABEL $label$34
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$33 }
	$6 = *(($13 + [80]))
	goto $label$31 
	
.LABEL $label$32
	$6 = $0
	
.LABEL $label$31
	*($2) = $0
	CALL $64($6)
	
.LABEL $label$30
	*([0] + [4]) = ($13 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $65($13)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [240])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [240])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [240])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1504]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1520]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [1536])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1392]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1264]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [656]
	$7 = (int_64)0
	
.LOOP $label$29:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$30 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$33 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1264]
	$7 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$39 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$3 = ($3 + [165])
	goto $label$37 
	
.LABEL $label$39
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$35
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$34 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$33
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1264]
	$7 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$45 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$3 = ($3 + [165])
	goto $label$43 
	
.LABEL $label$45
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$41
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$40 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL _ZN5hello5helloC2Ey(($9 + [88]), $0)
	if ( ((int_64)$2 <= (int_64)-4992121821936484353) ){ goto $label$49 }
	if ( ((int_64)$2 == (int_64)-4992121821936484352) ){ goto $label$48 }
	if ( ((int_64)$2 == (int_64)6485183463413514240) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$20 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [1]
	*($9 + [8 align=4]) = *($9 + [80])
	CALL $52($4, ($9 + [8]))
	goto $label$20 
	
.LABEL $label$49
	if ( ((int_64)$2 == (int_64)-5003315098341605376) ){ goto $label$46 }
	if ( ((int_64)$2 != (int_64)-4992121834821386240) ){ goto $label$20 }
	*($9 + [76]) = [0]
	*($9 + [72]) = [2]
	*($9 + [16 align=4]) = *($9 + [72])
	CALL $53($4, ($9 + [16]))
	goto $label$20 
	
.LABEL $label$48
	*($9 + [52]) = [0]
	*($9 + [48]) = [3]
	*($9 + [40 align=4]) = *($9 + [48])
	CALL $53($4, ($9 + [40]))
	goto $label$20 
	
.LABEL $label$47
	*($9 + [68]) = [0]
	*($9 + [64]) = [4]
	*($9 + [24 align=4]) = *($9 + [64])
	CALL $54($4, ($9 + [24]))
	goto $label$20 
	
.LABEL $label$46
	*($9 + [60]) = [0]
	*($9 + [56]) = [5]
	*($9 + [32 align=4]) = *($9 + [56])
	CALL $53($4, ($9 + [32]))
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [96])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $61($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10016])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $71 ()
{
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	*($1) = (int_64)1
	$2 = *($0)
	CALL eosio_assert([1], [144])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5525573
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [208])
	*(($1 + [32])) = (int_64)1414546692
	*($1 + [24]) = (int_64)0
	$5 = $7
	$4 = ($5 + [-48])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = $5
	CALL $10($6, $1)
	$3 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $3, $4, [48])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $63(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $67($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $64($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $64($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [256])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $63([64])
	$4 = CALL $7($6)
	*($6 + [48]) = $0
	CALL $11(($8 + [32]), $4)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $64($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $7 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [32]))) = (int_64)1414546692
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [208])
	*($0 + [40]) = CALL current_time()
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN5hello5helloC2Ey (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*($0) = $1
	*(($3 = ($7 + [48]))) = [0]
	*($7 + [24]) = $1
	*($7 + [16]) = $1
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$6 = CALL db_find_i64($1, $1, (int_64)7035924439720001536, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $6(($7 + [16]), $6) + [48]) == (int_32)($7 + [16])), [16])
	$2 = *($7 + [40])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($7 + [88]) = *($0)
	CALL eosio_assert(((int_64)CALL $fimport$2() == (int_64)$1), [80])
	*($7 + [68]) = ($7 + [8])
	*($7 + [64]) = ($7 + [16])
	*($7 + [72]) = ($7 + [88])
	$6 = CALL $63([64])
	CALL $7($6)
	*($6 + [48]) = ($7 + [16])
	CALL $8(($7 + [64]), $6)
	*($7 + [80]) = $6
	$1 = *($6)
	*($7 + [64]) = $1
	$5 = *($6 + [52])
	*($7 + [60]) = $5
	$4 = ($7 + [44])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)*($3)) ){ goto $label$5 }
	*($2 + [8]) = $1
	*($2 + [16]) = $5
	*($7 + [80]) = [0]
	*($2) = $6
	*($4) = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $9(($7 + [40]), ($7 + [80]), ($7 + [64]), ($7 + [60]))
	
.LABEL $label$4
	$6 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	CALL $64($6)
	
.LABEL $label$6
	$2 = *($7 + [40])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($7 + [44])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $64($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$9 }
	$6 = *(($7 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $2
	
.LABEL $label$7
	*($5) = $2
	CALL $64($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
	return $0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN5hello5hello4gameEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [192])
	*([0] + [4]) = $14
	$12 = ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)28800) / (uint_64)(int_64)86400)
	*($14 + [112]) = $12
	$11 = [0]
	*((($14 + [72]) + [32])) = [0]
	*($14 + [88]) = (int_64)-1
	*($14 + [96]) = (int_64)0
	$8 = *($0)
	*($14 + [72]) = $8
	*($14 + [80]) = $8
	*((($14 + [32]) + [32])) = [0]
	*($14 + [40]) = $8
	*($14 + [32]) = $8
	*($14 + [48]) = (int_64)-1
	*($14 + [56]) = (int_64)0
	$13 = CALL db_find_i64($8, $8, (int_64)7035924439720001536, (int_64)1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $6(($14 + [72]), $13)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)($14 + [72])), [16])
	$12 = *($14 + [112])
	$11 = *(($14 + [56]))
	$6 = *(($14 + [60]))
	if ( ((int_32)$6 != (int_32)$11) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	if ( ((int_32)[0] == (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	$13 = ($6 + [-24])
	$3 = ([0] - $11)
	
.LOOP $label$4:
	if ( ((int_64)*(*($13)) == (int_64)$12) ){ goto $label$1 }
	$6 = $13
	$7 = ($13 + [-24])
	$13 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$7 }
	$13 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [48]) == (int_32)($14 + [32])), [16])
	if ( $13 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL db_find_i64(*($14 + [32]), *(($14 + [40])), (int_64)7035924439720001536, $12)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $6(($14 + [32]), $13) + [48]) == (int_32)($14 + [32])), [16])
	goto $label$5 
	
.LABEL $label$6
	$12 = *($0)
	*($14 + [24]) = ($14 + [112])
	*($14 + [8]) = $12
	CALL eosio_assert(((int_64)*($14 + [32]) == (int_64)CALL $fimport$2()), [80])
	*($14 + [132]) = ($14 + [24])
	*($14 + [128]) = ($14 + [32])
	*($14 + [136]) = ($14 + [8])
	$13 = CALL $63([64])
	CALL $7($13)
	*($13 + [48]) = ($14 + [32])
	CALL $21(($14 + [128]), $13)
	*($14 + [176]) = $13
	$12 = *($13)
	*($14 + [128]) = $12
	$6 = *($13 + [52])
	*($14 + [124]) = $6
	$3 = ($14 + [60])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($14 + [64]))) ){ goto $label$9 }
	*($7 + [8]) = $12
	*($7 + [16]) = $6
	*($14 + [176]) = [0]
	*($7) = $13
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($14 + [56]), ($14 + [176]), ($14 + [128]), ($14 + [124]))
	
.LABEL $label$8
	$13 = *($14 + [176])
	*($14 + [176]) = [0]
	if ( ($13 == 0) ){ goto $label$5 }
	CALL $64($13)
	
.LABEL $label$5
	$12 = *($14 + [112])
	$11 = *(($14 + [56]))
	$6 = *(($14 + [60]))
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$10 }
	$13 = ($6 + [-24])
	$3 = ([0] - $11)
	
.LOOP $label$11:
	if ( ((int_64)*(*($13)) == (int_64)$12) ){ goto $label$10 }
	$6 = $13
	$7 = ($13 + [-24])
	$13 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$13 }
	$13 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [48]) == (int_32)($14 + [32])), [16])
	goto $label$12 
	
.LABEL $label$13
	$13 = [0]
	$7 = CALL db_find_i64(*($14 + [32]), *(($14 + [40])), (int_64)7035924439720001536, $12)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	$13 = CALL $6(($14 + [32]), $7)
	CALL eosio_assert(((int_32)*($13 + [48]) == (int_32)($14 + [32])), [16])
	
.LABEL $label$12
	$12 = *($1 + [8])
	if ( ((int_64)$12 != (int_64)1414546692) ){ goto $label$17 }
	CALL $22(($14 + [8]), $0)
	$8 = *($2 + [24])
	$7 = ($2 + [32])
	$4 = *($7)
	CALL eosio_assert(((int_64)$12 == (int_64)$4), [480])
	$9 = *($1)
	$5 = ((int_64)$8 + (int_64)$9)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [560])
	$10 = *($0)
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)($14 + [72])), [368])
	CALL eosio_assert(((int_64)*($14 + [72]) == (int_64)CALL $fimport$2()), [416])
	$8 = *($2)
	CALL eosio_assert(((int_64)$12 == (int_64)*($7)), [480])
	$12 = ((int_64)$9 + (int_64)*($2 + [24]))
	*($2 + [24]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)*($2 + [24]) < (int_64)4611686018427387904), [560])
	*($2 + [40]) = CALL current_time()
	CALL eosio_assert(((int_64)$8 == (int_64)*($2)), [592])
	$7 = (($14 + [128]) + [48])
	*($14 + [184]) = $7
	*($14 + [180]) = ($14 + [128])
	*($14 + [176]) = ($14 + [128])
	CALL $10(($14 + [176]), $2)
	CALL db_update_i64(*($2 + [52]), $10, ($14 + [128]), [48])
	$6 = (($14 + [72]) + [16])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$18 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	$8 = *($0)
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($13 + [48]) == (int_32)($14 + [32])), [368])
	CALL eosio_assert(((int_64)*($14 + [32]) == (int_64)CALL $fimport$2()), [416])
	*($13 + [24]) = $5
	*(($13 + [32])) = $4
	$12 = *($13)
	*($13 + [40]) = CALL current_time()
	CALL eosio_assert(((int_64)$12 == (int_64)*($13)), [592])
	*($14 + [184]) = $7
	*($14 + [180]) = ($14 + [128])
	*($14 + [176]) = ($14 + [128])
	CALL $10(($14 + [176]), $13)
	CALL db_update_i64(*($13 + [52]), $8, ($14 + [128]), [48])
	if ( (uint_64)($12 <= *((($14 + [32]) + [16]))) ){ goto $label$16 }
	*(($14 + [48])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	$6 = *($14 + [56])
	if ( $6 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ((int_64)$12 != (int_64)1397703940) ){ goto $label$16 }
	$5 = *($0)
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)($14 + [72])), [368])
	CALL eosio_assert(((int_64)*($14 + [72]) == (int_64)CALL $fimport$2()), [416])
	$8 = *($2)
	CALL eosio_assert(((int_64)$12 == (int_64)*(($2 + [16]))), [480])
	$4 = ((int_64)*($2 + [8]) + (int_64)*($1))
	*($2 + [8]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)*($2 + [8]) < (int_64)4611686018427387904), [560])
	*($2 + [40]) = CALL current_time()
	CALL eosio_assert(((int_64)$8 == (int_64)*($2)), [592])
	$7 = (($14 + [128]) + [48])
	*($14 + [16]) = $7
	*($14 + [12]) = ($14 + [128])
	*($14 + [8]) = ($14 + [128])
	CALL $10(($14 + [8]), $2)
	CALL db_update_i64(*($2 + [52]), $5, ($14 + [128]), [48])
	$6 = (($14 + [72]) + [16])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$19 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	$5 = *($0)
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($13 + [48]) == (int_32)($14 + [32])), [368])
	CALL eosio_assert(((int_64)*($14 + [32]) == (int_64)CALL $fimport$2()), [416])
	$8 = *($13)
	CALL eosio_assert(((int_64)$12 == (int_64)*(($13 + [16]))), [480])
	$12 = ((int_64)*($13 + [8]) + (int_64)*($1))
	*($13 + [8]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)*($13 + [8]) < (int_64)4611686018427387904), [560])
	*($13 + [40]) = CALL current_time()
	CALL eosio_assert(((int_64)$8 == (int_64)*($13)), [592])
	*($14 + [16]) = $7
	*($14 + [12]) = ($14 + [128])
	*($14 + [8]) = ($14 + [128])
	CALL $10(($14 + [8]), $13)
	CALL db_update_i64(*($13 + [52]), $5, ($14 + [128]), [48])
	if ( (uint_64)($8 <= *((($14 + [32]) + [16]))) ){ goto $label$16 }
	*(($14 + [48])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	$6 = *($14 + [56])
	if ( ($6 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$3 = ($14 + [60])
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$21 }
	
.LOOP $label$22:
	$13 = ($13 + [-24])
	$7 = *($13)
	*($13) = [0]
	if ( ($7 == 0) ){ goto $label$23 }
	CALL $64($7)
	
.LABEL $label$23
	if ( ((int_32)$6 != (int_32)$13) ){ goto $label$22 }
	$13 = *(($14 + [56]))
	goto $label$20 
	
.LABEL $label$21
	$13 = $6
	
.LABEL $label$20
	*($3) = $6
	CALL $64($13)
	
.LABEL $label$14
	$6 = *($14 + [96])
	if ( ($6 == 0) ){ goto $label$24 }
	$3 = ($14 + [100])
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$26 }
	
.LOOP $label$27:
	$13 = ($13 + [-24])
	$7 = *($13)
	*($13) = [0]
	if ( ($7 == 0) ){ goto $label$28 }
	CALL $64($7)
	
.LABEL $label$28
	if ( ((int_32)$6 != (int_32)$13) ){ goto $label$27 }
	$13 = *(($14 + [96]))
	goto $label$25 
	
.LABEL $label$26
	$13 = $6
	
.LABEL $label$25
	*($3) = $6
	CALL $64($13)
	
.LABEL $label$24
	*([0] + [4]) = ($14 + [192])
}

void .FUNC _ZN5hello5hello8userinfoEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [208])
	*([0] + [4]) = $7
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$3 = *($0)
	*($7 + [8]) = $3
	*($7 + [16]) = $3
	$6 = CALL db_find_i64($3, $3, (int_64)-3020376800539705344, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $18(($7 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)($7 + [8])), [16])
	$1 = *($0)
	CALL eosio_assert([1], [320])
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)($7 + [8])), [368])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$2()), [416])
	$3 = *($6)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($6 + [16]))), [480])
	$4 = ((int_64)*($6 + [8]) + (int_64)*($2))
	*($6 + [8]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)*($6 + [8]) < (int_64)4611686018427387904), [560])
	CALL eosio_assert(((int_64)$3 == (int_64)*($6)), [592])
	*($7 + [160]) = (($7 + [48]) + [96])
	*($7 + [156]) = ($7 + [48])
	*($7 + [152]) = ($7 + [48])
	*($7 + [168]) = ($7 + [152])
	*($7 + [180]) = ($6 + [8])
	*($7 + [176]) = $6
	*($7 + [184]) = ($6 + [24])
	*($7 + [188]) = ($6 + [40])
	*($7 + [192]) = ($6 + [56])
	*($7 + [196]) = ($6 + [72])
	*($7 + [200]) = ($6 + [88])
	CALL $17(($7 + [176]), ($7 + [168]))
	CALL db_update_i64(*($6 + [100]), $1, ($7 + [48]), [96])
	$6 = (($7 + [8]) + [16])
	if ( (uint_64)($3 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$0 = *($7 + [32])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$2()), [80])
	$6 = CALL $63([112])
	CALL $16($6)
	*($6 + [96]) = ($7 + [8])
	*($6) = $1
	*(($6 + [20])) = *(($2 + [12]))
	*(($6 + [16])) = *(($2 + [8]))
	*(($6 + [12])) = *(($2 + [4]))
	*($6 + [8]) = *($2)
	*($7 + [160]) = (($7 + [48]) + [96])
	*($7 + [156]) = ($7 + [48])
	*($7 + [152]) = ($7 + [48])
	*($7 + [168]) = ($7 + [152])
	*($7 + [180]) = ($6 + [8])
	*($7 + [176]) = $6
	*($7 + [184]) = ($6 + [24])
	*($7 + [188]) = ($6 + [40])
	*($7 + [192]) = ($6 + [56])
	*($7 + [196]) = ($6 + [72])
	*($7 + [200]) = ($6 + [88])
	CALL $17(($7 + [176]), ($7 + [168]))
	$3 = *($6)
	$0 = CALL db_store_i64(*((($7 + [8]) + [8])), (int_64)-3020376800539705344, $4, $3, ($7 + [48]), [96])
	*($6 + [100]) = $0
	$2 = (($7 + [8]) + [16])
	if ( (uint_64)($3 <= *($2)) ){ goto $label$5 }
	*($2) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($7 + [176]) = $6
	$3 = *($6)
	*($7 + [48]) = $3
	*($7 + [152]) = $0
	$5 = ($7 + [36])
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*(($7 + [40]))) ){ goto $label$7 }
	*($2 + [8]) = $3
	*($2 + [16]) = $0
	*($7 + [176]) = [0]
	*($2) = $6
	*($5) = ($2 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $19(($7 + [32]), ($7 + [176]), ($7 + [48]), ($7 + [152]))
	
.LABEL $label$6
	$6 = *($7 + [176])
	*($7 + [176]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $64($6)
	
.LABEL $label$3
	$0 = *($7 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $64($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($7 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $0
	
.LABEL $label$8
	*($5) = $0
	CALL $64($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [208])
}

int_32 .FUNC $16 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1414546692
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [32]))) = (int_64)1414546692
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [48]))) = (int_64)1414546692
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [80]))) = (int_64)1397703940
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [208])
	*($0 + [88]) = CALL current_time()
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [240])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [240])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [240])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [240])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [240])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN5hello5hello8transferEyyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	$5 = *($0)
	if ( ((int_64)$5 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$5 == (int_64)$1) ){ goto $label$1 }
	$2 = CALL $13($0)
	CALL prints([304])
	CALL printui($2)
	$2 = *($3 + [8])
	if ( ((int_64)$2 != (int_64)1414546692) ){ goto $label$2 }
	$6 = ($3 + [8])
	$2 = *($6)
	*((($8 + [80]) + [8])) = $2
	$5 = *($3)
	*((($8 + [16]) + [8])) = $2
	*($8 + [80]) = $5
	*($8 + [20]) = *($8 + [84])
	*($8 + [16]) = *($8 + [80])
	CALL _ZN5hello5hello4gameEN5eosio5assetE($0, ($8 + [16]))
	*(($7 = (($8 + [64]) + [8]))) = *($6)
	$2 = *($3)
	*(($8 + [12])) = *((($8 + [64]) + [12]))
	*(($8 + [8])) = *($7)
	*($8 + [64]) = $2
	*($8 + [4]) = *($8 + [68])
	*($8) = *($8 + [64])
	CALL _ZN5hello5hello8userinfoEyN5eosio5assetE($0, $1, $8)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$2 != (int_64)1397703940) ){ goto $label$1 }
	$1 = *(($3 + [8]))
	*((($8 + [48]) + [8])) = $1
	$2 = *($3)
	*((($8 + [32]) + [8])) = $1
	*($8 + [48]) = $2
	*($8 + [36]) = *($8 + [52])
	*($8 + [32]) = *($8 + [48])
	CALL _ZN5hello5hello4gameEN5eosio5assetE($0, ($8 + [32]))
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [96])
}

int_64 .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	$3 = *($0)
	*($5 + [16]) = $3
	*($5 + [24]) = $3
	*($5 + [40]) = (int_64)0
	$2 = CALL db_lowerbound_i64($3, $3, (int_64)-4161105256143912960, (int_64)0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$2 = CALL $28(($5 + [16]), $2)
	*($5 + [8]) = (int_64)1
	*($5 + [8]) = ((int_64)*($2) + (int_64)1)
	CALL eosio_assert([1], [752])
	CALL eosio_assert([1], [800])
	$1 = CALL db_next_i64(*($2 + [12]), ($5 + [56]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	CALL $28(($5 + [16]), $1)
	
.LABEL $label$3
	CALL $29(($5 + [16]), $2)
	$3 = *($0)
	*($5) = ($5 + [8])
	CALL $30(($5 + [56]), ($5 + [16]), $3, $5)
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = (int_64)1
	CALL $27(($5 + [56]), ($5 + [16]), *($0), $5)
	
.LABEL $label$1
	$3 = *($5 + [8])
	$1 = *($5 + [40])
	if ( ($1 == 0) ){ goto $label$4 }
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $64($2)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($5 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $1
	
.LABEL $label$5
	*($4) = $1
	CALL $64($0)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [64])
	return $3
}

int_32 .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $64($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $64($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $64($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $64($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $64($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $64($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $64($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $64($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	*($1) = *(*(*($0 + [4])))
	$2 = *($0)
	CALL eosio_assert([1], [144])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5525573
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [208])
	*(($1 + [32])) = (int_64)1414546692
	*($1 + [24]) = (int_64)0
	$5 = $7
	$4 = ($5 + [-48])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = $5
	CALL $10($6, $1)
	$3 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $3, $4, [48])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $38($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $39($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $40($4, $1)
	CALL $42(CALL $41(CALL $41($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC _ZN5hello5hello10rewardgameEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [176])
	*([0] + [4]) = $12
	$9 = ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)28800) / (uint_64)(int_64)86400)
	*($12 + [88]) = $9
	$8 = [0]
	*((($12 + [48]) + [32])) = [0]
	*($12 + [64]) = (int_64)-1
	*($12 + [72]) = (int_64)0
	$6 = *($0)
	*($12 + [48]) = $6
	*($12 + [56]) = $6
	*((($12 + [8]) + [32])) = [0]
	*($12 + [16]) = $6
	*($12 + [8]) = $6
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = (int_64)0
	$11 = CALL db_find_i64($6, $6, (int_64)7035924439720001536, (int_64)1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $6(($12 + [48]), $11)
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)($12 + [48])), [16])
	$9 = *($12 + [88])
	$8 = *(($12 + [32]))
	$4 = *(($12 + [36]))
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	$10 = [0]
	if ( ((int_32)[0] == (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	$11 = ($4 + [-24])
	$2 = ([0] - $8)
	
.LOOP $label$4:
	if ( ((int_64)*(*($11)) == (int_64)$9) ){ goto $label$1 }
	$4 = $11
	$5 = ($11 + [-24])
	$11 = $5
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$7 }
	$11 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)($12 + [8])), [16])
	if ( $11 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$11 = CALL db_find_i64(*($12 + [8]), *(($12 + [16])), (int_64)7035924439720001536, $9)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $6(($12 + [8]), $11) + [48]) == (int_32)($12 + [8])), [16])
	goto $label$5 
	
.LABEL $label$6
	$9 = *($0)
	*($12) = ($12 + [88])
	*($12 + [160]) = $9
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)CALL $fimport$2()), [80])
	*($12 + [116]) = $12
	*($12 + [112]) = ($12 + [8])
	*($12 + [120]) = ($12 + [160])
	$11 = CALL $63([64])
	CALL $7($11)
	*($11 + [48]) = ($12 + [8])
	CALL $37(($12 + [112]), $11)
	*($12 + [104]) = $11
	$9 = *($11)
	*($12 + [112]) = $9
	$4 = *($11 + [52])
	*($12 + [100]) = $4
	$2 = ($12 + [36])
	$5 = *($2)
	if ( ((uint_32)$5 >= (uint_32)*(($12 + [40]))) ){ goto $label$9 }
	*($5 + [8]) = $9
	*($5 + [16]) = $4
	*($12 + [104]) = [0]
	*($5) = $11
	*($2) = ($5 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($12 + [32]), ($12 + [104]), ($12 + [112]), ($12 + [100]))
	
.LABEL $label$8
	$11 = *($12 + [104])
	*($12 + [104]) = [0]
	if ( ($11 == 0) ){ goto $label$5 }
	CALL $64($11)
	
.LABEL $label$5
	$9 = *($12 + [88])
	$8 = *(($12 + [32]))
	$4 = *(($12 + [36]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$10 }
	$11 = ($4 + [-24])
	$2 = ([0] - $8)
	
.LOOP $label$11:
	if ( ((int_64)*(*($11)) == (int_64)$9) ){ goto $label$10 }
	$4 = $11
	$5 = ($11 + [-24])
	$11 = $5
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$13 }
	$11 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)($12 + [8])), [16])
	goto $label$12 
	
.LABEL $label$13
	$11 = [0]
	$5 = CALL db_find_i64(*($12 + [8]), *(($12 + [16])), (int_64)7035924439720001536, $9)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$11 = CALL $6(($12 + [8]), $5)
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)($12 + [8])), [16])
	
.LABEL $label$12
	CALL prints([1104])
	CALL printui(*($12 + [88]))
	if ( ($10 == 0) ){ goto $label$14 }
	$9 = *($10 + [24])
	$5 = ($10 + [32])
	$3 = *($5)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)$3), [1152])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($9 - *($1))) > (int_64)-4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [1232])
	$7 = *($0)
	CALL eosio_assert([1], [320])
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)($12 + [48])), [368])
	CALL eosio_assert(((int_64)*($12 + [48]) == (int_64)CALL $fimport$2()), [416])
	*($10 + [24]) = $9
	*($5) = $3
	$6 = *($10)
	*($10 + [40]) = CALL current_time()
	CALL eosio_assert(((int_64)$6 == (int_64)*($10)), [592])
	$5 = (($12 + [112]) + [48])
	*($12 + [168]) = $5
	*($12 + [164]) = ($12 + [112])
	*($12 + [160]) = ($12 + [112])
	CALL $10(($12 + [160]), $10)
	CALL db_update_i64(*($10 + [52]), $7, ($12 + [112]), [48])
	$4 = (($12 + [48]) + [16])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$15 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$6 = *($0)
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)($12 + [8])), [368])
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)CALL $fimport$2()), [416])
	*($11 + [24]) = $9
	*(($11 + [32])) = $3
	$9 = *($11)
	*($11 + [40]) = CALL current_time()
	CALL eosio_assert(((int_64)$9 == (int_64)*($11)), [592])
	*($12 + [168]) = $5
	*($12 + [164]) = ($12 + [112])
	*($12 + [160]) = ($12 + [112])
	CALL $10(($12 + [160]), $11)
	CALL db_update_i64(*($11 + [52]), $6, ($12 + [112]), [48])
	if ( (uint_64)($9 <= *((($12 + [8]) + [16]))) ){ goto $label$14 }
	*(($12 + [24])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$4 = *($12 + [32])
	if ( ($4 == 0) ){ goto $label$16 }
	$2 = ($12 + [36])
	$11 = *($2)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$18 }
	
.LOOP $label$19:
	$11 = ($11 + [-24])
	$5 = *($11)
	*($11) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	CALL $64($5)
	
.LABEL $label$20
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$19 }
	$11 = *(($12 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$11 = $4
	
.LABEL $label$17
	*($2) = $4
	CALL $64($11)
	
.LABEL $label$16
	$4 = *($12 + [72])
	if ( ($4 == 0) ){ goto $label$21 }
	$2 = ($12 + [76])
	$11 = *($2)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$23 }
	
.LOOP $label$24:
	$11 = ($11 + [-24])
	$5 = *($11)
	*($11) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	CALL $64($5)
	
.LABEL $label$25
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$24 }
	$11 = *(($12 + [72]))
	goto $label$22 
	
.LABEL $label$23
	$11 = $4
	
.LABEL $label$22
	*($2) = $4
	CALL $64($11)
	
.LABEL $label$21
	*([0] + [4]) = ($12 + [176])
}

void .FUNC _ZN5hello5hello6rewardEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [320])
	*([0] + [4]) = $15
	CALL $22(($15 + [144]), $0)
	CALL prints([1008])
	CALL printi(*($15 + [144]))
	CALL require_auth($1)
	$3 = *($2 + [8])
	if ( ((int_64)$3 != (int_64)1414546692) ){ goto $label$1 }
	*(($15 + [136])) = [0]
	*($15 + [120]) = (int_64)-1
	*($15 + [128]) = (int_64)0
	$11 = *($0)
	*($15 + [104]) = $11
	*($15 + [112]) = $11
	$14 = CALL db_find_i64($11, $11, (int_64)-3020376800539705344, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $18(($15 + [104]), $14)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)($15 + [104])), [16])
	$4 = *($2)
	if ( ((int_64))(*($8 + [8]) - *($8 + [24])) >= (int_64)$4) ){ goto $label$4 }
	CALL eosio_assert([0], [1040])
	$8 = *($15 + [128])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$5 = CALL $13($0)
	$11 = CALL current_time()
	*(($15 + [68])) = [0]
	*(($15 + [72])) = [0]
	*($15 + [52]) = [0]
	*($15 + [56]) = [0]
	*($15 + [60]) = [0]
	*($15 + [64]) = [0]
	*($15 + [40]) = ((CASTING uint_32)(uint_64 ((uint_64)$11 / (uint_64)(int_64)1000000)) + [60])
	*($15 + [76]) = [0]
	*(($15 + [80])) = [0]
	*(($15 + [84])) = [0]
	*($15 + [88]) = [0]
	*(($15 + [92])) = [0]
	*(($15 + [96])) = [0]
	$7 = ($15 + [76])
	$6 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$14 = [1072]
	$12 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$10 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$9 = ($9 + [165])
	goto $label$8 
	
.LABEL $label$10
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$6
	$14 = ($14 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$5 }
	*($15 + [296]) = $12
	*($15 + [288]) = $6
	$11 = (int_64)0
	$10 = (int_64)59
	$14 = [1088]
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$11 > (uint_64)(int_64)6) ){ goto $label$16 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$9 = ($9 + [165])
	goto $label$14 
	
.LABEL $label$16
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$12
	$14 = ($14 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$11 }
	*($15 + [264]) = $12
	*((($15 + [160]) + [20])) = *(($2 + [12]))
	$9 = ($2 + [8])
	*((($15 + [160]) + [16])) = *($9)
	*((($15 + [160]) + [12])) = *(($2 + [4]))
	*($15 + [160]) = $1
	*($15 + [168]) = *($2)
	CALL $33($7, ($15 + [288]), $0, ($15 + [264]), ($15 + [160]))
	$11 = *($0)
	*((($15 + [40]) + [20])) = [43200]
	*($15 + [168]) = (int_64)0
	*($15 + [160]) = $5
	CALL $34(($15 + [288]), ($15 + [40]))
	$14 = *($15 + [288])
	CALL send_deferred(($15 + [160]), $11, $14, (*($15 + [292]) - $14), [0])
	$14 = *($15 + [288])
	if ( ($14 == 0) ){ goto $label$17 }
	*($15 + [292]) = $14
	CALL $64($14)
	
.LABEL $label$17
	$13 = *($0)
	CALL eosio_assert([1], [320])
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)($15 + [104])), [368])
	CALL eosio_assert(((int_64)*($15 + [104]) == (int_64)CALL $fimport$2()), [416])
	$11 = *($8)
	CALL eosio_assert(((int_64)$3 == (int_64)*(($8 + [32]))), [480])
	$10 = ((int_64)*($8 + [24]) + (int_64)$4)
	*($8 + [24]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)*($8 + [24]) < (int_64)4611686018427387904), [560])
	*(($8 + [48])) = *($9)
	*($8 + [40]) = *($2)
	CALL eosio_assert(((int_64)$11 == (int_64)*($8)), [592])
	*($15 + [272]) = (($15 + [160]) + [96])
	*($15 + [268]) = ($15 + [160])
	*($15 + [264]) = ($15 + [160])
	*($15 + [280]) = ($15 + [264])
	*($15 + [292]) = ($8 + [8])
	*($15 + [288]) = $8
	*($15 + [296]) = ($8 + [24])
	*($15 + [300]) = ($8 + [40])
	*($15 + [304]) = ($8 + [56])
	*($15 + [308]) = ($8 + [72])
	*($15 + [312]) = ($8 + [88])
	CALL $17(($15 + [288]), ($15 + [280]))
	CALL db_update_i64(*($8 + [100]), $13, ($15 + [160]), [96])
	if ( (uint_64)($11 <= *((($15 + [104]) + [16]))) ){ goto $label$18 }
	*(($15 + [120])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*(($14 = (($15 + [24]) + [8]))) = *(($2 + [8]))
	$11 = *($2)
	*((($15 + [8]) + [12])) = *((($15 + [24]) + [12]))
	*((($15 + [8]) + [8])) = *($14)
	*($15 + [24]) = $11
	*($15 + [12]) = *($15 + [28])
	*($15 + [8]) = *($15 + [24])
	CALL _ZN5hello5hello10rewardgameEN5eosio5assetE($0, ($15 + [8]))
	CALL $36(($15 + [40]))
	
.LABEL $label$3
	$8 = *($15 + [128])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$0 = ($15 + [132])
	$14 = *($0)
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$20 }
	
.LOOP $label$21:
	$14 = ($14 + [-24])
	$9 = *($14)
	*($14) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	CALL $64($9)
	
.LABEL $label$22
	if ( ((int_32)$8 != (int_32)$14) ){ goto $label$21 }
	$14 = *(($15 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$14 = $8
	
.LABEL $label$19
	*($0) = $8
	CALL $64($14)
	
.LABEL $label$1
	*([0] + [4]) = ($15 + [320])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $63(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $67($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $63([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $39(($8 + [28]), [24])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [240])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [240])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [240])
	CALL memcpy(($2 + [16]), ($4 + [16]), [8])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $64($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $64($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $64($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [80])
	*(($4 = CALL $63([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [240])
	CALL memcpy(($8 + [16]), $4, [8])
	$5 = *($4)
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-4161105256143912960, $2, $5, ($8 + [16]), [8])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [12])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $31(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $64($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $63(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $67($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $64($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $64($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1616])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $39($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [288])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $60([1620], $0)
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10102]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10104])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10102]) = [1]
	$7 = ($7 << [16])
	*([0] + [10104]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10104])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10104]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10102]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10102]) = [1]
	$3 = ($3 << [16])
	*([0] + [10104]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10104])
	
.LABEL $label$8
	*([0] + [10104]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10108])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $64 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC _ZN5hello5hello2fcEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [288])
	*([0] + [4]) = $15
	CALL require_auth(*($0))
	$13 = [0]
	*((($15 + [88]) + [32])) = [0]
	*($15 + [104]) = (int_64)-1
	*($15 + [112]) = (int_64)0
	$10 = *($0)
	*($15 + [88]) = $10
	*($15 + [96]) = $10
	*((($15 + [48]) + [32])) = [0]
	*($15 + [56]) = $1
	*($15 + [48]) = $10
	*($15 + [64]) = (int_64)-1
	*($15 + [72]) = (int_64)0
	*((($15 + [8]) + [32])) = [0]
	*($15 + [16]) = $10
	*($15 + [8]) = $10
	*($15 + [24]) = (int_64)-1
	*($15 + [32]) = (int_64)0
	$14 = CALL db_find_i64($10, $10, (int_64)7035924439720001536, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $6(($15 + [88]), $14)
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)($15 + [88])), [16])
	$13 = *(($15 + [112]))
	$6 = *(($15 + [116]))
	if ( ((int_32)$6 != (int_32)$13) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$11 = [0]
	if ( ((int_32)[0] == (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	$14 = ($6 + [-24])
	$3 = ([0] - $13)
	
.LOOP $label$4:
	if ( ((int_64)*(*($14)) == (int_64)1) ){ goto $label$1 }
	$6 = $14
	$7 = ($14 + [-24])
	$14 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$6 }
	$12 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)($15 + [88])), [16])
	goto $label$5 
	
.LABEL $label$6
	$12 = [0]
	$14 = CALL db_find_i64(*($15 + [88]), *(($15 + [96])), (int_64)7035924439720001536, (int_64)1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $6(($15 + [88]), $14)
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)($15 + [88])), [16])
	
.LABEL $label$5
	$13 = *(($15 + [32]))
	$6 = *(($15 + [36]))
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$7 }
	$14 = ($6 + [-24])
	$3 = ([0] - $13)
	
.LOOP $label$8:
	if ( ((int_64)*(*($14)) == (int_64)$1) ){ goto $label$7 }
	$6 = $14
	$7 = ($14 + [-24])
	$14 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$10 }
	$13 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [96]) == (int_32)($15 + [8])), [16])
	goto $label$9 
	
.LABEL $label$10
	$13 = [0]
	$14 = CALL db_find_i64(*($15 + [8]), *(($15 + [16])), (int_64)-3020376800539705344, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$9 }
	$13 = CALL $18(($15 + [8]), $14)
	CALL eosio_assert(((int_32)*($13 + [96]) == (int_32)($15 + [8])), [16])
	
.LABEL $label$9
	$4 = *(($15 + [72]))
	$6 = *(($15 + [76]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$11 }
	$14 = ($6 + [-24])
	$3 = ([0] - $4)
	
.LOOP $label$12:
	if ( ((int_64)*(*($14)) == (int_64)$2) ){ goto $label$11 }
	$6 = $14
	$7 = ($14 + [-24])
	$14 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*(*(($6 + [-24])) + [48]) == (int_32)($15 + [48])), [16])
	goto $label$13 
	
.LABEL $label$14
	$14 = CALL db_find_i64(*($15 + [48]), *(($15 + [56])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $6(($15 + [48]), $14) + [48]) == (int_32)($15 + [48])), [16])
	
.LABEL $label$13
	$4 = *(($15 + [72]))
	$6 = *(($15 + [76]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$15 }
	$14 = ($6 + [-24])
	$3 = ([0] - $4)
	
.LOOP $label$16:
	if ( ((int_64)*(*($14)) == (int_64)$2) ){ goto $label$15 }
	$6 = $14
	$7 = ($14 + [-24])
	$14 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$18 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($15 + [48])), [16])
	goto $label$17 
	
.LABEL $label$18
	$6 = [0]
	$14 = CALL db_find_i64(*($15 + [48]), *(($15 + [56])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$17 }
	$6 = CALL $6(($15 + [48]), $14)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($15 + [48])), [16])
	
.LABEL $label$17
	CALL prints([1440])
	CALL prints([1456])
	if ( ($11 == 0) ){ goto $label$21 }
	CALL prints([1472])
	$8 = ((float_64)(CASTING float_64)(int_64 *($11 + [8])) / (float_64)(CASTING float_64)(int_64 *($12 + [24])))
	$9 = (Rounds 0)($8)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$1 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$7 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$7 = [0]
	
.LABEL $label$22
	CALL eosio_assert($7, [208])
	if ( ($13 == 0) ){ goto $label$21 }
	$1 = (int_64)
	if ( ((int_64)$1(*($13 + [8]) - *($13 + [24]))) <= (int_64)0) ){ goto $label$21 }
	$10 = *(($13 + [64]))
	$5 = *($13 + [56])
	CALL prints([1488])
	CALL printi($9)
	$9 = (Rounds 0)(((float_64)$8 * (float_64)(CASTING float_64)(int_64 $1)))
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$1 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$7 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$7 = [0]
	
.LABEL $label$27
	CALL eosio_assert($7, [208])
	CALL eosio_assert(((int_64)1397703940 == (int_64)$10), [480])
	$1 = ((int_64)$9 + (int_64)$5)
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [528])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [560])
	$5 = *($0)
	CALL eosio_assert([1], [320])
	CALL eosio_assert(((int_32)*($13 + [96]) == (int_32)($15 + [8])), [368])
	CALL eosio_assert(((int_64)*($15 + [8]) == (int_64)CALL $fimport$2()), [416])
	*($13 + [56]) = $1
	*(($13 + [64])) = $10
	$9 = *($13)
	CALL eosio_assert([1], [592])
	*($15 + [240]) = (($15 + [128]) + [96])
	*($15 + [236]) = ($15 + [128])
	*($15 + [232]) = ($15 + [128])
	*($15 + [248]) = ($15 + [232])
	*($15 + [260]) = ($13 + [8])
	*($15 + [256]) = $13
	*($15 + [264]) = ($13 + [24])
	*($15 + [268]) = ($13 + [40])
	*($15 + [272]) = ($13 + [56])
	*($15 + [276]) = ($13 + [72])
	*($15 + [280]) = ($13 + [88])
	CALL $17(($15 + [256]), ($15 + [248]))
	CALL db_update_i64(*($13 + [100]), $5, ($15 + [128]), [96])
	$14 = ($15 + [24])
	if ( (uint_64)($9 <= *($14)) ){ goto $label$32 }
	*($14) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$32
	$9 = *($0)
	if ( ($6 == 0) ){ goto $label$33 }
	CALL eosio_assert([1], [320])
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($15 + [48])), [368])
	CALL eosio_assert(((int_64)*($15 + [48]) == (int_64)CALL $fimport$2()), [416])
	*($6 + [8]) = $1
	*(($6 + [16])) = $10
	$1 = *($6)
	CALL eosio_assert([1], [592])
	*($15 + [264]) = (($15 + [128]) + [48])
	*($15 + [260]) = ($15 + [128])
	*($15 + [256]) = ($15 + [128])
	CALL $10(($15 + [256]), $6)
	CALL db_update_i64(*($6 + [52]), $9, ($15 + [128]), [48])
	$14 = (($15 + [48]) + [16])
	if ( (uint_64)($1 <= *($14)) ){ goto $label$21 }
	*($14) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$6 = *($15 + [32])
	if ( $6 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$33
	CALL eosio_assert(((int_64)*($15 + [48]) == (int_64)CALL $fimport$2()), [80])
	$14 = CALL $63([64])
	$7 = CALL $7($14)
	*($14 + [48]) = ($15 + [48])
	*($14 + [8]) = $1
	*($14) = $2
	*($14 + [16]) = $10
	*($15 + [264]) = (($15 + [128]) + [48])
	*($15 + [260]) = ($15 + [128])
	*($15 + [256]) = ($15 + [128])
	CALL $10(($15 + [256]), $7)
	$1 = *($14)
	$6 = CALL db_store_i64(*(($15 + [56])), (int_64)7035924439720001536, $9, $1, ($15 + [128]), [48])
	*($14 + [52]) = $6
	$7 = ($15 + [64])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$34 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$34
	*($15 + [256]) = $14
	$1 = *($14)
	*($15 + [128]) = $1
	*($15 + [232]) = $6
	$3 = ($15 + [76])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($15 + [80]))) ){ goto $label$36 }
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($15 + [256]) = [0]
	*($7) = $14
	*($3) = ($7 + [24])
	goto $label$35 
	
.LABEL $label$36
	CALL $9(($15 + [72]), ($15 + [256]), ($15 + [128]), ($15 + [232]))
	
.LABEL $label$35
	$14 = *($15 + [256])
	*($15 + [256]) = [0]
	if ( ($14 == 0) ){ goto $label$21 }
	CALL $64($14)
	
.LABEL $label$21
	$6 = *($15 + [32])
	if ( ($6 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$3 = ($15 + [36])
	$14 = *($3)
	if ( ((int_32)$14 == (int_32)$6) ){ goto $label$38 }
	
.LOOP $label$39:
	$14 = ($14 + [-24])
	$7 = *($14)
	*($14) = [0]
	if ( ($7 == 0) ){ goto $label$40 }
	CALL $64($7)
	
.LABEL $label$40
	if ( ((int_32)$6 != (int_32)$14) ){ goto $label$39 }
	$14 = *(($15 + [32]))
	goto $label$37 
	
.LABEL $label$38
	$14 = $6
	
.LABEL $label$37
	*($3) = $6
	CALL $64($14)
	
.LABEL $label$19
	$6 = *($15 + [72])
	if ( ($6 == 0) ){ goto $label$41 }
	$3 = ($15 + [76])
	$14 = *($3)
	if ( ((int_32)$14 == (int_32)$6) ){ goto $label$43 }
	
.LOOP $label$44:
	$14 = ($14 + [-24])
	$7 = *($14)
	*($14) = [0]
	if ( ($7 == 0) ){ goto $label$45 }
	CALL $64($7)
	
.LABEL $label$45
	if ( ((int_32)$6 != (int_32)$14) ){ goto $label$44 }
	$14 = *(($15 + [72]))
	goto $label$42 
	
.LABEL $label$43
	$14 = $6
	
.LABEL $label$42
	*($3) = $6
	CALL $64($14)
	
.LABEL $label$41
	$6 = *($15 + [112])
	if ( ($6 == 0) ){ goto $label$46 }
	$3 = ($15 + [116])
	$14 = *($3)
	if ( ((int_32)$14 == (int_32)$6) ){ goto $label$48 }
	
.LOOP $label$49:
	$14 = ($14 + [-24])
	$7 = *($14)
	*($14) = [0]
	if ( ($7 == 0) ){ goto $label$50 }
	CALL $64($7)
	
.LABEL $label$50
	if ( ((int_32)$6 != (int_32)$14) ){ goto $label$49 }
	$14 = *(($15 + [112]))
	goto $label$47 
	
.LABEL $label$48
	$14 = $6
	
.LABEL $label$47
	*($3) = $6
	CALL $64($14)
	
.LABEL $label$46
	*([0] + [4]) = ($15 + [288])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [208])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $55(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $56(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $64(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [144])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [208])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [288])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [288])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [288])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [288])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [288])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $57(*($1), ($0 + [32]))
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $68(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $68(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $64(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $64(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $58($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $66($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $63($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $66($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $64($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $65($7)
	return (unreachable)
}