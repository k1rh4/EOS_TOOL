(data (i32.const 4) "\10p\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "eos fund pool overdraw\00")
(data (i32.const 64) "unable to find key\00")
(data (i32.const 96) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 160) "error reading iterator\00")
(data (i32.const 192) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 256) "invalid symbol name\00")
(data (i32.const 288) "read\00")
(data (i32.const 304) "eosjackscoin\00")
(data (i32.const 320) "jkr fund pool overdraw\00")
(data (i32.const 352) "unstake\00")
(data (i32.const 368) "sell ram\00")
(data (i32.const 384) "deposit\00")
(data (i32.const 400) "chintailease\00")
(data (i32.const 416) "fishjoyadmin\00")
(data (i32.const 432) "fishjoytoken\00")
(data (i32.const 448) "tobetioadmin\00")
(data (i32.const 464) "tobetiotoken\00")
(data (i32.const 480) "newdexpocket\00")
(data (i32.const 496) "invalid transfer\00")
(data (i32.const 528) "active\00")
(data (i32.const 544) "transfer\00")
(data (i32.const 560) "write\00")
(data (i32.const 576) "burns\00")
(data (i32.const 592) "symbol not support\00")
(data (i32.const 624) "cannot create objects in table of another contract\00")
(data (i32.const 688) "cannot pass end iterator to modify\00")
(data (i32.const 736) "object passed to modify is not in multi_index\00")
(data (i32.const 784) "cannot modify objects in table of another contract\00")
(data (i32.const 848) "updater cannot change primary key when modifying an object\00")
(data (i32.const 912) "next primary key in table is at autoincrement limit\00")
(data (i32.const 976) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1040) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1088) "get\00")
(data (i32.const 1104) "cannot pass end iterator to erase\00")
(data (i32.const 1152) "cannot increment end iterator\00")
(data (i32.const 1184) "object passed to erase is not in multi_index\00")
(data (i32.const 1232) "cannot erase objects in table of another contract\00")
(data (i32.const 1296) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1360) "invalid sub\00")
(data (i32.const 1376) "invalid first pos\00")
(data (i32.const 1408) "parse memo error\00")
(data (i32.const 1440) "eosjacksdice\00")
(data (i32.const 1456) "eosjacksgleg\00")
(data (i32.const 1472) "invalid token transfer\00")
(data (i32.const 1504) "quantity must be positive\00")
(data (i32.const 1536) "token symbol missmatch\00")
(data (i32.const 1568) "bet out of range\00")
(data (i32.const 1600) "must bet multiple min bet\00")
(data (i32.const 1632) "bet not found\00")
(data (i32.const 1648) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1712) "missmatch bet asset\00")
(data (i32.const 1744) "not allowed split on Ace\00")
(data (i32.const 1776) "not allowed split after bought insurance\00")
(data (i32.const 1824) "not allowed split\00")
(data (i32.const 1872) "no deal yet\00")
(data (i32.const 1888) "out of hands\00")
(data (i32.const 1904) "already dealt\00")
(data (i32.const 1920) "hand in doubled bet\00")
(data (i32.const 1952) "hand in surrendered\00")
(data (i32.const 1984) "hand in card requested\00")
(data (i32.const 2016) "hand in stand\00")
(data (i32.const 2032) "hand is ended\00")
(data (i32.const 2048) "divide by zero\00")
(data (i32.const 2064) "signed division overflow\00")
(data (i32.const 2096) "already bought insurance\00")
(data (i32.const 2128) "not allowed\00")
(data (i32.const 2144) "not allow doubled bet after split\00")
(data (i32.const 2192) "not allowed doubled bet after bought insurance\00")
(data (i32.const 2240) "already doubled bet\00")
(data (i32.const 2272) "you are already in game\00")
(data (i32.const 2304) "eosjackypool\00")
(data (i32.const 2320) "pool: https://eosjacks.com\00")
(data (i32.const 2352) "eosjackslead\00")
(data (i32.const 2368) "lead: https://eosjacks.com\00")
(data (i32.const 2400) "eosjacksfund\00")
(data (i32.const 2416) "fund: https://eosjacks.com\00")
(data (i32.const 2448) "invalid memo\00")
(data (i32.const 2464) "no cmd\00")
(data (i32.const 2480) "newgame\00")
(data (i32.const 2496) "no player_seed\00")
(data (i32.const 2512) "doubledown\00")
(data (i32.const 2528) "buyinsurance\00")
(data (i32.const 2544) "split\00")
(data (i32.const 2560) "cmd not support\00")
(data (i32.const 2576) "invalid token contract\00")
(data (i32.const 2608) "eosjacksjack\00")
(data (i32.const 2624) "missmatch game_id\00")
(data (i32.const 2656) "no splited\00")
(data (i32.const 2672) "one already dealt\00")
(data (i32.const 2704) "two already dealt\00")
(data (i32.const 2736) "no dealed yet\00")
(data (i32.const 2752) "bet is ended\00")
(data (i32.const 2768) "not allowed process hand two before hand one end\00")
(data (i32.const 2832) "request deal out of slots\00")
(data (i32.const 2864) "not allowed surrender\00")
(data (i32.const 2896) "player seed not match\00")
(data (i32.const 2928) "attempt to add asset with different symbol\00")
(data (i32.const 2976) "addition underflow\00")
(data (i32.const 3008) "addition overflow\00")
(data (i32.const 3040) "bitpietokens\00")
(data (i32.const 3056) "jackresult\00")
(data (i32.const 3072) "bet id:\00")
(data (i32.const 3088) " player: \00")
(data (i32.const 3104) " referral reward! - eosjacks.com\00")
(data (i32.const 3140) "P\0c\00\00")
(data (i32.const 3152) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 3200) "addbetinfo\00")
(data (i32.const 3216) " winner! - eosjacks.com\00")
(data (i32.const 3248) "hand no requested card\00")
(data (i32.const 3280) "deal out of slots\00")
(data (i32.const 3312) "already inited\00")
(data (i32.const 3328) "eosiomeetone\00")
(data (i32.const 3344) "eosiotptoken\00")
(data (i32.const 3360) "betdicetoken\00")
(data (i32.const 11776) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11872) "stoi\00")
(data (i32.const 11888) ": no conversion\00")
(data (i32.const 11904) ": out of range\00")
(data (i32.const 11936) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 12208) "\00\01\02\04\07\03\06\05\00")
(data (i32.const 12272) "UTC\00")
(data (i32.const 12288) "\1f\1e\1f\1e\1f\1f\1e\1f\1e\1f\1f\1d")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$8 (param i32)))
(import "env" "db_idx64_store" (func $fimport$9 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$10 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$17 (param i32 i32)))
(import "env" "is_account" (func $fimport$18 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$23 (param i64)))
(import "env" "require_auth2" (func $fimport$24 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$25 (param i64)))
(import "env" "send_deferred" (func $fimport$26 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$27 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z21eos_available_balancey" (func $5))
(export "_Z21jkr_available_balancey" (func $10))
(export "_Z13uint64_stringy" (func $11))
(export "_Z17transfer_continueyyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $13))
(export "_Z14token_transferyyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $14))
(export "_Z12eos_transferyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $22))
(export "_Z12jkr_transferyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $23))
(export "_Z9jkr_burnsyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $24))
(export "_Z13epoch_to_datey" (func $26))
(export "_Z12get_exchangey" (func $27))
(export "_Z9exchangedN5eosio5assetE" (func $33))
(export "_Z14get_global_extRN5eosio11multi_indexILy7235159543134027776E13st_global_extJEEEy" (func $34))
(export "_Z14set_global_extRN5eosio11multi_indexILy7235159543134027776E13st_global_extJEEEyyy" (func $37))
(export "_Z12add_trsqueueRN5eosio11multi_indexILy14839762279855030272E8trsqueueJEEEyyNS_5assetENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE" (func $38))
(export "_Z12del_trsqueueRN5eosio11multi_indexILy14839762279855030272E8trsqueueJEEEy" (func $47))
(export "_Z15do_safetransferRN5eosio11multi_indexILy14839762279855030272E8trsqueueJEEEy" (func $49))
(export "_Z8safe_subRyRKy" (func $50))
(export "_Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb" (func $51))
(export "apply" (func $52))
(export "malloc" (func $168))
(export "free" (func $171))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $182))
(export "__errno_location" (func $189))
(export "strtol" (func $190))
(export "__shlim" (func $191))
(export "__intscan" (func $192))
(export "__shgetc" (func $193))
(export "__uflow" (func $194))
(export "__toread" (func $195))
(export "memchr" (func $196))
(export "memcmp" (func $197))
(export "strlen" (func $198))
(export "gmtime" (func $199))
(export "__gmtime_r" (func $200))
(export "__secs_to_tm" (func $201))
(table $0 14 14 anyfunc)
(elem (i32.const 0) $202 $62 $58 $56 $54 $69 $66 $71 $60 $73 $75 $64 $67 $77)



void .FUNC $174 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [96])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $7($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [96])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $176 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $172($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $173($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $172(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $173($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $170 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11862]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11864])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11862]) = [1]
	$7 = ($7 << [16])
	*([0] + [11864]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11864])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11864]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11862]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11862]) = [1]
	$3 = ($3 << [16])
	*([0] + [11864]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11864])
	
.LABEL $label$8
	*([0] + [11864]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11760])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11568]
	$1 = (((int_32)$2 * (int_32)[12]) + [11568])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $172 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11868])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [160])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $172([32])
	$6 = CALL $8($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $173($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $178 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $176($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z21eos_available_balancey (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$6 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$1 }
	*(($11 + [56])) = [0]
	*($11 + [32]) = $1
	*($11 + [24]) = $9
	*($11 + [40]) = (int_64)-1
	*($11 + [48]) = (int_64)0
	$6 = CALL $6(($11 + [24]), (int_64)5459781, [64])
	*(($4 = (($11 + [8]) + [8]))) = *(($6 + [8]))
	*($11 + [8]) = *($6)
	$3 = *($11 + [48])
	if ( ($3 == 0) ){ goto $label$7 }
	$5 = ($11 + [52])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $173($2)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($11 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $3
	
.LABEL $label$8
	*($5) = $3
	CALL $173($6)
	
.LABEL $label$7
	$8 = *($11 + [8])
	*($0) = $8
	*(($0 + [8])) = *($4)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [32])
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [160])
	*([0] + [4]) = $6
	$2 = CALL $128(($6 + [8]), $1)
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$1 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL void $1((int_32 $2), (int_32 $0))
	$0 = *($2 + [64])
	if ( ($0 == 0) ){ goto $label$2 }
	*(($2 + [68])) = $0
	CALL $173($0)
	
.LABEL $label$2
	$3 = *($2 + [52])
	if ( ($3 == 0) ){ goto $label$3 }
	$5 = ($2 + [56])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	$4 = ([0] - $3)
	$0 = ($0 + [-64])
	
.LOOP $label$6:
	if ( ((*(($0 + [40])) & [1]) == 0) ){ goto $label$7 }
	CALL $173(*(($0 + [48])))
	
.LABEL $label$7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$8 }
	*(($0 + [4])) = $1
	CALL $173($1)
	
.LABEL $label$8
	$0 = ($0 + [-72])
	if ( ((int_32)($0 + $4) != (int_32)[-64]) ){ goto $label$6 }
	$0 = *(($2 + [52]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL $173($0)
	
.LABEL $label$3
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL $173(*(($2 + [48])))
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [160])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC __errno_location ()
{
	return [11920]
}

int_32 .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $172($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _Z15do_safetransferRN5eosio11multi_indexILy14839762279855030272E8trsqueueJEEEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$5 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [96])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3606981793854521344, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $41($0, $6)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [96])
	
.LABEL $label$4
	$4 = ($6 + [32])
	if ( ((int_64)*($4) != (int_64)1397703940) ){ goto $label$6 }
	$1 = *($6 + [8])
	*(($8 + [100])) = *(($6 + [36]))
	*(($7 = (($8 + [88]) + [8]))) = *($4)
	*($8 + [88]) = *($6 + [24])
	*($8 + [92]) = *(($6 + [28]))
	$5 = *($6 + [16])
	CALL $187(($8 + [72]), ($6 + [40]))
	*((($8 + [24]) + [8])) = *($7)
	*($8 + [24]) = *($8 + [88])
	CALL _Z12eos_transferyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($1, $5, ($8 + [24]), ($8 + [72]))
	if ( ((*($8 + [72]) & [1]) == 0) ){ goto $label$6 }
	CALL $173(*($8 + [80]))
	
.LABEL $label$6
	if ( ((int_64)*($4) != (int_64)1380665860) ){ goto $label$7 }
	$1 = *($6 + [8])
	*(($8 + [68])) = *(($6 + [36]))
	*(($4 = (($8 + [56]) + [8]))) = *(($6 + [32]))
	*($8 + [56]) = *($6 + [24])
	*($8 + [60]) = *(($6 + [28]))
	$5 = *($6 + [16])
	CALL $187(($8 + [40]), ($6 + [40]))
	*((($8 + [8]) + [8])) = *($4)
	*($8 + [8]) = *($8 + [56])
	CALL _Z12jkr_transferyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($1, $5, ($8 + [8]), ($8 + [40]))
	if ( ((*($8 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL $173(*($8 + [48]))
	
.LABEL $label$7
	CALL eosio_assert([1], [1104])
	CALL eosio_assert([1], [1152])
	$4 = CALL db_next_i64(*($6 + [60]), ($8 + [104]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	CALL $41($0, $4)
	
.LABEL $label$8
	CALL $48($0, $6)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1184])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1232])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1296])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL $173(*(($4 + [48])))
	
.LABEL $label$7
	CALL $173($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL $173(*(($4 + [48])))
	
.LABEL $label$10
	CALL $173($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $21($0, ($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [52]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1040])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3606981793854521344)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [976])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [976])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $41(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [160])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $172([72])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [192])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [256])
	*($4 + [48]) = [0]
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [56]) = $0
	CALL $44(($8 + [32]), $4)
	*($4 + [60]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [60])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $40($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$15 }
	CALL $173(*(($5 + [48])))
	
.LABEL $label$15
	CALL $173($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $172(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $173(*(($1 + [48])))
	
.LABEL $label$11
	CALL $173($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $173($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _Z12del_trsqueueRN5eosio11multi_indexILy14839762279855030272E8trsqueueJEEEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$0), [96])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3606981793854521344, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $41($0, $5)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$0), [96])
	
.LABEL $label$4
	CALL eosio_assert([1], [1104])
	CALL eosio_assert([1], [1152])
	$4 = CALL db_next_i64(*($5 + [60]), ($7 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	CALL $41($0, $4)
	
.LABEL $label$6
	CALL $48($0, $5)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1088])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $17($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [288])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $46($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $177($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $172($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $177($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $173($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $174($7)
	return (unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $45($0, ($1 + [40]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [288])
	CALL memcpy(($1 + [52]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[72])
	$6 = ($7 + [1])
	if ( ((uint_32)$6 >= (uint_32)[59652324]) ){ goto $label$2 }
	$5 = [59652323]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[72])
	if ( ((uint_32)$8 > (uint_32)[29826160]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$5 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $172(((int_32)$5 * (int_32)[72]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$7 * (int_32)[72])))) = *($1)
	*($8 + [8 align=4]) = (int_64)0
	*(($2 = ($8 + [16]))) = [0]
	$7 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($7 == 0) ){ goto $label$6 }
	$3 = ($8 + [8])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $172($7)
	*($3) = $4
	*(($3 = ($8 + [12]))) = $4
	*($2) = ($4 + $7)
	$2 = *(($1 + [8]))
	$7 = (*(($1 + [12])) - $2)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($4, $2, $7)
	*($3) = (*($3) + $7)
	
.LABEL $label$6
	$2 = ($6 + ((int_32)$5 * (int_32)[72]))
	*($8 + [20 align=4]) = *($1 + [20 align=4])
	*(($8 + [44])) = *(($1 + [44]))
	*(($8 + [36])) = *(($1 + [36]))
	*(($8 + [28])) = *(($1 + [28]))
	CALL $187(($8 + [48]), ($1 + [48]))
	*($8 + [64]) = *($1 + [64])
	$3 = ($8 + [72])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$4 = ([0] - $1)
	$1 = ($5 + [-24])
	
.LOOP $label$9:
	*(($5 = ($8 + [-64]))) = (int_64)0
	*(($6 = ($8 + [-56]))) = [0]
	$7 = ($1 + [-40])
	*($5) = *($7)
	*(($8 + [-60])) = *(($1 + [-36]))
	*(($8 + [-72])) = *(($1 + [-48]))
	$5 = ($1 + [-32])
	*($6) = *($5)
	*($7) = (int_64)0
	*($5) = [0]
	*(($8 + [-28])) = *(($1 + [-4]))
	*(($8 + [-36])) = *(($1 + [-12]))
	*(($8 + [-44])) = *(($1 + [-20]))
	*(($8 + [-52])) = *(($1 + [-28]))
	$5 = ($1 + [8])
	*(($8 + [-16])) = *($5)
	*(($8 + [-24])) = *($1)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($5) = [0]
	*(($8 + [-8])) = *(($1 + [16]))
	$8 = ($8 + [-72])
	$1 = ($1 + [-72])
	if ( ((int_32)($1 + $4) != (int_32)[-24]) ){ goto $label$9 }
	$1 = *(($0 + [4]))
	$6 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$6 = $1
	
.LABEL $label$7
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$10 }
	$5 = ([0] - $6)
	$1 = ($1 + [-64])
	
.LOOP $label$11:
	if ( ((*(($1 + [40])) & [1]) == 0) ){ goto $label$12 }
	CALL $173(*(($1 + [48])))
	
.LABEL $label$12
	$8 = *($1)
	if ( ($8 == 0) ){ goto $label$13 }
	*(($1 + [4])) = $8
	CALL $173($8)
	
.LABEL $label$13
	$1 = ($1 + [-72])
	if ( ((int_32)($1 + $5) != (int_32)[-64]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $173($6)
	
.LABEL $label$14
	return (unreachable)
	
.LABEL $label$5
	CALL $186($3)
	(unreachable)
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *(($1 + [56]))
	if ( ((int_32)$3 == (int_32)*(($1 + [60]))) ){ goto $label$3 }
	*(($3 + [12])) = (int_64)0
	*($3 + [8]) = [0]
	*($3) = *($2)
	$7 = (*(($2 + [12])) - *($2 + [8]))
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $172($7)
	*(($3 + [8])) = $4
	*(($3 + [16])) = ($4 + $7)
	*(($7 = ($3 + [12]))) = $4
	$5 = *(($2 + [8]))
	$6 = (*(($2 + [12])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $5, $6)
	*($7) = (*($7) + $6)
	
.LABEL $label$4
	*($3 + [20 align=4]) = *($2 + [20 align=4])
	*(($3 + [44])) = *(($2 + [44]))
	*(($3 + [36])) = *(($2 + [36]))
	*(($3 + [28])) = *(($2 + [28]))
	CALL $187(($3 + [48]), ($2 + [48]))
	*($3 + [64]) = *($2 + [64])
	*(($3 = ($1 + [56]))) = (*($3) + [72])
	goto $label$2 
	
.LABEL $label$3
	CALL $167(($1 + [52]), $2)
	
.LABEL $label$2
	$7 = ($1 + [64])
	$2 = (*(*($0 + [4])) + [1])
	$3 = ($1 + [68])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)*(($1 + [72]))) ){ goto $label$6 }
	*($0) = *($2)
	$2 = (*($3) + [1])
	*($3) = $2
	goto $label$5 
	
.LABEL $label$6
	CALL $89($7, $2)
	$2 = *($3)
	
.LABEL $label$5
	*($8 + [15]) = [255]
	if ( ((uint_32)$2 >= (uint_32)*(($1 + [72]))) ){ goto $label$8 }
	*($2) = [255]
	*(($1 = ($1 + [68]))) = (*($1) + [1])
	goto $label$7 
	
.LABEL $label$8
	CALL $131($7, ($8 + [15]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $186(($3 + [8]))
}

void .FUNC $165 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*(($6 = $5) + [24]) = *($1 + [8])
	$4 = *($1)
	CALL $166($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	*($6 + [8]) = [0]
	CALL $93(($6 + [8]), $1)
	$3 = *($6 + [8])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [12]) = $5
	*($6 + [8]) = $5
	*($6 + [16]) = ($5 + $3)
	CALL $94(($6 + [8]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($6 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$5 = ($1 + [160])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($6 + [32]), $4)
	*($5) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $164 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$9 = (*(*($0)) + int_32($10 >> [1]))
	$0 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	CALL $187(($11 + [80]), $3)
	*($11 + [72]) = [0]
	*($11 + [64]) = (int_64)0
	$3 = (*($4 + [4]) - *($4))
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	$10 = CALL $172($3)
	*(($11 + [72])) = ($10 + $3)
	*($11 + [64]) = $10
	*($11 + [68]) = $10
	$3 = *($4)
	$4 = (*(($4 + [4])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($10, $3, $4)
	*($11 + [68]) = (*($11 + [68]) + $4)
	
.LABEL $label$3
	CALL $187(($11 + [48]), $5)
	CALL $187(($11 + [32]), $6)
	CALL $187(($11 + [16]), $7)
	CALL $187($11, $8)
	CALL void $9((int_32 $1), (int_64 $2), (int_64 ($11 + [80])), (int_32 ($11 + [64])), (int_32 ($11 + [48])), (int_32 ($11 + [32])), (int_32 ($11 + [16])), (int_32 $11), (int_32 $0))
	if ( ((*($11) & [1]) == 0) ){ goto $label$4 }
	CALL $173(*($11 + [8]))
	
.LABEL $label$4
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $173(*($11 + [24]))
	
.LABEL $label$5
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $173(*($11 + [40]))
	
.LABEL $label$6
	if ( ((*($11 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL $173(*($11 + [56]))
	
.LABEL $label$7
	$4 = *($11 + [64])
	if ( ($4 == 0) ){ goto $label$8 }
	*($11 + [68]) = $4
	CALL $173($4)
	
.LABEL $label$8
	if ( ((*($11 + [80]) & [1]) == 0) ){ goto $label$9 }
	CALL $173(*($11 + [88]))
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [96])
	return (unreachable)
	
.LABEL $label$2
	CALL $186(($11 + [64]))
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $187(($7 + [80]), ($1 + [16]))
	*($7 + [72]) = [0]
	*($7 + [64]) = (int_64)0
	$4 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $172($4)
	*(($7 + [72])) = ($5 + $4)
	*($7 + [64]) = $5
	*($7 + [68]) = $5
	$6 = *(($1 + [28]))
	$4 = (*(($1 + [32])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $6, $4)
	*($7 + [68]) = (*($7 + [68]) + $4)
	
.LABEL $label$2
	CALL $187(($7 + [48]), ($1 + [40]))
	CALL $187(($7 + [32]), ($1 + [52]))
	CALL $187(($7 + [16]), ($1 + [64]))
	CALL $187($7, ($1 + [76]))
	CALL $164($0, $2, $3, ($7 + [80]), ($7 + [64]), ($7 + [48]), ($7 + [32]), ($7 + [16]), $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$3 }
	CALL $173(*($7 + [8]))
	
.LABEL $label$3
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $173(*($7 + [24]))
	
.LABEL $label$4
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $173(*($7 + [40]))
	
.LABEL $label$5
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$6 }
	CALL $173(*($7 + [56]))
	
.LABEL $label$6
	$1 = *($7 + [64])
	if ( ($1 == 0) ){ goto $label$7 }
	*($7 + [68]) = $1
	CALL $173($1)
	
.LABEL $label$7
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$8 }
	CALL $173(*($7 + [88]))
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $186(($7 + [64]))
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $45(*($1), ($3 + [16]))
	CALL $103(*($1), ($3 + [28]))
	CALL $45(*($1), ($3 + [40]))
	CALL $45(*($1), ($3 + [52]))
	CALL $45(*($1), ($3 + [64]))
	CALL $45(*($1), ($3 + [76]))
}

void .FUNC $161 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*(($8 = $7) + [24]) = *($1 + [8])
	$4 = *($1)
	$6 = $4
	$3 = *($3)
	$5 = ($1 + [52])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	CALL $92($5, *($3), *($3 + [4]))
	$6 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [848])
	*($8 + [8]) = [0]
	CALL $93(($8 + [8]), $1)
	$3 = *($8 + [8])
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $94(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$7 = ($1 + [160])
	$1 = *($7)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($8 + [32]), $4)
	*($7) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$6 = *($1 + [32])
	$5 = *($1 + [24])
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $187($9, ($1 + [36]))
	$7 = *($1 + [48])
	$1 = *($0 + [4])
	$8 = *($1 + [4])
	$0 = (*(*($0)) + int_32($8 >> [1]))
	$1 = *($1)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $187(($9 + [16]), $9)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $4), (int_64 $5), (int_64 ($6 & [255])), (int_32 ($9 + [16])), (int_32 ((int_32)($7 & [255]) != (int_32)[0])), (int_32 $1))
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $173(*($9 + [24]))
	
.LABEL $label$2
	if ( ((*($9) & [1]) == 0) ){ goto $label$3 }
	CALL $173(*($9 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $170($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11776])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $169([3376], $0)
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $176($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	*([0] + [4]) = $13
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [2608]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($10)
	$5 = *(($0 + [40]))
	$12 = *(($0 + [44]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$5 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$5 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($0 + [16])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$8 }
	$7 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$4), [96])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$12 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $85($4, $12)
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$4), [96])
	
.LABEL $label$7
	$12 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($12, [1632])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$2), [2624])
	CALL eosio_assert($12, [1104])
	CALL eosio_assert($12, [1152])
	$12 = CALL db_next_i64(*($7 + [156]), ($13 + [8]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$9 }
	CALL $85($4, $12)
	
.LABEL $label$9
	CALL $109($4, $7)
	CALL require_recipient(*($7))
	*([0] + [4]) = ($13 + [16])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [288])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $45(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $158(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $173(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC _Z8safe_subRyRKy (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((uint_64)*($0) >= (uint_64)*($1)), [1360])
	*($0) = (int_64))(*($0) - *($1))
}

int_32 .FUNC _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [1376])
	$2 = CALL $180($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$4 }
	$3 = *($3)
	CALL $188($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$3 }
	*($1) = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [1408])
	$2 = [-1]
	goto $label$1 
	
.LABEL $label$3
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$2
	CALL $177($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [688])
	*([0] + [4]) = $10
	$3 = CALL $53(($10 + [208]), $0, $1)
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)5371981087000494079) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)-3617168760262623233) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4417357895863107584) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-4157609156632641536) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4129953358985822208) ){ goto $label$1 }
	*($10 + [172]) = [0]
	*($10 + [168]) = [1]
	*($10 + [40 align=4]) = *($10 + [168])
	CALL $63($3, ($10 + [40]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 > (int_64)7760265107912785919) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)5371981087000494080) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)6112162363668955136) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)6714450476416532480) ){ goto $label$1 }
	*($10 + [188]) = [0]
	*($10 + [184]) = [2]
	*($10 + [24 align=4]) = *($10 + [184])
	CALL $59($3, ($10 + [24]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-3617168760262623232) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)4921564810417537024) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)5371967522708914176) ){ goto $label$1 }
	*($10 + [196]) = [0]
	*($10 + [192]) = [3]
	*($10 + [16 align=4]) = *($10 + [192])
	CALL $57($3, ($10 + [16]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)7760265107912785920) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)8759795579725168640) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8421050331034550272) ){ goto $label$1 }
	*($10 + [204]) = [0]
	*($10 + [200]) = [4]
	*($10 + [8 align=4]) = *($10 + [200])
	CALL $55($3, ($10 + [8]))
	goto $label$1 
	
.LABEL $label$9
	*($10 + [140]) = [0]
	*($10 + [136]) = [5]
	*($10 + [72 align=4]) = *($10 + [136])
	CALL $70($3, ($10 + [72]))
	goto $label$1 
	
.LABEL $label$8
	*($10 + [156]) = [0]
	*($10 + [152]) = [6]
	*($10 + [56 align=4]) = *($10 + [152])
	CALL $63($3, ($10 + [56]))
	goto $label$1 
	
.LABEL $label$7
	*($10 + [132]) = [0]
	*($10 + [128]) = [7]
	*($10 + [80 align=4]) = *($10 + [128])
	CALL $72($3, ($10 + [80]))
	goto $label$1 
	
.LABEL $label$6
	*($10 + [180]) = [0]
	*($10 + [176]) = [8]
	*($10 + [32 align=4]) = *($10 + [176])
	CALL $61($3, ($10 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($10 + [124]) = [0]
	*($10 + [120]) = [9]
	*($10 + [88 align=4]) = *($10 + [120])
	CALL $74($3, ($10 + [88]))
	goto $label$1 
	
.LABEL $label$4
	*($10 + [116]) = [0]
	*($10 + [112]) = [10]
	*($10 + [96 align=4]) = *($10 + [112])
	CALL $76($3, ($10 + [96]))
	goto $label$1 
	
.LABEL $label$3
	*($10 + [164]) = [0]
	*($10 + [160]) = [11]
	*($10 + [48 align=4]) = *($10 + [160])
	CALL $65($3, ($10 + [48]))
	goto $label$1 
	
.LABEL $label$2
	*($10 + [148]) = [0]
	*($10 + [144]) = [12]
	*($10 + [64 align=4]) = *($10 + [144])
	CALL $68($3, ($10 + [64]))
	
.LABEL $label$1
	$0 = (int_64)0
	$8 = (int_64)59
	$7 = [544]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$0 > (uint_64)(int_64)7) ){ goto $label$18 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [165])
	goto $label$16 
	
.LABEL $label$18
	$1 = (int_64)0
	if ( ((uint_64)$0 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$14
	$7 = ($7 + [1])
	$0 = ((int_64)$0 + (int_64)1)
	$9 = ((int_64)$1 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$13 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$19 }
	*($10 + [108]) = [0]
	*($10 + [104]) = [13]
	*($10) = *($10 + [104])
	CALL $74($3, $10)
	
.LABEL $label$19
	$5 = *(($3 + [80]))
	if ( ($5 == 0) ){ goto $label$20 }
	$6 = ($3 + [84])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$22 }
	
.LOOP $label$23:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	CALL $173($4)
	
.LABEL $label$24
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$23 }
	$7 = *(($3 + [80]))
	goto $label$21 
	
.LABEL $label$22
	$7 = $5
	
.LABEL $label$21
	*($6) = $5
	CALL $173($7)
	
.LABEL $label$20
	$5 = *(($3 + [40]))
	if ( ($5 == 0) ){ goto $label$25 }
	$6 = ($3 + [44])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$27 }
	$7 = ($7 + [-24])
	
.LOOP $label$28:
	$4 = CALL $78($7)
	$7 = ($7 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$28 }
	$7 = *(($3 + [40]))
	goto $label$26 
	
.LABEL $label$27
	$7 = $5
	
.LABEL $label$26
	*($6) = $5
	CALL $173($7)
	
.LABEL $label$25
	*([0] + [4]) = ($10 + [688])
}

int_32 .FUNC $53 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	*($0 + [8]) = $2
	*($0) = $1
	*($0 + [16]) = $1
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	$2 = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = [0]
	*(($0 + [52])) = [0]
	*($0 + [56]) = $1
	*(($0 + [64])) = $1
	*(($0 + [72])) = (int_64)-1
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [88])) = [0]
	$5 = (int_64)59
	$4 = [16]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$1 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$6 = ((int_64)$1 | (int_64)$6)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$1 }
	*(($0 + [104])) = (int_64)1397703940
	*(($0 + [96])) = $6
	*(($0 + [112])) = (int_64)1000
	*(($0 + [120])) = (int_64)1000000
	$2 = (int_64)0
	*(($0 + [128])) = (int_64)0
	*(($0 + [136])) = (int_64)0
	$1 = (int_64)59
	$4 = [304]
	$6 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$8 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$3 = ($3 + [165])
	goto $label$9 
	
.LABEL $label$10
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$6 = ((int_64)$5 | (int_64)$6)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$7 }
	*(($0 + [152])) = (int_64)1380665860
	*(($0 + [144])) = $6
	*(($0 + [160])) = (int_64)1000000
	*(($0 + [168])) = (int_64)500000000
	$2 = (int_64)0
	*(($0 + [176])) = (int_64)0
	*(($0 + [184])) = (int_64)0
	$1 = (int_64)59
	$4 = [3328]
	$6 = (int_64)0
	
.LOOP $label$11:
	$5 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$12 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$3 = ($3 + [165])
	goto $label$13 
	
.LABEL $label$14
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$6 = ((int_64)$5 | (int_64)$6)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$11 }
	*(($0 + [200])) = (int_64)4994016260158475524
	*(($0 + [192])) = $6
	*(($0 + [208])) = (int_64)1000000
	*(($0 + [216])) = (int_64)500000000
	$2 = (int_64)0
	*(($0 + [224])) = (int_64)0
	*(($0 + [232])) = (int_64)0
	$1 = (int_64)59
	$4 = [3344]
	$6 = (int_64)0
	
.LOOP $label$15:
	$5 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$16 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$6 = ((int_64)$5 | (int_64)$6)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$15 }
	*(($0 + [248])) = (int_64)1414550532
	*(($0 + [240])) = $6
	*(($0 + [256])) = (int_64)1000000
	*(($0 + [264])) = (int_64)500000000
	$2 = (int_64)0
	*(($0 + [272])) = (int_64)0
	*(($0 + [280])) = (int_64)0
	$1 = (int_64)59
	$4 = [3360]
	$6 = (int_64)0
	
.LOOP $label$19:
	$5 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$20 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$3 = ($3 + [165])
	goto $label$21 
	
.LABEL $label$22
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$20
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$6 = ((int_64)$5 | (int_64)$6)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$19 }
	*(($0 + [296])) = (int_64)297481618436
	*(($0 + [288])) = $6
	*(($0 + [304])) = (int_64)1000000
	*(($0 + [312])) = (int_64)50000000
	$2 = (int_64)0
	*(($0 + [320])) = (int_64)0
	*(($0 + [328])) = (int_64)0
	$1 = (int_64)59
	$4 = [3040]
	$6 = (int_64)0
	
.LOOP $label$23:
	$5 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$24 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$6 = ((int_64)$5 | (int_64)$6)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$23 }
	*(($0 + [344])) = (int_64)289176438024
	*(($0 + [336])) = $6
	*(($0 + [352])) = (int_64)10000
	*(($0 + [360])) = (int_64)1000000
	$2 = (int_64)0
	*(($0 + [368])) = (int_64)0
	*(($0 + [376])) = (int_64)0
	$1 = (int_64)59
	$4 = [3040]
	$6 = (int_64)0
	
.LOOP $label$27:
	$5 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$3 = ($3 + [165])
	goto $label$29 
	
.LABEL $label$30
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$6 = ((int_64)$5 | (int_64)$6)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$27 }
	*(($0 + [392])) = (int_64)310651471112
	*(($0 + [384])) = $6
	*(($0 + [400])) = (int_64)100000
	*(($0 + [408])) = (int_64)10000000
	$2 = (int_64)0
	*(($0 + [416])) = (int_64)0
	*(($0 + [424])) = (int_64)0
	$1 = (int_64)59
	$4 = [3040]
	$6 = (int_64)0
	
.LOOP $label$31:
	$5 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$32 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$32
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$6 = ((int_64)$5 | (int_64)$6)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$31 }
	*(($0 + [440])) = (int_64)293455873288
	*(($0 + [432])) = $6
	*(($0 + [448])) = (int_64)10000000
	*(($0 + [456])) = (int_64)1000000000
	*(($0 + [464])) = (int_64)0
	*(($0 + [472])) = (int_64)0
	return $0
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [80])
	*([0] + [4]) = $22
	$17 = (int_64)0
	$16 = (int_64)59
	$15 = [2608]
	$18 = (int_64)0
	
.LOOP $label$1:
	$19 = (int_64)0
	if ( ((uint_64)$17 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($15)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [165])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$2
	$15 = ($15 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($18)
	$21 = *(($0 + [40]))
	$20 = *(($0 + [44]))
	if ( ((int_32)$20 == (int_32)$21) ){ goto $label$5 }
	$15 = ($20 + [-24])
	$11 = ([0] - $21)
	
.LOOP $label$6:
	if ( ((int_64)*(*($15)) == (int_64)$1) ){ goto $label$5 }
	$20 = $15
	$9 = ($15 + [-24])
	$15 = $9
	if ( ((int_32)($9 + $11) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$10 = ($0 + [16])
	if ( ((int_32)$20 == (int_32)$21) ){ goto $label$8 }
	$9 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [152]) == (int_32)$10), [96])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$15 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $85($10, $15)
	CALL eosio_assert(((int_32)*($9 + [152]) == (int_32)$10), [96])
	
.LABEL $label$7
	$15 = [0]
	$12 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($12, [1632])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)$2), [2624])
	$21 = [0]
	$11 = ($20 & [1])
	$20 = *($3)
	$0 = ($20 & [1])
	$20 = *($9 + [40])
	$13 = uint_32($20 >> [1])
	$14 = ( *(($9 + [44])) ? $13 : $0 )
	if ( ((int_32)$14 != (int_32)( *($3 + [4]) ? uint_32($20 >> [1]) : $11 )) ){ goto $label$9 }
	$20 = (($9 + [40]) + [1])
	$11 = ( *($3 + [8]) ? ($3 + [1]) : $11 )
	if ( $0 ){ goto $label$12 }
	if ( ($14 == 0) ){ goto $label$11 }
	$0 = ([0] - $13)
	
.LOOP $label$13:
	if ( ((int_32)*($20) != (int_32)*($11)) ){ goto $label$10 }
	$21 = [1]
	$11 = ($11 + [1])
	$20 = ($20 + [1])
	$0 = ($0 + [1])
	if ( $0 ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$12
	if ( ($14 == 0) ){ goto $label$11 }
	$21 = (CALL memcmp(( *(($9 + [48])) ? $20 : $0 ), $11, $14) == 0)
	goto $label$9 
	
.LABEL $label$11
	$21 = [1]
	goto $label$9 
	
.LABEL $label$10
	$21 = [0]
	
.LABEL $label$9
	CALL eosio_assert($21, [2896])
	CALL eosio_assert(((int_32)*(($9 + [56])) == (int_32)*($9 + [52])), [3312])
	*(($22 + [24])) = (int_64)0
	$17 = *(($9 + [32]))
	*((($22 + [8]) + [40])) = $17
	*($22 + [8]) = (int_64)1
	*($22 + [16]) = (int_64)0
	*($22 + [32]) = [0]
	*($22 + [40]) = (int_64)0
	CALL eosio_assert([1], [192])
	$17 = (uint_64)$17 >> (uint_64)(int_64)8)
	$11 = ($22 + [16])
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $17) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$17 = (uint_64)$17 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$17) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$17 = (uint_64)$17 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$17) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$20 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$20 = [0]
	
.LABEL $label$14
	CALL eosio_assert($20, [256])
	*(($22 + [64])) = [0]
	*($22 + [56]) = (int_64)0
	$20 = ($22 + [56])
	$15 = CALL strlen([1856])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$22 }
	*(($22 + [56])) = ($15 << [1])
	$20 = ($20 + [1])
	if ( $15 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$0 = (($15 + [16]) & [-16])
	$20 = CALL $172($0)
	*(($22 + [56])) = ($0 | [1])
	*(($22 + [64])) = $20
	*(($22 + [60])) = $15
	
.LABEL $label$21
	CALL memcpy($20, [1856], $15)
	
.LABEL $label$20
	*(($20 + $15)) = [0]
	*($22 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$15 = *($4)
	$20 = ($22 + [20])
	$0 = *($20)
	if ( ((int_32)$0 == (int_32)*(($22 + [24]))) ){ goto $label$24 }
	*($0) = *($15)
	$15 = (*($20) + [1])
	*($20) = $15
	goto $label$23 
	
.LABEL $label$24
	CALL $89($11, $15)
	$15 = *($20)
	
.LABEL $label$23
	$20 = (*($4) + [2])
	if ( ((int_32)$15 == (int_32)*(($22 + [24]))) ){ goto $label$26 }
	*($15) = *($20)
	*(($15 = ($22 + [20]))) = (*($15) + [1])
	goto $label$25 
	
.LABEL $label$26
	CALL $89($11, $20)
	
.LABEL $label$25
	*($22 + [4]) = $4
	*($22) = ($22 + [8])
	CALL eosio_assert($12, [688])
	CALL $165($10, $9, (int_64)0, $22)
	if ( ((*(($22 + [56])) & [1]) == 0) ){ goto $label$27 }
	CALL $173(*(($22 + [64])))
	
.LABEL $label$27
	$15 = *($22 + [16])
	if ( ($15 == 0) ){ goto $label$28 }
	*(($22 + [20])) = $15
	CALL $173($15)
	
.LABEL $label$28
	*([0] + [4]) = ($22 + [80])
	return (unreachable)
	
.LABEL $label$19
	CALL $174($20)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	*(($2 = $3) + [108]) = $0
	*($2 + [96]) = *($1)
	*($2 + [100]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [32])) = (int_64)0
	*(($2 + [40])) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [48]) = [0]
	*(($2 + [52])) = [0]
	*(($2 + [56])) = [0]
	*($2 + [60]) = [0]
	*(($2 + [64])) = [0]
	*(($2 + [68])) = [0]
	*($2 + [72]) = [0]
	*(($2 + [76])) = [0]
	*(($2 + [80])) = [0]
	*($2 + [84]) = [0]
	*(($2 + [88])) = [0]
	*(($2 + [92])) = [0]
	*($2 + [116]) = $1
	*($2 + [112]) = $1
	*($2 + [120]) = ($1 + $0)
	*($2 + [128]) = ($2 + [112])
	*($2 + [136]) = ($2 + [8])
	CALL $162(($2 + [136]), ($2 + [128]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [116]) = ($2 + [96])
	*($2 + [112]) = ($2 + [108])
	CALL $163(($2 + [112]), ($2 + [8]))
	if ( ((*($2 + [84]) & [1]) == 0) ){ goto $label$5 }
	CALL $173(*(($2 + [92])))
	
.LABEL $label$5
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$6 }
	CALL $173(*(($2 + [80])))
	
.LABEL $label$6
	if ( ((*($2 + [60]) & [1]) == 0) ){ goto $label$7 }
	CALL $173(*(($2 + [68])))
	
.LABEL $label$7
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL $173(*(($2 + [56])))
	
.LABEL $label$8
	$1 = *(($2 + [36]))
	if ( ($1 == 0) ){ goto $label$9 }
	*(($2 + [40])) = $1
	CALL $173($1)
	
.LABEL $label$9
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $173(*(($2 + [32])))
	
.LABEL $label$10
	*([0] + [4]) = ($2 + [144])
	return [1]
}

void .FUNC $56 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	$18 = (int_64)0
	$17 = (int_64)59
	$16 = [2608]
	$19 = (int_64)0
	
.LOOP $label$1:
	$20 = (int_64)0
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($16)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [165])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$2
	$16 = ($16 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($19)
	$9 = *(($0 + [40]))
	$21 = *(($0 + [44]))
	if ( ((int_32)$21 == (int_32)$9) ){ goto $label$5 }
	$16 = ($21 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$6:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$5 }
	$21 = $16
	$8 = ($16 + [-24])
	$16 = $8
	if ( ((int_32)($8 + $10) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$10 = ($0 + [16])
	if ( ((int_32)$21 == (int_32)$9) ){ goto $label$8 }
	$16 = *(($21 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [152]) == (int_32)$10), [96])
	goto $label$7 
	
.LABEL $label$8
	$16 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$16 = CALL $85($10, $8)
	CALL eosio_assert(((int_32)*($16 + [152]) == (int_32)$10), [96])
	
.LABEL $label$7
	$8 = [0]
	$11 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($11, [1632])
	CALL eosio_assert(((int_64)*($16 + [8]) == (int_64)$2), [2624])
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$9 }
	$8 = ((uint_64)(CASTING uint_64)(uint_32 ((int_32)(*(($16 + [56])) - *(($16 + [52]))) / (int_32)[72])) >= (uint_64)$3)
	
.LABEL $label$9
	CALL eosio_assert($8, [2736])
	CALL eosio_assert(((int_32)*($16 + [76]) ^ (int_32)[1]), [2752])
	*($22 + [80]) = (int_64)0
	*($22 + [88]) = [0]
	$0 = (*(($16 + [56])) - *(($16 + [52])))
	$21 = ((int_32)$0 / (int_32)[72])
	$8 = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	if ( ((uint_32)$21 >= (uint_32)[59652324]) ){ goto $label$11 }
	$8 = CALL $172($0)
	*(($22 + [88])) = ($8 + ((int_32)$21 * (int_32)[72]))
	*($22 + [84]) = $8
	*($22 + [80]) = $8
	CALL $87(($22 + [80]), *($16 + [52]), *(($16 + [56])), $21)
	$8 = *($22 + [80])
	
.LABEL $label$12
	*(($15 = (($22 + [8]) + [12]))) = (int_64)0
	*($22 + [16]) = [0]
	$12 = (CASTING uint_32)(uint_64 ((int_64)$3 + (int_64)4294967295))
	$21 = ($8 + ((int_32)$12 * (int_32)[72]))
	*($22 + [8]) = *($21)
	$13 = (($22 + [8]) + [8])
	$14 = ($21 + [12])
	$0 = (*($14) - *($21 + [8]))
	if ( ($0 == 0) ){ goto $label$13 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$10 }
	$9 = CALL $172($0)
	*(($22 + [16])) = $9
	*(($22 + [24])) = ($9 + $0)
	*(($0 = ($22 + [20]))) = $9
	$14 = *(($21 + [8]))
	$21 = (*($14) - $14)
	if ( ((int_32)$21 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($9, $14, $21)
	*($0) = (*($0) + $21)
	
.LABEL $label$13
	$21 = ((int_32)$12 * (int_32)[72])
	$8 = ($8 + $21)
	*((($22 + [8]) + [44])) = *(($8 + [44]))
	*((($22 + [8]) + [36])) = *(($8 + [36]))
	*((($22 + [8]) + [28])) = *(($8 + [28]))
	*($22 + [28 align=4]) = *($8 + [20 align=4])
	CALL $187((($22 + [8]) + [48]), ($8 + [48]))
	*($22 + [72]) = *($8 + [64])
	CALL eosio_assert(*($22 + [28]), [3248])
	CALL eosio_assert(((int_64)(CASTING uint_64)(uint_32 (*($15) - *($13))) == (int_64)$4), [3280])
	CALL eosio_assert(((int_32)*($22 + [31]) ^ (int_32)[1]), [1920])
	CALL eosio_assert(((int_32)*($22 + [32]) ^ (int_32)[1]), [1952])
	CALL eosio_assert(((int_32)*($22 + [29]) ^ (int_32)[1]), [2016])
	CALL eosio_assert(((int_32)*($22 + [33]) ^ (int_32)[1]), [2032])
	*(($8 = (*($22 + [80]) + $21)) + [20]) = [0]
	*((*($8 + [8]) + (CASTING uint_32)(uint_64 ((int_64)$4 + (int_64)4294967295)))) = $5
	*((*($22 + [80]) + $21) + [25]) = $7
	*($22) = ($22 + [80])
	CALL eosio_assert($11, [688])
	CALL $161($10, $16, (int_64)0, $22)
	if ( ((*($22 + [56]) & [1]) == 0) ){ goto $label$14 }
	CALL $173(*(($22 + [64])))
	
.LABEL $label$14
	$16 = *($22 + [16])
	if ( ($16 == 0) ){ goto $label$15 }
	*(($22 + [20])) = $16
	CALL $173($16)
	
.LABEL $label$15
	$10 = *($22 + [80])
	if ( ($10 == 0) ){ goto $label$16 }
	$16 = *($22 + [84])
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$18 }
	$21 = ([0] - $10)
	$16 = ($16 + [-64])
	
.LOOP $label$19:
	if ( ((*(($16 + [40])) & [1]) == 0) ){ goto $label$20 }
	CALL $173(*(($16 + [48])))
	
.LABEL $label$20
	$8 = *($16)
	if ( ($8 == 0) ){ goto $label$21 }
	*(($16 + [4])) = $8
	CALL $173($8)
	
.LABEL $label$21
	$16 = ($16 + [-72])
	if ( ((int_32)($16 + $21) != (int_32)[-64]) ){ goto $label$19 }
	$16 = *($22 + [80])
	goto $label$17 
	
.LABEL $label$18
	$16 = $10
	
.LABEL $label$17
	*($22 + [84]) = $10
	CALL $173($16)
	
.LABEL $label$16
	*([0] + [4]) = ($22 + [96])
	return (unreachable)
	
.LABEL $label$11
	CALL $186(($22 + [80]))
	
.LABEL $label$10
	CALL $186($13)
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [112])
	*([0] + [4]) = $3
	*(($2 = $3) + [76]) = $0
	*($2 + [64]) = *($1)
	*($2 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($2 + [16]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = [0]
	*($2 + [44 align=4]) = (int_64)0
	*(($2 + [52])) = [0]
	*($2 + [56]) = [0]
	*($2 + [84]) = $1
	*($2 + [80]) = $1
	*($2 + [88]) = ($1 + $0)
	*($2 + [96]) = ($2 + [80])
	*($2 + [104]) = ($2 + [8])
	CALL $159(($2 + [104]), ($2 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [84]) = ($2 + [64])
	*($2 + [80]) = ($2 + [76])
	CALL $160(($2 + [80]), ($2 + [8]))
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$5 }
	CALL $173(*(($2 + [52])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [112])
	return [1]
}

void .FUNC $173 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [560])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [560])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [560])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [560])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [560])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [560])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [560])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $19(CALL $18($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $173($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $173($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $173($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $173($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $173($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $173($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $173($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $173($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $172([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [3140]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $188($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $177($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [560])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [560])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $19($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $155 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL strlen([3072])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$6 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($4 + [16]) & [-16])
	$6 = CALL $172($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($6, [3072], $4)
	
.LABEL $label$2
	*(($6 + $4)) = [0]
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = [0]
	$6 = (($8 + [16]) | [1])
	$7 = *($2 + [8])
	
.LOOP $label$5:
	$4 = (CASTING uint_32)(uint_64 ((uint_64)$7 % (uint_64)(int_64)10))
	CALL $12(($8 + [32]), ( ($4 | [48]) ? ($4 + [55]) : ($4 <= [10]) ), ($8 + [16]))
	$3 = ((uint_64)$7 / (uint_64)(int_64)10)
	if ( (*($8 + [16]) & [1]) ){ goto $label$7 }
	*($8 + [16]) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*((($8 + [16]) + [8]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$6
	CALL $177(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *((($8 + [32]) + [8]))
	*($8 + [16]) = *($8 + [32])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $3
	if ( $4 ){ goto $label$5 }
	$4 = *($8 + [16])
	$5 = ($4 & [1])
	CALL $178($0, ( *((($8 + [16]) + [8])) ? $6 : $5 ), ( *($8 + [20]) ? uint_32($4 >> [1]) : $5 ))
	CALL $179($0, [3088])
	*($8 + [8]) = *($2)
	CALL $156(($8 + [32]), ($8 + [8]))
	$4 = *($8 + [32])
	$6 = ($4 & [1])
	CALL $178($0, ( *($8 + [40]) ? (($8 + [32]) | [1]) : $6 ), ( *($8 + [36]) ? uint_32($4 >> [1]) : $6 ))
	CALL $179($0, [3104])
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $173(*((($8 + [32]) + [8])))
	
.LABEL $label$8
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL $173(*(($8 + [24])))
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $174($0)
}

void .FUNC $158 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $187($5, ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $187(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $173(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $173(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [288])
	CALL memcpy(($3 + [32]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $45(*($1), ($3 + [36]))
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [288])
	CALL memcpy(($4 + [15]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*($3 + [48]) = ((int_32)*($4 + [15]) != (int_32)[0])
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $179 (int_32 $0, int_32 $1)
{
	return CALL $178($0, $1, CALL $198($1))
}

void .FUNC $183 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $185($1, $0, [11904])
	CALL abort()
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [176])
	*([0] + [4]) = $3
	*(($5 = $3) + [172]) = $0
	*($5 + [160]) = *($1)
	*($5 + [164]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL $126(($5 + [8]), $3, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	*($5 + [4]) = ($5 + [160])
	*($5) = ($5 + [172])
	CALL $127($5, ($5 + [8]))
	$1 = *($5 + [72])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($5 + [76])) = $1
	CALL $173($1)
	
.LABEL $label$6
	$2 = *($5 + [60])
	if ( ($2 == 0) ){ goto $label$7 }
	$4 = ($5 + [64])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$0 = ([0] - $2)
	$1 = ($1 + [-64])
	
.LOOP $label$10:
	if ( ((*(($1 + [40])) & [1]) == 0) ){ goto $label$11 }
	CALL $173(*(($1 + [48])))
	
.LABEL $label$11
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$12 }
	*(($1 + [4])) = $3
	CALL $173($3)
	
.LABEL $label$12
	$1 = ($1 + [-72])
	if ( ((int_32)($1 + $0) != (int_32)[-64]) ){ goto $label$10 }
	$1 = *(($5 + [60]))
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($4) = $2
	CALL $173($1)
	
.LABEL $label$7
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL $173(*(($5 + [56])))
	
.LABEL $label$13
	*([0] + [4]) = ($5 + [176])
	return [1]
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($1 + [4])
	$8 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [36]) = $1
	*($9 + [32]) = $1
	*($9 + [40]) = ($1 + $3)
	*($9 + [48]) = ($9 + [32])
	*($9 + [56]) = $9
	CALL $130(($9 + [56]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$7 = *(($9 + [24]))
	$6 = *(($9 + [16]))
	$5 = *(($9 + [8]))
	$4 = *($9)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 $5), (int_64 $6), (int_64 $7), (int_64 $8))
	*([0] + [4]) = ($9 + [64])
	return [1]
}

void .FUNC $64 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [96])
	*([0] + [4]) = $15
	CALL require_auth($1)
	$6 = *(($0 + [40]))
	$13 = *(($0 + [44]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$1 }
	$14 = ($13 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($14)) == (int_64)$1) ){ goto $label$1 }
	$13 = $14
	$11 = ($14 + [-24])
	$14 = $11
	if ( ((int_32)($11 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$4 }
	$14 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [152]) == (int_32)$5), [96])
	goto $label$3 
	
.LABEL $label$4
	$14 = [0]
	$11 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$14 = CALL $85($5, $11)
	CALL eosio_assert(((int_32)*($14 + [152]) == (int_32)$5), [96])
	
.LABEL $label$3
	$11 = [0]
	$6 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($6, [1632])
	CALL eosio_assert(((int_64)*($14 + [8]) == (int_64)$2), [2624])
	if ( (int_64)($3 == 0) ){ goto $label$6 }
	$7 = ($14 + [56])
	CALL eosio_assert(((uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($7) - *($14 + [52])) / (int_32)[72])) >= (uint_64)$3), [2736])
	CALL eosio_assert(((int_32)*($14 + [76]) ^ (int_32)[1]), [2752])
	$0 = ($14 + [52])
	$11 = ((uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($7) - *($14 + [52])) / (int_32)[72])) >= (uint_64)$3)
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [2736])
	CALL eosio_assert(((int_32)*($14 + [76]) ^ (int_32)[1]), [2752])
	$0 = ($14 + [52])
	$7 = ($14 + [56])
	
.LABEL $label$5
	CALL eosio_assert($11, [1888])
	$11 = *($0)
	$13 = *($7)
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$7 }
	if ( ((int_32)($13 - $11) != (int_32)[144]) ){ goto $label$7 }
	CALL eosio_assert(*($11 + [25]), [2768])
	$11 = *($0)
	$13 = *($7)
	
.LABEL $label$7
	*($15 + [88]) = [0]
	*($15 + [80]) = (int_64)0
	$7 = ($13 - $11)
	$13 = ((int_32)$7 / (int_32)[72])
	$11 = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	if ( ((uint_32)$13 >= (uint_32)[59652324]) ){ goto $label$9 }
	$11 = CALL $172($7)
	*(($15 + [88])) = ($11 + ((int_32)$13 * (int_32)[72]))
	*($15 + [84]) = $11
	*($15 + [80]) = $11
	CALL $87(($15 + [80]), *($14 + [52]), *(($14 + [56])), $13)
	$11 = *($15 + [80])
	
.LABEL $label$10
	*(($12 = (($15 + [8]) + [12]))) = (int_64)0
	*($15 + [16]) = [0]
	$8 = (CASTING uint_32)(uint_64 ((int_64)$3 + (int_64)4294967295))
	$13 = ($11 + ((int_32)$8 * (int_32)[72]))
	*($15 + [8]) = *($13)
	$9 = (($15 + [8]) + [8])
	$10 = ($13 + [12])
	$7 = (*($10) - *($13 + [8]))
	if ( ($7 == 0) ){ goto $label$11 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$8 }
	$0 = CALL $172($7)
	*(($15 + [16])) = $0
	*(($15 + [24])) = ($0 + $7)
	*(($7 = ($15 + [20]))) = $0
	$10 = *(($13 + [8]))
	$13 = (*($10) - $10)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($0, $10, $13)
	*($7) = (*($7) + $13)
	
.LABEL $label$11
	$13 = ((int_32)$8 * (int_32)[72])
	$11 = ($11 + $13)
	*((($15 + [8]) + [44])) = *(($11 + [44]))
	*((($15 + [8]) + [36])) = *(($11 + [36]))
	*((($15 + [8]) + [28])) = *(($11 + [28]))
	*($15 + [28 align=4]) = *($11 + [20 align=4])
	CALL $187((($15 + [8]) + [48]), ($11 + [48]))
	*($15 + [72]) = *($11 + [64])
	CALL eosio_assert(((int_32)*($15 + [31]) ^ (int_32)[1]), [1920])
	CALL eosio_assert(((int_32)*($15 + [32]) ^ (int_32)[1]), [1952])
	CALL eosio_assert(((int_32)*($15 + [28]) ^ (int_32)[1]), [1984])
	CALL eosio_assert(((int_32)*($15 + [29]) ^ (int_32)[1]), [2016])
	CALL eosio_assert(((int_32)*($15 + [33]) ^ (int_32)[1]), [2032])
	CALL eosio_assert(((int_64)(CASTING uint_64)(uint_32 (*($12) - *($9))) == (int_64)((int_64)$4 + (int_64)-1)), [2832])
	*(($11 = (*($15 + [80]) + $13)) + [20]) = [1]
	*($15) = [255]
	$13 = ($11 + [12])
	$7 = *($13)
	if ( ((uint_32)$7 >= (uint_32)*(($11 + [16]))) ){ goto $label$13 }
	*($7) = [255]
	*($13) = (*($13) + [1])
	goto $label$12 
	
.LABEL $label$13
	CALL $131(($11 + [8]), $15)
	
.LABEL $label$12
	*($15) = ($15 + [80])
	CALL eosio_assert($6, [688])
	CALL $132($5, $14, (int_64)0, $15)
	if ( ((*(($15 + [56])) & [1]) == 0) ){ goto $label$14 }
	CALL $173(*(($15 + [64])))
	
.LABEL $label$14
	$14 = *($15 + [16])
	if ( ($14 == 0) ){ goto $label$15 }
	*(($15 + [20])) = $14
	CALL $173($14)
	
.LABEL $label$15
	$7 = *($15 + [80])
	if ( ($7 == 0) ){ goto $label$16 }
	$14 = *($15 + [84])
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$18 }
	$13 = ([0] - $7)
	$14 = ($14 + [-64])
	
.LOOP $label$19:
	if ( ((*(($14 + [40])) & [1]) == 0) ){ goto $label$20 }
	CALL $173(*(($14 + [48])))
	
.LABEL $label$20
	$11 = *($14)
	if ( ($11 == 0) ){ goto $label$21 }
	*(($14 + [4])) = $11
	CALL $173($11)
	
.LABEL $label$21
	$14 = ($14 + [-72])
	if ( ((int_32)($14 + $13) != (int_32)[-64]) ){ goto $label$19 }
	$14 = *($15 + [80])
	goto $label$17 
	
.LABEL $label$18
	$14 = $7
	
.LABEL $label$17
	*($15 + [84]) = $7
	CALL $173($14)
	
.LABEL $label$16
	*([0] + [4]) = ($15 + [96])
	return (unreachable)
	
.LABEL $label$9
	CALL $186(($15 + [80]))
	
.LABEL $label$8
	CALL $186($9)
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2608]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	CALL require_recipient(*($1))
}

void .FUNC $66 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$5 = *(($0 + [40]))
	$10 = *(($0 + [44]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$1 }
	$11 = ($10 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$1 }
	$10 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$4 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [152]) == (int_32)$4), [96])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$9 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $85($4, $9)
	CALL eosio_assert(((int_32)*($11 + [152]) == (int_32)$4), [96])
	
.LABEL $label$3
	$9 = [0]
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [1632])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)$2), [2624])
	if ( (int_64)($3 == 0) ){ goto $label$6 }
	$6 = ($11 + [56])
	CALL eosio_assert(((uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($6) - *($11 + [52])) / (int_32)[72])) >= (uint_64)$3), [2736])
	CALL eosio_assert(((int_32)*($11 + [76]) ^ (int_32)[1]), [2752])
	$0 = ($11 + [52])
	$9 = ((uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($6) - *($11 + [52])) / (int_32)[72])) >= (uint_64)$3)
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [2736])
	CALL eosio_assert(((int_32)*($11 + [76]) ^ (int_32)[1]), [2752])
	$0 = ($11 + [52])
	$6 = ($11 + [56])
	
.LABEL $label$5
	CALL eosio_assert($9, [1888])
	$9 = *($0)
	$10 = *($6)
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$7 }
	if ( ((int_32)($10 - $9) != (int_32)[144]) ){ goto $label$7 }
	CALL eosio_assert(*($9 + [25]), [2768])
	$9 = *($0)
	$10 = *($6)
	
.LABEL $label$7
	*($12 + [88]) = [0]
	*($12 + [80]) = (int_64)0
	$6 = ($10 - $9)
	$10 = ((int_32)$6 / (int_32)[72])
	$9 = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	if ( ((uint_32)$10 >= (uint_32)[59652324]) ){ goto $label$9 }
	$9 = CALL $172($6)
	*(($12 + [88])) = ($9 + ((int_32)$10 * (int_32)[72]))
	*($12 + [84]) = $9
	*($12 + [80]) = $9
	CALL $87(($12 + [80]), *($11 + [52]), *(($11 + [56])), $10)
	$9 = *($12 + [80])
	
.LABEL $label$10
	*((($12 + [8]) + [12])) = (int_64)0
	*($12 + [16]) = [0]
	$7 = (CASTING uint_32)(uint_64 ((int_64)$3 + (int_64)4294967295))
	$10 = ($9 + ((int_32)$7 * (int_32)[72]))
	*($12 + [8]) = *($10)
	$8 = ($10 + [12])
	$6 = (*($8) - *($10 + [8]))
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$8 }
	$0 = CALL $172($6)
	*(($12 + [16])) = $0
	*(($12 + [24])) = ($0 + $6)
	*(($6 = ($12 + [20]))) = $0
	$8 = *(($10 + [8]))
	$10 = (*($8) - $8)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($0, $8, $10)
	*($6) = (*($6) + $10)
	
.LABEL $label$11
	$10 = ((int_32)$7 * (int_32)[72])
	$9 = ($9 + $10)
	*((($12 + [8]) + [44])) = *(($9 + [44]))
	*((($12 + [8]) + [36])) = *(($9 + [36]))
	*((($12 + [8]) + [28])) = *(($9 + [28]))
	*($12 + [28 align=4]) = *($9 + [20 align=4])
	CALL $187((($12 + [8]) + [48]), ($9 + [48]))
	*($12 + [72]) = *($9 + [64])
	CALL eosio_assert(((int_32)*($12 + [31]) ^ (int_32)[1]), [1920])
	CALL eosio_assert(((int_32)*($12 + [32]) ^ (int_32)[1]), [1952])
	CALL eosio_assert(((int_32)*($12 + [28]) ^ (int_32)[1]), [1984])
	CALL eosio_assert(((int_32)*($12 + [29]) ^ (int_32)[1]), [2016])
	CALL eosio_assert(((int_32)*($12 + [33]) ^ (int_32)[1]), [2032])
	*(($9 = (*($12 + [80]) + $10)) + [21]) = [1]
	*($9 + [25]) = [1]
	*($12) = ($12 + [80])
	CALL eosio_assert($5, [688])
	CALL $129($4, $11, (int_64)0, $12)
	if ( ((*($12 + [56]) & [1]) == 0) ){ goto $label$12 }
	CALL $173(*(($12 + [64])))
	
.LABEL $label$12
	$11 = *($12 + [16])
	if ( ($11 == 0) ){ goto $label$13 }
	*(($12 + [20])) = $11
	CALL $173($11)
	
.LABEL $label$13
	$6 = *($12 + [80])
	if ( ($6 == 0) ){ goto $label$14 }
	$11 = *($12 + [84])
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$16 }
	$10 = ([0] - $6)
	$11 = ($11 + [-64])
	
.LOOP $label$17:
	if ( ((*(($11 + [40])) & [1]) == 0) ){ goto $label$18 }
	CALL $173(*(($11 + [48])))
	
.LABEL $label$18
	$9 = *($11)
	if ( ($9 == 0) ){ goto $label$19 }
	*(($11 + [4])) = $9
	CALL $173($9)
	
.LABEL $label$19
	$11 = ($11 + [-72])
	if ( ((int_32)($11 + $10) != (int_32)[-64]) ){ goto $label$17 }
	$11 = *($12 + [80])
	goto $label$15 
	
.LABEL $label$16
	$11 = $6
	
.LABEL $label$15
	*($12 + [84]) = $6
	CALL $173($11)
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [96])
	return (unreachable)
	
.LABEL $label$9
	CALL $186(($12 + [80]))
	
.LABEL $label$8
	CALL $186((($12 + [8]) + [8]))
	(unreachable)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [288])
	*([0] + [4]) = $4
	*(($5 = $4) + [252]) = $0
	*($5 + [240]) = *($1)
	*($5 + [244]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*((($5 + [8]) + [24])) = [0]
	*(($4 = ($5 + [48]))) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [256])
	*(($5 + [64])) = (int_64)0
	*(($5 + [72])) = (int_64)0
	*(($5 + [88])) = (int_64)0
	*(($5 + [96])) = [0]
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*(($5 + [100])) = [0]
	*($5 + [104]) = [0]
	*(($5 + [108])) = [0]
	*(($5 + [112])) = [0]
	*($5 + [116]) = [0]
	*(($5 + [120])) = [0]
	*(($5 + [124])) = [0]
	*($5 + [128]) = [0]
	*(($5 + [132])) = [0]
	*(($5 + [136])) = [0]
	CALL memset(($5 + [140]), [0], [66])
	*($5 + [216]) = (int_64)0
	*($5 + [208]) = (int_64)0
	*($5 + [224]) = (int_64)0
	*($5 + [232]) = (int_64)0
	*($5 + [260]) = $0
	*($5 + [256]) = $0
	*($5 + [264]) = ($0 + $2)
	*($5 + [272]) = ($5 + [256])
	*($5 + [280]) = ($5 + [8])
	CALL $134(($5 + [280]), ($5 + [272]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [260]) = ($5 + [240])
	*($5 + [256]) = ($5 + [252])
	CALL $135(($5 + [256]), ($5 + [8]))
	CALL $136(($5 + [8]))
	*([0] + [4]) = ($5 + [288])
	return [1]
}

void .FUNC $60 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_64 $13, int_64 $14, int_64 $15, int_64 $16)
{
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	int_32 $32
	$32 = (*([0] + [4]) - [576])
	*([0] + [4]) = $32
	$29 = (int_64)0
	$30 = (int_64)59
	$27 = [2608]
	$31 = (int_64)0
	
.LOOP $label$1:
	$28 = (int_64)0
	if ( ((uint_64)$29 > (uint_64)(int_64)11) ){ goto $label$2 }
	$25 = *($27)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$25 = ($25 + [165])
	goto $label$3 
	
.LABEL $label$4
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$28 = ((int_64)(CASTING uint_64)(uint_32 ($25 & [31])) << (int_64)((int_64)$30 & (int_64)4294967295))
	
.LABEL $label$2
	$27 = ($27 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$31 = ((int_64)$28 | (int_64)$31)
	$30 = ((int_64)$30 + (int_64)-5)
	if ( ((int_64)$30 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($31)
	$22 = *(($0 + [40]))
	$24 = *(($0 + [44]))
	if ( ((int_32)$24 == (int_32)$22) ){ goto $label$5 }
	$27 = ($24 + [-24])
	$23 = ([0] - $22)
	
.LOOP $label$6:
	if ( ((int_64)*(*($27)) == (int_64)$1) ){ goto $label$5 }
	$24 = $27
	$25 = ($27 + [-24])
	$27 = $25
	if ( ((int_32)($25 + $23) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$17 = ($0 + [16])
	if ( ((int_32)$24 == (int_32)$22) ){ goto $label$8 }
	$26 = *(($24 + [-24]))
	CALL eosio_assert(((int_32)*($26 + [152]) == (int_32)$17), [96])
	goto $label$7 
	
.LABEL $label$8
	$26 = [0]
	$27 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$7 }
	$26 = CALL $85($17, $27)
	CALL eosio_assert(((int_32)*($26 + [152]) == (int_32)$17), [96])
	
.LABEL $label$7
	$18 = ((int_32)$26 != (int_32)[0])
	CALL eosio_assert($18, [1632])
	CALL eosio_assert(((int_64)*($26 + [8]) == (int_64)$2), [2624])
	CALL eosio_assert(((int_32)*($26 + [76]) ^ (int_32)[1]), [2752])
	$23 = [0]
	$25 = ($27 & [1])
	$27 = *($3)
	$24 = ($27 & [1])
	$27 = *($26 + [40])
	$19 = uint_32($27 >> [1])
	$22 = ( *(($26 + [44])) ? $19 : $24 )
	if ( ((int_32)$22 != (int_32)( *($3 + [4]) ? uint_32($27 >> [1]) : $25 )) ){ goto $label$9 }
	$27 = (($26 + [40]) + [1])
	$25 = ( *($3 + [8]) ? ($3 + [1]) : $25 )
	if ( $24 ){ goto $label$12 }
	if ( ($22 == 0) ){ goto $label$11 }
	$24 = ([0] - $19)
	
.LOOP $label$13:
	if ( ((int_32)*($27) != (int_32)*($25)) ){ goto $label$10 }
	$23 = [1]
	$25 = ($25 + [1])
	$27 = ($27 + [1])
	$24 = ($24 + [1])
	if ( $24 ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$12
	if ( ($22 == 0) ){ goto $label$11 }
	$23 = (CALL memcmp(( *(($26 + [48])) ? $27 : $24 ), $25, $22) == 0)
	goto $label$9 
	
.LABEL $label$11
	$23 = [1]
	goto $label$9 
	
.LABEL $label$10
	$23 = [0]
	
.LABEL $label$9
	CALL eosio_assert($23, [2896])
	*($32 + [552]) = [0]
	*($32 + [544]) = (int_64)0
	$25 = (*(($26 + [56])) - *($26 + [52]))
	$27 = ((int_32)$25 / (int_32)[72])
	if ( ($25 == 0) ){ goto $label$16 }
	if ( ((uint_32)$27 >= (uint_32)[59652324]) ){ goto $label$14 }
	$25 = CALL $172($25)
	*(($32 + [552])) = ($25 + ((int_32)$27 * (int_32)[72]))
	*($32 + [548]) = $25
	*($32 + [544]) = $25
	CALL $87(($32 + [544]), *(($26 + [52])), *(($26 + [56])), $27)
	$27 = *($32 + [544])
	$25 = *($32 + [548])
	goto $label$15 
	
.LABEL $label$16
	$27 = [0]
	$25 = [0]
	
.LABEL $label$15
	$23 = ((int_32)($25 - $27) / (int_32)[72])
	$24 = ((int_32)(*($7 + [4]) - *($7)) / (int_32)[12])
	if ( ((uint_32)$24 <= (uint_32)$23) ){ goto $label$18 }
	CALL $88(($32 + [544]), ($24 - $23))
	goto $label$17 
	
.LABEL $label$18
	if ( ((uint_32)$24 >= (uint_32)$23) ){ goto $label$17 }
	$24 = ((int_32)$24 * (int_32)[72])
	$23 = ($27 + $24)
	if ( ((int_32)$25 == (int_32)$23) ){ goto $label$19 }
	$24 = (([0] - $27) - $24)
	$27 = ($25 + [-64])
	
.LOOP $label$20:
	if ( ((*(($27 + [40])) & [1]) == 0) ){ goto $label$21 }
	CALL $173(*(($27 + [48])))
	
.LABEL $label$21
	$25 = *($27)
	if ( ($25 == 0) ){ goto $label$22 }
	*(($27 + [4])) = $25
	CALL $173($25)
	
.LABEL $label$22
	$27 = ($27 + [-72])
	if ( ((int_32)($27 + $24) != (int_32)[-64]) ){ goto $label$20 }
	
.LABEL $label$19
	*($32 + [548]) = $23
	
.LABEL $label$17
	$25 = [32]
	$20 = *(($26 + [32]))
	$30 = (int_64)0
	$24 = *($6)
	if ( ((int_32)*($6 + [4]) == (int_32)$24) ){ goto $label$23 }
	$30 = (int_64)0
	$27 = [0]
	$3 = [0]
	
.LOOP $label$24:
	$24 = ($24 + $27)
	CALL eosio_assert(((int_64)*(($24 + [8])) == (int_64)$20), [2928])
	$30 = ((int_64)*($24) + (int_64)$30)
	CALL eosio_assert(((int_64)$30 > (int_64)-4611686018427387904), [2976])
	CALL eosio_assert(((int_64)$30 < (int_64)4611686018427387904), [3008])
	$23 = (*($6) + $27)
	*(($24 = (*($32 + [544]) + $25))) = *($23)
	*(($24 + [12])) = *(($23 + [12]))
	*(($24 + [8])) = *(($23 + [8]))
	$25 = ($25 + [72])
	$27 = ($27 + [16])
	$24 = *($6)
	$3 = ($3 + [1])
	if ( ($3 <= int_32((*(($6 + [4])) - $24) >> [4])) ){ goto $label$24 }
	
.LABEL $label$23
	$25 = *($11)
	if ( ((int_32)*($11 + [4]) == (int_32)$25) ){ goto $label$25 }
	$27 = [0]
	$6 = [48]
	$23 = ($11 + [4])
	$24 = [0]
	
.LOOP $label$26:
	CALL $175((*($32 + [544]) + $6), ($25 + $27))
	$6 = ($6 + [72])
	$27 = ($27 + [12])
	$25 = *($11)
	$24 = ($24 + [1])
	if ( ($24 <= ((int_32)(*($23) - $25) / (int_32)[12])) ){ goto $label$26 }
	
.LABEL $label$25
	$21 = *(($26 + [32]))
	$28 = (int_64)0
	$27 = *($32 + [544])
	if ( ((int_32)*($32 + [548]) == (int_32)$27) ){ goto $label$27 }
	$11 = [0]
	$28 = (int_64)0
	
.LOOP $label$28:
	$25 = ((int_32)$11 * (int_32)[72])
	$24 = ($27 + $25)
	$6 = ($24 + [8])
	$3 = ((int_32)$11 * (int_32)[12])
	$27 = (*($7) + $3)
	$23 = *($27)
	if ( ($23 & [1]) ){ goto $label$30 }
	$27 = uint_32($23 >> [1])
	goto $label$29 
	
.LABEL $label$30
	$27 = *($27 + [4])
	
.LABEL $label$29
	$22 = *($6)
	$23 = ($24 + [12])
	$24 = (*($23) - $22)
	if ( ((uint_32)$27 <= (uint_32)$24) ){ goto $label$32 }
	CALL $105($6, ($27 - $24))
	goto $label$31 
	
.LABEL $label$32
	if ( ((uint_32)$27 >= (uint_32)$24) ){ goto $label$31 }
	*($23) = ($22 + $27)
	
.LABEL $label$31
	$27 = [0]
	
.LOOP $label$34:
	$6 = (*($7) + $3)
	$23 = *($6)
	$24 = ($23 & [1])
	if ( $24 ){ goto $label$36 }
	if ( ($27 <= uint_32($23 >> [1])) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	if ( ((uint_32)$27 >= (uint_32)*($6 + [4])) ){ goto $label$33 }
	
.LABEL $label$35
	if ( $24 ){ goto $label$38 }
	$6 = ($6 + [1])
	goto $label$37 
	
.LABEL $label$38
	$6 = *($6 + [8])
	
.LABEL $label$37
	*((*((*($32 + [544]) + $25) + [8]) + $27)) = *(($6 + $27))
	*((*($32 + [544]) + $25) + [25]) = [1]
	$27 = ($27 + [1])
	goto $label$34 
	
.LABEL $label$33
	$27 = (*($5) + ($11 << [4]))
	$1 = *($27 + [8])
	$29 = *($27)
	$31 = $29
	$27 = (*($32 + [544]) + $25)
	if ( (*($27 + [22]) == 0) ){ goto $label$39 }
	$31 = ((int_64)((int_64)$29 / (int_64)2) + (int_64)$29)
	
.LABEL $label$39
	$6 = *($27 + [24])
	$27 = *($27 + [23])
	CALL eosio_assert(((int_64)$1 == (int_64)$21), [2928])
	$28 = ((int_64)( ((int_64)$29 / (int_64)2) ? ((int_64)$31 + (int_64)( $29 ? (int_64)0 : $27 )) : $6 ) + (int_64)$28)
	CALL eosio_assert(((int_64)$28 > (int_64)-4611686018427387904), [2976])
	CALL eosio_assert(((int_64)$28 < (int_64)4611686018427387904), [3008])
	$27 = *($32 + [544])
	$11 = ($11 + [1])
	if ( ($11 <= ((int_32)(*($32 + [548]) - $27) / (int_32)[72])) ){ goto $label$28 }
	
.LABEL $label$27
	*($32 + [132]) = $8
	*($32 + [136]) = $12
	*($32 + [128]) = ($32 + [544])
	CALL eosio_assert($18, [688])
	CALL $144($17, $26, (int_64)0, ($32 + [128]))
	$29 = CALL current_time()
	*(($32 + [508])) = [0]
	*((($32 + [480]) + [32])) = [0]
	*($32 + [492]) = [0]
	*($32 + [496]) = [0]
	*($32 + [500]) = [0]
	*($32 + [504]) = [0]
	*($32 + [480]) = ((CASTING uint_32)(uint_64 ((uint_64)$29 / (uint_64)(int_64)1000000)) + [60])
	*($32 + [516]) = [0]
	*(($32 + [520])) = [0]
	*(($32 + [524])) = [0]
	*($32 + [528]) = [0]
	*(($32 + [532])) = [0]
	*(($32 + [536])) = [0]
	if ( ((int_64)$20 != (int_64)1397703940) ){ goto $label$41 }
	$29 = *($26)
	*($32 + [464]) = $30
	*($32 + [472]) = $20
	$31 = *($0)
	CALL $145(($32 + [448]), $0, $26)
	*((($32 + [48]) + [8])) = *($32 + [472])
	*($32 + [48]) = *($32 + [464])
	CALL _Z12eos_transferyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($31, $29, ($32 + [48]), ($32 + [448]))
	if ( ((*($32 + [448]) & [1]) == 0) ){ goto $label$42 }
	CALL $173(*($32 + [456]))
	
.LABEL $label$42
	$29 = *($26)
	*($32 + [440]) = $21
	*($32 + [424]) = $20
	*((($32 + [32]) + [8])) = *($32 + [440])
	*($32 + [432]) = $28
	*($32 + [416]) = $30
	*((($32 + [16]) + [8])) = *($32 + [424])
	*($32 + [32]) = *($32 + [432])
	*($32 + [16]) = *($32 + [416])
	CALL $146($0, $29, ($32 + [32]), ($32 + [16]))
	*($32 + [408]) = $21
	*(($32 + [8])) = $21
	*($32 + [400]) = $28
	*($32) = $28
	CALL $147($0, $26, $32, $13, $14, $15)
	goto $label$40 
	
.LABEL $label$41
	$13 = *($26 + [16])
	$29 = (int_64)0
	$31 = (int_64)59
	$27 = [3040]
	$2 = (int_64)0
	
.LOOP $label$43:
	$1 = (int_64)0
	if ( ((uint_64)$29 > (uint_64)(int_64)11) ){ goto $label$44 }
	$6 = *($27)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$6 = ($6 + [165])
	goto $label$45 
	
.LABEL $label$46
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$1 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$44
	$27 = ($27 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$2 = ((int_64)$1 | (int_64)$2)
	$31 = ((int_64)$31 + (int_64)-5)
	if ( ((int_64)$31 != (int_64)-6) ){ goto $label$43 }
	$29 = *($26)
	$31 = *($0)
	if ( ((int_64)$13 != (int_64)$2) ){ goto $label$47 }
	*($32 + [392]) = $20
	*($32 + [384]) = $30
	CALL $145(($32 + [368]), $0, $26)
	*((($32 + [96]) + [8])) = *($32 + [392])
	*($32 + [96]) = *($32 + [384])
	CALL _Z14token_transferyyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($13, $31, $29, ($32 + [96]), ($32 + [368]))
	if ( ((*($32 + [368]) & [1]) == 0) ){ goto $label$48 }
	CALL $173(*($32 + [376]))
	
.LABEL $label$48
	$29 = *($26)
	*($32 + [360]) = $21
	*($32 + [344]) = $20
	*((($32 + [80]) + [8])) = *($32 + [360])
	*($32 + [352]) = $28
	*($32 + [336]) = $30
	*((($32 + [64]) + [8])) = *($32 + [344])
	*($32 + [80]) = *($32 + [352])
	*($32 + [64]) = *($32 + [336])
	CALL $146($0, $29, ($32 + [80]), ($32 + [64]))
	goto $label$40 
	
.LABEL $label$47
	*($32 + [328]) = $20
	*($32 + [320]) = $30
	CALL $145(($32 + [304]), $0, $26)
	*(($32 + [120])) = *($32 + [328])
	*($32 + [112]) = *($32 + [320])
	CALL _Z14token_transferyyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($13, $31, $29, ($32 + [112]), ($32 + [304]))
	if ( ((*($32 + [304]) & [1]) == 0) ){ goto $label$40 }
	CALL $173(*($32 + [312]))
	
.LABEL $label$40
	$25 = ($32 + [516])
	$1 = *($0)
	$29 = (int_64)0
	$28 = (int_64)59
	$27 = [528]
	$31 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$29 > (uint_64)(int_64)5) ){ goto $label$54 }
	$6 = *($27)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$6 = ($6 + [165])
	goto $label$52 
	
.LABEL $label$54
	$30 = (int_64)0
	if ( ((uint_64)$29 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	
.LABEL $label$50
	$27 = ($27 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$31 = ((int_64)$30 | (int_64)$31)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$49 }
	*($32 + [296]) = $31
	*($32 + [288]) = $1
	$29 = (int_64)0
	$28 = (int_64)59
	$27 = [3056]
	$31 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$29 > (uint_64)(int_64)9) ){ goto $label$60 }
	$6 = *($27)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$6 = ($6 + [165])
	goto $label$58 
	
.LABEL $label$60
	$30 = (int_64)0
	if ( ((uint_64)$29 <= (uint_64)(int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	
.LABEL $label$56
	$27 = ($27 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$31 = ((int_64)$30 | (int_64)$31)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$55 }
	*($32 + [280]) = $31
	$6 = CALL $128(($32 + [128]), $26)
	$27 = *(($32 + [520]))
	if ( ((uint_32)$27 >= (uint_32)*(($32 + [524]))) ){ goto $label$65 }
	*($27 + [16 align=4]) = (int_64)0
	$29 = *($0)
	*($27 + [8]) = $31
	*($27) = $29
	$24 = [0]
	*(($23 = ($27 + [24]))) = [0]
	$25 = CALL $172([16])
	*($27 + [16]) = $25
	$7 = ($25 + [16])
	*($23) = $7
	*(($25 + [8])) = *((($32 + [288]) + [8]))
	*($25) = *($32 + [288])
	*(($27 + [20])) = $7
	*($27 + [28]) = [0]
	*(($25 = ($27 + [32]))) = [0]
	*(($27 + [36])) = [0]
	*($32 + [560]) = [0]
	CALL $93(($32 + [560]), $6)
	$23 = *($32 + [560])
	if ( ($23 == 0) ){ goto $label$64 }
	$27 = ($27 + [28])
	CALL $17($27, $23)
	$24 = *($25)
	$27 = *($27)
	goto $label$63 
	
.LABEL $label$65
	CALL $148($25, ($32 + [288]), $0, ($32 + [280]), ($32 + [128]))
	$27 = *($32 + [192])
	if ( $27 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$64
	$27 = [0]
	
.LABEL $label$63
	*($32 + [564]) = $27
	*($32 + [560]) = $27
	*($32 + [568]) = $24
	CALL $94(($32 + [560]), $6)
	*(($27 = (($32 + [480]) + [40]))) = (*($27) + [40])
	$27 = *($32 + [192])
	if ( ($27 == 0) ){ goto $label$61 }
	
.LABEL $label$62
	*(($32 + [196])) = $27
	CALL $173($27)
	
.LABEL $label$61
	$24 = *($32 + [180])
	if ( ($24 == 0) ){ goto $label$66 }
	$23 = ($32 + [184])
	$27 = *($23)
	if ( ((int_32)$27 == (int_32)$24) ){ goto $label$68 }
	$25 = ([0] - $24)
	$27 = ($27 + [-64])
	
.LOOP $label$69:
	if ( ((*(($27 + [40])) & [1]) == 0) ){ goto $label$70 }
	CALL $173(*(($27 + [48])))
	
.LABEL $label$70
	$6 = *($27)
	if ( ($6 == 0) ){ goto $label$71 }
	*(($27 + [4])) = $6
	CALL $173($6)
	
.LABEL $label$71
	$27 = ($27 + [-72])
	if ( ((int_32)($27 + $25) != (int_32)[-64]) ){ goto $label$69 }
	$27 = *(($32 + [180]))
	goto $label$67 
	
.LABEL $label$68
	$27 = $24
	
.LABEL $label$67
	*($23) = $24
	CALL $173($27)
	
.LABEL $label$66
	if ( ((*($32 + [168]) & [1]) == 0) ){ goto $label$72 }
	CALL $173(*(($32 + [176])))
	
.LABEL $label$72
	$29 = CALL $110($0)
	*($32 + [136]) = (int_64)0
	*($32 + [128]) = $29
	$29 = *($0)
	CALL $149(($32 + [288]), ($32 + [480]))
	$27 = *($32 + [288])
	CALL send_deferred(($32 + [128]), $29, $27, (*($32 + [292]) - $27), [0])
	$27 = *($32 + [288])
	if ( ($27 == 0) ){ goto $label$73 }
	*($32 + [292]) = $27
	CALL $173($27)
	
.LABEL $label$73
	CALL $150(($32 + [480]))
	$24 = *($32 + [544])
	if ( ($24 == 0) ){ goto $label$74 }
	$27 = *($32 + [548])
	if ( ((int_32)$27 == (int_32)$24) ){ goto $label$76 }
	$25 = ([0] - $24)
	$27 = ($27 + [-64])
	
.LOOP $label$77:
	if ( ((*(($27 + [40])) & [1]) == 0) ){ goto $label$78 }
	CALL $173(*(($27 + [48])))
	
.LABEL $label$78
	$6 = *($27)
	if ( ($6 == 0) ){ goto $label$79 }
	*(($27 + [4])) = $6
	CALL $173($6)
	
.LABEL $label$79
	$27 = ($27 + [-72])
	if ( ((int_32)($27 + $25) != (int_32)[-64]) ){ goto $label$77 }
	$27 = *($32 + [544])
	goto $label$75 
	
.LABEL $label$76
	$27 = $24
	
.LABEL $label$75
	*($32 + [548]) = $24
	CALL $173($27)
	
.LABEL $label$74
	*([0] + [4]) = ($32 + [576])
	return (unreachable)
	
.LABEL $label$14
	CALL $186(($32 + [544]))
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [288])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [288])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [288])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC $62 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	CALL require_auth($1)
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$9 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$8 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [152]) == (int_32)$7), [96])
	goto $label$3 
	
.LABEL $label$4
	$9 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$5 }
	$9 = CALL $85($7, $9)
	CALL eosio_assert(((int_32)*($9 + [152]) == (int_32)$7), [96])
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	
.LABEL $label$3
	*($10 + [108]) = $9
	*($10 + [104]) = $7
	$8 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1632])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)$2), [2624])
	if ( (int_64)($3 == 0) ){ goto $label$7 }
	CALL eosio_assert(((uint_64)(CASTING uint_64)(uint_32 ((int_32)(*(($9 + [56])) - *($9 + [52])) / (int_32)[72])) >= (uint_64)$3), [2736])
	CALL eosio_assert(((int_32)*($9 + [76]) ^ (int_32)[1]), [2752])
	CALL $86($0, ($10 + [104]), $3)
	$9 = *($10 + [108])
	$8 = ((uint_64)(CASTING uint_64)(uint_32 ((int_32)(*(($9 + [56])) - *($9 + [52])) / (int_32)[72])) >= (uint_64)$3)
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [2736])
	CALL eosio_assert(((int_32)*($9 + [76]) ^ (int_32)[1]), [2752])
	CALL $86($0, ($10 + [104]), (int_64)0)
	
.LABEL $label$6
	CALL eosio_assert($8, [1888])
	$9 = *($10 + [108])
	$5 = *(($9 + [56]))
	$8 = *($9 + [52])
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$8 }
	if ( ((int_32)($5 - $8) != (int_32)[144]) ){ goto $label$8 }
	CALL eosio_assert(*($8 + [25]), [2768])
	$9 = *($10 + [108])
	$5 = *(($9 + [56]))
	$8 = *($9 + [52])
	
.LABEL $label$8
	*($10 + [96]) = [0]
	*($10 + [88]) = (int_64)0
	$0 = ($5 - $8)
	$5 = ((int_32)$0 / (int_32)[72])
	$8 = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	if ( ((uint_32)$5 >= (uint_32)[59652324]) ){ goto $label$10 }
	$8 = CALL $172($0)
	*(($10 + [96])) = ($8 + ((int_32)$5 * (int_32)[72]))
	*($10 + [92]) = $8
	*($10 + [88]) = $8
	CALL $87(($10 + [88]), *($9 + [52]), *(($9 + [56])), $5)
	$8 = *($10 + [88])
	
.LABEL $label$11
	*((($10 + [16]) + [12])) = (int_64)0
	*($10 + [24]) = [0]
	$4 = (CASTING uint_32)(uint_64 ((int_64)$3 + (int_64)4294967295))
	$9 = ($8 + ((int_32)$4 * (int_32)[72]))
	*($10 + [16]) = *($9)
	$6 = ($9 + [12])
	$5 = (*($6) - *($9 + [8]))
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	$0 = CALL $172($5)
	*(($10 + [24])) = $0
	*(($10 + [32])) = ($0 + $5)
	*(($5 = ($10 + [28]))) = $0
	$6 = *(($9 + [8]))
	$9 = (*($6) - $6)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($0, $6, $9)
	*($5) = (*($5) + $9)
	
.LABEL $label$12
	$5 = ((int_32)$4 * (int_32)[72])
	$9 = ($8 + $5)
	*((($10 + [16]) + [44])) = *(($9 + [44]))
	*((($10 + [16]) + [36])) = *(($9 + [36]))
	*((($10 + [16]) + [28])) = *(($9 + [28]))
	*($10 + [36 align=4]) = *($9 + [20 align=4])
	CALL $187((($10 + [16]) + [48]), ($9 + [48]))
	*($10 + [80]) = *($9 + [64])
	CALL eosio_assert(((int_32)*($10 + [39]) ^ (int_32)[1]), [1920])
	CALL eosio_assert(((int_32)*($10 + [40]) ^ (int_32)[1]), [1952])
	CALL eosio_assert(((int_32)*($10 + [36]) ^ (int_32)[1]), [1984])
	CALL eosio_assert(((int_32)*($10 + [37]) ^ (int_32)[1]), [2016])
	CALL eosio_assert(((int_32)*($10 + [41]) ^ (int_32)[1]), [2032])
	CALL eosio_assert(((int_32)((uint_32)*(*(*($10 + [108]) + [64])) % (uint_32)[13]) != (int_32)[0]), [2864])
	*((*($10 + [88]) + $5) + [24]) = [257]
	$9 = *($10 + [108])
	*($10 + [8]) = ($10 + [88])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [688])
	CALL $133($7, $9, (int_64)0, ($10 + [8]))
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$13 }
	CALL $173(*(($10 + [72])))
	
.LABEL $label$13
	$9 = *($10 + [24])
	if ( ($9 == 0) ){ goto $label$14 }
	*(($10 + [28])) = $9
	CALL $173($9)
	
.LABEL $label$14
	$5 = *($10 + [88])
	if ( ($5 == 0) ){ goto $label$15 }
	$9 = *($10 + [92])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$17 }
	$8 = ([0] - $5)
	$9 = ($9 + [-64])
	
.LOOP $label$18:
	if ( ((*(($9 + [40])) & [1]) == 0) ){ goto $label$19 }
	CALL $173(*(($9 + [48])))
	
.LABEL $label$19
	$7 = *($9)
	if ( ($7 == 0) ){ goto $label$20 }
	*(($9 + [4])) = $7
	CALL $173($7)
	
.LABEL $label$20
	$9 = ($9 + [-72])
	if ( ((int_32)($9 + $8) != (int_32)[-64]) ){ goto $label$18 }
	$9 = *($10 + [88])
	goto $label$16 
	
.LABEL $label$17
	$9 = $5
	
.LABEL $label$16
	*($10 + [92]) = $5
	CALL $173($9)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [112])
	return (unreachable)
	
.LABEL $label$10
	CALL $186(($10 + [88]))
	
.LABEL $label$9
	CALL $186((($10 + [16]) + [8]))
	(unreachable)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $172($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $173($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[72]) >= (uint_32)$1) ){ goto $label$5 }
	$9 = *($0)
	$2 = ((int_32)($7 - $9) / (int_32)[72])
	$5 = ($2 + $1)
	if ( ((uint_32)$5 >= (uint_32)[59652324]) ){ goto $label$3 }
	$7 = [59652323]
	$8 = ((int_32)($8 - $9) / (int_32)[72])
	if ( ((uint_32)$8 > (uint_32)[29826160]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $172(((int_32)$7 * (int_32)[72]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*((($9 = CALL memset($7, [0], [72])) + [16])) = [0]
	*($9 + [8 align=4]) = (int_64)0
	*($9 + [32]) = (int_64)0
	*(($7 = ($9 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [192])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$9:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($8, [256])
	*(($9 + [56])) = [0]
	*($9 + [48 align=4]) = (int_64)0
	$7 = (*($2) + [72])
	*($2) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $186($0)
	
.LABEL $label$2
	$3 = ($8 + ((int_32)$7 * (int_32)[72]))
	$9 = ($8 + ((int_32)$2 * (int_32)[72]))
	$8 = $9
	
.LOOP $label$12:
	*((($2 = CALL memset($8, [0], [72])) + [16])) = [0]
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*(($7 = ($2 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [192])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$14:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($8, [256])
	*(($2 + [56])) = [0]
	*($2 + [48 align=4]) = (int_64)0
	$8 = ($2 + [72])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$12 }
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$18 }
	$4 = ([0] - $7)
	$7 = ($2 + [-24])
	
.LOOP $label$19:
	*(($2 = ($9 + [-64]))) = (int_64)0
	*(($1 = ($9 + [-56]))) = [0]
	$5 = ($7 + [-40])
	*($2) = *($5)
	*(($9 + [-60])) = *(($7 + [-36]))
	*(($9 + [-72])) = *(($7 + [-48]))
	$2 = ($7 + [-32])
	*($1) = *($2)
	*($5) = (int_64)0
	*($2) = [0]
	*(($9 + [-28])) = *(($7 + [-4]))
	*(($9 + [-36])) = *(($7 + [-12]))
	*(($9 + [-44])) = *(($7 + [-20]))
	*(($9 + [-52])) = *(($7 + [-28]))
	$2 = ($7 + [8])
	*(($9 + [-16])) = *($2)
	*(($9 + [-24])) = *($7)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($2) = [0]
	*(($9 + [-8])) = *(($7 + [16]))
	$9 = ($9 + [-72])
	$7 = ($7 + [-72])
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$19 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$17 
	
.LABEL $label$18
	$2 = $7
	
.LABEL $label$17
	*($0) = $9
	*(($0 + [4])) = $8
	*(($0 + [8])) = $3
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$20 }
	$9 = ([0] - $2)
	$7 = ($7 + [-64])
	
.LOOP $label$21:
	if ( ((*(($7 + [40])) & [1]) == 0) ){ goto $label$22 }
	CALL $173(*(($7 + [48])))
	
.LABEL $label$22
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$23 }
	*(($7 + [4])) = $8
	CALL $173($8)
	
.LABEL $label$23
	$7 = ($7 + [-72])
	if ( ((int_32)($7 + $9) != (int_32)[-64]) ){ goto $label$21 }
	
.LABEL $label$20
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $173($2)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$10 = ($1 + [64])
	$4 = ([0] - $2)
	$8 = ($0 + [4])
	$1 = *($8)
	
.LOOP $label$3:
	*($1 + [8]) = [0]
	*(($0 = ($1 + [12]))) = (int_64)0
	*($1) = *(($10 + [-64]))
	$9 = ($10 + [-56])
	$6 = ($10 + [-52])
	$2 = (*($6) - *($9))
	if ( ($2 == 0) ){ goto $label$4 }
	$5 = ($1 + [8])
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$7 = CALL $172($2)
	*($5) = $7
	*(($1 + [16])) = ($7 + $2)
	*($0) = $7
	$6 = *($9)
	$2 = (*($6) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($7, $6, $2)
	*($0) = (*($0) + $2)
	
.LABEL $label$4
	*(($1 + [44])) = *(($10 + [-20]))
	*(($1 + [36])) = *(($10 + [-28]))
	*(($1 + [28])) = *(($10 + [-36]))
	*($1 + [20 align=4]) = *(($10 + [-44]))
	CALL $187(($1 + [48]), ($10 + [-16]))
	*($1 + [64]) = *($10)
	$1 = (*($8) + [72])
	*($8) = $1
	$10 = ($10 + [72])
	if ( ((int_32)($10 + $4) != (int_32)[64]) ){ goto $label$3 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $186($5)
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *($1 + [4])
	CALL eosio_assert(((int_32)*(($3 + [56])) != (int_32)*($3 + [52])), [1872])
	if ( (int_64)($2 == 0) ){ goto $label$2 }
	$3 = *(($1 + [4]))
	$3 = ((uint_64)(CASTING uint_64)(uint_32 ((int_32)(*(($3 + [56])) - *($3 + [52])) / (int_32)[72])) >= (uint_64)$2)
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1888])
	$3 = ((int_32)(CASTING uint_32)(uint_64 ((int_64)$2 + (int_64)4294967295)) * (int_32)[72])
	$1 = ($1 + [4])
	$4 = (*(*($1) + [52]) + $3)
	CALL eosio_assert(((int_32)(*(($4 + [12])) - *($4 + [8])) == (int_32)[2]), [1904])
	$1 = (*(*($1) + [52]) + $3)
	CALL eosio_assert(((int_32)*($1 + [23]) ^ (int_32)[1]), [1920])
	CALL eosio_assert(((int_32)*($1 + [24]) ^ (int_32)[1]), [1952])
	CALL eosio_assert(((int_32)*($1 + [20]) ^ (int_32)[1]), [1984])
	CALL eosio_assert(((int_32)*($1 + [21]) ^ (int_32)[1]), [2016])
	CALL eosio_assert(((int_32)*($1 + [25]) ^ (int_32)[1]), [2032])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$3 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [160])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$6 = CALL $172([168])
	$3 = CALL $99($6, $0, ($8 + [8]))
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [8]) = $5
	$7 = *($6 + [156])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $100(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$6 = *($1 + [64])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($1 + [68])) = $6
	CALL $173($6)
	
.LABEL $label$10
	$0 = *($1 + [52])
	if ( ($0 == 0) ){ goto $label$11 }
	$2 = ($1 + [56])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$13 }
	$7 = ([0] - $0)
	$6 = ($6 + [-64])
	
.LOOP $label$14:
	if ( ((*(($6 + [40])) & [1]) == 0) ){ goto $label$15 }
	CALL $173(*(($6 + [48])))
	
.LABEL $label$15
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$16 }
	*(($6 + [4])) = $4
	CALL $173($4)
	
.LABEL $label$16
	$6 = ($6 + [-72])
	if ( ((int_32)($6 + $7) != (int_32)[-64]) ){ goto $label$14 }
	$6 = *(($1 + [52]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $0
	
.LABEL $label$12
	*($2) = $0
	CALL $173($6)
	
.LABEL $label$11
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$17 }
	CALL $173(*(($1 + [48])))
	
.LABEL $label$17
	CALL $173($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $3
}

void .FUNC $84 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [176])
	*([0] + [4]) = $11
	$5 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$10 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$9 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	$10 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)$4), [96])
	goto $label$3 
	
.LABEL $label$4
	$10 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$5 }
	$10 = CALL $85($4, $10)
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)$4), [96])
	goto $label$3 
	
.LABEL $label$5
	$10 = [0]
	
.LABEL $label$3
	*($11 + [172]) = $10
	*($11 + [168]) = $4
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [1632])
	CALL eosio_assert(((int_64)*(($10 + [32])) == (int_64)*($2 + [8])), [1648])
	CALL eosio_assert(((int_64)*($10 + [24]) == (int_64)*($2)), [1712])
	CALL $86($0, ($11 + [168]), $3)
	*($11 + [156]) = [0]
	*($11 + [152]) = [0]
	*($11 + [160]) = [0]
	$8 = *($11 + [172])
	$6 = (*(($8 + [56])) - *($8 + [52]))
	$9 = ((int_32)$6 / (int_32)[72])
	$10 = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	if ( ((uint_32)$9 >= (uint_32)[59652324]) ){ goto $label$7 }
	$10 = CALL $172($6)
	*(($11 + [160])) = ($10 + ((int_32)$9 * (int_32)[72]))
	*($11 + [156]) = $10
	*($11 + [152]) = $10
	CALL $87(($11 + [152]), *(($8 + [52])), *(($8 + [56])), $9)
	$10 = *($11 + [152])
	
.LABEL $label$8
	*((($11 + [80]) + [12])) = (int_64)0
	*($11 + [88]) = [0]
	*($11 + [80]) = *($10)
	$8 = (*(($10 + [12])) - *($10 + [8]))
	if ( ($8 == 0) ){ goto $label$9 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$6 }
	$9 = CALL $172($8)
	*((($11 + [80]) + [8])) = $9
	*(($11 + [96])) = ($9 + $8)
	*(($8 = (($11 + [80]) + [12]))) = $9
	$0 = *(($10 + [8]))
	$6 = (*(($10 + [12])) - $0)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($9, $0, $6)
	*($8) = (*($8) + $6)
	
.LABEL $label$9
	*((($11 + [80]) + [44])) = *(($10 + [44]))
	*((($11 + [80]) + [36])) = *(($10 + [36]))
	*((($11 + [80]) + [28])) = *(($10 + [28]))
	*($11 + [100 align=4]) = *($10 + [20 align=4])
	$2 = (($11 + [80]) + [48])
	CALL $187($2, ($10 + [48]))
	*($11 + [144]) = *($10 + [64])
	$9 = *($11 + [152])
	$6 = *($11 + [156])
	$10 = ($6 - $9)
	$8 = ((int_32)$10 / (int_32)[72])
	if ( ((uint_32)$8 > (uint_32)[1]) ){ goto $label$11 }
	CALL $88(($11 + [152]), ([2] - $8))
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$10 == (int_32)[144]) ){ goto $label$10 }
	$0 = ($9 + [144])
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$12 }
	$10 = ($6 + [-144])
	
.LOOP $label$13:
	if ( ((*(($10 + [120])) & [1]) == 0) ){ goto $label$14 }
	CALL $173(*(($10 + [128])))
	
.LABEL $label$14
	$8 = *(($10 + [80]))
	if ( ($8 == 0) ){ goto $label$15 }
	*(($10 + [84])) = $8
	CALL $173($8)
	
.LABEL $label$15
	$10 = ($10 + [-72])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$13 }
	
.LABEL $label$12
	*($11 + [156]) = $0
	
.LABEL $label$10
	$9 = ($11 + [100])
	$10 = (($11 + [80]) + [8])
	CALL eosio_assert(((int_32)((uint_32)*(*($10)) % (uint_32)[13]) != (int_32)[0]), [1744])
	CALL eosio_assert(((int_32)*($11 + [102]) ^ (int_32)[1]), [1776])
	$10 = (((uint_32)*($10 + [1]) % (uint_32)[13]) + [1])
	$10 = *($10)
	$8 = (((uint_32)*($10) % (uint_32)[13]) + [1])
	CALL eosio_assert(((int_32)( $8 ? [10] : ($8 <= [10]) ) == (int_32)( $10 ? [10] : ($10 <= [10]) )), [1824])
	*(($11 + [24])) = (int_64)0
	*($11 + [8]) = (int_64)2
	*($11 + [16]) = (int_64)0
	*($11 + [32]) = [0]
	$1 = *((*($11 + [172]) + [32]))
	*($11 + [40]) = (int_64)0
	*(($10 = ($11 + [48]))) = $1
	CALL eosio_assert([1], [192])
	$1 = (uint_64)*($10) >> (uint_64)(int_64)8)
	$6 = ($11 + [28])
	$7 = (($11 + [8]) + [8])
	$10 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$8 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$8 = [0]
	
.LABEL $label$16
	CALL eosio_assert($8, [256])
	*(($11 + [64])) = [0]
	*($11 + [56]) = (int_64)0
	$0 = ($11 + [56])
	$10 = CALL strlen([1856])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$24 }
	*(($11 + [56])) = ($10 << [1])
	$8 = ($0 + [1])
	if ( $10 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$5 = (($10 + [16]) & [-16])
	$8 = CALL $172($5)
	*(($11 + [56])) = ($5 | [1])
	*(($11 + [64])) = $8
	*(($11 + [60])) = $10
	
.LABEL $label$23
	CALL memcpy($8, [1856], $10)
	
.LABEL $label$22
	*(($8 + $10)) = [0]
	$1 = CALL current_time()
	*($11 + [8]) = (int_64)2
	*($11 + [72]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = (*(($11 + [88])) + [1])
	$10 = ($11 + [20])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)*(($11 + [24]))) ){ goto $label$26 }
	*($5) = *($8)
	*($10) = (*($10) + [1])
	goto $label$25 
	
.LABEL $label$26
	CALL $89($7, $8)
	
.LABEL $label$25
	*(($11 + [28])) = [0]
	$8 = (*($10) + [-1])
	*(($10 = ($11 + [92]))) = $8
	*(($10 = *($11 + [152]))) = *($11 + [80])
	if ( ((int_32)$10 == (int_32)($11 + [80])) ){ goto $label$27 }
	CALL $90(($10 + [8]), *($11 + [88]), $8)
	
.LABEL $label$27
	*($10 + [20 align=4]) = *($9)
	*(($10 + [44])) = *(($9 + [24]))
	*(($10 + [36])) = *(($9 + [16]))
	*(($10 + [28])) = *(($9 + [8]))
	CALL $175(($10 + [48]), $2)
	*($10 + [64]) = *((($11 + [80]) + [64]))
	*(($10 = *($11 + [152])) + [72]) = *($11 + [8])
	if ( ((int_32)($10 + [72]) == (int_32)($11 + [8])) ){ goto $label$28 }
	CALL $90(($10 + [80]), *($11 + [16]), *(($11 + [20])))
	
.LABEL $label$28
	*(($10 + [92])) = *($6)
	*(($10 + [116])) = *(($6 + [24]))
	*(($10 + [108])) = *(($6 + [16]))
	*(($10 + [100])) = *(($6 + [8]))
	CALL $175(($10 + [120]), $0)
	*(($10 + [136])) = *((($11 + [8]) + [64]))
	$10 = *($11 + [172])
	*($11) = ($11 + [152])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [688])
	CALL $91($4, $10, (int_64)0, $11)
	if ( ((*((($11 + [8]) + [48])) & [1]) == 0) ){ goto $label$29 }
	CALL $173(*(($11 + [64])))
	
.LABEL $label$29
	$10 = *($11 + [16])
	if ( ($10 == 0) ){ goto $label$30 }
	*(($11 + [20])) = $10
	CALL $173($10)
	
.LABEL $label$30
	if ( ((*(($11 + [128])) & [1]) == 0) ){ goto $label$31 }
	CALL $173(*(($11 + [136])))
	
.LABEL $label$31
	$10 = *($11 + [88])
	if ( ($10 == 0) ){ goto $label$32 }
	*(($11 + [92])) = $10
	CALL $173($10)
	
.LABEL $label$32
	$6 = *($11 + [152])
	if ( ($6 == 0) ){ goto $label$33 }
	$10 = *($11 + [156])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$35 }
	$9 = ([0] - $6)
	$10 = ($10 + [-64])
	
.LOOP $label$36:
	if ( ((*(($10 + [40])) & [1]) == 0) ){ goto $label$37 }
	CALL $173(*(($10 + [48])))
	
.LABEL $label$37
	$8 = *($10)
	if ( ($8 == 0) ){ goto $label$38 }
	*(($10 + [4])) = $8
	CALL $173($8)
	
.LABEL $label$38
	$10 = ($10 + [-72])
	if ( ((int_32)($10 + $9) != (int_32)[-64]) ){ goto $label$36 }
	$10 = *($11 + [152])
	goto $label$34 
	
.LABEL $label$35
	$10 = $6
	
.LABEL $label$34
	*($11 + [156]) = $6
	CALL $173($10)
	
.LABEL $label$33
	*([0] + [4]) = ($11 + [176])
	return (unreachable)
	
.LABEL $label$21
	CALL $174($0)
	
.LABEL $label$7
	CALL $186(($11 + [152]))
	
.LABEL $label$6
	CALL $186(($11 + [88]))
	(unreachable)
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = $3
	$4 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [152]) == (int_32)$6), [96])
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$5 }
	$8 = CALL $85($6, $8)
	CALL eosio_assert(((int_32)*($8 + [152]) == (int_32)$6), [96])
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$3
	*($10 + [20]) = $8
	*($10 + [16]) = $6
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1632])
	$1 = *(($8 + [32]))
	$7 = *($8 + [24])
	CALL eosio_assert([1], [2048])
	CALL eosio_assert([1], [2064])
	CALL eosio_assert(((int_64)$1 == (int_64)*($2 + [8])), [1648])
	CALL eosio_assert(((int_64)((int_64)$7 / (int_64)2) == (int_64)*($2)), [1712])
	CALL $86($0, ($10 + [16]), $3)
	CALL eosio_assert(((int_32)*((*(*($10 + [20]) + [52]) + ((int_32)(CASTING uint_32)(uint_64 ((int_64)$3 + (int_64)4294967295)) * (int_32)[72])) + [22]) ^ (int_32)[1]), [2096])
	CALL eosio_assert((((uint_32)*(*(*($10 + [20]) + [64])) % (uint_32)[13]) == 0), [2128])
	$8 = *($10 + [20])
	*($10 + [8]) = ($10 + [24])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [688])
	CALL $107($6, $8, (int_64)0, ($10 + [8]))
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $82 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = $3
	$9 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$6 = ([0] - $9)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$4), [96])
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $85($4, $7)
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$4), [96])
	goto $label$3 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$3
	*($10 + [36]) = $7
	*($10 + [32]) = $4
	$9 = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1632])
	CALL eosio_assert(((int_64)*(($7 + [32])) == (int_64)*($2 + [8])), [1648])
	CALL eosio_assert(((int_64)*($7 + [24]) == (int_64)*($2)), [1712])
	CALL $86($0, ($10 + [32]), $3)
	$7 = *($10 + [36])
	CALL eosio_assert(((int_32)(*(($7 + [56])) - *($7 + [52])) == (int_32)[72]), [2144])
	CALL eosio_assert(((int_32)*(*(*($10 + [36]) + [52]) + [22]) ^ (int_32)[1]), [2192])
	CALL eosio_assert(((int_32)*((*(*($10 + [36]) + [52]) + ((int_32)(CASTING uint_32)(uint_64 $3) * (int_32)[72])) + [23]) ^ (int_32)[1]), [2240])
	*($10 + [20]) = [0]
	*($10 + [16]) = [0]
	*($10 + [24]) = [0]
	$5 = (*(*($10 + [36]) + [52]) + ((int_32)(CASTING uint_32)(uint_64 ((int_64)$3 + (int_64)4294967295)) * (int_32)[72]))
	$8 = ($5 + [12])
	$7 = (*($8) - *($5 + [8]))
	if ( ($7 == 0) ){ goto $label$10 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL $172($7)
	*(($10 + [24])) = ($9 + $7)
	*($10 + [16]) = $9
	*($10 + [20]) = $9
	$5 = *(($5 + [8]))
	$7 = (*($8) - $5)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$10 }
	CALL memcpy($9, $5, $7)
	$7 = (*($10 + [20]) + $7)
	*($10 + [20]) = $7
	$9 = *($10 + [16])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$10
	$7 = [247]
	if ( ($9 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$9
	$8 = ($7 - $9)
	$5 = [0]
	$7 = $9
	
.LOOP $label$11:
	$6 = (((uint_32)*($7) % (uint_32)[13]) + [1])
	$5 = (( $6 ? [10] : ($6 <= [10]) ) + ($5 & [255]))
	$7 = ($7 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$11 }
	$7 = ($5 + [-9])
	if ( $9 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $186(($10 + [16]))
	
.LABEL $label$7
	*($10 + [20]) = $9
	CALL $173($9)
	
.LABEL $label$6
	CALL eosio_assert((($7 & [255]) <= [3]), [2128])
	$7 = *($10 + [36])
	*($10 + [8]) = ($10 + [40])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [688])
	CALL $108($4, $7, (int_64)0, ($10 + [8]))
	*([0] + [4]) = ($10 + [48])
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$9 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$8 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$9), [96])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $85($9, $7)
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$9), [96])
	
.LABEL $label$4
	CALL eosio_assert(*($7 + [76]), [2272])
	CALL eosio_assert([1], [1104])
	CALL eosio_assert([1], [1152])
	$8 = CALL db_next_i64(*($7 + [156]), ($13 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	CALL $85($9, $8)
	
.LABEL $label$6
	CALL $109($9, $7)
	
.LABEL $label$3
	*($13 + [8]) = $1
	$1 = CALL $110($0)
	*(($13 + [44])) = *(($2 + [12]))
	*(($13 + [40])) = *(($2 + [8]))
	*(($13 + [36])) = *(($2 + [4]))
	*($13 + [16]) = $1
	*($13 + [24]) = *($0 + [8])
	*($13 + [32]) = *($2)
	CALL $187(($13 + [48]), $3)
	$1 = (int_64)0
	*(($13 + [68])) = (int_64)0
	*(($13 + [76])) = (int_64)0
	*($13 + [60 align=4]) = (int_64)0
	*($13 + [84]) = [0]
	CALL memset(($13 + [85]), [0], [66])
	*($13 + [152]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$12 = *($0)
	*($13 + [168]) = ($13 + [8])
	CALL $111(($13 + [160]), $9, $12, ($13 + [168]))
	$6 = *($0 + [8])
	$10 = (int_64)59
	$9 = [16]
	$11 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$12 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$7 = ($7 + [165])
	goto $label$10 
	
.LABEL $label$12
	$12 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$8
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$7 }
	if ( ((int_64)$6 != (int_64)$11) ){ goto $label$13 }
	if ( ((int_64)*($2 + [8]) != (int_64)1397703940) ){ goto $label$13 }
	CALL $112($0, ($13 + [8]))
	
.LABEL $label$13
	$9 = *(($13 + [72]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($13 + [76])) = $9
	CALL $173($9)
	
.LABEL $label$14
	$5 = *($13 + [60])
	if ( ($5 == 0) ){ goto $label$15 }
	$0 = ($13 + [64])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$17 }
	$8 = ([0] - $5)
	$9 = ($9 + [-64])
	
.LOOP $label$18:
	if ( ((*(($9 + [40])) & [1]) == 0) ){ goto $label$19 }
	CALL $173(*(($9 + [48])))
	
.LABEL $label$19
	$7 = *($9)
	if ( ($7 == 0) ){ goto $label$20 }
	*(($9 + [4])) = $7
	CALL $173($7)
	
.LABEL $label$20
	$9 = ($9 + [-72])
	if ( ((int_32)($9 + $8) != (int_32)[-64]) ){ goto $label$18 }
	$9 = *(($13 + [60]))
	goto $label$16 
	
.LABEL $label$17
	$9 = $5
	
.LABEL $label$16
	*($0) = $5
	CALL $173($9)
	
.LABEL $label$15
	if ( ((*(($13 + [48])) & [1]) == 0) ){ goto $label$21 }
	CALL $173(*(($13 + [56])))
	
.LABEL $label$21
	*([0] + [4]) = ($13 + [176])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$7 = *($1)
	if ( ($7 & [1]) ){ goto $label$2 }
	$5 = uint_32($7 >> [1])
	$7 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($1 + [4])
	$7 = *($1 + [8])
	
.LABEL $label$1
	$6 = [0]
	$5 = ($7 + $5)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$6 = [0]
	
.LOOP $label$4:
	$6 = (((int_32)*($7) == (int_32)[45]) + $6)
	$7 = ($7 + [1])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	$6 = ((int_32)$6 == (int_32)[1])
	
.LABEL $label$3
	CALL eosio_assert($6, [2448])
	*($8 + [24]) = [0]
	*($8 + [16]) = (int_64)0
	*($8 + [15]) = [45]
	*($8) = [0]
	*($8 + [14]) = [1]
	$6 = CALL _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb($1, ($8 + [16]), ($8 + [15]), $8, ($8 + [14]))
	$7 = *($8 + [16])
	CALL eosio_assert(((int_32)( *($8 + [20]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)[0]), [2464])
	$7 = *($8 + [16])
	$5 = CALL strlen([2480])
	if ( ((int_32)$5 != (int_32)( *($8 + [20]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$18 }
	if ( (CALL $181(($8 + [16]), [0], [-1], [2480], $5) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$7 = *($8 + [16])
	$5 = CALL strlen([2512])
	if ( ((int_32)$5 != (int_32)( *($8 + [20]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$19 }
	if ( (CALL $181(($8 + [16]), [0], [-1], [2512], $5) == 0) ){ goto $label$16 }
	
.LABEL $label$19
	$7 = *($8 + [16])
	$5 = CALL strlen([2528])
	if ( ((int_32)$5 != (int_32)( *($8 + [20]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$20 }
	if ( (CALL $181(($8 + [16]), [0], [-1], [2528], $5) == 0) ){ goto $label$15 }
	
.LABEL $label$20
	$7 = *($8 + [16])
	$5 = CALL strlen([2544])
	if ( ((int_32)$5 != (int_32)( *($8 + [20]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$21 }
	if ( (CALL $181(($8 + [16]), [0], [-1], [2544], $5) == 0) ){ goto $label$14 }
	
.LABEL $label$21
	CALL eosio_assert([0], [2560])
	goto $label$5 
	
.LABEL $label$17
	*($2) = [1]
	CALL $188($8, $1, ($6 + [1]), [-1], $1)
	if ( (*($8 + [16]) & [1]) ){ goto $label$13 }
	*($8 + [16]) = [0]
	goto $label$12 
	
.LABEL $label$16
	*($2) = [2]
	CALL $188($8, $1, ($6 + [1]), [-1], $1)
	if ( (*($8 + [16]) & [1]) ){ goto $label$11 }
	*($8 + [16]) = [0]
	goto $label$10 
	
.LABEL $label$15
	*($2) = [3]
	CALL $188($8, $1, ($6 + [1]), [-1], $1)
	if ( (*($8 + [16]) & [1]) ){ goto $label$9 }
	*($8 + [16]) = [0]
	goto $label$8 
	
.LABEL $label$14
	*($2) = [4]
	CALL $188($8, $1, ($6 + [1]), [-1], $1)
	if ( (*($8 + [16]) & [1]) ){ goto $label$7 }
	*($8 + [16]) = [0]
	goto $label$6 
	
.LABEL $label$13
	*(*(($8 + [24]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$12
	CALL $177(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *(($8 + [8]))
	*($8 + [16]) = *($8)
	$7 = *($8 + [4])
	*($8 + [20]) = $7
	$6 = *($8 + [16])
	CALL eosio_assert(((int_32)( $7 ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [2496])
	CALL $175($3, ($8 + [16]))
	goto $label$5 
	
.LABEL $label$11
	*(*(($8 + [24]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$10
	CALL $177(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *(($8 + [8]))
	*($8 + [16]) = *($8)
	*($4) = (CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($8 + [16]), [0], [10]))
	goto $label$5 
	
.LABEL $label$9
	*(*(($8 + [24]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$8
	CALL $177(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *(($8 + [8]))
	*($8 + [16]) = *($8)
	*($4) = (CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($8 + [16]), [0], [10]))
	goto $label$5 
	
.LABEL $label$7
	*(*(($8 + [24]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$6
	CALL $177(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *(($8 + [8]))
	*($8 + [16]) = *($8)
	*($4) = (CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($8 + [16]), [0], [10]))
	
.LABEL $label$5
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$22 }
	CALL $173(*(($8 + [24])))
	
.LABEL $label$22
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([11872])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $172($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [11872], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $173(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $183($6)
	
.LABEL $label$1
	CALL $184($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $151($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $17($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $152($4, $1)
	CALL $154(CALL $153(CALL $153($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$8 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $172(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	$3 = [0]
	*(($5 = ($9 + [24]))) = [0]
	$2 = CALL $172([16])
	*($9 + [16]) = $2
	$7 = ($2 + [16])
	*($5) = $7
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $7
	*($9 + [28]) = [0]
	*(($2 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	*($10) = [0]
	CALL $93($10, $4)
	$1 = ((int_32)$8 * (int_32)[40])
	$8 = *($10)
	if ( ($8 == 0) ){ goto $label$6 }
	$5 = ($9 + [28])
	CALL $17($5, $8)
	$3 = *($2)
	$2 = *($5)
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	$5 = ($6 + $1)
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $3
	CALL $94($10, $4)
	$3 = ($9 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$9:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($8 = ($9 + [-16]))) = [0]
	$4 = ($2 + [-4])
	*($1) = *($4)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($8) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($4) = (int_64)0
	*(($8 = ($9 + [-4]))) = [0]
	$4 = ($2 + [8])
	*($1) = *($4)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($8) = *($1)
	*($1) = [0]
	*($4) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$9 }
	$2 = *(($0 + [4]))
	$8 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$8 = $2
	
.LABEL $label$7
	*($0) = $9
	*(($0 + [4])) = $3
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$10 }
	$1 = ([0] - $8)
	$9 = ($2 + [-24])
	
.LOOP $label$11:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($9 + [16])) = $2
	CALL $173($2)
	
.LABEL $label$12
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [4])) = $2
	CALL $173($2)
	
.LABEL $label$13
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $173($8)
	
.LABEL $label$14
	*([0] + [4]) = ($10 + [16])
	(unreachable)
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL strlen([3072])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$6 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($4 + [16]) & [-16])
	$6 = CALL $172($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($6, [3072], $4)
	
.LABEL $label$2
	*(($6 + $4)) = [0]
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = [0]
	$6 = (($8 + [16]) | [1])
	$7 = *($2 + [8])
	
.LOOP $label$5:
	$4 = (CASTING uint_32)(uint_64 ((uint_64)$7 % (uint_64)(int_64)10))
	CALL $12(($8 + [32]), ( ($4 | [48]) ? ($4 + [55]) : ($4 <= [10]) ), ($8 + [16]))
	$3 = ((uint_64)$7 / (uint_64)(int_64)10)
	if ( (*($8 + [16]) & [1]) ){ goto $label$7 }
	*($8 + [16]) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*((($8 + [16]) + [8]))) = [0]
	*($8 + [20]) = [0]
	
.LABEL $label$6
	CALL $177(($8 + [16]), [0])
	*((($8 + [16]) + [8])) = *((($8 + [32]) + [8]))
	*($8 + [16]) = *($8 + [32])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $3
	if ( $4 ){ goto $label$5 }
	$4 = *($8 + [16])
	$5 = ($4 & [1])
	CALL $178($0, ( *((($8 + [16]) + [8])) ? $6 : $5 ), ( *($8 + [20]) ? uint_32($4 >> [1]) : $5 ))
	CALL $179($0, [3088])
	*($8 + [8]) = *($2)
	CALL $156(($8 + [32]), ($8 + [8]))
	$4 = *($8 + [32])
	$6 = ($4 & [1])
	CALL $178($0, ( *($8 + [40]) ? (($8 + [32]) | [1]) : $6 ), ( *($8 + [36]) ? uint_32($4 >> [1]) : $6 ))
	CALL $179($0, [3216])
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $173(*((($8 + [32]) + [8])))
	
.LABEL $label$8
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL $173(*(($8 + [24])))
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $174($0)
}

void .FUNC $144 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*(($7 = $8) + [24]) = *($1 + [8])
	$4 = *($1)
	$6 = *($3)
	$5 = ($1 + [52])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	CALL $92($5, *($6), *($6 + [4]))
	
.LABEL $label$1
	$6 = *($3 + [4])
	$5 = ($1 + [64])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL $90($5, *($6), *($6 + [4]))
	
.LABEL $label$2
	CALL memcpy(($1 + [77]), *($3 + [8]), [66])
	*($1 + [76]) = [1]
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	*($7 + [8]) = [0]
	CALL $93(($7 + [8]), $1)
	$6 = *($7 + [8])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($7 + [12]) = $3
	*($7 + [8]) = $3
	*($7 + [16]) = ($3 + $6)
	CALL $94(($7 + [8]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($7 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($7 + [24]), ($7 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [160])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($7 + [32]), $4)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($7 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	$6 = *($2 + [8])
	*($8 + [88]) = $6
	$7 = ((int_64)*($2) / (int_64)125)
	*($8 + [80]) = ((uint_64)((int_64)$7 * (int_64)$5) / (uint_64)(int_64)100)
	$5 = *($0)
	CALL $155(($8 + [64]), $0, $1)
	*((($8 + [16]) + [8])) = *($8 + [88])
	*($8 + [16]) = *($8 + [80])
	CALL _Z12eos_transferyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($5, $4, ($8 + [16]), ($8 + [64]))
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$1 }
	CALL $173(*($8 + [72]))
	
.LABEL $label$1
	*($8 + [56]) = $6
	*($8 + [48]) = ((uint_64)((int_64)$7 * (int_64)$3) / (uint_64)(int_64)100)
	$3 = *($1)
	$4 = *($0)
	CALL $155(($8 + [32]), $0, $1)
	*(($8 + [8])) = *($8 + [56])
	*($8) = *($8 + [48])
	CALL _Z12eos_transferyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($4, $3, $8, ($8 + [32]))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $173(*($8 + [40]))
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $146 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	$4 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [528]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$9 = (int_64)59
	$0 = [2352]
	$10 = (int_64)0
	
.LOOP $label$7:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$8 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [165])
	goto $label$9 
	
.LABEL $label$10
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$6 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$7 }
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [3200]
	$11 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$16 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$16
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$12
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$11 }
	*((($12 + [8]) + [28])) = *(($2 + [12]))
	*((($12 + [8]) + [24])) = *(($2 + [8]))
	*((($12 + [8]) + [20])) = *(($2 + [4]))
	*($12 + [16]) = $1
	*($12 + [8]) = $4
	*($12 + [24]) = *($2)
	*(($12 + [48])) = *(($3 + [8]))
	*($12 + [40]) = *($3)
	*($12 + [56]) = $10
	*($12 + [64]) = $11
	*(($0 = CALL $172([16]))) = $4
	*($0 + [8]) = $8
	*(($5 = ($12 + [88]))) = [0]
	$2 = ($0 + [16])
	*((($12 + [56]) + [24])) = $2
	*((($12 + [56]) + [20])) = $2
	*($12 + [72]) = $0
	*($12 + [84]) = [0]
	*(($12 + [92])) = [0]
	CALL $17((($12 + [56]) + [28]), [48])
	$0 = *($5)
	$5 = *($12 + [84])
	*($12 + [100]) = $5
	*($12 + [96]) = $5
	*($12 + [104]) = $0
	*($12 + [112]) = ($12 + [96])
	*($12 + [120]) = ($12 + [8])
	CALL $157(($12 + [120]), ($12 + [112]))
	CALL $16(($12 + [96]), ($12 + [56]))
	$0 = *($12 + [96])
	CALL send_inline($0, (*($12 + [100]) - $0))
	$0 = *($12 + [96])
	if ( ($0 == 0) ){ goto $label$17 }
	*($12 + [100]) = $0
	CALL $173($0)
	
.LABEL $label$17
	$0 = *($12 + [84])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($12 + [88])) = $0
	CALL $173($0)
	
.LABEL $label$18
	$0 = *($12 + [72])
	if ( ($0 == 0) ){ goto $label$19 }
	*(($12 + [76])) = $0
	CALL $173($0)
	
.LABEL $label$19
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [200]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [208]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [216]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [224]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [272])
	*([0] + [4]) = $2
	CALL $139(*($1), (*($0) + [96]))
	$0 = *($0)
	CALL $45(*($1), ($0 + [108]))
	CALL $139(*($1), ($0 + [120]))
	*($2) = *($1)
	*($2 + [12]) = ($0 + [133])
	*($2 + [8]) = ($0 + [132])
	*($2 + [16]) = ($0 + [134])
	*($2 + [20]) = ($0 + [135])
	*($2 + [24]) = ($0 + [136])
	*($2 + [28]) = ($0 + [137])
	*($2 + [32]) = ($0 + [138])
	*($2 + [36]) = ($0 + [139])
	*($2 + [40]) = ($0 + [140])
	*($2 + [44]) = ($0 + [141])
	*($2 + [48]) = ($0 + [142])
	*($2 + [52]) = ($0 + [143])
	*($2 + [56]) = ($0 + [144])
	*($2 + [60]) = ($0 + [145])
	*($2 + [64]) = ($0 + [146])
	*($2 + [68]) = ($0 + [147])
	*($2 + [72]) = ($0 + [148])
	*($2 + [76]) = ($0 + [149])
	*($2 + [80]) = ($0 + [150])
	*($2 + [84]) = ($0 + [151])
	*($2 + [88]) = ($0 + [152])
	*($2 + [92]) = ($0 + [153])
	*($2 + [96]) = ($0 + [154])
	*($2 + [100]) = ($0 + [155])
	*($2 + [104]) = ($0 + [156])
	*($2 + [108]) = ($0 + [157])
	*($2 + [112]) = ($0 + [158])
	*($2 + [116]) = ($0 + [159])
	*($2 + [120]) = ($0 + [160])
	*($2 + [124]) = ($0 + [161])
	*($2 + [128]) = ($0 + [162])
	*($2 + [132]) = ($0 + [163])
	*($2 + [136]) = ($0 + [164])
	*($2 + [140]) = ($0 + [165])
	*($2 + [144]) = ($0 + [166])
	*($2 + [148]) = ($0 + [167])
	*($2 + [152]) = ($0 + [168])
	*($2 + [156]) = ($0 + [169])
	*($2 + [160]) = ($0 + [170])
	*($2 + [164]) = ($0 + [171])
	*($2 + [168]) = ($0 + [172])
	*($2 + [172]) = ($0 + [173])
	*($2 + [176]) = ($0 + [174])
	*($2 + [180]) = ($0 + [175])
	*($2 + [184]) = ($0 + [176])
	*($2 + [188]) = ($0 + [177])
	*($2 + [192]) = ($0 + [178])
	*($2 + [196]) = ($0 + [179])
	*($2 + [200]) = ($0 + [180])
	*($2 + [204]) = ($0 + [181])
	*($2 + [208]) = ($0 + [182])
	*($2 + [212]) = ($0 + [183])
	*($2 + [216]) = ($0 + [184])
	*($2 + [220]) = ($0 + [185])
	*($2 + [224]) = ($0 + [186])
	*($2 + [228]) = ($0 + [187])
	*($2 + [232]) = ($0 + [188])
	*($2 + [236]) = ($0 + [189])
	*($2 + [240]) = ($0 + [190])
	*($2 + [244]) = ($0 + [191])
	*($2 + [248]) = ($0 + [192])
	*($2 + [252]) = ($0 + [193])
	*($2 + [256]) = ($0 + [194])
	*($2 + [260]) = ($0 + [195])
	*($2 + [264]) = ($0 + [196])
	*($2 + [268]) = ($0 + [197])
	CALL $104(($2 + [8]), $2)
	*($2 + [8]) = $0
	CALL $141(($2 + [8]), $1)
	*([0] + [4]) = ($2 + [272])
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$8 = *($0)
	$2 = int_32(($6 - $8) >> [4])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$7 = ($7 - $8)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($7 >> [3])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $172(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*($6 + [8]) = (int_64)1398362884
	*($6) = (int_64)0
	CALL eosio_assert([1], [192])
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [256])
	$6 = (*($8) + [16])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $186($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [4]))
	$2 = ($7 + ($2 << [4]))
	$8 = $2
	
.LOOP $label$14:
	*($8 + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [192])
	$5 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [256])
	$8 = ($8 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$20
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $173($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$2 = *($0)
	$5 = ((int_32)($5 - $2) / (int_32)[12])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$4 = [357913941]
	$6 = ((int_32)($6 - $2) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$5 }
	$4 = ($6 << [1])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$6 = CALL $172(((int_32)$4 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	$6 = $1
	
.LOOP $label$6:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	*(($0 + [4])) = ($5 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$4 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$2 = ($6 + ((int_32)$4 * (int_32)[12]))
	$6 = ($6 + ((int_32)$5 * (int_32)[12]))
	$4 = $6
	$5 = $1
	
.LOOP $label$7:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$3 = ($6 + ((int_32)$1 * (int_32)[12]))
	$4 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	$1 = ([0] - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$10:
	*(($6 + [-12])) = *($4)
	$5 = ($4 + [8])
	*(($6 + [-4])) = *($5)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	$6 = ($6 + [-12])
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $1) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$5 = $4
	
.LABEL $label$8
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$11 }
	$6 = ([0] - $5)
	$4 = ($4 + [-12])
	
.LOOP $label$12:
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	CALL $173(*(($4 + [8])))
	
.LABEL $label$13
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $6) != (int_32)[-12]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $173($5)
	
.LABEL $label$14
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [112])
	*([0] + [4]) = $3
	*(($2 = $3) + [76]) = $0
	*($2 + [64]) = *($1)
	*($2 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [36])) = [0]
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [28 align=4]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = [0]
	*($2 + [52]) = [0]
	*(($2 + [56])) = [0]
	*(($2 + [60])) = [0]
	*($2 + [84]) = $1
	*($2 + [80]) = $1
	*($2 + [88]) = ($1 + $0)
	*($2 + [96]) = ($2 + [80])
	*($2 + [104]) = $2
	CALL $123(($2 + [104]), ($2 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [84]) = ($2 + [64])
	*($2 + [80]) = ($2 + [76])
	CALL $124(($2 + [80]), $2)
	if ( ((*($2 + [52]) & [1]) == 0) ){ goto $label$5 }
	CALL $173(*(($2 + [60])))
	
.LABEL $label$5
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	CALL $173(*(($2 + [36])))
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [112])
	return [1]
}

void .FUNC $73 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [528]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($11 + [64]) = $8
	*($11 + [56]) = $1
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [16]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$12 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$7 }
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [544]
	$10 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$18 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$14
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$13 }
	*(($11 + [36])) = *(($3 + [12]))
	*(($11 + [32])) = *(($3 + [8]))
	*(($11 + [28])) = *(($3 + [4]))
	*($11 + [16]) = $2
	*($11 + [8]) = $1
	*($11 + [24]) = *($3)
	CALL $187(($11 + [40]), $4)
	$0 = CALL $15(($11 + [72]), ($11 + [56]), $8, $10, ($11 + [8]))
	CALL $16(($11 + [112]), $0)
	$5 = *($11 + [112])
	CALL send_inline($5, (*($11 + [116]) - $5))
	$5 = *($11 + [112])
	if ( ($5 == 0) ){ goto $label$19 }
	*($11 + [116]) = $5
	CALL $173($5)
	
.LABEL $label$19
	$5 = *($0 + [28])
	if ( ($5 == 0) ){ goto $label$20 }
	*(($0 + [32])) = $5
	CALL $173($5)
	
.LABEL $label$20
	$5 = *($0 + [16])
	if ( ($5 == 0) ){ goto $label$21 }
	*(($0 + [20])) = $5
	CALL $173($5)
	
.LABEL $label$21
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$22 }
	CALL $173(*(($11 + [48])))
	
.LABEL $label$22
	*([0] + [4]) = ($11 + [128])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [288])
	CALL memcpy(($5 + [15]), $3, [1])
	$6 = *($5 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($6 & [255]) != (int_32)[0])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $71 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [176])
	*([0] + [4]) = $21
	*($21 + [175]) = $4
	*($21 + [174]) = $7
	$17 = (int_64)0
	$16 = (int_64)59
	$7 = [2608]
	$18 = (int_64)0
	
.LOOP $label$1:
	$19 = (int_64)0
	if ( ((uint_64)$17 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($18)
	$10 = *(($0 + [40]))
	$20 = *(($0 + [44]))
	if ( ((int_32)$20 == (int_32)$10) ){ goto $label$5 }
	$7 = ($20 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$5 }
	$20 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $11) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$9 = ($0 + [16])
	if ( ((int_32)$20 == (int_32)$10) ){ goto $label$8 }
	$4 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [152]) == (int_32)$9), [96])
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8759786784126140416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $85($9, $7)
	CALL eosio_assert(((int_32)*($4 + [152]) == (int_32)$9), [96])
	
.LABEL $label$7
	$10 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($10, [1632])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$2), [2624])
	$7 = ($4 + [56])
	CALL eosio_assert(((int_32)(*($7) - *($4 + [52])) == (int_32)[144]), [2656])
	*($21 + [168]) = [0]
	*($21 + [160]) = (int_64)0
	$11 = (*($7) - *($4 + [52]))
	$20 = ((int_32)$11 / (int_32)[72])
	$7 = [0]
	if ( ($11 == 0) ){ goto $label$12 }
	if ( ((uint_32)$20 >= (uint_32)[59652324]) ){ goto $label$11 }
	$7 = CALL $172($11)
	*(($21 + [168])) = ($7 + ((int_32)$20 * (int_32)[72]))
	*($21 + [164]) = $7
	*($21 + [160]) = $7
	CALL $87(($21 + [160]), *(($4 + [52])), *(($4 + [56])), $20)
	$7 = *($21 + [160])
	
.LABEL $label$12
	*(($15 = (($21 + [88]) + [12]))) = (int_64)0
	*($21 + [96]) = [0]
	*($21 + [88]) = *($7)
	$11 = (($21 + [88]) + [8])
	$20 = (*(($7 + [12])) - *($7 + [8]))
	if ( ($20 == 0) ){ goto $label$13 }
	if ( ((int_32)$20 <= (int_32)[-1]) ){ goto $label$10 }
	$0 = CALL $172($20)
	*((($21 + [88]) + [8])) = $0
	*(($21 + [104])) = ($0 + $20)
	*(($20 = (($21 + [88]) + [12]))) = $0
	$13 = *(($7 + [8]))
	$12 = (*(($7 + [12])) - $13)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($0, $13, $12)
	*($20) = (*($20) + $12)
	
.LABEL $label$13
	*((($21 + [88]) + [44])) = *(($7 + [44]))
	*((($21 + [88]) + [36])) = *(($7 + [36]))
	*((($21 + [88]) + [28])) = *(($7 + [28]))
	*($21 + [108 align=4]) = *($7 + [20 align=4])
	$12 = (($21 + [88]) + [48])
	CALL $187($12, ($7 + [48]))
	*($21 + [152]) = *($7 + [64])
	CALL eosio_assert(((int_32)(*($15) - *($11)) == (int_32)[1]), [2672])
	*((($21 + [16]) + [16])) = [0]
	*($21 + [24]) = (int_64)0
	$7 = *($21 + [160])
	*($21 + [16]) = *($7 + [72])
	$13 = (($21 + [16]) + [8])
	$20 = (*(($7 + [84])) - *(($7 + [80])))
	if ( ($20 == 0) ){ goto $label$14 }
	if ( ((int_32)$20 <= (int_32)[-1]) ){ goto $label$9 }
	$0 = CALL $172($20)
	*(($21 + [24])) = $0
	*(($21 + [32])) = ($0 + $20)
	*(($20 = ($21 + [28]))) = $0
	$14 = *(($7 + [80]))
	$15 = (*(($7 + [84])) - $14)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($0, $14, $15)
	*($20) = (*($20) + $15)
	
.LABEL $label$14
	*((($21 + [16]) + [44])) = *(($7 + [116]))
	*((($21 + [16]) + [36])) = *(($7 + [108]))
	*((($21 + [16]) + [28])) = *(($7 + [100]))
	*($21 + [36 align=4]) = *(($7 + [92]))
	$0 = (($21 + [16]) + [48])
	CALL $187($0, ($7 + [120]))
	*($21 + [80]) = *(($7 + [136]))
	CALL eosio_assert(((int_32)(*((($21 + [16]) + [12])) - *(($21 + [24]))) == (int_32)[1]), [2704])
	$7 = (($21 + [88]) + [12])
	$20 = *($7)
	if ( ((int_32)$20 == (int_32)*((($21 + [88]) + [16]))) ){ goto $label$16 }
	*($20) = *($21 + [175])
	*($7) = (*($7) + [1])
	goto $label$15 
	
.LABEL $label$16
	CALL $89($11, ($21 + [175]))
	
.LABEL $label$15
	$7 = ($21 + [28])
	$20 = *($7)
	if ( ((int_32)$20 == (int_32)*(($21 + [32]))) ){ goto $label$18 }
	*($20) = *($21 + [174])
	*($7) = (*($7) + [1])
	goto $label$17 
	
.LABEL $label$18
	CALL $89($13, ($21 + [174]))
	
.LABEL $label$17
	$20 = (($21 + [88]) + [20])
	*(($7 = *($21 + [160]))) = *($21 + [88])
	if ( ((int_32)$7 == (int_32)($21 + [88])) ){ goto $label$19 }
	CALL $90(($7 + [8]), *($21 + [96]), *(($21 + [100])))
	
.LABEL $label$19
	$11 = (($21 + [16]) + [20])
	*($7 + [20 align=4]) = *($20)
	*(($7 + [44])) = *(($20 + [24]))
	*(($7 + [36])) = *(($20 + [16]))
	*(($7 + [28])) = *(($20 + [8]))
	CALL $175(($7 + [48]), $12)
	*($7 + [64]) = *((($21 + [88]) + [64]))
	*(($7 = *($21 + [160])) + [72]) = *($21 + [16])
	if ( ((int_32)($7 + [72]) == (int_32)($21 + [16])) ){ goto $label$20 }
	CALL $90(($7 + [80]), *($21 + [24]), *(($21 + [28])))
	
.LABEL $label$20
	*(($7 + [92])) = *($11)
	*(($7 + [116])) = *(($11 + [24]))
	*(($7 + [108])) = *(($11 + [16]))
	*(($7 + [100])) = *(($11 + [8]))
	CALL $175(($7 + [120]), $0)
	*(($7 + [136])) = *((($21 + [16]) + [64]))
	*($21 + [8]) = ($21 + [160])
	CALL eosio_assert($10, [688])
	CALL $125($9, $4, (int_64)0, ($21 + [8]))
	if ( ((*((($21 + [16]) + [48])) & [1]) == 0) ){ goto $label$21 }
	CALL $173(*(($21 + [72])))
	
.LABEL $label$21
	$7 = *($21 + [24])
	if ( ($7 == 0) ){ goto $label$22 }
	*(($21 + [28])) = $7
	CALL $173($7)
	
.LABEL $label$22
	if ( ((*(($21 + [136])) & [1]) == 0) ){ goto $label$23 }
	CALL $173(*(($21 + [144])))
	
.LABEL $label$23
	$7 = *($21 + [96])
	if ( ($7 == 0) ){ goto $label$24 }
	*(($21 + [100])) = $7
	CALL $173($7)
	
.LABEL $label$24
	$11 = *($21 + [160])
	if ( ($11 == 0) ){ goto $label$25 }
	$7 = *($21 + [164])
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$27 }
	$20 = ([0] - $11)
	$7 = ($7 + [-64])
	
.LOOP $label$28:
	if ( ((*(($7 + [40])) & [1]) == 0) ){ goto $label$29 }
	CALL $173(*(($7 + [48])))
	
.LABEL $label$29
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$30 }
	*(($7 + [4])) = $4
	CALL $173($4)
	
.LABEL $label$30
	$7 = ($7 + [-72])
	if ( ((int_32)($7 + $20) != (int_32)[-64]) ){ goto $label$28 }
	$7 = *($21 + [160])
	goto $label$26 
	
.LABEL $label$27
	$7 = $11
	
.LABEL $label$26
	*($21 + [164]) = $11
	CALL $173($7)
	
.LABEL $label$25
	*([0] + [4]) = ($21 + [176])
	return (unreachable)
	
.LABEL $label$11
	CALL $186(($21 + [160]))
	
.LABEL $label$10
	CALL $186($11)
	
.LABEL $label$9
	CALL $186($13)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [288])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $77 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [288])
	*([0] + [4]) = $10
	CALL require_auth($1)
	*((($10 + [272]) + [12])) = *(($3 + [12]))
	*(($6 = (($10 + [272]) + [8]))) = *(($3 + [8]))
	*($10 + [276]) = *(($3 + [4]))
	*($10 + [272]) = *($3)
	$7 = *($0)
	CALL $187(($10 + [256]), $4)
	*((($10 + [72]) + [8])) = *($6)
	*($10 + [72]) = *($10 + [272])
	$6 = CALL _Z17transfer_continueyyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($7, $1, $2, ($10 + [72]), ($10 + [256]))
	if ( ((*($10 + [256]) & [1]) == 0) ){ goto $label$1 }
	CALL $173(*($10 + [264]))
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$2 }
	$2 = (int_64)0
	$7 = (int_64)59
	$6 = [1440]
	$8 = (int_64)0
	
.LOOP $label$3:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$4 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [165])
	goto $label$5 
	
.LABEL $label$6
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$3 }
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$2 }
	$2 = (int_64)0
	$7 = (int_64)59
	$6 = [1456]
	$8 = (int_64)0
	
.LOOP $label$7:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$8 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [165])
	goto $label$9 
	
.LABEL $label$10
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$2 }
	$7 = *($3 + [8])
	$5 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [1472])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [1504])
	CALL $79(($10 + [208]), $0, *($0 + [8]), $7)
	CALL eosio_assert(((int_64)$7 == (int_64)*($10 + [216])), [1536])
	*($10 + [200]) = [0]
	*($10 + [192]) = (int_64)0
	CALL $187(($10 + [168]), $4)
	CALL $80($0, ($10 + [168]), ($10 + [207]), ($10 + [192]), ($10 + [184]))
	if ( ((*($10 + [168]) & [1]) == 0) ){ goto $label$16 }
	CALL $173(*($10 + [176]))
	
.LABEL $label$16
	$6 = (*($10 + [207]) + [-1])
	if ( ((uint_32)$6 > (uint_32)[3]) ){ goto $label$17 }
	goto $label$21 
	
.LABEL $label$21
	CALL eosio_assert((((uint_64)$9 >= (uint_64)*($10 + [224])) & ((uint_64)$9 <= (uint_64)*($10 + [232]))), [1568])
	CALL eosio_assert((int_64)(((uint_64)$9 % (uint_64)*($10 + [224])) == 0), [1600])
	*(($6 = (($10 + [152]) + [8]))) = *(($3 + [8]))
	*($10 + [152]) = *($3)
	CALL $187(($10 + [136]), ($10 + [192]))
	*((($10 + [8]) + [8])) = *($6)
	*($10 + [8]) = *($10 + [152])
	CALL $81($0, $1, ($10 + [8]), ($10 + [136]))
	if ( ((*($10 + [136]) & [1]) == 0) ){ goto $label$17 }
	CALL $173(*($10 + [144]))
	goto $label$17 
	
.LABEL $label$20
	CALL eosio_assert((int_64)(((uint_64)$9 % (uint_64)*($10 + [224])) == 0), [1600])
	$7 = *(($3 + [8]))
	*((($10 + [120]) + [8])) = $7
	$2 = *($3)
	*((($10 + [24]) + [8])) = $7
	*($10 + [120]) = $2
	$7 = *($10 + [184])
	*($10 + [24]) = $2
	CALL $82($0, $1, ($10 + [24]), $7)
	goto $label$17 
	
.LABEL $label$19
	$7 = *(($3 + [8]))
	*((($10 + [104]) + [8])) = $7
	$2 = *($3)
	*((($10 + [40]) + [8])) = $7
	*($10 + [104]) = $2
	$7 = *($10 + [184])
	*($10 + [40]) = $2
	CALL $83($0, $1, ($10 + [40]), $7)
	goto $label$17 
	
.LABEL $label$18
	$7 = *(($3 + [8]))
	*((($10 + [88]) + [8])) = $7
	$2 = *($3)
	*((($10 + [56]) + [8])) = $7
	*($10 + [88]) = $2
	$7 = *($10 + [184])
	*($10 + [56]) = $2
	CALL $84($0, $1, ($10 + [56]), $7)
	
.LABEL $label$17
	if ( ((*($10 + [192]) & [1]) == 0) ){ goto $label$2 }
	CALL $173(*(($10 + [200])))
	
.LABEL $label$2
	*([0] + [4]) = ($10 + [288])
	$6
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [256])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $121(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $122(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $173(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $75 (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
}

int_32 .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = *($1 + [64])
	if ( ($6 == 0) ){ goto $label$2 }
	*(($1 + [68])) = $6
	CALL $173($6)
	
.LABEL $label$2
	$2 = *($1 + [52])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($1 + [56])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$3 = ([0] - $2)
	$6 = ($6 + [-64])
	
.LOOP $label$6:
	if ( ((*(($6 + [40])) & [1]) == 0) ){ goto $label$7 }
	CALL $173(*(($6 + [48])))
	
.LABEL $label$7
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($6 + [4])) = $4
	CALL $173($4)
	
.LABEL $label$8
	$6 = ($6 + [-72])
	if ( ((int_32)($6 + $3) != (int_32)[-64]) ){ goto $label$6 }
	$6 = *(($1 + [52]))
	goto $label$4 
	
.LABEL $label$5
	$6 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $173($6)
	
.LABEL $label$3
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL $173(*(($1 + [48])))
	
.LABEL $label$9
	CALL $173($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	CALL memset($0, [0], [48])
	if ( ((int_64)*($1 + [96]) != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)*(($1 + [104])) != (int_64)$3) ){ goto $label$1 }
	CALL memcpy($0, ($1 + [96]), [48])
	
.LABEL $label$1
	$4 = ($1 + [144])
	if ( ((int_64)*($4) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_64)*(($1 + [152])) != (int_64)$3) ){ goto $label$2 }
	CALL memcpy($0, $4, [48])
	
.LABEL $label$2
	$4 = ($1 + [192])
	if ( ((int_64)*($4) != (int_64)$2) ){ goto $label$3 }
	if ( ((int_64)*(($1 + [200])) != (int_64)$3) ){ goto $label$3 }
	CALL memcpy($0, $4, [48])
	
.LABEL $label$3
	$4 = ($1 + [240])
	if ( ((int_64)*($4) != (int_64)$2) ){ goto $label$4 }
	if ( ((int_64)*(($1 + [248])) != (int_64)$3) ){ goto $label$4 }
	CALL memcpy($0, $4, [48])
	
.LABEL $label$4
	$4 = ($1 + [288])
	if ( ((int_64)*($4) != (int_64)$2) ){ goto $label$5 }
	if ( ((int_64)*(($1 + [296])) != (int_64)$3) ){ goto $label$5 }
	CALL memcpy($0, $4, [48])
	
.LABEL $label$5
	$4 = ($1 + [336])
	if ( ((int_64)*($4) != (int_64)$2) ){ goto $label$6 }
	if ( ((int_64)*(($1 + [344])) != (int_64)$3) ){ goto $label$6 }
	CALL memcpy($0, $4, [48])
	
.LABEL $label$6
	$4 = ($1 + [384])
	if ( ((int_64)*($4) != (int_64)$2) ){ goto $label$7 }
	if ( ((int_64)*(($1 + [392])) != (int_64)$3) ){ goto $label$7 }
	CALL memcpy($0, $4, [48])
	
.LABEL $label$7
	$4 = ($1 + [432])
	if ( ((int_64)*($4) != (int_64)$2) ){ goto $label$8 }
	if ( ((int_64)*(($1 + [440])) != (int_64)$3) ){ goto $label$8 }
	CALL memcpy($0, $4, [48])
	
.LABEL $label$8
	CALL eosio_assert(((int_64)*($0) != (int_64)0), [2576])
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($1 = *($1))) = (*($1) + [1])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [192])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [256])
	*($0 + [40 align=4]) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*($0 + [64 align=4]) = (int_64)0
	*(($0 + [72])) = [0]
	*($0 + [152]) = $1
	CALL $101(*($2 + [4]), $0)
	$4 = *(*($2 + [8]))
	*($0 + [160]) = [-1]
	*($0 + [156]) = $4
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [272])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), $1, [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	CALL eosio_assert(((int_32)(*($0 + [8]) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	CALL eosio_assert(((int_32)(*($0 + [8]) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	CALL eosio_assert(((int_32)(*($0 + [8]) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	CALL eosio_assert(((int_32)(*($0 + [8]) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$2 = CALL $21($0, ($1 + [40]))
	$5 = *($2 + [4])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [56])) - *($1 + [52])) / (int_32)[72]))
	$0 = ($2 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$4 = ((int_64)$6) != (int_64)0
	*($7 + [8]) = (($4) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($2 + [8])) - $5) > (int_32)[0]), [560])
	CALL memcpy(*($0), ($7 + [8]), [1])
	$5 = (*($0) + [1])
	*($0) = $5
	if ( $4 ){ goto $label$1 }
	$5 = *(($1 + [56]))
	$0 = *(($1 + [52]))
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $95($2, $0)
	$0 = ($0 + [72])
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$2
	$0 = CALL $96($2, ($1 + [64]))
	*($7 + [8]) = *($1 + [76])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($0 + [4]), ($7 + [8]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($7) = $0
	*($7 + [12]) = ($1 + [78])
	*($7 + [8]) = ($1 + [77])
	*($7 + [16]) = ($1 + [79])
	*($7 + [20]) = ($1 + [80])
	*($7 + [24]) = ($1 + [81])
	*($7 + [28]) = ($1 + [82])
	*($7 + [32]) = ($1 + [83])
	*($7 + [36]) = ($1 + [84])
	*($7 + [40]) = ($1 + [85])
	*($7 + [44]) = ($1 + [86])
	*($7 + [48]) = ($1 + [87])
	*($7 + [52]) = ($1 + [88])
	*($7 + [56]) = ($1 + [89])
	*($7 + [60]) = ($1 + [90])
	*($7 + [64]) = ($1 + [91])
	*($7 + [68]) = ($1 + [92])
	*($7 + [72]) = ($1 + [93])
	*($7 + [76]) = ($1 + [94])
	*($7 + [80]) = ($1 + [95])
	*($7 + [84]) = ($1 + [96])
	*($7 + [88]) = ($1 + [97])
	*($7 + [92]) = ($1 + [98])
	*($7 + [96]) = ($1 + [99])
	*($7 + [100]) = ($1 + [100])
	*($7 + [104]) = ($1 + [101])
	*($7 + [108]) = ($1 + [102])
	*($7 + [112]) = ($1 + [103])
	*($7 + [116]) = ($1 + [104])
	*($7 + [120]) = ($1 + [105])
	*($7 + [124]) = ($1 + [106])
	*($7 + [128]) = ($1 + [107])
	*($7 + [132]) = ($1 + [108])
	*($7 + [136]) = ($1 + [109])
	*($7 + [140]) = ($1 + [110])
	*($7 + [144]) = ($1 + [111])
	*($7 + [148]) = ($1 + [112])
	*($7 + [152]) = ($1 + [113])
	*($7 + [156]) = ($1 + [114])
	*($7 + [160]) = ($1 + [115])
	*($7 + [164]) = ($1 + [116])
	*($7 + [168]) = ($1 + [117])
	*($7 + [172]) = ($1 + [118])
	*($7 + [176]) = ($1 + [119])
	*($7 + [180]) = ($1 + [120])
	*($7 + [184]) = ($1 + [121])
	*($7 + [188]) = ($1 + [122])
	*($7 + [192]) = ($1 + [123])
	*($7 + [196]) = ($1 + [124])
	*($7 + [200]) = ($1 + [125])
	*($7 + [204]) = ($1 + [126])
	*($7 + [208]) = ($1 + [127])
	*($7 + [212]) = ($1 + [128])
	*($7 + [216]) = ($1 + [129])
	*($7 + [220]) = ($1 + [130])
	*($7 + [224]) = ($1 + [131])
	*($7 + [228]) = ($1 + [132])
	*($7 + [232]) = ($1 + [133])
	*($7 + [236]) = ($1 + [134])
	*($7 + [240]) = ($1 + [135])
	*($7 + [244]) = ($1 + [136])
	*($7 + [248]) = ($1 + [137])
	*($7 + [252]) = ($1 + [138])
	*($7 + [256]) = ($1 + [139])
	*($7 + [260]) = ($1 + [140])
	*($7 + [264]) = ($1 + [141])
	*($7 + [268]) = ($1 + [142])
	CALL $97(($7 + [8]), $7)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($7 + [272])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $96($0, ($1 + [8]))
	*($3 + [10]) = *($1 + [20])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($0 + [4]), ($3 + [10]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [11]) = *($1 + [21])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [560])
	CALL memcpy(*($0 + [4]), ($3 + [11]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [12]) = *($1 + [22])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [560])
	CALL memcpy(*($0 + [4]), ($3 + [12]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [13]) = *($1 + [23])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [560])
	CALL memcpy(*($0 + [4]), ($3 + [13]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [14]) = *($1 + [24])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [560])
	CALL memcpy(*($0 + [4]), ($3 + [14]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [25])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [560])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $21($0, ($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [560])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [560])
	CALL memcpy(*($2), $5, [1])
	$7 = (*($2) + [1])
	*($2) = $7
	$5 = ($5 + [1])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [560])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$7 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($7 - $4)) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL $173($4)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($7 << [1])
	$2 = ( $3 ? $4 : ($4 <= $3) )
	
.LABEL $label$6
	$4 = CALL $172($2)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $2)
	CALL memcpy($4, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$7 = (*($0 + [4]) - $4)
	$5 = ( ($1 + $7) ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($5 - $1)
	if ( ($6 == 0) ){ goto $label$7 }
	CALL memmove($4, $1, $6)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$8 }
	$0 = ($2 - $5)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $5, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($4 + $6)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $186($0)
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*(($8 = $7) + [24]) = *($1 + [8])
	$4 = *($1)
	$6 = $4
	$3 = *($3)
	$5 = ($1 + [52])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	CALL $92($5, *($3), *($3 + [4]))
	$6 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [848])
	*($8 + [8]) = [0]
	CALL $93(($8 + [8]), $1)
	$3 = *($8 + [8])
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $94(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$7 = ($1 + [160])
	$1 = *($7)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($8 + [32]), $4)
	*($7) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[72])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[72])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$4 = ([0] - $6)
	$7 = ($7 + [-64])
	
.LOOP $label$5:
	if ( ((*(($7 + [40])) & [1]) == 0) ){ goto $label$6 }
	CALL $173(*(($7 + [48])))
	
.LABEL $label$6
	$5 = *($7)
	if ( ($5 == 0) ){ goto $label$7 }
	*(($7 + [4])) = $5
	CALL $173($5)
	
.LABEL $label$7
	$7 = ($7 + [-72])
	if ( ((int_32)($7 + $4) != (int_32)[-64]) ){ goto $label$5 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$4
	$5 = ((int_32)(*($0 + [4]) - $6) / (int_32)[72])
	$7 = ( ($1 + ((int_32)$5 * (int_32)[72])) ? $2 : ((uint_32)$3 > (uint_32)$5) )
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	*($6) = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$10 }
	CALL $90(($6 + [8]), *(($1 + [8])), *(($1 + [12])))
	
.LABEL $label$10
	*(($6 + [44])) = *(($1 + [44]))
	*(($6 + [36])) = *(($1 + [36]))
	*(($6 + [28])) = *(($1 + [28]))
	*(($6 + [20])) = *(($1 + [20]))
	CALL $175(($6 + [48]), ($1 + [48]))
	*(($6 + [64])) = *(($1 + [64]))
	$6 = ($6 + [72])
	$1 = ($1 + [72])
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$5) ){ goto $label$11 }
	CALL $87($0, $7, $2, ($3 - ((int_32)(*(($0 + [4])) - *($0)) / (int_32)[72])))
	return 
	
.LABEL $label$11
	$0 = ($0 + [4])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$12 }
	$5 = ([0] - $6)
	$1 = ($1 + [-64])
	
.LOOP $label$13:
	if ( ((*(($1 + [40])) & [1]) == 0) ){ goto $label$14 }
	CALL $173(*(($1 + [48])))
	
.LABEL $label$14
	$7 = *($1)
	if ( ($7 == 0) ){ goto $label$15 }
	*(($1 + [4])) = $7
	CALL $173($7)
	
.LABEL $label$15
	$1 = ($1 + [-72])
	if ( ((int_32)($1 + $5) != (int_32)[-64]) ){ goto $label$13 }
	
.LABEL $label$12
	*($0) = $6
	return 
	
.LABEL $label$3
	$7 = $6
	
.LABEL $label$2
	*(($0 + [4])) = $6
	CALL $173($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$1
	if ( ((uint_32)$3 >= (uint_32)[59652324]) ){ goto $label$16 }
	$6 = [59652323]
	$7 = ((int_32)$7 / (int_32)[72])
	if ( ((uint_32)$7 > (uint_32)[29826160]) ){ goto $label$17 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$17
	$7 = ((int_32)$6 * (int_32)[72])
	$6 = CALL $172($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	CALL $87($0, $1, $2, $3)
	return (unreachable)
	
.LABEL $label$16
	CALL $186($0)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [272])
	*([0] + [4]) = $9
	$8 = (*($0) + [40])
	*($0) = $8
	$6 = *($1 + [40])
	$7 = (CASTING uint_64)(uint_32 ( *(($1 + [44])) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($0) = $8
	$6 = *(($1 + [40]))
	$6 = ( *(($1 + [44])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$2 }
	$8 = ($6 + $8)
	*($0) = $8
	
.LABEL $label$2
	$6 = *($1 + [52])
	$2 = *(($1 + [56]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($2 - $6) / (int_32)[72]))
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	*($0) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = ($8 + [8])
	*($0) = $8
	$4 = *($6 + [8])
	$3 = *(($6 + [12]))
	$5 = ($3 - $4)
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	$8 = (( $8 ? ($5 + $8) : ((int_32)$4 == (int_32)$3) ) + [22])
	*($0) = $8
	$4 = *($6 + [48])
	$3 = ($6 + [52])
	$7 = (CASTING uint_64)(uint_32 ( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$7:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	*($0) = $8
	$3 = *(($6 + [48]))
	$3 = ( *($3) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$8 = ($3 + $8)
	*($0) = $8
	
.LABEL $label$8
	$8 = ($8 + [8])
	*($0) = $8
	$6 = ($6 + [72])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = *($1 + [64])
	$6 = *(($1 + [68]))
	$4 = ($6 - $3)
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$9:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$9 }
	*($0) = (( $8 ? ($4 + $8) : ((int_32)$3 == (int_32)$6) ) + [1])
	*($9) = $0
	*($9 + [12]) = ($1 + [78])
	*($9 + [8]) = ($1 + [77])
	*($9 + [16]) = ($1 + [79])
	*($9 + [20]) = ($1 + [80])
	*($9 + [24]) = ($1 + [81])
	*($9 + [28]) = ($1 + [82])
	*($9 + [32]) = ($1 + [83])
	*($9 + [36]) = ($1 + [84])
	*($9 + [40]) = ($1 + [85])
	*($9 + [44]) = ($1 + [86])
	*($9 + [48]) = ($1 + [87])
	*($9 + [52]) = ($1 + [88])
	*($9 + [56]) = ($1 + [89])
	*($9 + [60]) = ($1 + [90])
	*($9 + [64]) = ($1 + [91])
	*($9 + [68]) = ($1 + [92])
	*($9 + [72]) = ($1 + [93])
	*($9 + [76]) = ($1 + [94])
	*($9 + [80]) = ($1 + [95])
	*($9 + [84]) = ($1 + [96])
	*($9 + [88]) = ($1 + [97])
	*($9 + [92]) = ($1 + [98])
	*($9 + [96]) = ($1 + [99])
	*($9 + [100]) = ($1 + [100])
	*($9 + [104]) = ($1 + [101])
	*($9 + [108]) = ($1 + [102])
	*($9 + [112]) = ($1 + [103])
	*($9 + [116]) = ($1 + [104])
	*($9 + [120]) = ($1 + [105])
	*($9 + [124]) = ($1 + [106])
	*($9 + [128]) = ($1 + [107])
	*($9 + [132]) = ($1 + [108])
	*($9 + [136]) = ($1 + [109])
	*($9 + [140]) = ($1 + [110])
	*($9 + [144]) = ($1 + [111])
	*($9 + [148]) = ($1 + [112])
	*($9 + [152]) = ($1 + [113])
	*($9 + [156]) = ($1 + [114])
	*($9 + [160]) = ($1 + [115])
	*($9 + [164]) = ($1 + [116])
	*($9 + [168]) = ($1 + [117])
	*($9 + [172]) = ($1 + [118])
	*($9 + [176]) = ($1 + [119])
	*($9 + [180]) = ($1 + [120])
	*($9 + [184]) = ($1 + [121])
	*($9 + [188]) = ($1 + [122])
	*($9 + [192]) = ($1 + [123])
	*($9 + [196]) = ($1 + [124])
	*($9 + [200]) = ($1 + [125])
	*($9 + [204]) = ($1 + [126])
	*($9 + [208]) = ($1 + [127])
	*($9 + [212]) = ($1 + [128])
	*($9 + [216]) = ($1 + [129])
	*($9 + [220]) = ($1 + [130])
	*($9 + [224]) = ($1 + [131])
	*($9 + [228]) = ($1 + [132])
	*($9 + [232]) = ($1 + [133])
	*($9 + [236]) = ($1 + [134])
	*($9 + [240]) = ($1 + [135])
	*($9 + [244]) = ($1 + [136])
	*($9 + [248]) = ($1 + [137])
	*($9 + [252]) = ($1 + [138])
	*($9 + [256]) = ($1 + [139])
	*($9 + [260]) = ($1 + [140])
	*($9 + [264]) = ($1 + [141])
	*($9 + [268]) = ($1 + [142])
	CALL $98(($9 + [8]), $9)
	*($0) = (*($0) + [8])
	*([0] + [4]) = ($9 + [272])
	return $0
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1088])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $143($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [288])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [288])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1088])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[12])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $142($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[12])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $173(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $7) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $45($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $172($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $173($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*(($8 = $7) + [24]) = *($1 + [8])
	$4 = *($1)
	$6 = $4
	$3 = *($3)
	$5 = ($1 + [52])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	CALL $92($5, *($3), *($3 + [4]))
	$6 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [848])
	*($8 + [8]) = [0]
	CALL $93(($8 + [8]), $1)
	$3 = *($8 + [8])
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $94(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$7 = ($1 + [160])
	$1 = *($7)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($8 + [32]), $4)
	*($7) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*(($8 = $7) + [24]) = *($1 + [8])
	$4 = *($1)
	$6 = $4
	$3 = *($3)
	$5 = ($1 + [52])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	CALL $92($5, *($3), *($3 + [4]))
	$6 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [848])
	*($8 + [8]) = [0]
	CALL $93(($8 + [8]), $1)
	$3 = *($8 + [8])
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $94(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$7 = ($1 + [160])
	$1 = *($7)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($8 + [32]), $4)
	*($7) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $45(*($1), ($3 + [16]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $138(*($1), ($3 + [48]))
	CALL $138(*($1), ($3 + [60]))
	CALL $139(*($1), ($3 + [72]))
	CALL $103(*($1), ($3 + [84]))
	*($4 + [8]) = $3
	CALL $140(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [304])
	*([0] + [4]) = $11
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $187(($11 + [288]), ($1 + [16]))
	*(($11 + [280])) = *(($1 + [40]))
	*($11 + [272]) = *($1 + [32])
	*($11 + [260]) = [0]
	*($11 + [256]) = [0]
	*($11 + [264]) = [0]
	$10 = (*(($1 + [52])) - *($1 + [48]))
	$9 = int_32($10 >> [4])
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$6 }
	$10 = CALL $172($10)
	*(($11 + [264])) = ($10 + ($9 << [4]))
	*($11 + [256]) = $10
	*($11 + [260]) = $10
	$4 = *(($1 + [48]))
	$9 = (*(($1 + [52])) - $4)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($10, $4, $9)
	*($11 + [260]) = (*($11 + [260]) + $9)
	
.LABEL $label$7
	*($11 + [248]) = [0]
	*($11 + [240]) = (int_64)0
	$10 = (*(($1 + [64])) - *($1 + [60]))
	$9 = int_32($10 >> [4])
	if ( ($9 == 0) ){ goto $label$8 }
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$5 }
	$10 = CALL $172($10)
	*(($11 + [248])) = ($10 + ($9 << [4]))
	*($11 + [240]) = $10
	*($11 + [244]) = $10
	$4 = *(($1 + [60]))
	$9 = (*(($1 + [64])) - $4)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($10, $4, $9)
	*($11 + [244]) = (*($11 + [244]) + $9)
	
.LABEL $label$8
	*($11 + [232]) = [0]
	*($11 + [224]) = (int_64)0
	$10 = (*(($1 + [76])) - *($1 + [72]))
	$4 = ((int_32)$10 / (int_32)[12])
	if ( ($10 == 0) ){ goto $label$9 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$4 }
	$9 = CALL $172($10)
	*(($11 + [232])) = ($9 + ((int_32)$4 * (int_32)[12]))
	*($11 + [224]) = $9
	*($11 + [228]) = $9
	$4 = *(($1 + [76]))
	$10 = *(($1 + [72]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $187($9, $10)
	$9 = (*($11 + [228]) + [12])
	*($11 + [228]) = $9
	$10 = ($10 + [12])
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$9
	*($11 + [216]) = [0]
	*($11 + [208]) = (int_64)0
	$10 = (*(($1 + [88])) - *($1 + [84]))
	if ( ($10 == 0) ){ goto $label$11 }
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$3 }
	$9 = CALL $172($10)
	*(($11 + [216])) = ($9 + $10)
	*($11 + [208]) = $9
	*($11 + [212]) = $9
	$4 = *(($1 + [84]))
	$10 = (*(($1 + [88])) - $4)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($9, $4, $10)
	*($11 + [212]) = (*($11 + [212]) + $10)
	
.LABEL $label$11
	*($11 + [200]) = [0]
	*($11 + [192]) = (int_64)0
	$10 = (*(($1 + [100])) - *($1 + [96]))
	$4 = ((int_32)$10 / (int_32)[12])
	if ( ($10 == 0) ){ goto $label$12 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$9 = CALL $172($10)
	*(($11 + [200])) = ($9 + ((int_32)$4 * (int_32)[12]))
	*($11 + [192]) = $9
	*($11 + [196]) = $9
	$4 = *(($1 + [100]))
	$10 = *(($1 + [96]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$13:
	CALL $187($9, $10)
	$9 = (*($11 + [196]) + [12])
	*($11 + [196]) = $9
	$10 = ($10 + [12])
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$13 }
	
.LABEL $label$12
	CALL $187(($11 + [176]), ($1 + [108]))
	*($11 + [168]) = [0]
	*($11 + [160]) = (int_64)0
	$10 = (*(($1 + [124])) - *($1 + [120]))
	$4 = ((int_32)$10 / (int_32)[12])
	if ( ($10 == 0) ){ goto $label$14 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$1 }
	$9 = CALL $172($10)
	*(($11 + [168])) = ($9 + ((int_32)$4 * (int_32)[12]))
	*($11 + [160]) = $9
	*($11 + [164]) = $9
	$4 = *(($1 + [124]))
	$10 = *(($1 + [120]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$14 }
	
.LOOP $label$15:
	CALL $187($9, $10)
	$9 = (*($11 + [164]) + [12])
	*($11 + [164]) = $9
	$10 = ($10 + [12])
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$15 }
	
.LABEL $label$14
	CALL memcpy(($11 + [88]), ($1 + [132]), [66])
	$5 = *($1 + [224])
	$6 = *($1 + [216])
	$7 = *($1 + [208])
	$8 = *($1 + [200])
	*((($11 + [72]) + [8])) = *((($11 + [272]) + [8]))
	*($11 + [72]) = *($11 + [272])
	CALL memcpy(($11 + [6]), ($11 + [88]), [66])
	CALL $137($0, $2, $3, ($11 + [288]), ($11 + [72]), ($11 + [256]), ($11 + [240]), ($11 + [224]), ($11 + [208]), ($11 + [192]), ($11 + [176]), ($11 + [160]), ($11 + [6]), $8, $7, $6, $5)
	$9 = *($11 + [160])
	if ( ($9 == 0) ){ goto $label$16 }
	$10 = *($11 + [164])
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$18 }
	$1 = ([0] - $9)
	$10 = ($10 + [-12])
	
.LOOP $label$19:
	if ( ((*($10) & [1]) == 0) ){ goto $label$20 }
	CALL $173(*(($10 + [8])))
	
.LABEL $label$20
	$10 = ($10 + [-12])
	if ( ((int_32)($10 + $1) != (int_32)[-12]) ){ goto $label$19 }
	$10 = *($11 + [160])
	goto $label$17 
	
.LABEL $label$18
	$10 = $9
	
.LABEL $label$17
	*($11 + [164]) = $9
	CALL $173($10)
	
.LABEL $label$16
	if ( ((*($11 + [176]) & [1]) == 0) ){ goto $label$21 }
	CALL $173(*($11 + [184]))
	
.LABEL $label$21
	$9 = *($11 + [192])
	if ( ($9 == 0) ){ goto $label$22 }
	$10 = *($11 + [196])
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$24 }
	$1 = ([0] - $9)
	$10 = ($10 + [-12])
	
.LOOP $label$25:
	if ( ((*($10) & [1]) == 0) ){ goto $label$26 }
	CALL $173(*(($10 + [8])))
	
.LABEL $label$26
	$10 = ($10 + [-12])
	if ( ((int_32)($10 + $1) != (int_32)[-12]) ){ goto $label$25 }
	$10 = *($11 + [192])
	goto $label$23 
	
.LABEL $label$24
	$10 = $9
	
.LABEL $label$23
	*($11 + [196]) = $9
	CALL $173($10)
	
.LABEL $label$22
	$10 = *($11 + [208])
	if ( ($10 == 0) ){ goto $label$27 }
	*($11 + [212]) = $10
	CALL $173($10)
	
.LABEL $label$27
	$9 = *($11 + [224])
	if ( ($9 == 0) ){ goto $label$28 }
	$10 = *($11 + [228])
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$30 }
	$1 = ([0] - $9)
	$10 = ($10 + [-12])
	
.LOOP $label$31:
	if ( ((*($10) & [1]) == 0) ){ goto $label$32 }
	CALL $173(*(($10 + [8])))
	
.LABEL $label$32
	$10 = ($10 + [-12])
	if ( ((int_32)($10 + $1) != (int_32)[-12]) ){ goto $label$31 }
	$10 = *($11 + [224])
	goto $label$29 
	
.LABEL $label$30
	$10 = $9
	
.LABEL $label$29
	*($11 + [228]) = $9
	CALL $173($10)
	
.LABEL $label$28
	$10 = *($11 + [240])
	if ( ($10 == 0) ){ goto $label$33 }
	*($11 + [244]) = $10
	CALL $173($10)
	
.LABEL $label$33
	$10 = *($11 + [256])
	if ( ($10 == 0) ){ goto $label$34 }
	*($11 + [260]) = $10
	CALL $173($10)
	
.LABEL $label$34
	if ( ((*($11 + [288]) & [1]) == 0) ){ goto $label$35 }
	CALL $173(*($11 + [296]))
	
.LABEL $label$35
	*([0] + [4]) = ($11 + [304])
	return (unreachable)
	
.LABEL $label$6
	CALL $186(($11 + [256]))
	
.LABEL $label$5
	CALL $186(($11 + [240]))
	
.LABEL $label$4
	CALL $186(($11 + [224]))
	
.LABEL $label$3
	CALL $186(($11 + [208]))
	
.LABEL $label$2
	CALL $186(($11 + [192]))
	
.LABEL $label$1
	CALL $186(($11 + [160]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [120])
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [124])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$4:
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL $173(*(($4 + [8])))
	
.LABEL $label$5
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$4 = *(($0 + [120]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $173($4)
	
.LABEL $label$1
	if ( ((*($0 + [108]) & [1]) == 0) ){ goto $label$6 }
	CALL $173(*(($0 + [116])))
	
.LABEL $label$6
	$1 = *($0 + [96])
	if ( ($1 == 0) ){ goto $label$7 }
	$3 = ($0 + [100])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$10:
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL $173(*(($4 + [8])))
	
.LABEL $label$11
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [96]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($3) = $1
	CALL $173($4)
	
.LABEL $label$7
	$4 = *($0 + [84])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($0 + [88])) = $4
	CALL $173($4)
	
.LABEL $label$12
	$1 = *($0 + [72])
	if ( ($1 == 0) ){ goto $label$13 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$15 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$16:
	if ( ((*($4) & [1]) == 0) ){ goto $label$17 }
	CALL $173(*(($4 + [8])))
	
.LABEL $label$17
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$16 }
	$4 = *(($0 + [72]))
	goto $label$14 
	
.LABEL $label$15
	$4 = $1
	
.LABEL $label$14
	*($3) = $1
	CALL $173($4)
	
.LABEL $label$13
	$4 = *($0 + [60])
	if ( ($4 == 0) ){ goto $label$18 }
	*(($0 + [64])) = $4
	CALL $173($4)
	
.LABEL $label$18
	$4 = *($0 + [48])
	if ( ($4 == 0) ){ goto $label$19 }
	*(($0 + [52])) = $4
	CALL $173($4)
	
.LABEL $label$19
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL $173(*(($0 + [24])))
	
.LABEL $label$20
	return $0
}

void .FUNC $137 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_64 $13, int_64 $14, int_64 $15, int_64 $16)
{
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [304])
	*([0] + [4]) = $19
	$0 = *($0 + [4])
	$18 = *($0 + [4])
	$17 = (*(*($0)) + int_32($18 >> [1]))
	$0 = *($0)
	if ( (($18 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($17) + $0))
	
.LABEL $label$1
	CALL $187(($19 + [288]), $3)
	*((($19 + [272]) + [8])) = *(($4 + [8]))
	*($19 + [272]) = *($4)
	*($19 + [260]) = [0]
	*($19 + [256]) = [0]
	*($19 + [264]) = [0]
	$4 = (*($5 + [4]) - *($5))
	$3 = int_32($4 >> [4])
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$7 }
	$4 = CALL $172($4)
	*(($19 + [264])) = ($4 + ($3 << [4]))
	*($19 + [256]) = $4
	*($19 + [260]) = $4
	$3 = *($5)
	$5 = (*(($5 + [4])) - $3)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($4, $3, $5)
	*($19 + [260]) = (*($19 + [260]) + $5)
	
.LABEL $label$8
	*($19 + [248]) = [0]
	*($19 + [240]) = (int_64)0
	$5 = (*($6 + [4]) - *($6))
	$4 = int_32($5 >> [4])
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$6 }
	$5 = CALL $172($5)
	*(($19 + [248])) = ($5 + ($4 << [4]))
	*($19 + [240]) = $5
	*($19 + [244]) = $5
	$4 = *($6)
	$6 = (*(($6 + [4])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $4, $6)
	*($19 + [244]) = (*($19 + [244]) + $6)
	
.LABEL $label$9
	*($19 + [232]) = [0]
	*($19 + [224]) = (int_64)0
	$5 = (*($7 + [4]) - *($7))
	$4 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$5 }
	$6 = CALL $172($5)
	*(($19 + [232])) = ($6 + ((int_32)$4 * (int_32)[12]))
	*($19 + [224]) = $6
	*($19 + [228]) = $6
	$7 = *(($7 + [4]))
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	CALL $187($6, $5)
	$6 = (*($19 + [228]) + [12])
	*($19 + [228]) = $6
	$5 = ($5 + [12])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$11 }
	
.LABEL $label$10
	*($19 + [216]) = [0]
	*($19 + [208]) = (int_64)0
	$5 = (*($8 + [4]) - *($8))
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $172($5)
	*(($19 + [216])) = ($6 + $5)
	*($19 + [208]) = $6
	*($19 + [212]) = $6
	$7 = *($8)
	$5 = (*(($8 + [4])) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($6, $7, $5)
	*($19 + [212]) = (*($19 + [212]) + $5)
	
.LABEL $label$12
	*($19 + [200]) = [0]
	*($19 + [192]) = (int_64)0
	$5 = (*($9 + [4]) - *($9))
	$7 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$3 }
	$6 = CALL $172($5)
	*(($19 + [200])) = ($6 + ((int_32)$7 * (int_32)[12]))
	*($19 + [192]) = $6
	*($19 + [196]) = $6
	$7 = *(($9 + [4]))
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$13 }
	
.LOOP $label$14:
	CALL $187($6, $5)
	$6 = (*($19 + [196]) + [12])
	*($19 + [196]) = $6
	$5 = ($5 + [12])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$13
	CALL $187(($19 + [176]), $10)
	*($19 + [168]) = [0]
	*($19 + [160]) = (int_64)0
	$5 = (*($11 + [4]) - *($11))
	$7 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$15 }
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = CALL $172($5)
	*(($19 + [168])) = ($6 + ((int_32)$7 * (int_32)[12]))
	*($19 + [160]) = $6
	*($19 + [164]) = $6
	$7 = *(($11 + [4]))
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$15 }
	
.LOOP $label$16:
	CALL $187($6, $5)
	$6 = (*($19 + [164]) + [12])
	*($19 + [164]) = $6
	$5 = ($5 + [12])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$16 }
	
.LABEL $label$15
	CALL memcpy(($19 + [88]), $12, [66])
	*((($19 + [72]) + [8])) = *((($19 + [272]) + [8]))
	*($19 + [72]) = *($19 + [272])
	CALL memcpy(($19 + [6]), ($19 + [88]), [66])
	CALL void $17((int_32 $1), (int_64 $2), (int_64 ($19 + [288])), (int_32 ($19 + [72])), (int_32 ($19 + [256])), (int_32 ($19 + [240])), (int_32 ($19 + [224])), (int_32 ($19 + [208])), (int_32 ($19 + [192])), (int_32 ($19 + [176])), (int_32 ($19 + [160])), (int_32 ($19 + [6])), (int_32 $13), (int_64 $14), (int_64 $15), (int_64 $16), (int_64 $0))
	$7 = *($19 + [160])
	if ( ($7 == 0) ){ goto $label$17 }
	$5 = *($19 + [164])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$19 }
	$6 = ([0] - $7)
	$5 = ($5 + [-12])
	
.LOOP $label$20:
	if ( ((*($5) & [1]) == 0) ){ goto $label$21 }
	CALL $173(*(($5 + [8])))
	
.LABEL $label$21
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$20 }
	$5 = *($19 + [160])
	goto $label$18 
	
.LABEL $label$19
	$5 = $7
	
.LABEL $label$18
	*($19 + [164]) = $7
	CALL $173($5)
	
.LABEL $label$17
	if ( ((*($19 + [176]) & [1]) == 0) ){ goto $label$22 }
	CALL $173(*($19 + [184]))
	
.LABEL $label$22
	$7 = *($19 + [192])
	if ( ($7 == 0) ){ goto $label$23 }
	$5 = *($19 + [196])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$25 }
	$6 = ([0] - $7)
	$5 = ($5 + [-12])
	
.LOOP $label$26:
	if ( ((*($5) & [1]) == 0) ){ goto $label$27 }
	CALL $173(*(($5 + [8])))
	
.LABEL $label$27
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$26 }
	$5 = *($19 + [192])
	goto $label$24 
	
.LABEL $label$25
	$5 = $7
	
.LABEL $label$24
	*($19 + [196]) = $7
	CALL $173($5)
	
.LABEL $label$23
	$5 = *($19 + [208])
	if ( ($5 == 0) ){ goto $label$28 }
	*($19 + [212]) = $5
	CALL $173($5)
	
.LABEL $label$28
	$7 = *($19 + [224])
	if ( ($7 == 0) ){ goto $label$29 }
	$5 = *($19 + [228])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$31 }
	$6 = ([0] - $7)
	$5 = ($5 + [-12])
	
.LOOP $label$32:
	if ( ((*($5) & [1]) == 0) ){ goto $label$33 }
	CALL $173(*(($5 + [8])))
	
.LABEL $label$33
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$32 }
	$5 = *($19 + [224])
	goto $label$30 
	
.LABEL $label$31
	$5 = $7
	
.LABEL $label$30
	*($19 + [228]) = $7
	CALL $173($5)
	
.LABEL $label$29
	$5 = *($19 + [240])
	if ( ($5 == 0) ){ goto $label$34 }
	*($19 + [244]) = $5
	CALL $173($5)
	
.LABEL $label$34
	$5 = *($19 + [256])
	if ( ($5 == 0) ){ goto $label$35 }
	*($19 + [260]) = $5
	CALL $173($5)
	
.LABEL $label$35
	if ( ((*($19 + [288]) & [1]) == 0) ){ goto $label$36 }
	CALL $173(*($19 + [296]))
	
.LABEL $label$36
	*([0] + [4]) = ($19 + [304])
	return (unreachable)
	
.LABEL $label$7
	CALL $186(($19 + [256]))
	
.LABEL $label$6
	CALL $186(($19 + [240]))
	
.LABEL $label$5
	CALL $186(($19 + [224]))
	
.LABEL $label$4
	CALL $186(($19 + [208]))
	
.LABEL $label$3
	CALL $186(($19 + [192]))
	
.LABEL $label$2
	CALL $186(($19 + [160]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $202 ()
{
	(unreachable)
}

int_32 .FUNC __gmtime_r (int_32 $0, int_32 $1)
{
	if ( ((int_32)CALL __secs_to_tm(*($0), $1) <= (int_32)[-1]) ){ goto $label$1 }
	*($1 + [40]) = [12272]
	*($1 + [32 align=4]) = (int_64)0
	return $1
	
.LABEL $label$1
	*(CALL __errno_location()) = [75]
	return [0]
}

int_32 .FUNC __secs_to_tm (int_64 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = [-1]
	if ( ((uint_64)((int_64)$0 + (int_64)67908586910515200) > (uint_64)(int_64)135817173789408000) ){ goto $label$1 }
	$0 = ((int_64)$0 + (int_64)-951868800)
	$4 = (CASTING uint_32)(uint_64 ((int_64)$0 % (int_64)86400))
	$0 = ((int_64)(CASTING int_64)(int_32 int_32($4 >> [31])) + (int_64)((int_64)$0 / (int_64)86400))
	$10 = (CASTING uint_32)(uint_64 ((int_64)$0 % (int_64)146097))
	$9 = ( ($10 + [146097]) ? $10 : ((int_32)$10 < (int_32)[0]) )
	$6 = (((int_32)$9 / (int_32)[36524]) - (($9 + [-146096]) <= [36524]))
	$9 = (((int_32)$6 * (int_32)[-36524]) + $9)
	$2 = (((int_32)$9 / (int_32)[1461]) - (($9 + [-36525]) <= [1461]))
	$9 = (((int_32)$2 * (int_32)[-1461]) + $9)
	$8 = (((int_32)$9 / (int_32)[365]) - (($9 + [-1460]) <= [365]))
	$3 = (((int_32)$8 * (int_32)[-365]) + $9)
	$5 = ((int_64)((int_64)$0 + (int_64)3) % (int_64)7)
	$0 = ((int_64)(CASTING uint_64)(uint_32 int_32($10 >> [31])) + (int_64)((int_64)$0 / (int_64)146097))
	$7 = [0]
	if ( $8 ){ goto $label$2 }
	$7 = (($6 == 0) | ((int_32)$2 != (int_32)[0]))
	
.LABEL $label$2
	$0 = ((int_64)(CASTING int_64)(int_32 ((($2 << [2]) + ((int_32)$6 * (int_32)[100])) + $8)) + (int_64)((int_64)((int_64)$0 << (int_64)32) >> (int_64)32) * (int_64)400))
	$9 = $3
	$10 = [0]
	if ( ((int_32)$3 < (int_32)[31]) ){ goto $label$3 }
	$10 = [0]
	$8 = [31]
	$9 = $3
	
.LOOP $label$4:
	$6 = ($10 + [12289])
	$10 = ($10 + [1])
	$8 = *($6)
	$9 = ($9 - $8)
	if ( ((int_32)$9 >= (int_32)$8) ){ goto $label$4 }
	
.LABEL $label$3
	$8 = ((int_32)$10 > (int_32)[9])
	$0 = ((int_64)$0 + (int_64)(CASTING uint_64)(uint_32 $8))
	if ( ((uint_64)((int_64)$0 + (int_64)2147483748) > (uint_64)(int_64)4294967295) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $5)
	*($1 + [24]) = ( ($6 + [7]) ? $6 : ((int_32)$6 < (int_32)[0]) )
	$11 = ( [366] ? [365] : $7 )
	$6 = (($3 + $7) + [59])
	*($1 + [28]) = ($6 - ( [0] ? $11 : ((int_32)$6 < (int_32)$11) ))
	*($1 + [20]) = ((int_64)$0 + (int_64)100)
	*($1 + [12]) = ($9 + [1])
	$9 = ( ($4 + [86400]) ? $4 : ((int_32)$4 < (int_32)[0]) )
	*($1 + [8]) = ((int_32)$9 / (int_32)[3600])
	*($1 + [4]) = ((int_32)((int_32)$9 / (int_32)[60]) % (int_32)[60])
	*($1 + [16]) = (( ($10 + [-12]) ? $10 : $8 ) + [2])
	*($1) = ((int_32)$9 % (int_32)[60])
	$11 = [0]
	
.LABEL $label$1
	return $11
}

int_32 .FUNC $181 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $129 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*(($8 = $7) + [24]) = *($1 + [8])
	$4 = *($1)
	$6 = $4
	$3 = *($3)
	$5 = ($1 + [52])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	CALL $92($5, *($3), *($3 + [4]))
	$6 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [848])
	*($8 + [8]) = [0]
	CALL $93(($8 + [8]), $1)
	$3 = *($8 + [8])
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $94(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$7 = ($1 + [160])
	$1 = *($7)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($8 + [32]), $4)
	*($7) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$0 = CALL memcpy($0, $1, [40])
	CALL $187(($0 + [40]), ($1 + [40]))
	*($0 + [52 align=4]) = (int_64)0
	*(($0 + [60])) = [0]
	$2 = (*(($1 + [56])) - *($1 + [52]))
	$3 = ((int_32)$2 / (int_32)[72])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($0 + [52])
	if ( ((uint_32)$3 >= (uint_32)[59652324]) ){ goto $label$2 }
	$2 = CALL $172($2)
	*(($0 + [56])) = $2
	*(($0 + [60])) = ($2 + ((int_32)$3 * (int_32)[72]))
	*(($0 + [52])) = $2
	CALL $87($5, *(($1 + [52])), *(($1 + [56])), $3)
	
.LABEL $label$3
	*($0 + [64 align=4]) = (int_64)0
	*(($0 + [72])) = [0]
	$3 = (*(($1 + [68])) - *($1 + [64]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = CALL $172($3)
	*(($0 + [64])) = $2
	*(($0 + [72])) = ($2 + $3)
	*(($3 = ($0 + [68]))) = $2
	$4 = *(($1 + [64]))
	$5 = (*(($1 + [68])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + $5)
	
.LABEL $label$4
	CALL memcpy(($0 + [76]), ($1 + [76]), [76])
	return $0
	
.LABEL $label$2
	CALL $186($5)
	
.LABEL $label$1
	CALL $186(($0 + [64]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [256])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $172(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $173($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $173($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [288])
	CALL memcpy(($3 + [24]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $45(*($1), ($3 + [28]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [288])
	CALL memcpy(($3 + [48]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $45(*($1), ($3 + [52]))
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $187(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $187(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $173(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $173(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $45(*($1), ($0 + [32]))
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($1)
	*($1) = [0]
	$2 = *($0)
	*($0) = $7
	if ( ($2 == 0) ){ goto $label$1 }
	$7 = *($2 + [64])
	if ( ($7 == 0) ){ goto $label$2 }
	*(($2 + [68])) = $7
	CALL $173($7)
	
.LABEL $label$2
	$3 = *($2 + [52])
	if ( ($3 == 0) ){ goto $label$3 }
	$6 = ($2 + [56])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	$4 = ([0] - $3)
	$7 = ($7 + [-64])
	
.LOOP $label$6:
	if ( ((*(($7 + [40])) & [1]) == 0) ){ goto $label$7 }
	CALL $173(*(($7 + [48])))
	
.LABEL $label$7
	$5 = *($7)
	if ( ($5 == 0) ){ goto $label$8 }
	*(($7 + [4])) = $5
	CALL $173($5)
	
.LABEL $label$8
	$7 = ($7 + [-72])
	if ( ((int_32)($7 + $4) != (int_32)[-64]) ){ goto $label$6 }
	$7 = *(($2 + [52]))
	goto $label$4 
	
.LABEL $label$5
	$7 = $3
	
.LABEL $label$4
	*($6) = $3
	CALL $173($7)
	
.LABEL $label$3
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL $173(*(($2 + [48])))
	
.LABEL $label$9
	CALL $173($2)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$4 = [0]
	*((($0 = CALL memset($0, [0], [152])) + [32])) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [192])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [256])
	*($0 + [40]) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*($0 + [64]) = (int_64)0
	*(($0 + [72])) = [0]
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	CALL $101($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*(($8 = $7) + [24]) = *($1 + [8])
	$4 = *($1)
	$6 = $4
	$3 = *($3)
	$5 = ($1 + [52])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	CALL $92($5, *($3), *($3 + [4]))
	$6 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [848])
	*($8 + [8]) = [0]
	CALL $93(($8 + [8]), $1)
	$3 = *($8 + [8])
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $94(($8 + [8]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($8 + [24]), ($8 + [40]), [8]) == 0) ){ goto $label$6 }
	$7 = ($1 + [160])
	$1 = *($7)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($8 + [32]), $4)
	*($7) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($8 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$5 = *($1 + [24])
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $187(($9 + [16]), ($1 + [28]))
	$7 = *($1 + [48])
	$6 = *($1 + [40])
	CALL $187($9, ($1 + [52]))
	$1 = *($0 + [4])
	$8 = *($1 + [4])
	$0 = (*(*($0)) + int_32($8 >> [1]))
	$1 = *($1)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $187(($9 + [48]), ($9 + [16]))
	CALL $187(($9 + [32]), $9)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $4), (int_64 ($5 & [255])), (int_32 ($9 + [48])), (int_32 $6), (int_64 ($7 & [255])), (int_32 ($9 + [32])), (int_32 $1))
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $173(*($9 + [40]))
	
.LABEL $label$2
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $173(*($9 + [56]))
	
.LABEL $label$3
	if ( ((*($9) & [1]) == 0) ){ goto $label$4 }
	CALL $173(*($9 + [8]))
	
.LABEL $label$4
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $173(*($9 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [64])
}

void .FUNC _Z14token_transferyyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	if ( (CALL is_account($2) == 0) ){ goto $label$1 }
	$10 = *($3)
	if ( (int_64)($10 == 0) ){ goto $label$1 }
	$8 = (int_64)0
	CALL eosio_assert(((int_64)$10 > (int_64)0), [496])
	$7 = (int_64)59
	$6 = [528]
	$9 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$7 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [165])
	goto $label$5 
	
.LABEL $label$7
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$3
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$2 }
	*($11 + [64]) = $9
	*($11 + [56]) = $1
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [544]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$13 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$5 = ($5 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	*(($11 + [36])) = *(($3 + [12]))
	*(($11 + [32])) = *(($3 + [8]))
	*(($11 + [28])) = *(($3 + [4]))
	*($11 + [16]) = $2
	*($11 + [8]) = $1
	*($11 + [24]) = *($3)
	CALL $187(($11 + [40]), $4)
	$6 = CALL $15(($11 + [72]), ($11 + [56]), $0, $9, ($11 + [8]))
	CALL $16(($11 + [112]), $6)
	$5 = *($11 + [112])
	CALL send_inline($5, (*($11 + [116]) - $5))
	$5 = *($11 + [112])
	if ( ($5 == 0) ){ goto $label$14 }
	*($11 + [116]) = $5
	CALL $173($5)
	
.LABEL $label$14
	$5 = *($6 + [28])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($6 + [32])) = $5
	CALL $173($5)
	
.LABEL $label$15
	$5 = *($6 + [16])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($6 + [20])) = $5
	CALL $173($5)
	
.LABEL $label$16
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL $173(*(($11 + [48])))
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [128])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $172([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $17($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $20(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $17($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [560])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [560])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $19(CALL $18($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $172($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $186($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $173($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _Z21jkr_available_balancey (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [304]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	*(($11 + [56])) = [0]
	*($11 + [32]) = $1
	*($11 + [24]) = $9
	*($11 + [40]) = (int_64)-1
	*($11 + [48]) = (int_64)0
	$6 = CALL $6(($11 + [24]), (int_64)5393226, [64])
	*(($4 = (($11 + [8]) + [8]))) = *(($6 + [8]))
	*($11 + [8]) = *($6)
	$3 = *($11 + [48])
	if ( ($3 == 0) ){ goto $label$5 }
	$5 = ($11 + [52])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	CALL $173($2)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$6 = *(($11 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$6 = $3
	
.LABEL $label$6
	*($5) = $3
	CALL $173($6)
	
.LABEL $label$5
	$8 = *($11 + [8])
	*($0) = $8
	*(($0 + [8])) = *($4)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [320])
	*([0] + [4]) = ($11 + [64])
}

void .FUNC _Z13uint64_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $12($5, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$2
	CALL $177($0, [0])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$1 }
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $172($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $178($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $174($0)
}

int_32 .FUNC _Z17transfer_continueyyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$7 = [0]
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)$0) ){ goto $label$1 }
	$7 = *($4)
	$5 = CALL strlen([352])
	if ( ((int_32)$5 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	$7 = [0]
	if ( (CALL $181($4, [0], [-1], [352], $5) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = *($4)
	$5 = ($4 + [4])
	$6 = CALL strlen([368])
	if ( ((int_32)$6 != (int_32)( *($5) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$3 }
	$7 = [0]
	if ( (CALL $181($4, [0], [-1], [368], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$3
	$7 = *($4)
	$6 = CALL strlen([384])
	if ( ((int_32)$6 != (int_32)( *($5) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$4 }
	$7 = [0]
	if ( (CALL $181($4, [0], [-1], [384], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	$0 = (int_64)0
	$2 = (int_64)59
	$4 = [400]
	$8 = (int_64)0
	
.LOOP $label$5:
	$9 = (int_64)0
	if ( ((uint_64)$0 > (uint_64)(int_64)11) ){ goto $label$6 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$7 = ($7 + [165])
	goto $label$7 
	
.LABEL $label$8
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$6
	$4 = ($4 + [1])
	$0 = ((int_64)$0 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$5 }
	$7 = [0]
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$0 = (int_64)0
	$2 = (int_64)59
	$4 = [416]
	$8 = (int_64)0
	
.LOOP $label$9:
	$9 = (int_64)0
	if ( ((uint_64)$0 > (uint_64)(int_64)11) ){ goto $label$10 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$7 = ($7 + [165])
	goto $label$11 
	
.LABEL $label$12
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$0 = ((int_64)$0 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$9 }
	$7 = [0]
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$0 = (int_64)0
	$2 = (int_64)59
	$4 = [432]
	$8 = (int_64)0
	
.LOOP $label$13:
	$9 = (int_64)0
	if ( ((uint_64)$0 > (uint_64)(int_64)11) ){ goto $label$14 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$7 = ($7 + [165])
	goto $label$15 
	
.LABEL $label$16
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$14
	$4 = ($4 + [1])
	$0 = ((int_64)$0 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$13 }
	$7 = [0]
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$0 = (int_64)0
	$2 = (int_64)59
	$4 = [448]
	$8 = (int_64)0
	
.LOOP $label$17:
	$9 = (int_64)0
	if ( ((uint_64)$0 > (uint_64)(int_64)11) ){ goto $label$18 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$7 = ($7 + [165])
	goto $label$19 
	
.LABEL $label$20
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$0 = ((int_64)$0 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$17 }
	$7 = [0]
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$0 = (int_64)0
	$2 = (int_64)59
	$4 = [464]
	$8 = (int_64)0
	
.LOOP $label$21:
	$9 = (int_64)0
	if ( ((uint_64)$0 > (uint_64)(int_64)11) ){ goto $label$22 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$7 = ($7 + [165])
	goto $label$23 
	
.LABEL $label$24
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$22
	$4 = ($4 + [1])
	$0 = ((int_64)$0 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$21 }
	$7 = [0]
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$0 = (int_64)0
	$2 = (int_64)59
	$4 = [480]
	$8 = (int_64)0
	
.LOOP $label$25:
	$9 = (int_64)0
	if ( ((uint_64)$0 > (uint_64)(int_64)11) ){ goto $label$26 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$7 = ($7 + [165])
	goto $label$27 
	
.LABEL $label$28
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$26
	$4 = ($4 + [1])
	$0 = ((int_64)$0 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$25 }
	$7 = [0]
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [496])
	$7 = [1]
	
.LABEL $label$1
	return $7
}

void .FUNC $185 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $172($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $178($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [560])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [560])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [560])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $184 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $185($1, $0, [11888])
	CALL abort()
	(unreachable)
}

int_32 .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $172($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $186 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $180 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [96])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $115($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [96])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [688])
	CALL $117($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $118($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*($1) = *(*($3))
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [560])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [156]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1040])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)8759786784126140416)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [976])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [976])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $85(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [160])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $172([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [288])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)7235159537265672192
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $119(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $173($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	$2 = *(($1 + [32]))
	$4 = *($0)
	$3 = *($1 + [16])
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [2304]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$5 = ($5 + [165])
	goto $label$3 
	
.LABEL $label$4
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	*($13 + [136]) = $2
	*(($13 + [120])) = [0]
	*($13 + [128]) = (int_64)0
	*($13 + [112]) = (int_64)0
	$8 = CALL strlen([2320])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$10 }
	*($13 + [112]) = ($8 << [1])
	$5 = (($13 + [112]) | [1])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = (($8 + [16]) & [-16])
	$5 = CALL $172($7)
	*($13 + [112]) = ($7 | [1])
	*($13 + [120]) = $5
	*($13 + [116]) = $8
	
.LABEL $label$9
	CALL memcpy($5, [2320], $8)
	
.LABEL $label$8
	*(($5 + $8)) = [0]
	*((($13 + [32]) + [8])) = *((($13 + [128]) + [8]))
	*($13 + [32]) = *($13 + [128])
	CALL _Z14token_transferyyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($3, $4, $11, ($13 + [32]), ($13 + [112]))
	if ( ((*($13 + [112]) & [1]) == 0) ){ goto $label$11 }
	CALL $173(*($13 + [120]))
	
.LABEL $label$11
	$4 = ((int_64)*(($1 + [24])) / (int_64)1250)
	$3 = *(($1 + [16]))
	$6 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [2352]
	$11 = (int_64)0
	
.LOOP $label$12:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$13 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$12 }
	*($13 + [104]) = $2
	*(($13 + [88])) = [0]
	*($13 + [96]) = $4
	*($13 + [80]) = (int_64)0
	$8 = CALL strlen([2368])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$18 }
	*($13 + [80]) = ($8 << [1])
	$5 = (($13 + [80]) | [1])
	if ( $8 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$7 = (($8 + [16]) & [-16])
	$5 = CALL $172($7)
	*($13 + [80]) = ($7 | [1])
	*($13 + [88]) = $5
	*($13 + [84]) = $8
	
.LABEL $label$17
	CALL memcpy($5, [2368], $8)
	
.LABEL $label$16
	*(($5 + $8)) = [0]
	*((($13 + [16]) + [8])) = *((($13 + [96]) + [8]))
	*($13 + [16]) = *($13 + [96])
	CALL _Z14token_transferyyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($3, $6, $11, ($13 + [16]), ($13 + [80]))
	if ( ((*($13 + [80]) & [1]) == 0) ){ goto $label$19 }
	CALL $173(*($13 + [88]))
	
.LABEL $label$19
	$4 = *(($1 + [16]))
	$3 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [2400]
	$11 = (int_64)0
	
.LOOP $label$20:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$21 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$5 = ($5 + [165])
	goto $label$22 
	
.LABEL $label$23
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$21
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$20 }
	*($13 + [72]) = $2
	*(($13 + [56])) = [0]
	*($13 + [64]) = (int_64)0
	*($13 + [48]) = (int_64)0
	$8 = CALL strlen([2416])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$26 }
	*($13 + [48]) = ($8 << [1])
	$5 = (($13 + [48]) | [1])
	if ( $8 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$1 = (($8 + [16]) & [-16])
	$5 = CALL $172($1)
	*($13 + [48]) = ($1 | [1])
	*($13 + [56]) = $5
	*($13 + [52]) = $8
	
.LABEL $label$25
	CALL memcpy($5, [2416], $8)
	
.LABEL $label$24
	*(($5 + $8)) = [0]
	*(($13 + [8])) = *((($13 + [64]) + [8]))
	*($13) = *($13 + [64])
	CALL _Z14token_transferyyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($4, $3, $11, $13, ($13 + [48]))
	if ( ((*($13 + [48]) & [1]) == 0) ){ goto $label$27 }
	CALL $173(*($13 + [56]))
	
.LABEL $label$27
	*([0] + [4]) = ($13 + [144])
	return (unreachable)
	
.LABEL $label$7
	CALL $174(($13 + [112]))
	
.LABEL $label$6
	CALL $174(($13 + [80]))
	
.LABEL $label$5
	CALL $174(($13 + [48]))
	(unreachable)
	(unreachable)
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$8 = *($0 + [4])
	*($1) = *(*($8))
	*($1 + [8]) = *(*($8) + [8])
	$2 = *($0)
	*($1 + [16]) = *(*($8) + [16])
	$3 = *($8)
	*($1 + [24]) = *($3 + [24])
	*(($1 + [32])) = *(($3 + [32]))
	CALL $175(($1 + [40]), (*($8) + [40]))
	*($1 + [144]) = *(*($8) + [144])
	*(($8 = $7) + [8]) = [0]
	CALL $93(($8 + [8]), $1)
	$3 = *($8 + [8])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$7 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$1
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $94(($8 + [8]), $1)
	$4 = *($1)
	*($1 + [156]) = CALL db_store_i64(*($2 + [8]), (int_64)8759786784126140416, *(*($0 + [8])), $4, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($7)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$4 = *(($2 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($1)
	*($8 + [24]) = *(($1 + [8]))
	*($1 + [160]) = CALL db_idx64_store($4, (int_64)8759786784126140416, $5, $6, ($8 + [24]))
	*([0] + [4]) = ($8 + [32])
}

int_64 .FUNC $110 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = ($0 + [32])
	$3 = *($4)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$1 = ($0 + [16])
	$2 = CALL db_lowerbound_i64(*($1), *(($0 + [24])), (int_64)8759786784126140416, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $85($1, $2)
	*($5 + [12]) = [0]
	*($5 + [8]) = $1
	$3 = *(*(CALL $114(($5 + [8])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [32])) = $3
	
.LABEL $label$1
	$1 = ($0 + [56])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [912])
	*($5 + [8]) = *($4)
	$4 = *(($0 + [84]))
	if ( ((int_32)$4 == (int_32)*(($0 + [80]))) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$1), [96])
	if ( $4 ){ goto $label$3 }
	$4 = ($5 + [8])
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $115($1, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$1), [96])
	goto $label$3 
	
.LABEL $label$5
	$4 = ($5 + [8])
	
.LABEL $label$3
	*($5 + [8]) = ((int_64)*($4) + (int_64)1)
	CALL $116($1, ($5 + [8]), *($0))
	$3 = *($5 + [8])
	*([0] + [4]) = ($5 + [16])
	return $3
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [624])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($5 = CALL $172([168])) + [32]) = (int_64)1398362884
	*($5 + [24]) = (int_64)0
	CALL eosio_assert([1], [192])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [256])
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [152]) = $1
	CALL $113(($7 + [16]), $5)
	*($7 + [32]) = $5
	$2 = *($5)
	*($7 + [16]) = $2
	$4 = *($5 + [156])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $4
	*($7 + [32]) = [0]
	*($3) = $5
	*($6) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $100(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	$3 = *($4 + [64])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($4 + [68])) = $3
	CALL $173($3)
	
.LABEL $label$9
	$0 = *($4 + [52])
	if ( ($0 == 0) ){ goto $label$10 }
	$6 = ($4 + [56])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$12 }
	$1 = ([0] - $0)
	$3 = ($3 + [-64])
	
.LOOP $label$13:
	if ( ((*(($3 + [40])) & [1]) == 0) ){ goto $label$14 }
	CALL $173(*(($3 + [48])))
	
.LABEL $label$14
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$15 }
	*(($3 + [4])) = $5
	CALL $173($5)
	
.LABEL $label$15
	$3 = ($3 + [-72])
	if ( ((int_32)($3 + $1) != (int_32)[-64]) ){ goto $label$13 }
	$3 = *(($4 + [52]))
	goto $label$11 
	
.LABEL $label$12
	$3 = $0
	
.LABEL $label$11
	*($6) = $0
	CALL $173($3)
	
.LABEL $label$10
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $173(*(($4 + [48])))
	
.LABEL $label$16
	CALL $173($4)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [624])
	*(($4 = CALL $172([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [560])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)7235159537265672192
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $119(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $173($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $172(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $173($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $173($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [160])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $172([64])
	$4 = CALL $30($6)
	*($6 + [48]) = $0
	CALL $31(($8 + [32]), $4)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6 + [8])
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $32(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $173($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6) + [8]) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$1), [96])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6291761009417781248, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $29($1, $6)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$1), [96])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [560])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [560])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $21(*($1), ($0 + [32]))
}

void .FUNC _Z12jkr_transferyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	if ( (CALL is_account($1) == 0) ){ goto $label$1 }
	$9 = *($2)
	if ( (int_64)($9 == 0) ){ goto $label$1 }
	$7 = (int_64)0
	CALL eosio_assert(((int_64)$9 > (int_64)0), [496])
	$6 = (int_64)59
	$5 = [528]
	$8 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$7 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$7
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$3
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$2 }
	*($11 + [64]) = $8
	*($11 + [56]) = $0
	$7 = (int_64)0
	$9 = (int_64)59
	$5 = [304]
	$8 = (int_64)0
	
.LOOP $label$8:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$9 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$9
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$6 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$8 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [544]
	$10 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$17 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$4 = ($4 + [165])
	goto $label$15 
	
.LABEL $label$17
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$13
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$12 }
	*(($11 + [36])) = *(($2 + [12]))
	*(($11 + [32])) = *(($2 + [8]))
	*(($11 + [28])) = *(($2 + [4]))
	*($11 + [16]) = $1
	*($11 + [8]) = $0
	*($11 + [24]) = *($2)
	CALL $187(($11 + [40]), $3)
	$5 = CALL $15(($11 + [72]), ($11 + [56]), $8, $10, ($11 + [8]))
	CALL $16(($11 + [112]), $5)
	$4 = *($11 + [112])
	CALL send_inline($4, (*($11 + [116]) - $4))
	$4 = *($11 + [112])
	if ( ($4 == 0) ){ goto $label$18 }
	*($11 + [116]) = $4
	CALL $173($4)
	
.LABEL $label$18
	$4 = *($5 + [28])
	if ( ($4 == 0) ){ goto $label$19 }
	*(($5 + [32])) = $4
	CALL $173($4)
	
.LABEL $label$19
	$4 = *($5 + [16])
	if ( ($4 == 0) ){ goto $label$20 }
	*(($5 + [20])) = $4
	CALL $173($4)
	
.LABEL $label$20
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL $173(*(($11 + [48])))
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [128])
}

void .FUNC _Z12eos_transferyyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	if ( (CALL is_account($1) == 0) ){ goto $label$1 }
	$9 = *($2)
	if ( (int_64)($9 == 0) ){ goto $label$1 }
	$7 = (int_64)0
	CALL eosio_assert(((int_64)$9 > (int_64)0), [496])
	$6 = (int_64)59
	$5 = [528]
	$8 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$7 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$7
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$3
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$2 }
	*($11 + [64]) = $8
	*($11 + [56]) = $0
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [16]
	$8 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$13 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$4 = ($4 + [165])
	goto $label$11 
	
.LABEL $label$13
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$9
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$8 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [544]
	$10 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$19 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$4 = ($4 + [165])
	goto $label$17 
	
.LABEL $label$19
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$15
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$14 }
	*(($11 + [36])) = *(($2 + [12]))
	*(($11 + [32])) = *(($2 + [8]))
	*(($11 + [28])) = *(($2 + [4]))
	*($11 + [16]) = $1
	*($11 + [8]) = $0
	*($11 + [24]) = *($2)
	CALL $187(($11 + [40]), $3)
	$5 = CALL $15(($11 + [72]), ($11 + [56]), $8, $10, ($11 + [8]))
	CALL $16(($11 + [112]), $5)
	$4 = *($11 + [112])
	CALL send_inline($4, (*($11 + [116]) - $4))
	$4 = *($11 + [112])
	if ( ($4 == 0) ){ goto $label$20 }
	*($11 + [116]) = $4
	CALL $173($4)
	
.LABEL $label$20
	$4 = *($5 + [28])
	if ( ($4 == 0) ){ goto $label$21 }
	*(($5 + [32])) = $4
	CALL $173($4)
	
.LABEL $label$21
	$4 = *($5 + [16])
	if ( ($4 == 0) ){ goto $label$22 }
	*(($5 + [20])) = $4
	CALL $173($4)
	
.LABEL $label$22
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL $173(*(($11 + [48])))
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [128])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $172([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $17($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [560])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [560])
	CALL memcpy($6, ($4 + [8]), [8])
	$6 = ($8 + [16])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [560])
	CALL memcpy($6, ($4 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $21($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC _Z9jkr_burnsyN5eosio5assetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$8 = *($1)
	if ( (int_64)($8 == 0) ){ goto $label$1 }
	$6 = (int_64)0
	CALL eosio_assert(((int_64)$8 > (int_64)0), [496])
	$5 = (int_64)59
	$4 = [528]
	$7 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$7 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$3 = ($3 + [165])
	goto $label$5 
	
.LABEL $label$7
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$3
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$2 }
	*($10 + [48]) = $7
	*($10 + [40]) = $0
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [304]
	$7 = (int_64)0
	
.LOOP $label$8:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$9 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [576]
	$9 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$17 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$13
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$12 }
	*(($10 + [20])) = *(($1 + [12]))
	*(($10 + [16])) = *(($1 + [8]))
	*(($10 + [12])) = *(($1 + [4]))
	*($10) = $0
	*($10 + [8]) = *($1)
	CALL $187(($10 + [24]), $2)
	$4 = CALL $25(($10 + [56]), ($10 + [40]), $7, $9, $10)
	CALL $16(($10 + [96]), $4)
	$3 = *($10 + [96])
	CALL send_inline($3, (*($10 + [100]) - $3))
	$3 = *($10 + [96])
	if ( ($3 == 0) ){ goto $label$18 }
	*($10 + [100]) = $3
	CALL $173($3)
	
.LABEL $label$18
	$3 = *($4 + [28])
	if ( ($3 == 0) ){ goto $label$19 }
	*(($4 + [32])) = $3
	CALL $173($3)
	
.LABEL $label$19
	$3 = *($4 + [16])
	if ( ($3 == 0) ){ goto $label$20 }
	*(($4 + [20])) = $3
	CALL $173($3)
	
.LABEL $label$20
	if ( ((*($10 + [24]) & [1]) == 0) ){ goto $label$1 }
	CALL $173(*(($10 + [32])))
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [112])
}

void .FUNC _Z12get_exchangey (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [304]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [304]
	$9 = (int_64)0
	
.LOOP $label$5:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$2 = ($2 + [165])
	goto $label$7 
	
.LABEL $label$8
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$6
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$5 }
	*(($10 + [40])) = [0]
	*($10 + [16]) = $9
	*($10 + [8]) = $7
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	CALL $28($0, ($10 + [8]), $1)
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [592])
	$0 = *($10 + [32])
	if ( ($0 == 0) ){ goto $label$9 }
	$3 = ($10 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $173($2)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$12 }
	$4 = *(($10 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$4 = $0
	
.LABEL $label$10
	*($3) = $0
	CALL $173($4)
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [48])
}

int_64 .FUNC _Z13epoch_to_datey (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $0
	$1 = CALL gmtime(($4 + [12]))
	$2 = *($1 + [16])
	$3 = *($1 + [20])
	$0 = *($1 + [12])
	*([0] + [4]) = ($4 + [16])
	return ((int_64)((int_64)$0 + (int_64)((int_64)(CASTING int_64)(int_32 ($3 + [1900])) * (int_64)10000)) + (int_64)((int_64)(CASTING int_64)(int_32 ($2 + [1])) * (int_64)100))
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [272])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $103(CALL $102(CALL $45($0, ($1 + [40])), ($1 + [52])), ($1 + [64]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [288])
	CALL memcpy(($3 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [76]) = ((int_32)*($3 + [8]) != (int_32)[0])
	*($3) = $0
	*($3 + [12]) = ($1 + [78])
	*($3 + [8]) = ($1 + [77])
	*($3 + [16]) = ($1 + [79])
	*($3 + [20]) = ($1 + [80])
	*($3 + [24]) = ($1 + [81])
	*($3 + [28]) = ($1 + [82])
	*($3 + [32]) = ($1 + [83])
	*($3 + [36]) = ($1 + [84])
	*($3 + [40]) = ($1 + [85])
	*($3 + [44]) = ($1 + [86])
	*($3 + [48]) = ($1 + [87])
	*($3 + [52]) = ($1 + [88])
	*($3 + [56]) = ($1 + [89])
	*($3 + [60]) = ($1 + [90])
	*($3 + [64]) = ($1 + [91])
	*($3 + [68]) = ($1 + [92])
	*($3 + [72]) = ($1 + [93])
	*($3 + [76]) = ($1 + [94])
	*($3 + [80]) = ($1 + [95])
	*($3 + [84]) = ($1 + [96])
	*($3 + [88]) = ($1 + [97])
	*($3 + [92]) = ($1 + [98])
	*($3 + [96]) = ($1 + [99])
	*($3 + [100]) = ($1 + [100])
	*($3 + [104]) = ($1 + [101])
	*($3 + [108]) = ($1 + [102])
	*($3 + [112]) = ($1 + [103])
	*($3 + [116]) = ($1 + [104])
	*($3 + [120]) = ($1 + [105])
	*($3 + [124]) = ($1 + [106])
	*($3 + [128]) = ($1 + [107])
	*($3 + [132]) = ($1 + [108])
	*($3 + [136]) = ($1 + [109])
	*($3 + [140]) = ($1 + [110])
	*($3 + [144]) = ($1 + [111])
	*($3 + [148]) = ($1 + [112])
	*($3 + [152]) = ($1 + [113])
	*($3 + [156]) = ($1 + [114])
	*($3 + [160]) = ($1 + [115])
	*($3 + [164]) = ($1 + [116])
	*($3 + [168]) = ($1 + [117])
	*($3 + [172]) = ($1 + [118])
	*($3 + [176]) = ($1 + [119])
	*($3 + [180]) = ($1 + [120])
	*($3 + [184]) = ($1 + [121])
	*($3 + [188]) = ($1 + [122])
	*($3 + [192]) = ($1 + [123])
	*($3 + [196]) = ($1 + [124])
	*($3 + [200]) = ($1 + [125])
	*($3 + [204]) = ($1 + [126])
	*($3 + [208]) = ($1 + [127])
	*($3 + [212]) = ($1 + [128])
	*($3 + [216]) = ($1 + [129])
	*($3 + [220]) = ($1 + [130])
	*($3 + [224]) = ($1 + [131])
	*($3 + [228]) = ($1 + [132])
	*($3 + [232]) = ($1 + [133])
	*($3 + [236]) = ($1 + [134])
	*($3 + [240]) = ($1 + [135])
	*($3 + [244]) = ($1 + [136])
	*($3 + [248]) = ($1 + [137])
	*($3 + [252]) = ($1 + [138])
	*($3 + [256]) = ($1 + [139])
	*($3 + [260]) = ($1 + [140])
	*($3 + [264]) = ($1 + [141])
	*($3 + [268]) = ($1 + [142])
	CALL $104(($3 + [8]), $3)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [272])
	return $0
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $172(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = ($7 + [-24])
	$2 = *($6)
	*($6) = [0]
	*(($1 + [-24])) = $2
	*(($1 + [-8])) = *(($7 + [-8]))
	*(($1 + [-12])) = *(($7 + [-12]))
	*(($1 + [-16])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$7 }
	$3 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$8 }
	$1 = ($3 + [-24])
	
.LOOP $label$9:
	$7 = CALL $78($1)
	$1 = ($1 + [-24])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $173($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1088])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = ($3 - $4)
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $105($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + $5)
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($2) != (int_32)$7), [288])
	CALL memcpy($4, *($5), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	$4 = ($4 + [1])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1088])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[72])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $88($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[72])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-64])
	
.LOOP $label$5:
	if ( ((*(($4 + [40])) & [1]) == 0) ){ goto $label$6 }
	CALL $173(*(($4 + [48])))
	
.LABEL $label$6
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $5
	CALL $173($5)
	
.LABEL $label$7
	$4 = ($4 + [-72])
	if ( ((int_32)($4 + $7) != (int_32)[-64]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $106($0, $4)
	$4 = ($4 + [72])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $172($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $186($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $173($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [288])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [288])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*((*($1 + [52]) + ((int_32)(CASTING uint_32)(uint_64 ((int_64)*(*($3)) + (int_64)4294967295)) * (int_32)[72])) + [22]) = [1]
	*(($3 = $6) + [24]) = *($1 + [8])
	$4 = *($1)
	CALL eosio_assert([1], [848])
	*($3 + [8]) = [0]
	CALL $93(($3 + [8]), $1)
	$5 = *($3 + [8])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	CALL $94(($3 + [8]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($3 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($3 + [24]), ($3 + [40]), [8]) == 0) ){ goto $label$5 }
	$6 = ($1 + [160])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($3 + [32]), $4)
	*($6) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($3 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [48])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $103($0, ($1 + [8]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [288])
	CALL memcpy(($3 + [10]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [20]) = ((int_32)*($3 + [10]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [11]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [21]) = ((int_32)*($3 + [11]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [12]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [22]) = ((int_32)*($3 + [12]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [13]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [23]) = ((int_32)*($3 + [13]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [14]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [24]) = ((int_32)*($3 + [14]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [288])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [25]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $45($0, ($1 + [48]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [1184])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1232])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$4 = ([0] - $3)
	$7 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$6 = $7
	$8 = ($7 + [-24])
	$7 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)$3), [1296])
	$8 = ($6 + [-24])
	$4 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	CALL $120($7, $8)
	$6 = ($7 + [48])
	$7 = $8
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$5 }
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($6 + [-24])
	
.LOOP $label$6:
	$6 = CALL $78($7)
	$7 = ($7 + [-24])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$6 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [156]))
	$7 = *(($1 + [160]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($7)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*((*($1 + [52]) + ((int_32)(CASTING uint_32)(uint_64 ((int_64)*(*($3)) + (int_64)4294967295)) * (int_32)[72])) + [23]) = [1]
	*(($3 = $6) + [24]) = *($1 + [8])
	$4 = *($1)
	CALL eosio_assert([1], [848])
	*($3 + [8]) = [0]
	CALL $93(($3 + [8]), $1)
	$5 = *($3 + [8])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	CALL $94(($3 + [8]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($3 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($3 + [24]), ($3 + [40]), [8]) == 0) ){ goto $label$5 }
	$6 = ($1 + [160])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8759786784126140416, ($3 + [32]), $4)
	*($6) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($3 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [48])
}

void .FUNC _Z12add_trsqueueRN5eosio11multi_indexILy14839762279855030272E8trsqueueJEEEyyNS_5assetENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [32]) = $1
	*($7 + [24]) = $2
	if ( ((int_64)*($3) < (int_64)1) ){ goto $label$1 }
	if ( (CALL is_account($2) == 0) ){ goto $label$1 }
	if ( (CALL is_account($1) == 0) ){ goto $label$1 }
	*($7) = $0
	*($7 + [12]) = $3
	*($7 + [16]) = $4
	*($7 + [4]) = ($7 + [32])
	*($7 + [8]) = ($7 + [24])
	*($7 + [72]) = $1
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [624])
	*($7 + [48]) = $0
	*($7 + [52]) = $7
	*($7 + [56]) = ($7 + [72])
	*(($4 = CALL $172([72])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [192])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert($6, [256])
	*($4 + [48]) = [0]
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [56]) = $0
	CALL $39(($7 + [48]), $4)
	*($7 + [64]) = $4
	$2 = *($4)
	*($7 + [48]) = $2
	$6 = *($4 + [60])
	*($7 + [44]) = $6
	$5 = ($0 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [64]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $40(($0 + [24]), ($7 + [64]), ($7 + [48]), ($7 + [44]))
	
.LABEL $label$7
	$3 = *($7 + [64])
	*($7 + [64]) = [0]
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL $173(*(($3 + [48])))
	
.LABEL $label$9
	CALL $173($3)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$4 = *($0 + [4])
	$6 = *($4)
	$5 = *($6 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-3606981793854521344, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $41($6, $3)
	*($7 + [4]) = [0]
	*($7) = $6
	$5 = *(*(CALL $42($7) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [912])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$6 = *($4 + [12])
	*($1 + [24]) = *($6)
	*(($1 + [32])) = *(($6 + [8]))
	CALL $175(($1 + [40]), *($4 + [16]))
	$4 = *($1 + [40])
	$6 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [41])
	$5 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($4 <= [513]) ){ goto $label$5 }
	$6 = CALL malloc($4)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$4
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $4)
	CALL $43($7, $1)
	$5 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-3606981793854521344, *(*($0 + [8])), $5, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$6 }
	CALL free($6)
	
.LABEL $label$6
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $172(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $173($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $173($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z14set_global_extRN5eosio11multi_indexILy7235159543134027776E13st_global_extJEEEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$4 = *($0 + [24])
	$9 = *(($0 + [28]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$6 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$0), [96])
	if ( $8 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159543134027776, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $35($0, $8)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$0), [96])
	
.LABEL $label$5
	$5 = ($0 + [16])
	$9 = (($10 + [16]) | [8])
	$6 = ($10 + [16])
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [624])
	*(($8 = CALL $172([32])) + [16]) = $0
	*($8 + [8]) = (int_64)0
	*($8) = $2
	CALL eosio_assert([1], [560])
	CALL memcpy(($10 + [16]), $8, [8])
	CALL eosio_assert([1], [560])
	$9 = (($10 + [16]) | [8])
	CALL memcpy($9, ($8 + [8]), [8])
	$2 = *($8)
	$4 = CALL db_store_i64(*($0 + [8]), (int_64)7235159543134027776, $1, $2, ($10 + [16]), [16])
	*($8 + [20]) = $4
	$5 = ($0 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$7 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($10 + [8]) = $8
	$2 = *($8)
	*($10 + [16]) = $2
	*($10 + [4]) = $4
	$7 = ($0 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $2
	*($6 + [16]) = $4
	*($10 + [8]) = [0]
	*($6) = $8
	*($7) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $36(($0 + [24]), ($10 + [8]), ($10 + [16]), ($10 + [4]))
	
.LABEL $label$8
	$6 = *($10 + [8])
	*($10 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $173($6)
	
.LABEL $label$10
	$6 = ($10 + [16])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [688])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [784])
	*($8 + [8]) = $3
	$2 = *($8)
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [560])
	CALL memcpy($6, $8, [8])
	CALL eosio_assert([1], [560])
	CALL memcpy($9, ($8 + [8]), [8])
	CALL db_update_i64(*($8 + [20]), (int_64)0, $6, [16])
	if ( (uint_64)($2 <= *(($0 + [16]))) ){ goto $label$11 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [32])
}

int_64 .FUNC _Z14get_global_extRN5eosio11multi_indexILy7235159543134027776E13st_global_extJEEEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [96])
	if ( $5 ){ goto $label$4 }
	return (int_64)0
	
.LABEL $label$5
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159543134027776, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $35($0, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [96])
	
.LABEL $label$4
	return *($5 + [8])
	
.LABEL $label$3
	return (int_64)0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [160])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $172([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [288])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [288])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $173($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $172(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $173($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $173($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z9exchangedN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	$2 = *($1 + [8])
	if ( ((int_64)$2 != (int_64)1397703940) ){ goto $label$2 }
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	goto $label$1 
	
.LABEL $label$2
	CALL _Z12get_exchangey(($3 + [8]), $2)
	$1 = *($3 + [12])
	*($0) = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *($1)) / (float_64)(CASTING float_64)(int_64 *($1))) * (float_64)(CASTING float_64)(int_64 *($1 + [24]))))
	*($0 + [8]) = *(($1 + [32]))
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $30 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [192])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [256])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [192])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [256])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [288])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [288])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC gmtime (int_32 $0)
{
	return CALL __gmtime_r($0, [12220])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [11937])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [11937])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [11937]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [11937]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [12208]))
	$10 = *(($13 + [11937]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [11937]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [11937]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [11937]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [11937])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [11937])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}