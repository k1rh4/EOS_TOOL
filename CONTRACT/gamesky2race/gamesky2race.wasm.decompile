(data (i32.const 16896) "Mica\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 16910) "Gabriella\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 17006) "Rafael\00")
(data (i32.const 17013) "Cassiel\00")
(data (i32.const 17021) "Ulrica\00")
(data (i32.const 17028) "Quella\00stoull\00")
(data (i32.const 17042) "Indira\00")
(data (i32.const 17049) "Izefia\00")
(data (i32.const 17056) "Louise\00")
(data (i32.const 17063) "Amaris\00")
(data (i32.const 17070) "Angelina\00")
(data (i32.const 17079) "Amaya\00")
(data (i32.const 17085) "Sakura\00")
(data (i32.const 17092) "Gina\00")
(data (i32.const 17097) "Michelle\00")
(data (i32.const 17106) "Lilith\00")
(data (i32.const 17113) "Kimi\00")
(data (i32.const 17118) "Lorelei\00")
(data (i32.const 17126) "Cosima\00")
(data (i32.const 17133) "Clover\00")
(data (i32.const 17140) "Bebe\00")
(data (i32.const 17145) "Sandy\00")
(data (i32.const 17151) "Karen\00")
(data (i32.const 17157) "Alexander\00")
(data (i32.const 17167) "Kaysa\00")
(data (i32.const 17173) "Tom\00: no conversion\00")
(data (i32.const 17193) "Jerry\00: out of range\00")
(data (i32.const 17214) "Victoria\00")
(data (i32.const 17223) "Harry\00")
(data (i32.const 17229) "Beckham\00")
(data (i32.const 17237) "Beggy\00")
(data (i32.const 17243) "Dolly\00")
(data (i32.const 17249) "Strickland\00")
(data (i32.const 17260) "Lukcy\00")
(data (i32.const 17266) "Bert\00")
(data (i32.const 17271) "Isabella\00")
(data (i32.const 17280) "Pinky\00")
(data (i32.const 17286) "Brady\00")
(data (i32.const 17292) "Estelle\00")
(data (i32.const 17300) "WhooHoo\00")
(data (i32.const 17308) "Benedict\00")
(data (i32.const 17317) "Nor-man\00")
(data (i32.const 17325) "Frederica\00")
(data (i32.const 17335) "Luffy\00")
(data (i32.const 17341) "Cookies\00")
(data (i32.const 17349) "Happy\00")
(data (i32.const 17355) "Yuki\00")
(data (i32.const 17360) "Lois\00")
(data (i32.const 17365) "Gaea\00")
(data (i32.const 17370) "Victor\00")
(data (i32.const 17377) "contract has initialized\00")
(data (i32.const 17402) "contract not initialize\00")
(data (i32.const 17426) "dog racing contract paused!\00")
(data (i32.const 17454) "invalid round ID!\00")
(data (i32.const 17472) "special round ended\00")
(data (i32.const 17492) "racing time has not arrived\00")
(data (i32.const 17520) "dog racing contract paused\00")
(data (i32.const 17547) "invalid round id\00")
(data (i32.const 17564) "bet asset must >= 0.1 EOS and <= 100 EOS\00")
(data (i32.const 17605) "bet timeover!\00")
(data (i32.const 17619) "transfer dividend to tokenpool\00")
(data (i32.const 17650) "Winner! Play: racing.gamesky.io\00")
(data (i32.const 17682) "invalid bet option length\00")
(data (i32.const 17708) "total bet amount in options different with quantity\00")
(data (i32.const 17761) "invalid bettor name\00")
(data (i32.const 17781) "contract is not involved in this transfer\00")
(data (i32.const 17823) "-\00")
(data (i32.const 17825) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 17884) "active")
(data (i32.const 17890) "transfer")
(data (i32.const 17898) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17947) "invalid symbol name\00")
(data (i32.const 17967) "write\00")
(data (i32.const 17973) "attempt to add asset with different symbol\00")
(data (i32.const 18016) "addition underflow\00")
(data (i32.const 18035) "addition overflow\00")
(data (i32.const 18053) "mine")
(data (i32.const 18057) "eosio")
(data (i32.const 18062) "string is too long to be a valid name\00")
(data (i32.const 18100) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 18167) "character is not in allowed character set for names\00")
(data (i32.const 18219) "eosio.token")
(data (i32.const 18230) "error reading iterator\00")
(data (i32.const 18253) "read\00")
(data (i32.const 18258) "cannot create objects in table of another contract\00")
(data (i32.const 18309) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18361) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18415) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18464) "\f6\05\00\00\00\00\00\00\87\0d\00\00\00\00\00\00\b9\12\00\00\00\00\00\00\c2\18\00\00\00\00\00\00S \00\00\00\00\00\00\10\'\00\00\00\00\00\00")
(data (i32.const 18512) "h\02\00\00\00\00\00\000\01\00\00\00\00\00\00\c8\00\00\00\00\00\00\00\e5\01\00\00\00\00\00\00\f7\00\00\00\00\00\00\00\a8\00\00\00\00\00\00\00\c2\02\00\00\00\00\00\00X\01\00\00\00\00\00\00\df\00\00\00\00\00\00\00`\02\00\00\00\00\00\00-\01\00\00\00\00\00\00\c6\00\00\00\00\00\00\00\e5\01\00\00\00\00\00\00\f7\00\00\00\00\00\00\00\a8\00\00\00\00\00\00\00\"\02\00\00\00\00\00\00\11\01\00\00\00\00\00\00\b7\00\00\00\00\00\00\00")
(data (i32.const 18656) "cannot pass end iterator to modify\00")
(data (i32.const 18691) "object passed to modify is not in multi_index\00")
(data (i32.const 18737) "cannot modify objects in table of another contract\00")
(data (i32.const 18788) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18847) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18898) "get\00")
(data (i32.const 18902) "cannot pass end iterator to erase\00")
(data (i32.const 18936) "cannot increment end iterator\00")
(data (i32.const 18966) "object passed to erase is not in multi_index\00")
(data (i32.const 19011) "cannot erase objects in table of another contract\00")
(data (i32.const 19061) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19120) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_update_i64" (func $fimport$4 (param i32 i64 i32 i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$6 (param i32 i32 i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "memmove" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$12 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$19 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$20 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "db_idx64_find_primary" (func $fimport$22 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$23 (param i32 i64 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$24 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$27 (param i32)))
(import "env" "prints_l" (func $fimport$28 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$39 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$40 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$41 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$43 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$45 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$46 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$47 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $49))
(export "_ZdlPv" (func $88))
(export "_Znwj" (func $86))
(export "_Znaj" (func $87))
(export "_ZdaPv" (func $89))
(export "_ZnwjSt11align_val_t" (func $90))
(export "_ZnajSt11align_val_t" (func $91))
(export "_ZdlPvSt11align_val_t" (func $92))
(export "_ZdaPvSt11align_val_t" (func $93))
(table $0 7 7 anyfunc)
(elem (i32.const 1) $48 $11 $2 $9 $12 $1)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19377))
(global $global$2 i32 (i32.const 19377))


void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $94 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $98($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $122(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $122(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $128($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $124($1)
	
.LABEL $label$2
	*(CALL $108()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $124(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $128($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_64 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $114($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $108()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $114($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19121]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $113($0, (int_64)0)
	*(CALL $108()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $114($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $114($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $114($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $114($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19121])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19121]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19121]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $114($0)
	$5 = *(($6 + [19121]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $114($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19121]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16901]))
	$8 = (int_64)0
	$5 = *(($6 + [19121]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19121]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $114($0)
	$5 = *(($6 + [19121]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $114($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19121]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $113($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19121]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19121]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $114($0) + [19121]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $108()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $108()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $108()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $108())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $123($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $121 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $120 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8492]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8496])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8492]) = [1]
	$2 = ($2 << [16])
	*([0] + [8496]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8496])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8496]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8492]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8492]) = [1]
	$3 = ($3 << [16])
	*([0] + [8496]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8496])
	
.LABEL $label$10
	*([0] + [8496]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL memory()
	*($3 + [100]) = [11]
	*($3 + [96]) = [18219]
	*($3 + [48]) = *($3 + [96])
	CALL $27(($3 + [104]), ($3 + [48]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [100]) = [8]
	*($3 + [96]) = [17890]
	*($3 + [40]) = *($3 + [96])
	CALL $27(($3 + [104]), ($3 + [40]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [1]
	*($3) = *($3 + [88])
	CALL $50($0, (int_64)6138663591592764928, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-4994130327562180977) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-7297699337563275264) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-6217917475468607488) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3 + [16]) = *($3 + [72])
	CALL $51($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)-4994130327562180976) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [3]
	*($3 + [8]) = *($3 + [80])
	CALL $52($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [24]) = *($3 + [64])
	CALL $52($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [60]) = [0]
	*($3 + [56]) = [5]
	*($3 + [32]) = *($3 + [56])
	CALL $53($1, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $109([0])
	$global$0 = ($3 + [112])
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$5 = ($global$0 - [192])
	$global$0 = $5
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	$7 = *($4)
	$6 = CALL $119([17760])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	if ( (CALL $100($4, [0], [-1], [17760], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert(CALL $fimport$12($1), [17761])
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [17781])
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$4 }
	$7 = uint_32($7 >> [1])
	$8 = ($4 + [1])
	goto $label$3 
	
.LABEL $label$4
	$7 = *(($4 + [4]))
	$8 = *($4 + [8])
	
.LABEL $label$3
	$9 = [0]
	$6 = CALL $119([17823])
	if ( ($6 == 0) ){ goto $label$5 }
	$10 = ($8 + $7)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$7 }
	$9 = $8
	
.LOOP $label$8:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$7 }
	$7 = CALL $117($9, [45], $7)
	if ( ($7 == 0) ){ goto $label$7 }
	if ( (CALL $118($7, [17823], $6) == 0) ){ goto $label$6 }
	$9 = ($7 + [1])
	$7 = ($10 - $9)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = $10
	
.LABEL $label$6
	$9 = ( [-1] ? ($7 - $8) : ((int_32)$7 == (int_32)$10) )
	
.LABEL $label$5
	$8 = CALL $96(($5 + [176]), $4, [0], $9, $4)
	$11 = CALL $103($8, [0], [10])
	*(($5 + [168])) = [0]
	*($5 + [160]) = (int_64)0
	$7 = CALL $119([17760])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$15 }
	*($5 + [160]) = ($7 << [1])
	$6 = (($5 + [160]) | [1])
	if ( $7 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$10 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [160]) = ($10 | [1])
	*($5 + [168]) = $6
	*($5 + [164]) = $7
	
.LABEL $label$14
	CALL memcpy($6, [17760], $7)
	
.LABEL $label$13
	*(($6 + $7)) = [0]
	*(($5 + [152])) = [0]
	*($5 + [144]) = (int_64)0
	$7 = CALL $119([17760])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($5 + [144]) = ($7 << [1])
	$6 = (($5 + [144]) | [1])
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$10 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [144]) = ($10 | [1])
	*($5 + [152]) = $6
	*($5 + [148]) = $7
	
.LABEL $label$17
	CALL memcpy($6, [17760], $7)
	
.LABEL $label$16
	$10 = [0]
	*(($6 + $7)) = [0]
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$9 }
	$6 = CALL $96(($5 + [128]), $4, ($9 + [1]), [-1], $4)
	$7 = *($5 + [128])
	$12 = *($6 + [8])
	$9 = *($6 + [4])
	$4 = CALL $119([17823])
	if ( ($4 == 0) ){ goto $label$22 }
	$10 = ($7 & [1])
	$7 = ( $9 ? uint_32($7 >> [1]) : $10 )
	if ( ((int_32)$7 < (int_32)$4) ){ goto $label$21 }
	$12 = ( $12 ? ($6 + [1]) : $10 )
	$10 = ($12 + $7)
	$9 = $12
	
.LOOP $label$23:
	$7 = (($7 - $4) + [1])
	if ( ($7 == 0) ){ goto $label$21 }
	$7 = CALL $117($9, [45], $7)
	if ( ($7 == 0) ){ goto $label$21 }
	if ( (CALL $118($7, [17823], $4) == 0) ){ goto $label$24 }
	$9 = ($7 + [1])
	$7 = ($10 - $9)
	if ( ((int_32)$7 >= (int_32)$4) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$21 }
	$10 = ($7 - $12)
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$21 }
	
.LABEL $label$22
	CALL $96(($5 + [112]), $6, [0], $10, $6)
	if ( (*($5 + [160]) & [1]) ){ goto $label$20 }
	*($5 + [160]) = [0]
	goto $label$19 
	
.LABEL $label$21
	CALL $97(($5 + [160]), $6)
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$20
	*(*($5 + [168])) = [0]
	*($5 + [164]) = [0]
	
.LABEL $label$19
	CALL $99(($5 + [160]), [0])
	*((($5 + [160]) + [8])) = *((($5 + [112]) + [8]))
	*($5 + [160]) = *($5 + [112])
	CALL $96(($5 + [112]), $6, ($10 + [1]), [-1], $6)
	if ( (*($5 + [144]) & [1]) ){ goto $label$26 }
	*($5 + [144]) = [0]
	goto $label$25 
	
.LABEL $label$26
	*(*($5 + [152])) = [0]
	*($5 + [148]) = [0]
	
.LABEL $label$25
	CALL $99(($5 + [144]), [0])
	*((($5 + [144]) + [8])) = *((($5 + [112]) + [8]))
	*($5 + [144]) = *($5 + [112])
	if ( (*($5 + [128]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL $94(($5 + [160]))
	
.LABEL $label$11
	CALL $94(($5 + [144]))
	
.LABEL $label$10
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$9
	*($5 + [116]) = [0]
	*($5 + [112]) = [18057]
	*($5 + [40]) = *($5 + [112])
	$13 = *(CALL $27(($5 + [128]), ($5 + [40])))
	$4 = ($4 & [1])
	$4 = *($5 + [144])
	$6 = uint_32($4 >> [1])
	$7 = *($5 + [148])
	$9 = CALL $119([17760])
	if ( ((int_32)$9 != (int_32)( $7 ? $6 : $4 )) ){ goto $label$28 }
	if ( (CALL $100(($5 + [144]), [0], [-1], [17760], $9) == 0) ){ goto $label$27 }
	$4 = *($5 + [144])
	$6 = uint_32($4 >> [1])
	$4 = ($4 & [1])
	$7 = *($5 + [148])
	
.LABEL $label$28
	*($5 + [100]) = ( $7 ? $6 : $4 )
	$7 = (($5 + [144]) | [1])
	*($5 + [96]) = ( *($5 + [152]) ? $7 : $4 )
	*($5 + [32]) = *($5 + [96])
	if ( (CALL is_account(*(CALL $27(($5 + [104]), ($5 + [32])))) == 0) ){ goto $label$27 }
	$4 = *($5 + [144])
	$6 = ($4 & [1])
	$9 = ($5 + [152])
	*($5 + [88]) = ( *($9) ? $7 : $6 )
	*($5 + [92]) = ( *($5 + [148]) ? uint_32($4 >> [1]) : $6 )
	*($5 + [24]) = *($5 + [88])
	if ( ((int_64)*(CALL $27(($5 + [128]), ($5 + [24]))) == (int_64)$1) ){ goto $label$27 }
	$4 = *($5 + [144])
	$6 = ($4 & [1])
	*($5 + [80]) = ( *($9) ? $7 : $6 )
	*($5 + [84]) = ( *($5 + [148]) ? uint_32($4 >> [1]) : $6 )
	*($5 + [16]) = *($5 + [80])
	$13 = *(CALL $27(($5 + [128]), ($5 + [16])))
	
.LABEL $label$27
	$4 = CALL $95(($5 + [64]), ($5 + [160]))
	$14 = *(($3 + [8]))
	*((($5 + [48]) + [8])) = $14
	$2 = *($3)
	*(($5 + [8])) = $14
	*($5 + [48]) = $2
	*($5) = $2
	CALL $32($0, $1, $11, $4, $13, $5)
	if ( (*($4) & [1]) ){ goto $label$34 }
	if ( (*($5 + [144]) & [1]) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($5 + [144]) & [1]) == 0) ){ goto $label$32 }
	
.LABEL $label$33
	CALL _ZdlPv(*($5 + [152]))
	$4 = [1]
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$4 = [1]
	if ( (*($5 + [160]) & [1]) ){ goto $label$30 }
	
.LABEL $label$31
	if ( ((*($5 + [176]) & $4) == 0) ){ goto $label$1 }
	goto $label$29 
	
.LABEL $label$30
	CALL _ZdlPv(*($5 + [168]))
	if ( ((*($5 + [176]) & $4) == 0) ){ goto $label$1 }
	
.LABEL $label$29
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [192])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $126($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16920])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_64 .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	float_64 $7
	float_64 $8
	float_64 $9
	float_64 $10
	float_64 $11
	float_64 $12
	float_64 $13
	$3 = *($2)
	$1 = ($3 + ($1 << [3]))
	$4 = ($1 + [8])
	$5 = (*($2 + [4]) - $4)
	$6 = int_32($5 >> [3])
	$7 = *($1)
	if ( ($5 == 0) ){ goto $label$1 }
	CALL memmove($1, $4, $5)
	$3 = *($2)
	
.LABEL $label$1
	*(($2 + [4])) = ($1 + ($6 << [3]))
	$9 = (float_64)
	$13 = *($3 + [32])
	$12 = *($3 + [24])
	$11 = *($3 + [16])
	$10 = *($3 + [8])
	$8 = *($3)
	return ((float_64)((float_64)((float_64)((float_64)((float_64)((float_64)$7 * (float_64)((float_64)$8 / (float_64)$9((float_64)1 - $8)))) * (float_64)((float_64)((float_64)((float_64)((float_64)$10 / (float_64)(float_64))($9 - $10)) + (float_64)((float_64)$11 / (float_64)(float_64))($9 - $11))) + (float_64)((float_64)$12 / (float_64)(float_64))($9 - $12))) + (float_64)((float_64)$13 / (float_64)(float_64))($9 - $13)))) + (float_64)((float_64)((float_64)$7 * (float_64)((float_64)$10 / (float_64)$9((float_64)1 - $10)))) * (float_64)((float_64)((float_64)((float_64)((float_64)$8 / (float_64)(float_64))($9 - $8)) + (float_64)((float_64)$11 / (float_64)(float_64))($9 - $11))) + (float_64)((float_64)$12 / (float_64)(float_64))($9 - $12))) + (float_64)((float_64)$13 / (float_64)(float_64))($9 - $13))))) + (float_64)((float_64)((float_64)$7 * (float_64)((float_64)$11 / (float_64)$9((float_64)1 - $11)))) * (float_64)((float_64)((float_64)$13 / (float_64)(float_64))($9 - $13)) + (float_64)((float_64)((float_64)$12 / (float_64)(float_64))($9 - $12)) + (float_64)((float_64)((float_64)$8 / (float_64)(float_64))($9 - $8)) + (float_64)((float_64)$10 / (float_64)(float_64))($9 - $10))))))) + (float_64)((float_64)((float_64)$7 * (float_64)((float_64)$12 / (float_64)$9((float_64)1 - $12)))) * (float_64)((float_64)((float_64)$13 / (float_64)(float_64))($9 - $13)) + (float_64)((float_64)((float_64)$11 / (float_64)(float_64))($9 - $11)) + (float_64)((float_64)((float_64)$8 / (float_64)(float_64))($9 - $8)) + (float_64)((float_64)$10 / (float_64)(float_64))($9 - $10))))))) + (float_64)((float_64)((float_64)$7 * (float_64)((float_64)$13 / (float_64)$9((float_64)1 - $13)))) * (float_64)((float_64)((float_64)$12 / (float_64)(float_64))($9 - $12)) + (float_64)((float_64)((float_64)$11 / (float_64)(float_64))($9 - $11)) + (float_64)((float_64)((float_64)$8 / (float_64)(float_64))($9 - $8)) + (float_64)((float_64)$10 / (float_64)(float_64))($9 - $10)))))))
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	float_64 $5
	float_64 $6
	int_64 $7
	float_64 $8
	float_64 $9
	float_64 $10
	float_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [240])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$5 = *($4)
	$6 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$7 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$7 = (Rounds 0)($6)
	
.LABEL $label$1
	*($3 + [232]) = $7
	$6 = *($4 + [40])
	$8 = *($4 + [32])
	$9 = *($4 + [24])
	$10 = *($4 + [8])
	$11 = *($4 + [16])
	*($3 + [208]) = (int_64)0
	*($3 + [216]) = [0]
	$6 = ((float_64)$5 + (float_64)((float_64)$5 * (float_64)((float_64)((float_64)((float_64)((float_64)((float_64)$10 / (float_64)(float_64))((float_64)1 - $10)) + (float_64)((float_64)$11 / (float_64)(float_64))((float_64)1 - $11))) + (float_64)((float_64)$9 / (float_64)(float_64))((float_64)1 - $9))) + (float_64)((float_64)$8 / (float_64)(float_64))((float_64)1 - $8))
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$6 + (float_64)((float_64)$6 / (float_64)(float_64))((float_64)1 - $6))))
	if ( (((float_64)$5)) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)) < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$10 }
	*($3 + [224]) = (int_64)0
	$4 = (*($2 + [4]) - $4)
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($3 + [224]) = (Rounds 0)($5)
	$4 = (*($2 + [4]) - $4)
	if ( ($4 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$12 = int_32($4 >> [3])
	if ( ((uint_32)$12 >= (uint_32)[536870912]) ){ goto $label$7 }
	$4 = CALL _Znwj($4)
	*(($3 + [216])) = ($4 + ($12 << [3]))
	*($3 + [208]) = $4
	*($3 + [212]) = $4
	$13 = *($2)
	$12 = (*(($2 + [4])) - $13)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($4, $13, $12)
	*($3 + [212]) = ($4 + $12)
	
.LABEL $label$8
	$5 = ((float_64)$6 + (float_64)CALL $43($3, [0], ($3 + [208])))
	$4 = *($3 + [208])
	if ( ($4 == 0) ){ goto $label$11 }
	*($3 + [212]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$13 }
	$7 = (int_64)0
	goto $label$12 
	
.LABEL $label$13
	$7 = (Rounds 0)($5)
	
.LABEL $label$12
	*($3 + [200]) = $7
	$14 = ($0 + [8])
	$12 = *($14)
	$13 = ($0 + [4])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$15 }
	*($4) = *($3 + [232])
	$4 = ($4 + [8])
	*($13) = $4
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$14 }
	goto $label$6 
	
.LABEL $label$15
	CALL $38($0, ($3 + [232]))
	$12 = *($14)
	$4 = *($13)
	if ( ((int_32)$4 != (int_32)$12) ){ goto $label$6 }
	
.LABEL $label$14
	CALL $38($0, ($3 + [224]))
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 != (int_32)*(($0 + [8]))) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL $107(($3 + [208]))
	
.LABEL $label$6
	*($4) = *($3 + [224])
	$4 = ($4 + [8])
	*(($0 + [4])) = $4
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$4 }
	
.LABEL $label$5
	*($4) = *($3 + [200])
	*(($0 + [4])) = ($4 + [8])
	goto $label$3 
	
.LABEL $label$4
	CALL $38($0, ($3 + [200]))
	
.LABEL $label$3
	$4 = *($2)
	$5 = *($4 + [8])
	$6 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$17 }
	$7 = (int_64)0
	goto $label$16 
	
.LABEL $label$17
	$7 = (Rounds 0)($6)
	
.LABEL $label$16
	*($3 + [192]) = $7
	$6 = *($4 + [40])
	$8 = *($4 + [32])
	$9 = *($4 + [24])
	$10 = *($4)
	$11 = *($4 + [16])
	*($3 + [168]) = (int_64)0
	*($3 + [176]) = [0]
	$6 = ((float_64)$5 + (float_64)((float_64)$5 * (float_64)((float_64)((float_64)((float_64)((float_64)((float_64)$10 / (float_64)(float_64))((float_64)1 - $10)) + (float_64)((float_64)$11 / (float_64)(float_64))((float_64)1 - $11))) + (float_64)((float_64)$9 / (float_64)(float_64))((float_64)1 - $9))) + (float_64)((float_64)$8 / (float_64)(float_64))((float_64)1 - $8))
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$6 + (float_64)((float_64)$6 / (float_64)(float_64))((float_64)1 - $6))))
	if ( (((float_64)$5)) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)) < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$19 }
	$7 = (int_64)0
	goto $label$18 
	
.LABEL $label$19
	$7 = (Rounds 0)($5)
	
.LABEL $label$18
	*($3 + [184]) = $7
	$4 = (*(($2 + [4])) - $4)
	if ( ($4 == 0) ){ goto $label$25 }
	$12 = int_32($4 >> [3])
	if ( ((uint_32)$12 >= (uint_32)[536870912]) ){ goto $label$24 }
	$4 = CALL _Znwj($4)
	*(($3 + [176])) = ($4 + ($12 << [3]))
	*($3 + [168]) = $4
	*($3 + [172]) = $4
	$13 = *($2)
	$12 = (*(($2 + [4])) - $13)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$25 }
	CALL memcpy($4, $13, $12)
	*($3 + [172]) = (*($3 + [172]) + $12)
	
.LABEL $label$25
	$5 = ((float_64)$6 + (float_64)CALL $43($3, [1], ($3 + [168])))
	$4 = *($3 + [168])
	if ( ($4 == 0) ){ goto $label$26 }
	*($3 + [172]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$26
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$28 }
	$7 = (int_64)0
	goto $label$27 
	
.LABEL $label$28
	$7 = (Rounds 0)($5)
	
.LABEL $label$27
	*($3 + [160]) = $7
	$14 = ($0 + [8])
	$12 = *($14)
	$13 = ($0 + [4])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$30 }
	*($4) = *($3 + [192])
	$4 = ($4 + [8])
	*($13) = $4
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$29 }
	goto $label$23 
	
.LABEL $label$30
	CALL $38($0, ($3 + [192]))
	$12 = *($14)
	$4 = *($13)
	if ( ((int_32)$4 != (int_32)$12) ){ goto $label$23 }
	
.LABEL $label$29
	CALL $38($0, ($3 + [184]))
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 != (int_32)*(($0 + [8]))) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	CALL $107(($3 + [168]))
	
.LABEL $label$23
	*($4) = *($3 + [184])
	$4 = ($4 + [8])
	*(($0 + [4])) = $4
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$21 }
	
.LABEL $label$22
	*($4) = *($3 + [160])
	*(($0 + [4])) = ($4 + [8])
	goto $label$20 
	
.LABEL $label$21
	CALL $38($0, ($3 + [160]))
	
.LABEL $label$20
	$4 = *($2)
	$5 = *($4 + [16])
	$6 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$32 }
	$7 = (int_64)0
	goto $label$31 
	
.LABEL $label$32
	$7 = (Rounds 0)($6)
	
.LABEL $label$31
	*($3 + [152]) = $7
	$6 = *($4 + [40])
	$8 = *($4 + [32])
	$9 = *($4 + [24])
	$10 = *($4)
	$11 = *($4 + [8])
	*($3 + [128]) = (int_64)0
	*($3 + [136]) = [0]
	$6 = ((float_64)$5 + (float_64)((float_64)$5 * (float_64)((float_64)((float_64)((float_64)((float_64)((float_64)$10 / (float_64)(float_64))((float_64)1 - $10)) + (float_64)((float_64)$11 / (float_64)(float_64))((float_64)1 - $11))) + (float_64)((float_64)$9 / (float_64)(float_64))((float_64)1 - $9))) + (float_64)((float_64)$8 / (float_64)(float_64))((float_64)1 - $8))
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$6 + (float_64)((float_64)$6 / (float_64)(float_64))((float_64)1 - $6))))
	if ( (((float_64)$5)) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)) < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$34 }
	$7 = (int_64)0
	goto $label$33 
	
.LABEL $label$34
	$7 = (Rounds 0)($5)
	
.LABEL $label$33
	*($3 + [144]) = $7
	$4 = (*(($2 + [4])) - $4)
	if ( ($4 == 0) ){ goto $label$40 }
	$12 = int_32($4 >> [3])
	if ( ((uint_32)$12 >= (uint_32)[536870912]) ){ goto $label$39 }
	$4 = CALL _Znwj($4)
	*(($3 + [136])) = ($4 + ($12 << [3]))
	*($3 + [128]) = $4
	*($3 + [132]) = $4
	$13 = *($2)
	$12 = (*(($2 + [4])) - $13)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$40 }
	CALL memcpy($4, $13, $12)
	*($3 + [132]) = (*($3 + [132]) + $12)
	
.LABEL $label$40
	$5 = ((float_64)$6 + (float_64)CALL $43($3, [2], ($3 + [128])))
	$4 = *($3 + [128])
	if ( ($4 == 0) ){ goto $label$41 }
	*($3 + [132]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$41
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$43 }
	$7 = (int_64)0
	goto $label$42 
	
.LABEL $label$43
	$7 = (Rounds 0)($5)
	
.LABEL $label$42
	*($3 + [120]) = $7
	$14 = ($0 + [8])
	$12 = *($14)
	$13 = ($0 + [4])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$45 }
	*($4) = *($3 + [152])
	$4 = ($4 + [8])
	*($13) = $4
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$44 }
	goto $label$38 
	
.LABEL $label$45
	CALL $38($0, ($3 + [152]))
	$12 = *($14)
	$4 = *($13)
	if ( ((int_32)$4 != (int_32)$12) ){ goto $label$38 }
	
.LABEL $label$44
	CALL $38($0, ($3 + [144]))
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 != (int_32)*(($0 + [8]))) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	CALL $107(($3 + [128]))
	
.LABEL $label$38
	*($4) = *($3 + [144])
	$4 = ($4 + [8])
	*(($0 + [4])) = $4
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$36 }
	
.LABEL $label$37
	*($4) = *($3 + [120])
	*(($0 + [4])) = ($4 + [8])
	goto $label$35 
	
.LABEL $label$36
	CALL $38($0, ($3 + [120]))
	
.LABEL $label$35
	$4 = *($2)
	$5 = *($4 + [24])
	$6 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$47 }
	$7 = (int_64)0
	goto $label$46 
	
.LABEL $label$47
	$7 = (Rounds 0)($6)
	
.LABEL $label$46
	*($3 + [112]) = $7
	$6 = *($4 + [40])
	$8 = *($4 + [32])
	$9 = *($4 + [16])
	$10 = *($4)
	$11 = *($4 + [8])
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = [0]
	$6 = ((float_64)$5 + (float_64)((float_64)$5 * (float_64)((float_64)((float_64)((float_64)((float_64)((float_64)$10 / (float_64)(float_64))((float_64)1 - $10)) + (float_64)((float_64)$11 / (float_64)(float_64))((float_64)1 - $11))) + (float_64)((float_64)$9 / (float_64)(float_64))((float_64)1 - $9))) + (float_64)((float_64)$8 / (float_64)(float_64))((float_64)1 - $8))
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$6 + (float_64)((float_64)$6 / (float_64)(float_64))((float_64)1 - $6))))
	if ( (((float_64)$5)) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)) < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$49 }
	$7 = (int_64)0
	goto $label$48 
	
.LABEL $label$49
	$7 = (Rounds 0)($5)
	
.LABEL $label$48
	*($3 + [104]) = $7
	$4 = (*(($2 + [4])) - $4)
	if ( ($4 == 0) ){ goto $label$55 }
	$12 = int_32($4 >> [3])
	if ( ((uint_32)$12 >= (uint_32)[536870912]) ){ goto $label$54 }
	$4 = CALL _Znwj($4)
	*(($3 + [96])) = ($4 + ($12 << [3]))
	*($3 + [88]) = $4
	*($3 + [92]) = $4
	$13 = *($2)
	$12 = (*(($2 + [4])) - $13)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$55 }
	CALL memcpy($4, $13, $12)
	*($3 + [92]) = (*($3 + [92]) + $12)
	
.LABEL $label$55
	$5 = ((float_64)$6 + (float_64)CALL $43($3, [3], ($3 + [88])))
	$4 = *($3 + [88])
	if ( ($4 == 0) ){ goto $label$56 }
	*($3 + [92]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$56
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$58 }
	$7 = (int_64)0
	goto $label$57 
	
.LABEL $label$58
	$7 = (Rounds 0)($5)
	
.LABEL $label$57
	*($3 + [80]) = $7
	$14 = ($0 + [8])
	$12 = *($14)
	$13 = ($0 + [4])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$60 }
	*($4) = *($3 + [112])
	$4 = ($4 + [8])
	*($13) = $4
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$59 }
	goto $label$53 
	
.LABEL $label$60
	CALL $38($0, ($3 + [112]))
	$12 = *($14)
	$4 = *($13)
	if ( ((int_32)$4 != (int_32)$12) ){ goto $label$53 }
	
.LABEL $label$59
	CALL $38($0, ($3 + [104]))
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 != (int_32)*(($0 + [8]))) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	CALL $107(($3 + [88]))
	
.LABEL $label$53
	*($4) = *($3 + [104])
	$4 = ($4 + [8])
	*(($0 + [4])) = $4
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$51 }
	
.LABEL $label$52
	*($4) = *($3 + [80])
	*(($0 + [4])) = ($4 + [8])
	goto $label$50 
	
.LABEL $label$51
	CALL $38($0, ($3 + [80]))
	
.LABEL $label$50
	$4 = *($2)
	$5 = *($4 + [32])
	$6 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$62 }
	$7 = (int_64)0
	goto $label$61 
	
.LABEL $label$62
	$7 = (Rounds 0)($6)
	
.LABEL $label$61
	*($3 + [72]) = $7
	$6 = *($4 + [40])
	$8 = *($4 + [24])
	$9 = *($4 + [16])
	$10 = *($4)
	$11 = *($4 + [8])
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = [0]
	$6 = ((float_64)$5 + (float_64)((float_64)$5 * (float_64)((float_64)((float_64)((float_64)((float_64)((float_64)$10 / (float_64)(float_64))((float_64)1 - $10)) + (float_64)((float_64)$11 / (float_64)(float_64))((float_64)1 - $11))) + (float_64)((float_64)$9 / (float_64)(float_64))((float_64)1 - $9))) + (float_64)((float_64)$8 / (float_64)(float_64))((float_64)1 - $8))
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$6 + (float_64)((float_64)$6 / (float_64)(float_64))((float_64)1 - $6))))
	if ( (((float_64)$5)) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)) < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$64 }
	$7 = (int_64)0
	goto $label$63 
	
.LABEL $label$64
	$7 = (Rounds 0)($5)
	
.LABEL $label$63
	*($3 + [64]) = $7
	$4 = (*(($2 + [4])) - $4)
	if ( ($4 == 0) ){ goto $label$70 }
	$12 = int_32($4 >> [3])
	if ( ((uint_32)$12 >= (uint_32)[536870912]) ){ goto $label$69 }
	$4 = CALL _Znwj($4)
	*(($3 + [56])) = ($4 + ($12 << [3]))
	*($3 + [48]) = $4
	*($3 + [52]) = $4
	$13 = *($2)
	$12 = (*(($2 + [4])) - $13)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$70 }
	CALL memcpy($4, $13, $12)
	*($3 + [52]) = (*($3 + [52]) + $12)
	
.LABEL $label$70
	$5 = ((float_64)$6 + (float_64)CALL $43($3, [4], ($3 + [48])))
	$4 = *($3 + [48])
	if ( ($4 == 0) ){ goto $label$71 }
	*($3 + [52]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$71
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$73 }
	$7 = (int_64)0
	goto $label$72 
	
.LABEL $label$73
	$7 = (Rounds 0)($5)
	
.LABEL $label$72
	*($3 + [40]) = $7
	$14 = ($0 + [8])
	$12 = *($14)
	$13 = ($0 + [4])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$75 }
	*($4) = *($3 + [72])
	$4 = ($4 + [8])
	*($13) = $4
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$74 }
	goto $label$68 
	
.LABEL $label$75
	CALL $38($0, ($3 + [72]))
	$12 = *($14)
	$4 = *($13)
	if ( ((int_32)$4 != (int_32)$12) ){ goto $label$68 }
	
.LABEL $label$74
	CALL $38($0, ($3 + [64]))
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 != (int_32)*(($0 + [8]))) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	CALL $107(($3 + [48]))
	
.LABEL $label$68
	*($4) = *($3 + [64])
	$4 = ($4 + [8])
	*(($0 + [4])) = $4
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$66 }
	
.LABEL $label$67
	*($4) = *($3 + [40])
	*(($0 + [4])) = ($4 + [8])
	goto $label$65 
	
.LABEL $label$66
	CALL $38($0, ($3 + [40]))
	
.LABEL $label$65
	$4 = *($2)
	$5 = *($4 + [40])
	$6 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$77 }
	$7 = (int_64)0
	goto $label$76 
	
.LABEL $label$77
	$7 = (Rounds 0)($6)
	
.LABEL $label$76
	*($3 + [32]) = $7
	$6 = *($4 + [32])
	$8 = *($4 + [24])
	$9 = *($4 + [16])
	$10 = *($4)
	$11 = *($4 + [8])
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = [0]
	$6 = ((float_64)$5 + (float_64)((float_64)$5 * (float_64)((float_64)((float_64)((float_64)((float_64)((float_64)$10 / (float_64)(float_64))((float_64)1 - $10)) + (float_64)((float_64)$11 / (float_64)(float_64))((float_64)1 - $11))) + (float_64)((float_64)$9 / (float_64)(float_64))((float_64)1 - $9))) + (float_64)((float_64)$8 / (float_64)(float_64))((float_64)1 - $8))
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$6 + (float_64)((float_64)$6 / (float_64)(float_64))((float_64)1 - $6))))
	if ( (((float_64)$5)) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)) < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$79 }
	$7 = (int_64)0
	goto $label$78 
	
.LABEL $label$79
	$7 = (Rounds 0)($5)
	
.LABEL $label$78
	*($3 + [24]) = $7
	$4 = (*(($2 + [4])) - $4)
	if ( ($4 == 0) ){ goto $label$84 }
	$12 = int_32($4 >> [3])
	if ( ((uint_32)$12 >= (uint_32)[536870912]) ){ goto $label$83 }
	$4 = CALL _Znwj($4)
	*(($3 + [16])) = ($4 + ($12 << [3]))
	*($3 + [8]) = $4
	*($3 + [12]) = $4
	$12 = *($2)
	$2 = (*(($2 + [4])) - $12)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$84 }
	CALL memcpy($4, $12, $2)
	*($3 + [12]) = (*($3 + [12]) + $2)
	
.LABEL $label$84
	$5 = ((float_64)$6 + (float_64)CALL $43($3, [5], ($3 + [8])))
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$85 }
	*($3 + [12]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$85
	$5 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)$5) * (float_64)(float_64)9400) / (float_64)(float_64)1e4)
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$87 }
	$7 = (int_64)0
	goto $label$86 
	
.LABEL $label$87
	$7 = (Rounds 0)($5)
	
.LABEL $label$86
	*($3) = $7
	$13 = ($0 + [8])
	$4 = *($13)
	$12 = ($0 + [4])
	$2 = *($12)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$89 }
	*($2) = *($3 + [32])
	$2 = ($2 + [8])
	*($12) = $2
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$88 }
	goto $label$82 
	
.LABEL $label$89
	CALL $38($0, ($3 + [32]))
	$4 = *($13)
	$2 = *($12)
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$82 }
	
.LABEL $label$88
	CALL $38($0, ($3 + [24]))
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 != (int_32)*(($0 + [8]))) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$83
	CALL $107(($3 + [8]))
	
.LABEL $label$82
	*($2) = *($3 + [24])
	$2 = ($2 + [8])
	*(($0 + [4])) = $2
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$80 }
	
.LABEL $label$81
	*($2) = *($3)
	*(($0 + [4])) = ($2 + [8])
	$global$0 = ($3 + [240])
	return 
	
.LABEL $label$80
	CALL $38($0, $3)
	$global$0 = ($3 + [240])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	float_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ((float_64)*(*($2)) * (float_64)(float_64)1e4)
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$5 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($4)
	
.LABEL $label$1
	*($3 + [8]) = $5
	CALL $38($0, ($3 + [8]))
	$6 = *($2)
	$4 = ((float_64)((float_64)*($6 + [8]) * (float_64)(float_64)1e4) + (float_64)(CASTING float_64)(uint_64 *($3 + [8])))
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$5 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$5 = (Rounds 0)($4)
	
.LABEL $label$3
	*($3 + [8]) = $5
	$8 = *($0 + [8])
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	*($7) = $5
	$7 = ($7 + [8])
	*(($0 + [4])) = $7
	goto $label$5 
	
.LABEL $label$6
	CALL $38($0, ($3 + [8]))
	$8 = *(($0 + [8]))
	$7 = *(($0 + [4]))
	$6 = *($2)
	
.LABEL $label$5
	$4 = ((float_64)((float_64)*($6 + [16]) * (float_64)(float_64)1e4) + (float_64)(CASTING float_64)(uint_64 *($3 + [8])))
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$10 }
	$5 = (int_64)0
	*($3 + [8]) = (int_64)0
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = (Rounds 0)($4)
	*($3 + [8]) = $5
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $38($0, ($3 + [8]))
	$8 = *(($0 + [8]))
	$7 = *(($0 + [4]))
	$6 = *($2)
	goto $label$7 
	
.LABEL $label$8
	*($7) = $5
	$7 = ($7 + [8])
	*(($0 + [4])) = $7
	
.LABEL $label$7
	$4 = ((float_64)((float_64)*($6 + [24]) * (float_64)(float_64)1e4) + (float_64)(CASTING float_64)(uint_64 *($3 + [8])))
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$14 }
	$5 = (int_64)0
	*($3 + [8]) = (int_64)0
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$5 = (Rounds 0)($4)
	*($3 + [8]) = $5
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $38($0, ($3 + [8]))
	$8 = *(($0 + [8]))
	$7 = *(($0 + [4]))
	$6 = *($2)
	goto $label$11 
	
.LABEL $label$12
	*($7) = $5
	$7 = ($7 + [8])
	*(($0 + [4])) = $7
	
.LABEL $label$11
	$4 = ((float_64)((float_64)*($6 + [32]) * (float_64)(float_64)1e4) + (float_64)(CASTING float_64)(uint_64 *($3 + [8])))
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$19 }
	$5 = (int_64)0
	*($3 + [8]) = (int_64)0
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$5 = (Rounds 0)($4)
	*($3 + [8]) = $5
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$17 }
	
.LABEL $label$18
	CALL $38($0, ($3 + [8]))
	$8 = *(($0 + [8]))
	$6 = *(($0 + [4]))
	$5 = (int_64)10000
	*($3) = (int_64)10000
	if ( ($6 <= $8) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	*($7) = $5
	$6 = ($7 + [8])
	*(($0 + [4])) = $6
	$5 = (int_64)10000
	*($3) = (int_64)10000
	if ( ((uint_32)$6 >= (uint_32)$8) ){ goto $label$15 }
	
.LABEL $label$16
	*($6) = $5
	*(($0 + [4])) = ($6 + [8])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	CALL $41($0, $3)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18230])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $124($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*($3 + [8]) = $0
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)4602678819172646912
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)4602678819172646912
	*($5 + [64]) = $0
	CALL $83(($3 + [8]), $5)
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [8]) = $6
	$7 = *($5 + [68])
	*($3 + [4]) = $7
	$8 = ($0 + [28])
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($1 + [8]) = $6
	*($1 + [16]) = $7
	*($3 + [24]) = [0]
	*($1) = $5
	*($8) = ($1 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $84(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [60]) = [5]
	*($2 + [56]) = [18057]
	*($2 + [8]) = *($2 + [56])
	$3 = *(CALL $27(($2 + [16]), ($2 + [8])))
	*($2 + [60]) = [5]
	*($2 + [56]) = [18057]
	*($2) = *($2 + [56])
	CALL $27(($2 + [16]), $2)
	*(($2 + [48])) = [0]
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)-1
	*($2 + [24]) = (int_64)6138663577826885632
	*($2 + [40]) = (int_64)0
	$4 = CALL $47(($2 + [16]), CALL $fimport$1($3, (int_64)6138663577826885632, (int_64)-5069606918720847872, (int_64)0))
	$3 = ((uint_64)((int_64)*($4 + [40]) * (int_64)1024000000000000) / (uint_64)*($4 + [16]))
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [44])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	CALL _ZdlPv($7)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($2 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$1
	*($0 + [8]) = (int_64)0
	*($0) = $3
	$global$0 = ($2 + [64])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $95(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *([0] + [8192])
	$4 = ((int_32)(*([0] + [8196]) - $3) / (int_32)[12])
	$5 = (CASTING uint_64)(uint_32 $4)
	$8 = ((uint_32)*($2 + [12]) % (uint_32)$4)
	$6 = *($2 + [13])
	$7 = ((uint_32)$6 % (uint_32)$4)
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$1 }
	$9 = ((int_64)(CASTING uint_64)(uint_32 $6) + (int_64)1)
	
.LOOP $label$2:
	$10 = ((uint_64)$9 % (uint_64)$5)
	$9 = ((int_64)$9 + (int_64)1)
	$7 = ((CASTING uint_32)(uint_64 $10) & [65535])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = *($2 + [14])
	
.LOOP $label$3:
	$10 = ((uint_64)$9 % (uint_64)$5)
	$11 = ((int_64)$9 + (int_64)1)
	$9 = $11
	$4 = ((CASTING uint_32)(uint_64 $10) & [65535])
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	$9 = $11
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$3 }
	$9 = *($2 + [15])
	
.LOOP $label$4:
	$10 = ((uint_64)$9 % (uint_64)$5)
	$11 = ((int_64)$9 + (int_64)1)
	$9 = $11
	$6 = ((CASTING uint_32)(uint_64 $10) & [65535])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$9 = $11
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$4 }
	$9 = $11
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	$9 = *($2 + [16])
	
.LOOP $label$5:
	$10 = ((uint_64)$9 % (uint_64)$5)
	$11 = ((int_64)$9 + (int_64)1)
	$9 = $11
	$12 = ((CASTING uint_32)(uint_64 $10) & [65535])
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$5 }
	$9 = $11
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$5 }
	$9 = $11
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$5 }
	$9 = $11
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$5 }
	$9 = *($2 + [17])
	
.LOOP $label$6:
	$11 = ((uint_64)$9 % (uint_64)$5)
	$10 = ((int_64)$9 + (int_64)1)
	$9 = $10
	$2 = ((CASTING uint_32)(uint_64 $11) & [65535])
	if ( ((int_32)$2 == (int_32)$12) ){ goto $label$6 }
	$9 = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$6 }
	$9 = $10
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$9 = $10
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$6 }
	$9 = $10
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	CALL $45($0, ($3 + ((int_32)$8 * (int_32)[12])))
	$7 = (*([0] + [8192]) + ((int_32)$7 * (int_32)[12]))
	$8 = ($0 + [4])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $95($3, $7)
	$7 = (*($8) + [12])
	*($8) = $7
	goto $label$7 
	
.LABEL $label$8
	CALL $45($0, $7)
	$7 = *($8)
	
.LABEL $label$7
	$4 = (*([0] + [8192]) + ((int_32)$4 * (int_32)[12]))
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$10 }
	CALL $95($7, $4)
	$4 = (*($4) + [12])
	*(($4 = ($0 + [4]))) = $4
	goto $label$9 
	
.LABEL $label$10
	CALL $45($0, $4)
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	$6 = (*([0] + [8192]) + ((int_32)$6 * (int_32)[12]))
	if ( ((int_32)$4 == (int_32)*(($0 + [8]))) ){ goto $label$12 }
	CALL $95($4, $6)
	$4 = (*($4) + [12])
	*(($4 = ($0 + [4]))) = $4
	goto $label$11 
	
.LABEL $label$12
	CALL $45($0, $6)
	$4 = *(($0 + [4]))
	
.LABEL $label$11
	$6 = (*([0] + [8192]) + ((int_32)$12 * (int_32)[12]))
	if ( ((int_32)$4 == (int_32)*(($0 + [8]))) ){ goto $label$14 }
	CALL $95($4, $6)
	$4 = (*($4) + [12])
	*(($4 = ($0 + [4]))) = $4
	goto $label$13 
	
.LABEL $label$14
	CALL $45($0, $6)
	$4 = *(($0 + [4]))
	
.LABEL $label$13
	$6 = (*([0] + [8192]) + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)$4 == (int_32)*(($0 + [8]))) ){ goto $label$15 }
	CALL $95($4, $6)
	*(($4 = ($0 + [4]))) = (*($4) + [12])
	return 
	
.LABEL $label$15
	CALL $45($0, $6)
}

int_32 .FUNC $124 (int_32 $0)
{
	return CALL $125([8500], $0)
}

void .FUNC $128 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16884])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16692]
	$3 = (((int_32)$1 * (int_32)[12]) + [16692])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($1 + [96])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($1 + [100])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$3 = *($1 + [40])
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = ($1 + [44])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$7
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($1 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $3
	
.LABEL $label$4
	*($4) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$2 = *($1 + [28])
	if ( ($2 == 0) ){ goto $label$8 }
	*(($1 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$9 }
	*(($1 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	CALL _ZdlPv($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $3(($2 + [8]), $5)
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [17402])
	$6 = *($0)
	CALL eosio_assert($5, [18656])
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)($2 + [8])), [18691])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$3()), [18737])
	*($4 + [24 align=1]) = *($1)
	*(($4 + [32])) = *(($1 + [8]))
	*(($4 + [40])) = *(($1 + [16]))
	*(($4 + [48])) = *(($1 + [24]))
	*(($4 + [56])) = *(($1 + [32]))
	$3 = *($4)
	CALL eosio_assert([1], [18788])
	*($2 + [152]) = (($2 + [48]) + [91])
	*($2 + [148]) = ($2 + [48])
	*($2 + [144]) = ($2 + [48])
	CALL $10(($2 + [144]), $4)
	CALL db_update_i64(*($4 + [100]), $6, ($2 + [48]), [91])
	$4 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = ($2 + [36])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $0
	
.LABEL $label$4
	*($5) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($2 + [160])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [160])
	$global$0 = $2
	*($1) = (int_64)1
	$3 = *($0)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*((($4 = $2) + [48])) = *([0] + [18504])
	*(($4 + [40])) = *([0] + [18496])
	*(($4 + [32])) = *([0] + [18488])
	*((($4 + [8]) + [16])) = *([0] + [18480])
	*(($5 = ($4 + [16]))) = *([0] + [18472])
	*($4 + [8]) = *([0] + [18464])
	CALL $61(($1 + [16]), ($4 + [8]), ($4 + [56]))
	CALL memcpy(($4 + [8]), [18512], [144])
	CALL $61(($1 + [28]), ($4 + [8]), (($4 + [8]) + [144]))
	*($5) = [0]
	*($4 + [8]) = (int_64)0
	$5 = CALL $119([16896])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($4 + [8]) = ($5 << [1])
	$6 = (($4 + [8]) | [1])
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [8]) = ($7 | [1])
	*($4 + [16]) = $6
	*($4 + [12]) = $5
	
.LABEL $label$8
	CALL memcpy($6, [16896], $5)
	
.LABEL $label$7
	*(($6 + $5)) = [0]
	*(($4 + [28])) = [0]
	*($4 + [20 align=4]) = (int_64)0
	$6 = ($4 + [20])
	$5 = CALL $119([16910])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$12 }
	*(($4 + [20])) = ($5 << [1])
	$6 = ($6 + [1])
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*(($4 + [28])) = $6
	*((($4 + [8]) + [16])) = $5
	*($4 + [20]) = ($7 | [1])
	
.LABEL $label$11
	CALL memcpy($6, [16910], $5)
	
.LABEL $label$10
	*(($6 + $5)) = [0]
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$6 = ($4 + [32])
	$5 = CALL $119([17006])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$15 }
	*(($4 + [32])) = ($5 << [1])
	$6 = ($6 + [1])
	if ( $5 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*(($4 + [40])) = $6
	*(($4 + [36])) = $5
	*($4 + [32]) = ($7 | [1])
	
.LABEL $label$14
	CALL memcpy($6, [17006], $5)
	
.LABEL $label$13
	*(($6 + $5)) = [0]
	*(($4 + [52])) = [0]
	*($4 + [44 align=4]) = (int_64)0
	$6 = ($4 + [44])
	$5 = CALL $119([17013])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$18 }
	*(($4 + [44])) = ($5 << [1])
	$6 = ($6 + [1])
	if ( $5 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*(($4 + [52])) = $6
	*(($4 + [48])) = $5
	*($4 + [44]) = ($7 | [1])
	
.LABEL $label$17
	CALL memcpy($6, [17013], $5)
	
.LABEL $label$16
	*(($6 + $5)) = [0]
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	$6 = ($4 + [56])
	$5 = CALL $119([17021])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$21 }
	*(($4 + [56])) = ($5 << [1])
	$6 = ($6 + [1])
	if ( $5 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*(($4 + [64])) = $6
	*(($4 + [60])) = $5
	*($4 + [56]) = ($7 | [1])
	
.LABEL $label$20
	CALL memcpy($6, [17021], $5)
	
.LABEL $label$19
	*(($6 + $5)) = [0]
	*(($4 + [76])) = [0]
	*($4 + [68 align=4]) = (int_64)0
	$6 = ($4 + [68])
	$5 = CALL $119([17028])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$24 }
	*(($4 + [68])) = ($5 << [1])
	$6 = ($6 + [1])
	if ( $5 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*(($4 + [76])) = $6
	*(($4 + [72])) = $5
	*($4 + [68]) = ($7 | [1])
	
.LABEL $label$23
	CALL memcpy($6, [17028], $5)
	
.LABEL $label$22
	*(($6 + $5)) = [0]
	CALL $62(($1 + [40]), ($4 + [8]), ($4 + [80]))
	if ( ((*(($4 + [68])) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($4 + [76])))
	
.LABEL $label$25
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$26
	if ( ((*(($4 + [44])) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($4 + [52])))
	
.LABEL $label$27
	if ( ((*(($4 + [32])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$28
	if ( ((*(($4 + [20])) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$29
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($4 + [16]))
	
.LABEL $label$30
	CALL eosio_assert([1], [17898])
	$8 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$8 = $9
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$8 = $9
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$35 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$6 = [0]
	
.LABEL $label$31
	CALL eosio_assert($6, [17947])
	*(($1 + [64])) = (int_64)1397703940
	*($1 + [56]) = (int_64)0
	*($4 + [8]) = [0]
	CALL $63(($4 + [8]), $1)
	$6 = *($4 + [8])
	if ( ($6 <= [513]) ){ goto $label$37 }
	$5 = CALL $124($6)
	goto $label$36 
	
.LABEL $label$37
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$36
	*($4 + [12]) = $5
	*($4 + [8]) = $5
	*($4 + [16]) = ($5 + $6)
	CALL $64(($4 + [8]), $1)
	$8 = *($1)
	*($1 + [284]) = CALL db_store_i64(*($3 + [8]), (int_64)-4812882902415048704, *(*($0 + [8])), $8, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$38 }
	CALL $128($5)
	
.LABEL $label$38
	if ( (uint_64)($8 <= *($3 + [16])) ){ goto $label$39 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$39
	$8 = *(($3 + [8]))
	$9 = *(*(($0 + [8])))
	$10 = *($1)
	*($4 + [152]) = *($1 + [272])
	*($1 + [288]) = CALL db_idx64_store($8, (int_64)-4812882902415048704, $9, $10, ($4 + [152]))
	$global$0 = ($4 + [160])
	return (unreachable)
	
.LABEL $label$6
	CALL $94(($4 + [8]))
	
.LABEL $label$5
	CALL $94($6)
	
.LABEL $label$4
	CALL $94($6)
	
.LABEL $label$3
	CALL $94($6)
	
.LABEL $label$2
	CALL $94($6)
	
.LABEL $label$1
	CALL $94($6)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$2 = *($4)
	*($4) = [0]
	*($1) = $2
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	$1 = ($3 + [-24])
	
.LOOP $label$9:
	$7 = CALL $8($1)
	$1 = ($1 + [-24])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $3($6, $8)
	*($3 + [4]) = [0]
	*($3) = $6
	$7 = *(*(CALL $60($3) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18309])
	$7 = *(($6 + [16]))
	*($1 + [8]) = (int_64)1
	*($1) = $7
	*($1 + [16]) = (int_64)1
	*($1 + [58]) = [0]
	$6 = *($5 + [4])
	*($1 + [24 align=1]) = *($6)
	*(($1 + [56])) = *(($6 + [32]))
	*(($1 + [48])) = *(($6 + [24]))
	*(($1 + [40])) = *(($6 + [16]))
	*(($1 + [32])) = *(($6 + [8]))
	CALL eosio_assert([1], [17898])
	$7 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$7 = $9
	$5 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$7 = $9
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $5 ){ goto $label$7 }
	$5 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [17947])
	*(($1 + [72])) = (int_64)1397703940
	*($1 + [64]) = (int_64)1000
	CALL eosio_assert([1], [17898])
	$7 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$7 = $9
	$5 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$7 = $9
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $5 ){ goto $label$12 }
	$5 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [17947])
	*(($1 + [88])) = (int_64)1397703940
	*($1 + [80]) = (int_64)1000000
	$5 = $2
	$6 = ($5 + [-96])
	$global$0 = $6
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($5 + [-5])
	CALL $10($3, $1)
	$7 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159551873908736, *(*($0 + [8])), $7, $6, [91])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$13 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$global$0 = ($3 + [16])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($4 = ($2 + [80]))) = [0]
	*($2 + [64]) = (int_64)-1
	$5 = *($0)
	*($2 + [48]) = $5
	*($2 + [56]) = $5
	*($2 + [72]) = (int_64)0
	$6 = CALL db_lowerbound_i64($5, $5, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $3(($2 + [48]), $6)
	
.LABEL $label$1
	CALL eosio_assert(($3 == 0), [17377])
	$5 = *($0)
	*($2 + [124]) = $1
	*($2 + [120]) = ($2 + [48])
	*($2 + [96]) = $5
	CALL eosio_assert(((int_64)*($2 + [48]) == (int_64)CALL $fimport$3()), [18258])
	*($2 + [12]) = ($2 + [120])
	*($2 + [8]) = ($2 + [48])
	*($2 + [16]) = ($2 + [96])
	*(($3 = CALL _Znwj([112])) + [72]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = ($2 + [48])
	CALL $4(($2 + [8]), $3)
	*($2 + [112]) = $3
	$5 = *($3)
	*($2 + [8]) = $5
	$6 = *($3 + [100])
	*($2 + [92]) = $6
	$7 = ($2 + [76])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*($4)) ){ goto $label$4 }
	*($1 + [8]) = $5
	*($1 + [16]) = $6
	*($2 + [112]) = [0]
	*($1) = $3
	*($7) = ($1 + [24])
	$3 = *($2 + [112])
	$1 = [0]
	*($2 + [112]) = [0]
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $5(($2 + [72]), ($2 + [112]), ($2 + [8]), ($2 + [92]))
	$3 = *($2 + [112])
	$1 = [0]
	*($2 + [112]) = [0]
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	*(($4 = ($2 + [40]))) = $1
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = $1
	$5 = *($0)
	*($2 + [8]) = $5
	*($2 + [16]) = $5
	*($2 + [120]) = $5
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [18258])
	*($2 + [100]) = $2
	*($2 + [96]) = ($2 + [8])
	*($2 + [104]) = ($2 + [120])
	*(($3 = CALL _Znwj([304])) + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = $1
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [96 align=4]) = (int_64)0
	*($3 + [104]) = $1
	*($3 + [112]) = (int_64)0
	*($3 + [120]) = (int_64)0
	*($3 + [160]) = $1
	*($3 + [280]) = ($2 + [8])
	CALL $6(($2 + [96]), $3)
	*($2 + [112]) = $3
	$5 = *($3)
	*($2 + [96]) = $5
	$0 = *($3 + [284])
	*($2 + [92]) = $0
	$6 = ($2 + [36])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*($4)) ){ goto $label$7 }
	*($1 + [8]) = $5
	*($1 + [16]) = $0
	*($2 + [112]) = [0]
	*($1) = $3
	*($6) = ($1 + [24])
	$4 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL $7(($2 + [32]), ($2 + [112]), ($2 + [96]), ($2 + [92]))
	$4 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = *($4 + [96])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($4 + [100])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$0 = *($4 + [40])
	if ( ($0 == 0) ){ goto $label$9 }
	$6 = ($4 + [44])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$3 = ($1 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$13
	$1 = $3
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$12 }
	$3 = *(($4 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$3 = $0
	
.LABEL $label$10
	*($6) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$3 = *($4 + [28])
	if ( ($3 == 0) ){ goto $label$14 }
	*(($4 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$14
	$3 = *($4 + [16])
	if ( ($3 == 0) ){ goto $label$15 }
	*(($4 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$15
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$16 }
	$4 = ($2 + [36])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$18 }
	$3 = ($3 + [-24])
	
.LOOP $label$19:
	$1 = CALL $8($3)
	$3 = ($3 + [-24])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$19 }
	$3 = *(($2 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $0
	
.LABEL $label$17
	*($4) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$0 = *($2 + [72])
	if ( ($0 == 0) ){ goto $label$20 }
	$4 = ($2 + [76])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$22 }
	
.LOOP $label$23:
	$3 = ($3 + [-24])
	$1 = *($3)
	*($3) = [0]
	if ( ($1 == 0) ){ goto $label$24 }
	CALL _ZdlPv($1)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$23 }
	$3 = *(($2 + [72]))
	goto $label$21 
	
.LABEL $label$22
	$3 = $0
	
.LABEL $label$21
	*($4) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$global$0 = ($2 + [128])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18230])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $124($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [72]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = $0
	CALL $59(($3 + [32]), $5)
	*($5 + [100]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $5(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC memory ()
{
	CALL $85()
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *([0] + [8192])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *([0] + [8196])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($2 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$5
	$2 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *([0] + [8192])
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*([0] + [8196]) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	*(($5 = CALL _Znwj([6]))) = [67305985]
	*($5 + [4 align=1]) = [1541]
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($4 + [16]) = $5
	$5 = ($5 + [6])
	*($4 + [24]) = $5
	*($4 + [20]) = $5
	*($4 + [15]) = CALL $23($4, ($4 + [16]), $2, ((int_64)((int_64)((int_64)*($3 + [30]) << (int_64)8) | (int_64)((int_64)*($3 + [29]) << (int_64)16)) | (int_64)*($3 + [31])))
	CALL $24($0, ($4 + [15]))
	$5 = CALL $23($4, ($4 + [16]), $2, ((int_64)((int_64)((int_64)*($3 + [27]) << (int_64)8) | (int_64)((int_64)*($3 + [26]) << (int_64)16)) | (int_64)*($3 + [28])))
	*($4 + [15]) = $5
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)*($0 + [8])) ){ goto $label$2 }
	*($6) = $5
	*(($5 = ($0 + [4]))) = (*($5) + [1])
	goto $label$1 
	
.LABEL $label$2
	CALL $24($0, ($4 + [15]))
	
.LABEL $label$1
	$6 = CALL $23($4, ($4 + [16]), $2, ((int_64)((int_64)((int_64)*($3 + [24]) << (int_64)8) | (int_64)((int_64)*($3 + [23]) << (int_64)16)) | (int_64)*($3 + [25])))
	*($4 + [15]) = $6
	$5 = ($0 + [4])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$4 }
	*($7) = $6
	*($5) = (*($5) + [1])
	goto $label$3 
	
.LABEL $label$4
	CALL $24($0, ($4 + [15]))
	
.LABEL $label$3
	$6 = CALL $23($4, ($4 + [16]), $2, ((int_64)((int_64)((int_64)*($3 + [21]) << (int_64)8) | (int_64)((int_64)*($3 + [20]) << (int_64)16)) | (int_64)*($3 + [22])))
	*($4 + [15]) = $6
	$5 = ($0 + [4])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$6 }
	*($7) = $6
	*($5) = (*($5) + [1])
	goto $label$5 
	
.LABEL $label$6
	CALL $24($0, ($4 + [15]))
	
.LABEL $label$5
	$2 = CALL $23($4, ($4 + [16]), $2, ((int_64)((int_64)((int_64)*($3 + [18]) << (int_64)8) | (int_64)((int_64)*($3 + [17]) << (int_64)16)) | (int_64)*($3 + [19])))
	*($4 + [15]) = $2
	$3 = ($0 + [4])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	*($5) = $2
	$2 = (*($3) + [1])
	*($3) = $2
	goto $label$7 
	
.LABEL $label$8
	CALL $24($0, ($4 + [15]))
	$2 = *($3)
	
.LABEL $label$7
	$3 = *($4 + [16])
	if ( ((int_32)$2 == (int_32)*(($0 + [8]))) ){ goto $label$10 }
	*($2) = *($3)
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	goto $label$9 
	
.LABEL $label$10
	CALL $24($0, $3)
	
.LABEL $label$9
	*($4 + [20]) = $3
	CALL _ZdlPv($3)
	$global$0 = ($4 + [32])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	$4 = ($global$0 - [256])
	$global$0 = $4
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)1397703940
	*($4 + [216]) = $2
	CALL eosio_assert([1], [17898])
	$2 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [17947])
	*(($4 + [208])) = [0]
	*($4 + [192]) = (int_64)-1
	*($4 + [200]) = (int_64)0
	*($4 + [212]) = [0]
	$2 = *($1)
	*($4 + [176]) = $2
	*($4 + [184]) = $2
	*($4 + [168]) = ($4 + [176])
	CALL $19(($4 + [40]), ($4 + [168]), ($4 + [216]))
	$5 = *($4 + [44])
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((int_64)*($4 + [216]) != (int_64)*($5 + [8])) ){ goto $label$9 }
	$2 = *($4 + [40])
	*($4 + [160]) = $2
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( ($5) == 0) ){ goto $label$8 }
	$9 = ($4 + [116])
	$10 = (($4 + [40]) + [32])
	$11 = (($4 + [40]) + [16])
	$12 = (($4 + [24]) | [1])
	$13 = (($4 + [144]) + [8])
	$14 = ($4 + [108])
	$15 = ($4 + [80])
	$16 = ($3 + [4])
	
.LOOP $label$10:
	if ( ((int_64)*($5 + [8]) != (int_64)*($4 + [216])) ){ goto $label$8 }
	*($13) = (int_64)1397703940
	*($4 + [144]) = (int_64)0
	CALL eosio_assert([1], [17898])
	$2 = (uint_64)*($13) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [17947])
	$5 = *($4 + [164])
	if ( ((int_32)*(($5 + [36])) == (int_32)*($5 + [32])) ){ goto $label$16 }
	$7 = [0]
	$8 = [0]
	
.LOOP $label$17:
	*(($17 = (($4 + [128]) + [8]))) = [0]
	*($4 + [128]) = (int_64)0
	$2 = *((*($5 + [32]) + ($7 << [3])))
	$6 = *($4 + [216])
	$5 = (*($16) - *($3))
	if ( ($5 == 0) ){ goto $label$18 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$7 }
	$7 = CALL _Znwj($5)
	*($17) = ($7 + $5)
	*($4 + [128]) = $7
	*($4 + [132]) = $7
	$17 = *($3)
	$5 = (*($16) - $17)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($7, $17, $5)
	*($4 + [132]) = (*($4 + [132]) + $5)
	
.LABEL $label$18
	CALL $25(($4 + [40]), $1, $6, $2, ($4 + [128]))
	CALL eosio_assert(((int_64)*((($4 + [40]) + [8])) == (int_64)*($13)), [17973])
	$2 = ((int_64)*($4 + [144]) + (int_64)*($4 + [40]))
	*($4 + [144]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [18016])
	CALL eosio_assert(((int_64)*($4 + [144]) < (int_64)4611686018427387904), [18035])
	$5 = *($4 + [128])
	if ( ($5 == 0) ){ goto $label$19 }
	*($4 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$8 = ($8 + [1])
	$7 = ($8 & [65535])
	$5 = *($4 + [164])
	if ( ((uint_32)int_32((*(($5 + [36])) - *($5 + [32])) >> [3]) > (uint_32)$7) ){ goto $label$17 }
	
.LABEL $label$16
	$2 = *($1)
	*($4 + [40]) = ($4 + [144])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18656])
	CALL $26(*($4 + [168]), $5, $2, ($4 + [40]))
	if ( ((int_64)*($4 + [144]) <= (int_64)0) ){ goto $label$20 }
	$2 = *($0)
	CALL eosio_assert(((int_64)*($13) == (int_64)*(($0 + [8]))), [17973])
	$2 = ((int_64)$2 + (int_64)*($4 + [144]))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [18016])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [18035])
	*($0) = $2
	$2 = *($1)
	*($4 + [244]) = [6]
	*($4 + [240]) = [17884]
	*($4 + [16]) = *($4 + [240])
	CALL $27(($4 + [40]), ($4 + [16]))
	$6 = *($4 + [40])
	*($4 + [244]) = [8]
	*($4 + [240]) = [17890]
	*($4 + [8]) = *($4 + [240])
	CALL $27(($4 + [40]), ($4 + [8]))
	$18 = *($4 + [40])
	$17 = *($4 + [164])
	*(($7 = (($4 + [24]) + [8]))) = [0]
	*($4 + [24]) = (int_64)0
	$5 = CALL $119([17650])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$23 }
	*($4 + [24]) = ($5 << [1])
	$8 = $12
	if ( $5 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$19 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($19)
	*($7) = $8
	*($4 + [24]) = ($19 | [1])
	*($4 + [28]) = $5
	
.LABEL $label$22
	CALL memcpy($8, [17650], $5)
	
.LABEL $label$21
	*(($8 + $5)) = [0]
	*((($4 + [88]) + [8])) = $18
	*(($8 = (($4 + [88]) + [16]))) = (int_64)0
	*(($19 = (($4 + [88]) + [24]))) = [0]
	$18 = *($17 + [16])
	*($11) = *($4 + [144])
	*(($11 + [8])) = *($13)
	*($10) = *($4 + [24])
	*(($10 + [8])) = *($7)
	*((($4 + [40]) + [8])) = $18
	*($7) = [0]
	*($4 + [40]) = *($1)
	*($4 + [88]) = (int_64)6138663591592764928
	*($4 + [24]) = (int_64)0
	$5 = CALL _Znwj([16])
	*($8) = $5
	*($5) = $2
	*($5 + [8]) = $6
	*($9) = (int_64)0
	*((($4 + [88]) + [36])) = [0]
	$5 = ($5 + [16])
	*($19) = $5
	*($14) = $5
	$5 = *($10)
	$17 = ( *((($4 + [40]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($17 + [32])
	$2 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$24:
	$5 = ($5 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$24 }
	if ( ($5 == 0) ){ goto $label$26 }
	CALL $28($9, $5)
	$17 = *((($4 + [88]) + [32]))
	$5 = *($9)
	goto $label$25 
	
.LABEL $label$26
	$17 = [0]
	$5 = [0]
	
.LABEL $label$25
	*((($4 + [240]) + [8])) = $17
	*($4 + [244]) = $5
	*($4 + [240]) = $5
	*($4 + [224]) = ($4 + [240])
	*($4 + [232]) = ($4 + [40])
	CALL $29(($4 + [232]), ($4 + [224]))
	CALL $30(($4 + [240]), ($4 + [88]))
	$5 = *($4 + [240])
	CALL send_inline($5, (*($4 + [244]) - $5))
	$5 = *($4 + [240])
	if ( ($5 == 0) ){ goto $label$27 }
	*($4 + [244]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$27
	$5 = *($9)
	if ( ($5 == 0) ){ goto $label$28 }
	*((($4 + [88]) + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$28
	$5 = *($8)
	if ( ($5 == 0) ){ goto $label$29 }
	*($14) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$29
	if ( ((*($10) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$30
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$20
	CALL $20(($4 + [160]))
	$5 = *($4 + [164])
	if ( $5 ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	*($4 + [164]) = [0]
	*($4 + [160]) = ($4 + [168])
	
.LABEL $label$8
	$3 = *($4 + [200])
	if ( ($3 == 0) ){ goto $label$31 }
	$16 = ($4 + [204])
	$5 = *($16)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$33 }
	
.LOOP $label$34:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$35 }
	$8 = *($7 + [32])
	if ( ($8 == 0) ){ goto $label$36 }
	*(($7 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$36
	CALL _ZdlPv($7)
	
.LABEL $label$35
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	$5 = *(($4 + [200]))
	goto $label$32 
	
.LABEL $label$33
	$5 = $3
	
.LABEL $label$32
	*($16) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$31
	$global$0 = ($4 + [256])
	return (unreachable)
	
.LABEL $label$7
	CALL $107(($4 + [128]))
	
.LABEL $label$6
	CALL $94(($4 + [24]))
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [280]) == (int_32)$0), [18691])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18737])
	$6 = ($1 + [272])
	*(($5 = $4) + [24]) = *($6)
	$7 = *($1)
	$8 = $7
	$10 = *($3)
	$9 = ($1 + [96])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	CALL $77($9, *($10), *($10 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	$10 = *($3 + [4])
	*($1 + [112]) = *($10)
	*(($1 + [120])) = *(($10 + [8]))
	$10 = *($3 + [8])
	*($1 + [128]) = *($10)
	*(($1 + [152])) = *(($10 + [24]))
	*(($1 + [144])) = *(($10 + [16]))
	*(($1 + [136])) = *(($10 + [8]))
	CALL memcpy(($1 + [160]), *($3 + [12]), [69])
	$3 = *($3 + [16])
	*($1 + [240]) = *($3)
	$11 = *(($3 + [8]))
	$12 = *(($3 + [16]))
	$13 = *(($3 + [24]))
	*($6) = (int_64)1
	*(($1 + [264])) = $13
	*(($1 + [256])) = $12
	*(($1 + [248])) = $11
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [18788])
	*($5 + [8]) = [0]
	CALL $63(($5 + [8]), $1)
	$10 = *($5 + [8])
	if ( ($10 <= [513]) ){ goto $label$3 }
	$3 = CALL $124($10)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $10)
	CALL $64(($5 + [8]), $1)
	CALL db_update_i64(*(($1 + [284])), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$4 }
	CALL $128($3)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [40]) = *(($1 + [272]))
	if ( (CALL $118(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$6 }
	$3 = *($1 + [288])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4812882902415048704, ($5 + [32]), $7)
	*(($1 + [288])) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	float_64 $8
	float_64 $9
	float_64 $10
	float_64 $11
	float_64 $12
	int_32 $13
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$7 = ((int_64)((uint_64)((int_64)((int_64)*($2 + [8]) << (int_64)8) | (int_64)*($2 + [9])) % (uint_64)(int_64)50) + (int_64)50)
	$6 = ((int_64)((uint_64)((int_64)((int_64)*($2 + [6]) << (int_64)8) | (int_64)*($2 + [7])) % (uint_64)(int_64)50) + (int_64)50)
	$4 = ((int_64)((uint_64)((int_64)((int_64)*($2 + [4]) << (int_64)8) | (int_64)*($2 + [5])) % (uint_64)(int_64)50) + (int_64)50)
	$5 = ((int_64)((uint_64)((int_64)((int_64)*($2 + [2]) << (int_64)8) | (int_64)*($2 + [3])) % (uint_64)(int_64)50) + (int_64)50)
	$8 = (CASTING float_64)(uint_64 ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)$4 + (int_64)$5) + (int_64)$4) + (int_64)$6) + (int_64)$7) + (int_64)((uint_64)((int_64)((int_64)*($2 + [10]) << (int_64)8) | (int_64)*($2 + [11])) % (uint_64)(int_64)50)) + (int_64)100))
	$4 = ((uint_64)((int_64)((int_64)*($2) << (int_64)8) | (int_64)*($2 + [1])) % (uint_64)(int_64)50)
	$9 = ((float_64)(CASTING float_64)(uint_64 ((int_64)$4 + (int_64)50)) / (float_64)$8)
	*($3 + [40]) = $9
	$10 = ((float_64)(CASTING float_64)(uint_64 $5) / (float_64)$8)
	*($3 + [32]) = $10
	$11 = ((float_64)(CASTING float_64)(uint_64 $4) / (float_64)$8)
	*($3 + [24]) = $11
	$12 = ((float_64)(CASTING float_64)(uint_64 $6) / (float_64)$8)
	*($3 + [16]) = $12
	$8 = ((float_64)(CASTING float_64)(uint_64 $7) / (float_64)$8)
	*($3 + [8]) = $8
	*($3) = (float_64))((float_64)1 - ((float_64)$8 + (float_64)((float_64)$12 + (float_64)((float_64)$11 + (float_64)((float_64)$9 + (float_64)$10)))))
	CALL $31($0, ($3 + [40]))
	$2 = *($0 + [8])
	$13 = *($0 + [4])
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$9 }
	*($13) = $10
	$13 = ($13 + [8])
	*(($0 + [4])) = $13
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $31($0, ($3 + [32]))
	$2 = *(($0 + [8]))
	$13 = *(($0 + [4]))
	if ( ((int_32)$13 != (int_32)$2) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $31($0, ($3 + [24]))
	$2 = *(($0 + [8]))
	$13 = *(($0 + [4]))
	if ( ((int_32)$13 != (int_32)$2) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	*($13) = *($3 + [24])
	$13 = ($13 + [8])
	*(($0 + [4])) = $13
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	*($13) = *($3 + [16])
	$13 = ($13 + [8])
	*(($0 + [4])) = $13
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $31($0, ($3 + [16]))
	$2 = *(($0 + [8]))
	$13 = *(($0 + [4]))
	if ( ((int_32)$13 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $31($0, ($3 + [8]))
	$13 = *(($0 + [4]))
	if ( ((int_32)$13 != (int_32)*(($0 + [8]))) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($13) = *($3 + [8])
	$13 = ($13 + [8])
	*(($0 + [4])) = $13
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	*($13) = *($3)
	*(($0 + [4])) = ($13 + [8])
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	CALL $31($0, $3)
	$global$0 = ($3 + [48])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[33]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [34])
	$3 = (*($0 + [4]) + [34])
	*($0 + [4]) = $3
	*($2 + [8]) = *($1 + [58])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17967])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $3(($2 + [8]), $5)
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [17402])
	$6 = *($0)
	CALL eosio_assert($5, [18656])
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)($2 + [8])), [18691])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$3()), [18737])
	*($4 + [58]) = $1
	$3 = *($4)
	CALL eosio_assert([1], [18788])
	*($2 + [152]) = (($2 + [48]) + [91])
	*($2 + [148]) = ($2 + [48])
	*($2 + [144]) = ($2 + [48])
	CALL $10(($2 + [144]), $4)
	CALL db_update_i64(*($4 + [100]), $6, ($2 + [48]), [91])
	$4 = ($2 + [24])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$3 }
	$5 = ($2 + [36])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $1
	
.LABEL $label$4
	*($5) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($2 + [160])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$5 = ($global$0 - [512])
	$global$0 = $5
	CALL require_auth(*($0))
	*(($5 + [368])) = [0]
	*($5 + [352]) = (int_64)-1
	$6 = *($0)
	*($5 + [336]) = $6
	*($5 + [344]) = $6
	*($5 + [360]) = (int_64)0
	$7 = [0]
	$8 = CALL db_lowerbound_i64($6, $6, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $3(($5 + [336]), $8)
	
.LABEL $label$1
	$9 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($9, [17402])
	CALL eosio_assert(((int_32)*($7 + [58]) ^ (int_32)[1]), [17426])
	$10 = ($5 + [326])
	$6 = *($2)
	$11 = ($5 + [256])
	
.LOOP $label$2:
	$8 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$12 = ((int_64)$6) != (int_64)0
	*($5 + [400]) = (($12) << [7]) | ($8 & [127]))
	$8 = $11
	CALL eosio_assert(((int_32)($10 - $8) > (int_32)[0]), [17967])
	CALL memcpy($8, ($5 + [400]), [1])
	$11 = ($8 + [1])
	if ( $12 ){ goto $label$2 }
	CALL eosio_assert(((int_32)($10 - $11) > (int_32)[64]), [17967])
	CALL memcpy($11, ($2 + [4]), [65])
	CALL assert_recover_key($3, ($5 + [256]), (($8 + [66]) - ($5 + [256])), ($7 + [24]), [34])
	$6 = *($7 + [8])
	*($5 + [248]) = $6
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [17454])
	*(($5 + [240])) = [0]
	*($5 + [224]) = (int_64)-1
	*($5 + [232]) = (int_64)0
	*($5 + [244]) = [0]
	$6 = *($0)
	*($5 + [208]) = $6
	*($5 + [216]) = $6
	$8 = [0]
	$11 = CALL db_find_i64($6, $6, (int_64)-4812882902415048704, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $13(($5 + [208]), $11)
	CALL eosio_assert(((int_32)*($8 + [280]) == (int_32)($5 + [208])), [18847])
	
.LABEL $label$3
	CALL eosio_assert((int_64)(*($8 + [272]) == 0), [17472])
	CALL eosio_assert((uint_64)(*($8 + [8]) <= ((int_64)((uint_64)CALL $fimport$8() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [17492])
	*($5 + [184]) = [0]
	*($5 + [176]) = (int_64)0
	$11 = (*(($8 + [20])) - *($8 + [16]))
	if ( ($11 == 0) ){ goto $label$8 }
	$12 = int_32($11 >> [3])
	if ( ((uint_32)$12 >= (uint_32)[536870912]) ){ goto $label$7 }
	$11 = CALL _Znwj($11)
	*(($5 + [184])) = ($11 + ($12 << [3]))
	*($5 + [176]) = $11
	*($5 + [180]) = $11
	$10 = *(($8 + [16]))
	$12 = (*(($8 + [20])) - $10)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($11, $10, $12)
	*($5 + [180]) = (*($5 + [180]) + $12)
	
.LABEL $label$8
	$13 = *(($4 + [24]))
	*((($5 + [144]) + [24])) = $13
	$14 = *(($4 + [16]))
	*((($5 + [144]) + [16])) = $14
	$6 = *(($4 + [8]))
	$15 = *($4)
	*((($5 + [32]) + [16])) = $14
	*((($5 + [32]) + [24])) = $13
	*($5 + [144]) = $15
	*($5 + [152]) = $6
	*($5 + [32]) = $15
	*($5 + [40]) = $6
	CALL $14(($5 + [192]), $0, ($5 + [176]), ($5 + [32]))
	$11 = *($5 + [176])
	if ( ($11 == 0) ){ goto $label$9 }
	*($5 + [180]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$9
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = [0]
	$6 = *($5 + [248])
	$11 = (*($5 + [196]) - *($5 + [192]))
	if ( ($11 == 0) ){ goto $label$10 }
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$6 }
	$12 = CALL _Znwj($11)
	*(($5 + [120])) = ($12 + $11)
	*($5 + [112]) = $12
	*($5 + [116]) = $12
	$10 = *($5 + [192])
	$11 = (*($5 + [196]) - $10)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($12, $10, $11)
	*($5 + [116]) = (*($5 + [116]) + $11)
	
.LABEL $label$10
	CALL $15(($5 + [128]), $0, $6, ($5 + [112]))
	$11 = *($5 + [112])
	if ( ($11 == 0) ){ goto $label$11 }
	*($5 + [116]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$11
	$6 = *($0)
	*($5 + [408]) = $3
	*($5 + [412]) = $2
	*($5 + [416]) = $4
	*($5 + [404]) = ($5 + [128])
	*($5 + [400]) = ($5 + [192])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18656])
	CALL $16(($5 + [208]), $8, $6, ($5 + [400]))
	$13 = *(($4 + [24]))
	*((($5 + [64]) + [24])) = $13
	$14 = *(($4 + [16]))
	*((($5 + [64]) + [16])) = $14
	$6 = *(($4 + [8]))
	$15 = *($4)
	*(($5 + [16])) = $14
	*(($5 + [24])) = $13
	*($5 + [72]) = $6
	*($5) = $15
	*($5 + [64]) = $15
	*($5 + [8]) = $6
	CALL $17(($5 + [96]), $5, $5)
	$6 = *($0)
	*($5 + [404]) = $0
	*($5 + [412]) = $4
	*($5 + [400]) = ($5 + [248])
	*($5 + [408]) = ($5 + [96])
	*($5 + [392]) = $6
	CALL eosio_assert(((int_64)*($5 + [208]) == (int_64)CALL $fimport$3()), [18258])
	*($5 + [500]) = ($5 + [400])
	*($5 + [496]) = ($5 + [208])
	*($5 + [504]) = ($5 + [392])
	*(($8 = CALL _Znwj([304])) + [16 align=4]) = (int_64)0
	*($8 + [24 align=4]) = (int_64)0
	*($8 + [32 align=4]) = (int_64)0
	*($8 + [40 align=4]) = (int_64)0
	*($8 + [48]) = [0]
	*($8 + [56]) = (int_64)0
	*($8 + [64]) = (int_64)0
	*($8 + [96 align=4]) = (int_64)0
	*($8 + [104]) = [0]
	*($8 + [112]) = (int_64)0
	*($8 + [120]) = (int_64)0
	*($8 + [160]) = [0]
	*($8 + [280]) = ($5 + [208])
	CALL $18(($5 + [496]), $8)
	*($5 + [384]) = $8
	$6 = *($8)
	*($5 + [496]) = $6
	$12 = *($8 + [284])
	*($5 + [380]) = $12
	$10 = ($5 + [236])
	$11 = *($10)
	if ( ((uint_32)$11 >= (uint_32)*(($5 + [240]))) ){ goto $label$12 }
	*($11 + [8]) = $6
	*($11 + [16]) = $12
	*($5 + [384]) = [0]
	*($11) = $8
	*($10) = ($11 + [24])
	$10 = *($5 + [384])
	*($5 + [384]) = [0]
	if ( ($10 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$12
	CALL $7((($5 + [208]) + [24]), ($5 + [384]), ($5 + [496]), ($5 + [380]))
	$10 = *($5 + [384])
	*($5 + [384]) = [0]
	if ( $10 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL $107(($5 + [176]))
	
.LABEL $label$6
	CALL $107(($5 + [112]))
	
.LABEL $label$5
	$8 = *($10 + [96])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($10 + [100])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	$12 = *($10 + [40])
	if ( ($12 == 0) ){ goto $label$14 }
	$4 = ($10 + [44])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$16 }
	
.LOOP $label$17:
	$8 = ($11 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($11 + [-4])))
	
.LABEL $label$18
	$11 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$17 }
	$8 = *(($10 + [40]))
	goto $label$15 
	
.LABEL $label$16
	$8 = $12
	
.LABEL $label$15
	*($4) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$8 = *($10 + [28])
	if ( ($8 == 0) ){ goto $label$19 }
	*(($10 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$19
	$8 = *($10 + [16])
	if ( ($8 == 0) ){ goto $label$20 }
	*(($10 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$20
	CALL _ZdlPv($10)
	
.LABEL $label$4
	$15 = *($0)
	CALL eosio_assert($9, [18656])
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)($5 + [336])), [18691])
	CALL eosio_assert(((int_64)*($5 + [336]) == (int_64)CALL $fimport$3()), [18737])
	*(($7 + [8])) = ((int_64)*($5 + [248]) + (int_64)1)
	$6 = *($7)
	CALL eosio_assert([1], [18788])
	*($5 + [504]) = (($5 + [400]) + [91])
	*($5 + [500]) = ($5 + [400])
	*($5 + [496]) = ($5 + [400])
	CALL $10(($5 + [496]), $7)
	CALL db_update_i64(*($7 + [100]), $15, ($5 + [400]), [91])
	$8 = ($5 + [352])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$21 }
	*($8) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	if ( (uint_64)($1 <= (int_64)10) ){ goto $label$22 }
	*($5 + [392]) = ((int_64)$1 + (int_64)-10)
	*(($5 + [432])) = [0]
	*($5 + [416]) = (int_64)-1
	*($5 + [424]) = (int_64)0
	*($5 + [436]) = [0]
	$6 = *($0)
	*($5 + [400]) = $6
	*($5 + [408]) = $6
	*($5 + [384]) = ($5 + [400])
	CALL $19(($5 + [496]), ($5 + [384]), ($5 + [392]))
	$8 = *($5 + [500])
	if ( ($8 == 0) ){ goto $label$23 }
	if ( ((int_64)*($5 + [392]) != (int_64)*($8 + [8])) ){ goto $label$23 }
	$11 = *($5 + [496])
	
.LOOP $label$24:
	if ( ((int_64)*($8 + [8]) != (int_64)*($5 + [392])) ){ goto $label$23 }
	*($5 + [496]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $11))
	CALL eosio_assert([1], [18902])
	CALL $20(($5 + [496]))
	CALL $21(*($5 + [384]), $8)
	$6 = *($5 + [496])
	$11 = (CASTING uint_32)(uint_64 $6)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	if ( $8) ){ goto $label$24 }
	
.LABEL $label$23
	$6 = *($5 + [392])
	$11 = *(($5 + [236]))
	$10 = *(($5 + [232]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$27 }
	
.LOOP $label$29:
	$8 = ($11 + [-24])
	$12 = *($8)
	if ( ((int_64)*($12) == (int_64)$6) ){ goto $label$28 }
	$11 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$27 }
	CALL eosio_assert(((int_32)*($12 + [280]) == (int_32)($5 + [208])), [18847])
	if ( $12 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$8 = CALL db_find_i64(*($5 + [208]), *(($5 + [216])), (int_64)-4812882902415048704, $6)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$25 }
	$12 = CALL $13(($5 + [208]), $8)
	CALL eosio_assert(((int_32)*($12 + [280]) == (int_32)($5 + [208])), [18847])
	
.LABEL $label$26
	CALL eosio_assert([1], [18902])
	CALL eosio_assert([1], [18936])
	$8 = CALL db_next_i64(*($12 + [284]), ($5 + [496]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$30 }
	CALL $13(($5 + [208]), $8)
	
.LABEL $label$30
	CALL $22(($5 + [208]), $12)
	
.LABEL $label$25
	$10 = *($5 + [424])
	if ( ($10 == 0) ){ goto $label$22 }
	$4 = ($5 + [428])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$32 }
	
.LOOP $label$33:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$34 }
	$12 = *($11 + [32])
	if ( ($12 == 0) ){ goto $label$35 }
	*(($11 + [36])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$35
	CALL _ZdlPv($11)
	
.LABEL $label$34
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$33 }
	$8 = *(($5 + [424]))
	goto $label$31 
	
.LABEL $label$32
	$8 = $10
	
.LABEL $label$31
	*($4) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$22
	$8 = *($5 + [96])
	if ( ($8 == 0) ){ goto $label$36 }
	*($5 + [100]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$36
	$8 = *($5 + [192])
	if ( ($8 == 0) ){ goto $label$37 }
	*($5 + [196]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$37
	$12 = *($5 + [232])
	if ( ($12 == 0) ){ goto $label$38 }
	$10 = ($5 + [236])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$40 }
	$8 = ($8 + [-24])
	
.LOOP $label$41:
	$11 = CALL $8($8)
	$8 = ($8 + [-24])
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$41 }
	$8 = *(($5 + [232]))
	goto $label$39 
	
.LABEL $label$40
	$8 = $12
	
.LABEL $label$39
	*($10) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$38
	$12 = *($5 + [360])
	if ( ($12 == 0) ){ goto $label$42 }
	$10 = ($5 + [364])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$44 }
	
.LOOP $label$45:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$46 }
	CALL _ZdlPv($11)
	
.LABEL $label$46
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$45 }
	$8 = *(($5 + [360]))
	goto $label$43 
	
.LABEL $label$44
	$8 = $12
	
.LABEL $label$43
	*($10) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$42
	$global$0 = ($5 + [512])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18230])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $124($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $5)
	*(($4 = CALL _Znwj([304])) + [16 align=4]) = (int_64)0
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [96 align=4]) = (int_64)0
	*($4 + [104]) = [0]
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [160]) = [0]
	*($4 + [280]) = $0
	CALL $68(($3 + [32]), $4)
	*($4 + [288]) = [-1]
	*($4 + [284]) = $1
	*($3 + [24]) = $4
	$6 = *($4)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $4
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$2 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	$5 = *($2 + [96])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($2 + [100])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$0 = *($2 + [40])
	if ( ($0 == 0) ){ goto $label$11 }
	$8 = ($2 + [44])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($1 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$15
	$1 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($2 + [40]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($2 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($2 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	*($1) = ((int_64)*(*($4)) + (int_64)1)
	$5 = *($4 + [4])
	*($1 + [8]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)120)
	*(($6 = $2) + [96]) = [0]
	*($6 + [100 align=4]) = (int_64)0
	$7 = *($4 + [8])
	$8 = (*($7 + [4]) - *($7))
	if ( ($8 == 0) ){ goto $label$3 }
	$9 = int_32($8 >> [3])
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$2 }
	$8 = CALL _Znwj($8)
	*(($6 + [104])) = ($8 + ($9 << [3]))
	*($6 + [100]) = $8
	*($6 + [96]) = $8
	$9 = *($7)
	$7 = (*(($7 + [4])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $9, $7)
	*($6 + [100]) = ($8 + $7)
	
.LABEL $label$3
	CALL $40(($6 + [32]), $4, ($6 + [96]))
	$7 = *($1 + [16])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($1 + [20])) = $7
	CALL _ZdlPv($7)
	*(($7 = ($1 + [24]))) = [0]
	*($1 + [16 align=4]) = (int_64)0
	goto $label$4 
	
.LABEL $label$5
	$7 = ($1 + [24])
	
.LABEL $label$4
	*($7) = *($6 + [40])
	*(($1 + [16])) = *($6 + [32])
	*($6 + [40]) = [0]
	*($6 + [32]) = (int_64)0
	$7 = *($6 + [96])
	if ( ($7 == 0) ){ goto $label$6 }
	*($6 + [100]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	*($6 + [80]) = [0]
	*($6 + [84 align=4]) = (int_64)0
	$7 = *(($4 + [8]))
	$8 = (*($7 + [4]) - *($7))
	if ( ($8 == 0) ){ goto $label$7 }
	$9 = int_32($8 >> [3])
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$1 }
	$8 = CALL _Znwj($8)
	*(($6 + [88])) = ($8 + ($9 << [3]))
	*($6 + [84]) = $8
	*($6 + [80]) = $8
	$9 = *($7)
	$7 = (*(($7 + [4])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($8, $9, $7)
	*($6 + [84]) = (*($6 + [84]) + $7)
	
.LABEL $label$7
	CALL $42(($6 + [32]), $5, ($6 + [80]))
	$7 = *($1 + [28])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($1 + [32])) = $7
	CALL _ZdlPv($7)
	*(($7 = ($1 + [36]))) = [0]
	*($1 + [28 align=4]) = (int_64)0
	goto $label$8 
	
.LABEL $label$9
	$7 = ($1 + [36])
	
.LABEL $label$8
	*($7) = *($6 + [40])
	*(($1 + [28])) = *($6 + [32])
	*($6 + [40]) = [0]
	*($6 + [32]) = (int_64)0
	$7 = *($6 + [80])
	if ( ($7 == 0) ){ goto $label$10 }
	*($6 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$4 = *($4 + [12])
	$10 = *(($4 + [8]))
	$11 = *(($4 + [24]))
	*(($6 + [24])) = $11
	$12 = *($4)
	$13 = *(($4 + [16]))
	*(($6 + [16])) = $13
	*((($6 + [32]) + [24])) = $11
	*((($6 + [32]) + [16])) = $13
	*($6 + [32]) = $12
	*($6 + [8]) = $10
	*($6) = $12
	*($6 + [40]) = $10
	CALL $44(($6 + [64]), $4, $6)
	$8 = *($1 + [40])
	if ( ($8 == 0) ){ goto $label$14 }
	$5 = ($1 + [44])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$15:
	$4 = ($7 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$16
	$7 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($1 + [40]))
	goto $label$12 
	
.LABEL $label$14
	$4 = ($1 + [48])
	$5 = ($1 + [44])
	goto $label$11 
	
.LABEL $label$13
	$4 = $8
	
.LABEL $label$12
	*(($1 + [44])) = $8
	CALL _ZdlPv($4)
	*(($4 = ($1 + [48]))) = [0]
	*($1 + [40 align=4]) = (int_64)0
	
.LABEL $label$11
	*($5) = *($6 + [68])
	*($4) = *($6 + [72])
	*(($1 + [40])) = *($6 + [64])
	CALL eosio_assert([1], [17898])
	$10 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$12 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$10 = $12
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$10 = $12
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$21 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$7 = [0]
	
.LABEL $label$17
	CALL eosio_assert($7, [17947])
	*(($1 + [64])) = (int_64)1397703940
	*($1 + [56]) = (int_64)0
	*($6 + [32]) = [0]
	CALL $63(($6 + [32]), $1)
	$7 = *($6 + [32])
	if ( ($7 <= [513]) ){ goto $label$23 }
	$4 = CALL $124($7)
	goto $label$22 
	
.LABEL $label$23
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$22
	*($6 + [36]) = $4
	*($6 + [32]) = $4
	*($6 + [40]) = ($4 + $7)
	CALL $64(($6 + [32]), $1)
	$10 = *($1)
	*($1 + [284]) = CALL db_store_i64(*($3 + [8]), (int_64)-4812882902415048704, *(*($0 + [8])), $10, $4, $7)
	if ( ($7 <= [513]) ){ goto $label$24 }
	CALL $128($4)
	
.LABEL $label$24
	if ( (uint_64)($10 <= *($3 + [16])) ){ goto $label$25 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$25
	$10 = *(($3 + [8]))
	$12 = *(*(($0 + [8])))
	$11 = *($1)
	*($6 + [96]) = *($1 + [272])
	*($1 + [288]) = CALL db_idx64_store($10, (int_64)-4812882902415048704, $12, $11, ($6 + [96]))
	$global$0 = ($6 + [112])
	return (unreachable)
	
.LABEL $label$2
	CALL $107(($6 + [96]))
	
.LABEL $label$1
	CALL $107(($6 + [80]))
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229443000054317057, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$7), [18847])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $78($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)4229443000054317056, $6))
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$7), [18847])
	
.LABEL $label$2
	*(($4 + [100])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17967])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17967])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[33]), [18253])
	CALL memcpy(($1 + [24]), *($0 + [4]), [34])
	$3 = (*($0 + [4]) + [34])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18253])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [58]) = ((int_32)*($2 + [8]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [88])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $54(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $55(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $128($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $51 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18253])
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $128($2)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
	return [1]
}

int_32 .FUNC $52 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [80]) + [32]))) = [0]
	*(($8 = (($4 + [80]) + [24]))) = (int_64)0
	*(($9 = (($4 + [80]) + [16]))) = (int_64)0
	*(($10 = (($4 + [80]) + [8]))) = (int_64)0
	*($4 + [80]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[33]), [18253])
	CALL memcpy(($4 + [80]), $2, [34])
	*(($4 + [68])) = ($2 + [34])
	*((($4 + [48]) + [24])) = ($2 + $7)
	*($4 + [56]) = $1
	*($4 + [48]) = $0
	*($4 + [64]) = $2
	*(($11 = (($4 + [120]) + [32]))) = *($3)
	*(($3 = (($4 + [120]) + [24]))) = *($8)
	*(($8 = (($4 + [120]) + [16]))) = *($9)
	*(($9 = (($4 + [120]) + [8]))) = *($10)
	*($4 + [120]) = *($4 + [80])
	*((($4 + [160]) + [32])) = *($11)
	*((($4 + [160]) + [24])) = *($3)
	*((($4 + [160]) + [16])) = *($8)
	*((($4 + [160]) + [8])) = *($9)
	*($4 + [160]) = *($4 + [120])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	*(($5 = (($4 + [200]) + [32]))) = *((($4 + [160]) + [32]))
	$0 = *((($4 + [160]) + [24]))
	*((($4 + [200]) + [24])) = $0
	$1 = *((($4 + [160]) + [16]))
	*((($4 + [200]) + [16])) = $1
	$12 = *((($4 + [160]) + [8]))
	*((($4 + [200]) + [8])) = $12
	*((($4 + [8]) + [8])) = $12
	*((($4 + [8]) + [16])) = $1
	*((($4 + [8]) + [24])) = $0
	*((($4 + [8]) + [32])) = *($5)
	$0 = *($4 + [160])
	*($4 + [8]) = $0
	*($4 + [200]) = $0
	CALL void $3((int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $128($2)
	
.LABEL $label$5
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $53 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [768])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [208]) = (int_64)0
	CALL memset((($4 + [208]) | [12]), [0], [68])
	*(($3 = ($4 + [312]))) = (int_64)0
	*(($8 = ($4 + [304]))) = (int_64)0
	*(($9 = ($4 + [296]))) = (int_64)0
	*(($10 = ($4 + [344]))) = (int_64)0
	*(($11 = ($4 + [336]))) = (int_64)0
	*(($12 = ($4 + [328]))) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [216]) = [0]
	*($4 + [320]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $7)
	*($4 + [488]) = ($4 + [192])
	*($4 + [696]) = ($4 + [208])
	CALL $56(($4 + [696]), ($4 + [488]))
	*(($13 = (($4 + [144]) + [8]))) = *($4 + [200])
	*($4 + [144]) = *($4 + [192])
	*(($14 = (($4 + [488]) + [8]))) = *($13)
	*($4 + [488]) = *($4 + [144])
	$13 = *($14)
	*((($4 + [696]) + [8])) = $13
	*((($4 + [160]) + [24])) = $13
	*($4 + [160]) = $0
	*($4 + [168]) = $1
	$0 = *($4 + [488])
	*($4 + [176]) = $0
	*($4 + [696]) = $0
	$0 = *($4 + [208])
	CALL memcpy(($4 + [416]), (($4 + [208]) | [8]), [72])
	*(($13 = (($4 + [384]) + [24]))) = *($3)
	*(($3 = (($4 + [384]) + [16]))) = *($8)
	*(($8 = (($4 + [352]) + [16]))) = *($11)
	*(($11 = (($4 + [352]) + [24]))) = *($10)
	*($4 + [392]) = *($9)
	*($4 + [384]) = *($4 + [288])
	*($4 + [352]) = *($4 + [320])
	*($4 + [360]) = *($12)
	*((($4 + [592]) + [24])) = *($11)
	*((($4 + [592]) + [16])) = *($8)
	*((($4 + [560]) + [16])) = *($3)
	*((($4 + [560]) + [24])) = *($13)
	*($4 + [600]) = *($4 + [360])
	*($4 + [592]) = *($4 + [352])
	*($4 + [560]) = *($4 + [384])
	*($4 + [568]) = *($4 + [392])
	CALL memcpy(($4 + [488]), ($4 + [416]), [72])
	$3 = (($4 + [160]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL memcpy(($4 + [696]), ($4 + [488]), [72])
	*(($5 = (($4 + [656]) + [24]))) = *((($4 + [560]) + [24]))
	*(($8 = (($4 + [656]) + [16]))) = *((($4 + [560]) + [16]))
	*(($9 = (($4 + [624]) + [16]))) = *((($4 + [592]) + [16]))
	*(($10 = (($4 + [624]) + [24]))) = *((($4 + [592]) + [24]))
	*($4 + [664]) = *($4 + [568])
	*($4 + [656]) = *($4 + [560])
	*($4 + [624]) = *($4 + [592])
	*($4 + [632]) = *($4 + [600])
	CALL memcpy(($4 + [72]), ($4 + [696]), [72])
	*((($4 + [32]) + [24])) = *($5)
	*((($4 + [32]) + [16])) = *($8)
	*(($4 + [16])) = *($9)
	*(($4 + [24])) = *($10)
	*($4 + [40]) = *($4 + [664])
	*($4 + [32]) = *($4 + [656])
	*($4) = *($4 + [624])
	*($4 + [8]) = *($4 + [632])
	CALL void $3((int_32 $0), (int_64 ($4 + [72])), (int_32 ($4 + [32])), (int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $128($2)
	
.LABEL $label$5
	$global$0 = ($4 + [768])
	return [1]
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $74(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*(*($4 + [4]) + [4]) + [8])
	*($1 + [16]) = *(*($4 + [8]))
	*($1 + [24]) = *(*($4 + [12]))
	$5 = *($0)
	$6 = *($4 + [16])
	*(($1 + [56])) = *(($6 + [8]))
	*($1 + [48]) = *($6)
	*($1 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = [32]
	$4 = *($4 + [20])
	$7 = ($1 + [32])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	CALL $81($7, *($4), *($4 + [4]))
	
.LABEL $label$1
	$7 = *($1 + [32])
	$4 = *(($1 + [36]))
	$8 = ($4 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	$6 = (($8 & [-8]) + $6)
	
.LABEL $label$3
	$4 = ($6 + [40])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$6 = CALL $124($4)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $4)
	CALL $82(($3 + [8]), $1)
	$9 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($5 + [8]), (int_64)4229443000054317056, *(*($0 + [8])), $9, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$6 }
	CALL $128($6)
	
.LABEL $label$6
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$7 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$6 = ($5 + [8])
	$9 = *($6)
	$4 = *(($0 + [8]))
	$10 = *($4)
	$11 = *($1)
	*($3 + [24]) = *(($1 + [16]))
	*($1 + [96]) = CALL db_idx64_store($9, (int_64)4229443000054317056, $10, $11, ($3 + [24]))
	$9 = *($4)
	$10 = *($6)
	$11 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*(($1 + [100])) = CALL db_idx64_store($10, (int_64)4229443000054317057, $9, $11, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0)
	$5 = *($1)
	$0 = *($5 + [4])
	$2 = [0]
	$6 = (int_64)0
	$7 = ($5 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($0 <= *(($5 + [8]))), [18898])
	$0 = *($7)
	$3 = *($0)
	$0 = ($0 + [1])
	*($7) = $0
	$2 = ($2 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $2)))
	$2 = ($2 + [7])
	if ( ($3 & [128]) ){ goto $label$1 }
	*($4 + [8]) = $6
	CALL eosio_assert(((uint_32)(*(($5 + [8])) - $0) > (uint_32)[64]), [18253])
	$3 = ($5 + [4])
	CALL memcpy(($4 + [12]), *($3), [65])
	*($3) = (*($3) + [65])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [18253])
	CALL memcpy(($4 + [80]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [18253])
	CALL memcpy(($4 + [112]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17967])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17967])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17967])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $113($3, (int_64)0)
	$4 = CALL $115($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $114 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $112($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $111($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $113 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $120([8216])
	$3 = *([0] + [8224])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8232]
	*([0] + [8224]) = [8232]
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $127([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8224])
	*([0] + [8224]) = $3
	*([0] + [8228]) = [0]
	
.LABEL $label$2
	*([0] + [8228]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $121([8216])
	return [0]
	
.LABEL $label$1
	CALL $121([8216])
	return [-1]
}

int_32 .FUNC $111 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $66(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $95(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $95(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $107 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $106 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18966])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [19011])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19061])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	$9 = *($4 + [32])
	if ( ($9 == 0) ){ goto $label$10 }
	*(($4 + [36])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$8 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	$9 = *($6 + [32])
	if ( ($9 == 0) ){ goto $label$13 }
	*(($6 + [36])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
	$6 = *(($1 + [96]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317056, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$6 = *(($1 + [100]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317057, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$global$0 = ($2 + [16])
}

int_32 .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18936])
	$2 = *($0 + [4])
	$3 = *(($2 + [100]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)4229443000054317057, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [100])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$6), [18847])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $78($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)4229443000054317056, $5))
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$6), [18847])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [100])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = *($2 + [4])
	$5 = ((int_64)((uint_64)$3 % (uint_64)*(($4 + [-8]))) + (int_64)1)
	$6 = *($1)
	$7 = *($2)
	$3 = *($7)
	$8 = [0]
	$9 = [0]
	
.LOOP $label$1:
	if ( ((uint_64)$5 <= (uint_64)$3) ){ goto $label$3 }
	$9 = ($9 + [1])
	$10 = [0]
	goto $label$2 
	
.LABEL $label$3
	$10 = *(($6 + $8))
	
.LABEL $label$2
	$8 = ($9 & [255])
	$11 = ($7 + ($8 << [3]))
	$3 = *($11)
	if ( (($10 & [255]) == 0) ){ goto $label$1 }
	if ( (($9 & [255]) == 0) ){ goto $label$4 }
	$3 = (int_64))($3 - *((($7 + ($8 << [3])) + [-8])))
	
.LABEL $label$4
	$9 = ($9 + [1])
	$13 = ($9 & [255])
	$12 = int_32(($4 - $7) >> [3])
	if ( ((uint_32)$12 <= (uint_32)$13) ){ goto $label$5 }
	
.LOOP $label$6:
	*(($13 = ($7 + ($13 << [3])))) = (int_64))(*($13) - $3)
	$9 = ($9 + [1])
	$13 = ($9 & [255])
	if ( ((uint_32)$12 > (uint_32)$13) ){ goto $label$6 }
	
.LABEL $label$5
	$9 = ($6 + $8)
	$13 = ($9 + [1])
	$7 = (*($1 + [4]) - $13)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($9, $13, $7)
	$11 = (*($2) + ($8 << [3]))
	$4 = *(($2 + [4]))
	
.LABEL $label$7
	*(($1 + [4])) = ($9 + $7)
	$7 = ($11 + [8])
	$9 = ($4 - $7)
	$8 = int_32($9 >> [3])
	if ( ($9 == 0) ){ goto $label$8 }
	CALL memmove($11, $7, $9)
	
.LABEL $label$8
	*(($2 + [4])) = ($11 + ($8 << [3]))
	return ($10 & [255])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [280]) == (int_32)$0), [18966])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [19011])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19061])
	$6 = ($4 + [-24])
	$8 = *($5)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = ($6 + [24])
	CALL $80($6, $9)
	$4 = ($6 + [48])
	$6 = $9
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$8 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = $6
	
.LABEL $label$6
	$6 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = CALL $8($6)
	$6 = ($6 + [-24])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [284])))
	$6 = *($1 + [288])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$11 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4812882902415048704, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$10 }
	
.LABEL $label$11
	CALL db_idx64_remove($6)
	
.LABEL $label$10
	$global$0 = ($2 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [17898])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [17947])
	$9 = [0]
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	*($5 + [44]) = [0]
	$6 = *($1)
	*($5 + [8]) = $6
	*($5 + [16]) = $6
	$11 = [0]
	$7 = CALL db_find_i64($6, $6, (int_64)-4812882902415048704, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$11 = CALL $13(($5 + [8]), $7)
	CALL eosio_assert(((int_32)*($11 + [280]) == (int_32)($5 + [8])), [18847])
	
.LABEL $label$6
	$6 = ((uint_64)$3 / (uint_64)(int_64)10000)
	$8 = ((uint_64)$6 % (uint_64)(int_64)10)
	$6 = (int_64))($3 - ((int_64)$6 * (int_64)10000))
	$12 = (CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)100000))
	$13 = *($4)
	
.LOOP $label$7:
	$4 = ($12 & [255])
	$1 = *(($13 + ($7 & [255])))
	$10 = ($7 + [1])
	$7 = $9
	$9 = ( $7 ? $10 : ((int_32)$1 == (int_32)$4) )
	if ( (($10 & [255]) == 0) ){ goto $label$7 }
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$7 }
	$1 = (CASTING uint_32)(uint_64 $8)
	$9 = ($1 & [15])
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[2]) ){ goto $label$10 }
	if ( ((int_32)$9 != (int_32)[3]) ){ goto $label$8 }
	if ( (($10 & [255]) <= [4]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	if ( ($7 & [255]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((uint_32)($10 & [255]) >= (uint_32)[3]) ){ goto $label$8 }
	
.LABEL $label$9
	$8 = *(((*($11 + [28]) + (($1 + ((((int_32)($12 & [255]) * (int_32)[3]) + [65533]) & [65535])) << [3])) + [-8]))
	CALL eosio_assert([1], [17898])
	$3 = ((uint_64)((int_64)$8 * (int_64)((int_64)$6 * (int_64)1000)) / (uint_64)(int_64)100)
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$6 = $8
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$16 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$9 = [0]
	
.LABEL $label$12
	CALL eosio_assert($9, [17947])
	*(($0 + [8])) = (int_64)1397703940
	*($0) = $3
	
.LABEL $label$8
	$10 = *($5 + [32])
	if ( ($10 == 0) ){ goto $label$17 }
	$1 = ($5 + [36])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$19 }
	$7 = ($7 + [-24])
	
.LOOP $label$20:
	$9 = CALL $8($7)
	$7 = ($7 + [-24])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$20 }
	$7 = *(($5 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$7 = $10
	
.LABEL $label$18
	*($1) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$global$0 = ($5 + [48])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [18062])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [18167])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [18100])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [18167])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18691])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18737])
	*(($5 = $4) + [16]) = *(($1 + [16]))
	*($5 + [24]) = *(($1 + [8]))
	$3 = *($3)
	*($1 + [72]) = *($3)
	*(($1 + [80])) = *(($3 + [8]))
	$6 = *($1)
	CALL eosio_assert([1], [18788])
	$8 = *($1 + [32])
	$7 = *(($1 + [36]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$11 = (($5 + [16]) + [8])
	$3 = [32]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$2
	$7 = ($3 + [40])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $124($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $82($5, $1)
	CALL db_update_i64(*($1 + [92]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $128($3)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *(($1 + [16]))
	if ( (CALL $118(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$7 = ($1 + [96])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317056, ($5 + [32]), $6)
	*($7) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$7
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $118($11, ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [100])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317057, ($5 + [32]), $6)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

void .FUNC $109 (int_32 $0)
{
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18898])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $75($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [18253])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $70(CALL $69(CALL $69($0, ($1 + [16])), ($1 + [28])), ($1 + [40]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	$4 = (int_64)0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[15]), [18253])
	CALL memcpy(($1 + [80]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	$5 = CALL $71($0, ($1 + [96]))
	CALL eosio_assert(((uint_32)(*($5 + [8]) - *($5 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [112]), *($5 + [4]), [8])
	$0 = (*($5 + [4]) + [8])
	*($5 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($5 + [8]) - $0) > (uint_32)[7]), [18253])
	CALL memcpy(($2 + [8]), *($5 + [4]), [8])
	*(($1 + [120])) = *($2 + [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($5 + [8]) - *($5 + [4])) > (uint_32)[31]), [18253])
	CALL memcpy(($1 + [128]), *($5 + [4]), [32])
	$3 = (*($5 + [4]) + [32])
	*($5 + [4]) = $3
	$6 = [0]
	$7 = ($5 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($5 + [8]))), [18898])
	$3 = *($7)
	$0 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$6 = ($6 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($0 & [128]) ){ goto $label$1 }
	*($1 + [160]) = $4
	$6 = ($5 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[64]), [18253])
	$0 = ($5 + [4])
	CALL memcpy(($1 + [164]), *($0), [65])
	$3 = (*($0) + [65])
	*($0) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[31]), [18253])
	CALL memcpy(($1 + [240]), *($0), [32])
	$3 = (*($0) + [32])
	*($0) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [272]), *($0), [8])
	*($0) = (*($0) + [8])
	$global$0 = ($2 + [16])
	return $5
}

int_32 .FUNC $108 ()
{
	return [8208]
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17967])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [17967])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$4 = CALL $65(CALL $65($0, ($1 + [16])), ($1 + [28]))
	$3 = *($4 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [44])) - *($1 + [40])) / (int_32)[12]))
	$0 = ($4 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$7 = ((int_64)$5) != (int_64)0
	*($2 + [8]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($4 + [8])) - $3) > (int_32)[0]), [17967])
	CALL memcpy(*($0), ($2 + [8]), [1])
	$3 = (*($0) + [1])
	*($0) = $3
	if ( $7 ){ goto $label$1 }
	$6 = *(($1 + [44]))
	$0 = *(($1 + [40]))
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $66($4, $0)
	$0 = ($0 + [12])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$3 }
	$3 = *(($4 + [4]))
	
.LABEL $label$2
	$6 = ($4 + [8])
	CALL eosio_assert(((int_32)(*($6) - $3) > (int_32)[7]), [17967])
	$0 = ($4 + [4])
	CALL memcpy(*($0), ($1 + [56]), [8])
	$3 = (*($0) + [8])
	*($0) = $3
	*($2 + [8]) = *(($1 + [64]))
	CALL eosio_assert(((int_32)(*($6) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0), ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL eosio_assert(((int_32)(*($6) - *($0)) > (int_32)[15]), [17967])
	CALL memcpy(*($0), ($1 + [80]), [16])
	*($0) = (*($0) + [16])
	$3 = CALL $67($4, ($1 + [96]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($3 + [4]), ($1 + [112]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	*($2 + [8]) = *(($1 + [120]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - $0) > (int_32)[7]), [17967])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [17967])
	CALL memcpy(*($3 + [4]), ($1 + [128]), [32])
	$6 = (*($3 + [4]) + [32])
	*($3 + [4]) = $6
	$5 = *($1 + [160])
	
.LOOP $label$4:
	$0 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$7 = ((int_64)$5) != (int_64)0
	*($2 + [8]) = (($7) << [7]) | ($0 & [127]))
	CALL eosio_assert(((int_32)(*(($3 + [8])) - $6) > (int_32)[0]), [17967])
	$0 = ($3 + [4])
	CALL memcpy(*($0), ($2 + [8]), [1])
	$6 = (*($0) + [1])
	*($0) = $6
	if ( $7 ){ goto $label$4 }
	$7 = ($3 + [8])
	CALL eosio_assert(((int_32)(*($7) - $6) > (int_32)[64]), [17967])
	$0 = ($3 + [4])
	CALL memcpy(*($0), ($1 + [164]), [65])
	$6 = (*($0) + [65])
	*($0) = $6
	CALL eosio_assert(((int_32)(*($7) - $6) > (int_32)[31]), [17967])
	CALL memcpy(*($0), ($1 + [240]), [32])
	$6 = (*($0) + [32])
	*($0) = $6
	CALL eosio_assert(((int_32)(*($7) - $6) > (int_32)[7]), [17967])
	CALL memcpy(*($0), ($1 + [272]), [8])
	*($0) = (*($0) + [8])
	$global$0 = ($2 + [16])
	return $3
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17967])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17967])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17967])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17967])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [3])
	if ( ((uint_32)$3 <= (uint_32)int_32(($4 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($4 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $3
	$4 = int_32($4 >> [2])
	if ( ($4 <= $3) ){ goto $label$6 }
	$5 = $4
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$3 = (($2 + [-8]) - $1)
	$4 = $5
	
.LOOP $label$7:
	*($4) = *($1)
	$4 = ($4 + [8])
	$1 = ($1 + [8])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	*(($0 + [4])) = (($5 + ($3 & [-8])) + [8])
	goto $label$3 
	
.LABEL $label$4
	$7 = int_32($6 >> [3])
	$6 = (*($0 + [4]) - $5)
	$4 = ($1 + $6)
	$8 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($8 - $1)
	if ( ($6 == 0) ){ goto $label$8 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$3 }
	$5 = (($2 + [-8]) - $8)
	$3 = *(($0 + [4]))
	$1 = $3
	
.LOOP $label$9:
	*($1) = *($4)
	$1 = ($1 + [8])
	$4 = ($4 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	*(($0 + [4])) = (($3 + ($5 & [-8])) + [8])
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + (int_32($6 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $107($0)
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [100]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18415])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7235159551873908736)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18361])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18361])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $3(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = (*($0) + [16])
	*($0) = $2
	$4 = *($1 + [16])
	$3 = *(($1 + [20]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$2 = (($5 & [-8]) + $2)
	
.LABEL $label$2
	*($0) = $2
	$4 = *($1 + [28])
	$3 = *(($1 + [32]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	$2 = (($5 & [-8]) + $2)
	
.LABEL $label$4
	*($0) = $2
	$3 = *($1 + [40])
	$5 = *(($1 + [44]))
	$6 = (CASTING uint_64)(uint_32 ((int_32)($5 - $3) / (int_32)[12]))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = *($3)
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$8 }
	*($0) = $2
	$4 = *($3)
	$4 = ( *(($3 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$9 }
	$2 = ($4 + $2)
	*($0) = $2
	
.LABEL $label$9
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$6
	$2 = ($2 + [32])
	*($0) = $2
	$4 = *($1 + [96])
	$3 = *(($1 + [100]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$10:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$10 }
	$2 = ( $2 ? ($5 + $2) : ((int_32)$4 == (int_32)$3) )
	*($0) = ($2 + [48])
	$2 = ($2 + [153])
	$6 = *($1 + [160])
	
.LOOP $label$11:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$11 }
	*($0) = $2
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $97($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $95($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $95($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $107($0)
}

void .FUNC $101 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $104($1, $0, [17199])
	CALL $105()
	(unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $118(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_64 .FUNC $103 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $119([17035])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [17035], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $108())
	*(CALL $108()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $116($4, ($3 + [12]), $2)
	$0 = CALL $108()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $101($3)
	
.LABEL $label$1
	CALL $102($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $102 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $104($1, $0, [17177])
	CALL $106()
	(unreachable)
}

void .FUNC $105 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $119($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $98($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $128($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $124($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $124($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $85 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_32 $51
	int_32 $52
	$0 = ($global$0 - [608])
	$global$0 = $0
	*(($0 + [16])) = [0]
	*($0 + [8]) = (int_64)0
	$1 = CALL $119([16896])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$50 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$53 }
	*($0 + [8]) = ($1 << [1])
	$2 = (($0 + [8]) | [1])
	if ( $1 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0 + [8]) = ($3 | [1])
	*($0 + [16]) = $2
	*($0 + [12]) = $1
	
.LABEL $label$52
	CALL memcpy($2, [16896], $1)
	
.LABEL $label$51
	*(($2 + $1)) = [0]
	*(($0 + [28])) = [0]
	*($0 + [20 align=4]) = (int_64)0
	$3 = ($0 + [20])
	$1 = CALL $119([16910])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$49 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$56 }
	*(($0 + [20])) = ($1 << [1])
	$2 = ($3 + [1])
	if ( $1 ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$4 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($4)
	*(($0 + [28])) = $2
	*((($0 + [8]) + [16])) = $1
	*($0 + [20]) = ($4 | [1])
	
.LABEL $label$55
	CALL memcpy($2, [16910], $1)
	
.LABEL $label$54
	*(($2 + $1)) = [0]
	*(($0 + [40])) = [0]
	*($0 + [32]) = (int_64)0
	$4 = ($0 + [32])
	$1 = CALL $119([17006])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$48 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$59 }
	*(($0 + [32])) = ($1 << [1])
	$2 = ($4 + [1])
	if ( $1 ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	$5 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($5)
	*(($0 + [40])) = $2
	*(($0 + [36])) = $1
	*($0 + [32]) = ($5 | [1])
	
.LABEL $label$58
	CALL memcpy($2, [17006], $1)
	
.LABEL $label$57
	*(($2 + $1)) = [0]
	*(($0 + [52])) = [0]
	*($0 + [44 align=4]) = (int_64)0
	$5 = ($0 + [44])
	$1 = CALL $119([17013])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$47 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$62 }
	*(($0 + [44])) = ($1 << [1])
	$2 = ($5 + [1])
	if ( $1 ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$6 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*(($0 + [52])) = $2
	*(($0 + [48])) = $1
	*($0 + [44]) = ($6 | [1])
	
.LABEL $label$61
	CALL memcpy($2, [17013], $1)
	
.LABEL $label$60
	*(($2 + $1)) = [0]
	*(($0 + [64])) = [0]
	*($0 + [56]) = (int_64)0
	$6 = ($0 + [56])
	$1 = CALL $119([17021])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$46 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$65 }
	*(($0 + [56])) = ($1 << [1])
	$2 = ($6 + [1])
	if ( $1 ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	$7 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*(($0 + [64])) = $2
	*(($0 + [60])) = $1
	*($0 + [56]) = ($7 | [1])
	
.LABEL $label$64
	CALL memcpy($2, [17021], $1)
	
.LABEL $label$63
	*(($2 + $1)) = [0]
	*(($0 + [76])) = [0]
	*($0 + [68 align=4]) = (int_64)0
	$7 = ($0 + [68])
	$1 = CALL $119([17028])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$45 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$68 }
	*(($0 + [68])) = ($1 << [1])
	$2 = ($7 + [1])
	if ( $1 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	$8 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($8)
	*(($0 + [76])) = $2
	*(($0 + [72])) = $1
	*($0 + [68]) = ($8 | [1])
	
.LABEL $label$67
	CALL memcpy($2, [17028], $1)
	
.LABEL $label$66
	*(($2 + $1)) = [0]
	*(($0 + [88])) = [0]
	*($0 + [80]) = (int_64)0
	$8 = ($0 + [80])
	$1 = CALL $119([17042])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$44 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$71 }
	*(($0 + [80])) = ($1 << [1])
	$2 = ($8 + [1])
	if ( $1 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	$9 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($9)
	*(($0 + [88])) = $2
	*(($0 + [84])) = $1
	*($0 + [80]) = ($9 | [1])
	
.LABEL $label$70
	CALL memcpy($2, [17042], $1)
	
.LABEL $label$69
	*(($2 + $1)) = [0]
	*(($0 + [100])) = [0]
	*($0 + [92 align=4]) = (int_64)0
	$9 = ($0 + [92])
	$1 = CALL $119([17049])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$43 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$74 }
	*(($0 + [92])) = ($1 << [1])
	$2 = ($9 + [1])
	if ( $1 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	$10 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($10)
	*(($0 + [100])) = $2
	*(($0 + [96])) = $1
	*($0 + [92]) = ($10 | [1])
	
.LABEL $label$73
	CALL memcpy($2, [17049], $1)
	
.LABEL $label$72
	*(($2 + $1)) = [0]
	*(($0 + [112])) = [0]
	*($0 + [104]) = (int_64)0
	$10 = ($0 + [104])
	$1 = CALL $119([17056])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$42 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$77 }
	*(($0 + [104])) = ($1 << [1])
	$2 = ($10 + [1])
	if ( $1 ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$77
	$11 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($11)
	*(($0 + [112])) = $2
	*(($0 + [108])) = $1
	*($0 + [104]) = ($11 | [1])
	
.LABEL $label$76
	CALL memcpy($2, [17056], $1)
	
.LABEL $label$75
	*(($2 + $1)) = [0]
	*(($0 + [124])) = [0]
	*($0 + [116 align=4]) = (int_64)0
	$11 = ($0 + [116])
	$1 = CALL $119([17063])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$41 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$80 }
	*(($0 + [116])) = ($1 << [1])
	$2 = ($11 + [1])
	if ( $1 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	$12 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($12)
	*(($0 + [124])) = $2
	*(($0 + [120])) = $1
	*($0 + [116]) = ($12 | [1])
	
.LABEL $label$79
	CALL memcpy($2, [17063], $1)
	
.LABEL $label$78
	*(($2 + $1)) = [0]
	*(($0 + [136])) = [0]
	*($0 + [128]) = (int_64)0
	$12 = ($0 + [128])
	$1 = CALL $119([17070])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$40 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$83 }
	*(($0 + [128])) = ($1 << [1])
	$2 = ($12 + [1])
	if ( $1 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$83
	$13 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($13)
	*(($0 + [136])) = $2
	*(($0 + [132])) = $1
	*($0 + [128]) = ($13 | [1])
	
.LABEL $label$82
	CALL memcpy($2, [17070], $1)
	
.LABEL $label$81
	*(($2 + $1)) = [0]
	*(($0 + [148])) = [0]
	*($0 + [140 align=4]) = (int_64)0
	$13 = ($0 + [140])
	$1 = CALL $119([17079])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$39 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$86 }
	*(($0 + [140])) = ($1 << [1])
	$2 = ($13 + [1])
	if ( $1 ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	$14 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($14)
	*(($0 + [148])) = $2
	*(($0 + [144])) = $1
	*($0 + [140]) = ($14 | [1])
	
.LABEL $label$85
	CALL memcpy($2, [17079], $1)
	
.LABEL $label$84
	*(($2 + $1)) = [0]
	*(($0 + [160])) = [0]
	*($0 + [152]) = (int_64)0
	$14 = ($0 + [152])
	$1 = CALL $119([17085])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$89 }
	*(($0 + [152])) = ($1 << [1])
	$2 = ($14 + [1])
	if ( $1 ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$89
	$15 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($15)
	*(($0 + [160])) = $2
	*(($0 + [156])) = $1
	*($0 + [152]) = ($15 | [1])
	
.LABEL $label$88
	CALL memcpy($2, [17085], $1)
	
.LABEL $label$87
	*(($2 + $1)) = [0]
	*(($0 + [172])) = [0]
	*($0 + [164 align=4]) = (int_64)0
	$15 = ($0 + [164])
	$1 = CALL $119([17092])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$92 }
	*(($0 + [164])) = ($1 << [1])
	$2 = ($15 + [1])
	if ( $1 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	$16 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($16)
	*(($0 + [172])) = $2
	*(($0 + [168])) = $1
	*($0 + [164]) = ($16 | [1])
	
.LABEL $label$91
	CALL memcpy($2, [17092], $1)
	
.LABEL $label$90
	*(($2 + $1)) = [0]
	*(($0 + [184])) = [0]
	*($0 + [176]) = (int_64)0
	$16 = ($0 + [176])
	$1 = CALL $119([17097])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$95 }
	*(($0 + [176])) = ($1 << [1])
	$2 = ($16 + [1])
	if ( $1 ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$95
	$17 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($17)
	*(($0 + [184])) = $2
	*(($0 + [180])) = $1
	*($0 + [176]) = ($17 | [1])
	
.LABEL $label$94
	CALL memcpy($2, [17097], $1)
	
.LABEL $label$93
	*(($2 + $1)) = [0]
	*(($0 + [196])) = [0]
	*($0 + [188 align=4]) = (int_64)0
	$17 = ($0 + [188])
	$1 = CALL $119([17106])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$35 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$98 }
	*(($0 + [188])) = ($1 << [1])
	$2 = ($17 + [1])
	if ( $1 ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$98
	$18 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($18)
	*(($0 + [196])) = $2
	*(($0 + [192])) = $1
	*($0 + [188]) = ($18 | [1])
	
.LABEL $label$97
	CALL memcpy($2, [17106], $1)
	
.LABEL $label$96
	*(($2 + $1)) = [0]
	*(($0 + [208])) = [0]
	*($0 + [200]) = (int_64)0
	$18 = ($0 + [200])
	$1 = CALL $119([17113])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$101 }
	*(($0 + [200])) = ($1 << [1])
	$2 = ($18 + [1])
	if ( $1 ){ goto $label$100 }
	goto $label$99 
	
.LABEL $label$101
	$19 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($19)
	*(($0 + [208])) = $2
	*(($0 + [204])) = $1
	*($0 + [200]) = ($19 | [1])
	
.LABEL $label$100
	CALL memcpy($2, [17113], $1)
	
.LABEL $label$99
	*(($2 + $1)) = [0]
	*(($0 + [220])) = [0]
	*($0 + [212 align=4]) = (int_64)0
	$19 = ($0 + [212])
	$1 = CALL $119([17118])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$104 }
	*(($0 + [212])) = ($1 << [1])
	$2 = ($19 + [1])
	if ( $1 ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$104
	$20 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($20)
	*(($0 + [220])) = $2
	*(($0 + [216])) = $1
	*($0 + [212]) = ($20 | [1])
	
.LABEL $label$103
	CALL memcpy($2, [17118], $1)
	
.LABEL $label$102
	*(($2 + $1)) = [0]
	*(($0 + [232])) = [0]
	*($0 + [224]) = (int_64)0
	$20 = ($0 + [224])
	$1 = CALL $119([17126])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$107 }
	*(($0 + [224])) = ($1 << [1])
	$2 = ($20 + [1])
	if ( $1 ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$107
	$21 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($21)
	*(($0 + [232])) = $2
	*(($0 + [228])) = $1
	*($0 + [224]) = ($21 | [1])
	
.LABEL $label$106
	CALL memcpy($2, [17126], $1)
	
.LABEL $label$105
	*(($2 + $1)) = [0]
	*(($0 + [244])) = [0]
	*($0 + [236 align=4]) = (int_64)0
	$21 = ($0 + [236])
	$1 = CALL $119([17133])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$110 }
	*(($0 + [236])) = ($1 << [1])
	$2 = ($21 + [1])
	if ( $1 ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$110
	$22 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($22)
	*(($0 + [244])) = $2
	*(($0 + [240])) = $1
	*($0 + [236]) = ($22 | [1])
	
.LABEL $label$109
	CALL memcpy($2, [17133], $1)
	
.LABEL $label$108
	*(($2 + $1)) = [0]
	*(($0 + [256])) = [0]
	*($0 + [248]) = (int_64)0
	$22 = ($0 + [248])
	$1 = CALL $119([17140])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$113 }
	*(($0 + [248])) = ($1 << [1])
	$2 = ($22 + [1])
	if ( $1 ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$113
	$23 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($23)
	*(($0 + [256])) = $2
	*(($0 + [252])) = $1
	*($0 + [248]) = ($23 | [1])
	
.LABEL $label$112
	CALL memcpy($2, [17140], $1)
	
.LABEL $label$111
	*(($2 + $1)) = [0]
	*(($0 + [268])) = [0]
	*($0 + [260 align=4]) = (int_64)0
	$23 = ($0 + [260])
	$1 = CALL $119([17145])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$116 }
	*(($0 + [260])) = ($1 << [1])
	$2 = ($23 + [1])
	if ( $1 ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$116
	$24 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($24)
	*(($0 + [268])) = $2
	*(($0 + [264])) = $1
	*($0 + [260]) = ($24 | [1])
	
.LABEL $label$115
	CALL memcpy($2, [17145], $1)
	
.LABEL $label$114
	*(($2 + $1)) = [0]
	*(($0 + [280])) = [0]
	*($0 + [272]) = (int_64)0
	$24 = ($0 + [272])
	$1 = CALL $119([17151])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$119 }
	*(($0 + [272])) = ($1 << [1])
	$2 = ($24 + [1])
	if ( $1 ){ goto $label$118 }
	goto $label$117 
	
.LABEL $label$119
	$25 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($25)
	*(($0 + [280])) = $2
	*(($0 + [276])) = $1
	*($0 + [272]) = ($25 | [1])
	
.LABEL $label$118
	CALL memcpy($2, [17151], $1)
	
.LABEL $label$117
	*(($2 + $1)) = [0]
	*(($0 + [292])) = [0]
	*($0 + [284 align=4]) = (int_64)0
	$25 = ($0 + [284])
	$1 = CALL $119([17157])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$122 }
	*(($0 + [284])) = ($1 << [1])
	$2 = ($25 + [1])
	if ( $1 ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$122
	$26 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($26)
	*(($0 + [292])) = $2
	*(($0 + [288])) = $1
	*($0 + [284]) = ($26 | [1])
	
.LABEL $label$121
	CALL memcpy($2, [17157], $1)
	
.LABEL $label$120
	*(($2 + $1)) = [0]
	*(($0 + [304])) = [0]
	*($0 + [296]) = (int_64)0
	$26 = ($0 + [296])
	$1 = CALL $119([17167])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$125 }
	*(($0 + [296])) = ($1 << [1])
	$2 = ($26 + [1])
	if ( $1 ){ goto $label$124 }
	goto $label$123 
	
.LABEL $label$125
	$27 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($27)
	*(($0 + [304])) = $2
	*(($0 + [300])) = $1
	*($0 + [296]) = ($27 | [1])
	
.LABEL $label$124
	CALL memcpy($2, [17167], $1)
	
.LABEL $label$123
	*(($2 + $1)) = [0]
	*(($0 + [316])) = [0]
	*($0 + [308 align=4]) = (int_64)0
	$27 = ($0 + [308])
	$1 = CALL $119([17173])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$128 }
	*(($0 + [308])) = ($1 << [1])
	$2 = ($27 + [1])
	if ( $1 ){ goto $label$127 }
	goto $label$126 
	
.LABEL $label$128
	$28 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($28)
	*(($0 + [316])) = $2
	*(($0 + [312])) = $1
	*($0 + [308]) = ($28 | [1])
	
.LABEL $label$127
	CALL memcpy($2, [17173], $1)
	
.LABEL $label$126
	*(($2 + $1)) = [0]
	*(($0 + [328])) = [0]
	*($0 + [320]) = (int_64)0
	$28 = ($0 + [320])
	$1 = CALL $119([17193])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$131 }
	*(($0 + [320])) = ($1 << [1])
	$2 = ($28 + [1])
	if ( $1 ){ goto $label$130 }
	goto $label$129 
	
.LABEL $label$131
	$29 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($29)
	*(($0 + [328])) = $2
	*(($0 + [324])) = $1
	*($0 + [320]) = ($29 | [1])
	
.LABEL $label$130
	CALL memcpy($2, [17193], $1)
	
.LABEL $label$129
	*(($2 + $1)) = [0]
	*(($0 + [340])) = [0]
	*($0 + [332 align=4]) = (int_64)0
	$29 = ($0 + [332])
	$1 = CALL $119([17214])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$134 }
	*(($0 + [332])) = ($1 << [1])
	$2 = ($29 + [1])
	if ( $1 ){ goto $label$133 }
	goto $label$132 
	
.LABEL $label$134
	$30 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($30)
	*(($0 + [340])) = $2
	*(($0 + [336])) = $1
	*($0 + [332]) = ($30 | [1])
	
.LABEL $label$133
	CALL memcpy($2, [17214], $1)
	
.LABEL $label$132
	*(($2 + $1)) = [0]
	*(($0 + [352])) = [0]
	*($0 + [344]) = (int_64)0
	$30 = ($0 + [344])
	$1 = CALL $119([17223])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$137 }
	*(($0 + [344])) = ($1 << [1])
	$2 = ($30 + [1])
	if ( $1 ){ goto $label$136 }
	goto $label$135 
	
.LABEL $label$137
	$31 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($31)
	*(($0 + [352])) = $2
	*(($0 + [348])) = $1
	*($0 + [344]) = ($31 | [1])
	
.LABEL $label$136
	CALL memcpy($2, [17223], $1)
	
.LABEL $label$135
	*(($2 + $1)) = [0]
	*(($0 + [364])) = [0]
	*($0 + [356 align=4]) = (int_64)0
	$31 = ($0 + [356])
	$1 = CALL $119([17229])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$140 }
	*(($0 + [356])) = ($1 << [1])
	$2 = ($31 + [1])
	if ( $1 ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$140
	$32 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($32)
	*(($0 + [364])) = $2
	*(($0 + [360])) = $1
	*($0 + [356]) = ($32 | [1])
	
.LABEL $label$139
	CALL memcpy($2, [17229], $1)
	
.LABEL $label$138
	*(($2 + $1)) = [0]
	*(($0 + [376])) = [0]
	*($0 + [368]) = (int_64)0
	$32 = ($0 + [368])
	$1 = CALL $119([17237])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$143 }
	*(($0 + [368])) = ($1 << [1])
	$2 = ($32 + [1])
	if ( $1 ){ goto $label$142 }
	goto $label$141 
	
.LABEL $label$143
	$33 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($33)
	*(($0 + [376])) = $2
	*(($0 + [372])) = $1
	*($0 + [368]) = ($33 | [1])
	
.LABEL $label$142
	CALL memcpy($2, [17237], $1)
	
.LABEL $label$141
	*(($2 + $1)) = [0]
	*(($0 + [388])) = [0]
	*($0 + [380 align=4]) = (int_64)0
	$33 = ($0 + [380])
	$1 = CALL $119([17243])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$146 }
	*(($0 + [380])) = ($1 << [1])
	$2 = ($33 + [1])
	if ( $1 ){ goto $label$145 }
	goto $label$144 
	
.LABEL $label$146
	$34 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($34)
	*(($0 + [388])) = $2
	*(($0 + [384])) = $1
	*($0 + [380]) = ($34 | [1])
	
.LABEL $label$145
	CALL memcpy($2, [17243], $1)
	
.LABEL $label$144
	*(($2 + $1)) = [0]
	*(($0 + [400])) = [0]
	*($0 + [392]) = (int_64)0
	$34 = ($0 + [392])
	$1 = CALL $119([17249])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$149 }
	*(($0 + [392])) = ($1 << [1])
	$2 = ($34 + [1])
	if ( $1 ){ goto $label$148 }
	goto $label$147 
	
.LABEL $label$149
	$35 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($35)
	*(($0 + [400])) = $2
	*(($0 + [396])) = $1
	*($0 + [392]) = ($35 | [1])
	
.LABEL $label$148
	CALL memcpy($2, [17249], $1)
	
.LABEL $label$147
	*(($2 + $1)) = [0]
	*(($0 + [412])) = [0]
	*($0 + [404 align=4]) = (int_64)0
	$35 = ($0 + [404])
	$1 = CALL $119([17260])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$152 }
	*(($0 + [404])) = ($1 << [1])
	$2 = ($35 + [1])
	if ( $1 ){ goto $label$151 }
	goto $label$150 
	
.LABEL $label$152
	$36 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($36)
	*(($0 + [412])) = $2
	*(($0 + [408])) = $1
	*($0 + [404]) = ($36 | [1])
	
.LABEL $label$151
	CALL memcpy($2, [17260], $1)
	
.LABEL $label$150
	*(($2 + $1)) = [0]
	*(($0 + [424])) = [0]
	*($0 + [416]) = (int_64)0
	$36 = ($0 + [416])
	$1 = CALL $119([17266])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$155 }
	*(($0 + [416])) = ($1 << [1])
	$2 = ($36 + [1])
	if ( $1 ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	$37 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($37)
	*(($0 + [424])) = $2
	*(($0 + [420])) = $1
	*($0 + [416]) = ($37 | [1])
	
.LABEL $label$154
	CALL memcpy($2, [17266], $1)
	
.LABEL $label$153
	*(($2 + $1)) = [0]
	*(($0 + [436])) = [0]
	*($0 + [428 align=4]) = (int_64)0
	$37 = ($0 + [428])
	$1 = CALL $119([17271])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$158 }
	*(($0 + [428])) = ($1 << [1])
	$2 = ($37 + [1])
	if ( $1 ){ goto $label$157 }
	goto $label$156 
	
.LABEL $label$158
	$38 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($38)
	*(($0 + [436])) = $2
	*(($0 + [432])) = $1
	*($0 + [428]) = ($38 | [1])
	
.LABEL $label$157
	CALL memcpy($2, [17271], $1)
	
.LABEL $label$156
	*(($2 + $1)) = [0]
	*(($0 + [448])) = [0]
	*($0 + [440]) = (int_64)0
	$38 = ($0 + [440])
	$1 = CALL $119([17280])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$161 }
	*(($0 + [440])) = ($1 << [1])
	$2 = ($38 + [1])
	if ( $1 ){ goto $label$160 }
	goto $label$159 
	
.LABEL $label$161
	$39 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($39)
	*(($0 + [448])) = $2
	*(($0 + [444])) = $1
	*($0 + [440]) = ($39 | [1])
	
.LABEL $label$160
	CALL memcpy($2, [17280], $1)
	
.LABEL $label$159
	*(($2 + $1)) = [0]
	*(($0 + [460])) = [0]
	*($0 + [452 align=4]) = (int_64)0
	$39 = ($0 + [452])
	$1 = CALL $119([17286])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$164 }
	*(($0 + [452])) = ($1 << [1])
	$2 = ($39 + [1])
	if ( $1 ){ goto $label$163 }
	goto $label$162 
	
.LABEL $label$164
	$40 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($40)
	*(($0 + [460])) = $2
	*(($0 + [456])) = $1
	*($0 + [452]) = ($40 | [1])
	
.LABEL $label$163
	CALL memcpy($2, [17286], $1)
	
.LABEL $label$162
	*(($2 + $1)) = [0]
	*(($0 + [472])) = [0]
	*($0 + [464]) = (int_64)0
	$40 = ($0 + [464])
	$1 = CALL $119([17292])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$167 }
	*(($0 + [464])) = ($1 << [1])
	$2 = ($40 + [1])
	if ( $1 ){ goto $label$166 }
	goto $label$165 
	
.LABEL $label$167
	$41 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($41)
	*(($0 + [472])) = $2
	*(($0 + [468])) = $1
	*($0 + [464]) = ($41 | [1])
	
.LABEL $label$166
	CALL memcpy($2, [17292], $1)
	
.LABEL $label$165
	*(($2 + $1)) = [0]
	*(($0 + [484])) = [0]
	*($0 + [476 align=4]) = (int_64)0
	$41 = ($0 + [476])
	$1 = CALL $119([17300])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$170 }
	*(($0 + [476])) = ($1 << [1])
	$2 = ($41 + [1])
	if ( $1 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$42 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($42)
	*(($0 + [484])) = $2
	*(($0 + [480])) = $1
	*($0 + [476]) = ($42 | [1])
	
.LABEL $label$169
	CALL memcpy($2, [17300], $1)
	
.LABEL $label$168
	*(($2 + $1)) = [0]
	*(($0 + [496])) = [0]
	*($0 + [488]) = (int_64)0
	$42 = ($0 + [488])
	$1 = CALL $119([17308])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$173 }
	*(($0 + [488])) = ($1 << [1])
	$2 = ($42 + [1])
	if ( $1 ){ goto $label$172 }
	goto $label$171 
	
.LABEL $label$173
	$43 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($43)
	*(($0 + [496])) = $2
	*(($0 + [492])) = $1
	*($0 + [488]) = ($43 | [1])
	
.LABEL $label$172
	CALL memcpy($2, [17308], $1)
	
.LABEL $label$171
	*(($2 + $1)) = [0]
	*(($0 + [508])) = [0]
	*($0 + [500 align=4]) = (int_64)0
	$43 = ($0 + [500])
	$1 = CALL $119([17317])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$176 }
	*(($0 + [500])) = ($1 << [1])
	$2 = ($43 + [1])
	if ( $1 ){ goto $label$175 }
	goto $label$174 
	
.LABEL $label$176
	$44 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($44)
	*(($0 + [508])) = $2
	*(($0 + [504])) = $1
	*($0 + [500]) = ($44 | [1])
	
.LABEL $label$175
	CALL memcpy($2, [17317], $1)
	
.LABEL $label$174
	*(($2 + $1)) = [0]
	*(($0 + [520])) = [0]
	*($0 + [512]) = (int_64)0
	$44 = ($0 + [512])
	$1 = CALL $119([17325])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$179 }
	*(($0 + [512])) = ($1 << [1])
	$2 = ($44 + [1])
	if ( $1 ){ goto $label$178 }
	goto $label$177 
	
.LABEL $label$179
	$45 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($45)
	*(($0 + [520])) = $2
	*(($0 + [516])) = $1
	*($0 + [512]) = ($45 | [1])
	
.LABEL $label$178
	CALL memcpy($2, [17325], $1)
	
.LABEL $label$177
	*(($2 + $1)) = [0]
	*(($0 + [532])) = [0]
	*($0 + [524 align=4]) = (int_64)0
	$45 = ($0 + [524])
	$1 = CALL $119([17335])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$182 }
	*(($0 + [524])) = ($1 << [1])
	$2 = ($45 + [1])
	if ( $1 ){ goto $label$181 }
	goto $label$180 
	
.LABEL $label$182
	$46 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($46)
	*(($0 + [532])) = $2
	*(($0 + [528])) = $1
	*($0 + [524]) = ($46 | [1])
	
.LABEL $label$181
	CALL memcpy($2, [17335], $1)
	
.LABEL $label$180
	*(($2 + $1)) = [0]
	*(($0 + [544])) = [0]
	*($0 + [536]) = (int_64)0
	$46 = ($0 + [536])
	$1 = CALL $119([17341])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$185 }
	*(($0 + [536])) = ($1 << [1])
	$2 = ($46 + [1])
	if ( $1 ){ goto $label$184 }
	goto $label$183 
	
.LABEL $label$185
	$47 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($47)
	*(($0 + [544])) = $2
	*(($0 + [540])) = $1
	*($0 + [536]) = ($47 | [1])
	
.LABEL $label$184
	CALL memcpy($2, [17341], $1)
	
.LABEL $label$183
	*(($2 + $1)) = [0]
	*(($0 + [556])) = [0]
	*($0 + [548 align=4]) = (int_64)0
	$47 = ($0 + [548])
	$1 = CALL $119([17349])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$188 }
	*(($0 + [548])) = ($1 << [1])
	$2 = ($47 + [1])
	if ( $1 ){ goto $label$187 }
	goto $label$186 
	
.LABEL $label$188
	$48 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($48)
	*(($0 + [556])) = $2
	*(($0 + [552])) = $1
	*($0 + [548]) = ($48 | [1])
	
.LABEL $label$187
	CALL memcpy($2, [17349], $1)
	
.LABEL $label$186
	*(($2 + $1)) = [0]
	*(($0 + [568])) = [0]
	*($0 + [560]) = (int_64)0
	$48 = ($0 + [560])
	$1 = CALL $119([17355])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$191 }
	*(($0 + [560])) = ($1 << [1])
	$2 = ($48 + [1])
	if ( $1 ){ goto $label$190 }
	goto $label$189 
	
.LABEL $label$191
	$49 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($49)
	*(($0 + [568])) = $2
	*(($0 + [564])) = $1
	*($0 + [560]) = ($49 | [1])
	
.LABEL $label$190
	CALL memcpy($2, [17355], $1)
	
.LABEL $label$189
	*(($2 + $1)) = [0]
	*(($0 + [580])) = [0]
	*($0 + [572 align=4]) = (int_64)0
	$49 = ($0 + [572])
	$1 = CALL $119([17360])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$194 }
	*(($0 + [572])) = ($1 << [1])
	$2 = ($49 + [1])
	if ( $1 ){ goto $label$193 }
	goto $label$192 
	
.LABEL $label$194
	$50 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($50)
	*(($0 + [580])) = $2
	*(($0 + [576])) = $1
	*($0 + [572]) = ($50 | [1])
	
.LABEL $label$193
	CALL memcpy($2, [17360], $1)
	
.LABEL $label$192
	*(($2 + $1)) = [0]
	*(($0 + [592])) = [0]
	*($0 + [584]) = (int_64)0
	$50 = ($0 + [584])
	$1 = CALL $119([17365])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$197 }
	*(($0 + [584])) = ($1 << [1])
	$2 = ($50 + [1])
	if ( $1 ){ goto $label$196 }
	goto $label$195 
	
.LABEL $label$197
	$51 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($51)
	*(($0 + [592])) = $2
	*(($0 + [588])) = $1
	*($0 + [584]) = ($51 | [1])
	
.LABEL $label$196
	CALL memcpy($2, [17365], $1)
	
.LABEL $label$195
	*(($2 + $1)) = [0]
	*(($0 + [604])) = [0]
	*($0 + [596 align=4]) = (int_64)0
	$51 = ($0 + [596])
	$1 = CALL $119([17370])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$200 }
	*(($0 + [596])) = ($1 << [1])
	$2 = ($51 + [1])
	if ( $1 ){ goto $label$199 }
	goto $label$198 
	
.LABEL $label$200
	$52 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($52)
	*(($0 + [604])) = $2
	*(($0 + [600])) = $1
	*($0 + [596]) = ($52 | [1])
	
.LABEL $label$199
	CALL memcpy($2, [17370], $1)
	
.LABEL $label$198
	*(($2 + $1)) = [0]
	*([0] + [8192 align=4]) = (int_64)0
	*([0] + [8200]) = [0]
	$1 = [600]
	$2 = CALL _Znwj([600])
	*([0] + [8192]) = $2
	*([0] + [8196]) = $2
	*([0] + [8200]) = ($2 + [600])
	CALL $95($2, ($0 + [8]))
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $3)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $4)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $5)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $6)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $7)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $8)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $9)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $10)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $11)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $12)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $13)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $14)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $15)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $16)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $17)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $18)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $19)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $20)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $21)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $22)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $23)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $24)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $25)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $26)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $27)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $28)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $29)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $30)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $31)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $32)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $33)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $34)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $35)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $36)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $37)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $38)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $39)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $40)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $41)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $42)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $43)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $44)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $45)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $46)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $47)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $48)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $49)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $50)
	$2 = (*([0] + [8196]) + [12])
	*([0] + [8196]) = $2
	CALL $95($2, $51)
	*([0] + [8196]) = (*([0] + [8196]) + [12])
	
.LOOP $label$201:
	$2 = (($0 + [8]) + $1)
	if ( ((*(($2 + [-12])) & [1]) == 0) ){ goto $label$202 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$202
	$1 = ($1 + [-12])
	if ( $1 ){ goto $label$201 }
	CALL $110([6], [0], [8192])
	$global$0 = ($0 + [608])
	return (unreachable)
	
.LABEL $label$50
	CALL $94(($0 + [8]))
	
.LABEL $label$49
	CALL $94($3)
	
.LABEL $label$48
	CALL $94($4)
	
.LABEL $label$47
	CALL $94($5)
	
.LABEL $label$46
	CALL $94($6)
	
.LABEL $label$45
	CALL $94($7)
	
.LABEL $label$44
	CALL $94($8)
	
.LABEL $label$43
	CALL $94($9)
	
.LABEL $label$42
	CALL $94($10)
	
.LABEL $label$41
	CALL $94($11)
	
.LABEL $label$40
	CALL $94($12)
	
.LABEL $label$39
	CALL $94($13)
	
.LABEL $label$38
	CALL $94($14)
	
.LABEL $label$37
	CALL $94($15)
	
.LABEL $label$36
	CALL $94($16)
	
.LABEL $label$35
	CALL $94($17)
	
.LABEL $label$34
	CALL $94($18)
	
.LABEL $label$33
	CALL $94($19)
	
.LABEL $label$32
	CALL $94($20)
	
.LABEL $label$31
	CALL $94($21)
	
.LABEL $label$30
	CALL $94($22)
	
.LABEL $label$29
	CALL $94($23)
	
.LABEL $label$28
	CALL $94($24)
	
.LABEL $label$27
	CALL $94($25)
	
.LABEL $label$26
	CALL $94($26)
	
.LABEL $label$25
	CALL $94($27)
	
.LABEL $label$24
	CALL $94($28)
	
.LABEL $label$23
	CALL $94($29)
	
.LABEL $label$22
	CALL $94($30)
	
.LABEL $label$21
	CALL $94($31)
	
.LABEL $label$20
	CALL $94($32)
	
.LABEL $label$19
	CALL $94($33)
	
.LABEL $label$18
	CALL $94($34)
	
.LABEL $label$17
	CALL $94($35)
	
.LABEL $label$16
	CALL $94($36)
	
.LABEL $label$15
	CALL $94($37)
	
.LABEL $label$14
	CALL $94($38)
	
.LABEL $label$13
	CALL $94($39)
	
.LABEL $label$12
	CALL $94($40)
	
.LABEL $label$11
	CALL $94($41)
	
.LABEL $label$10
	CALL $94($42)
	
.LABEL $label$9
	CALL $94($43)
	
.LABEL $label$8
	CALL $94($44)
	
.LABEL $label$7
	CALL $94($45)
	
.LABEL $label$6
	CALL $94($46)
	
.LABEL $label$5
	CALL $94($47)
	
.LABEL $label$4
	CALL $94($48)
	
.LABEL $label$3
	CALL $94($49)
	
.LABEL $label$2
	CALL $94($50)
	
.LABEL $label$1
	CALL $94($51)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy($1, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18253])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($1 + [8]) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [16]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18253])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [32]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [40]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18253])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($1 + [68]) = *(*($0 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $65($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [80]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $107($0)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	$2 = *($3 + [96])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($3 + [100])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($3 + [44])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($6 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$7
	$6 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$2 = *($3 + [28])
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$2 = *($3 + [16])
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18898])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $73($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $74($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18898])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $72($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [18253])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18898])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $28($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18253])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $107($0)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $76($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $99($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $99($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $94($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17967])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17967])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [280]) == (int_32)$0), [18691])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18737])
	*(($5 = $4) + [40]) = *(($1 + [272]))
	$6 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [64]))), [17973])
	$7 = ((int_64)*($1 + [56]) + (int_64)*($3))
	*($1 + [56]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [18016])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [18035])
	CALL $46(($5 + [8]), $1)
	$7 = *($5 + [8])
	*(($1 + [88])) = *(($5 + [16]))
	*($1 + [80]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18788])
	*($5 + [24]) = [0]
	CALL $63(($5 + [24]), $1)
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $124($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [28]) = $4
	*($5 + [24]) = $4
	*($5 + [32]) = ($4 + $3)
	CALL $64(($5 + [24]), $1)
	CALL db_update_i64(*(($1 + [284])), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $128($4)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [56]) = *(($1 + [272]))
	if ( (CALL $118(($5 + [40]), ($5 + [56]), [8]) == 0) ){ goto $label$5 }
	$4 = *($1 + [288])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$6 }
	$4 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4812882902415048704, ($5 + [48]), $6)
	*(($1 + [288])) = $4
	
.LABEL $label$6
	CALL db_idx64_update($4, $2, ($5 + [56]))
	
.LABEL $label$5
	$global$0 = ($5 + [64])
}

void .FUNC $37 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *($0)
	*($4 + [44]) = [6]
	*($4 + [40]) = [17884]
	*($4 + [32]) = *($4 + [40])
	$6 = *(CALL $27(($4 + [72]), ($4 + [32])))
	*($4 + [44]) = [4]
	*($4 + [40]) = [18053]
	*($4 + [24]) = *($4 + [40])
	$7 = *(CALL $27(($4 + [72]), ($4 + [24])))
	*((($4 + [40]) + [16])) = *(($3 + [8]))
	*($4 + [40]) = $1
	*($4 + [72]) = (int_64)7035937925206713216
	*($4 + [80]) = $7
	*($4 + [48]) = *($3)
	*($4 + [64]) = *($0)
	*(($8 = CALL _Znwj([16]))) = $5
	*($8 + [8]) = $6
	*(($4 + [108])) = [0]
	$9 = ($8 + [16])
	*(($4 + [96])) = $9
	*(($4 + [92])) = $9
	*($4 + [88]) = $8
	*($4 + [100 align=4]) = (int_64)0
	CALL $28(($4 + [100]), [32])
	$8 = *((($4 + [72]) + [32]))
	$9 = *($4 + [100])
	*($4 + [132]) = $9
	*($4 + [128]) = $9
	*($4 + [136]) = $8
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [40])
	CALL $39(($4 + [120]), ($4 + [112]))
	CALL $30(($4 + [128]), ($4 + [72]))
	$8 = *($4 + [128])
	CALL send_inline($8, (*($4 + [132]) - $8))
	$8 = *($4 + [128])
	if ( ($8 == 0) ){ goto $label$1 }
	*($4 + [132]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$8 = *($4 + [100])
	if ( ($8 == 0) ){ goto $label$2 }
	*(($4 + [104])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$2
	$8 = *($4 + [88])
	if ( ($8 == 0) ){ goto $label$3 }
	*(($4 + [92])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$3
	$8 = [0]
	*($4 + [44]) = [0]
	*($4 + [40]) = [18057]
	*($4 + [16]) = *($4 + [40])
	if ( ((int_64)*(CALL $27(($4 + [72]), ($4 + [16]))) == (int_64)$2) ){ goto $label$4 }
	$7 = *($0)
	*($4 + [44]) = [6]
	*($4 + [40]) = [17884]
	*($4 + [8]) = *($4 + [40])
	$10 = *(CALL $27(($4 + [72]), ($4 + [8])))
	*($4 + [44]) = [4]
	*($4 + [40]) = [18053]
	*($4) = *($4 + [40])
	$11 = *(CALL $27(($4 + [72]), $4))
	$5 = *($3)
	$6 = *($3 + [8])
	CALL eosio_assert([1], [17898])
	$1 = (uint_64)$6 >> (uint_64)(int_64)8)
	$12 = ((uint_64)((int_64)$5 * (int_64)50) / (uint_64)(int_64)100)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$1 = $5
	$3 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$1 = $5
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $3 ){ goto $label$9 }
	$3 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$3 = [0]
	
.LABEL $label$5
	CALL eosio_assert($3, [17947])
	*((($4 + [40]) + [16])) = $6
	*($4 + [48]) = $12
	*($4 + [40]) = $2
	*($4 + [72]) = (int_64)7035937925206713216
	*($4 + [80]) = $11
	*($4 + [64]) = *($0)
	*(($8 = CALL _Znwj([16]))) = $7
	*($8 + [8]) = $10
	*(($4 + [108])) = [0]
	$3 = ($8 + [16])
	*(($4 + [96])) = $3
	*(($4 + [92])) = $3
	*($4 + [88]) = $8
	*($4 + [100 align=4]) = (int_64)0
	CALL $28(($4 + [100]), [32])
	$8 = *((($4 + [72]) + [32]))
	$3 = *($4 + [100])
	*($4 + [132]) = $3
	*($4 + [128]) = $3
	*($4 + [136]) = $8
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [40])
	CALL $39(($4 + [120]), ($4 + [112]))
	CALL $30(($4 + [128]), ($4 + [72]))
	$8 = *($4 + [128])
	CALL send_inline($8, (*($4 + [132]) - $8))
	$8 = *($4 + [128])
	if ( ($8 == 0) ){ goto $label$10 }
	*($4 + [132]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($4 + [100])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($4 + [104])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$8 = *($4 + [88])
	if ( ($8 == 0) ){ goto $label$4 }
	*(($4 + [92])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18230])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $124($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = $0
	CALL $79(($3 + [32]), $5)
	*($5 + [92]) = $1
	*($5 + [96 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $35(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $69($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18253])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [80])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$6 = ($global$0 - [400])
	$global$0 = $6
	*($6 + [256]) = $4
	*($6 + [264]) = $1
	CALL require_auth($1)
	$7 = [0]
	*(($6 + [248])) = [0]
	*($6 + [232]) = (int_64)-1
	$1 = *($0)
	*($6 + [216]) = $1
	*($6 + [224]) = $1
	*($6 + [240]) = (int_64)0
	$8 = [0]
	$9 = CALL db_lowerbound_i64($1, $1, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $3(($6 + [216]), $9)
	
.LABEL $label$1
	*($6 + [212]) = $8
	*($6 + [208]) = ($6 + [216])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [17402])
	CALL eosio_assert(((int_32)*(*($6 + [212]) + [58]) ^ (int_32)[1]), [17520])
	CALL eosio_assert(((int_64)*(*($6 + [212]) + [8]) == (int_64)$2), [17547])
	$8 = *($6 + [212])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($8 + [72]))), [17825])
	if ( ((int_64)*($5) < (int_64)*($8 + [64])) ){ goto $label$2 }
	$8 = *($6 + [212])
	CALL eosio_assert(((int_64)*(($5 + [8])) == (int_64)*(($8 + [88]))), [17825])
	$7 = ((int_64)*($5) <= (int_64)*($8 + [80]))
	
.LABEL $label$2
	CALL eosio_assert($7, [17564])
	$8 = *($6 + [212])
	*($6 + [200]) = *($8 + [16])
	$10 = [0]
	*(($6 + [192])) = [0]
	*($6 + [184]) = (int_64)0
	*($6 + [196]) = [0]
	*($6 + [176]) = (int_64)-1
	$1 = *($0)
	*($6 + [160]) = $1
	*($6 + [168]) = $1
	$8 = CALL db_find_i64($1, $1, (int_64)-4812882902415048704, *($8 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $13(($6 + [160]), $8)
	CALL eosio_assert(((int_32)*($10 + [280]) == (int_32)($6 + [160])), [18847])
	
.LABEL $label$3
	CALL eosio_assert(((uint_64)*($10 + [8]) > (uint_64)((int_64)((uint_64)CALL $fimport$8() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [17605])
	$8 = CALL $95(($6 + [128]), $3)
	CALL $33(($6 + [144]), $6, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$4
	*($6 + [120]) = [0]
	$1 = (int_64)0
	*($6 + [112]) = (int_64)0
	$8 = (*($6 + [148]) - *($6 + [144]))
	if ( ($8 == 0) ){ goto $label$10 }
	$7 = int_32($8 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$8 }
	$8 = CALL _Znwj($8)
	*(($6 + [120])) = ($8 + ($7 << [3]))
	*($6 + [112]) = $8
	*($6 + [116]) = $8
	$3 = *($6 + [144])
	$7 = (*($6 + [148]) - $3)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$10 }
	CALL memcpy($8, $3, $7)
	$8 = (*($6 + [116]) + $7)
	*($6 + [116]) = $8
	$2 = *($5)
	$1 = (int_64)0
	$3 = *($6 + [112])
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$9 }
	$9 = int_32(($8 - $3) >> [3])
	$1 = (int_64)0
	$8 = [0]
	$7 = [0]
	
.LOOP $label$11:
	$1 = ((int_64)((int_64)((uint_64)*(($3 + ($8 << [3]))) % (uint_64)(int_64)10000) * (int_64)1000) + (int_64)$1)
	$7 = ($7 + [1])
	$8 = ($7 & [65535])
	if ( ((uint_32)$9 > (uint_32)$8) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$2 = *($5)
	
.LABEL $label$9
	CALL eosio_assert(((int_64)$1 == (int_64)$2), [17708])
	$8 = *($6 + [112])
	if ( ($8 == 0) ){ goto $label$12 }
	*($6 + [116]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$12
	$1 = ((int_64)*($5) * (int_64)400)
	if ( (uint_64)($1 <= (int_64)10000) ){ goto $label$13 }
	$11 = *($0)
	*($6 + [76]) = [6]
	*($6 + [72]) = [17884]
	*($6 + [32]) = *($6 + [72])
	$12 = *(CALL $27(($6 + [288]), ($6 + [32])))
	*($6 + [72]) = [17890]
	*($6 + [76]) = [8]
	*($6 + [24]) = *($6 + [72])
	$13 = *(CALL $27(($6 + [288]), ($6 + [24])))
	$4 = *(($5 + [8]))
	CALL eosio_assert([1], [17898])
	$14 = ((uint_64)$1 / (uint_64)(int_64)10000)
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$1 = $2
	$7 = [1]
	$3 = $8
	$8 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$1 = $2
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$3 = ($8 + [1])
	$8 = $3
	if ( $7 ){ goto $label$18 }
	$7 = [1]
	$8 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [17947])
	*(($6 + [64])) = [0]
	*($6 + [56]) = (int_64)0
	$8 = CALL $119([17619])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$21 }
	*($6 + [56]) = ($8 << [1])
	$7 = (($6 + [56]) | [1])
	if ( $8 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$3 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($3)
	*($6 + [56]) = ($3 | [1])
	*($6 + [64]) = $7
	*($6 + [60]) = $8
	
.LABEL $label$20
	CALL memcpy($7, [17619], $8)
	
.LABEL $label$19
	*(($7 + $8)) = [0]
	*((($6 + [288]) + [24])) = $4
	*(($7 = (($6 + [72]) + [24]))) = [0]
	$8 = ($6 + [64])
	*(($6 + [328])) = *($8)
	*($8) = [0]
	*($6 + [296]) = (int_64)7035937925206713216
	*($6 + [304]) = $14
	*($6 + [72]) = (int_64)6138663591592764928
	*($6 + [80]) = $13
	*($6 + [88]) = (int_64)0
	*($6 + [288]) = *($0)
	*($6 + [320]) = *($6 + [56])
	*($6 + [56]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $11
	*($8 + [8]) = $12
	*((($6 + [72]) + [36])) = [0]
	$3 = ($8 + [16])
	*($7) = $3
	*(($6 + [92])) = $3
	*($6 + [88]) = $8
	*($6 + [100 align=4]) = (int_64)0
	$8 = *($6 + [320])
	$7 = ( *((($6 + [288]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($7 + [32])
	$1 = (CASTING uint_64)(uint_32 $7)
	$7 = ($6 + [100])
	
.LOOP $label$22:
	$8 = ($8 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$22 }
	if ( ($8 == 0) ){ goto $label$24 }
	CALL $28($7, $8)
	$7 = *(($6 + [104]))
	$8 = *(($6 + [100]))
	goto $label$23 
	
.LABEL $label$24
	$7 = [0]
	$8 = [0]
	
.LABEL $label$23
	*($6 + [388]) = $8
	*($6 + [384]) = $8
	*($6 + [392]) = $7
	*($6 + [272]) = ($6 + [384])
	*($6 + [280]) = ($6 + [288])
	CALL $29(($6 + [280]), ($6 + [272]))
	CALL $30(($6 + [384]), ($6 + [72]))
	$8 = *($6 + [384])
	CALL send_inline($8, (*($6 + [388]) - $8))
	$8 = *($6 + [384])
	if ( ($8 == 0) ){ goto $label$25 }
	*($6 + [388]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$25
	$8 = *($6 + [100])
	if ( ($8 == 0) ){ goto $label$26 }
	*(($6 + [104])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$26
	$8 = *($6 + [88])
	if ( ($8 == 0) ){ goto $label$27 }
	*(($6 + [92])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$27
	if ( ((*(($6 + [320])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($6 + [328])))
	
.LABEL $label$28
	if ( ((*($6 + [56]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [64])))
	
.LABEL $label$13
	*(($3 = ($6 + [104]))) = [0]
	*($6 + [88]) = (int_64)-1
	*($6 + [96]) = (int_64)0
	*($6 + [108]) = [0]
	$1 = *($0)
	*($6 + [72]) = $1
	*($6 + [80]) = $1
	*($6 + [304]) = $5
	*($6 + [292]) = ($6 + [208])
	*($6 + [288]) = ($6 + [200])
	*($6 + [296]) = ($6 + [264])
	*($6 + [300]) = ($6 + [256])
	*($6 + [308]) = ($6 + [144])
	*($6 + [56]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$3()), [18258])
	*($6 + [388]) = ($6 + [288])
	*($6 + [384]) = ($6 + [72])
	*($6 + [392]) = ($6 + [56])
	*(($8 = CALL _Znwj([104])) + [24]) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [32 align=4]) = (int_64)0
	*($8 + [40]) = [0]
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [72]) = (int_64)0
	*($8 + [80]) = (int_64)0
	*($8 + [88]) = ($6 + [72])
	CALL $34(($6 + [384]), $8)
	*($6 + [280]) = $8
	$1 = *($8)
	*($6 + [384]) = $1
	$9 = *($8 + [92])
	*($6 + [272]) = $9
	$15 = ($6 + [100])
	$7 = *($15)
	if ( ((uint_32)$7 >= (uint_32)*($3)) ){ goto $label$29 }
	*($7 + [8]) = $1
	*($7 + [16]) = $9
	*($6 + [280]) = [0]
	*($7) = $8
	*($15) = ($7 + [24])
	$8 = *($6 + [280])
	$7 = [0]
	*($6 + [280]) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$29
	CALL $35(($6 + [96]), ($6 + [280]), ($6 + [384]), ($6 + [272]))
	$8 = *($6 + [280])
	$7 = [0]
	*($6 + [280]) = [0]
	if ( $8 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	CALL $107(($6 + [112]))
	
.LABEL $label$7
	CALL $94(($6 + [56]))
	
.LABEL $label$6
	$3 = *($8 + [32])
	if ( ($3 == 0) ){ goto $label$30 }
	*(($8 + [36])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$30
	CALL _ZdlPv($8)
	
.LABEL $label$5
	$2 = *($0)
	$8 = *($6 + [212])
	CALL eosio_assert(((int_32)$8 != (int_32)$7), [18656])
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)($6 + [216])), [18691])
	CALL eosio_assert(((int_64)*($6 + [216]) == (int_64)CALL $fimport$3()), [18737])
	*($8 + [16]) = ((int_64)*($8 + [16]) + (int_64)1)
	$1 = *($8)
	CALL eosio_assert([1], [18788])
	*($6 + [392]) = (($6 + [288]) + [91])
	*($6 + [388]) = ($6 + [288])
	*($6 + [384]) = ($6 + [288])
	CALL $10(($6 + [384]), $8)
	CALL db_update_i64(*($8 + [100]), $2, ($6 + [288]), [91])
	$8 = ($6 + [232])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$31 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$31
	$1 = *($0)
	*($6 + [292]) = $0
	*($6 + [288]) = $5
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [18656])
	CALL $36(($6 + [160]), $10, $1, ($6 + [288]))
	$1 = *($5)
	$2 = *(($5 + [8]))
	*((($6 + [8]) + [8])) = $2
	*((($6 + [40]) + [8])) = $2
	*($6 + [8]) = $1
	*($6 + [40]) = $1
	CALL $37($0, *($6 + [264]), *($6 + [256]), ($6 + [8]))
	$5 = *($6 + [96])
	if ( ($5 == 0) ){ goto $label$32 }
	$0 = ($6 + [100])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$34 }
	
.LOOP $label$35:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$36 }
	$3 = *($7 + [32])
	if ( ($3 == 0) ){ goto $label$37 }
	*(($7 + [36])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$37
	CALL _ZdlPv($7)
	
.LABEL $label$36
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$35 }
	$8 = *(($6 + [96]))
	goto $label$33 
	
.LABEL $label$34
	$8 = $5
	
.LABEL $label$33
	*($0) = $5
	CALL _ZdlPv($8)
	
.LABEL $label$32
	$8 = *($6 + [144])
	if ( ($8 == 0) ){ goto $label$38 }
	*($6 + [148]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$38
	$3 = *($6 + [184])
	if ( ($3 == 0) ){ goto $label$39 }
	$5 = ($6 + [188])
	$8 = *($5)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$41 }
	$8 = ($8 + [-24])
	
.LOOP $label$42:
	$7 = CALL $8($8)
	$8 = ($8 + [-24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$42 }
	$8 = *(($6 + [184]))
	goto $label$40 
	
.LABEL $label$41
	$8 = $3
	
.LABEL $label$40
	*($5) = $3
	CALL _ZdlPv($8)
	
.LABEL $label$39
	$3 = *($6 + [240])
	if ( ($3 == 0) ){ goto $label$43 }
	$5 = ($6 + [244])
	$8 = *($5)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$45 }
	
.LOOP $label$46:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$47 }
	CALL _ZdlPv($7)
	
.LABEL $label$47
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$46 }
	$8 = *(($6 + [240]))
	goto $label$44 
	
.LABEL $label$45
	$8 = $3
	
.LABEL $label$44
	*($5) = $3
	CALL _ZdlPv($8)
	
.LABEL $label$43
	$global$0 = ($6 + [400])
	(unreachable)
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$4 }
	$4 = uint_32($4 >> [1])
	if ( ($4 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = *($2 + [4])
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	$5 = (((uint_32)$4 % (uint_32)[6]) == 0)
	
.LABEL $label$1
	CALL eosio_assert($5, [17682])
	$5 = ((uint_32)$4 / (uint_32)[6])
	if ( ($4 <= [6]) ){ goto $label$5 }
	$6 = (CASTING uint_64)(uint_32 $5)
	$7 = ($0 + [8])
	$8 = ($0 + [4])
	$4 = [0]
	
.LOOP $label$6:
	$9 = CALL $103(CALL $96(($3 + [16]), $2, ((int_32)($4 & [65535]) * (int_32)[6]), [6], $2), [0], [10])
	*($3 + [8]) = $9
	$5 = *($8)
	if ( ((int_32)$5 != (int_32)*($7)) ){ goto $label$9 }
	CALL $38($0, ($3 + [8]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	*($5) = $9
	*($8) = ($5 + [8])
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*((($3 + [16]) + [8])))
	
.LABEL $label$7
	$4 = ($4 + [1])
	if ( ((uint_64)$6 > (uint_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)65535)) ){ goto $label$6 }
	
.LABEL $label$5
	$global$0 = ($3 + [32])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $28($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17967])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17967])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $58(CALL $57($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $125([8500], $1)
	CALL memset($0, [0], $1)
	return $0
}