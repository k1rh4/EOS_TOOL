(data (i32.const 8192) "eosio.token\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8213) "transfer\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8313) "Must transfer EOS\00")
(data (i32.const 8331) "invalid first pos\00")
(data (i32.const 8349) "parse memo error\00")
(data (i32.const 8366) "Invalid hex character\00")
(data (i32.const 8388) "invalid sha256\00")
(data (i32.const 8403) "Contract not configured yet.\00")
(data (i32.const 8432) "Contract is frozen!\00")
(data (i32.const 8452) "Invalid asset\00")
(data (i32.const 8466) "Claim price must bet greater than min\00")
(data (i32.const 8504) "Invalid memo\00")
(data (i32.const 8517) "Player seed not found in memo\00")
(data (i32.const 8547) "claim\00")
(data (i32.const 8553) "Hashed polygon not found in memo\00")
(data (i32.const 8586) "bid\00")
(data (i32.const 8590) "Turf id not found in memo\00")
(data (i32.const 8616) "Turf does not exist\00")
(data (i32.const 8636) "Unkown action\00")
(data (i32.const 8650) "Prospect doesn\'t exist\00")
(data (i32.const 8673) "Area claimed\00")
(data (i32.const 8686) "Sorry, turf was not possible to claim, refund.\00")
(data (i32.const 8733) "Bid does not exist\00")
(data (i32.const 8752) "Your turf was sold.\00")
(data (i32.const 8772) "Bid cut\00")
(data (i32.const 8780) "Your bid was rejected.\00: no conversion\00")
(data (i32.const 8819) "Your bid was withdrawn.\00: out of range\00")
(data (i32.const 8858) "string is too long to be a valid name\00")
(data (i32.const 8896) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8963) "character is not in allowed character set for names\00")
(data (i32.const 9015) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9074) "write\00")
(data (i32.const 9080) "divide by zero\00")
(data (i32.const 9095) "signed division overflow\00")
(data (i32.const 9120) "multiplication overflow\00")
(data (i32.const 9144) "multiplication underflow\00")
(data (i32.const 9169) "attempt to subtract asset with different symbol\00")
(data (i32.const 9217) "subtraction underflow\00")
(data (i32.const 9239) "subtraction overflow\00")
(data (i32.const 9260) "read\00")
(data (i32.const 9265) "get\00")
(data (i32.const 9269) "error reading iterator\00")
(data (i32.const 9292) "cannot create objects in table of another contract\00")
(data (i32.const 9343) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9395) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9449) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9497) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9548) "cannot pass end iterator to modify\00")
(data (i32.const 9583) "object passed to modify is not in multi_index\00")
(data (i32.const 9629) "cannot modify objects in table of another contract\00")
(data (i32.const 9680) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9739) "object passed to erase is not in multi_index\00")
(data (i32.const 9784) "cannot erase objects in table of another contract\00")
(data (i32.const 9834) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9887) "cannot pass end iterator to erase\00")
(data (i32.const 9921) "cannot increment end iterator\00")
(data (i32.const 18368) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$7 (param i64)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "__multi3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "db_next_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$12 (param i32)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$16 (param i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$17 (result i64)))
(import "env" "abort" (func $fimport$18))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$32 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$33 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$36 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$38 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$39 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$40 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_Znwj" (func $58))
(export "_ZdlPv" (func $60))
(export "_Znaj" (func $59))
(export "_ZdaPv" (func $61))
(export "_ZnwjSt11align_val_t" (func $62))
(export "_ZnajSt11align_val_t" (func $63))
(export "_ZdlPvSt11align_val_t" (func $64))
(export "_ZdaPvSt11align_val_t" (func $65))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $12 $13 $14)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18625))
(global $global$2 i32 (i32.const 18625))


int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9964]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9968])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9964]) = [1]
	$2 = ($2 << [16])
	*([0] + [9968]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9968])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9968]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9964]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9964]) = [1]
	$3 = ($3 << [16])
	*([0] + [9968]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9968])
	
.LABEL $label$10
	*([0] + [9968]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18356])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18164]
	$3 = (((int_32)$1 * (int_32)[12]) + [18164])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $83())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $95($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $96($1)
	
.LABEL $label$2
	*(CALL $83()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $96(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $99($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $96 (int_32 $0)
{
	return CALL $97([9972], $0)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $98($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8227])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $87($3, (int_64)0)
	$4 = CALL $89($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9739])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9784])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9834])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9260])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [9260])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9074])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [9074])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9074])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9074])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9074])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $57(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $81($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9269])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [48]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [48])
	CALL $49(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $21(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9449])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5915044176688316416)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9395])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9395])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $40(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9260])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9265])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $41($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9260])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9074])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9074])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9260])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $99($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [144])
	$global$0 = $4
	*($4 + [40]) = $3
	*($4 + [48]) = $1
	CALL require_auth(*($0))
	*(($5 = ($4 + [32]))) = [0]
	*($4 + [16]) = (int_64)-1
	$1 = *($0 + [8])
	*($4) = $1
	*($4 + [8]) = $1
	*($4 + [24]) = (int_64)0
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)-6219918174314299392, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $17($4, $6)
	$3 = *($0)
	CALL eosio_assert([1], [9548])
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$4), [9583])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$5()), [9629])
	*($6 + [8]) = *($4 + [48])
	*(($6 + [24])) = *(($2 + [8]))
	*($6 + [16]) = *($2)
	*($6 + [32]) = *($4 + [40])
	$1 = *($6)
	CALL eosio_assert([1], [9680])
	*($4 + [112]) = (($4 + [64]) + [40])
	*($4 + [108]) = ($4 + [64])
	*($4 + [104]) = ($4 + [64])
	*($4 + [120]) = ($4 + [104])
	*($4 + [132]) = ($6 + [8])
	*($4 + [128]) = $6
	*($4 + [136]) = ($6 + [16])
	*($4 + [140]) = ($6 + [32])
	CALL $26(($4 + [128]), ($4 + [120]))
	CALL db_update_i64(*($6 + [44]), $3, ($4 + [64]), [40])
	$6 = ($4 + [16])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$2 = *($4 + [24])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$3 = *($0)
	*($4 + [72]) = $2
	*($4 + [68]) = ($4 + [48])
	*($4 + [64]) = $4
	*($4 + [76]) = ($4 + [40])
	*($4 + [104]) = $3
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$5()), [9292])
	*($4 + [132]) = ($4 + [64])
	*($4 + [128]) = $4
	*($4 + [136]) = ($4 + [104])
	*(($6 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [40]) = $4
	CALL $27(($4 + [128]), $6)
	*($4 + [120]) = $6
	$1 = *($6)
	*($4 + [128]) = $1
	$2 = *($6 + [44])
	*($4 + [60]) = $2
	$7 = ($4 + [28])
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)*($5)) ){ goto $label$6 }
	*($0 + [8]) = $1
	*($0 + [16]) = $2
	*($4 + [120]) = [0]
	*($0) = $6
	*($7) = ($0 + [24])
	$6 = *($4 + [120])
	*($4 + [120]) = [0]
	if ( $6 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	CALL $28(($4 + [24]), ($4 + [120]), ($4 + [128]), ($4 + [60]))
	$6 = *($4 + [120])
	*($4 + [120]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	CALL _ZdlPv($6)
	
.LABEL $label$3
	$2 = *($4 + [24])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($4 + [28])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$9 }
	$6 = *(($4 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $2
	
.LABEL $label$7
	*($5) = $2
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9260])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$8 = (($4 + [72]) + [8])
	CALL $29(($4 + [56]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [96]) + [8])) = $3
	*(($9 = (($4 + [112]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [112]) = $10
	*($4 + [96]) = $10
	$3 = *($9)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = CALL $67(($4 + [112]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $67(($4 + [128]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [128]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [112]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $99($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $7 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$2 = ($global$0 - [384])
	$global$0 = $2
	CALL eosio_assert(((int_64)CALL $15($0) != (int_64)1), [8432])
	$3 = [0]
	*(($2 + [360])) = [0]
	*($2 + [344]) = (int_64)-1
	*($2 + [352]) = (int_64)0
	$4 = *($0 + [8])
	*($2 + [328]) = $4
	*($2 + [336]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)4292915607302569984, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $36(($2 + [328]), $5)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)($2 + [328])), [9497])
	*($2 + [324]) = $3
	*($2 + [320]) = ($2 + [328])
	goto $label$1 
	
.LABEL $label$2
	*($2 + [324]) = [0]
	*($2 + [320]) = ($2 + [328])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8733])
	*((($2 + [280]) + [32])) = [0]
	*($2 + [296]) = (int_64)-1
	*($2 + [304]) = (int_64)0
	$4 = *(($0 + [8]))
	*($2 + [280]) = $4
	*($2 + [288]) = $4
	$5 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-3553696347762720768, *(*($2 + [324]) + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $22(($2 + [280]), $3)
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)($2 + [280])), [9497])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [8616])
	CALL require_auth(*($5 + [8]))
	$3 = *($2 + [324])
	$4 = *($3 + [24])
	CALL __multi3(($2 + [24]), $4, (int_64)$4 >> (int_64)63), (int_64)96, (int_64)0)
	$1 = *(($3 + [32]))
	$4 = *((($2 + [24]) + [8]))
	$7 = *($2 + [24])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [9120])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [9144])
	CALL eosio_assert([1], [9080])
	CALL eosio_assert([1], [9095])
	$3 = *($2 + [324])
	$4 = *($3 + [24])
	$8 = *(($3 + [32]))
	CALL eosio_assert(((int_64)$1 == (int_64)$8), [9169])
	$9 = ((int_64)$7 / (int_64)100)
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($4 - $9)) > (int_64)-4611686018427387904), [9217])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9239])
	*($2 + [128]) = (int_64)3617214756542218240
	*($2 + [120]) = *($0)
	*($2 + [224]) = [8192]
	*($2 + [228]) = CALL $93([8192])
	*($2 + [48]) = *($2 + [224])
	$10 = CALL $2(($2 + [232]), ($2 + [48]))
	*($2 + [208]) = [8213]
	*($2 + [212]) = CALL $93([8213])
	*($2 + [40]) = *($2 + [208])
	$11 = CALL $2(($2 + [216]), ($2 + [40]))
	$4 = *($0)
	*((($2 + [368]) + [8])) = [0]
	*($2 + [368]) = (int_64)0
	$3 = CALL $93([8752])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$8 }
	*($2 + [368]) = ($3 << [1])
	$12 = (($2 + [368]) | [1])
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$13 = (($3 + [16]) & [-16])
	$12 = CALL _Znwj($13)
	*($2 + [368]) = ($13 | [1])
	*($2 + [376]) = $12
	*($2 + [372]) = $3
	
.LABEL $label$7
	CALL memcpy($12, [8752], $3)
	
.LABEL $label$6
	*(($12 + $3)) = [0]
	$14 = *(($5 + [8]))
	*(($2 + [184])) = $1
	$3 = (($2 + [368]) + [8])
	*(($2 + [200])) = *($3)
	*($3) = [0]
	*($2 + [160]) = $4
	$4 = *($2 + [368])
	*($2 + [368]) = (int_64)0
	*($2 + [176]) = $9
	*($2 + [192]) = $4
	*($2 + [168]) = $14
	$3 = CALL $33(($2 + [240]), ($2 + [120]), *($10), *($11), ($2 + [160]))
	CALL $34(($2 + [104]), $3)
	$12 = *($2 + [104])
	CALL send_inline($12, (*($2 + [108]) - $12))
	$12 = *($2 + [104])
	if ( ($12 == 0) ){ goto $label$9 }
	*($2 + [108]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$9
	$12 = *($3 + [28])
	if ( ($12 == 0) ){ goto $label$10 }
	*(($3 + [32])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$10
	$12 = *($3 + [16])
	if ( ($12 == 0) ){ goto $label$11 }
	*(($3 + [20])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$11
	if ( ((*(($2 + [192])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($2 + [200])))
	
.LABEL $label$12
	if ( ((*($2 + [368]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [376])))
	
.LABEL $label$13
	$4 = *($0)
	*($2 + [160]) = ($2 + [320])
	CALL eosio_assert($6, [9548])
	CALL $37(($2 + [280]), $5, $4, ($2 + [160]))
	*(($2 + [272])) = [0]
	*($2 + [256]) = (int_64)-1
	$4 = *(($0 + [8]))
	*($2 + [240]) = $4
	*($2 + [248]) = $4
	*($2 + [264]) = (int_64)0
	$5 = [0]
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)-6219918174314299392, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$14 }
	$5 = CALL $17(($2 + [240]), $3)
	
.LABEL $label$14
	*($2 + [112]) = (int_64)3617214756542218240
	*($2 + [104]) = *($0)
	*($2 + [88]) = [8192]
	*($2 + [92]) = CALL $93([8192])
	*($2 + [16]) = *($2 + [88])
	$12 = CALL $2(($2 + [96]), ($2 + [16]))
	*($2 + [72]) = [8213]
	*($2 + [76]) = CALL $93([8213])
	*($2 + [8]) = *($2 + [72])
	$6 = CALL $2(($2 + [80]), ($2 + [8]))
	$4 = *($0)
	*((($2 + [56]) + [8])) = [0]
	*($2 + [56]) = (int_64)0
	$0 = CALL $93([8772])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$17 }
	*($2 + [56]) = ($0 << [1])
	$3 = (($2 + [56]) | [1])
	if ( $0 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$10 = (($0 + [16]) & [-16])
	$3 = CALL _Znwj($10)
	*($2 + [56]) = ($10 | [1])
	*($2 + [64]) = $3
	*($2 + [60]) = $0
	
.LABEL $label$16
	CALL memcpy($3, [8772], $0)
	
.LABEL $label$15
	*(($3 + $0)) = [0]
	$1 = *($5 + [8])
	*(($2 + [184])) = $8
	$0 = ($2 + [64])
	*(($2 + [200])) = *($0)
	*($0) = [0]
	*($2 + [160]) = $4
	*($2 + [176]) = $7
	*($2 + [192]) = *($2 + [56])
	*($2 + [168]) = $1
	*($2 + [56]) = (int_64)0
	$0 = CALL $33(($2 + [120]), ($2 + [104]), *($12), *($6), ($2 + [160]))
	CALL $34(($2 + [368]), $0)
	$3 = *($2 + [368])
	CALL send_inline($3, (*($2 + [372]) - $3))
	$3 = *($2 + [368])
	if ( ($3 == 0) ){ goto $label$18 }
	*($2 + [372]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$18
	$3 = *($0 + [28])
	if ( ($3 == 0) ){ goto $label$19 }
	*(($0 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$19
	$3 = *($0 + [16])
	if ( ($3 == 0) ){ goto $label$20 }
	*(($0 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$20
	if ( ((*(($2 + [192])) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [200])))
	
.LABEL $label$21
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$22
	$4 = *($2 + [320])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$3 = ((int_32)$0) != (int_32)[0]
	CALL eosio_assert($3), [9887])
	CALL eosio_assert($3, [9921])
	$3 = CALL db_next_i64(*($0 + [44]), ($2 + [160]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$23 }
	CALL $36((CASTING uint_32)(uint_64 $4), $3)
	
.LABEL $label$23
	CALL $38(($2 + [328]), $0)
	$5 = *($2 + [264])
	if ( ($5 == 0) ){ goto $label$24 }
	$12 = ($2 + [268])
	$0 = *($12)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$26 }
	
.LOOP $label$27:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$28 }
	CALL _ZdlPv($3)
	
.LABEL $label$28
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$27 }
	$0 = *(($2 + [264]))
	goto $label$25 
	
.LABEL $label$26
	$0 = $5
	
.LABEL $label$25
	*($12) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$24
	$5 = *($2 + [304])
	if ( ($5 == 0) ){ goto $label$29 }
	$12 = ($2 + [308])
	$0 = *($12)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$31 }
	
.LOOP $label$32:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$33 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$34
	CALL _ZdlPv($3)
	
.LABEL $label$33
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$32 }
	$0 = *(($2 + [304]))
	goto $label$30 
	
.LABEL $label$31
	$0 = $5
	
.LABEL $label$30
	*($12) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$29
	$5 = *($2 + [352])
	if ( ($5 == 0) ){ goto $label$35 }
	$12 = ($2 + [356])
	$0 = *($12)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$37 }
	
.LOOP $label$38:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$39 }
	CALL _ZdlPv($3)
	
.LABEL $label$39
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$38 }
	$0 = *(($2 + [352]))
	goto $label$36 
	
.LABEL $label$37
	$0 = $5
	
.LABEL $label$36
	*($12) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$35
	$global$0 = ($2 + [384])
	return (unreachable)
	
.LABEL $label$5
	CALL $66(($2 + [368]))
	
.LABEL $label$4
	CALL $66(($2 + [56]))
	(unreachable)
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9260])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9260])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $99($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [304])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)CALL $15($0) != (int_64)1), [8432])
	*((($3 + [248]) + [32])) = [0]
	*($3 + [264]) = (int_64)-1
	*($3 + [272]) = (int_64)0
	$4 = *($0 + [8])
	*($3 + [248]) = $4
	*($3 + [256]) = $4
	$5 = CALL $30(($3 + [248]), $1, [8650])
	*(($6 = (($3 + [208]) + [32]))) = [0]
	*($3 + [224]) = (int_64)-1
	*($3 + [232]) = (int_64)0
	$1 = *($0 + [8])
	*($3 + [208]) = $1
	*($3 + [216]) = $1
	$4 = *($0)
	*($3 + [172]) = $5
	*($3 + [176]) = $2
	*($3 + [168]) = ($3 + [208])
	*($3 + [128]) = $4
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$5()), [9292])
	*($3 + [36]) = ($3 + [168])
	*($3 + [32]) = ($3 + [208])
	*($3 + [40]) = ($3 + [128])
	*(($2 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($2 + [16 align=4]) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = [0]
	*($2 + [52]) = ($3 + [208])
	CALL $31(($3 + [32]), $2)
	*($3 + [112]) = $2
	$1 = *($2)
	*($3 + [32]) = $1
	$7 = *($2 + [56])
	*($3 + [288]) = $7
	$8 = ($3 + [236])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*($6)) ){ goto $label$3 }
	*($9 + [8]) = $1
	*($9 + [16]) = $7
	*($3 + [112]) = [0]
	*($9) = $2
	*($8) = ($9 + [24])
	$2 = *($3 + [112])
	$9 = [0]
	*($3 + [112]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL $32(($3 + [232]), ($3 + [112]), ($3 + [32]), ($3 + [288]))
	$2 = *($3 + [112])
	$9 = [0]
	*($3 + [112]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($2)
	
.LABEL $label$1
	*(($3 + [200])) = $9
	*($3 + [184]) = (int_64)-1
	$1 = *(($0 + [8]))
	*($3 + [168]) = $1
	*($3 + [176]) = $1
	*($3 + [192]) = (int_64)0
	$2 = CALL db_lowerbound_i64($1, $1, (int_64)-6219918174314299392, (int_64)0)
	if ( ((int_32)$2 < (int_32)$9) ){ goto $label$5 }
	$9 = CALL $17(($3 + [168]), $2)
	
.LABEL $label$5
	*($3 + [120]) = (int_64)3617214756542218240
	*($3 + [112]) = *($0)
	*($3 + [96]) = [8192]
	*($3 + [100]) = CALL $93([8192])
	*($3 + [8]) = *($3 + [96])
	$7 = CALL $2(($3 + [104]), ($3 + [8]))
	*($3 + [80]) = [8213]
	*($3 + [84]) = CALL $93([8213])
	*($3) = *($3 + [80])
	$8 = CALL $2(($3 + [88]), $3)
	$1 = *($0)
	*((($3 + [16]) + [8])) = [0]
	*($3 + [16]) = (int_64)0
	$2 = CALL $93([8673])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$6 }
	$6 = ($5 + [48])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$9 }
	*($3 + [16]) = ($2 << [1])
	$0 = (($3 + [16]) | [1])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$10 = (($2 + [16]) & [-16])
	$0 = CALL _Znwj($10)
	*($3 + [16]) = ($10 | [1])
	*($3 + [24]) = $0
	*($3 + [20]) = $2
	
.LABEL $label$8
	CALL memcpy($0, [8673], $2)
	
.LABEL $label$7
	*(($0 + $2)) = [0]
	$4 = *($9 + [8])
	*(($3 + [56])) = *(($6 + [8]))
	$2 = (($3 + [16]) + [8])
	*(($3 + [72])) = *($2)
	*($2) = [0]
	*($3 + [32]) = $1
	*($3 + [48]) = *($6)
	*($3 + [64]) = *($3 + [16])
	*($3 + [40]) = $4
	*($3 + [16]) = (int_64)0
	$2 = CALL $33(($3 + [128]), ($3 + [112]), *($7), *($8), ($3 + [32]))
	CALL $34(($3 + [288]), $2)
	$0 = *($3 + [288])
	CALL send_inline($0, (*($3 + [292]) - $0))
	$0 = *($3 + [288])
	if ( ($0 == 0) ){ goto $label$10 }
	*($3 + [292]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$0 = *($2 + [28])
	if ( ($0 == 0) ){ goto $label$11 }
	*(($2 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$0 = *($2 + [16])
	if ( ($0 == 0) ){ goto $label$12 }
	*(($2 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	if ( ((*(($3 + [64])) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$13
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$14
	CALL $35(($3 + [248]), $5)
	$9 = *($3 + [192])
	if ( ($9 == 0) ){ goto $label$15 }
	$5 = ($3 + [196])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$17 }
	
.LOOP $label$18:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$19 }
	CALL _ZdlPv($0)
	
.LABEL $label$19
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$18 }
	$2 = *(($3 + [192]))
	goto $label$16 
	
.LABEL $label$17
	$2 = $9
	
.LABEL $label$16
	*($5) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$15
	$9 = *($3 + [232])
	if ( ($9 == 0) ){ goto $label$20 }
	$5 = ($3 + [236])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$24 }
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($0 + [24])))
	
.LABEL $label$25
	CALL _ZdlPv($0)
	
.LABEL $label$24
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($3 + [232]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $9
	
.LABEL $label$21
	*($5) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$20
	$9 = *($3 + [272])
	if ( ($9 == 0) ){ goto $label$26 }
	$5 = ($3 + [276])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$30 }
	CALL _ZdlPv($0)
	
.LABEL $label$30
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$29 }
	$2 = *(($3 + [272]))
	goto $label$27 
	
.LABEL $label$28
	$2 = $9
	
.LABEL $label$27
	*($5) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$26
	$global$0 = ($3 + [304])
	return (unreachable)
	
.LABEL $label$6
	CALL $66(($3 + [16]))
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8858])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8963])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8896])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8963])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [240]) = $1
	CALL eosio_assert(((int_64)CALL $15($0) != (int_64)1), [8432])
	CALL $16(($3 + [192]))
	$1 = *($0)
	if ( ((int_64)*($3 + [192]) == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)*($3 + [200]) != (int_64)$1) ){ goto $label$1 }
	$4 = [0]
	*(($3 + [184])) = [0]
	*($3 + [160]) = $1
	*($3 + [152]) = $1
	*($3 + [168]) = (int_64)-1
	*($3 + [176]) = (int_64)0
	$5 = [0]
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)-6219918174314299392, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $17(($3 + [152]), $6)
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8403])
	if ( ((uint_64)((int_64)*($3 + [208]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$1 = (uint_64)*((($3 + [192]) + [24])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$1 = $7
	$4 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$1 = $7
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $4 ){ goto $label$7 }
	$4 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	
.LABEL $label$3
	CALL eosio_assert($4, [8452])
	CALL eosio_assert(((int_64)*((($3 + [192]) + [24])) == (int_64)*(($5 + [24]))), [9015])
	CALL eosio_assert(((int_64)*(($3 + [208])) >= (int_64)*($5 + [16])), [8466])
	$4 = ( *($5 + [4]) ? uint_32($4 >> [1]) : $8 )
	$4 = *($3 + [136])
	$8 = ($4 & [1])
	$9 = ($5 + [1])
	$5 = CALL $67(($3 + [136]), ($3 + [224]))
	$6 = ( *($5 + [8]) ? $9 : $8 )
	$8 = ($6 + $4)
	if ( ($4 == 0) ){ goto $label$11 }
	
.LOOP $label$12:
	if ( CALL $82(*($6)) ){ goto $label$11 }
	$6 = ($6 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$12 }
	$6 = $8
	$4 = [1]
	$8 = *($3 + [136])
	if ( (($8 & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$13 }
	$4 = ($6 + [1])
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	if ( (CALL $82(*($4)) == 0) ){ goto $label$15 }
	$4 = ($4 + [1])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	*($6) = *($4)
	$6 = ($6 + [1])
	$4 = ($4 + [1])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$14 }
	
.LABEL $label$13
	$4 = [1]
	$8 = *($3 + [136])
	if ( ($8 & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	$8 = (($5 + uint_32($8 >> $4)) + $4)
	$4 = $9
	goto $label$8 
	
.LABEL $label$9
	$4 = *(($5 + [8]))
	$8 = ($4 + *(($5 + [4])))
	
.LABEL $label$8
	CALL $72($5, ($6 - $4), ($8 - $6))
	$4 = [0]
	$6 = ($6 & [1])
	$6 = *($3 + [136])
	$8 = ( *(($5 + [4])) ? uint_32($6 >> [1]) : $6 )
	if ( ($8 == 0) ){ goto $label$16 }
	$6 = ( *(($5 + [8])) ? $9 : $6 )
	$4 = [0]
	
.LOOP $label$17:
	$4 = ($4 + ((int_32)*($6) == (int_32)[45]))
	$6 = ($6 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$17 }
	
.LABEL $label$16
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [8504])
	*($3 + [128]) = [0]
	*($3 + [120]) = (int_64)0
	*($3) = [45]
	*($3 + [64]) = [0]
	*($3 + [48]) = [1]
	$9 = CALL $18($5, ($3 + [120]), $3, ($3 + [64]), ($3 + [48]))
	$6 = *($3 + [120])
	CALL eosio_assert(((int_32)( *($3 + [124]) ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [8517])
	$8 = CALL $67(($3 + [104]), ($3 + [120]))
	$6 = *($3 + [104])
	$4 = CALL $93([8547])
	if ( ((int_32)$4 != (int_32)( *($8 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$34 }
	if ( (CALL $74($8, [0], [-1], [8547], $4) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	$6 = *($3 + [104])
	$4 = CALL $93([8586])
	if ( ((int_32)$4 != (int_32)( *(($8 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$35 }
	if ( (CALL $74($8, [0], [-1], [8586], $4) == 0) ){ goto $label$32 }
	
.LABEL $label$35
	CALL eosio_assert([0], [8636])
	goto $label$25 
	
.LABEL $label$33
	CALL $68(($3 + [64]), $5, ($9 + [1]), [-1], $5)
	if ( (*($3 + [120]) & [1]) ){ goto $label$31 }
	*($3 + [120]) = [0]
	goto $label$30 
	
.LABEL $label$32
	CALL $68(($3 + [64]), $5, ($9 + [1]), [-1], $5)
	if ( (*($3 + [120]) & [1]) ){ goto $label$29 }
	*($3 + [120]) = [0]
	goto $label$28 
	
.LABEL $label$31
	*(*(($3 + [128]))) = [0]
	*($3 + [124]) = [0]
	
.LABEL $label$30
	CALL $71(($3 + [120]), [0])
	*((($3 + [120]) + [8])) = *((($3 + [64]) + [8]))
	*($3 + [120]) = *($3 + [64])
	$6 = *($3 + [120])
	CALL eosio_assert(((int_32)( *($3 + [124]) ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [8553])
	$6 = *($3 + [120])
	CALL eosio_assert(((int_32)( *($3 + [124]) ? uint_32($6 >> [1]) : ($6 & [1]) ) == (int_32)[64]), [8388])
	CALL $19(($3 + [120]), $3, [32])
	*(($9 = (($3 + [64]) + [32]))) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$1 = *($0)
	*($3 + [64]) = $1
	*($3 + [72]) = $1
	*($3 + [52]) = ($3 + [240])
	*($3 + [48]) = ($3 + [64])
	*($3 + [56]) = $3
	*($3 + [60]) = ($3 + [192])
	*($3 + [280]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$5()), [9292])
	*($3 + [268]) = ($3 + [48])
	*($3 + [264]) = ($3 + [64])
	*($3 + [272]) = ($3 + [280])
	*(($6 = CALL _Znwj([80])) + [48]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = ($3 + [64])
	CALL $20(($3 + [264]), $6)
	*($3 + [40]) = $6
	$1 = *($6)
	*($3 + [264]) = $1
	$0 = *($6 + [68])
	*($3 + [256]) = $0
	$10 = ($3 + [92])
	$4 = *($10)
	if ( ((uint_32)$4 >= (uint_32)*($9)) ){ goto $label$36 }
	*($4 + [8]) = $1
	*($4 + [16]) = $0
	*($3 + [40]) = [0]
	*($4) = $6
	*($10) = ($4 + [24])
	$6 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( ($6 == 0) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$36
	CALL $21(($3 + [88]), ($3 + [40]), ($3 + [264]), ($3 + [256]))
	$6 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( $6 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	*(*(($3 + [128]))) = [0]
	*($3 + [124]) = [0]
	
.LABEL $label$28
	CALL $71(($3 + [120]), [0])
	*((($3 + [120]) + [8])) = *((($3 + [64]) + [8]))
	*($3 + [120]) = *($3 + [64])
	$6 = *($3 + [120])
	CALL eosio_assert(((int_32)( *($3 + [124]) ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [8590])
	$7 = (CASTING int_64)(int_32 CALL $75(($3 + [120]), [0], [10]))
	*($3 + [40]) = $7
	*((($3 + [64]) + [32])) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$1 = *($0)
	*($3 + [64]) = $1
	*($3 + [72]) = $1
	$6 = [0]
	$4 = CALL db_find_i64($1, $1, (int_64)-3553696347762720768, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$37 }
	CALL eosio_assert(((int_32)*(CALL $22(($3 + [64]), $4) + [52]) == (int_32)($3 + [64])), [9497])
	$6 = [1]
	
.LABEL $label$37
	CALL eosio_assert($6, [8616])
	*(($9 = ($3 + [32]))) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$1 = *($0)
	*($3) = $1
	*($3 + [8]) = $1
	*($3 + [52]) = ($3 + [40])
	*($3 + [48]) = $3
	*($3 + [56]) = ($3 + [240])
	*($3 + [60]) = ($3 + [192])
	*($3 + [280]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$5()), [9292])
	*($3 + [268]) = ($3 + [48])
	*($3 + [264]) = $3
	*($3 + [272]) = ($3 + [280])
	*(($6 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = $3
	CALL $23(($3 + [264]), $6)
	*($3 + [256]) = $6
	$1 = *($6)
	*($3 + [264]) = $1
	$0 = *($6 + [44])
	*($3 + [252]) = $0
	$10 = ($3 + [28])
	$4 = *($10)
	if ( ((uint_32)$4 >= (uint_32)*($9)) ){ goto $label$40 }
	*($4 + [8]) = $1
	*($4 + [16]) = $0
	*($3 + [256]) = [0]
	*($4) = $6
	*($10) = ($4 + [24])
	$6 = *($3 + [256])
	*($3 + [256]) = [0]
	if ( ($6 == 0) ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$40
	CALL $24(($3 + [24]), ($3 + [256]), ($3 + [264]), ($3 + [252]))
	$6 = *($3 + [256])
	*($3 + [256]) = [0]
	if ( ($6 == 0) ){ goto $label$38 }
	
.LABEL $label$39
	CALL _ZdlPv($6)
	
.LABEL $label$38
	$0 = *($3 + [24])
	if ( ($0 == 0) ){ goto $label$41 }
	$9 = ($3 + [28])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$43 }
	
.LOOP $label$44:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$44 }
	$6 = *(($3 + [24]))
	goto $label$42 
	
.LABEL $label$43
	$6 = $0
	
.LABEL $label$42
	*($9) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$41
	$0 = *($3 + [88])
	if ( ($0 == 0) ){ goto $label$25 }
	$9 = ($3 + [92])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$47 }
	
.LOOP $label$48:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$49 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$50
	CALL _ZdlPv($4)
	
.LABEL $label$49
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$48 }
	$6 = *(($3 + [88]))
	goto $label$46 
	
.LABEL $label$47
	$6 = $0
	
.LABEL $label$46
	*($9) = $0
	CALL _ZdlPv($6)
	$6 = [1]
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$27
	CALL _ZdlPv($6)
	
.LABEL $label$26
	$0 = *($3 + [88])
	if ( ($0 == 0) ){ goto $label$25 }
	$9 = ($3 + [92])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$52 }
	
.LOOP $label$53:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$54 }
	CALL _ZdlPv($4)
	
.LABEL $label$54
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$53 }
	$6 = *(($3 + [88]))
	goto $label$51 
	
.LABEL $label$52
	$6 = $0
	
.LABEL $label$51
	*($9) = $0
	CALL _ZdlPv($6)
	$6 = [1]
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$6 = [1]
	if ( (*($3 + [104]) & [1]) ){ goto $label$23 }
	
.LABEL $label$24
	if ( (*($3 + [120]) & $6) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($3 + [120]) & $6) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($3 + [128])))
	if ( ((*($3 + [136]) & [1]) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( (*($3 + [136]) & [1]) ){ goto $label$19 }
	
.LABEL $label$20
	$8 = *($3 + [176])
	if ( $8 ){ goto $label$18 }
	goto $label$1 
	
.LABEL $label$19
	CALL _ZdlPv(*(($5 + [8])))
	$8 = *($3 + [176])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$18
	$0 = ($3 + [180])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$56 }
	
.LOOP $label$57:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$58 }
	CALL _ZdlPv($4)
	
.LABEL $label$58
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$57 }
	$6 = *(($3 + [176]))
	goto $label$55 
	
.LABEL $label$56
	$6 = $8
	
.LABEL $label$55
	*($0) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$1
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*(($3 + [232])))
	
.LABEL $label$59
	$global$0 = ($3 + [288])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	*($3 + [176]) = [8192]
	*($3 + [180]) = CALL $93([8192])
	*($3 + [88]) = *($3 + [176])
	CALL $2(($3 + [184]), ($3 + [88]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [168]) = [8213]
	*($3 + [172]) = CALL $93([8213])
	*($3 + [80]) = *($3 + [168])
	CALL $2(($3 + [184]), ($3 + [80]))
	if ( ((int_64)$2 > (int_64)5454220807540572159) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)-2039333636192628225) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-4999377782933291008) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [160]) = [8192]
	*($3 + [164]) = CALL $93([8192])
	*($3 + [16]) = *($3 + [160])
	CALL $2(($3 + [184]), ($3 + [16]))
	CALL eosio_assert(((int_64)$1 == (int_64)6138663591592764928), [8313])
	*($3 + [156]) = [0]
	*($3 + [152]) = [1]
	*($3 + [8]) = *($3 + [152])
	CALL $4($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)6761222076679323647) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)5454220807540572160) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)6714520698246660096) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [2]
	*($3 + [40]) = *($3 + [128])
	CALL $6($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-2039333636192628224) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)3607571201750728704) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [56]) = *($3 + [112])
	CALL $8($0, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)6761222076679323648) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [4]
	*($3 + [24]) = *($3 + [144])
	CALL $10($0, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [64]) = *($3 + [104])
	CALL $8($0, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [124]) = [0]
	*($3 + [120]) = [6]
	*($3 + [48]) = *($3 + [120])
	CALL $8($0, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [100]) = [0]
	*($3 + [96]) = [7]
	*($3 + [72]) = *($3 + [96])
	CALL $8($0, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [140]) = [0]
	*($3 + [136]) = [8]
	*($3 + [32]) = *($3 + [136])
	CALL $8($0, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $84([0])
	$global$0 = ($3 + [192])
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)-6219918174314299392, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $17(($2 + [8]), $5)
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8403])
	$6 = *($0)
	CALL eosio_assert($5, [9548])
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($2 + [8])), [9583])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$5()), [9629])
	*($4 + [32]) = $1
	$3 = *($4)
	CALL eosio_assert([1], [9680])
	*($2 + [96]) = (($2 + [48]) + [40])
	*($2 + [92]) = ($2 + [48])
	*($2 + [88]) = ($2 + [48])
	*($2 + [104]) = ($2 + [88])
	*($2 + [116]) = ($4 + [8])
	*($2 + [112]) = $4
	*($2 + [120]) = ($4 + [16])
	*($2 + [124]) = ($4 + [32])
	CALL $26(($2 + [112]), ($2 + [104]))
	CALL db_update_i64(*($4 + [44]), $6, ($2 + [48]), [40])
	$4 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$7 = ($2 + [36])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*($7) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($2 + [128])
}

int_64 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	*($1 + [32]) = (int_64)0
	$0 = [0]
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-6219918174314299392, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $17(($1 + [8]), $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [8403])
	$2 = *($0 + [32])
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($1 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($1 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($1 + [48])
	return $2
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $96($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $39(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9269])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	CALL $46(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $28(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [96]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [144]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $25(($4 + [32]), ($4 + [144]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	$10 = *($9)
	*(($3 = (($4 + [112]) + [8]))) = $10
	*(($9 = (($4 + [128]) + [8]))) = $10
	$11 = *($4 + [16])
	*($4 + [128]) = $11
	*($4 + [112]) = $11
	$10 = *($9)
	*((($4 + [144]) + [8])) = $10
	*(($4 + [56])) = $10
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [128])
	*($4 + [48]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [112]) = *($4 + [88])
	$0 = *($4 + [80])
	$1 = *($4 + [104])
	*($9) = *($3)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $11
	*(($4 + [8])) = $11
	$11 = *($4 + [128])
	*($4) = $11
	*($4 + [144]) = $11
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $99($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [272])
	$global$0 = $2
	CALL eosio_assert(((int_64)CALL $15($0) != (int_64)1), [8432])
	$3 = [0]
	*((($2 + [216]) + [32])) = [0]
	*($2 + [232]) = (int_64)-1
	*($2 + [240]) = (int_64)0
	$4 = *($0 + [8])
	*($2 + [216]) = $4
	*($2 + [224]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)4292915607302569984, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $36(($2 + [216]), $6)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)($2 + [216])), [9497])
	
.LABEL $label$1
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [8733])
	*((($2 + [176]) + [32])) = [0]
	*($2 + [192]) = (int_64)-1
	*($2 + [200]) = (int_64)0
	$4 = *(($0 + [8]))
	*($2 + [176]) = $4
	*($2 + [184]) = $4
	$7 = CALL db_find_i64($4, $4, (int_64)-3553696347762720768, *($5 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $22(($2 + [176]), $7)
	CALL eosio_assert(((int_32)*($3 + [52]) == (int_32)($2 + [176])), [9497])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8616])
	CALL require_auth(*($3 + [8]))
	*($2 + [128]) = (int_64)3617214756542218240
	*($2 + [120]) = *($0)
	*($2 + [104]) = [8192]
	*($2 + [108]) = CALL $93([8192])
	*($2 + [16]) = *($2 + [104])
	$8 = CALL $2(($2 + [112]), ($2 + [16]))
	*($2 + [88]) = [8213]
	*($2 + [92]) = CALL $93([8213])
	*($2 + [8]) = *($2 + [88])
	$9 = CALL $2(($2 + [96]), ($2 + [8]))
	$4 = *($0)
	*((($2 + [24]) + [8])) = [0]
	*($2 + [24]) = (int_64)0
	$0 = CALL $93([8780])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$3 }
	$7 = ($5 + [24])
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$6 }
	*($2 + [24]) = ($0 << [1])
	$3 = (($2 + [24]) | [1])
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$10 = (($0 + [16]) & [-16])
	$3 = CALL _Znwj($10)
	*($2 + [24]) = ($10 | [1])
	*($2 + [32]) = $3
	*($2 + [28]) = $0
	
.LABEL $label$5
	CALL memcpy($3, [8780], $0)
	
.LABEL $label$4
	*(($3 + $0)) = [0]
	$1 = *(($7 + [8]))
	$11 = *($7)
	$12 = *($5 + [16])
	$0 = (($2 + [24]) + [8])
	*(($2 + [80])) = *($0)
	*(($2 + [64])) = $1
	*($0) = [0]
	*($2 + [40]) = $4
	*($2 + [48]) = $12
	*($2 + [72]) = *($2 + [24])
	*($2 + [56]) = $11
	*($2 + [24]) = (int_64)0
	$0 = CALL $33(($2 + [136]), ($2 + [120]), *($8), *($9), ($2 + [40]))
	CALL $34(($2 + [256]), $0)
	$3 = *($2 + [256])
	CALL send_inline($3, (*($2 + [260]) - $3))
	$3 = *($2 + [256])
	if ( ($3 == 0) ){ goto $label$7 }
	*($2 + [260]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$3 = *($0 + [28])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($0 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$3 = *($0 + [16])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($0 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	if ( ((*(($2 + [72])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [80])))
	
.LABEL $label$10
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$11
	CALL eosio_assert($6, [9887])
	CALL eosio_assert($6, [9921])
	$0 = CALL db_next_i64(*($5 + [44]), ($2 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$12 }
	CALL $36(($2 + [216]), $0)
	
.LABEL $label$12
	CALL $38(($2 + [216]), $5)
	$3 = *($2 + [200])
	if ( ($3 == 0) ){ goto $label$13 }
	$6 = ($2 + [204])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$17 }
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($0 + [24])))
	
.LABEL $label$18
	CALL _ZdlPv($0)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($2 + [200]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $3
	
.LABEL $label$14
	*($6) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$3 = *($2 + [240])
	if ( ($3 == 0) ){ goto $label$19 }
	$6 = ($2 + [244])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$23 }
	CALL _ZdlPv($0)
	
.LABEL $label$23
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($2 + [240]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $3
	
.LABEL $label$20
	*($6) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$global$0 = ($2 + [272])
	return (unreachable)
	
.LABEL $label$3
	CALL $66(($2 + [24]))
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [224])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)CALL $15($0) != (int_64)1), [8432])
	*(($2 + [200])) = [0]
	*($2 + [184]) = (int_64)-1
	*($2 + [192]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [168]) = $3
	*($2 + [176]) = $3
	$4 = CALL $30(($2 + [168]), $1, [8650])
	*($2 + [120]) = (int_64)3617214756542218240
	*($2 + [112]) = *($0)
	*($2 + [96]) = [8192]
	*($2 + [100]) = CALL $93([8192])
	*($2 + [8]) = *($2 + [96])
	$5 = CALL $2(($2 + [104]), ($2 + [8]))
	*($2 + [80]) = [8213]
	*($2 + [84]) = CALL $93([8213])
	*($2) = *($2 + [80])
	$6 = CALL $2(($2 + [88]), $2)
	$1 = *($0)
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$0 = CALL $93([8686])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = ($4 + [48])
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*($2 + [16]) = ($0 << [1])
	$8 = (($2 + [16]) | [1])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$9 = (($0 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($2 + [16]) = ($9 | [1])
	*($2 + [24]) = $8
	*($2 + [20]) = $0
	
.LABEL $label$3
	CALL memcpy($8, [8686], $0)
	
.LABEL $label$2
	*(($8 + $0)) = [0]
	$3 = *($4 + [8])
	*(($2 + [56])) = *(($7 + [8]))
	$0 = (($2 + [16]) + [8])
	*(($2 + [72])) = *($0)
	*($0) = [0]
	*($2 + [32]) = $1
	*($2 + [48]) = *($7)
	*($2 + [64]) = *($2 + [16])
	*($2 + [40]) = $3
	*($2 + [16]) = (int_64)0
	$0 = CALL $33(($2 + [128]), ($2 + [112]), *($5), *($6), ($2 + [32]))
	CALL $34(($2 + [208]), $0)
	$8 = *($2 + [208])
	CALL send_inline($8, (*($2 + [212]) - $8))
	$8 = *($2 + [208])
	if ( ($8 == 0) ){ goto $label$5 }
	*($2 + [212]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$5
	$8 = *($0 + [28])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($0 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$8 = *($0 + [16])
	if ( ($8 == 0) ){ goto $label$7 }
	*(($0 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$7
	if ( ((*(($2 + [64])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [72])))
	
.LABEL $label$8
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$9
	CALL $35(($2 + [168]), $4)
	$8 = *($2 + [192])
	if ( ($8 == 0) ){ goto $label$10 }
	$7 = ($2 + [196])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($2 + [192]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $8
	
.LABEL $label$11
	*($7) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$global$0 = ($2 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $66(($2 + [16]))
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [224])
	$global$0 = $2
	CALL eosio_assert(((int_64)CALL $15($0) != (int_64)1), [8432])
	*(($2 + [200])) = [0]
	*($2 + [184]) = (int_64)-1
	*($2 + [192]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [168]) = $3
	*($2 + [176]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)4292915607302569984, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $36(($2 + [168]), $5)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($2 + [168])), [9497])
	
.LABEL $label$1
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [8733])
	CALL require_auth(*($4 + [16]))
	*($2 + [120]) = (int_64)3617214756542218240
	*($2 + [112]) = *($0)
	*($2 + [96]) = [8192]
	*($2 + [100]) = CALL $93([8192])
	*($2 + [8]) = *($2 + [96])
	$7 = CALL $2(($2 + [104]), ($2 + [8]))
	*($2 + [80]) = [8213]
	*($2 + [84]) = CALL $93([8213])
	*($2) = *($2 + [80])
	$8 = CALL $2(($2 + [88]), $2)
	$3 = *($0)
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$0 = CALL $93([8819])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	$9 = ($4 + [24])
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [16]) = ($0 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$10 = (($0 + [16]) & [-16])
	$5 = CALL _Znwj($10)
	*($2 + [16]) = ($10 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $0
	
.LABEL $label$4
	CALL memcpy($5, [8819], $0)
	
.LABEL $label$3
	*(($5 + $0)) = [0]
	$1 = *(($4 + [16]))
	$11 = *(($9 + [8]))
	$12 = *($9)
	$0 = (($2 + [16]) + [8])
	*(($2 + [72])) = *($0)
	*(($2 + [56])) = $11
	*($0) = [0]
	*($2 + [32]) = $3
	$3 = *($2 + [16])
	*($2 + [16]) = (int_64)0
	*($2 + [40]) = $1
	*($2 + [64]) = $3
	*($2 + [48]) = $12
	$0 = CALL $33(($2 + [128]), ($2 + [112]), *($7), *($8), ($2 + [32]))
	CALL $34(($2 + [208]), $0)
	$5 = *($2 + [208])
	CALL send_inline($5, (*($2 + [212]) - $5))
	$5 = *($2 + [208])
	if ( ($5 == 0) ){ goto $label$6 }
	*($2 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$5 = *($0 + [28])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($0 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$5 = *($0 + [16])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($0 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$8
	if ( ((*(($2 + [64])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [72])))
	
.LABEL $label$9
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$10
	CALL eosio_assert($6, [9887])
	CALL eosio_assert($6, [9921])
	$0 = CALL db_next_i64(*($4 + [44]), ($2 + [32]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$11 }
	CALL $36(($2 + [168]), $0)
	
.LABEL $label$11
	CALL $38(($2 + [168]), $4)
	$5 = *($2 + [192])
	if ( ($5 == 0) ){ goto $label$12 }
	$6 = ($2 + [196])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	CALL _ZdlPv($0)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($2 + [192]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $5
	
.LABEL $label$13
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$global$0 = ($2 + [224])
	return (unreachable)
	
.LABEL $label$2
	CALL $66(($2 + [16]))
}

int_32 .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $93([8222])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8222], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $83())
	*(CALL $83()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $90($4, ($3 + [12]), $2)
	$5 = CALL $83()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $76($3)
	
.LABEL $label$1
	CALL $77($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8331])
	$2 = CALL $73($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $68($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [8349])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $71($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

int_32 .FUNC $19 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8366])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8366])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $96($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9952])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $96($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $29(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9260])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9260])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9449])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4292915607302569984)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9395])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9395])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $36(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [9074])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [9260])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9449])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6219918174314299392)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9395])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9395])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $17(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $41($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9074])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9074])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $44(CALL $43($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $57(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9074])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9074])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9074])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9739])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9784])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9834])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $45($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $71($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $71($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $66($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [56]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9449])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3553696347762720768)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9395])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9395])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $22(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-5915044176688316416, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $40($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $47(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9343])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	$6 = *($5 + [8])
	*(($1 + [40])) = *(($6 + [24]))
	*(($1 + [32])) = *(($6 + [16]))
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	$5 = *($5 + [12])
	*($1 + [48]) = *($5 + [16])
	*(($1 + [56])) = *(($5 + [24]))
	$6 = $2
	$5 = ($6 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [48])
	CALL $48(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-5915044176688316416, *(*($0 + [8])), $7, $5, [64])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)4292915607302569984, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $36($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $51(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9343])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	$5 = *($5 + [12])
	*(($1 + [32])) = *(($5 + [24]))
	*($1 + [24]) = *($5 + [16])
	$6 = $2
	$5 = ($6 + [-48])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-8])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [24])
	CALL $52(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)4292915607302569984, *(*($0 + [8])), $7, $5, [40])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9269])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	CALL $50(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $32(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9260])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-6219918174314299392, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $17($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $54(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9343])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	$6 = *($5 + [8])
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	*($1 + [32]) = *(*($5 + [12]))
	$6 = $2
	$5 = ($6 + [-48])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-8])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [32])
	CALL $26(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-6219918174314299392, *(*($0 + [8])), $7, $5, [40])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9074])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $70($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $99($0)
	
.LABEL $label$1
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $66 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $99($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $94(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9952])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $94(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $88($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $83()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $88($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18369]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $87($0, (int_64)0)
	*(CALL $83()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $88($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $88($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $88($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $88($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18369])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $88($0)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $88($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8204]))
	$8 = (int_64)0
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $88($0)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $88($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $87($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18369]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18369]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $88($0) + [18369]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $83()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $83()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $83()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $88 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $86($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $87 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $85($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $84 (int_32 $0)
{
}

int_32 .FUNC $83 ()
{
	return [9956]
}

int_32 .FUNC $82 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $81 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $80 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $91(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $76 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $78($1, $0, [8843])
	CALL $79()
	(unreachable)
}

void .FUNC $77 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $78($1, $0, [8803])
	CALL $80()
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $92(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9260])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9260])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $29(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9269])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $53(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9583])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9629])
	$3 = *(*($3) + [4])
	*($1 + [8]) = *($3 + [16])
	*($1 + [32]) = *($3 + [24])
	*(($1 + [40])) = *(($3 + [32]))
	$6 = *($1)
	CALL eosio_assert([1], [9680])
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [36])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [32])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $96($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [32]) = $7
	*($5 + [36]) = $9
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [40]) = ($1 + [48])
	CALL $56(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [56]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $99($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $93($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $70($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $79 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $41($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $42(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [9497])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5915044176688316416, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $40($0, $4)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$0), [9497])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-3553696347762720768, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $22($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $55(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9343])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]) + [8])
	$8 = ($1 + [16])
	CALL $69($8, *($5 + [8]))
	$5 = *($5 + [4])
	*($1 + [32]) = *($5 + [48])
	*(($1 + [40])) = *(($5 + [56]))
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [36])
	$7 = (CASTING uint_64)(uint_32 $6)
	$9 = ($1 + [32])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$6 = CALL $96($5)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = $8
	*($3 + [36]) = $9
	*($3 + [40]) = ($1 + [48])
	CALL $56(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)-3553696347762720768, *(*($0 + [8])), $7, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $99($6)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}