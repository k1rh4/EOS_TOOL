(data (i32.const 8192) "error reading iterator\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8224) "read\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8320) "get\00")
(data (i32.const 8324) "cannot increment end iterator\00")
(data (i32.const 8354) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8405) "next primary key in table is at autoincrement limit\00")
(data (i32.const 8457) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 8511) "cannot decrement iterator at beginning of table\00")
(data (i32.const 8559) "cannot create objects in table of another contract\00%d\00")
(data (i32.const 8613) "write\00")
(data (i32.const 8619) "Token not found\00")
(data (i32.const 8635) "cannot pass end iterator to modify\00")
(data (i32.const 8670) "object passed to modify is not in multi_index\00")
(data (i32.const 8716) "cannot modify objects in table of another contract\00")
(data (i32.const 8767) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8826) "cannot pass end iterator to erase\00")
(data (i32.const 8860) "object passed to erase is not in multi_index\00")
(data (i32.const 8905) "cannot erase objects in table of another contract\00")
(data (i32.const 8955) "attempt to remove object that was not in multi_index\00")
(data (i32.const 17424) ": no conversion\00")
(data (i32.const 17440) ": out of range\00")
(data (i32.const 17456) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 17536) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$10 (param i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$11 (result i64)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$14))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$25 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$28 (param i32 f64)))
(import "env" "prints_l" (func $fimport$29 (param i32 i32)))
(import "env" "__extendsftf2" (func $fimport$30 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$33 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$35 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$36 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$37 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $135))
(export "_Znwj" (func $133))
(export "_Znaj" (func $134))
(export "_ZdaPv" (func $136))
(export "_ZnwjSt11align_val_t" (func $137))
(export "_ZnajSt11align_val_t" (func $138))
(export "_ZdlPvSt11align_val_t" (func $139))
(export "_ZdaPvSt11align_val_t" (func $140))
(table $0 22 22 anyfunc)
(elem (i32.const 1) $2 $4 $6 $8 $10 $12 $14 $16 $18 $19 $20 $22 $24 $25 $26 $28 $30 $32 $33 $160 $162)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17793))
(global $global$2 i32 (i32.const 17793))


int_32 .FUNC $174 (int_32 $0)
{
	return CALL $175([9028], $0)
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, float_64 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$13 = ($global$0 - [16])
	$global$0 = $13
	CALL require_auth(*($0))
	$14 = *(($0 + [168]))
	if ( ((int_64)$14 != (int_64)-1) ){ goto $label$1 }
	$14 = (int_64)0
	$15 = ($0 + [152])
	$16 = CALL db_lowerbound_i64(*($15), *(($0 + [160])), (int_64)-6030999592730886144, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$2 }
	CALL $44($15, $16)
	*($13 + [12]) = [0]
	*($13 + [8]) = $15
	$14 = *(*(CALL $47(($13 + [8])) + [4]))
	$14 = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [168])) = $14
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($14 <= (int_64)-2), [8405])
	$global$0 = ($13 + [16])
}

int_32 .FUNC $176 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9020]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9024])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9020]) = [1]
	$2 = ($2 << [16])
	*([0] + [9024]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9024])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9024]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9020]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9020]) = [1]
	$3 = ($3 << [16])
	*([0] + [9024]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9024])
	
.LABEL $label$10
	*([0] + [9024]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $177 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17412])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17220]
	$3 = (((int_32)$1 * (int_32)[12]) + [17220])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $170 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $171 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $172 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $157())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $173($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [544])
	$global$0 = $3
	*(($4 = $3) + [488]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [368])) = (int_64)0
	*((($4 + [352]) + [24])) = (int_64)0
	*((($4 + [352]) + [40])) = (int_64)0
	*((($4 + [352]) + [48])) = (int_64)0
	*((($4 + [352]) + [64])) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*((($4 + [352]) + [96])) = (int_64)0
	*((($4 + [352]) + [104])) = (int_64)0
	*((($4 + [352]) + [120])) = (int_64)0
	*((($4 + [352]) + [128])) = [0]
	*($4 + [352]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [440]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*(($4 + [484])) = [0]
	*($4 + [344]) = ($2 + $5)
	*($4 + [336]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [352]), $2, [8])
	*($4 + [340]) = ($2 + [8])
	CALL $35(($4 + [336]), (($4 + [352]) + [8]))
	CALL $35(($4 + [336]), ($4 + [372]))
	CALL $35(($4 + [336]), ($4 + [384]))
	CALL $35(($4 + [336]), ($4 + [396]))
	CALL $35(($4 + [336]), (($4 + [352]) + [56]))
	CALL $35(($4 + [336]), ($4 + [420]))
	CALL eosio_assert(((uint_32)(*($4 + [344]) - *($4 + [340])) > (uint_32)[7]), [8224])
	CALL memcpy((($4 + [352]) + [80]), *($4 + [340]), [8])
	*($4 + [340]) = (*($4 + [340]) + [8])
	CALL $35(($4 + [336]), (($4 + [352]) + [88]))
	CALL $35(($4 + [336]), ($4 + [452]))
	CALL $35(($4 + [336]), ($4 + [464]))
	CALL $35(($4 + [336]), ($4 + [476]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [344])
	*($4 + [8]) = *($4 + [336])
	$3 = *($3)
	*((($4 + [496]) + [8])) = $3
	*(($6 = (($4 + [512]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [512]) = $7
	*($4 + [496]) = $7
	$3 = *($6)
	*((($4 + [528]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [512])
	*($4 + [40]) = $1
	*($4 + [528]) = $1
	*((($4 + [24]) + [40])) = $0
	*((($4 + [24]) + [48])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*((($4 + [24]) + [64])) = [0]
	*((($4 + [24]) + [80])) = $0
	*((($4 + [24]) + [88])) = (int_64)-1
	*((($4 + [24]) + [96])) = (int_64)0
	*((($4 + [24]) + [104])) = [0]
	*((($4 + [24]) + [120])) = $0
	*((($4 + [24]) + [128])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*(($4 + [304])) = $0
	*(($4 + [312])) = (int_64)-1
	*(($4 + [320])) = (int_64)0
	*(($4 + [328])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [296]) = $0
	*($4 + [532]) = ($4 + [488])
	*($4 + [528]) = ($4 + [24])
	CALL $53(($4 + [528]), ($4 + [352]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $177($2)
	
.LABEL $label$4
	CALL $37(($4 + [24]))
	CALL $54(($4 + [352]))
	$global$0 = ($4 + [544])
	return [1]
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	$7 = ($global$0 - [48])
	$global$0 = $7
	*($7 + [32]) = $3
	*($7 + [40]) = $2
	*($7 + [28]) = [999999]
	$8 = ($0 + [152])
	if ( ((int_64)$6 != (int_64)999999) ){ goto $label$1 }
	$6 = CALL $76($8)
	
.LABEL $label$1
	*($7 + [28]) = $6
	CALL require_auth(*($0))
	$6 = *($0)
	*($7 + [20]) = $4
	*($7 + [24]) = $5
	*($7 + [12]) = ($7 + [40])
	*($7 + [8]) = ($7 + [28])
	*($7 + [16]) = ($7 + [32])
	CALL $48($7, $8, $6, ($7 + [8]))
	$global$0 = ($7 + [48])
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [464])
	$global$0 = $3
	*(($4 = $3) + [408]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [384])) = (int_64)0
	*((($4 + [352]) + [40])) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [340]) = $2
	*($4 + [336]) = $2
	*($4 + [344]) = ($2 + $5)
	*($4 + [448]) = ($4 + [336])
	*($4 + [24]) = ($4 + [352])
	CALL $74(($4 + [24]), ($4 + [448]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [344])
	*($4 + [8]) = *($4 + [336])
	$3 = *($3)
	*((($4 + [416]) + [8])) = $3
	*(($6 = (($4 + [432]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [432]) = $7
	*($4 + [416]) = $7
	$3 = *($6)
	*((($4 + [448]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [432])
	*($4 + [40]) = $1
	*($4 + [448]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*(($4 + [304])) = $0
	*(($4 + [312])) = (int_64)-1
	*(($4 + [320])) = (int_64)0
	*(($4 + [328])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [296]) = $0
	*($4 + [452]) = ($4 + [408])
	*($4 + [448]) = ($4 + [24])
	CALL $75(($4 + [448]), ($4 + [352]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $177($2)
	
.LABEL $label$4
	CALL $37(($4 + [24]))
	if ( ((*($4 + [388]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [396])))
	
.LABEL $label$5
	if ( ((*($4 + [376]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [384])))
	
.LABEL $label$6
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $127 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14)
{
	int_32 $15
	int_32 $16
	int_32 $17
	$15 = ($global$0 - [208])
	$global$0 = $15
	$0 = *($0 + [4])
	$16 = *($0 + [4])
	$17 = (*($0) + int_32($16 >> [1]))
	$0 = *($0)
	if ( (($16 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($17) + $0))
	
.LABEL $label$1
	$14 = CALL $142($15, $14)
	$13 = CALL $142(($15 + [16]), $13)
	$12 = CALL $142(($15 + [32]), $12)
	$11 = CALL $142(($15 + [48]), $11)
	$10 = CALL $142(($15 + [64]), $10)
	$9 = CALL $142(($15 + [80]), $9)
	$8 = CALL $142(($15 + [96]), $8)
	$7 = CALL $142(($15 + [112]), $7)
	$6 = CALL $142(($15 + [128]), $6)
	$5 = CALL $142(($15 + [144]), $5)
	$4 = CALL $142(($15 + [160]), $4)
	$3 = CALL $142(($15 + [176]), $3)
	$2 = CALL $142(($15 + [192]), $2)
	CALL void $17((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_32 $9), (int_32 $10), (int_32 $11), (int_32 $12), (int_32 $13), (int_32 $14), (int_32 $0))
	if ( (*($14) & [1]) ){ goto $label$26 }
	if ( (*($13) & [1]) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL _ZdlPv(*($14 + [8]))
	if ( ((*($13) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL _ZdlPv(*($13 + [8]))
	$0 = [1]
	if ( ((*($12) & [1]) == 0) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$0 = [1]
	if ( (*($12) & [1]) ){ goto $label$22 }
	
.LABEL $label$23
	if ( (*($11) & $0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($11) & $0) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv(*($11 + [8]))
	$0 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$0 = [1]
	if ( (*($10) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( (*($9) & $0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($9) & $0) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($9 + [8]))
	$0 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$0 = [1]
	if ( (*($8) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($7) & $0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & $0) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($7 + [8]))
	$0 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$0 = [1]
	if ( (*($6) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($5) & $0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $0) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$0 = [1]
	if ( (*($4) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($3) & $0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($2) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($15 + [208])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($15 + [208])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [272])) = [0]
	*(($4 + [288])) = $0
	*(($4 + [296])) = (int_64)-1
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = [0]
	*($4 + [280]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $177($2)
	
.LABEL $label$5
	CALL $37(($4 + [8]))
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8559])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [56]) = $1
	CALL $118(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $110(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8559])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56]) = [0]
	*($3 + [60]) = $1
	CALL $119(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [64])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $92(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$4
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC memory ()
{
}

int_64 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = CALL db_lowerbound_i64(*($0 + [232]), *(($0 + [240])), (int_64)-3020371635640205312, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($1 + [1])
	$5 = ($0 + [232])
	$6 = CALL $84($5, $3)
	$7 = ($1 + [4])
	$8 = ($1 + [8])
	
.LOOP $label$3:
	$3 = ($0 & [1])
	$0 = *($1)
	$10 = ($0 & [1])
	$0 = *($6 + [16])
	$9 = uint_32($0 >> [1])
	$11 = ( *(($6 + [20])) ? $9 : $10 )
	if ( ((int_32)$11 != (int_32)( *($7) ? uint_32($0 >> [1]) : $3 )) ){ goto $label$4 }
	$0 = (($6 + [16]) + [1])
	$3 = ( *($8) ? $4 : $3 )
	if ( $10 ){ goto $label$5 }
	if ( ($11 == 0) ){ goto $label$1 }
	$10 = ([0] - $9)
	
.LOOP $label$6:
	if ( ((int_32)*($0) != (int_32)*($3)) ){ goto $label$4 }
	$3 = ($3 + [1])
	$0 = ($0 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$5
	if ( ($11 == 0) ){ goto $label$1 }
	if ( (CALL $170(( *(($6 + [24])) ? $0 : $10 ), $3, $11) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL eosio_assert([1], [8324])
	$0 = CALL db_next_i64(*($6 + [56]), ($2 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $84($5, $0)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return (int_64)0
	
.LABEL $label$1
	$12 = *($6)
	$global$0 = ($2 + [16])
	return $12
}

int_64 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-3665743317141815296, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$5 = ($2 + [1])
	$6 = ($1 + [1])
	$7 = ($0 + [32])
	$8 = CALL $45($7, $4)
	$9 = ($1 + [4])
	
.LOOP $label$3:
	$4 = ($0 & [1])
	$0 = *($1)
	$11 = ($0 & [1])
	$0 = *($8 + [8])
	$10 = uint_32($0 >> [1])
	$12 = ( *(($8 + [12])) ? $10 : $11 )
	if ( ((int_32)$12 != (int_32)( *($9) ? uint_32($0 >> [1]) : $4 )) ){ goto $label$4 }
	$0 = (($8 + [8]) + [1])
	$4 = ( *(($1 + [8])) ? $6 : $4 )
	if ( $11 ){ goto $label$6 }
	if ( ($12 == 0) ){ goto $label$5 }
	$11 = ([0] - $10)
	
.LOOP $label$7:
	if ( ((int_32)*($0) != (int_32)*($4)) ){ goto $label$4 }
	$4 = ($4 + [1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	if ( $11 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ($12 == 0) ){ goto $label$5 }
	if ( CALL $170(( *(($8 + [16])) ? $0 : $11 ), $4, $12) ){ goto $label$4 }
	
.LABEL $label$5
	$0 = ($0 & [1])
	$0 = *($8 + [20])
	$4 = ($0 & [1])
	$0 = *($2)
	$12 = uint_32($0 >> [1])
	$11 = ( *(($2 + [4])) ? $12 : $4 )
	if ( ((int_32)$11 != (int_32)( *(($8 + [24])) ? uint_32($0 >> [1]) : $0 )) ){ goto $label$4 }
	$0 = ( *(($8 + [28])) ? (($8 + [20]) + [1]) : $0 )
	if ( $4 ){ goto $label$8 }
	if ( ($11 == 0) ){ goto $label$1 }
	$11 = ([0] - $12)
	$4 = $5
	
.LOOP $label$9:
	if ( ((int_32)*($4) != (int_32)*($0)) ){ goto $label$4 }
	$0 = ($0 + [1])
	$4 = ($4 + [1])
	$11 = ($11 + [1])
	if ( $11 ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$8
	if ( ($11 == 0) ){ goto $label$1 }
	if ( (CALL $170(( *(($2 + [8])) ? $5 : $4 ), $0, $11) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL eosio_assert([1], [8324])
	$0 = CALL db_next_i64(*($8 + [68]), ($3 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $45($7, $0)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($3 + [16])
	return (int_64)0
	
.LABEL $label$1
	$13 = *($8)
	$global$0 = ($3 + [16])
	return $13
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [148]) & [1]) ){ goto $label$23 }
	if ( (*($0 + [136]) & [1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL _ZdlPv(*(($0 + [156])))
	if ( ((*($0 + [136]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($0 + [144])))
	$1 = [1]
	if ( ((*($0 + [124]) & [1]) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$1 = [1]
	if ( (*($0 + [124]) & [1]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( (*($0 + [112]) & $1) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($0 + [132])))
	if ( ((*($0 + [112]) & $1) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($0 + [120])))
	$1 = [1]
	if ( ((*($0 + [92]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$1 = [1]
	if ( (*($0 + [92]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($0 + [80]) & $1) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($0 + [100])))
	if ( ((*($0 + [80]) & $1) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($0 + [88])))
	$1 = [1]
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$1 = [1]
	if ( (*($0 + [68]) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($0 + [56]) & $1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($0 + [76])))
	if ( ((*($0 + [56]) & $1) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($0 + [64])))
	$1 = [1]
	if ( ((*($0 + [44]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($0 + [44]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($0 + [32]) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($0 + [52])))
	if ( ((*($0 + [32]) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($0 + [40])))
	$1 = [1]
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($0 + [20]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($0 + [8]) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($0 + [28])))
	if ( ((*($0 + [8]) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($0 + [16])))
	return $0
	
.LABEL $label$1
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [192])
	$global$0 = $2
	$1 = CALL $142($2, ($1 + [148]))
	$13 = CALL $142(($2 + [16]), ($1 + [136]))
	$12 = CALL $142(($2 + [32]), ($1 + [124]))
	$11 = CALL $142(($2 + [48]), ($1 + [112]))
	$10 = CALL $142(($2 + [64]), ($1 + [92]))
	$9 = CALL $142(($2 + [80]), ($1 + [80]))
	$8 = CALL $142(($2 + [96]), ($1 + [68]))
	$7 = CALL $142(($2 + [112]), ($1 + [56]))
	$6 = CALL $142(($2 + [128]), ($1 + [44]))
	$5 = CALL $142(($2 + [144]), ($1 + [32]))
	$4 = CALL $142(($2 + [160]), ($1 + [20]))
	$3 = CALL $142(($2 + [176]), ($1 + [8]))
	CALL $128($0, *($1), $3, $4, $5, $6, $7, $8, $9, $10, *($1 + [104]), $11, $12, $13, $1)
	if ( (*($1) & [1]) ){ goto $label$23 }
	if ( (*($13) & [1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($13) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*($13 + [8]))
	$1 = [1]
	if ( ((*($12) & [1]) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$1 = [1]
	if ( (*($12) & [1]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( (*($11) & $1) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($11) & $1) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*($11 + [8]))
	$1 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$1 = [1]
	if ( (*($10) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($9) & $1) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($9) & $1) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*($9 + [8]))
	$1 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$1 = [1]
	if ( (*($8) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($7) & $1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & $1) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($5) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [192])
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [64]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8511])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6030999592730886144)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8457])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8457])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $44(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_64 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = CALL db_lowerbound_i64(*($0 + [152]), *(($0 + [160])), (int_64)-6030999592730886144, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($1 + [1])
	$5 = ($0 + [152])
	$6 = CALL $44($5, $3)
	$7 = ($1 + [4])
	$8 = ($1 + [8])
	
.LOOP $label$3:
	$3 = ($0 & [1])
	$0 = *($1)
	$10 = ($0 & [1])
	$0 = *($6 + [24])
	$9 = uint_32($0 >> [1])
	$11 = ( *(($6 + [28])) ? $9 : $10 )
	if ( ((int_32)$11 != (int_32)( *($7) ? uint_32($0 >> [1]) : $3 )) ){ goto $label$4 }
	$0 = (($6 + [24]) + [1])
	$3 = ( *($8) ? $4 : $3 )
	if ( $10 ){ goto $label$5 }
	if ( ($11 == 0) ){ goto $label$1 }
	$10 = ([0] - $9)
	
.LOOP $label$6:
	if ( ((int_32)*($0) != (int_32)*($3)) ){ goto $label$4 }
	$3 = ($3 + [1])
	$0 = ($0 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$5
	if ( ($11 == 0) ){ goto $label$1 }
	if ( (CALL $170(( *(($6 + [32])) ? $0 : $10 ), $3, $11) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL eosio_assert([1], [8324])
	$0 = CALL db_next_i64(*($6 + [64]), ($2 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $44($5, $0)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return (int_64)0
	
.LABEL $label$1
	$12 = *($6)
	$global$0 = ($2 + [16])
	return $12
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8192])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $174($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([80])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [64]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8224])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	$6 = CALL $35(CALL $35(CALL $35(CALL $35(($3 + [32]), ($5 + [8])), ($5 + [20])), ($5 + [32])), ($5 + [44]))
	CALL eosio_assert(((uint_32)(*($6 + [8]) - *($6 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($5 + [56]), *($6 + [4]), [8])
	*($5 + [68]) = $1
	*($6 + [4]) = (*($6 + [4]) + [8])
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $85(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $177($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [44]) & [1]) ){ goto $label$16 }
	if ( (*($1 + [32]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [40])))
	$4 = [1]
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = [1]
	if ( (*($1 + [20]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($1 + [8]) & $4) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [28])))
	if ( ((*($1 + [8]) & $4) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8192])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $174($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [32]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [60]) = $0
	CALL $91(($3 + [32]), $5)
	*($5 + [64]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $92(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $177($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$10
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $167 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $165($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $166 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $165 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $164($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $164 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $163 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $159([21], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $162 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $166($3, (int_64)0)
	$4 = CALL $168($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $168 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $167($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $157()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $167($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [17537]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $166($0, (int_64)0)
	*(CALL $157()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $167($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $167($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $167($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $167($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [17537])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [17537]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [17537]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $167($0)
	$5 = *(($6 + [17537]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $167($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [17537]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8215]))
	$8 = (int_64)0
	$5 = *(($6 + [17537]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [17537]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $167($0)
	$5 = *(($6 + [17537]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $167($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [17537]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $166($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [17537]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [17537]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $167($0) + [17537]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $157()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $157()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $157()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $176($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8234])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8559])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $98(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $99(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	$6 = CALL $142($2, ($1 + [44]))
	$5 = CALL $142(($2 + [16]), ($1 + [32]))
	$4 = CALL $142(($2 + [32]), ($1 + [20]))
	$3 = CALL $142(($2 + [48]), ($1 + [8]))
	CALL $132($0, *($1), $3, $4, $5, $6, *($1 + [56]))
	if ( (*($6) & [1]) ){ goto $label$7 }
	if ( (*($5) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	CALL $35(*($1), ($3 + [8]))
	CALL $35(*($1), ($3 + [20]))
	CALL $35(*($1), ($3 + [32]))
	CALL $35(*($1), ($3 + [44]))
	CALL $35(*($1), ($3 + [56]))
	CALL $35(*($1), ($3 + [68]))
	CALL $35(*($1), ($3 + [80]))
	CALL $35(*($1), ($3 + [92]))
	CALL $35(*($1), ($3 + [104]))
	CALL $35(*($1), ($3 + [116]))
	CALL $35(*($1), ($3 + [128]))
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [176])
	$global$0 = $2
	$1 = CALL $142($2, ($1 + [128]))
	$12 = CALL $142(($2 + [16]), ($1 + [116]))
	$11 = CALL $142(($2 + [32]), ($1 + [104]))
	$10 = CALL $142(($2 + [48]), ($1 + [92]))
	$9 = CALL $142(($2 + [64]), ($1 + [80]))
	$8 = CALL $142(($2 + [80]), ($1 + [68]))
	$7 = CALL $142(($2 + [96]), ($1 + [56]))
	$6 = CALL $142(($2 + [112]), ($1 + [44]))
	$5 = CALL $142(($2 + [128]), ($1 + [32]))
	$4 = CALL $142(($2 + [144]), ($1 + [20]))
	$3 = CALL $142(($2 + [160]), ($1 + [8]))
	CALL $129($0, *($1), $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $1)
	if ( (*($1) & [1]) ){ goto $label$21 }
	if ( (*($12) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($12) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*($12 + [8]))
	$1 = [1]
	if ( ((*($11) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$1 = [1]
	if ( (*($11) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( (*($10) & $1) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($10) & $1) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($10 + [8]))
	$1 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = [1]
	if ( (*($9) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($8) & $1) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & $1) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($8 + [8]))
	$1 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($7) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($6) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [176])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [176])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [128]) & [1]) ){ goto $label$21 }
	if ( (*($0 + [116]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($0 + [136])))
	if ( ((*($0 + [116]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($0 + [124])))
	$1 = [1]
	if ( ((*($0 + [104]) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$1 = [1]
	if ( (*($0 + [104]) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( (*($0 + [92]) & $1) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($0 + [112])))
	if ( ((*($0 + [92]) & $1) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($0 + [100])))
	$1 = [1]
	if ( ((*($0 + [80]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = [1]
	if ( (*($0 + [80]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($0 + [68]) & $1) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($0 + [88])))
	if ( ((*($0 + [68]) & $1) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($0 + [76])))
	$1 = [1]
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($0 + [56]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($0 + [44]) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($0 + [64])))
	if ( ((*($0 + [44]) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($0 + [52])))
	$1 = [1]
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($0 + [32]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($0 + [20]) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($0 + [40])))
	if ( ((*($0 + [20]) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($0 + [28])))
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($0 + [8]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	CALL _ZdlPv(*(($0 + [16])))
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [160])
	$global$0 = $2
	$1 = CALL $142($2, ($1 + [124]))
	$11 = CALL $142(($2 + [16]), ($1 + [112]))
	$10 = CALL $142(($2 + [32]), ($1 + [100]))
	$9 = CALL $142(($2 + [48]), ($1 + [88]))
	$8 = CALL $142(($2 + [64]), ($1 + [68]))
	$7 = CALL $142(($2 + [80]), ($1 + [56]))
	$6 = CALL $142(($2 + [96]), ($1 + [44]))
	$5 = CALL $142(($2 + [112]), ($1 + [32]))
	$4 = CALL $142(($2 + [128]), ($1 + [20]))
	$3 = CALL $142(($2 + [144]), ($1 + [8]))
	CALL $130($0, *($1), $3, $4, $5, $6, $7, $8, *($1 + [80]), $9, $10, $11, $1)
	if ( (*($1) & [1]) ){ goto $label$19 }
	if ( (*($11) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($11) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*($11 + [8]))
	$1 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$1 = [1]
	if ( (*($10) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($9) & $1) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($9) & $1) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*($9 + [8]))
	$1 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$1 = [1]
	if ( (*($8) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($7) & $1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & $1) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($5) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [160])
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [124]) & [1]) ){ goto $label$19 }
	if ( (*($0 + [112]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($0 + [132])))
	if ( ((*($0 + [112]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($0 + [120])))
	$1 = [1]
	if ( ((*($0 + [100]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$1 = [1]
	if ( (*($0 + [100]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($0 + [88]) & $1) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($0 + [108])))
	if ( ((*($0 + [88]) & $1) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($0 + [96])))
	$1 = [1]
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$1 = [1]
	if ( (*($0 + [68]) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($0 + [56]) & $1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($0 + [76])))
	if ( ((*($0 + [56]) & $1) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($0 + [64])))
	$1 = [1]
	if ( ((*($0 + [44]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($0 + [44]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($0 + [32]) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($0 + [52])))
	if ( ((*($0 + [32]) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($0 + [40])))
	$1 = [1]
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($0 + [20]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($0 + [8]) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($0 + [28])))
	if ( ((*($0 + [8]) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($0 + [16])))
	return $0
	
.LABEL $label$1
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	$1 = CALL $142($2, ($1 + [32]))
	$4 = CALL $142(($2 + [16]), ($1 + [20]))
	$3 = CALL $142(($2 + [32]), ($1 + [8]))
	CALL $131($0, *($1), $3, $4, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [48])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8559])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [52]) = $1
	CALL $93(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [56])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $89(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($3 + [40]) & [1]) ){ goto $label$8 }
	if ( (*($3 + [28]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [36])))
	if ( (*($3 + [16]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $142(($2 + [16]), ($1 + [8]))
	$1 = CALL $142($2, ($1 + [20]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$7 = CALL $142(($2 + [32]), $1)
	$5 = CALL $142(($2 + [48]), $4)
	CALL void $6((int_32 $3), (int_64 $5), (int_32 $7), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $174($1)
	
.LABEL $label$2
	*(CALL $157()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $174(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $177($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $147(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $163(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8610], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $147(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $147(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $171($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $144($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $150 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $153($1, $0, [17440])
	CALL $154()
	(unreachable)
}

void .FUNC $151 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $153($1, $0, [17424])
	CALL $155()
	(unreachable)
}

void .FUNC $156 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $157 ()
{
	return [9012]
}

void .FUNC $154 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $155 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $158 (int_32 $0)
{
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [20] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $161($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $161($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $161($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $161($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [17456]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $161($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $161($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $161($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8559])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56]) = [0]
	*($3 + [60]) = $1
	CALL $116(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [64])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $92(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$4
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $142(($2 + [16]), ($1 + [8]))
	$5 = *($1 + [24])
	$1 = CALL $142($2, ($1 + [32]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$8 = CALL $142(($2 + [32]), $1)
	$6 = CALL $142(($2 + [48]), $4)
	CALL void $7((int_32 $3), (int_64 $6), (int_32 $5), (int_64 $8), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	$5 = *($0 + [8])
	$4 = *($0 + [4])
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$6 }
	$6 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$5 }
	$2 = ($4 - ($1 + [8]))
	$7 = int_32($2 >> [3])
	$8 = ($4 + [-8])
	if ( ((uint_32)$8 >= (uint_32)$4) ){ goto $label$7 }
	$9 = uint_32((($4 - ($7 << [3])) + ((int_32)$1 ^ (int_32)[-1])) >> [3])
	$5 = $4
	
.LOOP $label$8:
	*($5) = *($8)
	$5 = ($5 + [8])
	$8 = ($8 + [8])
	if ( ($8 <= $4) ){ goto $label$8 }
	*(($0 + [4])) = (($4 + ($9 << [3])) + [8])
	
.LABEL $label$7
	if ( ($2 == 0) ){ goto $label$9 }
	CALL memmove(($4 - ($7 << [3])), $1, $2)
	
.LABEL $label$9
	*($1) = $6
	$global$0 = ($3 + [32])
	return $1
	
.LABEL $label$6
	$7 = *($0)
	$4 = (int_32(($4 - $7) >> [3]) + [1])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	$9 = ($0 + [8])
	$8 = [536870911]
	$5 = ($5 - $7)
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$10 }
	$8 = int_32($5 >> [2])
	$8 = ( $4 ? $8 : ($8 <= $4) )
	
.LABEL $label$10
	*(($3 + [24])) = $9
	$5 = [0]
	*($3 + [20]) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL _Znwj(($8 << [3]))
	
.LABEL $label$11
	*($3 + [8]) = $5
	*(($3 + [20])) = ($5 + ($8 << [3]))
	$8 = ($5 + (int_32(($1 - $7) >> [3]) << [3]))
	*($3 + [16]) = $8
	*($3 + [12]) = $8
	CALL $108(($3 + [8]), $2)
	$5 = *($0)
	$8 = ($1 - $5)
	$4 = *($3 + [12])
	$2 = ($4 - $8)
	*($3 + [12]) = $2
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($2, $5, $8)
	
.LABEL $label$12
	$2 = ($0 + [4])
	$5 = *($2)
	$8 = ($5 - $1)
	if ( ((int_32)$8 <= (int_32)[0]) ){ goto $label$4 }
	$5 = ($3 + [16])
	CALL memcpy(*($5), $1, $8)
	$1 = (*($5) + $8)
	*($5) = $1
	$5 = *($2)
	goto $label$3 
	
.LABEL $label$5
	*($1) = $6
	*(($0 + [4])) = ($1 + [8])
	$global$0 = ($3 + [32])
	return $1
	
.LABEL $label$4
	$1 = *(($3 + [16]))
	
.LABEL $label$3
	$8 = *($0)
	*($0) = *($3 + [12])
	*(($0 + [4])) = $1
	*(($7 = (($3 + [8]) + [8]))) = $5
	$0 = ($0 + [8])
	$1 = *($0)
	$2 = ($3 + [20])
	*($0) = *($2)
	*($2) = $1
	*($3 + [12]) = $8
	*($3 + [8]) = $8
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$13 }
	*($7) = ($5 + (((int_32)(($5 + [-8]) - $8) ^ (int_32)[-1]) & [-8]))
	
.LABEL $label$13
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $4
	
.LABEL $label$2
	CALL $156($0)
	
.LABEL $label$1
	CALL abort()
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8192])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $174($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [32]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [56]) = $0
	CALL $112(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $110(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $177($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8559])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [56]) = $1
	CALL $109(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $110(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [8670])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8716])
	*($1 + [40]) = ((float_64)*($1 + [40]) + (float_64)*(*($3)))
	$6 = *($1)
	CALL eosio_assert([1], [8767])
	$3 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [40])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $174($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $114($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $177($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	CALL $35(*($1), ($3 + [8]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $35(*($1), ($3 + [32]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($3 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($3 + [56]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8559])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([80])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [64]) = $1
	CALL $101(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [68])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $102(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($3 + [44]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [32]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [40])))
	$1 = [1]
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$1 = [1]
	if ( (*($3 + [20]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((*($3 + [8]) & $1) == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [28])))
	if ( ((*($3 + [8]) & $1) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8559])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56]) = [0]
	*($3 + [60]) = $1
	CALL $107(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [64])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $92(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$4
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	float_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $142(($2 + [16]), ($1 + [8]))
	$5 = *($1 + [24])
	$6 = CALL $142($2, ($1 + [32]))
	$7 = *($1 + [56])
	$8 = *($1 + [48])
	$1 = *($0 + [4])
	$9 = *($1 + [4])
	$0 = (*($0) + int_32($9 >> [1]))
	$1 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$10 = CALL $142(($2 + [32]), $6)
	$9 = CALL $142(($2 + [48]), $4)
	CALL void $0((int_32 $3), (int_64 $9), (int_32 $5), (int_64 $10), (int_32 $8), (int_64 $7), (int_64 $1))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($9 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [304])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)3626411730319441919) ){ goto $label$19 }
	if ( ((int_64)$2 > (int_64)5378239803446978686) ){ goto $label$18 }
	if ( ((int_64)$2 <= (int_64)5377987651791486975) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)5377987651791486976) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)5378012888759795712) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)5378050756190819696) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [1]
	*($3 + [128]) = *($3 + [168])
	CALL $3($1, $1, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$19
	if ( ((int_64)$2 <= (int_64)-4420673658466041857) ){ goto $label$17 }
	if ( ((int_64)$2 <= (int_64)3626087396744364031) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)3626087396744364032) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)3626335033695928320) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)3626339548582887424) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [2]
	*($3 + [112]) = *($3 + [184])
	CALL $5($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$18
	if ( ((int_64)$2 <= (int_64)5378311985366564863) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)5378311985366564864) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)5380477996647841792) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)5380477997037158400) ){ goto $label$1 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [3]
	*($3 + [32]) = *($3 + [264])
	CALL $7($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$17
	if ( ((int_64)$2 > (int_64)-7297612421030477825) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-7704969273038176256) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-7704717114025319424) ){ goto $label$1 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [4]
	*($3 + [80]) = *($3 + [216])
	CALL $9($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)3626411730319441920) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4851652691907575808) ){ goto $label$1 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [5]
	*($3 + [40]) = *($3 + [256])
	CALL $11($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-4420673658466041856) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-2039333636193107968) ){ goto $label$1 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [6]
	*($3 + [16]) = *($3 + [280])
	CALL $13($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)5378239803446978687) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5378239803630010368) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [7]
	*($3 + [120]) = *($3 + [176])
	CALL $15($1, $1, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-7297612421030477824) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4420673658855358464) ){ goto $label$1 }
	*($3 + [300]) = [0]
	*($3 + [296]) = [8]
	*($3) = *($3 + [296])
	CALL $17($1, $1, $3)
	goto $label$1 
	
.LABEL $label$12
	*($3 + [196]) = [0]
	*($3 + [192]) = [9]
	*($3 + [104]) = *($3 + [192])
	CALL $15($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [164]) = [0]
	*($3 + [160]) = [10]
	*($3 + [136]) = *($3 + [160])
	CALL $3($1, $1, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [204]) = [0]
	*($3 + [200]) = [11]
	*($3 + [96]) = *($3 + [200])
	CALL $21($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [244]) = [0]
	*($3 + [240]) = [12]
	*($3 + [56]) = *($3 + [240])
	CALL $23($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [156]) = [0]
	*($3 + [152]) = [13]
	*($3 + [144]) = *($3 + [152])
	CALL $15($1, $1, ($3 + [144]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [276]) = [0]
	*($3 + [272]) = [14]
	*($3 + [24]) = *($3 + [272])
	CALL $13($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [228]) = [0]
	*($3 + [224]) = [15]
	*($3 + [72]) = *($3 + [224])
	CALL $27($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [236]) = [0]
	*($3 + [232]) = [16]
	*($3 + [64]) = *($3 + [232])
	CALL $29($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [292]) = [0]
	*($3 + [288]) = [17]
	*($3 + [8]) = *($3 + [288])
	CALL $31($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [212]) = [0]
	*($3 + [208]) = [18]
	*($3 + [88]) = *($3 + [208])
	CALL $15($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [252]) = [0]
	*($3 + [248]) = [19]
	*($3 + [48]) = *($3 + [248])
	CALL $34($1, $1, ($3 + [48]))
	
.LABEL $label$1
	CALL $158([0])
	$global$0 = ($3 + [304])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $156($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $90(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $156($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8320])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $87($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8224])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $156($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $88(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8192])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $174($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [52]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8224])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8224])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [36]) = ($2 + [16])
	CALL $35(CALL $35(CALL $35(($3 + [32]), ($5 + [16])), ($5 + [28])), ($5 + [40]))
	*($5 + [56]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $89(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $177($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [40]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [28]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [48])))
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [36])))
	if ( (*($1 + [16]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8860])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8905])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8955])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [52])))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($5 + [40])))
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($5 + [28])))
	if ( (*($5 + [8]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$19
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$17 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8192])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $174($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([80])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [64]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8224])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	$6 = CALL $35(CALL $35(CALL $35(CALL $35(($3 + [32]), ($5 + [8])), ($5 + [20])), ($5 + [32])), ($5 + [44]))
	CALL eosio_assert(((uint_32)(*($6 + [8]) - *($6 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($5 + [56]), *($6 + [4]), [8])
	*($5 + [68]) = $1
	*($6 + [4]) = (*($6 + [4]) + [8])
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $102(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $177($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [44]) & [1]) ){ goto $label$16 }
	if ( (*($1 + [32]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [40])))
	$4 = [1]
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = [1]
	if ( (*($1 + [20]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($1 + [8]) & $4) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [28])))
	if ( ((*($1 + [8]) & $4) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8860])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8905])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8955])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [52])))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($5 + [40])))
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($5 + [28])))
	if ( (*($5 + [8]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$19
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$17 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [8860])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8905])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8955])
	$5 = ($3 + [-24])
	$7 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($5 + [24])
	CALL $122($5, $8)
	$3 = ($5 + [48])
	$5 = $8
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$8 }
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = $5
	
.LABEL $label$6
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($5 + [64])))
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($5 + [52])))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($5 + [40])))
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($5 + [28])))
	if ( (*($5 + [8]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [72]))
}

int_32 .FUNC $149 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $171([8229])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8229], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $157())
	*(CALL $157()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $169($4, ($3 + [12]), $2)
	$5 = CALL $157()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $150($3)
	
.LABEL $label$1
	CALL $151($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = [2]
	*(($2 = ($0 + [1])) + [1]) = [0]
	*($2) = $1
	return $0
	
.LABEL $label$1
	*($0 + [4]) = [1]
	*(($2 = *($0 + [8])) + [1]) = [0]
	*($2) = $1
	return $0
}

void .FUNC $141 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $144($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	float_64 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $142($2, ($1 + [16]))
	$6 = *($1 + [32])
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*($0) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$7 = CALL $142(($2 + [16]), $5)
	CALL void $0((int_32 $4), (int_64 $3), (int_64 $7), (int_32 $6), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($5) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [8860])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8905])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8955])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8192])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $174($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8224])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $35(CALL $35(($3 + [32]), ($5 + [8])), ($5 + [20]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $99(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $177($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8860])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8905])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8955])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$10
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$14
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_64 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [16])
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$1 }
	$2 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-6030999592730886144, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $44($0, $3)
	*($1 + [12]) = [0]
	*($1 + [8]) = $0
	$2 = *(*(CALL $47(($1 + [8])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [16])) = $2
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [8405])
	$2 = *(($0 + [16]))
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [8860])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8905])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8955])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$10
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$14
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [64]))
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $35(*($1), ($3 + [24]))
	CALL $35(*($1), ($3 + [36]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($3 + [48]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $142(($2 + [16]), ($1 + [24]))
	$7 = CALL $142($2, ($1 + [36]))
	$8 = *($1 + [48])
	$1 = *($0 + [4])
	$9 = *($1 + [4])
	$0 = (*($0) + int_32($9 >> [1]))
	$1 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$10 = CALL $142(($2 + [32]), $7)
	$9 = CALL $142(($2 + [48]), $6)
	CALL void $0((int_32 $5), (int_64 $4), (int_64 $3), (int_64 $9), (int_32 $10), (int_32 $8), (int_64 $1))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($9 + [8]))
	$1 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($7) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($6) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8192])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $174($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([80])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [68]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8224])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $35(CALL $35(CALL $35(CALL $35(CALL $35(($3 + [32]), ($5 + [8])), ($5 + [20])), ($5 + [32])), ($5 + [44])), ($5 + [56]))
	*($5 + [72]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $120(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $177($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [56]) & [1]) ){ goto $label$18 }
	if ( (*($1 + [44]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($1 + [64])))
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($1 + [52])))
	$4 = [1]
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$4 = [1]
	if ( (*($1 + [32]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($1 + [20]) & $4) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & $4) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $156($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [128])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [112])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [120])), (int_64)-6030999592738580608, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $70($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $100($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [128])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [8405])
	*($1) = *($7)
	$6 = ($1 + [8])
	CALL $143($6, *($5 + [4]))
	$7 = ($1 + [20])
	CALL $143($7, *($5 + [8]))
	$5 = *($1 + [8])
	$9 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($9 + [8])
	$8 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$9 = *(($1 + [20]))
	$9 = ( *(($1 + [24])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$5 = ($9 + $5)
	$8 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$2 = CALL $174($5)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8613])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $96(CALL $96($3, $6), $7)
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-6030999592738580608, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $177($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $156($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [248])
	$5 = *($4)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = ($3 + [232])
	$7 = CALL db_lowerbound_i64(*($6), *(($3 + [240])), (int_64)-3020371635640205312, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $84($6, $7)
	*($2 + [12]) = [0]
	*($2 + [8]) = $6
	$5 = *(*(CALL $97(($2 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [248])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [8405])
	*($1) = *($4)
	CALL $143(($1 + [28]), *($0 + [4]))
	$3 = *($0 + [8])
	*($1 + [8]) = *($3)
	CALL $146(($1 + [16]), *($3))
	CALL $143(($1 + [40]), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [16])
	*($0) = $2
	$3 = *($1 + [16])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [16]))
	$3 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [28])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [32])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [28]))
	$3 = ( *(($1 + [32])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [40])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$1 = *(($1 + [40]))
	$1 = ( *(($1 + [44])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$6 }
	*($0) = ($1 + $2)
	
.LABEL $label$6
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8613])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8613])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [56]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8511])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3020371635640205312)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8457])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8457])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $84(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [48])))
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [36])))
	if ( (*($1 + [16]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $35($0, ($1 + [48]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8224])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8224])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $35($0, ($1 + [24]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $156($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$11
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	CALL $94(*($0 + [4]), $1)
	*(($4 = $2)) = [0]
	CALL $95($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $174($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8613])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[7]), [8613])
	CALL memcpy(($2 + [8]), ($1 + [8]), [8])
	*($4 + [4]) = ($2 + [16])
	CALL $96(CALL $96(CALL $96($4, ($1 + [16])), ($1 + [28])), ($1 + [40]))
	$6 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($3 + [8]), (int_64)-3020371635640205312, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $177($2)
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $177($0)
	
.LABEL $label$1
}

void .FUNC $130 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, float_64 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	int_32 $13
	int_32 $14
	int_32 $15
	$13 = ($global$0 - [160])
	$global$0 = $13
	$0 = *($0 + [4])
	$14 = *($0 + [4])
	$15 = (*($0) + int_32($14 >> [1]))
	$0 = *($0)
	if ( (($14 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($15) + $0))
	
.LABEL $label$1
	$12 = CALL $142($13, $12)
	$11 = CALL $142(($13 + [16]), $11)
	$10 = CALL $142(($13 + [32]), $10)
	$9 = CALL $142(($13 + [48]), $9)
	$7 = CALL $142(($13 + [64]), $7)
	$6 = CALL $142(($13 + [80]), $6)
	$5 = CALL $142(($13 + [96]), $5)
	$4 = CALL $142(($13 + [112]), $4)
	$3 = CALL $142(($13 + [128]), $3)
	$2 = CALL $142(($13 + [144]), $2)
	CALL void $15((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_64 $9), (int_32 $10), (int_32 $11), (int_32 $12), (int_32 $0))
	if ( (*($12) & [1]) ){ goto $label$20 }
	if ( (*($11) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($11) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($11 + [8]))
	$0 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$0 = [1]
	if ( (*($10) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($9) & $0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($9) & $0) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($9 + [8]))
	$0 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$0 = [1]
	if ( (*($7) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($6) & $0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $0) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = [1]
	if ( (*($5) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($4) & $0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($3) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($2) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($13 + [160])
	return 
	
.LABEL $label$2
	$global$0 = ($13 + [160])
}

void .FUNC $131 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = ($global$0 - [48])
	$global$0 = $5
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$4 = CALL $142($5, $4)
	$3 = CALL $142(($5 + [16]), $3)
	$2 = CALL $142(($5 + [32]), $2)
	CALL void $7((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $0))
	if ( (*($4) & [1]) ){ goto $label$6 }
	if ( (*($3) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($2) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($5 + [48])
}

void .FUNC $132 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = ($global$0 - [64])
	$global$0 = $7
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$9 = (*($0) + int_32($8 >> [1]))
	$0 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	$5 = CALL $142($7, $5)
	$4 = CALL $142(($7 + [16]), $4)
	$3 = CALL $142(($7 + [32]), $3)
	$2 = CALL $142(($7 + [48]), $2)
	CALL void $9((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_64 $0))
	if ( (*($5) & [1]) ){ goto $label$8 }
	if ( (*($4) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($3) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($2) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($7 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($7 + [64])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $174($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9008])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $174($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $177($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $172(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9008])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $172(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $129 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	int_32 $13
	int_32 $14
	int_32 $15
	$13 = ($global$0 - [176])
	$global$0 = $13
	$0 = *($0 + [4])
	$14 = *($0 + [4])
	$15 = (*($0) + int_32($14 >> [1]))
	$0 = *($0)
	if ( (($14 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($15) + $0))
	
.LABEL $label$1
	$12 = CALL $142($13, $12)
	$11 = CALL $142(($13 + [16]), $11)
	$10 = CALL $142(($13 + [32]), $10)
	$9 = CALL $142(($13 + [48]), $9)
	$8 = CALL $142(($13 + [64]), $8)
	$7 = CALL $142(($13 + [80]), $7)
	$6 = CALL $142(($13 + [96]), $6)
	$5 = CALL $142(($13 + [112]), $5)
	$4 = CALL $142(($13 + [128]), $4)
	$3 = CALL $142(($13 + [144]), $3)
	$2 = CALL $142(($13 + [160]), $2)
	CALL void $15((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_32 $9), (int_32 $10), (int_32 $11), (int_32 $12), (int_32 $0))
	if ( (*($12) & [1]) ){ goto $label$22 }
	if ( (*($11) & [1]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($11) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv(*($11 + [8]))
	$0 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$0 = [1]
	if ( (*($10) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( (*($9) & $0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($9) & $0) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($9 + [8]))
	$0 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$0 = [1]
	if ( (*($8) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($7) & $0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & $0) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($7 + [8]))
	$0 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$0 = [1]
	if ( (*($6) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($5) & $0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $0) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$0 = [1]
	if ( (*($4) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($3) & $0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($2) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($13 + [176])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($13 + [176])
}

void .FUNC $128 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, float_64 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14)
{
	int_32 $15
	int_32 $16
	int_32 $17
	$15 = ($global$0 - [192])
	$global$0 = $15
	$0 = *($0 + [4])
	$16 = *($0 + [4])
	$17 = (*($0) + int_32($16 >> [1]))
	$0 = *($0)
	if ( (($16 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($17) + $0))
	
.LABEL $label$1
	$14 = CALL $142($15, $14)
	$13 = CALL $142(($15 + [16]), $13)
	$12 = CALL $142(($15 + [32]), $12)
	$11 = CALL $142(($15 + [48]), $11)
	$9 = CALL $142(($15 + [64]), $9)
	$8 = CALL $142(($15 + [80]), $8)
	$7 = CALL $142(($15 + [96]), $7)
	$6 = CALL $142(($15 + [112]), $6)
	$5 = CALL $142(($15 + [128]), $5)
	$4 = CALL $142(($15 + [144]), $4)
	$3 = CALL $142(($15 + [160]), $3)
	$2 = CALL $142(($15 + [176]), $2)
	CALL void $17((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_32 $9), (int_32 $10), (int_64 $11), (int_32 $12), (int_32 $13), (int_32 $14), (int_32 $0))
	if ( (*($14) & [1]) ){ goto $label$24 }
	if ( (*($13) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL _ZdlPv(*($14 + [8]))
	if ( ((*($13) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*($13 + [8]))
	$0 = [1]
	if ( ((*($12) & [1]) == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$0 = [1]
	if ( (*($12) & [1]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( (*($11) & $0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($11) & $0) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($11 + [8]))
	$0 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$0 = [1]
	if ( (*($9) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($8) & $0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & $0) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($8 + [8]))
	$0 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$0 = [1]
	if ( (*($7) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($6) & $0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $0) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = [1]
	if ( (*($5) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($4) & $0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($3) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($2) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($15 + [192])
	return 
	
.LABEL $label$2
	$global$0 = ($15 + [192])
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($5 + [32]) = $3
	*($5 + [40]) = $1
	CALL require_auth(*($0))
	$1 = *($0)
	*($5 + [8]) = $0
	*($5 + [16]) = $4
	*($5 + [24]) = $2
	*($5 + [12]) = ($5 + [32])
	*($5 + [20]) = ($5 + [40])
	CALL $69($5, ($0 + [152]), $1, ($5 + [8]))
	$global$0 = ($5 + [48])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [448])
	$global$0 = $3
	*(($4 = $3) + [392]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [360])) = [0]
	*((($4 + [344]) + [40])) = [0]
	*($4 + [344]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [336]) = ($2 + $5)
	*($4 + [328]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [344]), $2, [8])
	*($4 + [332]) = ($2 + [8])
	CALL $35(($4 + [328]), (($4 + [344]) + [8]))
	CALL eosio_assert(((uint_32)(*($4 + [336]) - *($4 + [332])) > (uint_32)[7]), [8224])
	CALL memcpy((($4 + [344]) + [24]), *($4 + [332]), [8])
	*($4 + [332]) = (*($4 + [332]) + [8])
	CALL $35(($4 + [328]), ($4 + [376]))
	*(($3 = ($4 + [8]))) = *($4 + [336])
	*($4) = *($4 + [328])
	$3 = *($3)
	*((($4 + [400]) + [8])) = $3
	*(($6 = (($4 + [416]) + [8]))) = $3
	$7 = *($4)
	*($4 + [416]) = $7
	*($4 + [400]) = $7
	$3 = *($6)
	*((($4 + [432]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [416])
	*($4 + [32]) = $1
	*($4 + [432]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [288]) = $0
	*($4 + [436]) = ($4 + [392])
	*($4 + [432]) = ($4 + [16])
	CALL $68(($4 + [432]), ($4 + [344]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $177($2)
	
.LABEL $label$4
	CALL $37(($4 + [16]))
	if ( ((*($4 + [376]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [384])))
	
.LABEL $label$5
	if ( ((*($4 + [352]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [360])))
	
.LABEL $label$6
	$global$0 = ($4 + [448])
	return [1]
}

int_32 .FUNC $123 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	if ( (*($3 + [56]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [44]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [52])))
	$2 = [1]
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = [1]
	if ( (*($3 + [32]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($3 + [20]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$2
	CALL _ZdlPv($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

int_32 .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [64])))
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	return $0
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $156($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $121(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = *(($0 + [280]))
	*($1 + [16]) = [0]
	*($1 + [8]) = (int_64)0
	$3 = CALL db_lowerbound_i64(*($0 + [272]), $2, (int_64)-3841124771915890688, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($1 + [16])
	$5 = [0]
	$6 = ($0 + [272])
	$3 = CALL $78($6, $3)
	$7 = *($3)
	*($1 + [24]) = $7
	if ( ((uint_32)[0] >= (uint_32)[0]) ){ goto $label$3 }
	$9 = [3]
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	goto $label$1 
	
.LABEL $label$2
	$9 = [17]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$36 
	
.LABEL $label$38
	$3 = CALL $78($6, $3)
	$8 = *($4)
	$5 = *($1 + [12])
	$7 = *($3)
	*($1 + [24]) = $7
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$18 }
	$9 = [3]
	goto $label$4 
	
.LABEL $label$37
	*($5) = $7
	*($1 + [12]) = ($5 + [4])
	goto $label$17 
	
.LABEL $label$36
	CALL $79(($1 + [8]), ($1 + [24]))
	$9 = [1]
	goto $label$4 
	
.LABEL $label$35
	CALL eosio_assert([1], [8324])
	$3 = CALL db_next_i64(*($3 + [72]), ($1 + [24]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$16 }
	$9 = [4]
	goto $label$4 
	
.LABEL $label$34
	$10 = *($1 + [12])
	$4 = *($1 + [8])
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$15 }
	$9 = [5]
	goto $label$4 
	
.LABEL $label$33
	$11 = ($0 + [300])
	$12 = ($0 + [296])
	$13 = ($0 + [280])
	$0 = ($0 + [272])
	$9 = [6]
	goto $label$4 
	
.LABEL $label$32
	$2 = *($4)
	$5 = *($11)
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$11 }
	$9 = [7]
	goto $label$4 
	
.LABEL $label$31
	$3 = ($5 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$10 }
	$9 = [8]
	goto $label$4 
	
.LABEL $label$30
	$5 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$29
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$9 }
	$9 = [19]
	goto $label$4 
	
.LABEL $label$28
	CALL eosio_assert(((int_32)*($8 + [68]) == (int_32)$6), [8354])
	goto $label$7 
	
.LABEL $label$27
	$8 = [0]
	$3 = CALL db_find_i64(*($0), *($13), (int_64)-3841124771915890688, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$9 = [10]
	goto $label$4 
	
.LABEL $label$26
	$8 = CALL $78($6, $3)
	CALL eosio_assert(((int_32)*($8 + [68]) == (int_32)$6), [8354])
	$9 = [11]
	goto $label$4 
	
.LABEL $label$25
	$3 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($3, [8826])
	CALL eosio_assert($3, [8324])
	$3 = CALL db_next_i64(*($8 + [72]), ($1 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$9 = [12]
	goto $label$4 
	
.LABEL $label$24
	CALL $78($6, $3)
	$9 = [13]
	goto $label$4 
	
.LABEL $label$23
	CALL $80($6, $8)
	$4 = ($4 + [4])
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$14 }
	$9 = [14]
	goto $label$4 
	
.LABEL $label$22
	$10 = *($1 + [8])
	$9 = [15]
	goto $label$4 
	
.LABEL $label$21
	if ( ($10 == 0) ){ goto $label$5 }
	$9 = [16]
	goto $label$4 
	
.LABEL $label$20
	*($1 + [12]) = $10
	CALL _ZdlPv($10)
	$9 = [17]
	goto $label$4 
	
.LABEL $label$19
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$18
	$9 = [0]
	goto $label$4 
	
.LABEL $label$17
	$9 = [1]
	goto $label$4 
	
.LABEL $label$16
	$9 = [2]
	goto $label$4 
	
.LABEL $label$15
	$9 = [15]
	goto $label$4 
	
.LABEL $label$14
	$9 = [6]
	goto $label$4 
	
.LABEL $label$13
	$9 = [9]
	goto $label$4 
	
.LABEL $label$12
	$9 = [7]
	goto $label$4 
	
.LABEL $label$11
	$9 = [9]
	goto $label$4 
	
.LABEL $label$10
	$9 = [18]
	goto $label$4 
	
.LABEL $label$9
	$9 = [9]
	goto $label$4 
	
.LABEL $label$8
	$9 = [11]
	goto $label$4 
	
.LABEL $label$7
	$9 = [11]
	goto $label$4 
	
.LABEL $label$6
	$9 = [13]
	goto $label$4 
	
.LABEL $label$5
	$9 = [17]
	goto $label$4 
	$9
}

int_32 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [36])))
	if ( (*($3 + [16]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [152])
	$5 = *(($0 + [180]))
	$4 = *(($0 + [176]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$3), [8354])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [160])), (int_64)-6030999592730886144, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $44($3, $6)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$3), [8354])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8826])
	CALL eosio_assert($6, [8324])
	$6 = CALL db_next_i64(*($7 + [64]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $44($3, $6)
	
.LABEL $label$5
	CALL $77($3, $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [312]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [312]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	*(($4 + [280])) = $0
	*(($4 + [288])) = (int_64)-1
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = [0]
	*($4 + [272]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [312])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $177($2)
	
.LABEL $label$5
	CALL $37($4)
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [576])
	$global$0 = $3
	*(($4 = $3) + [520]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [368])) = (int_64)0
	*((($4 + [352]) + [24])) = (int_64)0
	*((($4 + [352]) + [40])) = (int_64)0
	*((($4 + [352]) + [48])) = (int_64)0
	*((($4 + [352]) + [64])) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*((($4 + [352]) + [88])) = (int_64)0
	*((($4 + [352]) + [96])) = (int_64)0
	*(($4 + [464])) = (int_64)0
	*((($4 + [352]) + [120])) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*((($4 + [352]) + [136])) = (int_64)0
	*((($4 + [352]) + [144])) = (int_64)0
	*((($4 + [352]) + [160])) = [0]
	*($4 + [504]) = (int_64)0
	*($4 + [344]) = ($2 + $5)
	*($4 + [336]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [352]), $2, [8])
	*($4 + [340]) = ($2 + [8])
	CALL $35(($4 + [336]), (($4 + [352]) + [8]))
	CALL $35(($4 + [336]), ($4 + [372]))
	CALL $35(($4 + [336]), ($4 + [384]))
	CALL $35(($4 + [336]), ($4 + [396]))
	CALL $35(($4 + [336]), (($4 + [352]) + [56]))
	CALL $35(($4 + [336]), ($4 + [420]))
	CALL $35(($4 + [336]), (($4 + [352]) + [80]))
	CALL $35(($4 + [336]), ($4 + [444]))
	CALL $35(($4 + [336]), (($4 + [352]) + [104]))
	CALL $35(($4 + [336]), ($4 + [468]))
	CALL $35(($4 + [336]), (($4 + [352]) + [128]))
	CALL $35(($4 + [336]), ($4 + [492]))
	CALL $35(($4 + [336]), ($4 + [504]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [344])
	*($4 + [8]) = *($4 + [336])
	$3 = *($3)
	*((($4 + [528]) + [8])) = $3
	*(($6 = (($4 + [544]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [544]) = $7
	*($4 + [528]) = $7
	$3 = *($6)
	*((($4 + [560]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [544])
	*($4 + [40]) = $1
	*($4 + [560]) = $1
	*((($4 + [24]) + [40])) = $0
	*((($4 + [24]) + [48])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*((($4 + [24]) + [64])) = [0]
	*((($4 + [24]) + [80])) = $0
	*((($4 + [24]) + [88])) = (int_64)-1
	*((($4 + [24]) + [96])) = (int_64)0
	*((($4 + [24]) + [104])) = [0]
	*((($4 + [24]) + [120])) = $0
	*((($4 + [24]) + [128])) = (int_64)-1
	*((($4 + [24]) + [136])) = (int_64)0
	*((($4 + [24]) + [144])) = [0]
	*((($4 + [24]) + [160])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*(($4 + [304])) = $0
	*(($4 + [312])) = (int_64)-1
	*(($4 + [320])) = (int_64)0
	*(($4 + [328])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [296]) = $0
	*($4 + [564]) = ($4 + [520])
	*($4 + [560]) = ($4 + [24])
	CALL $36(($4 + [560]), ($4 + [352]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $177($2)
	
.LABEL $label$4
	CALL $37(($4 + [24]))
	CALL $38(($4 + [352]))
	$global$0 = ($4 + [576])
	return [1]
}

void .FUNC $10 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [312]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [312]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	*(($4 + [280])) = $0
	*(($4 + [288])) = (int_64)-1
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = [0]
	*($4 + [272]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [312])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $177($2)
	
.LABEL $label$5
	CALL $37($4)
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [544])
	$global$0 = $3
	*(($4 = $3) + [488]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [360])) = (int_64)0
	*((($4 + [344]) + [24])) = (int_64)0
	*((($4 + [344]) + [40])) = (int_64)0
	*((($4 + [344]) + [48])) = (int_64)0
	*((($4 + [344]) + [64])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*((($4 + [344]) + [88])) = (int_64)0
	*((($4 + [344]) + [96])) = (int_64)0
	*(($4 + [456])) = (int_64)0
	*((($4 + [344]) + [120])) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [448]) = (int_64)0
	*($4 + [472]) = (int_64)0
	*((($4 + [344]) + [136])) = [0]
	*($4 + [332]) = $2
	*($4 + [328]) = $2
	*($4 + [336]) = ($2 + $5)
	*($4 + [528]) = ($4 + [328])
	*($4 + [16]) = ($4 + [344])
	CALL $50(($4 + [16]), ($4 + [528]))
	*(($3 = ($4 + [8]))) = *($4 + [336])
	*($4) = *($4 + [328])
	$3 = *($3)
	*((($4 + [496]) + [8])) = $3
	*(($6 = (($4 + [512]) + [8]))) = $3
	$7 = *($4)
	*($4 + [512]) = $7
	*($4 + [496]) = $7
	$3 = *($6)
	*((($4 + [528]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [512])
	*($4 + [32]) = $1
	*($4 + [528]) = $1
	*((($4 + [16]) + [40])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*(($4 + [96])) = $0
	*((($4 + [16]) + [88])) = (int_64)-1
	*((($4 + [16]) + [96])) = (int_64)0
	*(($4 + [120])) = [0]
	*((($4 + [16]) + [120])) = $0
	*(($4 + [144])) = (int_64)-1
	*((($4 + [16]) + [136])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [288]) = $0
	*($4 + [532]) = ($4 + [488])
	*($4 + [528]) = ($4 + [16])
	CALL $51(($4 + [528]), ($4 + [344]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $177($2)
	
.LABEL $label$4
	CALL $37(($4 + [16]))
	CALL $52(($4 + [344]))
	$global$0 = ($4 + [544])
	return [1]
}

void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [192])
	$5 = *(($0 + [220]))
	$4 = *(($0 + [216]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [8354])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [200])), (int_64)4152997948076064768, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $64($3, $6)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [8354])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8826])
	CALL eosio_assert($6, [8324])
	$6 = CALL db_next_i64(*($7 + [60]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $64($3, $6)
	
.LABEL $label$5
	CALL $73($3, $7)
	$global$0 = ($2 + [16])
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = *(($0 + [40]))
	*($1 + [16]) = [0]
	*($1 + [8]) = (int_64)0
	$3 = CALL db_lowerbound_i64(*($0 + [32]), $2, (int_64)-3665743317141815296, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($1 + [16])
	$5 = [0]
	$6 = ($0 + [32])
	$3 = CALL $45($6, $3)
	$7 = *($3)
	*($1 + [24]) = $7
	if ( ((uint_32)[0] >= (uint_32)[0]) ){ goto $label$3 }
	$9 = [3]
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	goto $label$1 
	
.LABEL $label$2
	$9 = [17]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$36 
	
.LABEL $label$38
	$3 = CALL $45($6, $3)
	$8 = *($4)
	$5 = *($1 + [12])
	$7 = *($3)
	*($1 + [24]) = $7
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$18 }
	$9 = [3]
	goto $label$4 
	
.LABEL $label$37
	*($5) = $7
	*($1 + [12]) = ($5 + [4])
	goto $label$17 
	
.LABEL $label$36
	CALL $79(($1 + [8]), ($1 + [24]))
	$9 = [1]
	goto $label$4 
	
.LABEL $label$35
	CALL eosio_assert([1], [8324])
	$3 = CALL db_next_i64(*($3 + [68]), ($1 + [24]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$16 }
	$9 = [4]
	goto $label$4 
	
.LABEL $label$34
	$10 = *($1 + [12])
	$4 = *($1 + [8])
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$15 }
	$9 = [5]
	goto $label$4 
	
.LABEL $label$33
	$11 = ($0 + [60])
	$12 = ($0 + [56])
	$13 = ($0 + [40])
	$0 = ($0 + [32])
	$9 = [6]
	goto $label$4 
	
.LABEL $label$32
	$2 = *($4)
	$5 = *($11)
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$11 }
	$9 = [7]
	goto $label$4 
	
.LABEL $label$31
	$3 = ($5 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$10 }
	$9 = [8]
	goto $label$4 
	
.LABEL $label$30
	$5 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$29
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$9 }
	$9 = [19]
	goto $label$4 
	
.LABEL $label$28
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [8354])
	goto $label$7 
	
.LABEL $label$27
	$8 = [0]
	$3 = CALL db_find_i64(*($0), *($13), (int_64)-3665743317141815296, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$9 = [10]
	goto $label$4 
	
.LABEL $label$26
	$8 = CALL $45($6, $3)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [8354])
	$9 = [11]
	goto $label$4 
	
.LABEL $label$25
	$3 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($3, [8826])
	CALL eosio_assert($3, [8324])
	$3 = CALL db_next_i64(*($8 + [68]), ($1 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$9 = [12]
	goto $label$4 
	
.LABEL $label$24
	CALL $45($6, $3)
	$9 = [13]
	goto $label$4 
	
.LABEL $label$23
	CALL $81($6, $8)
	$4 = ($4 + [4])
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$14 }
	$9 = [14]
	goto $label$4 
	
.LABEL $label$22
	$10 = *($1 + [8])
	$9 = [15]
	goto $label$4 
	
.LABEL $label$21
	if ( ($10 == 0) ){ goto $label$5 }
	$9 = [16]
	goto $label$4 
	
.LABEL $label$20
	*($1 + [12]) = $10
	CALL _ZdlPv($10)
	$9 = [17]
	goto $label$4 
	
.LABEL $label$19
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$18
	$9 = [0]
	goto $label$4 
	
.LABEL $label$17
	$9 = [1]
	goto $label$4 
	
.LABEL $label$16
	$9 = [2]
	goto $label$4 
	
.LABEL $label$15
	$9 = [15]
	goto $label$4 
	
.LABEL $label$14
	$9 = [6]
	goto $label$4 
	
.LABEL $label$13
	$9 = [9]
	goto $label$4 
	
.LABEL $label$12
	$9 = [7]
	goto $label$4 
	
.LABEL $label$11
	$9 = [9]
	goto $label$4 
	
.LABEL $label$10
	$9 = [18]
	goto $label$4 
	
.LABEL $label$9
	$9 = [9]
	goto $label$4 
	
.LABEL $label$8
	$9 = [11]
	goto $label$4 
	
.LABEL $label$7
	$9 = [11]
	goto $label$4 
	
.LABEL $label$6
	$9 = [13]
	goto $label$4 
	
.LABEL $label$5
	$9 = [17]
	goto $label$4 
	$9
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $117(*($0 + [4]), $1)
	$5 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *($1 + [48])
	$6 = ( *(($1 + [52])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$2 = CALL $174($5)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $111($3, $1)
	$7 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($4 + [8]), (int_64)-6030999592730886144, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $177($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [168])
	$5 = *($4)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = ($3 + [152])
	$7 = CALL db_lowerbound_i64(*($6), *(($3 + [160])), (int_64)-6030999592730886144, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $44($6, $7)
	*($2 + [12]) = [0]
	*($2 + [8]) = $6
	$5 = *(*(CALL $47(($2 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [168])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [8405])
	*($1) = *($4)
	*($1 + [8]) = *(*($0 + [4]))
	CALL $143(($1 + [24]), *($0 + [8]))
	*($1 + [16]) = *(*($0 + [12]))
	CALL $143(($1 + [48]), *($0 + [16]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8613])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8613])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8613])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $96($0, ($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8613])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8613])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8511])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4152997948076064768)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8457])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8457])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $64(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8224])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8224])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $35($0, ($1 + [24]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8224])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	CALL $143(($1 + [24]), *($0))
	*($1 + [48]) = (int_64)3
	$4 = ($3 + [208])
	$5 = *($4)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = ($3 + [192])
	$7 = CALL db_lowerbound_i64(*($6), *(($3 + [200])), (int_64)4152997948076064768, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $64($6, $7)
	*($2 + [12]) = [0]
	*($2 + [8]) = $6
	$5 = *(*(CALL $115(($2 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [208])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [8405])
	*($1) = *($4)
	*($1 + [8]) = *(*($0 + [8]))
	*($1 + [16]) = *(*($0 + [12]))
	*($1 + [40]) = *(*($0 + [16]))
	$global$0 = ($2 + [16])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $156($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $96($0, ($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8613])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8613])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8613])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $96($0, ($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8613])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [208])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [192])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [200])), (int_64)4152997948076064768, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $64($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $115($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [208])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [8405])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	CALL $143(($1 + [24]), *($5 + [8]))
	*($1 + [48]) = (int_64)3
	*($1 + [40]) = *(*($5 + [12]))
	$5 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [40])
	$8 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $174($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $114($3, $1)
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)4152997948076064768, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $177($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = *($0)
	CALL $143(($1 + [24]), *($4 + [12]))
	CALL $143(($1 + [48]), *($4 + [16]))
	$4 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [48]))
	$6 = ( *(($1 + [52])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$4 = ($6 + $4)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $174($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $111($3, $1)
	$7 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030999592730886144, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $177($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $29 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [464])
	$global$0 = $3
	*(($4 = $3) + [408]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [360])) = (int_64)0
	*((($4 + [344]) + [24])) = (int_64)0
	*((($4 + [344]) + [40])) = (int_64)0
	*((($4 + [344]) + [48])) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [336]) = ($2 + $5)
	*($4 + [328]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [344]), $2, [8])
	*($4 + [332]) = ($2 + [8])
	CALL $35(($4 + [328]), (($4 + [344]) + [8]))
	CALL $35(($4 + [328]), ($4 + [364]))
	CALL $35(($4 + [328]), ($4 + [376]))
	CALL $35(($4 + [328]), ($4 + [388]))
	CALL eosio_assert(((uint_32)(*($4 + [336]) - *($4 + [332])) > (uint_32)[7]), [8224])
	CALL memcpy((($4 + [344]) + [56]), *($4 + [332]), [8])
	*($4 + [332]) = (*($4 + [332]) + [8])
	*(($3 = ($4 + [8]))) = *($4 + [336])
	*($4) = *($4 + [328])
	$3 = *($3)
	*((($4 + [416]) + [8])) = $3
	*(($6 = (($4 + [432]) + [8]))) = $3
	$7 = *($4)
	*($4 + [432]) = $7
	*($4 + [416]) = $7
	$3 = *($6)
	*((($4 + [448]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [432])
	*($4 + [32]) = $1
	*($4 + [448]) = $1
	*((($4 + [16]) + [40])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [288]) = $0
	*($4 + [452]) = ($4 + [408])
	*($4 + [448]) = ($4 + [16])
	CALL $59(($4 + [448]), ($4 + [344]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $177($2)
	
.LABEL $label$4
	CALL $37(($4 + [16]))
	if ( (*($4 + [388]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [376]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [396])))
	if ( ((*($4 + [376]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [384])))
	$2 = [1]
	if ( ((*($4 + [364]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = [1]
	if ( (*($4 + [364]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($4 + [352]) & $2) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [372])))
	if ( ((*($4 + [352]) & $2) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [360])))
	
.LABEL $label$5
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $28 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	$7 = ($global$0 - [48])
	$global$0 = $7
	*($7 + [40]) = $6
	CALL require_auth(*($0))
	$6 = *($0)
	*($7 + [20]) = $2
	*($7 + [16]) = $0
	*($7 + [24]) = $3
	*($7 + [28]) = $4
	*($7 + [32]) = $5
	*($7 + [36]) = ($7 + [40])
	CALL $60(($7 + [8]), ($0 + [72]), $6, ($7 + [16]))
	$global$0 = ($7 + [48])
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [448])
	$global$0 = $3
	*(($4 = $3) + [392]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [352]) + [24])) = [0]
	*($4 + [360]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [344]) = ($2 + $5)
	*($4 + [336]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [352]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8224])
	CALL memcpy((($4 + [352]) + [8]), ($2 + [8]), [8])
	*($4 + [340]) = ($2 + [16])
	CALL $35(($4 + [336]), (($4 + [352]) + [16]))
	CALL eosio_assert(((uint_32)(*($4 + [344]) - *($4 + [340])) > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [384]), *($4 + [340]), [8])
	*($4 + [340]) = (*($4 + [340]) + [8])
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [344])
	*($4 + [8]) = *($4 + [336])
	$3 = *($3)
	*((($4 + [400]) + [8])) = $3
	*(($6 = (($4 + [416]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [416]) = $7
	*($4 + [400]) = $7
	$3 = *($6)
	*((($4 + [432]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [416])
	*($4 + [40]) = $1
	*($4 + [432]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*(($4 + [304])) = $0
	*(($4 + [312])) = (int_64)-1
	*(($4 + [320])) = (int_64)0
	*(($4 + [328])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [296]) = $0
	*($4 + [436]) = ($4 + [392])
	*($4 + [432]) = ($4 + [24])
	CALL $72(($4 + [432]), ($4 + [352]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $177($2)
	
.LABEL $label$4
	CALL $37(($4 + [24]))
	if ( ((*($4 + [368]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [376])))
	
.LABEL $label$5
	$global$0 = ($4 + [448])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, float_64 $4)
{
	int_32 $5
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($5 + [32]) = $4
	*($5 + [40]) = $2
	CALL require_auth(*($0))
	$2 = *($0)
	*($5 + [16]) = $0
	*($5 + [24]) = $3
	*($5 + [20]) = ($5 + [40])
	*($5 + [28]) = ($5 + [32])
	CALL $49(($5 + [8]), ($0 + [192]), $2, ($5 + [16]))
	$global$0 = ($5 + [48])
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [432])
	$global$0 = $3
	*(($4 = $3) + [376]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [360])) = (int_64)0
	*((($4 + [344]) + [24])) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [336]) = ($2 + $5)
	*($4 + [328]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [344]), $2, [8])
	*($4 + [332]) = ($2 + [8])
	CALL $35(($4 + [328]), (($4 + [344]) + [8]))
	CALL $35(($4 + [328]), ($4 + [364]))
	*(($3 = ($4 + [8]))) = *($4 + [336])
	*($4) = *($4 + [328])
	$3 = *($3)
	*((($4 + [384]) + [8])) = $3
	*(($6 = (($4 + [400]) + [8]))) = $3
	$7 = *($4)
	*($4 + [400]) = $7
	*($4 + [384]) = $7
	$3 = *($6)
	*((($4 + [416]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [400])
	*($4 + [32]) = $1
	*($4 + [416]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [288]) = $0
	*($4 + [420]) = ($4 + [376])
	*($4 + [416]) = ($4 + [16])
	CALL $57(($4 + [416]), ($4 + [344]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $177($2)
	
.LABEL $label$4
	CALL $37(($4 + [16]))
	if ( ((*($4 + [364]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [372])))
	
.LABEL $label$5
	if ( ((*($4 + [352]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [360])))
	
.LABEL $label$6
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = *($0)
	*($4 + [20]) = $2
	*($4 + [16]) = $0
	*($4 + [24]) = $3
	CALL $58(($4 + [8]), ($0 + [112]), $5, ($4 + [16]))
	$global$0 = ($4 + [32])
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	CALL require_auth(*($0))
}

void .FUNC $24 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8354])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-3665743569274011648, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $82($3, $6)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8354])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8826])
	CALL eosio_assert($6, [8324])
	$6 = CALL db_next_i64(*($7 + [68]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $82($3, $6)
	
.LABEL $label$5
	CALL $83($3, $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [464])
	$global$0 = $3
	*(($4 = $3) + [408]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [360])) = [0]
	*((($4 + [344]) + [40])) = [0]
	*($4 + [344]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [392]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [332]) = $2
	*($4 + [328]) = $2
	*($4 + [336]) = ($2 + $5)
	*($4 + [448]) = ($4 + [328])
	*($4 + [16]) = ($4 + [344])
	CALL $61(($4 + [16]), ($4 + [448]))
	*(($3 = ($4 + [8]))) = *($4 + [336])
	*($4) = *($4 + [328])
	$3 = *($3)
	*((($4 + [416]) + [8])) = $3
	*(($6 = (($4 + [432]) + [8]))) = $3
	$7 = *($4)
	*($4 + [432]) = $7
	*($4 + [416]) = $7
	$3 = *($6)
	*((($4 + [448]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [432])
	*($4 + [32]) = $1
	*($4 + [448]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [288]) = $0
	*($4 + [452]) = ($4 + [408])
	*($4 + [448]) = ($4 + [16])
	CALL $62(($4 + [448]), ($4 + [344]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $177($2)
	
.LABEL $label$4
	CALL $37(($4 + [16]))
	if ( ((*($4 + [376]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [384])))
	
.LABEL $label$5
	if ( ((*($4 + [352]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [360])))
	
.LABEL $label$6
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $26 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_64 $5, float_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	$7 = ($global$0 - [96])
	$global$0 = $7
	*($7 + [80]) = $6
	*($7 + [88]) = $3
	CALL require_auth(*($0))
	$8 = ($0 + [152])
	$10 = *(($0 + [180]))
	$9 = *(($0 + [176]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	
.LOOP $label$4:
	$11 = ($10 + [-24])
	$12 = *($11)
	if ( ((int_64)*($12) == (int_64)$3) ){ goto $label$3 }
	$10 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($12 + [60]) == (int_32)$8), [8354])
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	$11 = CALL db_find_i64(*($8), *(($0 + [160])), (int_64)-6030999592730886144, $3)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $44($8, $11)
	CALL eosio_assert(((int_32)*($12 + [60]) == (int_32)$8), [8354])
	
.LABEL $label$1
	$13 = ($0 + [32])
	$10 = *(($0 + [60]))
	$14 = *(($0 + [56]))
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$6 }
	
.LOOP $label$8:
	$11 = ($10 + [-24])
	$9 = *($11)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$7 }
	$10 = $11
	if ( ((int_32)$14 != (int_32)$11) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$13), [8354])
	goto $label$5 
	
.LABEL $label$6
	$9 = CALL $45($13, CALL $fimport$5(*($13), *(($0 + [40])), (int_64)-3665743317141815296, $5))
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$13), [8354])
	
.LABEL $label$5
	*($7 + [72]) = *($9)
	*($7 + [64]) = [0]
	*($7 + [56]) = (int_64)0
	*($7 + [52]) = [0]
	if ( ($12 == 0) ){ goto $label$10 }
	*($7 + [52]) = *($12 + [16])
	goto $label$9 
	
.LABEL $label$10
	$11 = ($0 + [168])
	$3 = *($11)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$11 }
	$3 = (int_64)0
	$10 = CALL db_lowerbound_i64(*(($0 + [152])), *(($0 + [160])), (int_64)-6030999592730886144, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	CALL $44($8, $10)
	*($7 + [12]) = [0]
	*($7 + [8]) = $8
	$3 = *(*(CALL $47(($7 + [8])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*(($0 + [168])) = $3
	
.LABEL $label$11
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [8405])
	*($7 + [40]) = *($11)
	$3 = *($0)
	*($7 + [12]) = $4
	*($7 + [16]) = $2
	*($7 + [8]) = ($7 + [40])
	*($7 + [20]) = ($7 + [88])
	CALL $63(($7 + [32]), $8, $3, ($7 + [8]))
	*($7 + [52]) = *($7 + [40])
	
.LABEL $label$9
	$11 = CALL db_lowerbound_i64(*($0 + [192]), *(($0 + [200])), (int_64)4152997948076064768, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$14 }
	$15 = ($0 + [192])
	$12 = CALL $64($15, $11)
	$16 = (($7 + [8]) | [1])
	$17 = ($7 + [16])
	$18 = [0]
	
.LOOP $label$15:
	CALL $152(($7 + [8]), *($7 + [52]))
	$14 = [0]
	$8 = ($11 & [1])
	$11 = *($7 + [8])
	$9 = ($11 & [1])
	$11 = *($12 + [24])
	$19 = uint_32($11 >> [1])
	$2 = ( *(($12 + [28])) ? $19 : $9 )
	if ( ((int_32)$2 != (int_32)( *($7 + [12]) ? uint_32($11 >> [1]) : $8 )) ){ goto $label$18 }
	$11 = ( *($17) ? $16 : $8 )
	$10 = (($12 + [24]) + [1])
	if ( $9 ){ goto $label$20 }
	if ( ($2 == 0) ){ goto $label$19 }
	$9 = ([0] - $19)
	
.LOOP $label$21:
	if ( ((int_32)*($10) != (int_32)*($11)) ){ goto $label$18 }
	$11 = ($11 + [1])
	$10 = ($10 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	if ( ($2 == 0) ){ goto $label$19 }
	$14 = (CALL $170(( *(($12 + [32])) ? $10 : $9 ), $11, $2) == 0)
	if ( (*($7 + [8]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$14 = [1]
	
.LABEL $label$18
	if ( ($8 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($17))
	
.LABEL $label$16
	if ( ($14 == 0) ){ goto $label$22 }
	CALL $65(($7 + [56]), *($7 + [56]), $12)
	$18 = [1]
	
.LABEL $label$22
	CALL eosio_assert([1], [8324])
	$11 = CALL db_next_i64(*($12 + [60]), ($7 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$23 }
	$12 = CALL $64($15, $11)
	goto $label$15 
	
.LABEL $label$23
	if ( (($18 & [1]) == 0) ){ goto $label$14 }
	$11 = *($7 + [56])
	if ( ((int_32)*($7 + [60]) == (int_32)$11) ){ goto $label$13 }
	$8 = ($0 + [220])
	$2 = ($0 + [216])
	$19 = ($0 + [200])
	$17 = ($0 + [192])
	$18 = ($0 + [60])
	$16 = ($0 + [56])
	$20 = ($0 + [40])
	$21 = ($0 + [32])
	$22 = ($7 + [16])
	$23 = ($7 + [20])
	$24 = ($7 + [24])
	$14 = [0]
	
.LOOP $label$24:
	$3 = *(($11 + ($14 << [3])))
	$10 = *($8)
	$9 = *($2)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$28 }
	
.LOOP $label$30:
	$11 = ($10 + [-24])
	$12 = *($11)
	if ( ((int_64)*($12) == (int_64)$3) ){ goto $label$29 }
	$10 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$28 }
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)$15), [8354])
	goto $label$27 
	
.LABEL $label$28
	$11 = CALL db_find_i64(*($17), *($19), (int_64)4152997948076064768, $3)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$26 }
	$12 = CALL $64($15, $11)
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)$15), [8354])
	
.LABEL $label$27
	$3 = *($0)
	*($7 + [8]) = ($7 + [80])
	CALL eosio_assert([1], [8635])
	CALL $66($15, $12, $3, ($7 + [8]))
	goto $label$25 
	
.LABEL $label$26
	$3 = *([0] + [8])
	$10 = *($18)
	$9 = *($16)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$32 }
	
.LOOP $label$34:
	$11 = ($10 + [-24])
	$12 = *($11)
	if ( ((int_64)*($12) == (int_64)$3) ){ goto $label$33 }
	$10 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$32 }
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$13), [8354])
	goto $label$31 
	
.LABEL $label$32
	$12 = [0]
	$11 = CALL db_find_i64(*($21), *($20), (int_64)-3665743317141815296, $3)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$31 }
	$12 = CALL $45($13, $11)
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$13), [8354])
	
.LABEL $label$31
	CALL eosio_assert(($12 == 0), [8619])
	$3 = *($0)
	*($7 + [12]) = $0
	*($7 + [8]) = $4
	*($22) = ($7 + [72])
	*($23) = ($7 + [52])
	*($24) = ($7 + [80])
	CALL $67(($7 + [40]), $15, $3, ($7 + [8]))
	
.LABEL $label$25
	$11 = *($7 + [56])
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*($7 + [60]) - $11) >> [3])) ){ goto $label$24 }
	goto $label$13 
	
.LABEL $label$14
	$11 = *($7 + [56])
	
.LABEL $label$13
	if ( ($11 == 0) ){ goto $label$35 }
	*($7 + [60]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$35
	$global$0 = ($7 + [96])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	CALL $103(*($0 + [4]), $1)
	*(($4 = $2)) = [0]
	CALL $104($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $174($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8613])
	CALL memcpy($2, $1, [8])
	*($4 + [4]) = ($2 + [8])
	$6 = CALL $96(CALL $96(CALL $96(CALL $96($4, ($1 + [8])), ($1 + [20])), ($1 + [32])), ($1 + [44]))
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [8613])
	CALL memcpy(*($6 + [4]), ($1 + [56]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($3 + [8]), (int_64)-3665743569274011648, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$7 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $177($2)
	if ( (uint_64)($7 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

int_32 .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8511])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6030999592738580608)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8457])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8457])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $70(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [88])
	$5 = *($4)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = ($3 + [72])
	$7 = CALL db_lowerbound_i64(*($6), *(($3 + [80])), (int_64)-3665743569274011648, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $82($6, $7)
	*($2 + [12]) = [0]
	*($2 + [8]) = $6
	$5 = *(*(CALL $105(($2 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [88])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [8405])
	*($1) = *($4)
	CALL $143(($1 + [8]), *($0 + [4]))
	CALL $143(($1 + [20]), *($0 + [8]))
	CALL $143(($1 + [32]), *($0 + [12]))
	CALL $143(($1 + [44]), *($0 + [16]))
	*($1 + [56]) = *(*($0 + [20]))
	$global$0 = ($2 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $156($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $106(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8511])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3665743569274011648)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8457])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8457])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $82(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [8])
	*($0) = $2
	$3 = *($1 + [8])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [8]))
	$3 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [20])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [24])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [20]))
	$3 = ( *(($1 + [24])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [32])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$3 = *(($1 + [32]))
	$3 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$6
	$3 = *($1 + [44])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	*($0) = $2
	$1 = *(($1 + [44]))
	$1 = ( *(($1 + [48])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$8 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$8
	*($0) = ($2 + [8])
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	CALL $143(($1 + [24]), *($4 + [4]))
	CALL $143(($1 + [48]), *($4 + [8]))
	*($1 + [40]) = (int_64)3
	*($1 + [16]) = *(*($4))
	*($1 + [8]) = *(*($4 + [12]))
	$4 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [48]))
	$6 = ( *(($1 + [52])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$4 = ($6 + $4)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $174($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $111($3, $1)
	$7 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030999592730886144, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $177($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $106 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $113(*($0 + [4]), $1)
	$5 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [40])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $114($3, $1)
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)4152997948076064768, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $177($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = *($0 + [12])
	$2 = *($0 + [8])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$2 }
	$5 = *($0)
	$4 = *($0 + [4])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	$3 = ($2 - $4)
	$6 = int_32($3 >> [3])
	$7 = (((int_32)(int_32(($4 - $5) >> [3]) + [1]) / (int_32)[-2]) << [3])
	$2 = ($4 + $7)
	$5 = $2
	if ( ($3 == 0) ){ goto $label$4 }
	CALL memmove($2, $4, $3)
	$5 = (*(($0 + [4])) + $7)
	
.LABEL $label$4
	*(($0 + [4])) = $5
	$2 = ($2 + ($6 << [3]))
	*(($0 + [8])) = $2
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - $5)
	$3 = ( int_32($3 >> [2]) ? [1] : $3 )
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL _Znwj(($3 << [3]))
	$2 = *(($0 + [8]))
	$4 = *(($0 + [4]))
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	$7 = ($5 + ($3 << [3]))
	$6 = ($5 + (uint_32($3 >> [2]) << [3]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$8 }
	$8 = uint_32((($2 + [-8]) - $4) >> [3])
	$3 = $6
	
.LOOP $label$9:
	*($3) = *($4)
	$3 = ($3 + [8])
	$4 = ($4 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	$2 = (($6 + ($8 << [3])) + [8])
	goto $label$7 
	
.LABEL $label$8
	$2 = $6
	
.LABEL $label$7
	*(($0 + [4])) = $6
	$4 = *($0)
	*($0) = $5
	*(($3 = ($0 + [8]))) = $2
	*(($0 + [12])) = $7
	if ( ($4 == 0) ){ goto $label$2 }
	CALL _ZdlPv($4)
	$2 = *($3)
	
.LABEL $label$2
	*(($0 + [8])) = ($2 + [8])
	*($2) = *($1)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [152]) & [1]) ){ goto $label$25 }
	if ( (*($0 + [140]) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($0 + [160])))
	if ( ((*($0 + [140]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($0 + [148])))
	$1 = [1]
	if ( ((*($0 + [128]) & [1]) == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$1 = [1]
	if ( (*($0 + [128]) & [1]) ){ goto $label$21 }
	
.LABEL $label$22
	if ( (*($0 + [116]) & $1) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($0 + [136])))
	if ( ((*($0 + [116]) & $1) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($0 + [124])))
	$1 = [1]
	if ( ((*($0 + [104]) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$1 = [1]
	if ( (*($0 + [104]) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( (*($0 + [92]) & $1) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($0 + [112])))
	if ( ((*($0 + [92]) & $1) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($0 + [100])))
	$1 = [1]
	if ( ((*($0 + [80]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = [1]
	if ( (*($0 + [80]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($0 + [68]) & $1) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($0 + [88])))
	if ( ((*($0 + [68]) & $1) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($0 + [76])))
	$1 = [1]
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($0 + [56]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($0 + [44]) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($0 + [64])))
	if ( ((*($0 + [44]) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($0 + [52])))
	$1 = [1]
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($0 + [32]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($0 + [20]) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($0 + [40])))
	if ( ((*($0 + [20]) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($0 + [28])))
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($0 + [8]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	CALL _ZdlPv(*(($0 + [16])))
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $35(*($1), (*($0) + [44]))
	$0 = *($0)
	CALL $35(*($1), ($0 + [56]))
	CALL $35(*($1), ($0 + [68]))
	CALL $35(*($1), ($0 + [80]))
	CALL $35(*($1), ($0 + [92]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [8224])
	CALL memcpy(($0 + [104]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $35(*($1), ($0 + [112]))
	CALL $35(*($1), ($0 + [124]))
	CALL $35(*($1), ($0 + [136]))
	CALL $35(*($1), ($0 + [148]))
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [208])
	$global$0 = $2
	$1 = CALL $142($2, ($1 + [152]))
	$14 = CALL $142(($2 + [16]), ($1 + [140]))
	$13 = CALL $142(($2 + [32]), ($1 + [128]))
	$12 = CALL $142(($2 + [48]), ($1 + [116]))
	$11 = CALL $142(($2 + [64]), ($1 + [104]))
	$10 = CALL $142(($2 + [80]), ($1 + [92]))
	$9 = CALL $142(($2 + [96]), ($1 + [80]))
	$8 = CALL $142(($2 + [112]), ($1 + [68]))
	$7 = CALL $142(($2 + [128]), ($1 + [56]))
	$6 = CALL $142(($2 + [144]), ($1 + [44]))
	$5 = CALL $142(($2 + [160]), ($1 + [32]))
	$4 = CALL $142(($2 + [176]), ($1 + [20]))
	$3 = CALL $142(($2 + [192]), ($1 + [8]))
	CALL $127($0, *($1), $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $1)
	if ( (*($1) & [1]) ){ goto $label$25 }
	if ( (*($14) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($14) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*($14 + [8]))
	$1 = [1]
	if ( ((*($13) & [1]) == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$1 = [1]
	if ( (*($13) & [1]) ){ goto $label$21 }
	
.LABEL $label$22
	if ( (*($12) & $1) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*($13 + [8]))
	if ( ((*($12) & $1) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*($12 + [8]))
	$1 = [1]
	if ( ((*($11) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$1 = [1]
	if ( (*($11) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( (*($10) & $1) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($10) & $1) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($10 + [8]))
	$1 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = [1]
	if ( (*($9) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($8) & $1) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & $1) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($8 + [8]))
	$1 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($7) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($6) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [208])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [208])
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $123(($0 + [296]))
	CALL $124(($0 + [256]))
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [216]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($0 + [180])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$12
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	CALL _ZdlPv($3)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$10 }
	$3 = *(($0 + [176]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$14 }
	$2 = ($0 + [140])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$19
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$20
	CALL _ZdlPv($3)
	
.LABEL $label$18
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$17 }
	$3 = *(($0 + [136]))
	goto $label$15 
	
.LABEL $label$16
	$3 = $1
	
.LABEL $label$15
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$14
	CALL $125(($0 + [96]))
	CALL $126(($0 + [56]))
	return $0
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [448])
	$global$0 = $3
	*(($4 = $3) + [392]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $174($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [360])) = (int_64)0
	*((($4 + [344]) + [24])) = (int_64)0
	*((($4 + [344]) + [40])) = [0]
	*($4 + [344]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [336]) = ($2 + $5)
	*($4 + [328]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [344]), $2, [8])
	*($4 + [332]) = ($2 + [8])
	CALL $35(($4 + [328]), (($4 + [344]) + [8]))
	CALL $35(($4 + [328]), ($4 + [364]))
	CALL $35(($4 + [328]), ($4 + [376]))
	*(($3 = ($4 + [8]))) = *($4 + [336])
	*($4) = *($4 + [328])
	$3 = *($3)
	*((($4 + [400]) + [8])) = $3
	*(($6 = (($4 + [416]) + [8]))) = $3
	$7 = *($4)
	*($4 + [416]) = $7
	*($4 + [400]) = $7
	$3 = *($6)
	*((($4 + [432]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [416])
	*($4 + [32]) = $1
	*($4 + [432]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [288]) = $0
	*($4 + [436]) = ($4 + [392])
	*($4 + [432]) = ($4 + [16])
	CALL $55(($4 + [432]), ($4 + [344]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $177($2)
	
.LABEL $label$4
	CALL $37(($4 + [16]))
	if ( (*($4 + [376]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [364]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [384])))
	if ( ((*($4 + [364]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [372])))
	$2 = [1]
	if ( ((*($4 + [352]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [352]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [448])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [360])))
	$global$0 = ($4 + [448])
	return $2
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $86($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $145($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $145($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $141($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [112])
	$5 = *(($0 + [140]))
	$4 = *(($0 + [136]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8354])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)-6030999592738580608, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $70($3, $6)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8354])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8826])
	CALL eosio_assert($6, [8324])
	$6 = CALL db_next_i64(*($7 + [36]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $70($3, $6)
	
.LABEL $label$5
	CALL $71($3, $7)
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($5 + [24]) = $1
	CALL require_auth(*($0))
	$1 = *($0)
	*($5 + [12]) = $2
	*($5 + [8]) = $0
	*($5 + [20]) = $3
	*($5 + [16]) = ($5 + [24])
	CALL $56($5, ($0 + [232]), $1, ($5 + [8]))
	$global$0 = ($5 + [32])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, float_64 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14)
{
	int_32 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	$15 = ($global$0 - [336])
	$global$0 = $15
	CALL require_auth(*($0))
	$7 = CALL $149($7, [0], [10])
	$14 = CALL $142(($15 + [256]), $14)
	$9 = CALL $142(($15 + [272]), $9)
	$16 = CALL $42($0, $9, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($14 + [8]))
	
.LABEL $label$1
	if ( ((*($9) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$2
	$9 = CALL $142(($15 + [240]), $3)
	CALL $43($0, $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$3
	$9 = CALL $142(($15 + [224]), $5)
	CALL $43($0, $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$4
	$17 = ($0 + [152])
	$18 = (CASTING int_64)(int_32 $7)
	$14 = *(($0 + [180]))
	$7 = *(($0 + [176]))
	if ( ((int_32)$7 == (int_32)$14) ){ goto $label$6 }
	
.LOOP $label$8:
	$9 = ($14 + [-24])
	$19 = *($9)
	if ( ((int_64)*($19) == (int_64)$18) ){ goto $label$7 }
	$14 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$7 == (int_32)$14) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($19 + [60]) == (int_32)$17), [8354])
	goto $label$5 
	
.LABEL $label$6
	$9 = CALL db_find_i64(*($17), *(($0 + [160])), (int_64)-6030999592730886144, $18)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $44($17, $9) + [60]) == (int_32)$17), [8354])
	
.LABEL $label$5
	$20 = ($0 + [32])
	$14 = *(($0 + [60]))
	$19 = *(($0 + [56]))
	if ( ((int_32)$19 == (int_32)$14) ){ goto $label$10 }
	
.LOOP $label$12:
	$9 = ($14 + [-24])
	$7 = *($9)
	if ( ((int_64)*($7) == (int_64)$16) ){ goto $label$11 }
	$14 = $9
	if ( ((int_32)$19 != (int_32)$9) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$19 == (int_32)$14) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$20), [8354])
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	$9 = CALL db_find_i64(*($20), *(($0 + [40])), (int_64)-3665743317141815296, $16)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $45($20, $9)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$20), [8354])
	
.LABEL $label$9
	*(($9 = CALL _Znwj([40]))) = (int_64)0
	*($9 + [8 align=4]) = (int_64)0
	*($9 + [16 align=4]) = (int_64)0
	*($9 + [24 align=4]) = (int_64)0
	*($9 + [32]) = (int_64)0
	$14 = CALL $142(($15 + [208]), $3)
	$16 = CALL $43($0, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($14 + [8]))
	
.LABEL $label$13
	$19 = ($9 + [20])
	$20 = ($9 + [8])
	if ( (int_64)($16 == 0) ){ goto $label$15 }
	*($9) = (int_64)1
	*(($9 + [32])) = $18
	CALL $143($20, $3)
	CALL $143($19, $2)
	goto $label$14 
	
.LABEL $label$15
	$14 = CALL $142(($15 + [192]), $3)
	$16 = CALL $46($0, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($14 + [8]))
	
.LABEL $label$16
	*(($9 + [32])) = $18
	if ( (int_64)($16 == 0) ){ goto $label$17 }
	*($9) = (int_64)2
	CALL $143($20, $3)
	CALL $143($19, $2)
	goto $label$14 
	
.LABEL $label$17
	*($9) = (int_64)3
	CALL $143($20, $3)
	CALL $143($19, $2)
	
.LABEL $label$14
	*(($14 = CALL _Znwj([40]))) = (int_64)0
	*($14 + [8 align=4]) = (int_64)0
	*($14 + [16 align=4]) = (int_64)0
	*($14 + [24 align=4]) = (int_64)0
	*($14 + [32]) = (int_64)0
	$21 = CALL $142(($15 + [176]), $5)
	$16 = CALL $43($0, $21)
	if ( ((*($21) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($21 + [8]))
	
.LABEL $label$18
	$21 = ($14 + [20])
	$22 = ($14 + [8])
	if ( (int_64)($16 == 0) ){ goto $label$20 }
	*($14) = (int_64)1
	*(($14 + [32])) = $18
	CALL $143($22, $3)
	CALL $143($21, $2)
	goto $label$19 
	
.LABEL $label$20
	$23 = CALL $142(($15 + [160]), $5)
	$16 = CALL $46($0, $23)
	if ( ((*($23) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($23 + [8]))
	
.LABEL $label$21
	*(($14 + [32])) = $18
	if ( (int_64)($16 == 0) ){ goto $label$22 }
	*($14) = (int_64)2
	CALL $143($22, $3)
	CALL $143($21, $2)
	goto $label$19 
	
.LABEL $label$22
	*($14) = (int_64)3
	CALL $143($22, $3)
	CALL $143($21, $2)
	
.LABEL $label$19
	$16 = *($9)
	$2 = CALL $142(($15 + [144]), $20)
	$9 = CALL $142(($15 + [128]), $19)
	$24 = *($14)
	$20 = CALL $142(($15 + [112]), $22)
	$21 = CALL $142(($15 + [96]), $21)
	if ( ((int_64)$16 != (int_64)3) ){ goto $label$32 }
	if ( ((int_64)$24 == (int_64)3) ){ goto $label$32 }
	$14 = ($0 + [168])
	$16 = *($14)
	if ( ((int_64)$16 != (int_64)-1) ){ goto $label$33 }
	$16 = (int_64)0
	$19 = CALL db_lowerbound_i64(*(($0 + [152])), *(($0 + [160])), (int_64)-6030999592730886144, (int_64)0)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$34 }
	CALL $44($17, $19)
	*($15 + [292]) = [0]
	*($15 + [288]) = $17
	$16 = *(*(CALL $47(($15 + [288])) + [4]))
	$16 = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$34
	*(($0 + [168])) = $16
	
.LABEL $label$33
	CALL eosio_assert((uint_64)($16 <= (int_64)-2), [8405])
	$16 = *($14)
	$14 = CALL $142(($15 + [80]), $3)
	$19 = CALL $142(($15 + [64]), $9)
	*($15 + [320]) = (int_64)0
	*($15 + [328]) = $18
	*($15 + [308]) = [999999]
	if ( ((int_64)$16 != (int_64)999999) ){ goto $label$35 }
	$22 = ($0 + [168])
	$18 = *($22)
	if ( ((int_64)$18 != (int_64)-1) ){ goto $label$36 }
	$18 = (int_64)0
	$23 = CALL db_lowerbound_i64(*(($0 + [152])), *(($0 + [160])), (int_64)-6030999592730886144, (int_64)0)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$37 }
	CALL $44($17, $23)
	*($15 + [292]) = [0]
	*($15 + [288]) = $17
	$18 = *(*(CALL $47(($15 + [288])) + [4]))
	$18 = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$37
	*(($0 + [168])) = $18
	
.LABEL $label$36
	CALL eosio_assert((uint_64)($18 <= (int_64)-2), [8405])
	$16 = *($22)
	
.LABEL $label$35
	*($15 + [308]) = $16
	CALL require_auth(*($0))
	$18 = *($0)
	*($15 + [300]) = $14
	*($15 + [292]) = ($15 + [328])
	*($15 + [288]) = ($15 + [308])
	*($15 + [296]) = ($15 + [320])
	*($15 + [304]) = $19
	CALL $48(($15 + [312]), $17, $18, ($15 + [288]))
	if ( ((*($19) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($19 + [8]))
	
.LABEL $label$38
	if ( ((*($14) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*($14 + [8]))
	
.LABEL $label$39
	$18 = *($7)
	$14 = CALL $142(($15 + [48]), $3)
	*($15 + [320]) = $10
	*($15 + [328]) = $18
	CALL require_auth(*($0))
	$18 = *($0)
	*($15 + [288]) = $0
	*($15 + [296]) = $14
	*($15 + [292]) = ($15 + [328])
	*($15 + [300]) = ($15 + [320])
	CALL $49(($15 + [312]), ($0 + [192]), $18, ($15 + [288]))
	if ( ((*($14) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($14 + [8]))
	
.LABEL $label$40
	$14 = CALL $142(($15 + [32]), $5)
	if ( ((*($14) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($14 + [8]))
	$14 = [1]
	if ( ((*($15 + [96]) & [1]) == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	if ( ((uint_64)((int_64)$16 + (int_64)-1) > (uint_64)(int_64)1) ){ goto $label$41 }
	$14 = CALL $142(($15 + [16]), $3)
	if ( ((*($14) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($14 + [8]))
	
.LABEL $label$41
	if ( ((uint_64)((int_64)$24 + (int_64)-1) > (uint_64)(int_64)1) ){ goto $label$31 }
	$14 = CALL $142($15, $5)
	if ( ((*($14) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($14 + [8]))
	
.LABEL $label$31
	$14 = [1]
	if ( (*($15 + [96]) & [1]) ){ goto $label$29 }
	
.LABEL $label$30
	if ( (*($15 + [112]) & $14) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL _ZdlPv(*($21 + [8]))
	if ( ((*($15 + [112]) & $14) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*($20 + [8]))
	$14 = [1]
	if ( ((*($15 + [128]) & [1]) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$14 = [1]
	if ( (*($15 + [128]) & [1]) ){ goto $label$25 }
	
.LABEL $label$26
	if ( (*($15 + [144]) & $14) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($15 + [144]) & $14) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($15 + [336])
	return 
	
.LABEL $label$23
	$global$0 = ($15 + [336])
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [560])
	$global$0 = $3
	*(($4 = $3) + [504]) = *($2)
	$5 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$5 = CALL $174($2)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $2)
	
.LABEL $label$1
	*(($4 + [360])) = (int_64)0
	*((($4 + [344]) + [24])) = (int_64)0
	*((($4 + [344]) + [40])) = (int_64)0
	*((($4 + [344]) + [48])) = (int_64)0
	*((($4 + [344]) + [64])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*((($4 + [344]) + [88])) = (int_64)0
	*((($4 + [344]) + [96])) = (int_64)0
	*((($4 + [344]) + [120])) = (int_64)0
	*((($4 + [344]) + [128])) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [448]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*((($4 + [344]) + [144])) = (int_64)0
	*(($4 + [496])) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [332]) = $5
	*($4 + [328]) = $5
	*($4 + [336]) = ($5 + $2)
	*($4 + [544]) = ($4 + [328])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [8224])
	CALL memcpy(($4 + [344]), *($4 + [332]), [8])
	*($4 + [332]) = (*($4 + [332]) + [8])
	CALL $35(($4 + [328]), (($4 + [344]) + [8]))
	CALL $35(($4 + [328]), ($4 + [364]))
	CALL $35(($4 + [328]), ($4 + [376]))
	*($4 + [16]) = ($4 + [344])
	CALL $39(($4 + [16]), ($4 + [544]))
	*(($3 = ($4 + [8]))) = *($4 + [336])
	*($4) = *($4 + [328])
	$3 = *($3)
	*((($4 + [512]) + [8])) = $3
	*(($6 = (($4 + [528]) + [8]))) = $3
	$7 = *($4)
	*($4 + [528]) = $7
	*($4 + [512]) = $7
	$3 = *($6)
	*((($4 + [544]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [528])
	*($4 + [32]) = $1
	*($4 + [544]) = $1
	*((($4 + [16]) + [40])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*(($4 + [96])) = $0
	*((($4 + [16]) + [88])) = (int_64)-1
	*((($4 + [16]) + [96])) = (int_64)0
	*(($4 + [120])) = [0]
	*((($4 + [16]) + [120])) = $0
	*((($4 + [16]) + [128])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*((($4 + [16]) + [144])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [288]) = $0
	*($4 + [548]) = ($4 + [504])
	*($4 + [544]) = ($4 + [16])
	CALL $40(($4 + [544]), ($4 + [344]))
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL $177($5)
	
.LABEL $label$4
	CALL $37(($4 + [16]))
	CALL $41(($4 + [344]))
	$global$0 = ($4 + [560])
	return [1]
}