(data (i32.const 8192) "onerror\00")
(data (i32.const 8200) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8264) "eosmaxiodice\00")
(data (i32.const 8277) "resolvebet\00")
(data (i32.const 8288) "eosmaxioslot\00")
(data (i32.const 8301) "eosmaxiodraw\00")
(data (i32.const 8314) "resolvedraw\00")
(data (i32.const 8326) "eosmaxiorank\00")
(data (i32.const 8339) "payreward\00")
(data (i32.const 8349) "wrong dividend status\00")
(data (i32.const 8371) "eosmax1stake\00")
(data (i32.const 8384) "dividendloop\00")
(data (i32.const 8397) "dividending\00")
(data (i32.const 8409) "last dividend too close,scheduled to next hour\00")
(data (i32.const 8456) "dividend\00")
(data (i32.const 8465) "next dividend time=> \00")
(data (i32.const 8487) "\n delay time=>\00")
(data (i32.const 8502) "delay time\00")
(data (i32.const 8513) "eosmaxiobull\00")
(data (i32.const 8526) "write\00")
(data (i32.const 8532) "eosio.token\00")
(data (i32.const 8544) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8595) "error reading iterator\00")
(data (i32.const 8618) "read\00")
(data (i32.const 8623) "cannot create objects in table of another contract\00")
(data (i32.const 8674) "cannot pass end iterator to modify\00")
(data (i32.const 8709) "object passed to modify is not in multi_index\00")
(data (i32.const 8755) "cannot modify objects in table of another contract\00")
(data (i32.const 8806) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8865) "type mismatch\00")
(data (i32.const 8879) "attempt to add asset with different symbol\00")
(data (i32.const 8922) "addition underflow\00")
(data (i32.const 8941) "addition overflow\00")
(data (i32.const 8959) "gamestat is wrong\00")
(data (i32.const 8977) "dice\00")
(data (i32.const 8982) "slot\00")
(data (i32.const 8987) "bull\00")
(data (i32.const 8992) "banker\00")
(data (i32.const 8999) "get\00")
(data (i32.const 9004) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9053) "invalid symbol name\00")
(data (i32.const 9073) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9125) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9179) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9227) "eosmaxiodivi\00")
(data (i32.const 9240) "accounts\00")
(data (i32.const 9249) "overdrawn balance\00")
(data (i32.const 9267) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9326) "transfer dividend payout to pool\00")
(data (i32.const 9359) "transfer\00")
(data (i32.const 9368) "eosmaxiopool\00")
(data (i32.const 9381) "claimed dividend payout\00")
(data (i32.const 9405) "cannot increment end iterator\00")
(data (i32.const 9435) "cannot pass end iterator to erase\00")
(data (i32.const 9469) "object passed to erase is not in multi_index\00")
(data (i32.const 9514) "cannot erase objects in table of another contract\00")
(data (i32.const 9564) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9617) "attempt to subtract asset with different symbol\00")
(data (i32.const 9665) "subtraction underflow\00")
(data (i32.const 9687) "subtraction overflow\00")
(data (i32.const 18116) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "prints" (func $fimport$1 (param i32)))
(import "env" "eosio_exit" (func $fimport$2 (param i32)))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "read_action_data" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$11 (result i64)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$14 (result i64)))
(import "env" "send_deferred" (func $fimport$15 (param i32 i64 i32 i32 i32)))
(import "env" "db_idx64_store" (func $fimport$16 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "printui" (func $fimport$17 (param i64)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$20 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$21 (param i32 i64 i32)))
(import "env" "cancel_deferred" (func $fimport$22 (param i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$23 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$25 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$27 (param i32)))
(import "env" "abort" (func $fimport$28))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$40 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$41 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$44 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$46 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$47 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$48 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $110))
(export "_Znwj" (func $108))
(export "_Znaj" (func $109))
(export "_ZdaPv" (func $111))
(table $0 15 15 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $10 $11 $12 $14 $15 $17 $19 $20 $21 $22)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18202))
(global $global$2 i32 (i32.const 18202))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8618])
	CALL memcpy(($3 + [128]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($4 + [161])
	*($2 + [8]) = ($4 + [160])
	*($2 + [16]) = ($4 + [162])
	*($2 + [20]) = ($4 + [163])
	*($2 + [24]) = ($4 + [164])
	*($2 + [28]) = ($4 + [165])
	*($2 + [32]) = ($4 + [166])
	*($2 + [36]) = ($4 + [167])
	*($2 + [40]) = ($4 + [168])
	*($2 + [44]) = ($4 + [169])
	*($2 + [48]) = ($4 + [170])
	*($2 + [52]) = ($4 + [171])
	*($2 + [56]) = ($4 + [172])
	*($2 + [60]) = ($4 + [173])
	*($2 + [64]) = ($4 + [174])
	*($2 + [68]) = ($4 + [175])
	*($2 + [72]) = ($4 + [176])
	*($2 + [76]) = ($4 + [177])
	*($2 + [80]) = ($4 + [178])
	*($2 + [88]) = ($4 + [180])
	*($2 + [84]) = ($4 + [179])
	*($2 + [92]) = ($4 + [181])
	*($2 + [96]) = ($4 + [182])
	*($2 + [100]) = ($4 + [183])
	*($2 + [104]) = ($4 + [184])
	*($2 + [108]) = ($4 + [185])
	*($2 + [112]) = ($4 + [186])
	*($2 + [116]) = ($4 + [187])
	*($2 + [120]) = ($4 + [188])
	*($2 + [124]) = ($4 + [189])
	*($2 + [128]) = ($4 + [190])
	*($2 + [132]) = ($4 + [191])
	*($2 + [136]) = ($4 + [192])
	*($2 + [140]) = ($4 + [193])
	*($2 + [144]) = ($4 + [194])
	*($2 + [148]) = ($4 + [195])
	*($2 + [152]) = ($4 + [196])
	*($2 + [156]) = ($4 + [197])
	*($2 + [164]) = ($4 + [199])
	*($2 + [160]) = ($4 + [198])
	*($2 + [168]) = ($4 + [200])
	*($2 + [172]) = ($4 + [201])
	*($2 + [176]) = ($4 + [202])
	*($2 + [180]) = ($4 + [203])
	*($2 + [184]) = ($4 + [204])
	*($2 + [188]) = ($4 + [205])
	*($2 + [192]) = ($4 + [206])
	*($2 + [196]) = ($4 + [207])
	*($2 + [200]) = ($4 + [208])
	*($2 + [204]) = ($4 + [209])
	*($2 + [208]) = ($4 + [210])
	*($2 + [212]) = ($4 + [211])
	*($2 + [216]) = ($4 + [212])
	*($2 + [220]) = ($4 + [213])
	*($2 + [224]) = ($4 + [214])
	*($2 + [228]) = ($4 + [215])
	*($2 + [232]) = ($4 + [216])
	*($2 + [240]) = ($4 + [218])
	*($2 + [236]) = ($4 + [217])
	*($2 + [244]) = ($4 + [219])
	*($2 + [248]) = ($4 + [220])
	*($2 + [252]) = ($4 + [221])
	*($2 + [256]) = ($4 + [222])
	*($2 + [260]) = ($4 + [223])
	*($2 + [264]) = ($4 + [224])
	*($2 + [268]) = ($4 + [225])
	CALL $97(($2 + [8]), $2)
	CALL $85(*($1), ($4 + [228]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8618])
	CALL memcpy(($4 + [240]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2 + [8]) = $4
	CALL $99(($2 + [8]), $1)
	$global$0 = ($2 + [272])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($3 + [273])
	*($2 + [8]) = ($3 + [272])
	*($2 + [16]) = ($3 + [274])
	*($2 + [20]) = ($3 + [275])
	*($2 + [24]) = ($3 + [276])
	*($2 + [28]) = ($3 + [277])
	*($2 + [32]) = ($3 + [278])
	*($2 + [36]) = ($3 + [279])
	*($2 + [40]) = ($3 + [280])
	*($2 + [44]) = ($3 + [281])
	*($2 + [48]) = ($3 + [282])
	*($2 + [52]) = ($3 + [283])
	*($2 + [56]) = ($3 + [284])
	*($2 + [60]) = ($3 + [285])
	*($2 + [64]) = ($3 + [286])
	*($2 + [68]) = ($3 + [287])
	*($2 + [72]) = ($3 + [288])
	*($2 + [76]) = ($3 + [289])
	*($2 + [80]) = ($3 + [290])
	*($2 + [88]) = ($3 + [292])
	*($2 + [84]) = ($3 + [291])
	*($2 + [92]) = ($3 + [293])
	*($2 + [96]) = ($3 + [294])
	*($2 + [100]) = ($3 + [295])
	*($2 + [104]) = ($3 + [296])
	*($2 + [108]) = ($3 + [297])
	*($2 + [112]) = ($3 + [298])
	*($2 + [116]) = ($3 + [299])
	*($2 + [120]) = ($3 + [300])
	*($2 + [124]) = ($3 + [301])
	*($2 + [128]) = ($3 + [302])
	*($2 + [132]) = ($3 + [303])
	*($2 + [136]) = ($3 + [304])
	*($2 + [140]) = ($3 + [305])
	*($2 + [144]) = ($3 + [306])
	*($2 + [148]) = ($3 + [307])
	*($2 + [152]) = ($3 + [308])
	*($2 + [156]) = ($3 + [309])
	*($2 + [164]) = ($3 + [311])
	*($2 + [160]) = ($3 + [310])
	*($2 + [168]) = ($3 + [312])
	*($2 + [172]) = ($3 + [313])
	*($2 + [176]) = ($3 + [314])
	*($2 + [180]) = ($3 + [315])
	*($2 + [184]) = ($3 + [316])
	*($2 + [188]) = ($3 + [317])
	*($2 + [192]) = ($3 + [318])
	*($2 + [196]) = ($3 + [319])
	*($2 + [200]) = ($3 + [320])
	*($2 + [204]) = ($3 + [321])
	*($2 + [208]) = ($3 + [322])
	*($2 + [212]) = ($3 + [323])
	*($2 + [216]) = ($3 + [324])
	*($2 + [220]) = ($3 + [325])
	*($2 + [224]) = ($3 + [326])
	*($2 + [228]) = ($3 + [327])
	*($2 + [232]) = ($3 + [328])
	*($2 + [240]) = ($3 + [330])
	*($2 + [236]) = ($3 + [329])
	*($2 + [244]) = ($3 + [331])
	*($2 + [248]) = ($3 + [332])
	*($2 + [252]) = ($3 + [333])
	*($2 + [256]) = ($3 + [334])
	*($2 + [260]) = ($3 + [335])
	*($2 + [264]) = ($3 + [336])
	*($2 + [268]) = ($3 + [337])
	CALL $97(($2 + [8]), $2)
	$3 = *($0)
	CALL $85(*($1), ($3 + [340]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8618])
	CALL memcpy(($3 + [352]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [385])
	*($2 + [8]) = ($3 + [384])
	*($2 + [16]) = ($3 + [386])
	*($2 + [20]) = ($3 + [387])
	*($2 + [24]) = ($3 + [388])
	*($2 + [28]) = ($3 + [389])
	*($2 + [32]) = ($3 + [390])
	*($2 + [36]) = ($3 + [391])
	*($2 + [40]) = ($3 + [392])
	*($2 + [44]) = ($3 + [393])
	*($2 + [48]) = ($3 + [394])
	*($2 + [52]) = ($3 + [395])
	*($2 + [56]) = ($3 + [396])
	*($2 + [60]) = ($3 + [397])
	*($2 + [64]) = ($3 + [398])
	*($2 + [68]) = ($3 + [399])
	*($2 + [72]) = ($3 + [400])
	*($2 + [76]) = ($3 + [401])
	*($2 + [80]) = ($3 + [402])
	*($2 + [88]) = ($3 + [404])
	*($2 + [84]) = ($3 + [403])
	*($2 + [92]) = ($3 + [405])
	*($2 + [96]) = ($3 + [406])
	*($2 + [100]) = ($3 + [407])
	*($2 + [104]) = ($3 + [408])
	*($2 + [108]) = ($3 + [409])
	*($2 + [112]) = ($3 + [410])
	*($2 + [116]) = ($3 + [411])
	*($2 + [120]) = ($3 + [412])
	*($2 + [124]) = ($3 + [413])
	*($2 + [128]) = ($3 + [414])
	*($2 + [132]) = ($3 + [415])
	*($2 + [136]) = ($3 + [416])
	*($2 + [140]) = ($3 + [417])
	*($2 + [144]) = ($3 + [418])
	*($2 + [148]) = ($3 + [419])
	*($2 + [152]) = ($3 + [420])
	*($2 + [156]) = ($3 + [421])
	*($2 + [164]) = ($3 + [423])
	*($2 + [160]) = ($3 + [422])
	*($2 + [168]) = ($3 + [424])
	*($2 + [172]) = ($3 + [425])
	*($2 + [176]) = ($3 + [426])
	*($2 + [180]) = ($3 + [427])
	*($2 + [184]) = ($3 + [428])
	*($2 + [188]) = ($3 + [429])
	*($2 + [192]) = ($3 + [430])
	*($2 + [196]) = ($3 + [431])
	*($2 + [200]) = ($3 + [432])
	*($2 + [204]) = ($3 + [433])
	*($2 + [208]) = ($3 + [434])
	*($2 + [212]) = ($3 + [435])
	*($2 + [216]) = ($3 + [436])
	*($2 + [220]) = ($3 + [437])
	*($2 + [224]) = ($3 + [438])
	*($2 + [228]) = ($3 + [439])
	*($2 + [232]) = ($3 + [440])
	*($2 + [240]) = ($3 + [442])
	*($2 + [236]) = ($3 + [441])
	*($2 + [244]) = ($3 + [443])
	*($2 + [248]) = ($3 + [444])
	*($2 + [252]) = ($3 + [445])
	*($2 + [256]) = ($3 + [446])
	*($2 + [260]) = ($3 + [447])
	*($2 + [264]) = ($3 + [448])
	*($2 + [268]) = ($3 + [449])
	CALL $97(($2 + [8]), $2)
	CALL $85(*($1), ($3 + [452]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8618])
	CALL memcpy(($3 + [464]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [497])
	*($2 + [8]) = ($3 + [496])
	*($2 + [16]) = ($3 + [498])
	*($2 + [20]) = ($3 + [499])
	*($2 + [24]) = ($3 + [500])
	*($2 + [28]) = ($3 + [501])
	*($2 + [32]) = ($3 + [502])
	*($2 + [36]) = ($3 + [503])
	*($2 + [40]) = ($3 + [504])
	*($2 + [44]) = ($3 + [505])
	*($2 + [48]) = ($3 + [506])
	*($2 + [52]) = ($3 + [507])
	*($2 + [56]) = ($3 + [508])
	*($2 + [60]) = ($3 + [509])
	*($2 + [64]) = ($3 + [510])
	*($2 + [68]) = ($3 + [511])
	*($2 + [72]) = ($3 + [512])
	*($2 + [76]) = ($3 + [513])
	*($2 + [80]) = ($3 + [514])
	*($2 + [88]) = ($3 + [516])
	*($2 + [84]) = ($3 + [515])
	*($2 + [92]) = ($3 + [517])
	*($2 + [96]) = ($3 + [518])
	*($2 + [100]) = ($3 + [519])
	*($2 + [104]) = ($3 + [520])
	*($2 + [108]) = ($3 + [521])
	*($2 + [112]) = ($3 + [522])
	*($2 + [116]) = ($3 + [523])
	*($2 + [120]) = ($3 + [524])
	*($2 + [124]) = ($3 + [525])
	*($2 + [128]) = ($3 + [526])
	*($2 + [132]) = ($3 + [527])
	*($2 + [136]) = ($3 + [528])
	*($2 + [140]) = ($3 + [529])
	*($2 + [144]) = ($3 + [530])
	*($2 + [148]) = ($3 + [531])
	*($2 + [152]) = ($3 + [532])
	*($2 + [156]) = ($3 + [533])
	*($2 + [164]) = ($3 + [535])
	*($2 + [160]) = ($3 + [534])
	*($2 + [168]) = ($3 + [536])
	*($2 + [172]) = ($3 + [537])
	*($2 + [176]) = ($3 + [538])
	*($2 + [180]) = ($3 + [539])
	*($2 + [184]) = ($3 + [540])
	*($2 + [188]) = ($3 + [541])
	*($2 + [192]) = ($3 + [542])
	*($2 + [196]) = ($3 + [543])
	*($2 + [200]) = ($3 + [544])
	*($2 + [204]) = ($3 + [545])
	*($2 + [208]) = ($3 + [546])
	*($2 + [212]) = ($3 + [547])
	*($2 + [216]) = ($3 + [548])
	*($2 + [220]) = ($3 + [549])
	*($2 + [224]) = ($3 + [550])
	*($2 + [228]) = ($3 + [551])
	*($2 + [232]) = ($3 + [552])
	*($2 + [240]) = ($3 + [554])
	*($2 + [236]) = ($3 + [553])
	*($2 + [244]) = ($3 + [555])
	*($2 + [248]) = ($3 + [556])
	*($2 + [252]) = ($3 + [557])
	*($2 + [256]) = ($3 + [558])
	*($2 + [260]) = ($3 + [559])
	*($2 + [264]) = ($3 + [560])
	*($2 + [268]) = ($3 + [561])
	CALL $97(($2 + [8]), $2)
	CALL $85(*($1), ($3 + [564]))
	$global$0 = ($2 + [272])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8526])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8526])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8526])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8526])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8526])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8526])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8526])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $78(CALL $77($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8526])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8526])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $78($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8618])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8618])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9179])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3020380869172259840)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9125])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9125])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $76(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $124($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [18116])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $122 (int_32 $0)
{
	return CALL $123([9720], $0)
}

int_32 .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8595])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8618])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8618])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $40(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $93($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $26($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $94($2, $1)
	CALL $96(CALL $95(CALL $95($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$6 = ($2 + [16])
	*($3) = $6
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $6
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($7 + [40])
	$2 = *($0)
	$11 = *(($0 + [4]))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $11)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($11 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$6 = ($8 + [-24])
	*($5) = *($6)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($6) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18104])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17912]
	$3 = (((int_32)$1 * (int_32)[12]) + [17912])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [32]) = (int_64)0
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [9004])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9053])
	*(($1 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9053])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9053])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9053])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($0 + [40])) = (int_64)1398362884
	CALL eosio_assert([1], [9004])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9053])
	*(($0 + [56])) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9053])
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $101(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9179])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)5455799419172362240)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9125])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9125])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $46(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [8595])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $122($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [36]) = $7
	*($3 + [32]) = $7
	*($3 + [40]) = ($7 + $6)
	*(($9 = CALL _Znwj([64])) + [32]) = (int_64)1398362884
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$10 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9053])
	*($9 + [48]) = $0
	CALL $104(($3 + [32]), $9)
	*($9 + [56]) = [-1]
	*($9 + [52]) = $1
	*($3 + [24]) = $9
	$10 = *($9)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $10
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $55($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $125($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), $3, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9712]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9716])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9712]) = [1]
	$2 = ($2 << [16])
	*([0] + [9716]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9716])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9716]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9712]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9712]) = [1]
	$3 = ($3 << [16])
	*([0] + [9716]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9716])
	
.LABEL $label$10
	*([0] + [9716]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [8618])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = *($0)
	CALL eosio_assert(((int_64)*($0 + [248]) == (int_64)CALL $fimport$11()), [8623])
	*(($4 = CALL _Znwj([24])) + [8]) = ($0 + [248])
	*($4) = $1
	CALL eosio_assert([1], [8526])
	CALL memcpy(($2 + [16]), $4, [8])
	$1 = *($4)
	$5 = CALL db_store_i64(*(($0 + [256])), (int_64)-5920782797423585936, $3, $1, ($2 + [16]), [8])
	*($4 + [12]) = $5
	$6 = ($0 + [264])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$1 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($2 + [8]) = $4
	$1 = *($4)
	*($2 + [16]) = $1
	*($2 + [4]) = $5
	$7 = ($0 + [276])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [280]))) ){ goto $label$4 }
	*($6 + [8]) = $1
	*($6 + [16]) = $5
	*($2 + [8]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	$0 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $64(($0 + [272]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$0 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $41(($3 + [32]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	*(($1 = (($3 + [112]) + [8]))) = *(($3 + [72]))
	*(($2 = (($3 + [96]) + [8]))) = *(($3 + [88]))
	*($3 + [112]) = *($3 + [64])
	*($3 + [96]) = *($3 + [80])
	$6 = *($3 + [56])
	$7 = *($3 + [48])
	$8 = *($3 + [40])
	$9 = *($3 + [32])
	*((($3 + [144]) + [8])) = *($2)
	*((($3 + [128]) + [8])) = *($1)
	*($3 + [144]) = *($3 + [96])
	*($3 + [128]) = *($3 + [112])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$10 = *((($3 + [128]) + [8]))
	*((($3 + [176]) + [8])) = $10
	$11 = *((($3 + [144]) + [8]))
	*((($3 + [160]) + [8])) = $11
	*((($3 + [16]) + [8])) = $10
	*(($3 + [8])) = $11
	$10 = *($3 + [128])
	*($3 + [176]) = $10
	$11 = *($3 + [144])
	*($3 + [160]) = $11
	*($3 + [16]) = $10
	*($3) = $11
	CALL void $1((int_32 $9), (int_64 $8), (int_64 $7), (int_64 $6), (int_64 ($3 + [16])), (int_32 $3), (int_32 $5))
	$global$0 = ($3 + [192])
	return [1]
}

void .FUNC $7 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [8]) = (int_64)0
	*($2) = $1
	CALL cancel_deferred($2)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [192])
	$global$0 = $2
	*(($3 = $2) + [156]) = $0
	*($3 + [144]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $122($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3) = (int_64)0
	CALL memset(($3 + [48]), [0], [66])
	*(($3 + [124])) = (int_64)0
	*(($3 + [132])) = (int_64)0
	*($3 + [116 align=4]) = (int_64)0
	*($3 + [164]) = $1
	*($3 + [160]) = $1
	*($3 + [168]) = ($1 + $0)
	*($3 + [176]) = ($3 + [160])
	*($3 + [184]) = $3
	CALL $24(($3 + [184]), ($3 + [176]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $125($1)
	
.LABEL $label$4
	*($3 + [164]) = ($3 + [144])
	*($3 + [160]) = ($3 + [156])
	CALL $25(($3 + [160]), $3)
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [136])))
	
.LABEL $label$5
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [124])))
	
.LABEL $label$6
	$global$0 = ($3 + [192])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$7 = ($global$0 - [160])
	$global$0 = $7
	CALL require_auth(*($0))
	$8 = *($0)
	CALL eosio_assert(((int_64)*($0 + [128]) == (int_64)CALL $fimport$11()), [8623])
	$9 = CALL _Znwj([80])
	$10 = CALL $42($9)
	*($9 + [64]) = ($0 + [128])
	*($9 + [8]) = $2
	*($9) = $1
	*($9 + [16]) = $3
	*($9 + [24]) = $4
	*($9 + [32]) = *($5)
	*(($9 + [40])) = *(($5 + [8]))
	*($9 + [48]) = *($6)
	*(($9 + [56])) = *(($6 + [8]))
	*($7 + [16]) = (($7 + [48]) + [64])
	*($7 + [12]) = ($7 + [48])
	*($7 + [8]) = ($7 + [48])
	CALL $43(($7 + [8]), $10)
	$3 = ((int_64)((int_64)*($9) << (int_64)32) | (int_64)*($9 + [8]))
	$10 = CALL db_store_i64(*(($0 + [136])), (int_64)4983115765905764864, $8, $3, ($7 + [48]), [64])
	*($9 + [68]) = $10
	$5 = ($0 + [144])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$1 }
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($7 + [8]) = $9
	$3 = ((int_64)((int_64)*($9) << (int_64)32) | (int_64)*(($9 + [8])))
	*($7 + [48]) = $3
	*($7 + [144]) = $10
	$11 = ($0 + [156])
	$5 = *($11)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [160]))) ){ goto $label$4 }
	*($5 + [8]) = $3
	*($5 + [16]) = $10
	*($7 + [8]) = [0]
	*($5) = $9
	*($11) = ($5 + [24])
	$9 = *($7 + [8])
	$5 = [0]
	*($7 + [8]) = [0]
	if ( $9 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $44(($0 + [152]), ($7 + [8]), ($7 + [48]), ($7 + [144]))
	$9 = *($7 + [8])
	$5 = [0]
	*($7 + [8]) = [0]
	if ( ($9 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($9)
	
.LABEL $label$2
	*(($7 + [80])) = *(($6 + [8]))
	*($7 + [56]) = $2
	*($7 + [48]) = $1
	*($7 + [64]) = $4
	*($7 + [72]) = *($6)
	$6 = ($7 + [72])
	$10 = ($7 + [64])
	$11 = (($7 + [48]) + [8])
	$4 = (int_64)0
	$1 = (int_64)59
	$9 = [8326]
	$3 = (int_64)0
	
.LOOP $label$5:
	$2 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$6 }
	$0 = *($9)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$0 = ($0 + [-91])
	goto $label$7 
	
.LABEL $label$8
	$0 = ( ($0 + [-48]) ? $5 : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$6
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$3 = ((int_64)$2 | (int_64)$3)
	$1 = ((int_64)$1 + (int_64)4294967291)
	if ( ((int_64)$1 != (int_64)55834574842) ){ goto $label$5 }
	$4 = (int_64)5
	
.LOOP $label$9:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$9 }
	$4 = (int_64)0
	$1 = (int_64)59
	$9 = [8326]
	$8 = (int_64)0
	
.LOOP $label$10:
	$2 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$11 }
	$0 = *($9)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$0 = ($0 + [-91])
	goto $label$12 
	
.LABEL $label$13
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$11
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$8 = ((int_64)$2 | (int_64)$8)
	$1 = ((int_64)$1 + (int_64)4294967291)
	if ( ((int_64)$1 != (int_64)55834574842) ){ goto $label$10 }
	$4 = (int_64)0
	$2 = (int_64)59
	$9 = [8339]
	$12 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$4 > (uint_64)(int_64)8) ){ goto $label$19 }
	$0 = *($9)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$0 = ($0 + [-91])
	goto $label$17 
	
.LABEL $label$19
	$1 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$15
	$9 = ($9 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$12 = ((int_64)$1 | (int_64)$12)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$14 }
	*($7 + [16]) = $12
	*($7 + [8]) = $8
	*(($9 = CALL _Znwj([16]))) = $3
	*($9 + [8]) = (int_64)3631283935532548096
	*(($7 + [44])) = [0]
	$0 = ($9 + [16])
	*(($7 + [32])) = $0
	*(($7 + [28])) = $0
	*($7 + [24]) = $9
	*($7 + [36 align=4]) = (int_64)0
	CALL $26(($7 + [36]), [40])
	$9 = *(($7 + [40]))
	$0 = *($7 + [36])
	*($7 + [124]) = $0
	*($7 + [120]) = $0
	*($7 + [128]) = $9
	*($7 + [136]) = ($7 + [120])
	*($7 + [148]) = $11
	*($7 + [152]) = $10
	*($7 + [156]) = $6
	*($7 + [144]) = ($7 + [48])
	CALL $45(($7 + [144]), ($7 + [136]))
	CALL $28(($7 + [144]), ($7 + [8]))
	$9 = *($7 + [144])
	CALL send_inline($9, (*($7 + [148]) - $9))
	$9 = *($7 + [144])
	if ( ($9 == 0) ){ goto $label$20 }
	*($7 + [148]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$20
	$9 = *($7 + [36])
	if ( ($9 == 0) ){ goto $label$21 }
	*(($7 + [40])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$21
	$9 = *($7 + [24])
	if ( ($9 == 0) ){ goto $label$22 }
	*(($7 + [28])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$22
	$global$0 = ($7 + [160])
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [272]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [276])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [272]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [236])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [232]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [196])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [192]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [152]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [112]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [72]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$31 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$35 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$36
	CALL _ZdlPv($4)
	
.LABEL $label$35
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($0 + [32]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $1
	
.LABEL $label$32
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$31
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$6 = ($global$0 - [224])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = (int_64)0
	$8 = (int_64)59
	$0 = [8264]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$1 }
	$7 = (int_64)5
	
.LOOP $label$5:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$5 }
	$7 = (int_64)0
	$8 = (int_64)59
	$0 = [8264]
	$12 = (int_64)0
	
.LOOP $label$6:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$7 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$11 = ($11 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$7
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$6 }
	$7 = (int_64)0
	$10 = (int_64)59
	$0 = [8277]
	$13 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$15 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$11 = ($11 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$8 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$11
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$13 = ((int_64)$8 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$10 }
	*(($6 + [24])) = *(($2 + [8]))
	*(($6 + [32])) = *(($2 + [16]))
	*(($6 + [40])) = *(($2 + [24]))
	*($6) = $1
	*($6 + [16]) = *($2)
	CALL memcpy(($6 + [48]), $3, [66])
	$11 = CALL $113(($6 + [116]), $4)
	$2 = CALL $113(($6 + [128]), $5)
	*($6 + [160]) = $13
	*($6 + [152]) = $12
	*(($0 = CALL _Znwj([16]))) = $9
	*($0 + [8]) = (int_64)3631283935532548096
	*(($6 + [188])) = [0]
	$3 = ($0 + [16])
	*((($6 + [152]) + [24])) = $3
	*(($6 + [172])) = $3
	*($6 + [168]) = $0
	*($6 + [180 align=4]) = (int_64)0
	$0 = *($11)
	$11 = ( *(($6 + [120])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($11 + [106])
	$7 = (CASTING uint_64)(uint_32 $11)
	$3 = ($6 + [180])
	
.LOOP $label$16:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$16 }
	$11 = *($2)
	$11 = ( *(($6 + [132])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$0 = ($11 + $0)
	$7 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$17:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$17 }
	if ( ($0 == 0) ){ goto $label$19 }
	CALL $26($3, $0)
	$11 = *(($6 + [184]))
	$0 = *(($6 + [180]))
	goto $label$18 
	
.LABEL $label$19
	$11 = [0]
	$0 = [0]
	
.LABEL $label$18
	*($6 + [196]) = $0
	*($6 + [192]) = $0
	*($6 + [200]) = $11
	*($6 + [208]) = ($6 + [192])
	*($6 + [216]) = $6
	CALL $27(($6 + [216]), ($6 + [208]))
	CALL $28(($6 + [192]), ($6 + [152]))
	$0 = *($6 + [192])
	CALL send_inline($0, (*($6 + [196]) - $0))
	$0 = *($6 + [192])
	if ( ($0 == 0) ){ goto $label$20 }
	*($6 + [196]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$20
	$0 = *($6 + [180])
	if ( ($0 == 0) ){ goto $label$21 }
	*(($6 + [184])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$21
	$0 = *($6 + [168])
	if ( ($0 == 0) ){ goto $label$22 }
	*(($6 + [172])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$22
	if ( (*($6 + [128]) & [1]) ){ goto $label$25 }
	if ( (*($6 + [116]) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($6 + [136])))
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($6 + [124])))
	$global$0 = ($6 + [224])
	return 
	
.LABEL $label$23
	$global$0 = ($6 + [224])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [512])
	$global$0 = $3
	CALL memory()
	*(($3 + [240])) = $0
	*(($3 + [248])) = (int_64)-1
	*(($3 + [256])) = (int_64)0
	*(($3 + [264])) = [0]
	*(($3 + [280])) = $0
	*(($3 + [288])) = (int_64)-1
	*(($3 + [296])) = (int_64)0
	*(($3 + [304])) = [0]
	*(($3 + [320])) = $0
	*(($3 + [328])) = (int_64)-1
	*(($3 + [336])) = (int_64)0
	*(($3 + [344])) = [0]
	*(($3 + [360])) = $0
	*($3 + [232]) = $0
	*($3 + [224]) = $0
	*($3 + [272]) = $0
	*($3 + [312]) = $0
	*($3 + [352]) = $0
	*(($3 + [368])) = (int_64)-1
	*(($3 + [376])) = (int_64)0
	*(($3 + [384])) = [0]
	*(($3 + [400])) = $0
	*(($3 + [408])) = (int_64)-1
	*(($3 + [416])) = (int_64)0
	*(($3 + [424])) = [0]
	*(($3 + [428])) = [0]
	*(($3 + [440])) = $0
	*(($3 + [448])) = (int_64)-1
	*(($3 + [456])) = (int_64)0
	*(($3 + [464])) = [0]
	*(($3 + [468])) = [0]
	*(($3 + [480])) = $0
	*(($3 + [488])) = (int_64)-1
	*($3 + [392]) = $0
	*($3 + [432]) = $0
	*($3 + [472]) = $0
	*(($3 + [504])) = [0]
	*(($3 + [496])) = (int_64)0
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8200])
	CALL prints([8192])
	
.LABEL $label$2
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$4 }
	CALL $2(($3 + [224]))
	CALL $119([0])
	$global$0 = ($3 + [512])
	return (unreachable)
	
.LABEL $label$4
	if ( ((int_64)$2 > (int_64)-4851655213501644801) ){ goto $label$18 }
	if ( ((int_64)$2 <= (int_64)-4994130327827619329) ){ goto $label$17 }
	if ( ((int_64)$2 > (int_64)-4994130327795812353) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-4994130327827619328) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-4994130327800507392) ){ goto $label$5 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [1]
	*($3) = *($3 + [216])
	CALL $4(($3 + [224]), $3)
	CALL eosio_exit([0])
	
.LABEL $label$18
	if ( ((int_64)$2 <= (int_64)4921564679018381311) ){ goto $label$16 }
	if ( ((int_64)$2 > (int_64)5455799419163115519) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)4983115766035873792) ){ goto $label$5 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [2]
	*($3 + [48]) = *($3 + [168])
	CALL $6(($3 + [224]), ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)-6571125140531183616) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-6533258155603381760) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-6217917312873267200) ){ goto $label$5 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [3]
	*($3 + [80]) = *($3 + [136])
	CALL $8(($3 + [224]), ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)-4851655213501644800) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-4417301786441509888) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)3626342911988498432) ){ goto $label$5 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3 + [96]) = *($3 + [120])
	CALL $8(($3 + [224]), ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-4994130327795812352) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4994130327547072000) ){ goto $label$5 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [5]
	*($3 + [8]) = *($3 + [208])
	CALL $4(($3 + [224]), ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)5455799419163115520) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)5455799419172366672) ){ goto $label$5 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [6]
	*($3 + [64]) = *($3 + [152])
	CALL $8(($3 + [224]), ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	*($3 + [196]) = [0]
	*($3 + [192]) = [7]
	*($3 + [24]) = *($3 + [192])
	CALL $13(($3 + [224]), ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	*($3 + [148]) = [0]
	*($3 + [144]) = [8]
	*($3 + [72]) = *($3 + [144])
	CALL $8(($3 + [224]), ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	*($3 + [188]) = [0]
	*($3 + [184]) = [9]
	*($3 + [32]) = *($3 + [184])
	CALL $16(($3 + [224]), ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	*($3 + [180]) = [0]
	*($3 + [176]) = [10]
	*($3 + [40]) = *($3 + [176])
	CALL $18(($3 + [224]), ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [116]) = [0]
	*($3 + [112]) = [11]
	*($3 + [104]) = *($3 + [112])
	CALL $8(($3 + [224]), ($3 + [104]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [132]) = [0]
	*($3 + [128]) = [12]
	*($3 + [88]) = *($3 + [128])
	CALL $8(($3 + [224]), ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [204]) = [0]
	*($3 + [200]) = [13]
	*($3 + [16]) = *($3 + [200])
	CALL $4(($3 + [224]), ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [164]) = [0]
	*($3 + [160]) = [14]
	*($3 + [56]) = *($3 + [160])
	CALL $23(($3 + [224]), ($3 + [56]))
	
.LABEL $label$5
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [40]) = $1
	CALL require_auth($1)
	*($2 + [32]) = ($0 + [168])
	CALL $58(($2 + [24]), ($2 + [32]), ($2 + [40]))
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($2 + [16])
	
.LOOP $label$2:
	if ( ((int_64)*($3 + [8]) != (int_64)*($2 + [40])) ){ goto $label$1 }
	if ( ((int_64)*(($3 + [24])) != (int_64)1397703946) ){ goto $label$3 }
	*($4) = (int_64)1397703940
	$1 = ((int_64)*($3 + [16]) / (int_64)1000000)
	*($2 + [8]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9004])
	$1 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$1 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$1 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$10 }
	$6 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [9053])
	if ( ((int_64)*($2 + [8]) < (int_64)1) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [9053])
	if ( ((int_64)*($2 + [8]) < (int_64)1) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $62($0, *($2 + [40]), ($2 + [8]))
	$1 = *($0)
	$3 = *($2 + [28])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8674])
	CALL $63(*($2 + [32]), $3, $1)
	
.LABEL $label$3
	CALL $59(($2 + [24]))
	$3 = *($2 + [28])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$8 = ($global$0 - [112])
	$global$0 = $8
	CALL require_auth(*($0))
	$9 = ($4 + [8])
	$10 = *($9)
	*((($8 + [96]) + [8])) = $10
	$11 = *($4)
	*((($8 + [32]) + [8])) = $10
	*($8 + [32]) = $11
	*($8 + [96]) = $11
	CALL $35($0, $3, ($8 + [32]))
	$1 = CALL $113(($8 + [80]), $1)
	$12 = *($9)
	*((($8 + [64]) + [8])) = $12
	$11 = *(($5 + [8]))
	$10 = *($5)
	$13 = *($4)
	*((($8 + [16]) + [8])) = $12
	*(($8 + [8])) = $11
	*((($8 + [48]) + [8])) = $11
	*($8 + [64]) = $13
	*($8 + [16]) = $13
	*($8) = $10
	*($8 + [48]) = $10
	CALL $36($0, $1, $2, $3, ($8 + [16]), $8)
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$1
	CALL $37($0, $7, $4)
	$global$0 = ($8 + [112])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [112])
	$global$0 = $2
	*(($3 = $2) + [108]) = $0
	*($3 + [96]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $33(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [96])
	*($3) = ($3 + [108])
	CALL $34($3, ($3 + [8]))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$6
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$7
	$global$0 = ($3 + [112])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [88])
	$5 = ($0 + [96])
	$6 = CALL db_lowerbound_i64(*($0 + [88]), *($5), (int_64)5093160301227294720, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	$6 = CALL $38($4, $6)
	CALL eosio_assert([1], [9435])
	CALL eosio_assert([1], [9405])
	$5 = CALL db_next_i64(*($6 + [20]), $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	CALL $38($4, $5)
	
.LABEL $label$7
	CALL $39($4, $6)
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$11()), [8623])
	*(($6 = CALL _Znwj([32])) + [16]) = $4
	*($6 + [8]) = $2
	*($6) = $1
	CALL eosio_assert([1], [8526])
	CALL memcpy($3, $6, [8])
	CALL eosio_assert([1], [8526])
	CALL memcpy(($3 | [8]), ($6 + [8]), [8])
	$1 = *($6)
	$5 = CALL db_store_i64(*(($0 + [96])), (int_64)5093160301227294720, $7, $1, $3, [16])
	*($6 + [20]) = $5
	$4 = ($0 + [104])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$8 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($3 + [24]) = $6
	$1 = *($6)
	*($3) = $1
	*($3 + [20]) = $5
	$8 = ($0 + [116])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [120]))) ){ goto $label$5 }
	*($4 + [8]) = $1
	*($4 + [16]) = $5
	*($3 + [24]) = [0]
	*($4) = $6
	*($8) = ($4 + [24])
	$0 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $0 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$6
	$7 = *($0)
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$11()), [8623])
	*(($6 = CALL _Znwj([32])) + [16]) = $4
	*($6 + [8]) = $2
	*($6) = $1
	CALL eosio_assert([1], [8526])
	CALL memcpy($3, $6, [8])
	CALL eosio_assert([1], [8526])
	CALL memcpy(($3 | [8]), ($6 + [8]), [8])
	$1 = *($6)
	$5 = CALL db_store_i64(*($5), (int_64)5093160301227294720, $7, $1, $3, [16])
	*($6 + [20]) = $5
	$4 = ($0 + [104])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$9 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($3 + [24]) = $6
	$1 = *($6)
	*($3) = $1
	*($3 + [20]) = $5
	$8 = ($0 + [116])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [120]))) ){ goto $label$3 }
	*($4 + [8]) = $1
	*($4 + [16]) = $5
	*($3 + [24]) = [0]
	*($4) = $6
	*($8) = ($4 + [24])
	$0 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $40(($0 + [112]), ($3 + [24]), $3, ($3 + [20]))
	$0 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL _ZdlPv($0)
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$3
	CALL $40(($0 + [112]), ($3 + [24]), $3, ($3 + [20]))
	$0 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$6 = ($global$0 - [224])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = (int_64)0
	$8 = (int_64)59
	$0 = [8288]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$1 }
	$7 = (int_64)5
	
.LOOP $label$5:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$5 }
	$7 = (int_64)0
	$8 = (int_64)59
	$0 = [8288]
	$12 = (int_64)0
	
.LOOP $label$6:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$7 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$11 = ($11 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$7
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$6 }
	$7 = (int_64)0
	$10 = (int_64)59
	$0 = [8277]
	$13 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$15 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$11 = ($11 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$8 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$11
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$13 = ((int_64)$8 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$10 }
	*(($6 + [24])) = *(($2 + [8]))
	*(($6 + [32])) = *(($2 + [16]))
	*(($6 + [40])) = *(($2 + [24]))
	*($6) = $1
	*($6 + [16]) = *($2)
	CALL memcpy(($6 + [48]), $3, [66])
	$11 = CALL $113(($6 + [116]), $4)
	$2 = CALL $113(($6 + [128]), $5)
	*($6 + [160]) = $13
	*($6 + [152]) = $12
	*(($0 = CALL _Znwj([16]))) = $9
	*($0 + [8]) = (int_64)3631283935532548096
	*(($6 + [188])) = [0]
	$3 = ($0 + [16])
	*((($6 + [152]) + [24])) = $3
	*(($6 + [172])) = $3
	*($6 + [168]) = $0
	*($6 + [180 align=4]) = (int_64)0
	$0 = *($11)
	$11 = ( *(($6 + [120])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($11 + [106])
	$7 = (CASTING uint_64)(uint_32 $11)
	$3 = ($6 + [180])
	
.LOOP $label$16:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$16 }
	$11 = *($2)
	$11 = ( *(($6 + [132])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$0 = ($11 + $0)
	$7 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$17:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$17 }
	if ( ($0 == 0) ){ goto $label$19 }
	CALL $26($3, $0)
	$11 = *(($6 + [184]))
	$0 = *(($6 + [180]))
	goto $label$18 
	
.LABEL $label$19
	$11 = [0]
	$0 = [0]
	
.LABEL $label$18
	*($6 + [196]) = $0
	*($6 + [192]) = $0
	*($6 + [200]) = $11
	*($6 + [208]) = ($6 + [192])
	*($6 + [216]) = $6
	CALL $27(($6 + [216]), ($6 + [208]))
	CALL $28(($6 + [192]), ($6 + [152]))
	$0 = *($6 + [192])
	CALL send_inline($0, (*($6 + [196]) - $0))
	$0 = *($6 + [192])
	if ( ($0 == 0) ){ goto $label$20 }
	*($6 + [196]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$20
	$0 = *($6 + [180])
	if ( ($0 == 0) ){ goto $label$21 }
	*(($6 + [184])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$21
	$0 = *($6 + [168])
	if ( ($0 == 0) ){ goto $label$22 }
	*(($6 + [172])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$22
	if ( (*($6 + [128]) & [1]) ){ goto $label$25 }
	if ( (*($6 + [116]) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($6 + [136])))
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($6 + [124])))
	$global$0 = ($6 + [224])
	return 
	
.LABEL $label$23
	$global$0 = ($6 + [224])
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	float_64 $18
	$2 = ($global$0 - [176])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $57(($2 + [120]), $0)
	$3 = ($0 + [208])
	$5 = *(($0 + [236]))
	$4 = *(($0 + [232]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8544])
	$8 = *($7 + [8])
	if ( ((int_64)$8 == (int_64)1) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [216])), (int_64)5455799419172362240, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $46($3, $6)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8544])
	
.LABEL $label$7
	$8 = *($7 + [8])
	if ( ((int_64)$8 == (int_64)1) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert((int_64)($8 == 0), [8349])
	$9 = *($7 + [16])
	*(($6 = ($2 + [112]))) = (int_64)1398362884
	*($2 + [104]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$8 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$8 = $10
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$8 = $10
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$12 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [9053])
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [8371]
	$11 = (int_64)0
	
.LOOP $label$13:
	$12 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$14 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$5 = ($5 + [-91])
	goto $label$15 
	
.LABEL $label$16
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$13 }
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [8371]
	$13 = (int_64)0
	
.LOOP $label$17:
	$12 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$18 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$5 = ($5 + [-91])
	goto $label$19 
	
.LABEL $label$20
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$17 }
	$8 = (int_64)7
	
.LOOP $label$21:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$21 }
	$14 = CALL db_lowerbound_i64($11, $13, (int_64)-4157658851551739904, $9)
	$15 = ($0 + [168])
	$16 = (($2 + [96]) + [8])
	$17 = [0]
	
.LOOP $label$22:
	if ( (int_64)($9 == 0) ){ goto $label$23 }
	$14 = CALL db_next_i64($14, ($2 + [88]))
	
.LABEL $label$23
	if ( ((int_32)$14 <= (int_32)[-2]) ){ goto $label$1 }
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$25 }
	CALL db_get_i64($14, ($2 + [96]), [24])
	$18 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_64 *($16)) / (float_64)(CASTING float_64)(int_64 *($2 + [120]))) * (float_64)(CASTING float_64)(int_64 *(($7 + [24])))) * (float_64)(float_64)1e6)
	if ( ((float_64)(float_64)|$18| < (float_64)(float_64)9223372036854775808) ){ goto $label$27 }
	$12 = (int_64)-9223372036854775808
	goto $label$26 
	
.LABEL $label$27
	$12 = (Rounds 0)($18)
	
.LABEL $label$26
	$9 = *($2 + [96])
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9004])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$8 = $10
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$8 = $10
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$32 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$5 = [0]
	
.LABEL $label$28
	CALL eosio_assert($5, [9053])
	$8 = *($2 + [96])
	*(($5 = (($2 + [16]) + [8]))) = (int_64)1397703946
	*($2 + [16]) = $12
	*($2 + [136]) = $8
	*($2 + [152]) = $15
	CALL $58(($2 + [168]), ($2 + [152]), ($2 + [136]))
	$6 = *($2 + [172])
	if ( ($6 == 0) ){ goto $label$34 }
	
.LOOP $label$35:
	if ( ((int_64)*($6 + [8]) != (int_64)*($2 + [136])) ){ goto $label$34 }
	if ( ((int_64)*(($6 + [24])) == (int_64)*($5)) ){ goto $label$33 }
	CALL $59(($2 + [168]))
	$6 = *($2 + [172])
	if ( $6 ){ goto $label$35 }
	
.LABEL $label$34
	$8 = *($0)
	*($2) = $0
	*(($2 + [8])) = ($2 + [16])
	*($2 + [4]) = ($2 + [136])
	CALL $60(($2 + [160]), $15, $8, $2)
	$17 = ($17 + [1])
	if ( ($17 <= [50]) ){ goto $label$22 }
	goto $label$24 
	
.LABEL $label$33
	$6 = *($2 + [172])
	$8 = *($0)
	*($2) = ($2 + [16])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8674])
	CALL $61(*($2 + [152]), $6, $8, $2)
	
.LABEL $label$25
	$17 = ($17 + [1])
	if ( ($17 <= [50]) ){ goto $label$22 }
	
.LABEL $label$24
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$2 }
	$10 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8674])
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8709])
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$11()), [8755])
	*($7 + [16]) = $9
	$6 = ($7 + [40])
	*($2 + [160]) = *($6)
	$8 = *($7)
	CALL eosio_assert([1], [8806])
	*($2 + [8]) = (($2 + [16]) + [48])
	*($2 + [4]) = ($2 + [16])
	*($2) = ($2 + [16])
	CALL $54($2, $7)
	CALL db_update_i64(*($7 + [52]), $10, ($2 + [16]), [48])
	$5 = ($0 + [224])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$36 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$36
	*($2 + [136]) = *($6)
	if ( (CALL $120(($2 + [160]), ($2 + [136]), [8]) == 0) ){ goto $label$37 }
	$5 = ($7 + [56])
	$6 = *($5)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$38 }
	$6 = CALL db_idx64_find_primary(*(($0 + [208])), *(($0 + [216])), (int_64)5455799419172362240, ($2 + [168]), $8)
	*($5) = $6
	
.LABEL $label$38
	CALL db_idx64_update($6, $10, ($2 + [136]))
	
.LABEL $label$37
	$8 = CALL current_time()
	*(($2 + [44])) = (int_64)0
	*(($2 + [60])) = (int_64)0
	*(($2 + [68])) = (int_64)0
	*($2 + [28]) = [0]
	*($2 + [32]) = [0]
	*($2 + [36 align=4]) = (int_64)0
	*($2 + [52 align=4]) = (int_64)0
	*($2 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	$4 = ($2 + [52])
	$10 = *($0)
	$8 = (int_64)6
	
.LOOP $label$39:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$39 }
	*($2 + [8]) = (int_64)3617214756542218240
	*($2) = $10
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [8384]
	$11 = (int_64)0
	
.LOOP $label$40:
	$12 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$41 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$5 = ($5 + [-91])
	goto $label$42 
	
.LABEL $label$43
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$41
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$40 }
	*($2 + [136]) = $11
	*($2 + [168]) = $1
	CALL $56($4, $2, $0, ($2 + [136]), ($2 + [168]))
	*(($2 + [36])) = [0]
	$8 = CALL current_time()
	*($2 + [8]) = (int_64)0
	*($2) = ((int_64)((uint_64)$8 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = *($0)
	CALL $49(($2 + [136]), ($2 + [16]))
	$6 = *($2 + [136])
	CALL send_deferred($2, $8, $6, (*($2 + [140]) - $6), [1])
	$6 = *($2 + [136])
	if ( ($6 == 0) ){ goto $label$44 }
	*($2 + [140]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$44
	CALL $50(($2 + [16]))
	
.LABEL $label$2
	$global$0 = ($2 + [176])
	return 
	
.LABEL $label$1
	$10 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8674])
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8709])
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$11()), [8755])
	*($7 + [8]) = (int_64)1
	*($7 + [16]) = $9
	$6 = ($7 + [40])
	*($2 + [160]) = *($6)
	$8 = *($7)
	CALL eosio_assert([1], [8806])
	*($2 + [8]) = (($2 + [16]) + [48])
	*($2 + [4]) = ($2 + [16])
	*($2) = ($2 + [16])
	CALL $54($2, $7)
	CALL db_update_i64(*($7 + [52]), $10, ($2 + [16]), [48])
	$5 = ($0 + [224])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$45 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$45
	*($2 + [136]) = *($6)
	if ( (CALL $120(($2 + [160]), ($2 + [136]), [8]) == 0) ){ goto $label$46 }
	$5 = ($7 + [56])
	$6 = *($5)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$47 }
	$6 = CALL db_idx64_find_primary(*(($0 + [208])), *(($0 + [216])), (int_64)5455799419172362240, ($2 + [168]), $8)
	*($5) = $6
	
.LABEL $label$47
	CALL db_idx64_update($6, $10, ($2 + [136]))
	
.LABEL $label$46
	*($2 + [16]) = (int_64)0
	CALL $52($0, ($2 + [16]))
	$global$0 = ($2 + [176])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_32 $15, int_32 $16)
{
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_64 $23
	int_64 $24
	$17 = ($global$0 - [656])
	$global$0 = $17
	CALL require_auth(*($0))
	$18 = (int_64)0
	$19 = (int_64)59
	$0 = [8513]
	$20 = (int_64)0
	
.LOOP $label$1:
	$21 = (int_64)0
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$2 }
	$22 = *($0)
	if ( ((uint_32)(($22 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$22 = ($22 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$22 = ( ($22 + [-48]) ? [0] : ((($22 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$21 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $22) & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)4294967291)
	if ( ((int_64)$19 != (int_64)55834574842) ){ goto $label$1 }
	$18 = (int_64)5
	
.LOOP $label$5:
	$18 = ((int_64)$18 + (int_64)1)
	if ( ((int_64)$18 != (int_64)13) ){ goto $label$5 }
	$18 = (int_64)0
	$19 = (int_64)59
	$0 = [8513]
	$23 = (int_64)0
	
.LOOP $label$6:
	$21 = (int_64)0
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$7 }
	$22 = *($0)
	if ( ((uint_32)(($22 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$22 = ($22 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$22 = ( ($22 + [-48]) ? [0] : ((($22 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$21 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $22) & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$7
	$0 = ($0 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$23 = ((int_64)$21 | (int_64)$23)
	$19 = ((int_64)$19 + (int_64)4294967291)
	if ( ((int_64)$19 != (int_64)55834574842) ){ goto $label$6 }
	$18 = (int_64)0
	$21 = (int_64)59
	$0 = [8277]
	$24 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$18 > (uint_64)(int_64)9) ){ goto $label$15 }
	$22 = *($0)
	if ( ((uint_32)(($22 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$22 = ($22 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$19 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$22 = ( ($22 + [-48]) ? [0] : ((($22 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $22) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$11
	$0 = ($0 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$24 = ((int_64)$19 | (int_64)$24)
	$21 = ((int_64)$21 + (int_64)4294967291)
	if ( ((int_64)$21 != (int_64)55834574842) ){ goto $label$10 }
	*(($17 + [24])) = *(($2 + [8]))
	*(($17 + [32])) = *(($2 + [16]))
	*(($17 + [40])) = *(($2 + [24]))
	*($17) = $1
	*($17 + [16]) = *($2)
	CALL memcpy(($17 + [48]), $3, [66])
	CALL $113(($17 + [116]), $4)
	*(($17 + [152])) = *(($5 + [24]))
	*(($17 + [144])) = *(($5 + [16]))
	*(($17 + [136])) = *(($5 + [8]))
	*($17 + [128]) = *($5)
	CALL memcpy(($17 + [160]), $6, [66])
	CALL $113(($17 + [228]), $7)
	*(($17 + [264])) = *(($8 + [24]))
	*(($17 + [256])) = *(($8 + [16]))
	*(($17 + [248])) = *(($8 + [8]))
	*($17 + [240]) = *($8)
	CALL memcpy(($17 + [272]), $9, [66])
	CALL $113(($17 + [340]), $10)
	*(($17 + [376])) = *(($11 + [24]))
	*(($17 + [368])) = *(($11 + [16]))
	*(($17 + [360])) = *(($11 + [8]))
	*($17 + [352]) = *($11)
	CALL memcpy(($17 + [384]), $12, [66])
	CALL $113(($17 + [452]), $13)
	*(($17 + [488])) = *(($14 + [24]))
	*(($17 + [480])) = *(($14 + [16]))
	*(($17 + [472])) = *(($14 + [8]))
	*($17 + [464]) = *($14)
	CALL memcpy(($17 + [496]), $15, [66])
	CALL $113(($17 + [564]), $16)
	*($17 + [592]) = $24
	*($17 + [584]) = $23
	*(($0 = CALL _Znwj([16]))) = $20
	*($0 + [8]) = (int_64)3631283935532548096
	$22 = [0]
	*(($17 + [620])) = [0]
	$2 = ($0 + [16])
	*((($17 + [584]) + [24])) = $2
	*(($17 + [604])) = $2
	*($17 + [600]) = $0
	*($17 + [612 align=4]) = (int_64)0
	*($17 + [624]) = [0]
	*($17 + [632]) = ($17 + [624])
	*($17 + [640]) = $17
	CALL $31(($17 + [640]), ($17 + [632]))
	$0 = *($17 + [624])
	if ( ($0 == 0) ){ goto $label$17 }
	$2 = ($17 + [612])
	CALL $26($2, $0)
	$22 = *((($17 + [584]) + [32]))
	$0 = *($2)
	goto $label$16 
	
.LABEL $label$17
	$0 = [0]
	
.LABEL $label$16
	*($17 + [644]) = $0
	*($17 + [640]) = $0
	*($17 + [648]) = $22
	*($17 + [624]) = ($17 + [640])
	*($17 + [632]) = $17
	CALL $32(($17 + [632]), ($17 + [624]))
	CALL $28(($17 + [640]), ($17 + [584]))
	$0 = *($17 + [640])
	CALL send_inline($0, (*($17 + [644]) - $0))
	$0 = *($17 + [640])
	if ( ($0 == 0) ){ goto $label$18 }
	*($17 + [644]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$18
	$0 = *($17 + [612])
	if ( ($0 == 0) ){ goto $label$19 }
	*(($17 + [616])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$19
	$0 = *($17 + [600])
	if ( ($0 == 0) ){ goto $label$20 }
	*(($17 + [604])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$20
	if ( (*($17 + [564]) & [1]) ){ goto $label$29 }
	if ( (*($17 + [452]) & [1]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL _ZdlPv(*(($17 + [572])))
	if ( ((*($17 + [452]) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*(($17 + [460])))
	$0 = [1]
	if ( ((*($17 + [340]) & [1]) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$0 = [1]
	if ( (*($17 + [340]) & [1]) ){ goto $label$25 }
	
.LABEL $label$26
	if ( (*($17 + [228]) & $0) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($17 + [348])))
	if ( ((*($17 + [228]) & $0) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($17 + [236])))
	if ( ((*($17 + [116]) & [1]) == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	if ( (*($17 + [116]) & [1]) ){ goto $label$21 }
	
.LABEL $label$22
	$global$0 = ($17 + [656])
	return 
	
.LABEL $label$21
	CALL _ZdlPv(*(($17 + [124])))
	$global$0 = ($17 + [656])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [624])
	$global$0 = $2
	*(($3 = $2) + [588]) = $0
	*($3 + [576]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $122($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3) = (int_64)0
	CALL memset(($3 + [48]), [0], [66])
	*(($3 + [124])) = [0]
	*(($3 + [152])) = (int_64)0
	*(($3 + [144])) = (int_64)0
	*(($3 + [136])) = (int_64)0
	*($3 + [116 align=4]) = (int_64)0
	*($3 + [128]) = (int_64)0
	CALL memset(($3 + [160]), [0], [66])
	*(($3 + [236])) = [0]
	*(($3 + [264])) = (int_64)0
	*(($3 + [256])) = (int_64)0
	*(($3 + [248])) = (int_64)0
	*($3 + [228 align=4]) = (int_64)0
	*($3 + [240]) = (int_64)0
	CALL memset(($3 + [272]), [0], [66])
	*(($3 + [348])) = [0]
	*(($3 + [376])) = (int_64)0
	*(($3 + [368])) = (int_64)0
	*(($3 + [360])) = (int_64)0
	*($3 + [340 align=4]) = (int_64)0
	*($3 + [352]) = (int_64)0
	CALL memset(($3 + [384]), [0], [66])
	*(($3 + [460])) = [0]
	*(($3 + [488])) = (int_64)0
	*(($3 + [480])) = (int_64)0
	*(($3 + [472])) = (int_64)0
	*($3 + [452 align=4]) = (int_64)0
	*($3 + [464]) = (int_64)0
	CALL memset(($3 + [496]), [0], [66])
	*(($3 + [572])) = [0]
	*($3 + [564 align=4]) = (int_64)0
	*($3 + [596]) = $1
	*($3 + [592]) = $1
	*($3 + [600]) = ($1 + $0)
	*($3 + [608]) = ($3 + [592])
	*($3 + [616]) = $3
	CALL $29(($3 + [616]), ($3 + [608]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $125($1)
	
.LABEL $label$4
	*($3 + [596]) = ($3 + [576])
	*($3 + [592]) = ($3 + [588])
	CALL $30(($3 + [592]), $3)
	if ( (*($3 + [564]) & [1]) ){ goto $label$13 }
	if ( (*($3 + [452]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [572])))
	if ( ((*($3 + [452]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [460])))
	$1 = [1]
	if ( ((*($3 + [340]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($3 + [340]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [228]) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [348])))
	if ( ((*($3 + [228]) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [236])))
	$1 = [1]
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($3 + [116]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($3 + [624])
	return $1
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [124])))
	$global$0 = ($3 + [624])
	return $1
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $88(*($1), ($0 + [32]))
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [8618])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [8618])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [248])
	$5 = *(($0 + [276]))
	$4 = *(($0 + [272]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [8544])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [256])), (int_64)-5920782797423585936, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $65($3, $6)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [8544])
	
.LABEL $label$2
	CALL eosio_assert([1], [9435])
	CALL eosio_assert([1], [9405])
	$6 = CALL db_next_i64(*($7 + [12]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $65($3, $6)
	
.LABEL $label$6
	CALL $66($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3020380869172259840, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [8544])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $76($7, CALL $fimport$13(*($7), *($7 + [8]), (int_64)-3020380869172259840, $6))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [8544])
	
.LABEL $label$2
	*(($4 + [40])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9405])
	$2 = *($0 + [4])
	$3 = *($2 + [40])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3020380869172259840, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [40]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [8544])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $76($6, CALL $fimport$13(*($6), *($6 + [8]), (int_64)-3020380869172259840, $5))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [8544])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [40])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert([1], [9004])
	$3 = [0]
	$4 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9053])
	$4 = (int_64)0
	$8 = (int_64)59
	$3 = [8532]
	$9 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$11 }
	$6 = *($3)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$6 = ($6 + [-91])
	goto $label$9 
	
.LABEL $label$11
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$7
	$3 = ($3 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$9 = ((int_64)$5 | (int_64)$9)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$3 = [9227]
	$10 = (int_64)0
	
.LOOP $label$12:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$13 }
	$6 = *($3)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [-91])
	goto $label$14 
	
.LABEL $label$15
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$13
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$12 }
	$4 = (int_64)0
	$8 = (int_64)59
	$3 = [9240]
	$11 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$21 }
	$6 = *($3)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$6 = ($6 + [-91])
	goto $label$19 
	
.LABEL $label$21
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$17
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$5 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$16 }
	$12 = CALL db_find_i64($9, $10, $11, (int_64)5459781)
	CALL eosio_assert(((int_32)uint_32($12 >> [31]) ^ (int_32)[1]), [9249])
	*($2 + [8]) = (int_64)1398362884
	*($2) = (int_64)0
	CALL eosio_assert([1], [9004])
	$4 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$4 = $5
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$26 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$6 = [0]
	
.LABEL $label$22
	CALL eosio_assert($6, [9053])
	CALL db_get_i64($12, $2, [16])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	$global$0 = ($2 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8371]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	$3 = (int_64)5
	
.LOOP $label$5:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$5 }
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8371]
	$9 = (int_64)0
	
.LOOP $label$6:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$7 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$8 = ($8 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$7
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$6 }
	$3 = (int_64)5
	
.LOOP $label$10:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$10 }
	*($2 + [8]) = $9
	*($2 + [16]) = (int_64)-6217917475468607488
	*($2) = *($1)
	*(($5 = CALL _Znwj([16]))) = $6
	*($5 + [8]) = (int_64)3631283935532548096
	*(($2 + [44])) = [0]
	$8 = ($5 + [16])
	*(($2 + [32])) = $8
	*(($2 + [28])) = $8
	*($2 + [24]) = $5
	*($2 + [36 align=4]) = (int_64)0
	CALL $26(($2 + [36]), [8])
	$5 = *($2 + [36])
	CALL eosio_assert(((int_32)(*(($2 + [40])) - $5) > (int_32)[7]), [8526])
	CALL memcpy($5, $2, [8])
	CALL $28(($2 + [48]), ($2 + [8]))
	$5 = *($2 + [48])
	CALL send_inline($5, (*($2 + [52]) - $5))
	$5 = *($2 + [48])
	if ( ($5 == 0) ){ goto $label$11 }
	*($2 + [52]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$5 = *($2 + [36])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($2 + [40])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$13 }
	*(($2 + [28])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$global$0 = ($2 + [64])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [144])
	$global$0 = $2
	*(($2 + [104])) = [0]
	*($2 + [96]) = (int_64)0
	$3 = CALL $121([9326])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [96]) = ($3 << [1])
	$4 = (($2 + [96]) | [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [96]) = ($5 | [1])
	*($2 + [104]) = $4
	*($2 + [100]) = $3
	
.LABEL $label$4
	CALL memcpy($4, [9326], $3)
	
.LABEL $label$3
	*(($4 + $3)) = [0]
	$6 = (int_64)0
	$7 = (int_64)59
	$3 = [9227]
	$8 = (int_64)0
	
.LOOP $label$6:
	$9 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$7 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$4 = ($4 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$7
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$6 }
	$6 = (int_64)6
	
.LOOP $label$10:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$10 }
	$6 = (int_64)0
	$9 = (int_64)59
	$3 = [8532]
	$10 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$16 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$4 = ($4 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$7 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$12
	$3 = ($3 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$10 = ((int_64)$7 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$11 }
	$6 = (int_64)0
	$9 = (int_64)59
	$3 = [9359]
	$11 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$4 = ($4 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$18
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$7 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$17 }
	$6 = (int_64)0
	$7 = (int_64)59
	$3 = [9227]
	$12 = (int_64)0
	
.LOOP $label$23:
	$9 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$24 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$4 = ($4 + [-91])
	goto $label$25 
	
.LABEL $label$26
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$24
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$23 }
	$6 = (int_64)0
	$7 = (int_64)59
	$3 = [9368]
	$13 = (int_64)0
	
.LOOP $label$27:
	$9 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$28 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$4 = ($4 + [-91])
	goto $label$29 
	
.LABEL $label$30
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$28
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$13 = ((int_64)$9 | (int_64)$13)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$27 }
	*((($2 + [8]) + [24])) = *(($1 + [8]))
	*($2 + [16]) = $13
	*($2 + [8]) = $12
	*($2 + [24]) = *($1)
	$4 = CALL $113((($2 + [8]) + [32]), ($2 + [96]))
	*($2 + [64]) = $11
	*($2 + [56]) = $10
	*(($3 = CALL _Znwj([16]))) = $8
	*($3 + [8]) = (int_64)3617214756542218240
	*((($2 + [56]) + [36])) = [0]
	$1 = ($3 + [16])
	*((($2 + [56]) + [24])) = $1
	*(($2 + [76])) = $1
	*($2 + [72]) = $3
	*($2 + [84 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($2 + [8]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$6 = (CASTING uint_64)(uint_32 $4)
	$4 = ($2 + [84])
	
.LOOP $label$31:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$31 }
	if ( ($3 == 0) ){ goto $label$33 }
	CALL $26($4, $3)
	$4 = *(($2 + [88]))
	$3 = *(($2 + [84]))
	goto $label$32 
	
.LABEL $label$33
	$4 = [0]
	$3 = [0]
	
.LABEL $label$32
	*($2 + [132]) = $3
	*($2 + [128]) = $3
	*($2 + [136]) = $4
	*($2 + [112]) = ($2 + [128])
	*($2 + [120]) = ($2 + [8])
	CALL $75(($2 + [120]), ($2 + [112]))
	CALL $28(($2 + [128]), ($2 + [56]))
	$3 = *($2 + [128])
	CALL send_inline($3, (*($2 + [132]) - $3))
	$3 = *($2 + [128])
	if ( ($3 == 0) ){ goto $label$34 }
	*($2 + [132]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$34
	$3 = *($2 + [84])
	if ( ($3 == 0) ){ goto $label$35 }
	*(($2 + [88])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$35
	$3 = *($2 + [72])
	if ( ($3 == 0) ){ goto $label$36 }
	*(($2 + [76])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$36
	if ( (*($2 + [40]) & [1]) ){ goto $label$38 }
	if ( (*($2 + [96]) & [1]) ){ goto $label$37 }
	goto $label$1 
	
.LABEL $label$38
	CALL _ZdlPv(*(($2 + [48])))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$37
	CALL _ZdlPv(*($2 + [104]))
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $112(($2 + [96]))
	
.LABEL $label$1
	$global$0 = ($2 + [144])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [192])
	$global$0 = $2
	$3 = CALL $113(($2 + [80]), $1)
	*(($4 = (($2 + [64]) + [8]))) = *(($1 + [40]))
	*(($5 = (($2 + [48]) + [8]))) = *(($1 + [56]))
	*($2 + [64]) = *($1 + [32])
	*($2 + [48]) = *($1 + [48])
	$6 = *($1 + [24])
	$7 = *($1 + [16])
	$8 = *($1 + [64])
	$1 = CALL $113(($2 + [32]), ($1 + [72]))
	*((($2 + [112]) + [8])) = *($5)
	*((($2 + [96]) + [8])) = *($4)
	*($2 + [112]) = *($2 + [48])
	*($2 + [96]) = *($2 + [64])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$4 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($4) + $0))
	
.LABEL $label$1
	$5 = CALL $113(($2 + [176]), $3)
	*(($9 = (($2 + [160]) + [8]))) = *((($2 + [96]) + [8]))
	*(($10 = (($2 + [144]) + [8]))) = *((($2 + [112]) + [8]))
	*($2 + [160]) = *($2 + [96])
	*($2 + [144]) = *($2 + [112])
	$11 = CALL $113(($2 + [128]), $1)
	*((($2 + [16]) + [8])) = *($9)
	*(($2 + [8])) = *($10)
	*($2 + [16]) = *($2 + [160])
	*($2) = *($2 + [144])
	CALL void $4((int_32 $5), (int_32 $7), (int_64 $6), (int_64 ($2 + [16])), (int_32 $2), (int_32 $8), (int_64 $11), (int_32 $0))
	if ( (*($2 + [128]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [176]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($2 + [176]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [192])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $26(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [8526])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [8]) = (int_64)1480674564
	*($0) = (int_64)0
	CALL eosio_assert([1], [9004])
	$3 = [0]
	$4 = (int_64)5783885
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9053])
	$4 = (int_64)0
	$5 = (int_64)59
	$3 = [8371]
	$8 = (int_64)0
	
.LOOP $label$6:
	$9 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$7 }
	$6 = *($3)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$6 = ($6 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$7
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$3 = [8371]
	$10 = (int_64)0
	
.LOOP $label$10:
	$9 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$11 }
	$6 = *($3)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	goto $label$12 
	
.LABEL $label$13
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$11
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$10 }
	$4 = (int_64)5
	
.LOOP $label$14:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$14 }
	$3 = CALL db_find_i64($8, $10, (int_64)-4157495357179166720, (int_64)1)
	$6 = CALL $74(($2 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	CALL db_get_i64($3, ($2 + [8]), [40])
	*(($0 + [8])) = *(($6 + [16]))
	*($0) = *($6 + [8])
	
.LABEL $label$15
	$global$0 = ($2 + [48])
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $120(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $115($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = $1
	if ( ((int_64)*($2 + [8]) != (int_64)1397703940) ){ goto $label$2 }
	$4 = (int_64)0
	*($3 + [32]) = (int_64)0
	$5 = (int_64)59
	$6 = [8532]
	$7 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$8 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$8 = ($8 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$4
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	*($3 + [32]) = $7
	$10 = ($0 + [48])
	$8 = *(($0 + [76]))
	$11 = *(($0 + [72]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$12:
	$6 = ($8 + [-24])
	$12 = *($6)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$11 }
	$8 = $6
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$10), [8544])
	goto $label$9 
	
.LABEL $label$10
	$6 = CALL db_find_i64(*($10), *(($0 + [56])), (int_64)-2618280233362522112, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $67($10, $6)
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$10), [8544])
	
.LABEL $label$9
	*($3 + [28]) = $12
	*($3 + [24]) = $10
	$4 = *($0)
	*($3 + [12]) = $2
	*($3 + [8]) = ($3 + [24])
	*($3 + [16]) = ($3 + [32])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [8674])
	CALL $68($10, $12, $4, ($3 + [8]))
	
.LABEL $label$2
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	*($3 + [28]) = [0]
	*($3 + [24]) = $10
	$4 = *($0)
	*($3 + [12]) = $2
	*($3 + [8]) = ($3 + [40])
	*($3 + [16]) = ($3 + [32])
	CALL $69($3, $10, $4, ($3 + [8]))
	$global$0 = ($3 + [48])
}

void .FUNC $112 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $125($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $118 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $119 (int_32 $0)
{
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8618])
	CALL memcpy(($4 + [16]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($4 + [49])
	*($2 + [8]) = ($4 + [48])
	*($2 + [16]) = ($4 + [50])
	*($2 + [20]) = ($4 + [51])
	*($2 + [24]) = ($4 + [52])
	*($2 + [28]) = ($4 + [53])
	*($2 + [32]) = ($4 + [54])
	*($2 + [36]) = ($4 + [55])
	*($2 + [40]) = ($4 + [56])
	*($2 + [44]) = ($4 + [57])
	*($2 + [48]) = ($4 + [58])
	*($2 + [52]) = ($4 + [59])
	*($2 + [56]) = ($4 + [60])
	*($2 + [60]) = ($4 + [61])
	*($2 + [64]) = ($4 + [62])
	*($2 + [68]) = ($4 + [63])
	*($2 + [72]) = ($4 + [64])
	*($2 + [76]) = ($4 + [65])
	*($2 + [80]) = ($4 + [66])
	*($2 + [88]) = ($4 + [68])
	*($2 + [84]) = ($4 + [67])
	*($2 + [92]) = ($4 + [69])
	*($2 + [96]) = ($4 + [70])
	*($2 + [100]) = ($4 + [71])
	*($2 + [104]) = ($4 + [72])
	*($2 + [108]) = ($4 + [73])
	*($2 + [112]) = ($4 + [74])
	*($2 + [116]) = ($4 + [75])
	*($2 + [120]) = ($4 + [76])
	*($2 + [124]) = ($4 + [77])
	*($2 + [128]) = ($4 + [78])
	*($2 + [132]) = ($4 + [79])
	*($2 + [136]) = ($4 + [80])
	*($2 + [140]) = ($4 + [81])
	*($2 + [144]) = ($4 + [82])
	*($2 + [148]) = ($4 + [83])
	*($2 + [152]) = ($4 + [84])
	*($2 + [156]) = ($4 + [85])
	*($2 + [164]) = ($4 + [87])
	*($2 + [160]) = ($4 + [86])
	*($2 + [168]) = ($4 + [88])
	*($2 + [172]) = ($4 + [89])
	*($2 + [176]) = ($4 + [90])
	*($2 + [180]) = ($4 + [91])
	*($2 + [184]) = ($4 + [92])
	*($2 + [188]) = ($4 + [93])
	*($2 + [192]) = ($4 + [94])
	*($2 + [196]) = ($4 + [95])
	*($2 + [200]) = ($4 + [96])
	*($2 + [204]) = ($4 + [97])
	*($2 + [208]) = ($4 + [98])
	*($2 + [212]) = ($4 + [99])
	*($2 + [216]) = ($4 + [100])
	*($2 + [220]) = ($4 + [101])
	*($2 + [224]) = ($4 + [102])
	*($2 + [228]) = ($4 + [103])
	*($2 + [232]) = ($4 + [104])
	*($2 + [240]) = ($4 + [106])
	*($2 + [236]) = ($4 + [105])
	*($2 + [244]) = ($4 + [107])
	*($2 + [248]) = ($4 + [108])
	*($2 + [252]) = ($4 + [109])
	*($2 + [256]) = ($4 + [110])
	*($2 + [260]) = ($4 + [111])
	*($2 + [264]) = ($4 + [112])
	*($2 + [268]) = ($4 + [113])
	CALL $97(($2 + [8]), $2)
	CALL $85(*($1), ($4 + [116]))
	*($2 + [8]) = $4
	CALL $98(($2 + [8]), $1)
	$global$0 = ($2 + [272])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $26($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8526])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8526])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $78(CALL $77($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($3 + [273])
	*($2 + [8]) = ($3 + [272])
	*($2 + [16]) = ($3 + [274])
	*($2 + [20]) = ($3 + [275])
	*($2 + [24]) = ($3 + [276])
	*($2 + [28]) = ($3 + [277])
	*($2 + [32]) = ($3 + [278])
	*($2 + [36]) = ($3 + [279])
	*($2 + [40]) = ($3 + [280])
	*($2 + [44]) = ($3 + [281])
	*($2 + [48]) = ($3 + [282])
	*($2 + [52]) = ($3 + [283])
	*($2 + [56]) = ($3 + [284])
	*($2 + [60]) = ($3 + [285])
	*($2 + [64]) = ($3 + [286])
	*($2 + [68]) = ($3 + [287])
	*($2 + [72]) = ($3 + [288])
	*($2 + [76]) = ($3 + [289])
	*($2 + [80]) = ($3 + [290])
	*($2 + [88]) = ($3 + [292])
	*($2 + [84]) = ($3 + [291])
	*($2 + [92]) = ($3 + [293])
	*($2 + [96]) = ($3 + [294])
	*($2 + [100]) = ($3 + [295])
	*($2 + [104]) = ($3 + [296])
	*($2 + [108]) = ($3 + [297])
	*($2 + [112]) = ($3 + [298])
	*($2 + [116]) = ($3 + [299])
	*($2 + [120]) = ($3 + [300])
	*($2 + [124]) = ($3 + [301])
	*($2 + [128]) = ($3 + [302])
	*($2 + [132]) = ($3 + [303])
	*($2 + [136]) = ($3 + [304])
	*($2 + [140]) = ($3 + [305])
	*($2 + [144]) = ($3 + [306])
	*($2 + [148]) = ($3 + [307])
	*($2 + [152]) = ($3 + [308])
	*($2 + [156]) = ($3 + [309])
	*($2 + [164]) = ($3 + [311])
	*($2 + [160]) = ($3 + [310])
	*($2 + [168]) = ($3 + [312])
	*($2 + [172]) = ($3 + [313])
	*($2 + [176]) = ($3 + [314])
	*($2 + [180]) = ($3 + [315])
	*($2 + [184]) = ($3 + [316])
	*($2 + [188]) = ($3 + [317])
	*($2 + [192]) = ($3 + [318])
	*($2 + [196]) = ($3 + [319])
	*($2 + [200]) = ($3 + [320])
	*($2 + [204]) = ($3 + [321])
	*($2 + [208]) = ($3 + [322])
	*($2 + [212]) = ($3 + [323])
	*($2 + [216]) = ($3 + [324])
	*($2 + [220]) = ($3 + [325])
	*($2 + [224]) = ($3 + [326])
	*($2 + [228]) = ($3 + [327])
	*($2 + [232]) = ($3 + [328])
	*($2 + [240]) = ($3 + [330])
	*($2 + [236]) = ($3 + [329])
	*($2 + [244]) = ($3 + [331])
	*($2 + [248]) = ($3 + [332])
	*($2 + [252]) = ($3 + [333])
	*($2 + [256]) = ($3 + [334])
	*($2 + [260]) = ($3 + [335])
	*($2 + [264]) = ($3 + [336])
	*($2 + [268]) = ($3 + [337])
	CALL $103(($2 + [8]), $2)
	$3 = *($0)
	CALL $88(*($1), ($3 + [340]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [8526])
	CALL memcpy(*($0 + [4]), ($3 + [352]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [385])
	*($2 + [8]) = ($3 + [384])
	*($2 + [16]) = ($3 + [386])
	*($2 + [20]) = ($3 + [387])
	*($2 + [24]) = ($3 + [388])
	*($2 + [28]) = ($3 + [389])
	*($2 + [32]) = ($3 + [390])
	*($2 + [36]) = ($3 + [391])
	*($2 + [40]) = ($3 + [392])
	*($2 + [44]) = ($3 + [393])
	*($2 + [48]) = ($3 + [394])
	*($2 + [52]) = ($3 + [395])
	*($2 + [56]) = ($3 + [396])
	*($2 + [60]) = ($3 + [397])
	*($2 + [64]) = ($3 + [398])
	*($2 + [68]) = ($3 + [399])
	*($2 + [72]) = ($3 + [400])
	*($2 + [76]) = ($3 + [401])
	*($2 + [80]) = ($3 + [402])
	*($2 + [88]) = ($3 + [404])
	*($2 + [84]) = ($3 + [403])
	*($2 + [92]) = ($3 + [405])
	*($2 + [96]) = ($3 + [406])
	*($2 + [100]) = ($3 + [407])
	*($2 + [104]) = ($3 + [408])
	*($2 + [108]) = ($3 + [409])
	*($2 + [112]) = ($3 + [410])
	*($2 + [116]) = ($3 + [411])
	*($2 + [120]) = ($3 + [412])
	*($2 + [124]) = ($3 + [413])
	*($2 + [128]) = ($3 + [414])
	*($2 + [132]) = ($3 + [415])
	*($2 + [136]) = ($3 + [416])
	*($2 + [140]) = ($3 + [417])
	*($2 + [144]) = ($3 + [418])
	*($2 + [148]) = ($3 + [419])
	*($2 + [152]) = ($3 + [420])
	*($2 + [156]) = ($3 + [421])
	*($2 + [164]) = ($3 + [423])
	*($2 + [160]) = ($3 + [422])
	*($2 + [168]) = ($3 + [424])
	*($2 + [172]) = ($3 + [425])
	*($2 + [176]) = ($3 + [426])
	*($2 + [180]) = ($3 + [427])
	*($2 + [184]) = ($3 + [428])
	*($2 + [188]) = ($3 + [429])
	*($2 + [192]) = ($3 + [430])
	*($2 + [196]) = ($3 + [431])
	*($2 + [200]) = ($3 + [432])
	*($2 + [204]) = ($3 + [433])
	*($2 + [208]) = ($3 + [434])
	*($2 + [212]) = ($3 + [435])
	*($2 + [216]) = ($3 + [436])
	*($2 + [220]) = ($3 + [437])
	*($2 + [224]) = ($3 + [438])
	*($2 + [228]) = ($3 + [439])
	*($2 + [232]) = ($3 + [440])
	*($2 + [240]) = ($3 + [442])
	*($2 + [236]) = ($3 + [441])
	*($2 + [244]) = ($3 + [443])
	*($2 + [248]) = ($3 + [444])
	*($2 + [252]) = ($3 + [445])
	*($2 + [256]) = ($3 + [446])
	*($2 + [260]) = ($3 + [447])
	*($2 + [264]) = ($3 + [448])
	*($2 + [268]) = ($3 + [449])
	CALL $103(($2 + [8]), $2)
	CALL $88(*($1), ($3 + [452]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [8526])
	CALL memcpy(*($0 + [4]), ($3 + [464]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [497])
	*($2 + [8]) = ($3 + [496])
	*($2 + [16]) = ($3 + [498])
	*($2 + [20]) = ($3 + [499])
	*($2 + [24]) = ($3 + [500])
	*($2 + [28]) = ($3 + [501])
	*($2 + [32]) = ($3 + [502])
	*($2 + [36]) = ($3 + [503])
	*($2 + [40]) = ($3 + [504])
	*($2 + [44]) = ($3 + [505])
	*($2 + [48]) = ($3 + [506])
	*($2 + [52]) = ($3 + [507])
	*($2 + [56]) = ($3 + [508])
	*($2 + [60]) = ($3 + [509])
	*($2 + [64]) = ($3 + [510])
	*($2 + [68]) = ($3 + [511])
	*($2 + [72]) = ($3 + [512])
	*($2 + [76]) = ($3 + [513])
	*($2 + [80]) = ($3 + [514])
	*($2 + [88]) = ($3 + [516])
	*($2 + [84]) = ($3 + [515])
	*($2 + [92]) = ($3 + [517])
	*($2 + [96]) = ($3 + [518])
	*($2 + [100]) = ($3 + [519])
	*($2 + [104]) = ($3 + [520])
	*($2 + [108]) = ($3 + [521])
	*($2 + [112]) = ($3 + [522])
	*($2 + [116]) = ($3 + [523])
	*($2 + [120]) = ($3 + [524])
	*($2 + [124]) = ($3 + [525])
	*($2 + [128]) = ($3 + [526])
	*($2 + [132]) = ($3 + [527])
	*($2 + [136]) = ($3 + [528])
	*($2 + [140]) = ($3 + [529])
	*($2 + [144]) = ($3 + [530])
	*($2 + [148]) = ($3 + [531])
	*($2 + [152]) = ($3 + [532])
	*($2 + [156]) = ($3 + [533])
	*($2 + [164]) = ($3 + [535])
	*($2 + [160]) = ($3 + [534])
	*($2 + [168]) = ($3 + [536])
	*($2 + [172]) = ($3 + [537])
	*($2 + [176]) = ($3 + [538])
	*($2 + [180]) = ($3 + [539])
	*($2 + [184]) = ($3 + [540])
	*($2 + [188]) = ($3 + [541])
	*($2 + [192]) = ($3 + [542])
	*($2 + [196]) = ($3 + [543])
	*($2 + [200]) = ($3 + [544])
	*($2 + [204]) = ($3 + [545])
	*($2 + [208]) = ($3 + [546])
	*($2 + [212]) = ($3 + [547])
	*($2 + [216]) = ($3 + [548])
	*($2 + [220]) = ($3 + [549])
	*($2 + [224]) = ($3 + [550])
	*($2 + [228]) = ($3 + [551])
	*($2 + [232]) = ($3 + [552])
	*($2 + [240]) = ($3 + [554])
	*($2 + [236]) = ($3 + [553])
	*($2 + [244]) = ($3 + [555])
	*($2 + [248]) = ($3 + [556])
	*($2 + [252]) = ($3 + [557])
	*($2 + [256]) = ($3 + [558])
	*($2 + [260]) = ($3 + [559])
	*($2 + [264]) = ($3 + [560])
	*($2 + [268]) = ($3 + [561])
	CALL $103(($2 + [8]), $2)
	CALL $88(*($1), ($3 + [564]))
	$global$0 = ($2 + [272])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [8526])
	CALL memcpy(*($4 + [4]), ($3 + [128]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($4 + [161])
	*($2 + [8]) = ($4 + [160])
	*($2 + [16]) = ($4 + [162])
	*($2 + [20]) = ($4 + [163])
	*($2 + [24]) = ($4 + [164])
	*($2 + [28]) = ($4 + [165])
	*($2 + [32]) = ($4 + [166])
	*($2 + [36]) = ($4 + [167])
	*($2 + [40]) = ($4 + [168])
	*($2 + [44]) = ($4 + [169])
	*($2 + [48]) = ($4 + [170])
	*($2 + [52]) = ($4 + [171])
	*($2 + [56]) = ($4 + [172])
	*($2 + [60]) = ($4 + [173])
	*($2 + [64]) = ($4 + [174])
	*($2 + [68]) = ($4 + [175])
	*($2 + [72]) = ($4 + [176])
	*($2 + [76]) = ($4 + [177])
	*($2 + [80]) = ($4 + [178])
	*($2 + [88]) = ($4 + [180])
	*($2 + [84]) = ($4 + [179])
	*($2 + [92]) = ($4 + [181])
	*($2 + [96]) = ($4 + [182])
	*($2 + [100]) = ($4 + [183])
	*($2 + [104]) = ($4 + [184])
	*($2 + [108]) = ($4 + [185])
	*($2 + [112]) = ($4 + [186])
	*($2 + [116]) = ($4 + [187])
	*($2 + [120]) = ($4 + [188])
	*($2 + [124]) = ($4 + [189])
	*($2 + [128]) = ($4 + [190])
	*($2 + [132]) = ($4 + [191])
	*($2 + [136]) = ($4 + [192])
	*($2 + [140]) = ($4 + [193])
	*($2 + [144]) = ($4 + [194])
	*($2 + [148]) = ($4 + [195])
	*($2 + [152]) = ($4 + [196])
	*($2 + [156]) = ($4 + [197])
	*($2 + [164]) = ($4 + [199])
	*($2 + [160]) = ($4 + [198])
	*($2 + [168]) = ($4 + [200])
	*($2 + [172]) = ($4 + [201])
	*($2 + [176]) = ($4 + [202])
	*($2 + [180]) = ($4 + [203])
	*($2 + [184]) = ($4 + [204])
	*($2 + [188]) = ($4 + [205])
	*($2 + [192]) = ($4 + [206])
	*($2 + [196]) = ($4 + [207])
	*($2 + [200]) = ($4 + [208])
	*($2 + [204]) = ($4 + [209])
	*($2 + [208]) = ($4 + [210])
	*($2 + [212]) = ($4 + [211])
	*($2 + [216]) = ($4 + [212])
	*($2 + [220]) = ($4 + [213])
	*($2 + [224]) = ($4 + [214])
	*($2 + [228]) = ($4 + [215])
	*($2 + [232]) = ($4 + [216])
	*($2 + [240]) = ($4 + [218])
	*($2 + [236]) = ($4 + [217])
	*($2 + [244]) = ($4 + [219])
	*($2 + [248]) = ($4 + [220])
	*($2 + [252]) = ($4 + [221])
	*($2 + [256]) = ($4 + [222])
	*($2 + [260]) = ($4 + [223])
	*($2 + [264]) = ($4 + [224])
	*($2 + [268]) = ($4 + [225])
	CALL $103(($2 + [8]), $2)
	CALL $88(*($1), ($4 + [228]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [8526])
	CALL memcpy(*($0 + [4]), ($4 + [240]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2 + [8]) = $4
	CALL $107(($2 + [8]), $1)
	$global$0 = ($2 + [272])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$6 = ($global$0 - [224])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = (int_64)0
	$8 = (int_64)59
	$0 = [8301]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$1 }
	$7 = (int_64)5
	
.LOOP $label$5:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$5 }
	$7 = (int_64)0
	$8 = (int_64)59
	$0 = [8301]
	$12 = (int_64)0
	
.LOOP $label$6:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$7 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$11 = ($11 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$7
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$6 }
	$7 = (int_64)0
	$10 = (int_64)59
	$0 = [8314]
	$13 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$15 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$11 = ($11 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$8 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$11
	$0 = ($0 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$13 = ((int_64)$8 | (int_64)$13)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$10 }
	*(($6 + [24])) = *(($2 + [8]))
	*(($6 + [32])) = *(($2 + [16]))
	*(($6 + [40])) = *(($2 + [24]))
	*($6) = $1
	*($6 + [16]) = *($2)
	CALL memcpy(($6 + [48]), $3, [66])
	$11 = CALL $113(($6 + [116]), $4)
	$2 = CALL $113(($6 + [128]), $5)
	*($6 + [160]) = $13
	*($6 + [152]) = $12
	*(($0 = CALL _Znwj([16]))) = $9
	*($0 + [8]) = (int_64)3631283935532548096
	*(($6 + [188])) = [0]
	$3 = ($0 + [16])
	*((($6 + [152]) + [24])) = $3
	*(($6 + [172])) = $3
	*($6 + [168]) = $0
	*($6 + [180 align=4]) = (int_64)0
	$0 = *($11)
	$11 = ( *(($6 + [120])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($11 + [106])
	$7 = (CASTING uint_64)(uint_32 $11)
	$3 = ($6 + [180])
	
.LOOP $label$16:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$16 }
	$11 = *($2)
	$11 = ( *(($6 + [132])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$0 = ($11 + $0)
	$7 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$17:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$17 }
	if ( ($0 == 0) ){ goto $label$19 }
	CALL $26($3, $0)
	$11 = *(($6 + [184]))
	$0 = *(($6 + [180]))
	goto $label$18 
	
.LABEL $label$19
	$11 = [0]
	$0 = [0]
	
.LABEL $label$18
	*($6 + [196]) = $0
	*($6 + [192]) = $0
	*($6 + [200]) = $11
	*($6 + [208]) = ($6 + [192])
	*($6 + [216]) = $6
	CALL $27(($6 + [216]), ($6 + [208]))
	CALL $28(($6 + [192]), ($6 + [152]))
	$0 = *($6 + [192])
	CALL send_inline($0, (*($6 + [196]) - $0))
	$0 = *($6 + [192])
	if ( ($0 == 0) ){ goto $label$20 }
	*($6 + [196]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$20
	$0 = *($6 + [180])
	if ( ($0 == 0) ){ goto $label$21 }
	*(($6 + [184])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$21
	$0 = *($6 + [168])
	if ( ($0 == 0) ){ goto $label$22 }
	*(($6 + [172])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$22
	if ( (*($6 + [128]) & [1]) ){ goto $label$25 }
	if ( (*($6 + [116]) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($6 + [136])))
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($6 + [124])))
	$global$0 = ($6 + [224])
	return 
	
.LABEL $label$23
	$global$0 = ($6 + [224])
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [112])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = CALL current_time()
	*(($2 + [60])) = (int_64)0
	*(($2 + [76])) = (int_64)0
	*(($2 + [84])) = (int_64)0
	*($2 + [44]) = [0]
	*($2 + [48]) = [0]
	*($2 + [52 align=4]) = (int_64)0
	*($2 + [68 align=4]) = (int_64)0
	*($2 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	$4 = ($2 + [68])
	$5 = *($0)
	$3 = (int_64)6
	
.LOOP $label$1:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$1 }
	*($2 + [24]) = (int_64)3617214756542218240
	*($2 + [16]) = $5
	$3 = (int_64)0
	$6 = (int_64)59
	$7 = [8456]
	$8 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$7 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$9 = ($9 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$5 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$3
	$7 = ($7 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$8 = ((int_64)$5 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$2 }
	*($2 + [96]) = $8
	CALL $48($4, ($2 + [16]), $0, ($2 + [96]), ($2 + [8]))
	*(($2 + [52])) = ((CASTING uint_32)(uint_64 $1) - (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)))
	$3 = CALL current_time()
	CALL prints([8502])
	CALL printui((int_64))($1 - ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	$7 = ($0 + [224])
	$3 = *($7)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$8 }
	$3 = (int_64)0
	$9 = ($0 + [208])
	$4 = CALL db_lowerbound_i64(*($9), *(($0 + [216])), (int_64)5455799419172362240, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	CALL $46($9, $4)
	*($2 + [20]) = [0]
	*($2 + [16]) = $9
	$3 = *(*(CALL $47(($2 + [16])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*(($0 + [224])) = $3
	
.LABEL $label$8
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [9073])
	$3 = *($7)
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = $3
	$3 = *($0)
	CALL $49(($2 + [96]), ($2 + [32]))
	$7 = *($2 + [96])
	CALL send_deferred(($2 + [16]), $3, $7, (*($2 + [100]) - $7), [1])
	$7 = *($2 + [96])
	if ( ($7 == 0) ){ goto $label$10 }
	*($2 + [100]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	CALL $50(($2 + [32]))
	$global$0 = ($2 + [112])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $122($5)
	CALL read_action_data($2, $5)
	CALL $125($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	float_64 $12
	int_32 $13
	$1 = ($global$0 - [208])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [208])
	$3 = ($0 + [224])
	$4 = *($3)
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($2), *(($0 + [216])), (int_64)5455799419172362240, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $46($2, $5)
	*($1 + [132]) = [0]
	*($1 + [128]) = $2
	$4 = *(*(CALL $47(($1 + [128])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [224])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [9073])
	$6 = *($3)
	CALL prints([8397])
	if ( (int_64)($6 == 0) ){ goto $label$3 }
	$4 = ((int_64)$6 + (int_64)-1)
	$5 = *(($0 + [236]))
	$7 = *(($0 + [232]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$3 = ($5 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$6 }
	$5 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$2), [8544])
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	$3 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)5455799419172362240, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $46($2, $3)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$2), [8544])
	
.LABEL $label$4
	if ( ((uint_64)(int_64))(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($8 + [40])) > (uint_64)(int_64)999) ){ goto $label$3 }
	CALL prints([8409])
	$4 = CALL current_time()
	*(($1 + [156])) = (int_64)0
	*(($1 + [172])) = (int_64)0
	*(($1 + [180])) = (int_64)0
	*($1 + [140]) = [0]
	*($1 + [144]) = [0]
	*($1 + [148 align=4]) = (int_64)0
	*($1 + [164 align=4]) = (int_64)0
	*($1 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$8 = ($1 + [164])
	$9 = *($0)
	$4 = (int_64)6
	
.LOOP $label$8:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$8 }
	*($1 + [40]) = (int_64)3617214756542218240
	*($1 + [32]) = $9
	$4 = (int_64)0
	$10 = (int_64)59
	$3 = [8456]
	$11 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$14 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$10
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$9 }
	*($1 + [112]) = $11
	CALL $48($8, ($1 + [32]), $0, ($1 + [112]), ($1 + [96]))
	$3 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	*(($1 + [148])) = ((($3 + [3600]) - ((uint_32)$3 % (uint_32)[3600])) - (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)))
	*($1 + [40]) = (int_64)0
	*($1 + [32]) = $6
	$4 = *($0)
	CALL $49(($1 + [112]), ($1 + [128]))
	$3 = *($1 + [112])
	CALL send_deferred(($1 + [32]), $4, $3, (*($1 + [116]) - $3), [1])
	$3 = *($1 + [112])
	if ( ($3 == 0) ){ goto $label$15 }
	*($1 + [116]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$15
	CALL $50(($1 + [128]))
	$global$0 = ($1 + [208])
	return 
	
.LABEL $label$3
	CALL $51(($1 + [112]), $0)
	*($1 + [104]) = (int_64)1397703940
	$12 = ((float_64)(CASTING float_64)(int_64 *($1 + [112])) * (float_64)(float_64)0.00125)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$17 }
	$4 = (int_64)-9223372036854775808
	goto $label$16 
	
.LABEL $label$17
	$4 = (Rounds 0)($12)
	
.LABEL $label$16
	*($1 + [96]) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9004])
	$4 = (uint_64)*($1 + [104]) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$4 = $9
	$5 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$4 = $9
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$22 }
	$5 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	
.LABEL $label$18
	CALL eosio_assert($5, [9053])
	$3 = (($1 + [96]) + [8])
	CALL eosio_assert(((int_64)*($1 + [120]) == (int_64)*($3)), [9267])
	$4 = *($1 + [96])
	if ( ((int_64)*($1 + [112]) >= (int_64)$4) ){ goto $label$23 }
	*($3) = *((($1 + [112]) + [8]))
	$4 = *($1 + [112])
	*($1 + [96]) = $4
	
.LABEL $label$23
	if ( (int_64)($4 == 0) ){ goto $label$24 }
	*($1 + [128]) = (int_64)1
	CALL $52($0, ($1 + [128]))
	CALL $53($0, ($1 + [96]))
	$10 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$11()), [8623])
	*(($7 = CALL _Znwj([64])) + [32]) = (int_64)1398362884
	*($7 + [24]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$13 = ($7 + [24])
	$4 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$4 = $9
	$5 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$4 = $9
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$29 }
	$5 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	CALL eosio_assert($5, [9053])
	*($7 + [48]) = $2
	*($7 + [8]) = (int_64)0
	*($7) = $6
	*($7 + [16]) = (int_64)0
	*($13) = *($1 + [96])
	*(($13 + [8])) = *((($1 + [96]) + [8]))
	*($7 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [40]) = (($1 + [128]) + [48])
	*($1 + [36]) = ($1 + [128])
	*($1 + [32]) = ($1 + [128])
	CALL $54(($1 + [32]), $7)
	$4 = *($7)
	$3 = ($0 + [216])
	*($7 + [52]) = CALL db_store_i64(*($3), (int_64)5455799419172362240, $10, $4, ($1 + [128]), [48])
	$5 = ($0 + [224])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$30 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$30
	$4 = *($3)
	$9 = *($7)
	*($1 + [16]) = *(($7 + [40]))
	*($7 + [56]) = CALL db_idx64_store($4, (int_64)5455799419172362240, $10, $9, ($1 + [16]))
	*($1 + [32]) = $7
	$4 = *($7)
	*($1 + [128]) = $4
	$5 = *(($7 + [52]))
	*($1 + [16]) = $5
	$8 = ($0 + [236])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [240]))) ){ goto $label$33 }
	*($3 + [8]) = $4
	*($3 + [16]) = $5
	*($1 + [32]) = [0]
	*($3) = $7
	*($8) = ($3 + [24])
	$5 = *($1 + [32])
	$3 = [0]
	*($1 + [32]) = [0]
	if ( $5 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	CALL $55(($0 + [232]), ($1 + [32]), ($1 + [128]), ($1 + [16]))
	$5 = *($1 + [32])
	$3 = [0]
	*($1 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv($5)
	
.LABEL $label$31
	$4 = CALL current_time()
	*(($1 + [156])) = (int_64)0
	*(($1 + [172])) = (int_64)0
	*(($1 + [180])) = (int_64)0
	*($1 + [140]) = $3
	*($1 + [144]) = $3
	*($1 + [148 align=4]) = (int_64)0
	*($1 + [164 align=4]) = (int_64)0
	*($1 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$8 = ($1 + [164])
	$9 = *($0)
	$4 = (int_64)6
	
.LOOP $label$34:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$34 }
	*($1 + [40]) = (int_64)3617214756542218240
	*($1 + [32]) = $9
	$4 = (int_64)0
	$9 = (int_64)59
	$3 = [8384]
	$11 = (int_64)0
	
.LOOP $label$35:
	$10 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$36 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$5 = ($5 + [-91])
	goto $label$37 
	
.LABEL $label$38
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$36
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$35 }
	*($1 + [16]) = $11
	*($1 + [192]) = $6
	CALL $56($8, ($1 + [32]), $0, ($1 + [16]), ($1 + [192]))
	*(($1 + [148])) = [0]
	$4 = CALL current_time()
	*($1 + [40]) = (int_64)0
	*($1 + [32]) = ((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = *($0)
	CALL $49(($1 + [16]), ($1 + [128]))
	$3 = *($1 + [16])
	CALL send_deferred(($1 + [32]), $4, $3, (*($1 + [20]) - $3), [1])
	$3 = *($1 + [16])
	if ( ($3 == 0) ){ goto $label$39 }
	*($1 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$39
	$4 = CALL current_time()
	$9 = CALL current_time()
	$10 = CALL current_time()
	CALL prints([8465])
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))
	CALL printui((CASTING uint_64)(uint_32 (($3 + [3600]) - ((uint_32)$3 % (uint_32)[3600]))))
	CALL prints([8487])
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000))
	CALL printui((CASTING uint_64)(uint_32 ((($3 + [3600]) - ((uint_32)$3 % (uint_32)[3600])) - (CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000)))))
	$4 = CALL current_time()
	*(($1 + [60])) = (int_64)0
	*(($1 + [76])) = (int_64)0
	*(($1 + [84])) = (int_64)0
	*($1 + [44]) = [0]
	*($1 + [48]) = [0]
	*($1 + [52 align=4]) = (int_64)0
	*($1 + [68 align=4]) = (int_64)0
	*($1 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$8 = ($1 + [68])
	$9 = *($0)
	$4 = (int_64)6
	
.LOOP $label$40:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$40 }
	*($1 + [24]) = (int_64)3617214756542218240
	*($1 + [16]) = $9
	$4 = (int_64)0
	$10 = (int_64)59
	$3 = [8456]
	$11 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$46 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$5 = ($5 + [-91])
	goto $label$44 
	
.LABEL $label$46
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$42
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$41 }
	*($1 + [192]) = $11
	CALL $48($8, ($1 + [16]), $0, ($1 + [192]), ($1 + [8]))
	$3 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	*(($1 + [52])) = ((($3 + [3600]) - ((uint_32)$3 % (uint_32)[3600])) - (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)))
	*($1 + [24]) = (int_64)0
	*($1 + [16]) = ((int_64)$6 + (int_64)1)
	$4 = *($0)
	CALL $49(($1 + [192]), ($1 + [32]))
	$3 = *($1 + [192])
	CALL send_deferred(($1 + [16]), $4, $3, (*($1 + [196]) - $3), [1])
	$3 = *($1 + [192])
	if ( ($3 == 0) ){ goto $label$47 }
	*($1 + [196]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$47
	CALL $50(($1 + [32]))
	CALL $50(($1 + [128]))
	
.LABEL $label$24
	$global$0 = ($1 + [208])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [480])
	$global$0 = $2
	*(($3 = (($2 + [208]) + [16]))) = *(($1 + [32]))
	*(($4 = (($2 + [208]) + [24]))) = *(($1 + [40]))
	*($2 + [208]) = *($1 + [16])
	*($2 + [216]) = *(($1 + [24]))
	$5 = *($1)
	CALL memcpy(($2 + [142]), ($1 + [48]), [66])
	$6 = CALL $113(($2 + [128]), ($1 + [116]))
	$1 = CALL $113(($2 + [112]), ($1 + [128]))
	CALL memcpy(($2 + [272]), ($2 + [142]), [66])
	*((($2 + [240]) + [24])) = *($4)
	*((($2 + [240]) + [16])) = *($3)
	*($2 + [248]) = *($2 + [216])
	*($2 + [240]) = *($2 + [208])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [448]) + [24]))) = *((($2 + [240]) + [24]))
	*(($8 = (($2 + [448]) + [16]))) = *((($2 + [240]) + [16]))
	*($2 + [456]) = *($2 + [248])
	*($2 + [448]) = *($2 + [240])
	CALL memcpy(($2 + [376]), ($2 + [272]), [66])
	$4 = CALL $113(($2 + [360]), $6)
	$9 = CALL $113(($2 + [344]), $1)
	*((($2 + [80]) + [24])) = *($7)
	*((($2 + [80]) + [16])) = *($8)
	*($2 + [88]) = *($2 + [456])
	*($2 + [80]) = *($2 + [448])
	CALL memcpy(($2 + [14]), ($2 + [376]), [66])
	CALL void $3((int_32 $5), (int_64 ($2 + [80])), (int_32 ($2 + [14])), (int_32 $4), (int_32 $9), (int_32 $0))
	if ( (*($2 + [344]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [360]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($2 + [360]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($6) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($6) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [480])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [480])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8618])
	CALL memcpy(($4 + [16]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($4 + [49])
	*($2 + [8]) = ($4 + [48])
	*($2 + [16]) = ($4 + [50])
	*($2 + [20]) = ($4 + [51])
	*($2 + [24]) = ($4 + [52])
	*($2 + [28]) = ($4 + [53])
	*($2 + [32]) = ($4 + [54])
	*($2 + [36]) = ($4 + [55])
	*($2 + [40]) = ($4 + [56])
	*($2 + [44]) = ($4 + [57])
	*($2 + [48]) = ($4 + [58])
	*($2 + [52]) = ($4 + [59])
	*($2 + [56]) = ($4 + [60])
	*($2 + [60]) = ($4 + [61])
	*($2 + [64]) = ($4 + [62])
	*($2 + [68]) = ($4 + [63])
	*($2 + [72]) = ($4 + [64])
	*($2 + [76]) = ($4 + [65])
	*($2 + [80]) = ($4 + [66])
	*($2 + [88]) = ($4 + [68])
	*($2 + [84]) = ($4 + [67])
	*($2 + [92]) = ($4 + [69])
	*($2 + [96]) = ($4 + [70])
	*($2 + [100]) = ($4 + [71])
	*($2 + [104]) = ($4 + [72])
	*($2 + [108]) = ($4 + [73])
	*($2 + [112]) = ($4 + [74])
	*($2 + [116]) = ($4 + [75])
	*($2 + [120]) = ($4 + [76])
	*($2 + [124]) = ($4 + [77])
	*($2 + [128]) = ($4 + [78])
	*($2 + [132]) = ($4 + [79])
	*($2 + [136]) = ($4 + [80])
	*($2 + [140]) = ($4 + [81])
	*($2 + [144]) = ($4 + [82])
	*($2 + [148]) = ($4 + [83])
	*($2 + [152]) = ($4 + [84])
	*($2 + [156]) = ($4 + [85])
	*($2 + [164]) = ($4 + [87])
	*($2 + [160]) = ($4 + [86])
	*($2 + [168]) = ($4 + [88])
	*($2 + [172]) = ($4 + [89])
	*($2 + [176]) = ($4 + [90])
	*($2 + [180]) = ($4 + [91])
	*($2 + [184]) = ($4 + [92])
	*($2 + [188]) = ($4 + [93])
	*($2 + [192]) = ($4 + [94])
	*($2 + [196]) = ($4 + [95])
	*($2 + [200]) = ($4 + [96])
	*($2 + [204]) = ($4 + [97])
	*($2 + [208]) = ($4 + [98])
	*($2 + [212]) = ($4 + [99])
	*($2 + [216]) = ($4 + [100])
	*($2 + [220]) = ($4 + [101])
	*($2 + [224]) = ($4 + [102])
	*($2 + [228]) = ($4 + [103])
	*($2 + [232]) = ($4 + [104])
	*($2 + [240]) = ($4 + [106])
	*($2 + [236]) = ($4 + [105])
	*($2 + [244]) = ($4 + [107])
	*($2 + [248]) = ($4 + [108])
	*($2 + [252]) = ($4 + [109])
	*($2 + [256]) = ($4 + [110])
	*($2 + [260]) = ($4 + [111])
	*($2 + [264]) = ($4 + [112])
	*($2 + [268]) = ($4 + [113])
	CALL $97(($2 + [8]), $2)
	CALL $85(*($1), ($4 + [116]))
	CALL $85(*($1), ($4 + [128]))
	$global$0 = ($2 + [272])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [8526])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($4 + [49])
	*($2 + [8]) = ($4 + [48])
	*($2 + [16]) = ($4 + [50])
	*($2 + [20]) = ($4 + [51])
	*($2 + [24]) = ($4 + [52])
	*($2 + [28]) = ($4 + [53])
	*($2 + [32]) = ($4 + [54])
	*($2 + [36]) = ($4 + [55])
	*($2 + [40]) = ($4 + [56])
	*($2 + [44]) = ($4 + [57])
	*($2 + [48]) = ($4 + [58])
	*($2 + [52]) = ($4 + [59])
	*($2 + [56]) = ($4 + [60])
	*($2 + [60]) = ($4 + [61])
	*($2 + [64]) = ($4 + [62])
	*($2 + [68]) = ($4 + [63])
	*($2 + [72]) = ($4 + [64])
	*($2 + [76]) = ($4 + [65])
	*($2 + [80]) = ($4 + [66])
	*($2 + [88]) = ($4 + [68])
	*($2 + [84]) = ($4 + [67])
	*($2 + [92]) = ($4 + [69])
	*($2 + [96]) = ($4 + [70])
	*($2 + [100]) = ($4 + [71])
	*($2 + [104]) = ($4 + [72])
	*($2 + [108]) = ($4 + [73])
	*($2 + [112]) = ($4 + [74])
	*($2 + [116]) = ($4 + [75])
	*($2 + [120]) = ($4 + [76])
	*($2 + [124]) = ($4 + [77])
	*($2 + [128]) = ($4 + [78])
	*($2 + [132]) = ($4 + [79])
	*($2 + [136]) = ($4 + [80])
	*($2 + [140]) = ($4 + [81])
	*($2 + [144]) = ($4 + [82])
	*($2 + [148]) = ($4 + [83])
	*($2 + [152]) = ($4 + [84])
	*($2 + [156]) = ($4 + [85])
	*($2 + [164]) = ($4 + [87])
	*($2 + [160]) = ($4 + [86])
	*($2 + [168]) = ($4 + [88])
	*($2 + [172]) = ($4 + [89])
	*($2 + [176]) = ($4 + [90])
	*($2 + [180]) = ($4 + [91])
	*($2 + [184]) = ($4 + [92])
	*($2 + [188]) = ($4 + [93])
	*($2 + [192]) = ($4 + [94])
	*($2 + [196]) = ($4 + [95])
	*($2 + [200]) = ($4 + [96])
	*($2 + [204]) = ($4 + [97])
	*($2 + [208]) = ($4 + [98])
	*($2 + [212]) = ($4 + [99])
	*($2 + [216]) = ($4 + [100])
	*($2 + [220]) = ($4 + [101])
	*($2 + [224]) = ($4 + [102])
	*($2 + [228]) = ($4 + [103])
	*($2 + [232]) = ($4 + [104])
	*($2 + [240]) = ($4 + [106])
	*($2 + [236]) = ($4 + [105])
	*($2 + [244]) = ($4 + [107])
	*($2 + [248]) = ($4 + [108])
	*($2 + [252]) = ($4 + [109])
	*($2 + [256]) = ($4 + [110])
	*($2 + [260]) = ($4 + [111])
	*($2 + [264]) = ($4 + [112])
	*($2 + [268]) = ($4 + [113])
	CALL $103(($2 + [8]), $2)
	CALL $88(*($1), ($4 + [116]))
	CALL $88(*($1), ($4 + [128]))
	$global$0 = ($2 + [272])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $118($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8623])
	*(($5 = CALL _Znwj([56])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$6 = ($5 + [8])
	$7 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [9053])
	*($5 + [40]) = $1
	*($5 + [24]) = (int_64)0
	*($5) = *(*($3))
	$10 = *($3 + [4])
	*(($8 = (($4 + [48]) + [8]))) = *(($10 + [8]))
	*($4 + [48]) = *($10)
	$7 = *(*($3 + [8]))
	$9 = *($8)
	*(($4 + [8])) = $9
	*(($8 = (($4 + [64]) + [8]))) = $9
	$9 = *($4 + [48])
	*($4 + [64]) = $9
	*($4) = $9
	*($5 + [24]) = $7
	*(($6 + [8])) = *($8)
	*($6) = *($4 + [64])
	*($5 + [32]) = (int_64)0
	*($4 + [72]) = ($4 + [40])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $79(($4 + [64]), $5)
	$7 = *($5)
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)-2618280233362522112, $2, $7, $4, [40])
	*($5 + [44]) = $10
	if ( (uint_64)($7 <= *($1 + [16])) ){ goto $label$6 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($4 + [64]) = $5
	$7 = *($5)
	*($4) = $7
	*($4 + [48]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $7
	*($8 + [16]) = $10
	*($4 + [64]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $80(($1 + [24]), ($4 + [64]), $4, ($4 + [48]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [80])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8709])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8755])
	$5 = *($1)
	$6 = *($3 + [4])
	$7 = *($6)
	$8 = *($6 + [8])
	$6 = *(*($3) + [4])
	$9 = ($6 + [24])
	CALL eosio_assert(((int_64)*($9) == (int_64)*(*($3 + [8]))), [8865])
	$10 = *($6 + [8])
	$11 = *(($6 + [16]))
	CALL eosio_assert(((int_64)$8 == (int_64)$11), [8879])
	$7 = ((int_64)$10 + (int_64)$7)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [8922])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [8941])
	$8 = *($9)
	*(($1 + [16])) = $11
	*($1 + [8]) = $7
	*(($1 + [24])) = $8
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8806])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $79(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $122($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9708])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $122($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8595])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8618])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $64(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [8595])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $122($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([56])) + [16]) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$10 = ($9 + [16])
	$11 = ($9 + [8])
	$12 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $13
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$12 = $13
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9053])
	*($9 + [40]) = $0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [8618])
	CALL memcpy($9, $7, [8])
	$5 = ($6 & [-8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [8618])
	CALL memcpy($11, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[16]), [8618])
	CALL memcpy($10, ($7 + [16]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[24]), [8618])
	CALL memcpy(($9 + [24]), ($7 + [24]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[32]), [8618])
	CALL memcpy(($9 + [32]), ($7 + [32]), [8])
	*($9 + [44]) = $1
	*($3 + [24]) = $9
	$12 = *($9)
	*($3 + [16]) = $12
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $12
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $80($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $125($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9469])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [9514])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9564])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8709])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8755])
	*($4 + [40]) = *($1 + [8])
	$5 = *($1)
	$6 = ($1 + [24])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [8879])
	$7 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [8922])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [8941])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8806])
	CALL eosio_assert([1], [8526])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8526])
	$3 = ($1 + [8])
	CALL memcpy(($4 | [8]), $3, [8])
	CALL eosio_assert([1], [8526])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8526])
	CALL memcpy(($4 + [24]), $6, [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [56]) = *($3)
	if ( (CALL $120(($4 + [40]), ($4 + [56]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020380869172259840, ($4 + [48]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [56]))
	
.LABEL $label$2
	$global$0 = ($4 + [64])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8623])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([48])) + [24]) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9053])
	*($5 + [32]) = $1
	CALL $89(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [36])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $90(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8709])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8755])
	$5 = ($1 + [8])
	*(($4 = $3) + [8]) = *($5)
	$6 = *($1)
	$7 = *($1 + [16])
	$8 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$8($7 - ((int_64)$7 % (int_64)1000000))) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9004])
	$7 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $10
	$11 = [1]
	$12 = $9
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$9 < (int_32)[6])
	$12 = ($9 + [1])
	$9 = $12
	if ( $11 ){ goto $label$5 }
	$11 = [1]
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [9053])
	$12 = ($1 + [24])
	CALL eosio_assert(((int_64)*($12) == (int_64)1397703946), [9617])
	$7 = (int_64)
	*($1 + [16]) = $7(*($1 + [16]) - $8))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9665])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9687])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8806])
	$9 = $3
	$11 = ($9 + [-32])
	$global$0 = $11
	CALL eosio_assert([1], [8526])
	CALL memcpy($11, $1, [8])
	CALL eosio_assert([1], [8526])
	CALL memcpy(($9 + [-24]), $5, [8])
	CALL eosio_assert([1], [8526])
	CALL memcpy(($9 + [-16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8526])
	CALL memcpy(($9 + [-8]), $12, [8])
	CALL db_update_i64(*($1 + [36]), $2, $11, [32])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($4 + [24]) = *($5)
	if ( (CALL $120(($4 + [8]), ($4 + [24]), [8]) == 0) ){ goto $label$7 }
	$11 = ($1 + [40])
	$9 = *($11)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020380869172259840, ($4 + [16]), $6)
	*($11) = $9
	
.LABEL $label$8
	CALL db_idx64_update($9, $2, ($4 + [24]))
	
.LABEL $label$7
	$global$0 = ($4 + [32])
}

void .FUNC $62 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($3 + [104])) = [0]
	*($3 + [96]) = (int_64)0
	$4 = CALL $121([9381])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [96]) = ($4 << [1])
	$5 = (($3 + [96]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [96]) = ($6 | [1])
	*($3 + [104]) = $5
	*($3 + [100]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [9381], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	$7 = (int_64)0
	$8 = (int_64)59
	$4 = [9368]
	$9 = (int_64)0
	
.LOOP $label$6:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$7 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$5 = ($5 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$7
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$6 }
	$7 = (int_64)6
	
.LOOP $label$10:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$10 }
	$7 = (int_64)0
	$10 = (int_64)59
	$4 = [8532]
	$11 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$16 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$8 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$11 = ((int_64)$8 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$11 }
	$7 = (int_64)0
	$10 = (int_64)59
	$4 = [9359]
	$12 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$22 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$12 = ((int_64)$8 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$17 }
	$7 = (int_64)0
	$8 = (int_64)59
	$4 = [9368]
	$13 = (int_64)0
	
.LOOP $label$23:
	$10 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$24 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$5 = ($5 + [-91])
	goto $label$25 
	
.LABEL $label$26
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$13 = ((int_64)$10 | (int_64)$13)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$23 }
	*((($3 + [8]) + [24])) = *(($2 + [8]))
	*($3 + [16]) = $1
	*($3 + [8]) = $13
	*($3 + [24]) = *($2)
	$5 = CALL $113((($3 + [8]) + [32]), ($3 + [96]))
	*($3 + [64]) = $12
	*($3 + [56]) = $11
	*(($4 = CALL _Znwj([16]))) = $9
	*($4 + [8]) = (int_64)3617214756542218240
	*((($3 + [56]) + [36])) = [0]
	$2 = ($4 + [16])
	*((($3 + [56]) + [24])) = $2
	*(($3 + [76])) = $2
	*($3 + [72]) = $4
	*($3 + [84 align=4]) = (int_64)0
	$4 = *($5)
	$5 = ( *((($3 + [8]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [32])
	$7 = (CASTING uint_64)(uint_32 $5)
	$5 = ($3 + [84])
	
.LOOP $label$27:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$27 }
	if ( ($4 == 0) ){ goto $label$29 }
	CALL $26($5, $4)
	$5 = *(($3 + [88]))
	$4 = *(($3 + [84]))
	goto $label$28 
	
.LABEL $label$29
	$5 = [0]
	$4 = [0]
	
.LABEL $label$28
	*($3 + [132]) = $4
	*($3 + [128]) = $4
	*($3 + [136]) = $5
	*($3 + [112]) = ($3 + [128])
	*($3 + [120]) = ($3 + [8])
	CALL $75(($3 + [120]), ($3 + [112]))
	CALL $28(($3 + [128]), ($3 + [56]))
	$4 = *($3 + [128])
	CALL send_inline($4, (*($3 + [132]) - $4))
	$4 = *($3 + [128])
	if ( ($4 == 0) ){ goto $label$30 }
	*($3 + [132]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$30
	$4 = *($3 + [84])
	if ( ($4 == 0) ){ goto $label$31 }
	*(($3 + [88])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$31
	$4 = *($3 + [72])
	if ( ($4 == 0) ){ goto $label$32 }
	*(($3 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$32
	if ( (*($3 + [40]) & [1]) ){ goto $label$34 }
	if ( (*($3 + [96]) & [1]) ){ goto $label$33 }
	goto $label$1 
	
.LABEL $label$34
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$33
	CALL _ZdlPv(*($3 + [104]))
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $112(($3 + [96]))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $102(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $85(*($1), *($0))
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($0 + [32]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [8618])
	CALL memcpy(($0 + [40]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($0 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [8618])
	CALL memcpy(($0 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($0 + [64]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $85(*($1), ($0 + [72]))
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [8526])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($2 + [32]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8618])
	CALL memcpy(($2 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [8618])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = (*($2) + [66])
	*(($2 = *($1))) = $1
	$3 = *($0 + [340])
	$0 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [344])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($0 + [340]))
	$3 = ( *(($0 + [344])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [98])
	*($2) = $1
	$3 = *($0 + [452])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [456])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *(($0 + [452]))
	$3 = ( *(($0 + [456])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [98])
	*($2) = $1
	$3 = *($0 + [564])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [568])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [564]))
	$0 = ( *(($0 + [568])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [184])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [168])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [176])), (int_64)-3020380869172259840, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $76($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $91(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [184])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9073])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	$5 = *($5 + [8])
	*(($6 = ($1 + [24]))) = *(($5 + [8]))
	*($1 + [16]) = *($5)
	$2 = $2
	$5 = ($2 + [-32])
	$global$0 = $5
	CALL eosio_assert([1], [8526])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [8526])
	$7 = ($1 + [8])
	CALL memcpy(($2 + [-24]), $7, [8])
	CALL eosio_assert([1], [8526])
	CALL memcpy(($2 + [-16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8526])
	CALL memcpy(($2 + [-8]), $6, [8])
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-3020380869172259840, *(*($0 + [8])), $8, $5, [32])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [8]) = *($7)
	*($1 + [40]) = CALL db_idx64_store($8, (int_64)-3020380869172259840, $11, $12, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8526])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8526])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $88($0, ($1 + [8]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8999])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $26($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8618])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $86($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $116($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $116($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $112($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $85($0, ($1 + [8]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	CALL $114(($1 + [8]), *($4 + [4]))
	*($1 + [32]) = (int_64)1
	$6 = *($4 + [8])
	*($1 + [24]) = *($6 + [8])
	*(($1 + [48])) = *($6 + [8])
	*($1 + [40]) = *($6)
	$4 = *($4 + [12])
	*($1 + [56]) = *($4)
	*(($1 + [64])) = *(($4 + [8]))
	$4 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [56])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$6 = CALL $122($4)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $4)
	CALL $87($3, $1)
	$7 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($5 + [8]), (int_64)7035938066996920320, *(*($0 + [8])), $7, $6, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $125($6)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

int_32 .FUNC $81 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$1 = [0]
	*(($0 + [16])) = [0]
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [9004])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [9053])
	*(($1 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $4
	$6 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$3 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9053])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9053])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9053])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [8709])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8755])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$6 = *($1)
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [48]))), [8879])
	$8 = ((int_64)*($1 + [40]) + (int_64)*($7))
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [8922])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [8941])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [64]))), [8879])
	$8 = ((int_64)*($1 + [56]) + (int_64)*($3))
	*($1 + [56]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [8922])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [8941])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8806])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [56])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $122($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $87($5, $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $125($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8623])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([88])
	CALL $81($3)
	*($3 + [72]) = $1
	CALL $82(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [76])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $83(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_64 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = *($1)
	$3 = CALL $121([8977])
	if ( ((int_32)$3 != (int_32)( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$2 }
	if ( CALL $117($1, [0], [-1], [8977], $3) ){ goto $label$2 }
	$6 = (int_64)1
	$7 = *($2 + [8])
	if ( ((int_64)$7 == (int_64)1397703940) ){ goto $label$1 }
	$6 = (int_64)2
	if ( ((int_64)$7 == (int_64)1480674564) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = *($1)
	$3 = ($1 + [4])
	$5 = CALL $121([8982])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$3 }
	if ( CALL $117($1, [0], [-1], [8982], $5) ){ goto $label$3 }
	$6 = (int_64)3
	$7 = *($2 + [8])
	if ( ((int_64)$7 == (int_64)1397703940) ){ goto $label$1 }
	$6 = (int_64)4
	if ( ((int_64)$7 == (int_64)1480674564) ){ goto $label$1 }
	
.LABEL $label$3
	$4 = *($1)
	$5 = CALL $121([8987])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$4 }
	if ( CALL $117($1, [0], [-1], [8987], $5) ){ goto $label$4 }
	$6 = (int_64)5
	$7 = *($2 + [8])
	if ( ((int_64)$7 == (int_64)1397703940) ){ goto $label$1 }
	$6 = (int_64)6
	if ( ((int_64)$7 == (int_64)1480674564) ){ goto $label$1 }
	
.LABEL $label$4
	$4 = *($1)
	$3 = CALL $121([8992])
	if ( ((int_32)$3 != (int_32)( *(($1 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$5 }
	if ( CALL $117($1, [0], [-1], [8992], $3) ){ goto $label$5 }
	$6 = (int_64)7
	$7 = *($2 + [8])
	if ( ((int_64)$7 == (int_64)1397703940) ){ goto $label$1 }
	$6 = (int_64)8
	if ( ((int_64)$7 == (int_64)1480674564) ){ goto $label$1 }
	
.LABEL $label$5
	$6 = (int_64)0
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8595])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([88])
	$6 = CALL $81($5)
	*($5 + [72]) = $0
	CALL $84(($3 + [32]), $6)
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $83(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [8595])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $122($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [36]) = $7
	*($3 + [32]) = $7
	*($3 + [40]) = ($7 + $6)
	*(($9 = CALL _Znwj([48])) + [24]) = (int_64)1398362884
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$10 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9053])
	*($9 + [32]) = $0
	CALL $92(($3 + [32]), $9)
	*($9 + [40]) = [-1]
	*($9 + [36]) = $1
	*($3 + [24]) = $9
	$10 = *($9)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $10
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $90($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $125($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8526])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8526])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8526])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [9004])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9053])
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9053])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9053])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9053])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9469])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [9514])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9564])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$6 = ($global$0 - [80])
	$global$0 = $6
	$7 = CALL $113(($6 + [56]), $1)
	$8 = *(($4 + [8]))
	*((($6 + [40]) + [8])) = $8
	$9 = *($4)
	*(($6 + [8])) = $8
	*($6) = $9
	*($6 + [40]) = $9
	$9 = CALL $70($0, $7, $6)
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$1
	*($6 + [72]) = $9
	CALL eosio_assert(((int_64)$9 != (int_64)0), [8959])
	$10 = ($0 + [8])
	$12 = *(($0 + [36]))
	$11 = *(($0 + [32]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($12 + [-24])
	$13 = *($7)
	if ( ((int_64)*($13) == (int_64)$9) ){ goto $label$5 }
	$12 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($13 + [72]) == (int_32)$10), [8544])
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035938066996920320, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$13 = CALL $71($10, $7)
	CALL eosio_assert(((int_32)*($13 + [72]) == (int_32)$10), [8544])
	
.LABEL $label$3
	$9 = *($0)
	*($6 + [28]) = $5
	*($6 + [24]) = $4
	CALL eosio_assert([1], [8674])
	CALL $72($10, $13, $9, ($6 + [24]))
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$2
	$9 = *($0)
	*($6 + [28]) = $1
	*($6 + [32]) = $4
	*($6 + [36]) = $5
	*($6 + [24]) = ($6 + [72])
	CALL $73(($6 + [16]), $10, $9, ($6 + [24]))
	$global$0 = ($6 + [80])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [64])
	$global$0 = $3
	$5 = *($1)
	$4 = CALL $121([9003])
	if ( ((int_32)$4 != (int_32)( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$3 }
	if ( (CALL $117($1, [0], [-1], [9003], $4) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_64)*($2 + [8]) != (int_64)1397703940) ){ goto $label$2 }
	$1 = ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) )
	$5 = [0]
	
.LOOP $label$4:
	$4 = ($1 + $5)
	$6 = ($5 + [1])
	$5 = $6
	if ( *($4) ){ goto $label$4 }
	$7 = (CASTING uint_64)(uint_32 ($6 + [-1]))
	$8 = (int_64)0
	$9 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$5:
	$11 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$7) ){ goto $label$6 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$5 = ($5 + [-91])
	goto $label$7 
	
.LABEL $label$8
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$10 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$9 
	
.LABEL $label$10
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$9
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$5 }
	$12 = ($0 + [248])
	$5 = *(($0 + [276]))
	$4 = *(($0 + [272]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$14:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)$10) ){ goto $label$13 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($6 + [8]) == (int_32)$12), [8544])
	if ( $6 ){ goto $label$11 }
	goto $label$2 
	
.LABEL $label$12
	$1 = CALL db_find_i64(*($12), *(($0 + [256])), (int_64)-5920782797423585936, $10)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $65($12, $1) + [8]) == (int_32)$12), [8544])
	
.LABEL $label$11
	$11 = ((int_64)*($2) * (int_64)500)
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9004])
	$8 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$8 = $9
	$5 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$8 = $9
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$4 = ($1 + [1])
	$1 = $4
	if ( $5 ){ goto $label$19 }
	$5 = [1]
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$5 = [0]
	
.LABEL $label$15
	CALL eosio_assert($5, [9053])
	*($3 + [8]) = (int_64)1397703946
	*($3) = $11
	*($3 + [56]) = $10
	$4 = ($0 + [168])
	*($3 + [48]) = $4
	CALL $58(($3 + [40]), ($3 + [48]), ($3 + [56]))
	$1 = *($3 + [44])
	if ( ($1 == 0) ){ goto $label$20 }
	$5 = ($3 + [8])
	
.LOOP $label$21:
	if ( ((int_64)*($1 + [8]) != (int_64)*($3 + [56])) ){ goto $label$20 }
	if ( ((int_64)*(($1 + [24])) == (int_64)*($5)) ){ goto $label$1 }
	CALL $59(($3 + [40]))
	$1 = *($3 + [44])
	if ( $1 ){ goto $label$21 }
	
.LABEL $label$20
	$8 = *($0)
	*($3 + [24]) = $0
	*($3 + [28]) = ($3 + [56])
	*($3 + [32]) = $3
	CALL $60(($3 + [16]), $4, $8, ($3 + [24]))
	
.LABEL $label$2
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	$1 = *($3 + [44])
	$8 = *($0)
	*($3 + [24]) = $3
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [8674])
	CALL $61(*($3 + [48]), $1, $8, ($3 + [24]))
	$global$0 = ($3 + [64])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8526])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8526])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8526])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8526])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [8526])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($4 + [49])
	*($2 + [8]) = ($4 + [48])
	*($2 + [16]) = ($4 + [50])
	*($2 + [20]) = ($4 + [51])
	*($2 + [24]) = ($4 + [52])
	*($2 + [28]) = ($4 + [53])
	*($2 + [32]) = ($4 + [54])
	*($2 + [36]) = ($4 + [55])
	*($2 + [40]) = ($4 + [56])
	*($2 + [44]) = ($4 + [57])
	*($2 + [48]) = ($4 + [58])
	*($2 + [52]) = ($4 + [59])
	*($2 + [56]) = ($4 + [60])
	*($2 + [60]) = ($4 + [61])
	*($2 + [64]) = ($4 + [62])
	*($2 + [68]) = ($4 + [63])
	*($2 + [72]) = ($4 + [64])
	*($2 + [76]) = ($4 + [65])
	*($2 + [80]) = ($4 + [66])
	*($2 + [88]) = ($4 + [68])
	*($2 + [84]) = ($4 + [67])
	*($2 + [92]) = ($4 + [69])
	*($2 + [96]) = ($4 + [70])
	*($2 + [100]) = ($4 + [71])
	*($2 + [104]) = ($4 + [72])
	*($2 + [108]) = ($4 + [73])
	*($2 + [112]) = ($4 + [74])
	*($2 + [116]) = ($4 + [75])
	*($2 + [120]) = ($4 + [76])
	*($2 + [124]) = ($4 + [77])
	*($2 + [128]) = ($4 + [78])
	*($2 + [132]) = ($4 + [79])
	*($2 + [136]) = ($4 + [80])
	*($2 + [140]) = ($4 + [81])
	*($2 + [144]) = ($4 + [82])
	*($2 + [148]) = ($4 + [83])
	*($2 + [152]) = ($4 + [84])
	*($2 + [156]) = ($4 + [85])
	*($2 + [164]) = ($4 + [87])
	*($2 + [160]) = ($4 + [86])
	*($2 + [168]) = ($4 + [88])
	*($2 + [172]) = ($4 + [89])
	*($2 + [176]) = ($4 + [90])
	*($2 + [180]) = ($4 + [91])
	*($2 + [184]) = ($4 + [92])
	*($2 + [188]) = ($4 + [93])
	*($2 + [192]) = ($4 + [94])
	*($2 + [196]) = ($4 + [95])
	*($2 + [200]) = ($4 + [96])
	*($2 + [204]) = ($4 + [97])
	*($2 + [208]) = ($4 + [98])
	*($2 + [212]) = ($4 + [99])
	*($2 + [216]) = ($4 + [100])
	*($2 + [220]) = ($4 + [101])
	*($2 + [224]) = ($4 + [102])
	*($2 + [228]) = ($4 + [103])
	*($2 + [232]) = ($4 + [104])
	*($2 + [240]) = ($4 + [106])
	*($2 + [236]) = ($4 + [105])
	*($2 + [244]) = ($4 + [107])
	*($2 + [248]) = ($4 + [108])
	*($2 + [252]) = ($4 + [109])
	*($2 + [256]) = ($4 + [110])
	*($2 + [260]) = ($4 + [111])
	*($2 + [264]) = ($4 + [112])
	*($2 + [268]) = ($4 + [113])
	CALL $103(($2 + [8]), $2)
	CALL $88(*($1), ($4 + [116]))
	*($2 + [8]) = $4
	CALL $106(($2 + [8]), $1)
	$global$0 = ($2 + [272])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($0 + [40])) = (int_64)1398362884
	CALL eosio_assert([1], [9004])
	$5 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9053])
	*(($0 + [56])) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [9004])
	$5 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$5 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9053])
	*($0 + [64]) = (int_64)0
	*($0 + [72 align=4]) = (int_64)0
	*(($0 + [80])) = [0]
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $100(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$2 = ($global$0 - [2304])
	$global$0 = $2
	*(($3 = (($2 + [1088]) + [16]))) = *(($1 + [32]))
	*(($4 = (($2 + [1088]) + [24]))) = *(($1 + [40]))
	*($2 + [1088]) = *($1 + [16])
	*($2 + [1096]) = *(($1 + [24]))
	$5 = *($1)
	CALL memcpy(($2 + [1022]), ($1 + [48]), [66])
	$6 = CALL $113(($2 + [1008]), ($1 + [116]))
	*(($7 = (($2 + [976]) + [24]))) = *(($1 + [152]))
	*(($8 = (($2 + [976]) + [16]))) = *(($1 + [144]))
	*($2 + [984]) = *(($1 + [136]))
	*($2 + [976]) = *($1 + [128])
	CALL memcpy(($2 + [910]), ($1 + [160]), [66])
	$9 = CALL $113(($2 + [896]), ($1 + [228]))
	*(($10 = (($2 + [864]) + [24]))) = *(($1 + [264]))
	*(($11 = (($2 + [864]) + [16]))) = *(($1 + [256]))
	*($2 + [872]) = *(($1 + [248]))
	*($2 + [864]) = *($1 + [240])
	CALL memcpy(($2 + [798]), ($1 + [272]), [66])
	$12 = CALL $113(($2 + [784]), ($1 + [340]))
	*(($13 = (($2 + [752]) + [24]))) = *(($1 + [376]))
	*(($14 = (($2 + [752]) + [16]))) = *(($1 + [368]))
	*($2 + [760]) = *(($1 + [360]))
	*($2 + [752]) = *($1 + [352])
	CALL memcpy(($2 + [686]), ($1 + [384]), [66])
	$15 = CALL $113(($2 + [672]), ($1 + [452]))
	*(($16 = (($2 + [640]) + [24]))) = *(($1 + [488]))
	*(($17 = (($2 + [640]) + [16]))) = *(($1 + [480]))
	*($2 + [648]) = *(($1 + [472]))
	*($2 + [640]) = *($1 + [464])
	CALL memcpy(($2 + [574]), ($1 + [496]), [66])
	$1 = CALL $113(($2 + [560]), ($1 + [564]))
	CALL memcpy(($2 + [1600]), ($2 + [574]), [66])
	*((($2 + [1568]) + [24])) = *($16)
	*((($2 + [1568]) + [16])) = *($17)
	*($2 + [1576]) = *($2 + [648])
	*($2 + [1568]) = *($2 + [640])
	CALL memcpy(($2 + [1496]), ($2 + [686]), [66])
	*((($2 + [1456]) + [24])) = *($13)
	*((($2 + [1456]) + [16])) = *($14)
	*($2 + [1464]) = *($2 + [760])
	*($2 + [1456]) = *($2 + [752])
	CALL memcpy(($2 + [1384]), ($2 + [798]), [66])
	*((($2 + [1344]) + [24])) = *($10)
	*((($2 + [1344]) + [16])) = *($11)
	*($2 + [1352]) = *($2 + [872])
	*($2 + [1344]) = *($2 + [864])
	CALL memcpy(($2 + [1272]), ($2 + [910]), [66])
	*((($2 + [1232]) + [24])) = *($7)
	*((($2 + [1232]) + [16])) = *($8)
	*($2 + [1240]) = *($2 + [984])
	*($2 + [1232]) = *($2 + [976])
	CALL memcpy(($2 + [1160]), ($2 + [1022]), [66])
	*((($2 + [1120]) + [24])) = *($4)
	*((($2 + [1120]) + [16])) = *($3)
	*($2 + [1128]) = *($2 + [1096])
	*($2 + [1120]) = *($2 + [1088])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($13 = (($2 + [2272]) + [24]))) = *((($2 + [1120]) + [24]))
	*(($14 = (($2 + [2272]) + [16]))) = *((($2 + [1120]) + [16]))
	*($2 + [2280]) = *($2 + [1128])
	*($2 + [2272]) = *($2 + [1120])
	CALL memcpy(($2 + [2200]), ($2 + [1160]), [66])
	$4 = CALL $113(($2 + [2184]), $6)
	*(($16 = (($2 + [2144]) + [24]))) = *((($2 + [1232]) + [24]))
	*(($17 = (($2 + [2144]) + [16]))) = *((($2 + [1232]) + [16]))
	*($2 + [2152]) = *($2 + [1240])
	*($2 + [2144]) = *($2 + [1232])
	CALL memcpy(($2 + [2072]), ($2 + [1272]), [66])
	$7 = CALL $113(($2 + [2056]), $9)
	*(($18 = (($2 + [2016]) + [24]))) = *((($2 + [1344]) + [24]))
	*(($19 = (($2 + [2016]) + [16]))) = *((($2 + [1344]) + [16]))
	*($2 + [2024]) = *($2 + [1352])
	*($2 + [2016]) = *($2 + [1344])
	CALL memcpy(($2 + [1944]), ($2 + [1384]), [66])
	$8 = CALL $113(($2 + [1928]), $12)
	*(($20 = (($2 + [1888]) + [24]))) = *((($2 + [1456]) + [24]))
	*(($21 = (($2 + [1888]) + [16]))) = *((($2 + [1456]) + [16]))
	*($2 + [1896]) = *($2 + [1464])
	*($2 + [1888]) = *($2 + [1456])
	CALL memcpy(($2 + [1816]), ($2 + [1496]), [66])
	$10 = CALL $113(($2 + [1800]), $15)
	*(($22 = (($2 + [1760]) + [24]))) = *((($2 + [1568]) + [24]))
	*(($23 = (($2 + [1760]) + [16]))) = *((($2 + [1568]) + [16]))
	*($2 + [1768]) = *($2 + [1576])
	*($2 + [1760]) = *($2 + [1568])
	CALL memcpy(($2 + [1688]), ($2 + [1600]), [66])
	$11 = CALL $113(($2 + [1672]), $1)
	*((($2 + [528]) + [24])) = *($13)
	*((($2 + [528]) + [16])) = *($14)
	*($2 + [536]) = *($2 + [2280])
	*($2 + [528]) = *($2 + [2272])
	CALL memcpy(($2 + [462]), ($2 + [2200]), [66])
	*((($2 + [416]) + [24])) = *($16)
	*((($2 + [416]) + [16])) = *($17)
	*($2 + [424]) = *($2 + [2152])
	*($2 + [416]) = *($2 + [2144])
	CALL memcpy(($2 + [350]), ($2 + [2072]), [66])
	*((($2 + [304]) + [24])) = *($18)
	*((($2 + [304]) + [16])) = *($19)
	*($2 + [312]) = *($2 + [2024])
	*($2 + [304]) = *($2 + [2016])
	CALL memcpy(($2 + [238]), ($2 + [1944]), [66])
	*((($2 + [192]) + [24])) = *($20)
	*((($2 + [192]) + [16])) = *($21)
	*($2 + [200]) = *($2 + [1896])
	*($2 + [192]) = *($2 + [1888])
	CALL memcpy(($2 + [126]), ($2 + [1816]), [66])
	*((($2 + [80]) + [24])) = *($22)
	*((($2 + [80]) + [16])) = *($23)
	*($2 + [88]) = *($2 + [1768])
	*($2 + [80]) = *($2 + [1760])
	CALL memcpy(($2 + [14]), ($2 + [1688]), [66])
	CALL void $3((int_32 $5), (int_64 ($2 + [528])), (int_32 ($2 + [462])), (int_32 $4), (int_32 ($2 + [416])), (int_32 ($2 + [350])), (int_32 $7), (int_32 ($2 + [304])), (int_32 ($2 + [238])), (int_32 $8), (int_32 ($2 + [192])), (int_32 ($2 + [126])), (int_32 $10), (int_32 ($2 + [80])), (int_32 ($2 + [14])), (int_32 $11), (int_32 $0))
	if ( (*($2 + [1672]) & [1]) ){ goto $label$20 }
	if ( (*($2 + [1800]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($2 + [1800]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($10 + [8]))
	$0 = [1]
	if ( ((*($2 + [1928]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$0 = [1]
	if ( (*($2 + [1928]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($2 + [2056]) & $0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [2056]) & $0) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($7 + [8]))
	$0 = [1]
	if ( ((*($2 + [2184]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$0 = [1]
	if ( (*($2 + [2184]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($1) & $0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & $0) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($1 + [8]))
	$1 = [1]
	if ( ((*($15) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$1 = [1]
	if ( (*($15) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($12) & $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($15 + [8]))
	if ( ((*($12) & $1) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($12 + [8]))
	$1 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($9) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($6) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($6) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [2304])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [2304])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$4 = (*($3) + [106])
	*(($3 = *($1))) = $4
	$5 = *($0 + [116])
	$0 = *($0)
	$6 = (CASTING uint_64)(uint_32 ( *(($0 + [120])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$5 = *(($0 + [116]))
	$5 = ( *(($0 + [120])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$2 }
	$4 = ($5 + $4)
	*($3) = $4
	
.LABEL $label$2
	$4 = ($4 + [98])
	*($3) = $4
	$5 = *($0 + [228])
	$6 = (CASTING uint_64)(uint_32 ( *(($0 + [232])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($3) = $4
	$5 = *(($0 + [228]))
	$5 = ( *(($0 + [232])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($5 + $4)
	*($3) = $4
	
.LABEL $label$4
	*($3) = ($4 + [32])
	*($2 + [8]) = $0
	CALL $105(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}