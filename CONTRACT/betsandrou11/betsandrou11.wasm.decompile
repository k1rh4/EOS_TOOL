(data (i32.const 8192) "Invalid hex character\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8223) "invalid sha256\00")
(data (i32.const 8238) "invalid sha1\00")
(data (i32.const 8251) "invalid first pos\00")
(data (i32.const 8269) "parse memo error\00stoull\00")
(data (i32.const 8293) "transfer\00")
(data (i32.const 8302) "invalid token transfer\00")
(data (i32.const 17032) "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\00: no conversion\00")
(data (i32.const 17113) "%x\00: out of range\00")
(data (i32.const 17131) "buffer overflow when serializing bets map\00")
(data (i32.const 17173) "|")
(data (i32.const 17174) "too many bet entries\00")
(data (i32.const 17195) "parsing multiple error\00")
(data (i32.const 17218) "betting string too short\00")
(data (i32.const 17243) "invalid betting sub type\00")
(data (i32.const 17268) "too big multiple\00")
(data (i32.const 17285) "invalid betting position\00")
(data (i32.const 17312) "\01\03\05\07\t\0c\0e\10\12\13\15\17\19\1b\1e \"$\02\04\06\08\n\0b\0d\0f\11\14\16\18\1a\1c\1d\1f!#")
(data (i32.const 17348) "invalid betting multiple\00")
(data (i32.const 17376) "\00 \0f\13\04\15\02\19\11\"\06\1b\0d$\0b\1e\08\17\n\05\18\10!\01\14\0e\1f\t\16\12\1d\07\1c\0c#\03\1a")
(data (i32.const 17413) "invalid betting type\00")
(data (i32.const 17434) "betting quantity mismatch\00")
(data (i32.const 17460) "exceeded max payout\00")
(data (i32.const 17480) "illegal betting quantity\00")
(data (i32.const 17505) "exceeded betting limit\00")
(data (i32.const 17528) "betsandrou22\00")
(data (i32.const 17541) "active\00")
(data (i32.const 17548) "betsandfunds\00")
(data (i32.const 17561) "result\00")
(data (i32.const 17568) "Transfer bonus\00")
(data (i32.const 17583) "referrer can not be self\00")
(data (i32.const 17608) "seed hash not found\00")
(data (i32.const 17628) "receipt\00")
(data (i32.const 17636) "betsandrou11\00")
(data (i32.const 17649) "from must not greater than to\00")
(data (i32.const 17679) "rows must not more than 100\00")
(data (i32.const 17707) "bets\00")
(data (i32.const 17712) "seedhashes\00")
(data (i32.const 17723) "results\00")
(data (i32.const 17731) "invalid table name\00")
(data (i32.const 17750) "too few hashes\00")
(data (i32.const 17765) "no seed hash\00")
(data (i32.const 17778) "no expiration\00")
(data (i32.const 17792) "temp\00")
(data (i32.const 17797) "string is too long to be a valid name\00")
(data (i32.const 17835) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17902) "character is not in allowed character set for names\00")
(data (i32.const 17954) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18005) "error reading iterator\00")
(data (i32.const 18028) "read\00")
(data (i32.const 18033) "cannot pass end iterator to erase\00")
(data (i32.const 18067) "cannot increment end iterator\00")
(data (i32.const 18097) "object passed to erase is not in multi_index\00")
(data (i32.const 18142) "cannot erase objects in table of another contract\00")
(data (i32.const 18192) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18245) "not in stopped state\00")
(data (i32.const 18266) "object passed to modify is not in multi_index\00")
(data (i32.const 18312) "cannot modify objects in table of another contract\00")
(data (i32.const 18363) "write\00")
(data (i32.const 18369) "cannot create objects in table of another contract\00")
(data (i32.const 18420) "not in running state\00")
(data (i32.const 18441) "singleton does not exist\00")
(data (i32.const 18480) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff>\00\00\00\ff\ff\ff\ff>\00\00\00\ff\ff\ff\ff?\00\00\004\00\00\005\00\00\006\00\00\007\00\00\008\00\00\009\00\00\00:\00\00\00;\00\00\00<\00\00\00=\00\00\00\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\n\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00\0f\00\00\00\10\00\00\00\11\00\00\00\12\00\00\00\13\00\00\00\14\00\00\00\15\00\00\00\16\00\00\00\17\00\00\00\18\00\00\00\19\00\00\00\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff?\00\00\00\ff\ff\ff\ff\1a\00\00\00\1b\00\00\00\1c\00\00\00\1d\00\00\00\1e\00\00\00\1f\00\00\00 \00\00\00!\00\00\00\"\00\00\00#\00\00\00$\00\00\00%\00\00\00&\00\00\00\'\00\00\00(\00\00\00)\00\00\00*\00\00\00+\00\00\00,\00\00\00-\00\00\00.\00\00\00/\00\00\000\00\00\001\00\00\002\00\00\003\00\00\00\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 18992) "bet not found\00")
(data (i32.const 19006) "get\00")
(data (i32.const 19010) "invalid token\00")
(data (i32.const 19024) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 19073) "invalid symbol name\00")
(data (i32.const 19093) "bet id:\00")
(data (i32.const 19101) " player: \00")
(data (i32.const 19111) " winner! - roulette\00")
(data (i32.const 19132) "\c0J\00\00")
(data (i32.const 19136) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 19169) "fund unlock error\00")
(data (i32.const 19187) "attempt to subtract asset with different symbol\00")
(data (i32.const 19235) "subtraction underflow\00")
(data (i32.const 19257) "subtraction overflow\00")
(data (i32.const 19278) "divide by zero\00")
(data (i32.const 19293) "signed division overflow\00")
(data (i32.const 19318) "multiplication overflow\00")
(data (i32.const 19342) "multiplication underflow\00")
(data (i32.const 19367) "|\00")
(data (i32.const 19369) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 19423) "cannot decrement iterator at beginning of table\00")
(data (i32.const 19471) "invalid memo\00")
(data (i32.const 19484) "no betting content\00")
(data (i32.const 19503) "no user seed hash\00")
(data (i32.const 19521) "no nonce\00")
(data (i32.const 19530) "error when parsing nonce data\00")
(data (i32.const 19560) "not allowed symbol\00")
(data (i32.const 19579) "quantity invalid\00")
(data (i32.const 19596) "transfer quantity must be multiple of min amount\00")
(data (i32.const 19645) "transfer quantity must be equal or greater than min amount\00")
(data (i32.const 19704) "fund pool overdraw\00")
(data (i32.const 19723) "unable to find key\00")
(data (i32.const 19742) "server side error! need more seed hash!\00")
(data (i32.const 19782) "next primary key in table is at autoincrement limit\00")
(data (i32.const 19835) "sevenresult\00")
(data (i32.const 19847) "betsand roulette seven game round #\00")
(data (i32.const 19883) " winner \00")
(data (i32.const 19892) " !\00")
(data (i32.const 19895) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 19954) "attempt to add asset with different symbol\00")
(data (i32.const 19997) "addition underflow\00")
(data (i32.const 20016) "addition overflow\00")
(data (i32.const 20048) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 20128) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 20385) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$3 (param i32 i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$5 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$11 (param i64)))
(import "env" "assert_sha256" (func $fimport$12 (param i32 i32 i32)))
(import "env" "__multi3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_recipient" (func $fimport$16 (param i64)))
(import "env" "sha512" (func $fimport$17 (param i32 i32 i32)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$20 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$21 (param i32)))
(import "env" "send_deferred" (func $fimport$22 (param i32 i64 i32 i32 i32)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$24 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$25 (param i32 i64 i32 i32)))
(import "env" "db_previous_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$27 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$28 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "abort" (func $fimport$29))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$40 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$41 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$44 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$46 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$47 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$48 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $4))
(export "_Znwj" (func $130))
(export "_ZdlPv" (func $132))
(export "_Znaj" (func $131))
(export "_ZdaPv" (func $133))
(export "_ZnwjSt11align_val_t" (func $134))
(export "_ZnajSt11align_val_t" (func $135))
(export "_ZdlPvSt11align_val_t" (func $136))
(export "_ZdaPvSt11align_val_t" (func $137))
(table $0 16 16 anyfunc)
(elem (i32.const 1) $6 $8 $10 $12 $13 $15 $16 $18 $20 $22 $23 $25 $82 $161 $163)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20471))
(global $global$2 i32 (i32.const 20471))


int_32 .FUNC $174 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$5 = ($global$0 - [384])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$2 = *($4)
	$7 = CALL $174([17568])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$2 }
	if ( (CALL $148($4, [0], [-1], [17568], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($5 + [368]) = [0]
	*($5 + [360]) = (int_64)0
	*($5 + [304]) = (int_64)0
	$4 = CALL $139(($5 + [288]), $4)
	CALL $29($0, $4, ($5 + [360]), ($5 + [320]), ($5 + [312]), ($5 + [304]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$3
	$4 = ($3 + [8])
	$8 = *($3 + [8])
	if ( ((int_64)$8 <= (int_64)293370680067) ){ goto $label$8 }
	if ( ((int_64)$8 == (int_64)293370680068) ){ goto $label$7 }
	if ( ((int_64)$8 == (int_64)293455873288) ){ goto $label$6 }
	if ( ((int_64)$8 != (int_64)310651471112) ){ goto $label$5 }
	$6 = (int_64)100000
	goto $label$4 
	
.LABEL $label$8
	$6 = (int_64)1000
	if ( ((int_64)$8 == (int_64)1397703940) ){ goto $label$4 }
	if ( ((int_64)$8 != (int_64)289176438024) ){ goto $label$5 }
	$6 = (int_64)10000
	goto $label$4 
	
.LABEL $label$7
	$6 = (int_64)1000000
	goto $label$4 
	
.LABEL $label$6
	$6 = (int_64)10000000
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [19010])
	$6 = (int_64)2147483647
	
.LABEL $label$4
	CALL $30($0, $3, $6)
	$8 = *($3)
	CALL $31(($5 + [96]), $0, $4)
	CALL $32(($5 + [272]), ($5 + [360]), (CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)$6)), (CASTING uint_32)(uint_64 ((uint_64)((int_64)*($5 + [96]) / (int_64)20) / (uint_64)$6)))
	CALL eosio_assert(((int_64)*($5 + [304]) != (int_64)*($1)), [17583])
	$6 = CALL $33($0)
	$9 = ($0 + [112])
	$2 = *(($0 + [140]))
	$10 = *(($0 + [136]))
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$12:
	$4 = ($2 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$6) ){ goto $label$11 }
	$2 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$10 }
	if ( ((int_32)*($7 + [48]) == (int_32)$9) ){ goto $label$9 }
	CALL eosio_assert([0], [17954])
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	$4 = CALL db_find_i64(*($9), *(($0 + [120])), (int_64)-4425746941110517760, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $34($9, $4)
	if ( ((int_32)*($7 + [48]) == (int_32)$9) ){ goto $label$9 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17608])
	$6 = CALL $35($0)
	*((($5 + [96]) + [32])) = *(($3 + [8]))
	*($5 + [96]) = $6
	*($5 + [104]) = *($1)
	*($5 + [112]) = *($5 + [304])
	*($5 + [120]) = *($3)
	$1 = CALL $139((($5 + [96]) + [40]), ($5 + [360]))
	$2 = CALL $139(($5 + [148]), ($5 + [272]))
	*(($5 + [184])) = *(($7 + [40]))
	*(($5 + [176])) = *(($7 + [32]))
	*(($5 + [168])) = *(($7 + [24]))
	*(($5 + [200])) = *($5 + [328])
	$6 = *($7 + [16])
	*(($5 + [208])) = *(($5 + [336]))
	*(($5 + [216])) = *((($5 + [320]) + [24]))
	*($5 + [160]) = $6
	*($5 + [192]) = *($5 + [320])
	*($5 + [224]) = *($5 + [312])
	$6 = CALL current_time()
	*($5 + [240]) = (int_64)0
	*($5 + [232]) = $6
	*($5 + [248]) = (int_64)0
	*($5 + [256]) = (int_64)0
	CALL $36($0, ($5 + [96]))
	$6 = *($0)
	*($5 + [376]) = ($5 + [96])
	CALL $37(($5 + [56]), ($0 + [32]), $6, ($5 + [376]))
	if ( $7 ){ goto $label$13 }
	CALL eosio_assert([0], [18033])
	CALL eosio_assert([0], [18067])
	
.LABEL $label$13
	$4 = CALL db_next_i64(*($7 + [52]), ($5 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$14 }
	CALL $34($9, $4)
	
.LABEL $label$14
	CALL $38($9, $7)
	CALL $39($0, $3)
	if ( (*($2) & [1]) ){ goto $label$16 }
	*($2) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*(($5 + [156]))) = [0]
	*(($5 + [152])) = [0]
	
.LABEL $label$15
	$6 = *($0)
	*($5 + [40]) = [17541]
	*($5 + [44]) = CALL $174([17541])
	*($5 + [16]) = *($5 + [40])
	$8 = *(CALL $5(($5 + [48]), ($5 + [16])))
	$11 = *($0)
	*($5 + [24]) = [17628]
	*($5 + [28]) = CALL $174([17628])
	*($5 + [8]) = *($5 + [24])
	$4 = CALL $5(($5 + [32]), ($5 + [8]))
	*($5 + [56]) = $11
	*($5 + [64]) = *($4)
	*(($4 = CALL _Znwj([16]))) = $6
	*($4 + [8]) = $8
	$0 = ($4 + [16])
	*(($5 + [80])) = $0
	*(($5 + [76])) = $0
	*($5 + [72]) = $4
	CALL $40(($5 + [84]), ($5 + [96]))
	CALL $41(($5 + [56]))
	$4 = *($5 + [84])
	if ( ($4 == 0) ){ goto $label$17 }
	*(($5 + [88])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$4 = *($5 + [72])
	if ( ($4 == 0) ){ goto $label$18 }
	*(($5 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$18
	if ( (*($2) & [1]) ){ goto $label$24 }
	if ( (*($1) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL _ZdlPv(*(($5 + [156])))
	if ( ((*($1) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($5 + [144])))
	$4 = [1]
	if ( ((*($5 + [272]) & [1]) == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$4 = [1]
	if ( (*($5 + [272]) & [1]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ((*($5 + [360]) & $4) == 0) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$20
	CALL _ZdlPv(*($5 + [280]))
	if ( ((*($5 + [360]) & $4) == 0) ){ goto $label$1 }
	
.LABEL $label$19
	CALL _ZdlPv(*(($5 + [368])))
	
.LABEL $label$1
	$global$0 = ($5 + [384])
}

void .FUNC $176 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $177 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $157())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $178($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_64 .FUNC $170 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $167($3, (int_64)0)
	$4 = CALL $169($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $171 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $167($3, (int_64)0)
	$4 = CALL $169($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $172 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [512])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $179($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [400]) + [24]))) = (int_64)0
	*((($4 + [400]) + [40])) = [0]
	*($4 + [408]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [388]) = $2
	*($4 + [384]) = $2
	*($4 + [392]) = ($2 + $7)
	*($4 + [480]) = ($4 + [384])
	*($4 + [24]) = ($4 + [400])
	CALL $27(($4 + [24]), ($4 + [480]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [392])
	*($4 + [8]) = *($4 + [384])
	$9 = *($3)
	*((($4 + [448]) + [8])) = $9
	*(($3 = (($4 + [464]) + [8]))) = $9
	$10 = *($4 + [8])
	*($4 + [464]) = $10
	*($4 + [448]) = $10
	$11 = *($3)
	*(($9 = (($4 + [480]) + [8]))) = $11
	*((($4 + [24]) + [24])) = $11
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [464])
	*($4 + [40]) = $1
	*($4 + [480]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [296]) = [300]
	*($4 + [300]) = [44]
	*($4 + [304]) = (int_64)85899346660
	*($4 + [312]) = (int_64)4294968296
	*($4 + [320]) = [37]
	*($4 + [328]) = (int_64)10000
	*($4 + [336]) = (int_64)2147483648001
	*($4 + [344]) = (int_64)420000000
	*($4 + [352]) = (int_64)77
	*($4 + [360]) = (int_64)170000
	*($4 + [368]) = (int_64)17
	*($4 + [376]) = [7]
	*($3) = *($8)
	*($4 + [464]) = *($4 + [416])
	$0 = *($4 + [408])
	$1 = *($4 + [400])
	$8 = CALL $139(($4 + [448]), ($4 + [432]))
	*($9) = *($3)
	*($4 + [504]) = $1
	*($4 + [496]) = $0
	*($4 + [480]) = *($4 + [464])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [504])), (int_32 ($4 + [496])), (int_32 ($4 + [480])), (int_32 $8), (int_32 $6))
	if ( ((*($4 + [448]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $183($2)
	
.LABEL $label$6
	CALL $28(($4 + [24]))
	if ( ((*($4 + [432]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [440])))
	
.LABEL $label$7
	$global$0 = ($4 + [512])
	return [1]
}

int_32 .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $179($1)
	
.LABEL $label$2
	*(CALL $157()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $179(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $183($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL memory()
	*($3 + [208]) = [8293]
	*($3 + [212]) = CALL $174([8293])
	*($3 + [104]) = *($3 + [208])
	if ( ((int_64)*(CALL $5(($3 + [216]), ($3 + [104]))) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)-4492738244669860560) ){ goto $label$4 }
	if ( ((int_64)$1 == (int_64)6138663591592764928) ){ goto $label$4 }
	if ( ((int_64)$1 != (int_64)4301877912145143680) ){ goto $label$3 }
	
.LABEL $label$4
	*($3 + [204]) = [0]
	*($3 + [200]) = [1]
	*($3 + [96]) = *($3 + [200])
	CALL $7($0, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8302])
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-4416155766402580481) ){ goto $label$14 }
	if ( ((int_64)$2 > (int_64)-4416155591284097025) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-4416155766402580480) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4416155616447008256) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-4416155591517519872) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [2]
	*($3 + [72]) = *($3 + [128])
	CALL $9($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 <= (int_64)-4997502814849204225) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-4997502814849204224) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-4994024814571159552) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [3]
	*($3 + [16]) = *($3 + [184])
	CALL $11($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-4416155591284097024) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)3626193066236313600) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [4]
	*($3 + [24]) = *($3 + [176])
	CALL $9($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4999782099160276320) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [40]) = *($3 + [160])
	CALL $14($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [140]) = [0]
	*($3 + [136]) = [6]
	*($3 + [64]) = *($3 + [136])
	CALL $9($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [116]) = [0]
	*($3 + [112]) = [7]
	*($3 + [88]) = *($3 + [112])
	CALL $17($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [148]) = [0]
	*($3 + [144]) = [8]
	*($3 + [56]) = *($3 + [144])
	CALL $19($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [156]) = [0]
	*($3 + [152]) = [9]
	*($3 + [48]) = *($3 + [152])
	CALL $21($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [124]) = [0]
	*($3 + [120]) = [10]
	*($3 + [80]) = *($3 + [120])
	CALL $9($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [172]) = [0]
	*($3 + [168]) = [11]
	*($3 + [32]) = *($3 + [168])
	CALL $24($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [196]) = [0]
	*($3 + [192]) = [12]
	*($3 + [8]) = *($3 + [192])
	CALL $26($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $158([0])
	$global$0 = ($3 + [224])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [17797])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [17902])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17835])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17902])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [18363])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8251])
	$2 = CALL $147($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $140($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [8269])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $143($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = *($2 + [8])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$4 }
	$5 = [0]
	$6 = *([0] + [19132])
	
.LOOP $label$6:
	*((($3 + [16]) + ($7 = $5))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$5 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$5 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	*($0) = [0]
	$7 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	$8 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$2
	$8 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$7:
	*(($6 + $7)) = *((($3 + [16]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	$7 = ($6 + $5)
	
.LABEL $label$1
	$5 = [0]
	*($7) = [0]
	CALL $144($0, [19367])
	$4 = *($2 + [16])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$11 }
	$6 = *([0] + [19132])
	
.LOOP $label$13:
	*((($3 + [16]) + ($7 = $5))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$5 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$12 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$10 }
	*($3 + [48]) = ($5 << [1])
	$6 = (($3 + [48]) | [1])
	goto $label$9 
	
.LABEL $label$11
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [48]) = [0]
	$7 = (($3 + [48]) | [1])
	$5 = $7
	goto $label$8 
	
.LABEL $label$10
	$8 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($3 + [48]) = ($8 | [1])
	*($3 + [56]) = $6
	*($3 + [52]) = $5
	
.LABEL $label$9
	$8 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$14:
	*(($6 + $7)) = *((($3 + [16]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$14 }
	$5 = ($6 + $5)
	$7 = (($3 + [48]) | [1])
	
.LABEL $label$8
	*($5) = [0]
	$5 = *($3 + [48])
	$6 = ($5 & [1])
	CALL $145($0, ( *($3 + [56]) ? $7 : $6 ), ( *($3 + [52]) ? uint_32($5 >> [1]) : $6 ))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$15
	CALL $144($0, [19367])
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = [0]
	$6 = (($3 + [48]) | [1])
	$4 = *($2)
	
.LOOP $label$16:
	$9 = ((uint_64)$4 / (uint_64)(int_64)10)
	$7 = (CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$9 * (int_64)10))
	CALL $1(($3 + [16]), int_32((( ($7) | [48]) ? ($7 + [55]) : ($7 <= [10]) ) << [24]) >> [24]), ($3 + [48]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$18 }
	*($3 + [48]) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*((($3 + [48]) + [8]))) = [0]
	*($3 + [52]) = [0]
	
.LABEL $label$17
	CALL $143(($3 + [48]), [0])
	*((($3 + [48]) + [8])) = *((($3 + [16]) + [8]))
	*($3 + [48]) = *($3 + [16])
	$7 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $9
	if ( $7 ){ goto $label$16 }
	$7 = *($3 + [48])
	$8 = ($7 & [1])
	$5 = (($3 + [48]) + [8])
	CALL $145($0, ( *($5) ? $6 : $8 ), ( *($3 + [52]) ? uint_32($7 >> [1]) : $8 ))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$19
	CALL $144($0, [19367])
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = [0]
	$4 = *($1 + [304])
	$4 = (int_64))(((uint_64)((int_64)$4 * (int_64)*($1 + [292])) / (uint_64)*($1 + [296])) - ((uint_64)((int_64)$4 * (int_64)*($1 + [312])) / (uint_64)*($1 + [316])))
	$6 = (($3 + [48]) | [1])
	
.LOOP $label$20:
	$9 = ((uint_64)$4 / (uint_64)(int_64)10)
	$7 = (CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$9 * (int_64)10))
	CALL $1(($3 + [16]), int_32((( ($7) | [48]) ? ($7 + [55]) : ($7 <= [10]) ) << [24]) >> [24]), ($3 + [48]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$22 }
	*($3 + [48]) = [0]
	goto $label$21 
	
.LABEL $label$22
	*(*($5)) = [0]
	*($3 + [52]) = [0]
	
.LABEL $label$21
	CALL $143(($3 + [48]), [0])
	*($5) = *((($3 + [16]) + [8]))
	*($3 + [48]) = *($3 + [16])
	$7 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $9
	if ( $7 ){ goto $label$20 }
	$7 = *($3 + [48])
	$8 = ($7 & [1])
	$5 = (($3 + [48]) + [8])
	CALL $145($0, ( *($5) ? $6 : $8 ), ( *($3 + [52]) ? uint_32($7 >> [1]) : $8 ))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$23
	CALL $144($0, [19367])
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = [0]
	$6 = (($3 + [48]) | [1])
	$4 = *($2 + [24])
	
.LOOP $label$24:
	$9 = ((uint_64)$4 / (uint_64)(int_64)10)
	$7 = (CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$9 * (int_64)10))
	CALL $1(($3 + [16]), int_32((( ($7) | [48]) ? ($7 + [55]) : ($7 <= [10]) ) << [24]) >> [24]), ($3 + [48]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$26 }
	*($3 + [48]) = [0]
	goto $label$25 
	
.LABEL $label$26
	*(*($5)) = [0]
	*($3 + [52]) = [0]
	
.LABEL $label$25
	CALL $143(($3 + [48]), [0])
	*($5) = *((($3 + [16]) + [8]))
	*($3 + [48]) = *($3 + [16])
	$7 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $9
	if ( $7 ){ goto $label$24 }
	$7 = *($3 + [48])
	$5 = ($7 & [1])
	$8 = ($3 + [56])
	CALL $145($0, ( *($8) ? $6 : $5 ), ( *($3 + [52]) ? uint_32($7 >> [1]) : $5 ))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$27
	CALL $144($0, [19367])
	*($3) = *($2 + [136])
	CALL $164(($3 + [16]), [20], [17113], $3)
	CALL $144($0, ($3 + [16]))
	$global$0 = ($3 + [64])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	if ( ((int_64)*($1 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	*($2 + [24]) = (int_64)1397703940
	*($2 + [16]) = (int_64)0
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$3 = $5
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$3 = $5
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$6 }
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [19073])
	
.LABEL $label$2
	$4 = ($0 + [72])
	CALL $86($2, $4, *($0), ($2 + [16]))
	if ( ((int_64)*(($1 + [8])) == (int_64)*($2 + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [19187])
	
.LABEL $label$7
	$3 = (int_64)
	*($2) = $3(*($2) - *($1)))
	if ( ((int_64)$3 > (int_64)-4611686018427387904) ){ goto $label$8 }
	CALL eosio_assert([0], [19235])
	$3 = *($2)
	
.LABEL $label$8
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$9 }
	CALL eosio_assert([0], [19257])
	$3 = *($2)
	
.LABEL $label$9
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [19169])
	CALL $87($4, $2, *($0))
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC memory ()
{
	CALL $129()
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [32])
	$3 = *($1)
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)$3) ){ goto $label$3 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	if ( ((int_32)*($6 + [168]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [17954])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$1 = CALL db_find_i64(*($2), *(($0 + [40])), (int_64)4229865212519383040, $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $76($2, $1)
	if ( ((int_32)*($6 + [168]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18992])
	return $6
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $69(*($1), *($0 + [16]))
	CALL $69(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]) ){ goto $label$6 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[19]) ){ goto $label$7 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [20])
	*(($4 = ($4 + [4]))) = (*($4) + [20])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [48])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [18028])
	$1 = *(($0 + [4]))
	
.LABEL $label$12
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $58($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $85(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [40])
	$4 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-132] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [40])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [52])
	$4 = ( *(($1 + [56])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = ($3 - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$7 = ($1 + [52])
	
.LOOP $label$2:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $58($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	
.LABEL $label$3
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	*($2 + [16]) = $2
	*($2 + [40]) = $6
	*($2 + [44]) = $7
	*($2 + [24]) = $1
	*($2 + [28]) = ($1 + [8])
	*($2 + [32]) = ($1 + [16])
	*($2 + [36]) = ($1 + [24])
	*($2 + [48]) = ($1 + [64])
	*($2 + [52]) = ($1 + [96])
	*($2 + [56]) = ($1 + [128])
	*($2 + [60]) = ($1 + [136])
	*($2 + [64]) = ($1 + [144])
	*($2 + [68]) = ($1 + [152])
	*($2 + [72]) = ($1 + [160])
	CALL $126(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $58($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $84(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $174([19093])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [19093], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = [0]
	$5 = (($3 + [16]) | [1])
	$7 = *($2)
	
.LOOP $label$6:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [32]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [16]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$8 }
	*($3 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$7
	CALL $143(($3 + [16]), [0])
	*((($3 + [16]) + [8])) = *((($3 + [32]) + [8]))
	*($3 + [16]) = *($3 + [32])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$6 }
	$4 = *($3 + [16])
	$6 = ($4 & [1])
	CALL $145($0, ( *((($3 + [16]) + [8])) ? $5 : $6 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $6 ))
	CALL $144($0, [19101])
	$7 = *($2 + [8])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$12 }
	$5 = [0]
	$2 = *([0] + [19132])
	
.LOOP $label$14:
	*((($3 + [32]) + ($4 = $5))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$13 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$11 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$5 = $4
	goto $label$9 
	
.LABEL $label$11
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $5
	
.LABEL $label$10
	$6 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$15:
	*(($2 + $4)) = *((($3 + [32]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$15 }
	$5 = ($2 + $5)
	$4 = ($3 | [1])
	
.LABEL $label$9
	*($5) = [0]
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $145($0, ( *($3 + [8]) ? $4 : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	CALL $144($0, [19111])
	if ( (*($3) & [1]) ){ goto $label$17 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [8])))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($3 + [24])))
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = [0]
	*($2 + [28]) = [0]
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$4 = CALL $81($0, ($2 + [16]), [17173], ($2 + [28]))
	*($2 + [28]) = $4
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$1 }
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	CALL eosio_assert(($3 <= [37]), [17174])
	$7 = ($7 & [1])
	$7 = *($2 + [16])
	if ( (( *($2 + [20]) ? uint_32($7 >> [1]) : $7 ) == 0) ){ goto $label$4 }
	$7 = CALL $171(( *($6) ? $5 : $7 ), ($2 + [12]), [16])
	$8 = *($2 + [16])
	$9 = ($8 & [1])
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)(( *($6) ? $5 : $9 ) + ( *($2 + [20]) ? uint_32($8 >> [1]) : $9 ))), [17195])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	*($1) = $7
	*($2 + [28]) = ($4 + [1])
	$4 = CALL $81($0, ($2 + [16]), [17173], ($2 + [28]))
	*($2 + [28]) = $4
	$1 = ($1 + [4])
	$3 = ($3 + [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$5
	$global$0 = ($2 + [32])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memcpy(($3 + [112]), $1, [20])
	CALL memcpy((($3 + [112]) + [20]), $0, [32])
	$4 = *($2)
	*($3 + [111]) = $4
	*($3 + [104]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($3 + [105]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($3 + [106]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($3 + [107]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($3 + [108]) = (uint_64)$4 >> (uint_64)(int_64)24)
	*($3 + [109]) = (uint_64)$4 >> (uint_64)(int_64)16)
	*($3 + [110]) = (uint_64)$4 >> (uint_64)(int_64)8)
	CALL memcpy(($3 + [164]), ($3 + [104]), [8])
	CALL sha512(($3 + [112]), [60], ($3 + [32]))
	CALL ripemd160(($3 + [32]), [64], $3)
	$4 = *($3 + [5])
	$5 = *($3 + [6])
	$6 = *($3 + [7])
	$7 = *($3 + [4])
	$8 = *($3 + [1])
	$9 = *($3 + [2])
	$10 = *($3 + [3])
	$11 = *($3)
	$12 = *($3 + [9])
	$13 = *($3 + [10])
	$14 = *($3 + [11])
	$15 = *($3 + [8])
	$16 = *($3 + [13])
	$17 = *($3 + [14])
	$18 = *($3 + [15])
	$19 = *($3 + [12])
	$20 = *($3 + [17])
	$21 = *($3 + [18])
	$22 = *($3 + [19])
	$23 = *($3 + [16])
	$global$0 = ($3 + [176])
	return *((([36] - ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)((int_64)((int_64)((int_64)((int_64)$22 | (int_64)((int_64)$21 << (int_64)8)) | (int_64)((int_64)$20 << (int_64)16)) | (int_64)((int_64)$23 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)$18 | (int_64)((int_64)$17 << (int_64)8)) | (int_64)((int_64)$16 << (int_64)16)) | (int_64)((int_64)$19 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)$14 | (int_64)((int_64)$13 << (int_64)8)) | (int_64)((int_64)$12 << (int_64)16)) | (int_64)((int_64)$15 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)$6 | (int_64)((int_64)$5 << (int_64)8)) | (int_64)((int_64)$4 << (int_64)16)) | (int_64)((int_64)$7 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)$10 | (int_64)((int_64)$9 << (int_64)8)) | (int_64)((int_64)$8 << (int_64)16)) | (int_64)((int_64)$11 << (int_64)24)) % (uint_64)(int_64)303067) * (int_64)204839)) % (uint_64)(int_64)303067) * (int_64)204839)) % (uint_64)(int_64)303067) * (int_64)204839)) % (uint_64)(int_64)303067) * (int_64)204839)) % (uint_64)(int_64)303067)) / (uint_32)[8191])) + [17376]))
}

void .FUNC $167 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $166 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $165($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $165 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $160([15], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $162 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [14] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $162($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $162($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $162($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $162($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [20048]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $162($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $162($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $162($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_64 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $168($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $157()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $168($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [20129]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $167($0, (int_64)0)
	*(CALL $157()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $168($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $168($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $168($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $168($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [20129])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [20129]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20129]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $168($0)
	$5 = *(($6 + [20129]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $168($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [20129]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8214]))
	$8 = (int_64)0
	$5 = *(($6 + [20129]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20129]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $168($0)
	$5 = *(($6 + [20129]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $168($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [20129]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $167($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [20129]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [20129]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $168($0) + [20129]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $157()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $157()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $157()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $168 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $166($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $175 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $155($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [80])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [40])
	$1 = ( *(($4 + [44])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [149])
	$10 = (CASTING uint_64)(uint_32 $1)
	$1 = ($4 + [40])
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$6 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $58($9, $2)
	$6 = *($6)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [12]) = $2
	*($5 + [8]) = $2
	*($5 + [16]) = $6
	*($5 + [24]) = ($5 + [8])
	*($5 + [48]) = $1
	*($5 + [32]) = $4
	*($5 + [36]) = ($4 + [8])
	*($5 + [40]) = ($4 + [16])
	*($5 + [44]) = ($4 + [24])
	*($5 + [52]) = ($4 + [52])
	*($5 + [56]) = ($4 + [64])
	*($5 + [60]) = ($4 + [96])
	*($5 + [64]) = ($4 + [128])
	*($5 + [68]) = ($4 + [160])
	*($5 + [72]) = ($4 + [176])
	$12 = ($7 + [40])
	CALL $60(($5 + [32]), ($5 + [24]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [80])
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$6 = ($5 + ((int_32)$6 * (int_32)[40]))
	$5 = CALL $47($6, $1, *($2), *($3), $4)
	$10 = ($5 + [40])
	$8 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	$11 = ($8 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$5 = ($7 + $1)
	*((($8 = ($6 + $1)) + [-32])) = *(($5 + [-32]))
	*(($8 + [-40])) = *(($5 + [-40]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($3 = ($8 + [-16]))) = [0]
	$4 = ($5 + [-24])
	*($2) = *($4)
	$2 = ($5 + [-16])
	*($3) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*(($8 = ($8 + [-4]))) = [0]
	$3 = ($5 + [-12])
	*($2) = *($3)
	*($4) = (int_64)0
	$5 = ($5 + [-4])
	*($8) = *($5)
	*($5) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$5 = ($6 + $1)
	$8 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $8
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = *(($8 + [-12]))
	if ( ($5 == 0) ){ goto $label$10 }
	*(($8 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = ($8 + [-40])
	$1 = *(($8 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($8 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [256])
	$global$0 = $3
	if ( ((int_32)*($0 + [352]) != (int_32)$2) ){ goto $label$1 }
	if ( ((int_64)*(($1 + [32])) != (int_64)1397703940) ){ goto $label$1 }
	if ( (int_64)(*($1 + [144]) == 0) ){ goto $label$1 }
	*(($3 + [16])) = (int_64)0
	*(($3 + [72])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3) = [0]
	*($3 + [24]) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [80]) = [0]
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [112]) = (int_64)0
	*($3 + [120]) = (int_64)0
	$2 = ($0 + [232])
	$4 = *(($0 + [260]))
	if ( ((int_32)$4 == (int_32)*(($0 + [256]))) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [128]) == (int_32)$2) ){ goto $label$5 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$5
	if ( $4 ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($2), *(($0 + [240])), (int_64)-4416155807682396160, (int_64)-4416155807682396160)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $77($2, $4)
	if ( ((int_32)*($4 + [128]) == (int_32)$2) ){ goto $label$2 }
	CALL eosio_assert([0], [17954])
	goto $label$2 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$2
	CALL memcpy(($3 + [128]), $4, [128])
	if ( (*($3 + [128]) == 0) ){ goto $label$1 }
	$5 = *($1 + [8])
	if ( ((int_64)*($3 + [168]) == (int_64)$5) ){ goto $label$6 }
	*(($3 + [168])) = $5
	*($3 + [176]) = *($1)
	*($3 + [184]) = *($1 + [136])
	
.LABEL $label$6
	CALL $79($2, ($3 + [128]), *($0))
	
.LABEL $label$1
	$global$0 = ($3 + [256])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [168]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18097])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18142])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [18192])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [52]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [60])))
	
.LABEL $label$13
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$14
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$16 }
	if ( ((*($8 + [52]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($8 + [60])))
	
.LABEL $label$17
	if ( ((*($8 + [40]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($8 + [48])))
	
.LABEL $label$18
	CALL _ZdlPv($8)
	
.LABEL $label$16
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*(($1 + [172])))
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	$6 = *($0)
	*(($1 + [32])) = *(($5 + [32]))
	*($1 + [24]) = *($5 + [24])
	$7 = ($1 + [40])
	CALL $141($7, (*($4) + [40]))
	$5 = *($4)
	*($1 + [52]) = *($5 + [52])
	*(($1 + [88])) = *(($5 + [88]))
	*(($1 + [80])) = *(($5 + [80]))
	*(($1 + [72])) = *(($5 + [72]))
	*($1 + [64]) = *($5 + [64])
	$5 = *($4)
	*($1 + [96]) = *($5 + [96])
	*(($1 + [112])) = *(($5 + [112]))
	*(($1 + [120])) = *(($5 + [120]))
	*(($1 + [104])) = *(($5 + [104]))
	$5 = *($4)
	*($1 + [128]) = *($5 + [128])
	*(($1 + [152])) = *(($5 + [152]))
	*(($1 + [144])) = *(($5 + [144]))
	*(($1 + [136])) = *(($5 + [136]))
	$5 = *($4)
	*($1 + [160]) = *($5 + [160])
	*(($1 + [168])) = *(($5 + [168]))
	*($1 + [176]) = *(*($4) + [176])
	$4 = *($1 + [40])
	$5 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [149])
	$8 = (CASTING uint_64)(uint_32 $5)
	$9 = ($1 + [176])
	$10 = ($1 + [160])
	$11 = ($1 + [128])
	$12 = ($1 + [96])
	$13 = ($1 + [64])
	$14 = ($1 + [52])
	$15 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$5 = CALL $179($4)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = $15
	*($3 + [48]) = $7
	*($3 + [52]) = $14
	*($3 + [56]) = $13
	*($3 + [60]) = $12
	*($3 + [64]) = $11
	*($3 + [68]) = $10
	*($3 + [72]) = $9
	CALL $60(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	$16 = ((int_64)$8 ^ (int_64)-1)
	*($1 + [188]) = CALL db_store_i64(*($6 + [8]), (int_64)-4994024801686257664, *(*($0 + [8])), $16, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $183($5)
	
.LABEL $label$4
	if ( ((uint_64)*($6 + [16]) > (uint_64)$16) ){ goto $label$5 }
	*(($6 + [16])) = ( (int_64)-2 ? (int_64))((int_64)0 - $8) : (uint_64)($8 <= (int_64)2) )
	
.LABEL $label$5
	$8 = *(($6 + [8]))
	$16 = *(*(($0 + [8])))
	$17 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [192]) = CALL db_idx64_store($8, (int_64)-4994024801686257664, $16, ((int_64)$17 ^ (int_64)-1), ($3 + [32]))
	$global$0 = ($3 + [80])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18005])
	
.LABEL $label$5
	$4 = CALL $179($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL _Znwj([208])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [160]) = (int_64)0
	*($5 + [168]) = (int_64)0
	*($5 + [184]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [52])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [96])
	*($3 + [64]) = ($5 + [128])
	*($3 + [68]) = ($5 + [160])
	*($3 + [72]) = ($5 + [176])
	CALL $74(($3 + [32]), ($3 + [24]))
	*($5 + [192]) = [-1]
	*($5 + [188]) = $1
	*($3 + [24]) = $5
	$7 = ((int_64)*($5) ^ (int_64)-1)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $54(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $183($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [188]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [19423])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4994024801686257664)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [19369])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [19369])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $55(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [184]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18097])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18142])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)$7 == (int_64)*(*(($5 + [-24])))) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)$7 != (int_64)*(*($10))) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [18192])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [48])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($9 + [48])))
	
.LABEL $label$16
	CALL _ZdlPv($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [188])))
	$9 = *($1 + [192])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4994024801686257664, ($2 + [8]), ((int_64)*($1) ^ (int_64)-1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$global$0 = ($2 + [16])
}

int_32 .FUNC $173 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $174($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $142($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $153 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $150 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $152($1, $0, [17097])
	CALL $154()
	(unreachable)
}

int_64 .FUNC $151 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $174([8286])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8286], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $157())
	*(CALL $157()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $170($4, ($3 + [12]), $2)
	$0 = CALL $157()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $149($3)
	
.LABEL $label$1
	CALL $150($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $156 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $157 ()
{
	return [8344]
}

void .FUNC $154 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $155 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $158 (int_32 $0)
{
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $175([8352])
	$3 = *([0] + [8360])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8364])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8368]
	*([0] + [8360]) = [8368]
	$4 = *([0] + [8364])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $182([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8360])
	*([0] + [8360]) = $3
	*([0] + [8364]) = [0]
	
.LABEL $label$2
	*([0] + [8364]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $176([8352])
	return [0]
	
.LABEL $label$1
	CALL $176([8352])
	return [-1]
}

int_32 .FUNC $179 (int_32 $0)
{
	return CALL $180([8636], $0)
}

void .FUNC $183 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17020])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16828]
	$3 = (((int_32)$1 * (int_32)[12]) + [16828])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $100($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $143($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $143($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $138($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18097])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18142])
	
.LABEL $label$2
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$5 }
	$4 = ($3 + [-24])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [18192])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$2 = $3
	
.LOOP $label$7:
	$4 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $4
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$7 }
	$4 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ($3 + [-24])
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $4
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18005])
	
.LABEL $label$5
	$2 = CALL $179($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	*(($5 + [8])) = *($3 + [24])
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)6820308914865700864
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = (int_64)6820308914865700864
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $106(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $183($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18097])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18142])
	
.LABEL $label$2
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$5 }
	$4 = ($3 + [-24])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [18192])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$2 = $3
	
.LOOP $label$7:
	$4 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $4
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$7 }
	$4 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ($3 + [-24])
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $4
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18005])
	
.LABEL $label$5
	$2 = CALL $179($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $117(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $183($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18097])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18142])
	
.LABEL $label$2
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$5 }
	$4 = ($3 + [-24])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [18192])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$2 = $3
	
.LOOP $label$7:
	$4 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $4
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$7 }
	$4 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ($3 + [-24])
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $4
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $88(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $58($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $89(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $127(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[31]) ){ goto $label$7 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $3, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[19]) ){ goto $label$9 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $3, [20])
	*(($4 = ($4 + [4]))) = (*($4) + [20])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [40])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [18363])
	$1 = *(($0 + [4]))
	
.LABEL $label$12
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18005])
	
.LABEL $label$5
	$2 = CALL $179($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7615822568287911936
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = (int_64)7615822568287911936
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $114(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $183($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $145($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $138($0)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $107($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $85($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [18363])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $85($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $108($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [16]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $65($0, $4)
	if ( ((int_32)*($4 + [16]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$2
	*($3) = $1
	CALL $103($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $104($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	if ( ((int_32)*($5 + [16]) == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$4
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $65($1, $5)
	if ( ((int_32)*($5 + [16]) == (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $105($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($4 + [16])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $102(CALL $101($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [18363])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18363])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [18363])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $127(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [352])
	$global$0 = $2
	$3 = [0]
	$4 = [0]
	
.LOOP $label$1:
	if ( ($3 == 0) ){ goto $label$2 }
	*((($2 + [16]) + $4)) = [124]
	$4 = ($4 + [1])
	
.LABEL $label$2
	$5 = *(($1 + $3))
	if ( ($5 == 0) ){ goto $label$3 }
	*($2) = $5
	$5 = CALL $164((($2 + [16]) + $4), ([334] - $4), [17113], $2)
	CALL eosio_assert(((int_32)$5 > (int_32)[0]), [17131])
	$4 = ($5 + $4)
	
.LABEL $label$3
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[148]) ){ goto $label$1 }
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $174(($2 + [16]))
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($4 << [1])
	$3 = ($0 + [1])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $4
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [16]), $4)
	
.LABEL $label$5
	*(($3 + $4)) = [0]
	$global$0 = ($2 + [352])
	return (unreachable)
	
.LABEL $label$4
	CALL $138($0)
}

void .FUNC $82 (int_32 $0)
{
	if ( ((*([0] + [8328]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8336]))
	
.LABEL $label$1
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = [-1]
	$7 = *($0)
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)( *($0 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$3 }
	$5 = CALL $147($0, *($2), $6)
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$6 }
	$3 = *($3)
	CALL $140($4, $0, $3, ($5 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0)
	$5 = *($3)
	CALL $140($4, $0, $5, (( *(($0 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) ) - $5), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$4
	CALL $143($1, [0])
	*(($1 + [8])) = *(($4 + [8]))
	*($1) = *($4)
	
.LABEL $label$3
	$global$0 = ($4 + [16])
	return $5
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $143($1, [0])
	*(($1 + [8])) = *(($4 + [8]))
	*($1) = *($4)
	$1 = *($0)
	if ( ($1 & [1]) ){ goto $label$7 }
	$global$0 = ($4 + [16])
	return uint_32($1 >> [1])
	
.LABEL $label$7
	$0 = *(($0 + [4]))
	$global$0 = ($4 + [16])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [24])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [18028])
	$1 = *(($0 + [4]))
	
.LABEL $label$8
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $180([8636], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $149 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $152($1, $0, [17116])
	CALL $153()
	(unreachable)
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $173(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $142($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $174($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $142($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $147 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $172(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $146 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $142($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *(*($4) + [4])
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	$6 = *($0)
	*(($1 + [32])) = *(($5 + [32]))
	*($1 + [24]) = *($5 + [24])
	$7 = ($1 + [40])
	CALL $141($7, (*(*($4) + [4]) + [40]))
	$5 = *(*($4) + [4])
	*($1 + [52]) = *($5 + [52])
	*(($1 + [88])) = *(($5 + [88]))
	*(($1 + [80])) = *(($5 + [80]))
	*(($1 + [72])) = *(($5 + [72]))
	*($1 + [64]) = *($5 + [64])
	$5 = *(*($4) + [4])
	*($1 + [96]) = *($5 + [96])
	*(($1 + [104])) = *(($5 + [104]))
	*(($1 + [120])) = *(($5 + [120]))
	*(($1 + [112])) = *(($5 + [112]))
	$5 = *(*($4) + [4])
	*($1 + [128]) = *($5 + [128])
	*(($1 + [152])) = *(($5 + [152]))
	*(($1 + [144])) = *(($5 + [144]))
	*(($1 + [136])) = *(($5 + [136]))
	$5 = *(*($4) + [4])
	*($1 + [160]) = *($5 + [160])
	*(($1 + [168])) = *(($5 + [168]))
	*($1 + [176]) = *(*(*($4) + [4]) + [176])
	$4 = *($1 + [40])
	$5 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [149])
	$8 = (CASTING uint_64)(uint_32 $5)
	$9 = ($1 + [176])
	$10 = ($1 + [160])
	$11 = ($1 + [128])
	$12 = ($1 + [96])
	$13 = ($1 + [64])
	$14 = ($1 + [52])
	$15 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$5 = CALL $179($4)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = $15
	*($3 + [48]) = $7
	*($3 + [52]) = $14
	*($3 + [56]) = $13
	*($3 + [60]) = $12
	*($3 + [64]) = $11
	*($3 + [68]) = $10
	*($3 + [72]) = $9
	CALL $60(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	$16 = ((int_64)$8 ^ (int_64)-1)
	*($1 + [188]) = CALL db_store_i64(*($6 + [8]), (int_64)-4994024801686257664, *(*($0 + [8])), $16, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $183($5)
	
.LABEL $label$4
	if ( ((uint_64)*($6 + [16]) > (uint_64)$16) ){ goto $label$5 }
	*(($6 + [16])) = ( (int_64)-2 ? (int_64))((int_64)0 - $8) : (uint_64)($8 <= (int_64)2) )
	
.LABEL $label$5
	$8 = *(($6 + [8]))
	$16 = *(*(($0 + [8])))
	$17 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [192]) = CALL db_idx64_store($8, (int_64)-4994024801686257664, $16, ((int_64)$17 ^ (int_64)-1), ($3 + [32]))
	$global$0 = ($3 + [80])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *(*($4) + [4])
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	$6 = *($0)
	*(($1 + [32])) = *(($5 + [32]))
	*($1 + [24]) = *($5 + [24])
	$7 = ($1 + [40])
	CALL $141($7, (*(*($4) + [4]) + [40]))
	$5 = *(*($4) + [4])
	*($1 + [52]) = *($5 + [52])
	*(($1 + [88])) = *(($5 + [88]))
	*(($1 + [80])) = *(($5 + [80]))
	*(($1 + [72])) = *(($5 + [72]))
	*($1 + [64]) = *($5 + [64])
	$5 = *(*($4) + [4])
	*($1 + [96]) = *($5 + [96])
	*(($1 + [104])) = *(($5 + [104]))
	*(($1 + [120])) = *(($5 + [120]))
	*(($1 + [112])) = *(($5 + [112]))
	$5 = *(*($4) + [4])
	*($1 + [128]) = *($5 + [128])
	*(($1 + [152])) = *(($5 + [152]))
	*(($1 + [144])) = *(($5 + [144]))
	*(($1 + [136])) = *(($5 + [136]))
	$5 = *(*($4) + [4])
	*($1 + [160]) = *($5 + [160])
	*(($1 + [168])) = *(($5 + [168]))
	*($1 + [176]) = *(*(*($4) + [4]) + [176])
	$4 = *($1 + [40])
	$5 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [149])
	$8 = (CASTING uint_64)(uint_32 $5)
	$9 = ($1 + [176])
	$10 = ($1 + [160])
	$11 = ($1 + [128])
	$12 = ($1 + [96])
	$13 = ($1 + [64])
	$14 = ($1 + [52])
	$15 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$5 = CALL $179($4)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = $15
	*($3 + [48]) = $7
	*($3 + [52]) = $14
	*($3 + [56]) = $13
	*($3 + [60]) = $12
	*($3 + [64]) = $11
	*($3 + [68]) = $10
	*($3 + [72]) = $9
	CALL $60(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	$16 = ((int_64)$8 ^ (int_64)-1)
	*($1 + [188]) = CALL db_store_i64(*($6 + [8]), (int_64)-4994024801686257664, *(*($0 + [8])), $16, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $183($5)
	
.LABEL $label$4
	if ( ((uint_64)*($6 + [16]) > (uint_64)$16) ){ goto $label$5 }
	*(($6 + [16])) = ( (int_64)-2 ? (int_64))((int_64)0 - $8) : (uint_64)($8 <= (int_64)2) )
	
.LABEL $label$5
	$8 = *(($6 + [8]))
	$16 = *(*(($0 + [8])))
	$17 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [192]) = CALL db_idx64_store($8, (int_64)-4994024801686257664, $16, ((int_64)$17 ^ (int_64)-1), ($3 + [32]))
	$global$0 = ($3 + [80])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	$6 = ($5 + [112])
	$7 = *($0)
	$8 = *(($5 + [128]))
	if ( ((int_64)$8 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$8 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = (int_64)0
	$9 = CALL db_lowerbound_i64(*($6), *(($5 + [120])), (int_64)-4425746941110517760, (int_64)0)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $34($6, $9)
	*($3 + [20]) = [0]
	*($3 + [16]) = $6
	$8 = *(*(CALL $128(($3 + [16])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	*(($5 + [128])) = $8
	if ( (uint_64)($8 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [19782])
	$8 = *(($5 + [128]))
	goto $label$1 
	
.LABEL $label$2
	*(($5 + [128])) = (int_64)0
	
.LABEL $label$1
	*($3) = $8
	if ( ((int_64)$8 == (int_64)-1) ){ goto $label$8 }
	if ( ((uint_64)$8 >= (uint_64)(int_64)-2) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$8 = (int_64)0
	$9 = CALL db_lowerbound_i64(*(($5 + [112])), *(($5 + [120])), (int_64)-4425746941110517760, (int_64)0)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$6 }
	CALL $34($6, $9)
	*($3 + [20]) = [0]
	*($3 + [16]) = $6
	$8 = *(*(CALL $128(($3 + [16])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	*(($5 + [128])) = $8
	if ( (uint_64)($8 <= (int_64)-2) ){ goto $label$5 }
	
.LABEL $label$7
	CALL eosio_assert([0], [19782])
	$8 = *(($5 + [128]))
	goto $label$5 
	
.LABEL $label$6
	*(($5 + [128])) = (int_64)0
	
.LABEL $label$5
	$9 = ($5 + [192])
	*(($3 + [8])) = $8
	$6 = *(($5 + [220]))
	if ( ((int_32)$6 == (int_32)*(($5 + [216]))) ){ goto $label$11 }
	$6 = *(($6 + [-24]))
	if ( ((int_32)*($6 + [16]) == (int_32)$9) ){ goto $label$12 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$12
	if ( $6 ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$6 = CALL db_find_i64(*(($5 + [192])), *(($5 + [200])), (int_64)7615822568287911936, (int_64)7615822568287911936)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $63($9, $6)
	if ( ((int_32)*($6 + [16]) == (int_32)$9) ){ goto $label$9 }
	CALL eosio_assert([0], [17954])
	goto $label$9 
	
.LABEL $label$10
	$6 = $3
	
.LABEL $label$9
	*((($3 + [16]) + [8])) = *(($6 + [8]))
	*($3 + [16]) = *($6)
	*($3 + [16]) = ((int_64)*($3 + [16]) + (int_64)1)
	CALL $90($9, ($3 + [16]), *($5))
	*($1) = *($3 + [16])
	$5 = *($4 + [4])
	*($1 + [16]) = *($5)
	*(($1 + [40])) = *(($5 + [24]))
	*(($1 + [32])) = *(($5 + [16]))
	*(($1 + [24])) = *(($5 + [8]))
	$6 = $2
	$5 = ($6 + [-48])
	$global$0 = $5
	CALL memcpy($5, $1, [8])
	CALL memcpy(($6 + [-40]), ($1 + [16]), [32])
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($7 + [8]), (int_64)-4425746941110517760, *(*($0 + [8])), $8, $5, [40])
	if ( (uint_64)($8 <= *($7 + [16])) ){ goto $label$13 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$global$0 = ($3 + [32])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18005])
	
.LABEL $label$5
	$4 = CALL $179($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL _Znwj([192])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [168]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [52])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [128])
	*($3 + [76]) = ($5 + [136])
	*($3 + [80]) = ($5 + [144])
	*($3 + [84]) = ($5 + [152])
	*($3 + [88]) = ($5 + [160])
	CALL $42(($3 + [40]), ($3 + [32]))
	*($5 + [172]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $99(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $183($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [60])))
	
.LABEL $label$11
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return $5
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18005])
	
.LABEL $label$5
	$4 = CALL $179($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL _Znwj([144])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [128]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [64])
	*($3 + [72]) = ($5 + [80])
	*($3 + [76]) = ($5 + [88])
	*($3 + [80]) = ($5 + [96])
	*($3 + [84]) = ($5 + [104])
	*($3 + [88]) = ($5 + [112])
	*($3 + [92]) = ($5 + [120])
	CALL $94(($3 + [40]), ($3 + [32]))
	*($5 + [132]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)-4416155807682396160
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = (int_64)-4416155807682396160
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $95(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $183($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $69(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]) ){ goto $label$7 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[19]) ){ goto $label$9 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $5, [20])
	*(($4 = ($4 + [4]))) = (*($4) + [20])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [40])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [18028])
	$1 = *(($0 + [4]))
	
.LABEL $label$12
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [18028])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18028])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18028])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)*($1 + [128]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18097])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18142])
	
.LABEL $label$2
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$5 }
	$4 = ($3 + [-24])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [18192])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$2 = $3
	
.LOOP $label$7:
	$4 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $4
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$7 }
	$4 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ($3 + [-24])
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $4
	CALL db_remove_i64(*($1 + [132]))
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [128]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4416155807682396160, (int_64)-4416155807682396160)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $77($0, $4)
	if ( ((int_32)*($4 + [128]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$2
	*($3) = $1
	CALL $96($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $97($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [18363])
	$3 = *($5)
	
.LABEL $label$10
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$11 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$13
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$14 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$14
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [48])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$15 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$15
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [52])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$16 }
	CALL eosio_assert([0], [18363])
	$1 = *(($0 + [4]))
	
.LABEL $label$16
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [60])))
	
.LABEL $label$11
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [18028])
	$3 = *($5)
	
.LABEL $label$10
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$11 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$13
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$14 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$14
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [48])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$15 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$15
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [52])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$16 }
	CALL eosio_assert([0], [18028])
	$1 = *(($0 + [4]))
	
.LABEL $label$16
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [128]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18266])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18312])
	
.LABEL $label$2
	$1 = CALL memcpy($1, *($3), [128])
	$3 = $4
	$4 = ($3 + [-128])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-12])
	*($5 + [16]) = $5
	*($5 + [28]) = ($1 + [8])
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [24])
	*($5 + [36]) = ($1 + [32])
	*($5 + [40]) = ($1 + [40])
	*($5 + [44]) = ($1 + [48])
	*($5 + [48]) = ($1 + [56])
	*($5 + [52]) = ($1 + [64])
	*($5 + [56]) = ($1 + [80])
	*($5 + [60]) = ($1 + [88])
	*($5 + [64]) = ($1 + [96])
	*($5 + [68]) = ($1 + [104])
	*($5 + [72]) = ($1 + [112])
	*($5 + [76]) = ($1 + [120])
	CALL $98(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [132]), $2, $4, [116])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4416155807682396160) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)-4416155807682396159
	
.LABEL $label$3
	$global$0 = ($5 + [80])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [208])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([144])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [128]) = $1
	$5 = CALL memcpy($5, *($3), [128])
	*($4 + [136]) = ($4 + [116])
	*($4 + [132]) = $4
	*($4 + [128]) = $4
	*($4 + [144]) = ($4 + [128])
	*($4 + [156]) = ($5 + [8])
	*($4 + [152]) = $5
	*($4 + [160]) = ($5 + [24])
	*($4 + [164]) = ($5 + [32])
	*($4 + [168]) = ($5 + [40])
	*($4 + [172]) = ($5 + [48])
	*($4 + [176]) = ($5 + [56])
	*($4 + [180]) = ($5 + [64])
	*($4 + [184]) = ($5 + [80])
	*($4 + [188]) = ($5 + [88])
	*($4 + [192]) = ($5 + [96])
	*($4 + [196]) = ($5 + [104])
	*($4 + [200]) = ($5 + [112])
	*($4 + [204]) = ($5 + [120])
	CALL $98(($4 + [152]), ($4 + [144]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4416155807682396160, $2, (int_64)-4416155807682396160, $4, [116])
	*($5 + [132]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4416155807682396160) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)-4416155807682396159
	
.LABEL $label$2
	*($4 + [152]) = $5
	*($4) = (int_64)-4416155807682396160
	*($4 + [128]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)-4416155807682396160
	*($3 + [16]) = $6
	*($4 + [152]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $95(($1 + [24]), ($4 + [152]), $4, ($4 + [128]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [152])
	*($4 + [152]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [208])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [16]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7615822568287911936, (int_64)7615822568287911936)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $63($0, $4)
	if ( ((int_32)*($4 + [16]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$2
	*($3) = $1
	CALL $112($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $113($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [172]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [19423])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229865212519383040)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [19369])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [19369])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $76(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $67($0, $4)
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$2
	*($3) = $1
	CALL $115($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $116($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	if ( (int_64)(*($1 + [56]) == 0) ){ goto $label$1 }
	$3 = CALL current_time()
	if ( ((uint_64)$3 <= (uint_64)((int_64)*($0 + [320]) + (int_64)*(($1 + [56])))) ){ goto $label$1 }
	$4 = *($0 + [328])
	$4 = *($1 + [8])
	CALL __multi3(($2 + [16]), $4, (int_64)$4 >> (int_64)63), $4, (int_64)$4 >> (int_64)63))
	$4 = *(($1 + [16]))
	$6 = *(($2 + [24]))
	$5 = *($2 + [16])
	if ( (( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ) == 0) ){ goto $label$3 }
	if ( ( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ) ){ goto $label$2 }
	CALL eosio_assert([0], [19342])
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [19318])
	
.LABEL $label$2
	$6 = ((int_64)$5 / (int_64)100)
	*($2 + [48]) = $6
	$5 = *(($1 + [16]))
	*($2 + [56]) = $4
	if ( ((int_64)$4 == (int_64)$5) ){ goto $label$4 }
	CALL eosio_assert([0], [19187])
	
.LABEL $label$4
	$4 = (int_64)
	*(($7 = ($1 + [8]))) = $4(*($7) - $6))
	if ( ((int_64)$4 > (int_64)-4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [19235])
	$4 = *($7)
	
.LABEL $label$5
	if ( ((int_64)$4 < (int_64)4611686018427387904) ){ goto $label$6 }
	CALL eosio_assert([0], [19257])
	
.LABEL $label$6
	CALL $118($0, $1, ($2 + [48]), $3)
	*($1 + [120]) = $3
	*(($1 + [72])) = *(($2 + [56]))
	*($1 + [64]) = *($2 + [48])
	*($1 + [80]) = *($1 + [24])
	*($1 + [88]) = *($1 + [32])
	*($1 + [96]) = *($1 + [40])
	*($1 + [104]) = *($1 + [48])
	$7 = ($1 + [56])
	*($1 + [112]) = *($7)
	*($2 + [32]) = [19834]
	*($2 + [36]) = CALL $174([19834])
	*($2 + [8]) = *($2 + [32])
	*($1 + [40]) = *(CALL $5(($2 + [40]), ($2 + [8])))
	*($7) = (int_64)0
	*($1 + [48]) = (int_64)0
	if ( ((int_32)*($1) != (int_32)[1]) ){ goto $label$8 }
	*($1) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(($1 + [32])) = $3
	*(($7 = ($1 + [24]))) = (*($7) + [1])
	
.LABEL $label$7
	CALL $79(($0 + [232]), $1, *($0))
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $138 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $179($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8340])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $179($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $183($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $177(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8340])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $177(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $183($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $181 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8628]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8632])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8628]) = [1]
	$2 = ($2 << [16])
	*([0] + [8632]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8632])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8632]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8628]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8628]) = [1]
	$3 = ($3 << [16])
	*([0] + [8632]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8632])
	
.LABEL $label$10
	*([0] + [8632]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $129 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8328 align=4]) = (int_64)0
	*([0] + [8336]) = [0]
	$0 = CALL $174([17032])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [8328]) = ($0 << [1])
	$1 = [8329]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8328]) = ($2 | [1])
	*([0] + [8336]) = $1
	*([0] + [8332]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [17032], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $159([13], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $138([8328])
}

int_32 .FUNC $128 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [19423])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4425746941110517760)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [19369])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [19369])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $34(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [256])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	$2 = [0]
	*($1) = [0]
	$3 = ($0 + [232])
	$4 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $6 ){ goto $label$5 }
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [19073])
	
.LABEL $label$1
	*(($1 + [72])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	$2 = [0]
	*($1 + [24]) = [0]
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	$4 = (int_64)5459781
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $5
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $6 ){ goto $label$10 }
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [19073])
	
.LABEL $label$6
	*($1 + [88]) = (int_64)0
	*($1 + [80]) = [0]
	*($1 + [96]) = (int_64)0
	*($1 + [104]) = (int_64)0
	*($1 + [112]) = (int_64)0
	*($1 + [120]) = (int_64)0
	$2 = *(($0 + [260]))
	if ( ((int_32)$2 == (int_32)*(($0 + [256]))) ){ goto $label$13 }
	$2 = *(($2 + [-24]))
	if ( ((int_32)*($2 + [128]) == (int_32)$3) ){ goto $label$14 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$14
	if ( $2 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$2 = CALL db_find_i64(*(($0 + [232])), *(($0 + [240])), (int_64)-4416155807682396160, (int_64)-4416155807682396160)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $77($3, $2)
	if ( ((int_32)*($2 + [128]) == (int_32)$3) ){ goto $label$11 }
	CALL eosio_assert([0], [17954])
	goto $label$11 
	
.LABEL $label$12
	$2 = $1
	
.LABEL $label$11
	CALL memcpy(($1 + [128]), $2, [128])
	CALL eosio_assert((*($1 + [128]) == 0), [18245])
	*($1 + [128]) = [2]
	*($1 + [152]) = (*($1 + [152]) + [1])
	*($1 + [160]) = CALL current_time()
	CALL $79($3, ($1 + [128]), *($0))
	$global$0 = ($1 + [256])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $179($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [272])) = [0]
	*($4 + [280]) = [300]
	*($4 + [284]) = [44]
	*($4 + [288]) = (int_64)85899346660
	*($4 + [296]) = (int_64)4294968296
	*($4 + [304]) = [37]
	*($4 + [312]) = (int_64)10000
	*($4 + [320]) = (int_64)2147483648001
	*($4 + [328]) = (int_64)420000000
	*($4 + [336]) = (int_64)77
	*($4 + [344]) = (int_64)170000
	*($4 + [352]) = (int_64)17
	*($4 + [360]) = [7]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $183($2)
	
.LABEL $label$5
	CALL $28(($4 + [8]))
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [128])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [64]) = $1
	*(($4 = ($0 + [16]))) = (int_64)0
	$5 = *($2 + [4])
	$1 = *($5)
	*($0 + [24]) = *($1 + [24])
	*($0 + [32]) = *($1 + [32])
	*($0) = *($1)
	*($0 + [48]) = *($1 + [48])
	*($0 + [40]) = *($1 + [40])
	$6 = *($2)
	*($0 + [8]) = *($1 + [8])
	*($4) = *(($1 + [16]))
	*($0 + [56]) = *(*($5) + [56])
	*($3 + [80]) = ($3 + [60])
	*($3 + [76]) = $3
	*($3 + [72]) = $3
	*($3 + [88]) = ($3 + [72])
	*($3 + [100]) = ($0 + [8])
	*($3 + [96]) = $0
	*($3 + [104]) = ($0 + [24])
	*($3 + [108]) = ($0 + [32])
	*($3 + [112]) = ($0 + [40])
	*($3 + [116]) = ($0 + [48])
	*($3 + [120]) = ($0 + [56])
	CALL $124(($3 + [96]), ($3 + [88]))
	$1 = *($0)
	$7 = (CASTING uint_64)(uint_32 $1)
	*($0 + [68]) = CALL db_store_i64(*($6 + [8]), (int_64)-4416155616447007872, *(*($2 + [8])), $7, $3, [60])
	if ( ((uint_64)*($6 + [16]) > (uint_64)$7) ){ goto $label$1 }
	*(($6 + [16])) = (CASTING uint_64)(uint_32 ($1 + [1]))
	
.LABEL $label$1
	$global$0 = ($3 + [128])
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [64])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $58(($7 + [28]), [60])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [12]) = $1
	*($5 + [8]) = $1
	*($5 + [16]) = $2
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $4
	*($5 + [36]) = ($4 + [8])
	*($5 + [40]) = ($4 + [24])
	*($5 + [44]) = ($4 + [32])
	*($5 + [48]) = ($4 + [40])
	*($5 + [52]) = ($4 + [48])
	*($5 + [56]) = ($4 + [56])
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $124(($5 + [32]), ($5 + [24]))
	$4 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$12 = ($4 - $8)
	$9 = [0]
	
.LOOP $label$7:
	$2 = ($8 + $9)
	*((($4 = ($7 + $9)) + [-32])) = *(($2 + [-32]))
	*(($4 + [-40])) = *(($2 + [-40]))
	*(($1 = ($4 + [-24]))) = (int_64)0
	*(($6 = ($4 + [-16]))) = [0]
	$3 = ($2 + [-24])
	*($1) = *($3)
	$1 = ($2 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($4 + [-12]))) = (int_64)0
	*(($4 = ($4 + [-4]))) = [0]
	$6 = ($2 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$2 = ($2 + [-4])
	*($4) = *($2)
	*($2) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$7 }
	$7 = ($7 + $9)
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($4 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($4 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($4 + [-40])
	$9 = *(($4 + [-24]))
	if ( ($9 == 0) ){ goto $label$11 }
	*(($4 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	$4 = $2
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($5 + [64])
	(unreachable)
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([80])
	CALL $122($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$5 = *($3)
	*($4 + [16]) = $5
	$6 = *($3 + [68])
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($8 + [16]) = $6
	*($8 + [8]) = (CASTING uint_64)(uint_32 $5)
	*($4 + [32]) = [0]
	*($8) = $3
	*($7) = ($8 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $123(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8192])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8192])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $127(*($1), *($0 + [16]))
	CALL $127(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[31]) ){ goto $label$6 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[19]) ){ goto $label$7 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $3, [20])
	*(($4 = ($4 + [4]))) = (*($4) + [20])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [48])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [18363])
	$1 = *(($0 + [4]))
	
.LABEL $label$12
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	$6 = *($0)
	*(($1 + [32])) = *(($5 + [32]))
	*($1 + [24]) = *($5 + [24])
	$7 = ($1 + [40])
	CALL $141($7, (*($4) + [40]))
	$8 = ($1 + [52])
	CALL $141($8, (*($4) + [52]))
	$5 = *($4)
	*($1 + [64]) = *($5 + [64])
	*(($1 + [88])) = *(($5 + [88]))
	*(($1 + [80])) = *(($5 + [80]))
	*(($1 + [72])) = *(($5 + [72]))
	$5 = *($4)
	*($1 + [96]) = *($5 + [96])
	*(($1 + [120])) = *(($5 + [120]))
	*(($1 + [104])) = *(($5 + [104]))
	*(($1 + [112])) = *(($5 + [112]))
	$4 = *($4)
	*($1 + [136]) = *($4 + [136])
	*($1 + [128]) = *($4 + [128])
	*($1 + [144]) = *($4 + [144])
	*($1 + [152]) = *($4 + [152])
	*($1 + [160]) = *($4 + [160])
	$4 = *($1 + [40])
	$5 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [132])
	$9 = (CASTING uint_64)(uint_32 $5)
	$10 = ($1 + [160])
	$11 = ($1 + [152])
	$12 = ($1 + [144])
	$13 = ($1 + [136])
	$14 = ($1 + [128])
	$15 = ($1 + [96])
	$16 = ($1 + [64])
	$17 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$5 = *(($1 + [52]))
	$5 = ( *(($1 + [56])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$4 = ($5 + $4)
	$9 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$5 = CALL $179($4)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = $17
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $16
	*($3 + [52]) = $15
	*($3 + [56]) = $14
	*($3 + [60]) = $13
	*($3 + [64]) = $12
	*($3 + [68]) = $11
	*($3 + [72]) = $10
	CALL $126(($3 + [24]), ($3 + [16]))
	$9 = *($1)
	*($1 + [172]) = CALL db_store_i64(*($6 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $9, $5, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($6 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $183($5)
	if ( (uint_64)($9 <= *($6 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [80])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [18363])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [24])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [18363])
	$1 = *(($0 + [4]))
	
.LABEL $label$8
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $179($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [368]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$5
	CALL memcpy(($4 + [368]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [272])) = [0]
	*($4 + [280]) = [300]
	*($4 + [284]) = [44]
	*($4 + [288]) = (int_64)85899346660
	*($4 + [296]) = (int_64)4294968296
	*($4 + [304]) = [37]
	*($4 + [312]) = (int_64)10000
	*($4 + [320]) = (int_64)2147483648001
	*($4 + [328]) = (int_64)420000000
	*($4 + [336]) = (int_64)77
	*($4 + [344]) = (int_64)170000
	*($4 + [352]) = (int_64)17
	*($4 + [360]) = [7]
	*($4 + [376]) = *($4 + [368])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [376])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $183($2)
	
.LABEL $label$7
	CALL $28(($4 + [8]))
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [232])
	$3 = *(($0 + [260]))
	if ( ((int_32)$3 == (int_32)*(($0 + [256]))) ){ goto $label$3 }
	$0 = *(($3 + [-24]))
	if ( ((int_32)*($0 + [128]) == (int_32)$2) ){ goto $label$4 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$4
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = CALL db_find_i64(*($2), *(($0 + [240])), (int_64)-4416155807682396160, (int_64)-4416155807682396160)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $77($2, $0)
	if ( ((int_32)*($0 + [128]) == (int_32)$2) ){ goto $label$2 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$2
	$3 = CALL db_next_i64(*($0 + [132]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	CALL $77($2, $3)
	
.LABEL $label$5
	CALL $78($2, $0)
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	$3 = ($global$0 - [608])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $179($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [400]) + [56]))) = (int_64)0
	*(($9 = (($4 + [400]) + [48]))) = (int_64)0
	*(($10 = (($4 + [400]) + [40]))) = (int_64)0
	*(($11 = (($4 + [400]) + [24]))) = (int_64)0
	*(($12 = (($4 + [400]) + [8]))) = (int_64)0
	*(($13 = (($4 + [400]) + [16]))) = (int_64)0
	*(($14 = (($4 + [400]) + [32]))) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [388]) = $2
	*($4 + [384]) = $2
	*($4 + [392]) = ($2 + $7)
	*($4 + [528]) = ($4 + [384])
	*($4 + [28]) = $12
	*($4 + [32]) = $11
	*($4 + [36]) = $14
	*($4 + [40]) = $10
	*($4 + [44]) = $9
	*($4 + [48]) = $8
	*($4 + [24]) = ($4 + [400])
	CALL $80(($4 + [24]), ($4 + [528]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [392])
	*($4 + [8]) = *($4 + [384])
	$15 = *($3)
	*((($4 + [592]) + [8])) = $15
	*(($3 = (($4 + [464]) + [8]))) = $15
	$16 = *($4 + [8])
	*($4 + [464]) = $16
	*($4 + [592]) = $16
	$17 = *($3)
	*(($15 = (($4 + [528]) + [8]))) = $17
	*((($4 + [24]) + [24])) = $17
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [464])
	*($4 + [40]) = $1
	*($4 + [528]) = $1
	*((($4 + [24]) + [40])) = $0
	*((($4 + [24]) + [48])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [296]) = [300]
	*($4 + [300]) = [44]
	*($4 + [304]) = (int_64)85899346660
	*($4 + [312]) = (int_64)4294968296
	*($4 + [320]) = [37]
	*($4 + [328]) = (int_64)10000
	*($4 + [336]) = (int_64)2147483648001
	*($4 + [344]) = (int_64)420000000
	*($4 + [352]) = (int_64)77
	*($4 + [360]) = (int_64)170000
	*($4 + [368]) = (int_64)17
	*($4 + [376]) = [7]
	*(($17 = (($4 + [464]) + [56]))) = *($8)
	*(($8 = (($4 + [464]) + [48]))) = *($9)
	*(($9 = (($4 + [464]) + [40]))) = *($10)
	*(($10 = (($4 + [464]) + [32]))) = *($14)
	*(($14 = (($4 + [464]) + [24]))) = *($11)
	*(($11 = (($4 + [464]) + [16]))) = *($13)
	*($3) = *($12)
	*($4 + [464]) = *($4 + [400])
	*((($4 + [528]) + [56])) = *($17)
	*((($4 + [528]) + [48])) = *($8)
	*((($4 + [528]) + [40])) = *($9)
	*((($4 + [528]) + [32])) = *($10)
	*((($4 + [528]) + [24])) = *($14)
	*((($4 + [528]) + [16])) = *($11)
	*($15) = *($3)
	*($4 + [528]) = *($4 + [464])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [528])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $183($2)
	
.LABEL $label$5
	CALL $28(($4 + [24]))
	$global$0 = ($4 + [608])
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$3 = ($global$0 - [576])
	$global$0 = $3
	*($3 + [488]) = [17528]
	*($3 + [492]) = CALL $174([17528])
	*($3 + [72]) = *($3 + [488])
	CALL require_auth(*(CALL $5(($3 + [496]), ($3 + [72]))))
	$4 = CALL $43($0, $1)
	$5 = ($4 + [64])
	CALL assert_sha256($2, [32], $5)
	$6 = ($4 + [96])
	$7 = CALL $44($2, $6, ($4 + [128]))
	CALL $45(($4 + [52]), ($3 + [160]))
	$8 = *((($3 + [160]) + ($7 << [2])))
	$9 = *(($4 + [32]))
	if ( ((int_64)$9 <= (int_64)293370680067) ){ goto $label$5 }
	if ( ((int_64)$9 == (int_64)293370680068) ){ goto $label$4 }
	if ( ((int_64)$9 == (int_64)293455873288) ){ goto $label$3 }
	if ( ((int_64)$9 != (int_64)310651471112) ){ goto $label$2 }
	$10 = (int_64)100000
	goto $label$1 
	
.LABEL $label$5
	$10 = (int_64)1000
	if ( ((int_64)$9 == (int_64)1397703940) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)289176438024) ){ goto $label$2 }
	$10 = (int_64)10000
	goto $label$1 
	
.LABEL $label$4
	$10 = (int_64)1000000
	goto $label$1 
	
.LABEL $label$3
	$10 = (int_64)10000000
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [19010])
	$9 = *(($4 + [32]))
	$10 = (int_64)2147483647
	
.LABEL $label$1
	$11 = ((int_64)$10 * (int_64)$8)
	if ( (uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$6 }
	CALL eosio_assert([0], [19024])
	
.LABEL $label$6
	$12 = ($4 + [24])
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$10 = $8
	$13 = $1
	$1 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$10 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$13 = ((int_32)$1 < (int_32)[6])
	$14 = ($1 + [1])
	$1 = $14
	if ( $13 ){ goto $label$13 }
	$1 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$10 }
	
.LABEL $label$11
	$10 = (int_64)0
	if ( ((int_64)$11 > (int_64)0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL eosio_assert([0], [19073])
	$10 = (int_64)0
	if ( ((int_64)$11 <= (int_64)0) ){ goto $label$7 }
	
.LABEL $label$8
	$8 = *($0)
	*($3 + [472]) = [17541]
	*($3 + [476]) = CALL $174([17541])
	*($3 + [64]) = *($3 + [472])
	$1 = CALL $5(($3 + [480]), ($3 + [64]))
	*($3 + [528]) = $8
	*($3 + [536]) = *($1)
	$8 = *(($4 + [32]))
	if ( ((int_64)$8 <= (int_64)293370680067) ){ goto $label$18 }
	if ( ((int_64)$8 == (int_64)293370680068) ){ goto $label$16 }
	if ( ((int_64)$8 == (int_64)293455873288) ){ goto $label$17 }
	if ( ((int_64)$8 == (int_64)310651471112) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$15 = (int_64)6138663591592764928
	if ( ((int_64)$8 == (int_64)1397703940) ){ goto $label$14 }
	if ( ((int_64)$8 != (int_64)289176438024) ){ goto $label$15 }
	
.LABEL $label$17
	$15 = (int_64)4301877912145143680
	goto $label$14 
	
.LABEL $label$16
	$15 = (int_64)-4492738244669860560
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([0], [19010])
	$15 = (int_64)0
	
.LABEL $label$14
	*($3 + [456]) = [8293]
	*($3 + [460]) = CALL $174([8293])
	*($3 + [56]) = *($3 + [456])
	$1 = CALL $5(($3 + [464]), ($3 + [56]))
	CALL $46(($3 + [120]), $0, $4)
	$8 = *($4 + [8])
	*(($3 + [184])) = $9
	$13 = ($3 + [128])
	*(($3 + [200])) = *($13)
	*($13) = [0]
	*($3 + [160]) = *($0)
	*($3 + [176]) = $11
	*($3 + [192]) = *($3 + [120])
	*($3 + [168]) = $8
	*($3 + [120]) = (int_64)0
	$1 = CALL $47(($3 + [392]), ($3 + [528]), $15, *($1), ($3 + [160]))
	CALL $41($1)
	$13 = *($1 + [28])
	if ( ($13 == 0) ){ goto $label$19 }
	*(($1 + [32])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$19
	$13 = *($1 + [16])
	if ( ($13 == 0) ){ goto $label$20 }
	*(($1 + [20])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$20
	if ( ((*(($3 + [192])) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($3 + [200])))
	
.LABEL $label$21
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [128])))
	
.LABEL $label$7
	CALL $48($0, $12)
	$8 = CALL current_time()
	*(($3 + [420])) = $10
	*(($3 + [436])) = $10
	*(($3 + [444])) = $10
	*($3 + [404]) = [0]
	*($3 + [408]) = [0]
	*($3 + [412 align=4]) = $10
	*($3 + [428 align=4]) = $10
	*($3 + [392]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	$10 = *($0)
	*($3 + [376]) = [17541]
	*($3 + [380]) = CALL $174([17541])
	*($3 + [48]) = *($3 + [376])
	$1 = CALL $5(($3 + [384]), ($3 + [48]))
	*($3 + [528]) = $10
	*($3 + [536]) = *($1)
	$10 = *(($4 + [32]))
	if ( ((int_64)$10 <= (int_64)293370680067) ){ goto $label$26 }
	if ( ((int_64)$10 == (int_64)293370680068) ){ goto $label$24 }
	if ( ((int_64)$10 == (int_64)293455873288) ){ goto $label$25 }
	if ( ((int_64)$10 == (int_64)310651471112) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$8 = (int_64)6138663591592764928
	if ( ((int_64)$10 == (int_64)1397703940) ){ goto $label$22 }
	if ( ((int_64)$10 != (int_64)289176438024) ){ goto $label$23 }
	
.LABEL $label$25
	$8 = (int_64)4301877912145143680
	goto $label$22 
	
.LABEL $label$24
	$8 = (int_64)-4492738244669860560
	goto $label$22 
	
.LABEL $label$23
	CALL eosio_assert([0], [19010])
	$8 = (int_64)0
	
.LABEL $label$22
	*($3 + [104]) = $8
	*($3 + [368]) = [8293]
	*($3 + [372]) = CALL $174([8293])
	*($3 + [40]) = *($3 + [368])
	$13 = CALL $5(($3 + [504]), ($3 + [40]))
	*($3 + [352]) = [17548]
	*($3 + [356]) = CALL $174([17548])
	*($3 + [32]) = *($3 + [352])
	$14 = CALL $5(($3 + [360]), ($3 + [32]))
	$10 = *($0 + [284])
	$10 = *($4 + [24])
	CALL __multi3(($3 + [16]), $10, (int_64)$10 >> (int_64)63), $10, (int_64)$10 >> (int_64)63))
	$15 = *(($4 + [32]))
	$8 = *(($3 + [24]))
	$10 = *($3 + [16])
	if ( (( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ) == 0) ){ goto $label$30 }
	if ( ( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ) ){ goto $label$31 }
	CALL eosio_assert([0], [19342])
	
.LABEL $label$31
	$16 = [428]
	$1 = *($0 + [288])
	$8 = (CASTING int_64)(int_32 $1)
	if ( ($1 == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	CALL eosio_assert([0], [19318])
	$16 = [428]
	$1 = *($0 + [288])
	$8 = (CASTING int_64)(int_32 $1)
	if ( $1 ){ goto $label$28 }
	
.LABEL $label$29
	CALL eosio_assert([0], [19278])
	goto $label$27 
	
.LABEL $label$28
	if ( ((int_64)$10 != (int_64)-9223372036854775808) ){ goto $label$27 }
	if ( ((int_32)$1 != (int_32)[-1]) ){ goto $label$27 }
	CALL eosio_assert([0], [19293])
	
.LABEL $label$27
	$16 = ($3 + $16)
	CALL $49(($3 + [120]), $0, $4)
	*(($3 + [184])) = $15
	$1 = ($3 + [128])
	*((($3 + [160]) + [40])) = *($1)
	*($1) = [0]
	*($3 + [176]) = ((int_64)$10 / (int_64)$8)
	*($3 + [160]) = *($0)
	*($3 + [168]) = *($14)
	*($3 + [192]) = *($3 + [120])
	*($3 + [120]) = (int_64)0
	$1 = (($3 + [392]) + [40])
	$14 = *($1)
	if ( ((uint_32)$14 >= (uint_32)*(($3 + [436]))) ){ goto $label$33 }
	CALL $47($14, ($3 + [528]), *($3 + [104]), *($13), ($3 + [160]))
	*($1) = (*($1) + [40])
	goto $label$32 
	
.LABEL $label$33
	CALL $50($16, ($3 + [528]), ($3 + [104]), $13, ($3 + [160]))
	
.LABEL $label$32
	if ( ((*(($3 + [192])) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($3 + [200])))
	
.LABEL $label$34
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($3 + [128])))
	
.LABEL $label$35
	CALL $51($0, $4, $7)
	CALL $52(($0 + [32]), $4)
	$10 = *($4 + [8])
	*((($3 + [160]) + [32])) = *(($12 + [8]))
	*($3 + [160]) = *($4)
	*($3 + [168]) = $10
	$10 = *($4 + [16])
	*($3 + [184]) = *($12)
	*($3 + [176]) = $10
	$12 = CALL $139((($3 + [160]) + [40]), ($4 + [40]))
	*(($3 + [240])) = *(($2 + [16]))
	*(($3 + [248])) = *(($2 + [24]))
	*(($3 + [232])) = *(($2 + [8]))
	*($3 + [224]) = *($2)
	*(($3 + [272])) = *(($5 + [16]))
	*(($3 + [264])) = *(($5 + [8]))
	*(($3 + [280])) = *(($5 + [24]))
	*($3 + [256]) = *($5)
	*($3 + [212]) = $7
	*(($3 + [304])) = *(($6 + [16]))
	$10 = *(($6 + [24]))
	$8 = *(($6 + [8]))
	$15 = *($6)
	*(($3 + [328])) = $9
	*(($3 + [296])) = $8
	*(($3 + [312])) = $10
	*($3 + [288]) = $15
	*($3 + [320]) = $11
	*($3 + [336]) = *(($4 + [128]))
	*(($14 = (($3 + [120]) + [32]))) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	*($3 + [156]) = [0]
	$10 = *($0)
	*($3 + [120]) = $10
	*($3 + [128]) = $10
	*($3 + [520]) = ($3 + [160])
	*($3 + [104]) = $10
	if ( ((int_64)$10 == (int_64)CALL current_receiver()) ){ goto $label$36 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$36
	*($3 + [532]) = ($3 + [520])
	*($3 + [528]) = ($3 + [120])
	*($3 + [536]) = ($3 + [104])
	*(($1 = CALL _Znwj([208])) + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40 align=4]) = (int_64)0
	*($1 + [48]) = [0]
	*($1 + [160]) = (int_64)0
	*($1 + [168]) = (int_64)0
	*($1 + [184]) = ($3 + [120])
	CALL $53(($3 + [528]), $1)
	*($3 + [504]) = $1
	$10 = ((int_64)*($1) ^ (int_64)-1)
	*($3 + [528]) = $10
	$4 = *($1 + [188])
	*($3 + [360]) = $4
	$2 = ($3 + [148])
	$13 = *($2)
	if ( ((uint_32)$13 >= (uint_32)*($14)) ){ goto $label$39 }
	*($13 + [8]) = $10
	*($13 + [16]) = $4
	*($3 + [504]) = [0]
	*($13) = $1
	*($2) = ($13 + [24])
	$13 = *($3 + [504])
	$1 = [0]
	*($3 + [504]) = [0]
	if ( ($13 == 0) ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$39
	CALL $54(($3 + [144]), ($3 + [504]), ($3 + [528]), ($3 + [360]))
	$13 = *($3 + [504])
	$1 = [0]
	*($3 + [504]) = [0]
	if ( ($13 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($13 + [48])))
	
.LABEL $label$40
	CALL _ZdlPv($13)
	
.LABEL $label$37
	$13 = CALL db_lowerbound_i64(*($3 + [120]), *(($3 + [128])), (int_64)-4994024801686257664, (int_64)0)
	if ( ((int_32)$13 < (int_32)$1) ){ goto $label$44 }
	$13 = CALL db_next_i64(*(CALL $55(($3 + [120]), $13) + [188]), ($3 + [528]))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$43 }
	$1 = [1]
	
.LOOP $label$45:
	$1 = ($1 + [1])
	$13 = CALL db_next_i64(*(CALL $55(($3 + [120]), $13) + [188]), ($3 + [528]))
	if ( ((int_32)$13 >= (int_32)[0]) ){ goto $label$45 }
	
.LABEL $label$44
	if ( ((int_32)$1 <= (int_32)*($0 + [272])) ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$43
	if ( ((int_32)[1] <= (int_32)*($0 + [272])) ){ goto $label$41 }
	
.LABEL $label$42
	*($3 + [528]) = (CASTING uint_64)(uint_32 ($3 + [120]))
	CALL $57(($3 + [120]), *(CALL $56(($3 + [528])) + [4]))
	
.LABEL $label$41
	$10 = *($0)
	*($3 + [88]) = [17541]
	*($3 + [92]) = CALL $174([17541])
	*($3 + [8]) = *($3 + [88])
	$1 = CALL $5(($3 + [96]), ($3 + [8]))
	*($3 + [104]) = $10
	*($3 + [112]) = *($1)
	*($3 + [80]) = [17561]
	*($3 + [84]) = CALL $174([17561])
	*($3) = *($3 + [80])
	$1 = CALL $5(($3 + [360]), $3)
	$13 = *(($3 + [432]))
	if ( ((uint_32)$13 >= (uint_32)*((($3 + [392]) + [44]))) ){ goto $label$49 }
	$14 = ($3 + [336])
	$4 = (($3 + [160]) + [128])
	$2 = ($3 + [256])
	$5 = ($3 + [224])
	$6 = ($3 + [212])
	$7 = (($3 + [160]) + [24])
	$16 = (($3 + [160]) | [8])
	$10 = *($0)
	*($13 + [8]) = *($1)
	*($13) = $10
	*($13 + [16 align=4]) = (int_64)0
	*(($17 = ($13 + [24]))) = [0]
	$1 = CALL _Znwj([16])
	*($13 + [16]) = $1
	$18 = ($1 + [16])
	*($17) = $18
	*(($1 + [8])) = *((($3 + [104]) + [8]))
	*($1) = *($3 + [104])
	*(($13 + [20])) = $18
	*($13 + [28 align=4]) = (int_64)0
	*(($13 + [36])) = [0]
	$1 = *($12)
	$17 = ( *((($3 + [160]) + [44])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($17 + [149])
	$10 = (CASTING uint_64)(uint_32 $17)
	$17 = ($13 + [28])
	
.LOOP $label$50:
	$1 = ($1 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$50 }
	if ( ($1 == 0) ){ goto $label$48 }
	CALL $58($17, $1)
	$17 = *(($13 + [32]))
	$1 = *(($13 + [28]))
	goto $label$47 
	
.LABEL $label$49
	CALL $59($16, ($3 + [104]), $0, $1, ($3 + [160]))
	goto $label$46 
	
.LABEL $label$48
	$17 = [0]
	$1 = [0]
	
.LABEL $label$47
	*($3 + [508]) = $1
	*($3 + [504]) = $1
	*($3 + [512]) = $17
	*($3 + [520]) = ($3 + [504])
	*($3 + [532]) = $16
	*($3 + [536]) = ($3 + [176])
	*($3 + [540]) = $7
	*($3 + [544]) = $12
	*($3 + [548]) = $6
	*($3 + [552]) = $5
	*($3 + [556]) = $2
	*($3 + [560]) = $4
	*($3 + [564]) = ($3 + [320])
	*($3 + [568]) = $14
	*($3 + [528]) = ($3 + [160])
	CALL $60(($3 + [528]), ($3 + [520]))
	*(($1 = (($3 + [392]) + [40]))) = (*($1) + [40])
	
.LABEL $label$46
	$10 = *($0)
	*($3 + [536]) = $10
	*($3 + [528]) = ((int_64)((int_64)*($3 + [168]) & (int_64)-4294967296) + (int_64)((int_64)*($3 + [160]) << (int_64)32))
	CALL $61(($3 + [392]), ($3 + [528]), $10, [0])
	$14 = *($3 + [144])
	if ( ($14 == 0) ){ goto $label$51 }
	$4 = ($3 + [148])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$14) ){ goto $label$53 }
	
.LOOP $label$54:
	$1 = ($1 + [-24])
	$13 = *($1)
	*($1) = [0]
	if ( ($13 == 0) ){ goto $label$55 }
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($13 + [48])))
	
.LABEL $label$56
	CALL _ZdlPv($13)
	
.LABEL $label$55
	if ( ((int_32)$14 != (int_32)$1) ){ goto $label$54 }
	$1 = *(($3 + [144]))
	goto $label$52 
	
.LABEL $label$53
	$1 = $14
	
.LABEL $label$52
	*($4) = $14
	CALL _ZdlPv($1)
	
.LABEL $label$51
	if ( ((*($12) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*(($3 + [208])))
	
.LABEL $label$57
	CALL $62(($3 + [392]))
	$global$0 = ($3 + [576])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [496])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $179($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [408])) = (int_64)0
	*(($4 + [400])) = (int_64)0
	*(($4 + [392])) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [368]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$5
	$8 = ($2 + $7)
	$3 = ($4 + [384])
	CALL memcpy(($4 + [368]), $2, [8])
	$9 = ($2 + [8])
	if ( ((uint_32)($7 + [-8]) > (uint_32)[31]) ){ goto $label$6 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$6
	CALL memcpy($3, $9, [32])
	*((($4 + [8]) + [24])) = $8
	*((($4 + [8]) + [40])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [24]) = $2
	*(($4 + [28])) = ($2 + [40])
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [272])) = [0]
	*($4 + [280]) = [300]
	*($4 + [284]) = [44]
	*($4 + [288]) = (int_64)85899346660
	*($4 + [296]) = (int_64)4294968296
	*($4 + [304]) = [37]
	*($4 + [312]) = (int_64)10000
	*($4 + [320]) = (int_64)2147483648001
	*($4 + [328]) = (int_64)420000000
	*($4 + [336]) = (int_64)77
	*($4 + [344]) = (int_64)170000
	*($4 + [352]) = (int_64)17
	*($4 + [360]) = [7]
	*(($8 = (($4 + [416]) + [16]))) = *(($3 + [16]))
	*(($9 = (($4 + [416]) + [24]))) = *(($3 + [24]))
	*($4 + [416]) = *($3)
	*($4 + [424]) = *(($3 + [8]))
	$0 = *($4 + [368])
	*((($4 + [448]) + [24])) = *($9)
	*((($4 + [448]) + [16])) = *($8)
	*($4 + [488]) = $0
	*($4 + [456]) = *($4 + [424])
	*($4 + [448]) = *($4 + [416])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 ($4 + [488])), (int_32 ($4 + [448])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $183($2)
	
.LABEL $label$8
	CALL $28(($4 + [8]))
	$global$0 = ($4 + [496])
	return [1]
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [17528]
	*($1 + [12]) = CALL $174([17528])
	*($1) = *($1 + [8])
	CALL require_auth(*(CALL $5(($1 + [16]), $1)))
	$2 = ($0 + [192])
	$3 = *(($0 + [220]))
	if ( ((int_32)$3 == (int_32)*(($0 + [216]))) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	if ( ((int_32)*($3 + [16]) == (int_32)$2) ){ goto $label$4 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$4
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($2), *(($0 + [200])), (int_64)7615822568287911936, (int_64)7615822568287911936)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $63($2, $3)
	if ( ((int_32)*($3 + [16]) == (int_32)$2) ){ goto $label$2 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$2
	$4 = CALL db_next_i64(*($3 + [20]), ($1 + [24]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL $63($2, $4)
	
.LABEL $label$5
	CALL $64($2, $3)
	
.LABEL $label$1
	$2 = ($0 + [72])
	$3 = *(($0 + [100]))
	if ( ((int_32)$3 == (int_32)*(($0 + [96]))) ){ goto $label$8 }
	$3 = *(($3 + [-24]))
	if ( ((int_32)*($3 + [16]) == (int_32)$2) ){ goto $label$9 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$9
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $65($2, $3)
	if ( ((int_32)*($3 + [16]) == (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$7
	$4 = CALL db_next_i64(*($3 + [20]), ($1 + [24]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	CALL $65($2, $4)
	
.LABEL $label$10
	CALL $66($2, $3)
	
.LABEL $label$6
	$2 = ($0 + [152])
	$3 = *(($0 + [180]))
	if ( ((int_32)$3 == (int_32)*(($0 + [176]))) ){ goto $label$13 }
	$0 = *(($3 + [-24]))
	if ( ((int_32)*($0 + [8]) == (int_32)$2) ){ goto $label$14 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$14
	if ( $0 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$0 = CALL db_find_i64(*($2), *(($0 + [160])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$11 }
	$0 = CALL $67($2, $0)
	if ( ((int_32)*($0 + [8]) == (int_32)$2) ){ goto $label$12 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$12
	$3 = CALL db_next_i64(*($0 + [12]), ($1 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	CALL $67($2, $3)
	
.LABEL $label$15
	CALL $68($2, $0)
	
.LABEL $label$11
	$global$0 = ($1 + [32])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [192])
	$global$0 = $2
	*($2 + [136]) = [17636]
	*($2 + [140]) = CALL $174([17636])
	*($2 + [16]) = *($2 + [136])
	CALL require_auth(*(CALL $5(($2 + [144]), ($2 + [16]))))
	*($2 + [128]) = [17723]
	*($2 + [132]) = CALL $174([17723])
	*($2 + [8]) = *($2 + [128])
	$3 = CALL $5(($2 + [88]), ($2 + [8]))
	if ( ((int_64)*($1) != (int_64)*($3)) ){ goto $label$2 }
	$4 = *($0)
	*($2 + [80]) = [17792]
	*($2 + [84]) = CALL $174([17792])
	*($2) = *($2 + [80])
	CALL $5(($2 + [40]), $2)
	*(($5 = (($2 + [88]) + [32]))) = [0]
	*($2 + [96]) = (int_64)-3844578745960628224
	*($2 + [88]) = $4
	*($2 + [104]) = (int_64)-1
	*($2 + [112]) = (int_64)0
	*($2 + [124]) = [0]
	*((($2 + [40]) + [32])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	*($2 + [76]) = [0]
	$4 = *($0)
	*($2 + [40]) = $4
	*($2 + [48]) = $4
	$1 = CALL db_lowerbound_i64($4, $4, (int_64)-4994024801686257664, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$4 }
	*($2 + [36]) = CALL $55(($2 + [40]), $1)
	*($2 + [32]) = ($2 + [40])
	$6 = (($2 + [88]) + [24])
	$7 = ($2 + [168])
	$8 = ($2 + [116])
	
.LOOP $label$5:
	$4 = *($0)
	*($2 + [24]) = ($2 + [32])
	*($2 + [184]) = $4
	if ( ((int_64)*($2 + [88]) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$6
	*($7) = ($2 + [184])
	*($2 + [164]) = ($2 + [24])
	*($2 + [160]) = ($2 + [88])
	*(($1 = CALL _Znwj([208])) + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40 align=4]) = (int_64)0
	*($1 + [48]) = [0]
	*($1 + [160]) = (int_64)0
	*($1 + [168]) = (int_64)0
	*($1 + [184]) = ($2 + [88])
	CALL $72(($2 + [160]), $1)
	*($2 + [176]) = $1
	$4 = ((int_64)*($1) ^ (int_64)-1)
	*($2 + [160]) = $4
	$9 = *($1 + [188])
	*($2 + [156]) = $9
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*($5)) ){ goto $label$11 }
	*($3 + [8]) = $4
	*($3 + [16]) = $9
	*($2 + [176]) = [0]
	*($3) = $1
	*($8) = ($3 + [24])
	$1 = *($2 + [176])
	*($2 + [176]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $54($6, ($2 + [176]), ($2 + [160]), ($2 + [156]))
	$1 = *($2 + [176])
	*($2 + [176]) = [0]
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	$4 = *($2 + [32])
	$3 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( $3) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	$4 = *($2 + [32])
	$3 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( $3) ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [18033])
	CALL eosio_assert([0], [18067])
	
.LABEL $label$7
	$1 = [0]
	$9 = CALL db_next_i64(*($3 + [188]), ($2 + [160]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$13 }
	$1 = CALL $55((CASTING uint_32)(uint_64 $4), $9)
	
.LABEL $label$13
	CALL $57(($2 + [40]), $3)
	*($2 + [32]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))
	if ( $1 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	*($2 + [36]) = [0]
	*($2 + [32]) = ($2 + [40])
	
.LABEL $label$3
	$1 = CALL db_lowerbound_i64(*($2 + [88]), *((($2 + [88]) + [8])), (int_64)-4994024801686257664, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$16 }
	*($2 + [36]) = CALL $55(($2 + [88]), $1)
	*($2 + [32]) = ($2 + [88])
	$6 = (($2 + [40]) + [24])
	$5 = (($2 + [160]) + [8])
	$7 = ($2 + [72])
	$8 = ($2 + [68])
	
.LOOP $label$17:
	$4 = *($0)
	*($2 + [24]) = ($2 + [32])
	*($2 + [184]) = $4
	if ( ((int_64)*($2 + [40]) == (int_64)CALL current_receiver()) ){ goto $label$18 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$18
	*($5) = ($2 + [184])
	*($2 + [164]) = ($2 + [24])
	*($2 + [160]) = ($2 + [40])
	*(($1 = CALL _Znwj([208])) + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40 align=4]) = (int_64)0
	*($1 + [48]) = [0]
	*($1 + [160]) = (int_64)0
	*($1 + [168]) = (int_64)0
	*($1 + [184]) = ($2 + [40])
	CALL $73(($2 + [160]), $1)
	*($2 + [176]) = $1
	$4 = ((int_64)*($1) ^ (int_64)-1)
	*($2 + [160]) = $4
	$9 = *($1 + [188])
	*($2 + [156]) = $9
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*($7)) ){ goto $label$23 }
	*($3 + [8]) = $4
	*($3 + [16]) = $9
	*($2 + [176]) = [0]
	*($3) = $1
	*($8) = ($3 + [24])
	$1 = *($2 + [176])
	*($2 + [176]) = [0]
	if ( ($1 == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL $54($6, ($2 + [176]), ($2 + [160]), ($2 + [156]))
	$1 = *($2 + [176])
	*($2 + [176]) = [0]
	if ( $1 ){ goto $label$21 }
	
.LABEL $label$22
	$4 = *($2 + [32])
	$3 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( $3) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$24
	CALL _ZdlPv($1)
	$4 = *($2 + [32])
	$3 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( $3) ){ goto $label$19 }
	
.LABEL $label$20
	CALL eosio_assert([0], [18033])
	CALL eosio_assert([0], [18067])
	
.LABEL $label$19
	$1 = [0]
	$9 = CALL db_next_i64(*($3 + [188]), ($2 + [160]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$25 }
	$1 = CALL $55((CASTING uint_32)(uint_64 $4), $9)
	
.LABEL $label$25
	CALL $57(($2 + [88]), $3)
	*($2 + [32]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))
	if ( $1 ){ goto $label$17 }
	$0 = *($2 + [64])
	if ( $0 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	*($2 + [36]) = [0]
	*($2 + [32]) = ($2 + [88])
	$0 = *($2 + [64])
	if ( ($0 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$9 = ($2 + [68])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$26 }
	
.LOOP $label$27:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$28 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$29
	CALL _ZdlPv($3)
	
.LABEL $label$28
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$27 }
	$1 = *(($2 + [64]))
	*($9) = $0
	CALL _ZdlPv($1)
	$0 = *($2 + [112])
	if ( $0 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$26
	*($9) = $0
	CALL _ZdlPv($0)
	$0 = *($2 + [112])
	if ( ($0 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$14
	$0 = *($2 + [112])
	if ( $0 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$1
	$9 = ($2 + [116])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$31 }
	
.LOOP $label$32:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$33 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$34
	CALL _ZdlPv($3)
	
.LABEL $label$33
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$32 }
	$1 = *(($2 + [112]))
	goto $label$30 
	
.LABEL $label$31
	$1 = $0
	
.LABEL $label$30
	*($9) = $0
	CALL _ZdlPv($1)
	$global$0 = ($2 + [192])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	*($4 + [104]) = [17636]
	*($4 + [108]) = CALL $174([17636])
	*($4 + [32]) = *($4 + [104])
	CALL require_auth(*(CALL $5(($4 + [112]), ($4 + [32]))))
	CALL eosio_assert(((uint_64)*($2) <= (uint_64)*($3)), [17649])
	CALL eosio_assert((uint_64)((int_64))(*($3) - *($2)) <= (int_64)100), [17679])
	*($4 + [96]) = [17707]
	*($4 + [100]) = CALL $174([17707])
	*($4 + [24]) = *($4 + [96])
	$5 = CALL $5(($4 + [40]), ($4 + [24]))
	if ( ((int_64)*($1) != (int_64)*($5)) ){ goto $label$5 }
	$6 = *($2)
	if ( ((uint_64)$6 > (uint_64)*($3)) ){ goto $label$4 }
	$7 = ($0 + [32])
	$8 = ($0 + [60])
	$9 = ($0 + [56])
	$10 = ($0 + [40])
	
.LOOP $label$6:
	$1 = *($8)
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$11:
	$2 = ($1 + [-24])
	$0 = *($2)
	if ( ((int_64)*($0) == (int_64)$6) ){ goto $label$10 }
	$1 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	if ( ((int_32)*($0 + [168]) == (int_32)$7) ){ goto $label$12 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$12
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = CALL db_find_i64(*($7), *($10), (int_64)4229865212519383040, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$0 = CALL $76($7, $2)
	if ( ((int_32)*($0 + [168]) == (int_32)$7) ){ goto $label$8 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$8
	$2 = CALL db_next_i64(*($0 + [172]), ($4 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	CALL $76($7, $2)
	
.LABEL $label$13
	CALL $52($7, $0)
	
.LABEL $label$7
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((uint_64)$6 <= (uint_64)*($3)) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*($4 + [88]) = [17712]
	*($4 + [92]) = CALL $174([17712])
	*($4 + [16]) = *($4 + [88])
	$5 = CALL $5(($4 + [40]), ($4 + [16]))
	if ( ((int_64)*($1) != (int_64)*($5)) ){ goto $label$16 }
	$6 = *($2)
	if ( ((uint_64)$6 > (uint_64)*($3)) ){ goto $label$15 }
	$7 = ($0 + [112])
	$8 = ($0 + [140])
	$9 = ($0 + [136])
	$10 = ($0 + [120])
	
.LOOP $label$17:
	$1 = *($8)
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$21 }
	
.LOOP $label$23:
	$2 = ($1 + [-24])
	$0 = *($2)
	if ( ((int_64)*($0) == (int_64)$6) ){ goto $label$22 }
	$1 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$21 }
	if ( ((int_32)*($0 + [48]) != (int_32)$7) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$2 = CALL db_find_i64(*($7), *($10), (int_64)-4425746941110517760, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$18 }
	$0 = CALL $34($7, $2)
	if ( ((int_32)*($0 + [48]) == (int_32)$7) ){ goto $label$19 }
	
.LABEL $label$20
	CALL eosio_assert([0], [17954])
	
.LABEL $label$19
	$2 = CALL db_next_i64(*($0 + [52]), ($4 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$24 }
	CALL $34($7, $2)
	
.LABEL $label$24
	CALL $38($7, $0)
	
.LABEL $label$18
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((uint_64)$6 <= (uint_64)*($3)) ){ goto $label$17 }
	goto $label$14 
	
.LABEL $label$16
	*($4 + [80]) = [17723]
	*($4 + [84]) = CALL $174([17723])
	*($4 + [8]) = *($4 + [80])
	$5 = CALL $5(($4 + [40]), ($4 + [8]))
	if ( ((int_64)*($1) != (int_64)*($5)) ){ goto $label$27 }
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	*($4 + [76]) = [0]
	$6 = *($0)
	*($4 + [40]) = $6
	*($4 + [48]) = $6
	$6 = *($2)
	if ( ((uint_64)$6 > (uint_64)*($3)) ){ goto $label$2 }
	$7 = ($4 + [48])
	$8 = ($4 + [64])
	$9 = ($4 + [68])
	$5 = [0]
	$1 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$27
	CALL eosio_assert([0], [17731])
	$11 = [21]
	goto $label$1 
	
.LABEL $label$26
	$11 = [2]
	goto $label$1 
	
.LABEL $label$25
	$11 = [0]
	goto $label$1 
	
.LABEL $label$15
	$11 = [21]
	goto $label$1 
	
.LABEL $label$14
	$11 = [21]
	goto $label$1 
	
.LABEL $label$4
	$11 = [21]
	goto $label$1 
	
.LABEL $label$3
	$11 = [21]
	goto $label$1 
	
.LABEL $label$2
	$11 = [21]
	
.LABEL $label$1
	
.LOOP $label$28:
	goto $label$71 
	
.LABEL $label$72
	$1 = *($9)
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$46 }
	$11 = [0]
	goto $label$28 
	
.LABEL $label$71
	$2 = ($1 + [-24])
	$0 = *($2)
	if ( ((int_64)$6 == (int_64)((int_64)*($0) ^ (int_64)-1)) ){ goto $label$42 }
	$11 = [1]
	goto $label$28 
	
.LABEL $label$70
	$1 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$40 }
	goto $label$41 
	
.LABEL $label$69
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$45 }
	$11 = [23]
	goto $label$28 
	
.LABEL $label$68
	if ( ((int_32)*($0 + [184]) == (int_32)($4 + [40])) ){ goto $label$29 }
	$11 = [24]
	goto $label$28 
	
.LABEL $label$67
	CALL eosio_assert([0], [17954])
	$11 = [25]
	goto $label$28 
	
.LABEL $label$66
	if ( $0 ){ goto $label$43 }
	goto $label$44 
	
.LABEL $label$65
	$2 = CALL db_find_i64(*($4 + [40]), *($7), (int_64)-4994024801686257664, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$39 }
	$11 = [3]
	goto $label$28 
	
.LABEL $label$64
	$0 = CALL $55(($4 + [40]), $2)
	if ( ((int_32)*($0 + [184]) == (int_32)($4 + [40])) ){ goto $label$38 }
	$11 = [4]
	goto $label$28 
	
.LABEL $label$63
	CALL eosio_assert([0], [17954])
	$11 = [5]
	goto $label$28 
	
.LABEL $label$62
	$2 = CALL db_next_i64(*($0 + [188]), ($4 + [120]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$37 }
	$11 = [6]
	goto $label$28 
	
.LABEL $label$61
	CALL $55(($4 + [40]), $2)
	$11 = [7]
	goto $label$28 
	
.LABEL $label$60
	CALL $57(($4 + [40]), $0)
	$11 = [8]
	goto $label$28 
	
.LABEL $label$59
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((uint_64)$6 <= (uint_64)*($3)) ){ goto $label$36 }
	$11 = [10]
	goto $label$28 
	
.LABEL $label$58
	$0 = *($4 + [64])
	if ( ($0 == 0) ){ goto $label$35 }
	$11 = [11]
	goto $label$28 
	
.LABEL $label$57
	$5 = ($4 + [68])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$34 }
	$11 = [12]
	goto $label$28 
	
.LABEL $label$56
	$11 = [13]
	goto $label$28 
	
.LABEL $label$55
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$32 }
	$11 = [14]
	goto $label$28 
	
.LABEL $label$54
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$31 }
	$11 = [15]
	goto $label$28 
	
.LABEL $label$53
	CALL _ZdlPv(*(($1 + [48])))
	$11 = [16]
	goto $label$28 
	
.LABEL $label$52
	CALL _ZdlPv($1)
	$11 = [17]
	goto $label$28 
	
.LABEL $label$51
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$33 }
	$11 = [18]
	goto $label$28 
	
.LABEL $label$50
	$2 = *(($4 + [64]))
	goto $label$30 
	
.LABEL $label$49
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$48
	$2 = $0
	$11 = [19]
	goto $label$28 
	
.LABEL $label$47
	*($5) = $0
	CALL _ZdlPv($2)
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$46
	$11 = [2]
	goto $label$28 
	
.LABEL $label$45
	$11 = [2]
	goto $label$28 
	
.LABEL $label$44
	$11 = [8]
	goto $label$28 
	
.LABEL $label$43
	$11 = [5]
	goto $label$28 
	
.LABEL $label$42
	$11 = [22]
	goto $label$28 
	
.LABEL $label$41
	$11 = [2]
	goto $label$28 
	
.LABEL $label$40
	$11 = [0]
	goto $label$28 
	
.LABEL $label$39
	$11 = [8]
	goto $label$28 
	
.LABEL $label$38
	$11 = [5]
	goto $label$28 
	
.LABEL $label$37
	$11 = [7]
	goto $label$28 
	
.LABEL $label$36
	$11 = [9]
	goto $label$28 
	
.LABEL $label$35
	$11 = [21]
	goto $label$28 
	
.LABEL $label$34
	$11 = [20]
	goto $label$28 
	
.LABEL $label$33
	$11 = [13]
	goto $label$28 
	
.LABEL $label$32
	$11 = [17]
	goto $label$28 
	
.LABEL $label$31
	$11 = [16]
	goto $label$28 
	
.LABEL $label$30
	$11 = [19]
	goto $label$28 
	
.LABEL $label$29
	$11 = [25]
	goto $label$28 
	$11
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $179($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [400]) = (int_64)0
	*($4 + [392]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [380]) = $2
	*($4 + [376]) = $2
	*($4 + [384]) = ($2 + $7)
	*($4 + [448]) = ($4 + [376])
	*($4 + [16]) = ($4 + [392])
	CALL $75(($4 + [16]), ($4 + [448]))
	*(($3 = ($4 + [8]))) = *($4 + [384])
	*($4) = *($4 + [376])
	$3 = *($3)
	*((($4 + [416]) + [8])) = $3
	*(($8 = (($4 + [432]) + [8]))) = $3
	$9 = *($4)
	*($4 + [432]) = $9
	*($4 + [416]) = $9
	$3 = *($8)
	*((($4 + [448]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [432])
	*($4 + [32]) = $1
	*($4 + [448]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [288]) = [300]
	*($4 + [292]) = [44]
	*($4 + [296]) = (int_64)85899346660
	*($4 + [304]) = (int_64)4294968296
	*($4 + [312]) = [37]
	*($4 + [320]) = (int_64)10000
	*($4 + [328]) = (int_64)2147483648001
	*($4 + [336]) = (int_64)420000000
	*($4 + [344]) = (int_64)77
	*($4 + [352]) = (int_64)170000
	*($4 + [360]) = (int_64)17
	*($4 + [368]) = [7]
	$0 = *($4 + [408])
	$1 = *($4 + [392])
	*($4 + [432]) = *($4 + [400])
	*($4 + [448]) = $1
	*($4 + [416]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [448])), (int_32 ($4 + [432])), (int_32 ($4 + [416])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $183($2)
	
.LABEL $label$5
	CALL $28(($4 + [16]))
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $181($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [20385])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $117(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18266])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18312])
	
.LABEL $label$2
	*($1) = *(*($3))
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $3, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $112 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18266])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18312])
	
.LABEL $label$2
	$3 = *($3)
	*($1) = *($3)
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	$4 = $4
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL memcpy(($4 + [-8]), $6, [8])
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7615822568287911936) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)7615822568287911937
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	CALL memcpy(($4 + [16]), $5, [8])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7615822568287911936, $2, (int_64)7615822568287911936, ($4 + [16]), [16])
	*($5 + [20]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7615822568287911936) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)7615822568287911937
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7615822568287911936
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)7615822568287911936
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $114(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18005])
	
.LABEL $label$5
	$2 = CALL $179($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $111(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $183($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [288])
	$global$0 = $4
	$5 = *($0)
	*($4 + [272]) = [17541]
	*($4 + [276]) = CALL $174([17541])
	*($4 + [24]) = *($4 + [272])
	$6 = CALL $5(($4 + [280]), ($4 + [24]))
	*($4 + [88]) = $5
	*($4 + [96]) = *($6)
	$5 = *($2 + [8])
	if ( ((int_64)$5 <= (int_64)293370680067) ){ goto $label$5 }
	if ( ((int_64)$5 == (int_64)293370680068) ){ goto $label$3 }
	if ( ((int_64)$5 == (int_64)293455873288) ){ goto $label$4 }
	if ( ((int_64)$5 == (int_64)310651471112) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$7 = (int_64)6138663591592764928
	if ( ((int_64)$5 == (int_64)1397703940) ){ goto $label$1 }
	if ( ((int_64)$5 != (int_64)289176438024) ){ goto $label$2 }
	
.LABEL $label$4
	$7 = (int_64)4301877912145143680
	goto $label$1 
	
.LABEL $label$3
	$7 = (int_64)-4492738244669860560
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [19010])
	$7 = (int_64)0
	
.LABEL $label$1
	*($4 + [256]) = [8293]
	*($4 + [260]) = CALL $174([8293])
	*($4 + [16]) = *($4 + [256])
	$6 = CALL $5(($4 + [264]), ($4 + [16]))
	CALL $119(($4 + [64]), $0, $1)
	*(($4 + [152])) = *(($2 + [8]))
	$8 = (($4 + [64]) + [8])
	*(($4 + [168])) = *($8)
	*($8) = [0]
	*($4 + [128]) = *($0)
	*($4 + [136]) = *($1 + [40])
	*($4 + [144]) = *($2)
	*($4 + [160]) = *($4 + [64])
	*($4 + [64]) = (int_64)0
	$6 = CALL $47(($4 + [192]), ($4 + [88]), $7, *($6), ($4 + [128]))
	CALL $41($6)
	$8 = *($6 + [28])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($6 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$8 = *($6 + [16])
	if ( ($8 == 0) ){ goto $label$7 }
	*(($6 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$7
	if ( ((*(($4 + [160])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [168])))
	
.LABEL $label$8
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$9
	$5 = CALL current_time()
	*((($4 + [192]) + [28])) = (int_64)0
	*(($4 + [236])) = (int_64)0
	*(($4 + [244])) = (int_64)0
	*($4 + [204]) = [0]
	*($4 + [208]) = [0]
	*($4 + [212 align=4]) = (int_64)0
	*($4 + [228 align=4]) = (int_64)0
	*($4 + [192]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*(($4 + [144])) = *(($2 + [8]))
	*($4 + [184]) = $3
	*($4 + [128]) = *($1 + [24])
	*($4 + [136]) = *($2)
	*($4 + [152]) = *($1 + [32])
	*($4 + [160]) = *(($1 + [40]))
	*($4 + [168]) = *($1 + [48])
	*($4 + [176]) = *($1 + [56])
	*(($4 + [120])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$5 = *($0)
	*($4 + [88]) = $5
	*($4 + [96]) = $5
	*($4 + [40]) = ($4 + [128])
	CALL $120(($4 + [64]), ($4 + [88]), $5, ($4 + [40]))
	$5 = *($0)
	*($4 + [48]) = [17541]
	*($4 + [52]) = CALL $174([17541])
	*($4 + [8]) = *($4 + [48])
	$2 = CALL $5(($4 + [56]), ($4 + [8]))
	*($4 + [64]) = $5
	*($4 + [72]) = *($2)
	*($4 + [32]) = [19835]
	*($4 + [36]) = CALL $174([19835])
	*($4) = *($4 + [32])
	CALL $121(($4 + [228]), ($4 + [64]), $0, CALL $5(($4 + [40]), $4), ($4 + [128]))
	$5 = *($1 + [48])
	$7 = *($0)
	*($4 + [72]) = $7
	*($4 + [64]) = ((int_64)$5 << (int_64)32)
	CALL $61(($4 + [192]), ($4 + [64]), $7, [0])
	$2 = *($4 + [112])
	if ( ($2 == 0) ){ goto $label$10 }
	$1 = *((($4 + [88]) + [28]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($4 + [112]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $2
	
.LABEL $label$11
	*(($4 + [116])) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$10
	CALL $62(($4 + [192]))
	$global$0 = ($4 + [288])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $174([19847])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [19847], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = [0]
	$5 = (($3 + [16]) | [1])
	$7 = *($2 + [24])
	
.LOOP $label$6:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [32]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [16]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$8 }
	*($3 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$7
	CALL $143(($3 + [16]), [0])
	*((($3 + [16]) + [8])) = *((($3 + [32]) + [8]))
	*($3 + [16]) = *($3 + [32])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$6 }
	$4 = *($3 + [16])
	$6 = ($4 & [1])
	CALL $145($0, ( *((($3 + [16]) + [8])) ? $5 : $6 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $6 ))
	CALL $144($0, [19883])
	$7 = *($2 + [40])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$12 }
	$5 = [0]
	$2 = *([0] + [19132])
	
.LOOP $label$14:
	*((($3 + [32]) + ($4 = $5))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$13 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$11 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$5 = $4
	goto $label$9 
	
.LABEL $label$11
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $5
	
.LABEL $label$10
	$6 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$15:
	*(($2 + $4)) = *((($3 + [32]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$15 }
	$5 = ($2 + $5)
	$4 = ($3 | [1])
	
.LABEL $label$9
	*($5) = [0]
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $145($0, ( *($3 + [8]) ? $4 : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	CALL $144($0, [19892])
	if ( (*($3) & [1]) ){ goto $label$17 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [8])))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($3 + [24])))
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [80])
	$global$0 = $6
	$7 = *($1)
	if ( ($7 & [1]) ){ goto $label$6 }
	$7 = uint_32($7 >> [1])
	$8 = ($1 + [1])
	$9 = ($8 + $7)
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = *($1 + [4])
	$8 = *($1 + [8])
	$9 = ($8 + $7)
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $156(*($8)) ){ goto $label$4 }
	$8 = ($8 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$8 = $9
	$7 = [1]
	$10 = *($1)
	if ( (($10 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$7 = ($8 + [1])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $156(*($7)) == 0) ){ goto $label$10 }
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($8) = *($7)
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = [1]
	$10 = *($1)
	if ( ($10 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = ($1 + $7)
	$7 = ($9 + uint_32($10 >> $7))
	goto $label$1 
	
.LABEL $label$2
	$9 = *($1 + [8])
	$7 = ($9 + *($1 + [4]))
	
.LABEL $label$1
	CALL $146($1, ($8 - $9), ($7 - $8))
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$12 }
	$7 = uint_32($8 >> [1])
	$8 = ($1 + [1])
	goto $label$11 
	
.LABEL $label$12
	$7 = *($1 + [4])
	$8 = *($1 + [8])
	
.LABEL $label$11
	$10 = ($0 + [276])
	$9 = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	$9 = [0]
	$0 = (*($10) & [255])
	
.LOOP $label$14:
	$9 = ($9 + ((int_32)*($8) == (int_32)$0))
	$8 = ($8 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$14 }
	$9 = ((int_32)$9 == (int_32)[3])
	
.LABEL $label$13
	CALL eosio_assert($9, [19471])
	*($6 + [72]) = [0]
	*($6 + [64]) = (int_64)0
	*($6 + [32]) = [0]
	*($6 + [76]) = [1]
	$8 = CALL $3($1, ($6 + [64]), $10, ($6 + [32]), ($6 + [76]))
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)[0]), [19484])
	CALL $141($2, ($6 + [64]))
	*($6 + [76]) = ($8 + [1])
	*($6 + [32]) = [1]
	$8 = CALL $3($1, ($6 + [64]), $10, ($6 + [76]), ($6 + [32]))
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)[0]), [19503])
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) == (int_32)[40]), [8238])
	CALL $2(($6 + [64]), ($6 + [32]), [20])
	*(($3 + [24])) = *((($6 + [32]) + [24]))
	*(($3 + [16])) = *((($6 + [32]) + [16]))
	*(($3 + [8])) = *($6 + [40])
	*($3) = *($6 + [32])
	*($6 + [76]) = ($8 + [1])
	*($6 + [32]) = [1]
	$8 = CALL $3($1, ($6 + [64]), $10, ($6 + [76]), ($6 + [32]))
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)[0]), [19521])
	$0 = (($6 + [64]) | [1])
	$7 = ( *($6 + [72]) ? $0 : (*($6 + [64]) & [1]) )
	*($4) = CALL $170($7, ($6 + [28]), [16])
	$9 = *($6 + [64])
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)($7 + ( *($6 + [68]) ? uint_32($9 >> [1]) : ($9 & [1]) ))), [19530])
	$8 = ($8 + [1])
	*($6 + [76]) = $8
	CALL $140(($6 + [32]), $1, $8, [-1], $1)
	if ( (*($6 + [64]) & [1]) ){ goto $label$16 }
	*($6 + [64]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*((($6 + [64]) + [8]))) = [0]
	*($6 + [68]) = [0]
	
.LABEL $label$15
	CALL $143(($6 + [64]), [0])
	*(($7 = (($6 + [64]) + [8]))) = *((($6 + [32]) + [8]))
	*($6 + [64]) = *($6 + [32])
	$8 = ($8 & [1])
	$8 = *($6 + [64])
	$9 = ( *($6 + [68]) ? uint_32($8 >> [1]) : $8 )
	if ( ($9 == 0) ){ goto $label$19 }
	*($6 + [20]) = $9
	*($6 + [16]) = ( *($7) ? $0 : $8 )
	*($6 + [8]) = *($6 + [16])
	$8 = CALL $5(($6 + [32]), ($6 + [8]))
	$7 = *($6 + [64])
	*($5) = *($8)
	if ( (($7 & [1]) == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	*($5) = (int_64)0
	if ( ($8 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($6 + [72])))
	
.LABEL $label$17
	$global$0 = ($6 + [80])
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [256]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [260])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [256]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [216]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [176]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [136]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [96]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [60])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$30 }
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($3 + [60])))
	
.LABEL $label$31
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$32
	CALL _ZdlPv($3)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$29 }
	$3 = *(($0 + [56]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	return $0
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [816])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $179($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memset(($4 + [400]), [0], [192])
	*(($3 = (($4 + [400]) + [32]))) = (int_64)0
	*((($4 + [400]) + [48])) = [0]
	*((($4 + [400]) + [168])) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [440]) = (int_64)0
	*($4 + [560]) = (int_64)0
	*($4 + [388]) = $2
	*($4 + [384]) = $2
	*($4 + [392]) = ($2 + $7)
	*($4 + [624]) = ($4 + [384])
	*($4 + [28]) = (($4 + [400]) | [8])
	*($4 + [32]) = (($4 + [400]) + [16])
	*($4 + [36]) = (($4 + [400]) + [24])
	$8 = (($4 + [400]) + [52])
	*($4 + [44]) = $8
	*($4 + [48]) = (($4 + [400]) + [64])
	*($4 + [52]) = (($4 + [400]) + [96])
	*($4 + [56]) = (($4 + [400]) + [128])
	*($4 + [60]) = (($4 + [400]) + [160])
	*($4 + [64]) = (($4 + [400]) + [176])
	*($4 + [24]) = ($4 + [400])
	$9 = (($4 + [400]) + [40])
	*($4 + [40]) = $9
	CALL $74(($4 + [24]), ($4 + [624]))
	*(($10 = (($4 + [8]) + [8]))) = *($4 + [392])
	*($4 + [8]) = *($4 + [384])
	$10 = *($10)
	*((($4 + [592]) + [8])) = $10
	*(($11 = (($4 + [608]) + [8]))) = $10
	$12 = *($4 + [8])
	*($4 + [608]) = $12
	*($4 + [592]) = $12
	$10 = *($11)
	*((($4 + [624]) + [8])) = $10
	*((($4 + [24]) + [24])) = $10
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [608])
	*($4 + [40]) = $1
	*($4 + [624]) = $1
	*((($4 + [24]) + [40])) = $0
	*((($4 + [24]) + [48])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*((($4 + [24]) + [64])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*((($4 + [24]) + [96])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*((($4 + [24]) + [128])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*((($4 + [24]) + [160])) = $0
	*((($4 + [24]) + [168])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*((($4 + [24]) + [176])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [296]) = [300]
	*($4 + [300]) = [44]
	*($4 + [304]) = (int_64)85899346660
	*($4 + [312]) = (int_64)4294968296
	*($4 + [320]) = [37]
	*($4 + [328]) = (int_64)10000
	*($4 + [336]) = (int_64)2147483648001
	*($4 + [344]) = (int_64)420000000
	*($4 + [352]) = (int_64)77
	*($4 + [360]) = (int_64)170000
	*($4 + [368]) = (int_64)17
	*($4 + [376]) = [7]
	*((($4 + [624]) + [32])) = *($3)
	*((($4 + [624]) + [24])) = *($4 + [424])
	*((($4 + [624]) + [16])) = *($4 + [416])
	*($4 + [632]) = *($4 + [408])
	*($4 + [624]) = *($4 + [400])
	$9 = CALL $139((($4 + [624]) + [40]), $9)
	CALL memcpy((($4 + [624]) + [52]), $8, [132])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [624])), (int_32 $6))
	if ( ((*($9) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [672])))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $183($2)
	
.LABEL $label$6
	CALL $28(($4 + [24]))
	if ( ((*(($4 + [440])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [448])))
	
.LABEL $label$7
	$global$0 = ($4 + [816])
	return [1]
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($1 + [8]))
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$2 = ($global$0 - [176])
	$global$0 = $2
	*($2 + [136]) = [17528]
	*($2 + [140]) = CALL $174([17528])
	*($2) = *($2 + [136])
	CALL require_auth(*(CALL $5(($2 + [144]), $2)))
	$5 = ( *($3 + [4]) ? uint_32($5 >> [1]) : $6 )
	$5 = *($2 + [120])
	$6 = ($5 & [1])
	$4 = ($3 + [1])
	$3 = CALL $139(($2 + [120]), $1)
	$1 = ( *($3 + [8]) ? $4 : $6 )
	$6 = ($1 + $5)
	if ( ($5 == 0) ){ goto $label$4 }
	
.LOOP $label$5:
	if ( CALL $156(*($1)) ){ goto $label$4 }
	$1 = ($1 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$1 = $6
	$5 = [1]
	$6 = *($2 + [120])
	if ( (($6 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$6 }
	$5 = ($1 + [1])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	if ( (CALL $156(*($5)) == 0) ){ goto $label$8 }
	$5 = ($5 + [1])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	*($1) = *($5)
	$1 = ($1 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$6 = *($2 + [120])
	if ( ($6 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (($3 + uint_32($6 >> $5)) + $5)
	$6 = $4
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($3 + [8]))
	$5 = ($6 + *(($3 + [4])))
	
.LABEL $label$1
	CALL $146($3, ($1 - $6), ($5 - $1))
	$5 = [0]
	$1 = ($1 & [1])
	$1 = *($2 + [120])
	$6 = ( *(($3 + [4])) ? uint_32($1 >> [1]) : $1 )
	if ( ($6 == 0) ){ goto $label$9 }
	$1 = ( *(($3 + [8])) ? $4 : $1 )
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + ((int_32)*($1) == (int_32)[45]))
	$1 = ($1 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$10 }
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [17750])
	*($2 + [72]) = [0]
	*($2 + [64]) = (int_64)0
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	*($2 + [16]) = [45]
	*($2 + [80]) = [0]
	*($2 + [168]) = [1]
	$7 = CALL $3($3, ($2 + [64]), ($2 + [16]), ($2 + [80]), ($2 + [168]))
	*($2 + [76]) = $7
	$8 = ($0 + [136])
	$6 = ($0 + [112])
	$9 = ($0 + [144])
	$10 = ($0 + [140])
	$4 = [-1]
	
.LOOP $label$11:
	*($2 + [168]) = [124]
	*($2 + [16]) = [0]
	*($2 + [8]) = [1]
	$1 = CALL $3(($2 + [64]), ($2 + [48]), ($2 + [168]), ($2 + [16]), ($2 + [8]))
	$11 = *($2 + [48])
	CALL eosio_assert(((int_32)( *($2 + [52]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)[0]), [17765])
	$11 = *($2 + [48])
	CALL eosio_assert(((int_32)( *($2 + [52]) ? uint_32($11 >> [1]) : ($11 & [1]) ) == (int_32)[64]), [8223])
	CALL $2(($2 + [48]), ($2 + [16]), [32])
	*((($2 + [80]) + [24])) = *((($2 + [16]) + [24]))
	*((($2 + [80]) + [16])) = *((($2 + [16]) + [16]))
	*($2 + [88]) = *($2 + [24])
	*($2 + [80]) = *($2 + [16])
	CALL $140(($2 + [16]), ($2 + [64]), ($1 + [1]), [-1], ($2 + [64]))
	if ( (*($2 + [48]) & [1]) ){ goto $label$13 }
	*($2 + [48]) = [0]
	goto $label$12 
	
.LABEL $label$13
	*(*((($2 + [48]) + [8]))) = [0]
	*($2 + [52]) = [0]
	
.LABEL $label$12
	CALL $143(($2 + [48]), [0])
	$12 = (($2 + [16]) + [8])
	*((($2 + [48]) + [8])) = *($12)
	*($2 + [48]) = *($2 + [16])
	$1 = *($2 + [48])
	CALL eosio_assert(((int_32)( *($2 + [52]) ? uint_32($1 >> [1]) : ($1 & [1]) ) != (int_32)[0]), [17778])
	CALL $151(($2 + [48]), [0], [10])
	$13 = *($0)
	*($2 + [8]) = $0
	*($2 + [12]) = ($2 + [80])
	*($2 + [168]) = $13
	if ( ((int_64)*($6) == (int_64)CALL current_receiver()) ){ goto $label$14 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$14
	*($2 + [16]) = $6
	*($12) = ($2 + [168])
	*($2 + [20]) = ($2 + [8])
	*(($1 = CALL _Znwj([64])) + [48]) = $6
	CALL $70(($2 + [16]), $1)
	*($2 + [160]) = $1
	$13 = *($1)
	*($2 + [16]) = $13
	$14 = *($1 + [52])
	*($2 + [156]) = $14
	$11 = *($10)
	if ( ((uint_32)$11 >= (uint_32)*($9)) ){ goto $label$17 }
	*($11 + [8]) = $13
	*($11 + [16]) = $14
	*($2 + [160]) = [0]
	*($11) = $1
	*($10) = ($11 + [24])
	$11 = ($4 + [2])
	$1 = *($2 + [160])
	*($2 + [160]) = [0]
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $71($8, ($2 + [160]), ($2 + [16]), ($2 + [156]))
	$11 = ($4 + [2])
	$1 = *($2 + [160])
	*($2 + [160]) = [0]
	if ( ($1 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv($1)
	
.LABEL $label$15
	if ( ((uint_32)$11 >= (uint_32)$5) ){ goto $label$19 }
	*($2 + [16]) = [45]
	*($2 + [76]) = ($7 + [1])
	*($2 + [168]) = [1]
	$7 = CALL $3($3, ($2 + [64]), ($2 + [16]), ($2 + [76]), ($2 + [168]))
	*($2 + [76]) = $7
	$4 = ($4 + [1])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	goto $label$18 
	
.LABEL $label$19
	$7 = ($7 + [1])
	*($2 + [76]) = $7
	CALL $140(($2 + [16]), $3, $7, [-1], $3)
	if ( (*($2 + [64]) & [1]) ){ goto $label$21 }
	*($2 + [64]) = [0]
	goto $label$20 
	
.LABEL $label$21
	*(*((($2 + [64]) + [8]))) = [0]
	*($2 + [68]) = [0]
	
.LABEL $label$20
	CALL $143(($2 + [64]), [0])
	*((($2 + [64]) + [8])) = *($12)
	*($2 + [64]) = *($2 + [16])
	$4 = ($4 + [1])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$18
	if ( (*($2 + [48]) & [1]) ){ goto $label$26 }
	if ( (*($2 + [64]) & [1]) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL _ZdlPv(*(($2 + [56])))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL _ZdlPv(*(($2 + [72])))
	if ( ((*($2 + [120]) & [1]) == 0) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	if ( (*($2 + [120]) & [1]) ){ goto $label$22 }
	
.LABEL $label$23
	$global$0 = ($2 + [176])
	return 
	
.LABEL $label$22
	CALL _ZdlPv(*(($3 + [8])))
	$global$0 = ($2 + [176])
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [128])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [232])
	$3 = *(($0 + [260]))
	if ( ((int_32)$3 == (int_32)*(($0 + [256]))) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	if ( ((int_32)*($3 + [128]) == (int_32)$2) ){ goto $label$4 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$4
	if ( $3 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($2), *(($0 + [240])), (int_64)-4416155807682396160, (int_64)-4416155807682396160)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $77($2, $3)
	if ( ((int_32)*($3 + [128]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [17954])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	CALL eosio_assert([0], [18441])
	
.LABEL $label$1
	$3 = CALL memcpy($1, $3, [128])
	CALL eosio_assert(((int_32)*($3) == (int_32)[2]), [18420])
	*($3) = [1]
	CALL $79($2, $3, *($0))
	$global$0 = ($3 + [128])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $179($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [408]) = [0]
	*($4 + [400]) = (int_64)0
	*($4 + [388]) = $2
	*($4 + [384]) = $2
	*($4 + [392]) = ($2 + $7)
	CALL $69(($4 + [384]), ($4 + [400]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [392])
	*($4 + [8]) = *($4 + [384])
	$3 = *($3)
	*((($4 + [416]) + [8])) = $3
	*(($8 = (($4 + [432]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [432]) = $9
	*($4 + [416]) = $9
	$3 = *($8)
	*((($4 + [448]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [432])
	*($4 + [40]) = $1
	*($4 + [448]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [296]) = [300]
	*($4 + [300]) = [44]
	*($4 + [304]) = (int_64)85899346660
	*($4 + [312]) = (int_64)4294968296
	*($4 + [320]) = [37]
	*($4 + [328]) = (int_64)10000
	*($4 + [336]) = (int_64)2147483648001
	*($4 + [344]) = (int_64)420000000
	*($4 + [352]) = (int_64)77
	*($4 + [360]) = (int_64)170000
	*($4 + [368]) = (int_64)17
	*($4 + [376]) = [7]
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$8 = CALL $139(($4 + [448]), ($4 + [400]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_32 $6))
	if ( ((*($4 + [448]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $183($2)
	
.LABEL $label$6
	CALL $28(($4 + [24]))
	if ( ((*($4 + [400]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [408])))
	
.LABEL $label$7
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [18028])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [18028])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [18028])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [18028])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $69(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [784])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $179($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memset(($4 + [400]), [0], [176])
	*(($3 = (($4 + [400]) + [32]))) = (int_64)0
	*((($4 + [400]) + [48])) = (int_64)0
	*((($4 + [400]) + [56])) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [440]) = (int_64)0
	*($4 + [388]) = $2
	*($4 + [384]) = $2
	*($4 + [392]) = ($2 + $7)
	*($4 + [608]) = ($4 + [384])
	*($4 + [28]) = (($4 + [400]) | [8])
	*($4 + [32]) = (($4 + [400]) + [16])
	*($4 + [36]) = (($4 + [400]) + [24])
	$8 = (($4 + [400]) + [64])
	*($4 + [48]) = $8
	*($4 + [52]) = (($4 + [400]) + [96])
	*($4 + [56]) = (($4 + [400]) + [128])
	*($4 + [60]) = (($4 + [400]) + [136])
	*($4 + [64]) = (($4 + [400]) + [144])
	*($4 + [68]) = ($4 + [552])
	*($4 + [72]) = (($4 + [400]) + [160])
	*($4 + [24]) = ($4 + [400])
	$9 = (($4 + [400]) + [52])
	*($4 + [44]) = $9
	$10 = (($4 + [400]) + [40])
	*($4 + [40]) = $10
	CALL $42(($4 + [24]), ($4 + [608]))
	*(($11 = (($4 + [8]) + [8]))) = *($4 + [392])
	*($4 + [8]) = *($4 + [384])
	$11 = *($11)
	*((($4 + [576]) + [8])) = $11
	*(($12 = (($4 + [592]) + [8]))) = $11
	$13 = *($4 + [8])
	*($4 + [592]) = $13
	*($4 + [576]) = $13
	$11 = *($12)
	*((($4 + [608]) + [8])) = $11
	*((($4 + [24]) + [24])) = $11
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [592])
	*($4 + [40]) = $1
	*($4 + [608]) = $1
	*((($4 + [24]) + [40])) = $0
	*((($4 + [24]) + [48])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*((($4 + [24]) + [64])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*((($4 + [24]) + [96])) = (int_64)0
	*((($4 + [24]) + [104])) = [0]
	*(($4 + [144])) = $0
	*((($4 + [24]) + [128])) = (int_64)-1
	*((($4 + [24]) + [136])) = (int_64)0
	*((($4 + [24]) + [144])) = [0]
	*((($4 + [24]) + [160])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*((($4 + [24]) + [176])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [296]) = [300]
	*($4 + [300]) = [44]
	*($4 + [304]) = (int_64)85899346660
	*($4 + [312]) = (int_64)4294968296
	*($4 + [320]) = [37]
	*($4 + [328]) = (int_64)10000
	*($4 + [336]) = (int_64)2147483648001
	*($4 + [344]) = (int_64)420000000
	*($4 + [352]) = (int_64)77
	*($4 + [360]) = (int_64)170000
	*($4 + [368]) = (int_64)17
	*($4 + [376]) = [7]
	*((($4 + [608]) + [32])) = *($3)
	*((($4 + [608]) + [24])) = *($4 + [424])
	*((($4 + [608]) + [16])) = *($4 + [416])
	*($4 + [616]) = *($4 + [408])
	*($4 + [608]) = *($4 + [400])
	$10 = CALL $139((($4 + [608]) + [40]), $10)
	$9 = CALL $139((($4 + [608]) + [52]), $9)
	CALL memcpy((($4 + [608]) + [64]), $8, [104])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [608])), (int_32 $6))
	if ( (*($9) & [1]) ){ goto $label$9 }
	if ( (*($10) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [668])))
	if ( ((*($10) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [656])))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $183($2)
	
.LABEL $label$5
	CALL $28(($4 + [24]))
	if ( ((*(($4 + [452])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [460])))
	
.LABEL $label$10
	if ( ((*(($4 + [440])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [448])))
	
.LABEL $label$11
	$global$0 = ($4 + [784])
	return [1]
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [18363])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [18363])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [19006])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $58($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [18028])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18266])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18312])
	
.LABEL $label$2
	$3 = *($3)
	*($1) = *($3)
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	$3 = $4
	$4 = ($3 + [-16])
	$global$0 = $4
	CALL memcpy($4, $1, [8])
	*($5 + [8]) = *($6)
	CALL memcpy(($3 + [-8]), ($5 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [18363])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	CALL memcpy(($4 + [16]), $5, [8])
	*($4 + [40]) = *($5 + [8])
	CALL memcpy((($4 + [16]) | [8]), ($4 + [40]), [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($4 + [16]), [16])
	*($5 + [20]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$2
	*($4 + [40]) = $5
	*($4 + [16]) = (int_64)6820308914865700864
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)6820308914865700864
	*($3 + [16]) = $6
	*($4 + [40]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $106(($1 + [24]), ($4 + [40]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [40])
	*($4 + [40]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	CALL memcpy(($4 + [16]), $5, [8])
	*($4 + [40]) = *($5 + [8])
	CALL memcpy((($4 + [16]) | [8]), ($4 + [40]), [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($4 + [16]), [16])
	*($5 + [20]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$2
	*($4 + [40]) = $5
	*($4 + [16]) = (int_64)6820308914865700864
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)6820308914865700864
	*($3 + [16]) = $6
	*($4 + [40]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $106(($1 + [24]), ($4 + [40]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [40])
	*($4 + [40]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [18363])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [18363])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [18363])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [18363])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [18363])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $155($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	$5 = CALL db_find_i64($1, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $110(($4 + [8]), $5)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [8])) ){ goto $label$5 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$5
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [19723])
	*(($0 + [8])) = *([0] + [8])
	*($0) = *([0])
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$0 = $6
	
.LABEL $label$1
	*($7) = $6
	CALL _ZdlPv($0)
	$global$0 = ($4 + [48])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [18363])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [18363])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $102($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [48]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18097])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18142])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [18192])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	if ( ((int_64)*($1 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	*($2 + [24]) = (int_64)1397703940
	*($2 + [16]) = (int_64)0
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$3 = $5
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$3 = $5
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$6 }
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [19073])
	
.LABEL $label$2
	$4 = ($0 + [72])
	CALL $86($2, $4, *($0), ($2 + [16]))
	if ( ((int_64)*(($1 + [8])) == (int_64)*($2 + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [19954])
	
.LABEL $label$7
	$3 = ((int_64)*($2) + (int_64)*($1))
	*($2) = $3
	if ( ((int_64)$3 > (int_64)-4611686018427387904) ){ goto $label$8 }
	CALL eosio_assert([0], [19997])
	$3 = *($2)
	
.LABEL $label$8
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$9 }
	CALL eosio_assert([0], [20016])
	
.LABEL $label$9
	CALL $87($4, $2, *($0))
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [272])
	$global$0 = $2
	*(($2 + [32])) = (int_64)0
	*(($2 + [88])) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [40]) = [0]
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = (int_64)0
	*($2 + [80]) = (int_64)0
	*($2 + [96]) = [0]
	*($2 + [104]) = (int_64)0
	*($2 + [112]) = (int_64)0
	*($2 + [120]) = (int_64)0
	*($2 + [128]) = (int_64)0
	*($2 + [136]) = (int_64)0
	$3 = ($0 + [232])
	$4 = *(($0 + [260]))
	if ( ((int_32)$4 == (int_32)*(($0 + [256]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [128]) == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	$4 = ($2 + [16])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($3), *(($0 + [240])), (int_64)-4416155807682396160, (int_64)-4416155807682396160)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $77($3, $4)
	if ( ((int_32)*($4 + [128]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [17954])
	goto $label$1 
	
.LABEL $label$4
	$4 = ($2 + [16])
	
.LABEL $label$1
	CALL memcpy(($2 + [144]), $4, [128])
	if ( (*($2 + [144]) == 0) ){ goto $label$5 }
	CALL $93($0, ($2 + [144]))
	if ( ((int_64)*(($1 + [32])) != (int_64)1397703940) ){ goto $label$5 }
	$5 = *($1 + [24])
	if ( ((uint_64)$5 >= (uint_64)*($0 + [336])) ){ goto $label$7 }
	$6 = *(($2 + [160]))
	$7 = *($2 + [152])
	$5 = *($0 + [344])
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$9 }
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$8 }
	if ( ((int_64)$7 != (int_64)-9223372036854775808) ){ goto $label$8 }
	CALL eosio_assert([0], [19293])
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [19278])
	
.LABEL $label$8
	$7 = ((int_64)$7 / (int_64)$5)
	if ( ((int_64)*(($1 + [32])) == (int_64)$6) ){ goto $label$10 }
	CALL eosio_assert([0], [19895])
	
.LABEL $label$10
	$5 = *(($1 + [24]))
	if ( ((int_64)$5 < (int_64)$7) ){ goto $label$6 }
	
.LABEL $label$7
	*($1 + [144]) = (int_64)1
	
.LABEL $label$6
	$7 = *($0 + [312])
	CALL __multi3($2, $5, (int_64)$5 >> (int_64)63), $7, (int_64)$7 >> (int_64)63))
	$6 = *(($1 + [32]))
	$7 = *(($2 + [8]))
	$5 = *($2)
	if ( (( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ) == 0) ){ goto $label$14 }
	if ( ( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ) ){ goto $label$15 }
	CALL eosio_assert([0], [19342])
	
.LABEL $label$15
	$4 = *($0 + [316])
	$7 = (CASTING int_64)(int_32 $4)
	if ( ($4 == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL eosio_assert([0], [19318])
	$4 = *($0 + [316])
	$7 = (CASTING int_64)(int_32 $4)
	if ( $4 ){ goto $label$12 }
	
.LABEL $label$13
	CALL eosio_assert([0], [19278])
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_64)$5 != (int_64)-9223372036854775808) ){ goto $label$11 }
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$11 }
	CALL eosio_assert([0], [19293])
	
.LABEL $label$11
	$5 = ((int_64)$5 / (int_64)$7)
	if ( ((int_64)$6 == (int_64)*(($2 + [160]))) ){ goto $label$16 }
	CALL eosio_assert([0], [19954])
	
.LABEL $label$16
	$5 = ((int_64)*($2 + [152]) + (int_64)$5)
	*($2 + [152]) = $5
	if ( ((int_64)$5 > (int_64)-4611686018427387904) ){ goto $label$17 }
	CALL eosio_assert([0], [19997])
	$5 = *(($2 + [152]))
	
.LABEL $label$17
	if ( ((int_64)$5 < (int_64)4611686018427387904) ){ goto $label$18 }
	CALL eosio_assert([0], [20016])
	
.LABEL $label$18
	CALL $79($3, ($2 + [144]), *($0))
	
.LABEL $label$5
	$global$0 = ($2 + [272])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [18369])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([192])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [168]) = $1
	CALL $125(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [172])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $99(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [60])))
	
.LABEL $label$5
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18005])
	
.LABEL $label$5
	$2 = CALL $179($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$7
	$7 = ($5 + [16])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((uint_32)($4 + [-8]) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [18028])
	
.LABEL $label$8
	CALL memcpy($7, $8, [32])
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $71(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $183($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

int_64 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *(($0 + [48]))
	if ( ((int_64)$2 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$2 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = (int_64)0
	$3 = ($0 + [32])
	$4 = CALL db_lowerbound_i64(*($3), *(($0 + [40])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $76($3, $4)
	*($1 + [12]) = [0]
	*($1 + [8]) = $3
	$2 = *(*(CALL $91(($1 + [8])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	*(($0 + [48])) = $2
	if ( (uint_64)($2 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [19782])
	$2 = *(($0 + [48]))
	goto $label$1 
	
.LABEL $label$2
	*(($0 + [48])) = (int_64)0
	
.LABEL $label$1
	$4 = ($0 + [152])
	*($1 + [8]) = $2
	$3 = *(($0 + [180]))
	if ( ((int_32)$3 == (int_32)*(($0 + [176]))) ){ goto $label$6 }
	$3 = *(($3 + [-24]))
	if ( ((int_32)*($3 + [8]) == (int_32)$4) ){ goto $label$5 }
	CALL eosio_assert([0], [17954])
	goto $label$5 
	
.LABEL $label$6
	$3 = [0]
	$5 = CALL db_find_i64(*(($0 + [152])), *(($0 + [160])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $67($4, $5)
	if ( ((int_32)*($3 + [8]) == (int_32)$4) ){ goto $label$5 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$5
	*($1 + [8]) = ((int_64)*(( $3 ? ($1 + [8]) : $3 )) + (int_64)1)
	CALL $92($4, ($1 + [8]), *($0))
	$2 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = [0]
	*($4 + [188]) = [0]
	*($4 + [184]) = [0]
	*($4 + [176]) = (int_64)0
	CALL memset(($4 + [16]), [0], [148])
	$6 = CALL $81($1, ($4 + [176]), [17173], ($4 + [188]))
	*($4 + [188]) = $6
	$7 = [0]
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	$8 = (($4 + [176]) | [1])
	$9 = (($4 + [176]) + [8])
	$10 = ($4 + [120])
	$11 = ($4 + [144])
	$12 = ($4 + [96])
	$13 = ($4 + [112])
	$14 = ($4 + [136])
	$15 = ($4 + [160])
	$7 = [0]
	
.LOOP $label$2:
	$18 = *($4 + [176])
	CALL eosio_assert(((uint_32)( *($4 + [180]) ? uint_32($18 >> [1]) : ($18 & [1]) ) > (uint_32)[2]), [17218])
	$18 = *(( *($9) ? $8 : (*($4 + [176]) & [1]) ) + [1])
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$4 }
	$18 = *((($18 << [2]) + [18480]))
	goto $label$3 
	
.LABEL $label$4
	$18 = [-1]
	
.LABEL $label$3
	CALL eosio_assert(((int_32)uint_32($18 >> [31]) ^ (int_32)[1]), [17243])
	$16 = *($4 + [176])
	CALL eosio_assert((( *($4 + [180]) ? uint_32($16 >> [1]) : ($16 & [1]) ) <= [8]), [17268])
	$16 = CALL $171((( *($9) ? $8 : (*($4 + [176]) & [1]) ) + [2]), ($4 + [12]), [16])
	$17 = *($4 + [176])
	$19 = ($17 & [1])
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)(( *($9) ? $8 : $19 ) + ( *($4 + [180]) ? uint_32($17 >> [1]) : $19 ))), [17195])
	$17 = (*(( *($9) ? $8 : (*($4 + [176]) & [1]) )) + [-97])
	if ( ((uint_32)$17 > (uint_32)[13]) ){ goto $label$20 }
	goto $label$22 
	
.LABEL $label$22
	CALL eosio_assert(($18 <= [37]), [17285])
	*(($18 = (($4 + [16]) + ($18 << [2])))) = (*($18) + ((int_32)$16 * (int_32)[36]))
	goto $label$5 
	
.LABEL $label$21
	CALL eosio_assert(($18 <= [2]), [17285])
	$18 = ($16 << [1])
	*(($18 = (($4 + [16]) + (($17 = ((int_32)$18 * (int_32)[72])) | [4])))) = (*($18) + $18)
	*(($19 = (($17 = (($4 + [16]) + $17)) + [8]))) = (*($19) + $18)
	*(($19 = ($17 + [12]))) = (*($19) + $18)
	*(($19 = ($17 + [16]))) = (*($19) + $18)
	*(($19 = ($17 + [20]))) = (*($19) + $18)
	*(($19 = ($17 + [24]))) = (*($19) + $18)
	*(($19 = ($17 + [28]))) = (*($19) + $18)
	*(($19 = ($17 + [32]))) = (*($19) + $18)
	*(($19 = ($17 + [36]))) = (*($19) + $18)
	*(($19 = ($17 + [40]))) = (*($19) + $18)
	*(($19 = ($17 + [44]))) = (*($19) + $18)
	*(($19 = ($17 + [48]))) = (*($19) + $18)
	*(($19 = ($17 + [52]))) = (*($19) + $18)
	*(($19 = ($17 + [56]))) = (*($19) + $18)
	*(($19 = ($17 + [60]))) = (*($19) + $18)
	*(($19 = ($17 + [64]))) = (*($19) + $18)
	*(($19 = ($17 + [68]))) = (*($19) + $18)
	*(($17 = ($17 + [72]))) = (*($17) + $18)
	goto $label$5 
	
.LABEL $label$20
	CALL eosio_assert([0], [17413])
	goto $label$5 
	
.LABEL $label$19
	CALL eosio_assert(($18 <= [60]), [17285])
	if ( ((int_32)$18 > (int_32)[2]) ){ goto $label$7 }
	$19 = ($18 + [1])
	$18 = ($4 + [16])
	goto $label$6 
	
.LABEL $label$18
	CALL eosio_assert(($18 <= [12]), [17285])
	$17 = ((int_32)$16 * (int_32)[12])
	*(($17 = (($18 = (($4 + [16]) + ((int_32)$18 * (int_32)[12]))) + [4]))) = (*($17) + $17)
	*(($19 = ($18 + [8]))) = (*($19) + $17)
	*(($18 = ($18 + [12]))) = (*($18) + $17)
	goto $label$5 
	
.LABEL $label$17
	CALL eosio_assert(($18 <= [2]), [17285])
	$17 = ((int_32)$16 * (int_32)[12])
	*($4 + [16]) = (*($4 + [16]) + $17)
	*(($19 = (($18 = (($4 + [16]) + ($18 << [2]))) + [4]))) = (*($19) + $17)
	*(($18 = ($18 + [8]))) = (*($18) + $17)
	goto $label$5 
	
.LABEL $label$16
	CALL eosio_assert(($18 <= [22]), [17285])
	$17 = ((int_32)$16 * (int_32)[9])
	*(($17 = (($18 = (($4 + [16]) + ((((int_32)($17 = ((int_32)$18 / (int_32)[2])) * (int_32)[3]) + ($18 - ($17 << [1]))) << [2]))) + [4]))) = (*($17) + $17)
	*(($19 = ($18 + [8]))) = (*($19) + $17)
	*(($19 = ($18 + [16]))) = (*($19) + $17)
	*(($18 = ($18 + [20]))) = (*($18) + $17)
	goto $label$5 
	
.LABEL $label$15
	CALL eosio_assert(($18 == 0), [17285])
	$18 = ((int_32)$16 * (int_32)[9])
	*($4 + [16]) = (*($4 + [16]) + $18)
	*($4 + [20]) = (*($4 + [20]) + $18)
	*($4 + [24]) = (*($4 + [24]) + $18)
	*($4 + [28]) = (*($4 + [28]) + $18)
	goto $label$5 
	
.LABEL $label$14
	CALL eosio_assert(($18 <= [11]), [17285])
	$17 = ((int_32)$16 * (int_32)[6])
	*(($17 = (($18 = (($4 + [16]) + ((int_32)$18 * (int_32)[12]))) + [4]))) = (*($17) + $17)
	*(($19 = ($18 + [8]))) = (*($19) + $17)
	*(($19 = ($18 + [12]))) = (*($19) + $17)
	*(($19 = ($18 + [16]))) = (*($19) + $17)
	*(($19 = ($18 + [20]))) = (*($19) + $17)
	*(($18 = ($18 + [24]))) = (*($18) + $17)
	goto $label$5 
	
.LABEL $label$13
	CALL eosio_assert(($18 <= [3]), [17285])
	$17 = ((int_32)$16 * (int_32)[3])
	*(($17 = (($18 = (($4 + [16]) + ($18 << [2]))) + [4]))) = (*($17) + $17)
	*(($19 = ($18 + [16]))) = (*($19) + $17)
	*(($19 = ($18 + [28]))) = (*($19) + $17)
	*(($19 = ($18 + [40]))) = (*($19) + $17)
	*(($19 = ($18 + [52]))) = (*($19) + $17)
	*(($19 = ($18 + [64]))) = (*($19) + $17)
	*(($19 = ($18 + [76]))) = (*($19) + $17)
	*(($19 = ($18 + [88]))) = (*($19) + $17)
	*(($19 = ($18 + [100]))) = (*($19) + $17)
	*(($19 = ($18 + [112]))) = (*($19) + $17)
	*(($19 = ($18 + [124]))) = (*($19) + $17)
	*(($18 = ($18 + [136]))) = (*($18) + $17)
	goto $label$5 
	
.LABEL $label$12
	CALL eosio_assert(($18 <= [3]), [17285])
	$18 = ((int_32)$16 * (int_32)[3])
	*(($18 = (($4 + [16]) + (($17 = ((int_32)$18 * (int_32)[48])) | [4])))) = (*($18) + $18)
	*(($19 = (($4 + [16]) + ($17 | [8])))) = (*($19) + $18)
	*(($19 = (($4 + [16]) + ($17 | [12])))) = (*($19) + $18)
	*(($19 = (($17 = (($4 + [16]) + $17)) + [16]))) = (*($19) + $18)
	*(($19 = ($17 + [20]))) = (*($19) + $18)
	*(($19 = ($17 + [24]))) = (*($19) + $18)
	*(($19 = ($17 + [28]))) = (*($19) + $18)
	*(($19 = ($17 + [32]))) = (*($19) + $18)
	*(($19 = ($17 + [36]))) = (*($19) + $18)
	*(($19 = ($17 + [40]))) = (*($19) + $18)
	*(($19 = ($17 + [44]))) = (*($19) + $18)
	*(($17 = ($17 + [48]))) = (*($17) + $18)
	goto $label$5 
	
.LABEL $label$11
	CALL eosio_assert(($18 <= [2]), [17285])
	$17 = ($16 << [1])
	*(($17 = (($18 = (($4 + [16]) + ($18 << [2]))) + [4]))) = (*($17) + $17)
	*(($19 = ($18 + [12]))) = (*($19) + $17)
	*(($19 = ($18 + [20]))) = (*($19) + $17)
	*(($19 = ($18 + [28]))) = (*($19) + $17)
	*(($19 = ($18 + [36]))) = (*($19) + $17)
	*(($19 = ($18 + [44]))) = (*($19) + $17)
	*(($19 = ($18 + [52]))) = (*($19) + $17)
	*(($19 = ($18 + [60]))) = (*($19) + $17)
	*(($19 = ($18 + [68]))) = (*($19) + $17)
	*(($19 = ($18 + [76]))) = (*($19) + $17)
	*(($19 = ($18 + [84]))) = (*($19) + $17)
	*(($19 = ($18 + [92]))) = (*($19) + $17)
	*(($19 = ($18 + [100]))) = (*($19) + $17)
	*(($19 = ($18 + [108]))) = (*($19) + $17)
	*(($19 = ($18 + [116]))) = (*($19) + $17)
	*(($19 = ($18 + [124]))) = (*($19) + $17)
	*(($19 = ($18 + [132]))) = (*($19) + $17)
	*(($18 = ($18 + [140]))) = (*($18) + $17)
	goto $label$5 
	
.LABEL $label$10
	CALL eosio_assert(($18 <= [2]), [17285])
	$17 = ($16 << [1])
	*(($17 = (($4 + [16]) + (*((($18 = ((int_32)$18 * (int_32)[18])) + [17312])) << [2])))) = (*($17) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17313])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17314])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17315])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17316])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17317])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17318])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17319])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17320])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17321])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17322])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17323])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17324])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17325])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17326])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17327])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*(($18 + [17328])) << [2])))) = (*($19) + $17)
	*(($18 = (($4 + [16]) + (*(($18 + [17329])) << [2])))) = (*($18) + $17)
	goto $label$5 
	
.LABEL $label$9
	CALL eosio_assert(($18 <= [4]), [17285])
	if ( ((uint_32)$18 > (uint_32)[3]) ){ goto $label$5 }
	goto $label$23 
	
.LABEL $label$26
	$17 = ((int_32)$16 / (int_32)[9])
	CALL eosio_assert((($16 - ((int_32)$17 * (int_32)[9])) == 0), [17348])
	$18 = ((int_32)$17 * (int_32)[18])
	*(($18 = (($4 + [16]) + [16]))) = (*($18) + $18)
	*(($19 = (($4 + [16]) + [28]))) = (*($19) + $18)
	*(($19 = (($4 + [16]) + [48]))) = (*($19) + $18)
	*(($19 = (($4 + [16]) + [60]))) = (*($19) + $18)
	*(($19 = (($4 + [16]) + [72]))) = (*($19) + $18)
	*(($19 = (($4 + [16]) + [84]))) = (*($19) + $18)
	$17 = ((int_32)$17 * (int_32)[24])
	*($4 + [16]) = (*($4 + [16]) + $17)
	*($4 + [24]) = (*($4 + [24]) + $17)
	*($4 + [28]) = (*($4 + [28]) + $17)
	*(($17 = (($4 + [16]) + [76]))) = (*($17) + $18)
	*(($17 = (($4 + [16]) + [88]))) = (*($17) + $18)
	*($11) = (*($11) + $18)
	*(($17 = (($4 + [16]) + [140]))) = (*($17) + $18)
	*(($17 = (($4 + [16]) + [100]))) = (*($17) + $18)
	*($10) = (*($10) + $18)
	*(($17 = (($4 + [16]) + [112]))) = (*($17) + $18)
	*(($17 = (($4 + [16]) + [116]))) = (*($17) + $18)
	goto $label$5 
	
.LABEL $label$25
	CALL eosio_assert((((int_32)$16 % (int_32)[5]) == 0), [17348])
	$17 = ((int_32)$16 / (int_32)[5])
	$18 = ((int_32)$17 * (int_32)[18])
	*(($18 = (($4 + [16]) + [24]))) = (*($18) + $18)
	*(($19 = (($4 + [16]) + [36]))) = (*($19) + $18)
	*(($19 = (($4 + [16]) + [56]))) = (*($19) + $18)
	$17 = ((int_32)$17 * (int_32)[36])
	*(($19 = (($4 + [16]) + [68]))) = (*($19) + $17)
	*($12) = (*($12) + $18)
	*(($19 = (($4 + [16]) + [124]))) = (*($19) + $18)
	*(($19 = (($4 + [16]) + [136]))) = (*($19) + $18)
	*($4 + [20]) = (*($4 + [20]) + $17)
	goto $label$5 
	
.LABEL $label$24
	$18 = ((int_32)$16 / (int_32)[6])
	CALL eosio_assert((($16 - ((int_32)$18 * (int_32)[6])) == 0), [17348])
	$18 = ((int_32)$18 * (int_32)[18])
	*(($17 = (($4 + [16]) + [20]))) = (*($17) + $18)
	*(($17 = (($4 + [16]) + [32]))) = (*($17) + $18)
	*(($17 = (($4 + [16]) + [40]))) = (*($17) + $18)
	*(($17 = (($4 + [16]) + [44]))) = (*($17) + $18)
	*(($17 = (($4 + [16]) + [52]))) = (*($17) + $18)
	*(($17 = (($4 + [16]) + [64]))) = (*($17) + $18)
	*(($17 = (($4 + [16]) + [92]))) = (*($17) + $18)
	*($13) = (*($13) + $18)
	*(($17 = (($4 + [16]) + [108]))) = (*($17) + $18)
	*($14) = (*($14) + $18)
	*(($17 = (($4 + [16]) + [132]))) = (*($17) + $18)
	*($15) = (*($15) + $18)
	goto $label$5 
	
.LABEL $label$23
	CALL eosio_assert((($16 & [3]) == 0), [17348])
	$18 = ((int_32)$16 / (int_32)[4])
	*($10) = (*($10) + ((int_32)$18 * (int_32)[36]))
	$18 = ((int_32)$18 * (int_32)[18])
	*(($17 = (($4 + [16]) + [48]))) = (*($17) + $18)
	*(($17 = (($4 + [16]) + [60]))) = (*($17) + $18)
	*($11) = (*($11) + $18)
	*(($17 = (($4 + [16]) + [140]))) = (*($17) + $18)
	*($4 + [16]) = (*($4 + [16]) + $18)
	*($4 + [28]) = (*($4 + [28]) + $18)
	goto $label$5 
	
.LABEL $label$8
	CALL eosio_assert(($18 <= [37]), [17285])
	$17 = ((int_32)$16 / (int_32)[5])
	CALL eosio_assert((($16 - ((int_32)$17 * (int_32)[5])) == 0), [17348])
	$17 = ((int_32)$17 * (int_32)[36])
	*(($19 = (($4 + [16]) + (*((((int_32)($18 + [35]) % (int_32)[37]) + [17376])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*((((int_32)($18 + [36]) % (int_32)[37]) + [17376])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*((((int_32)($18 + [37]) % (int_32)[37]) + [17376])) << [2])))) = (*($19) + $17)
	*(($19 = (($4 + [16]) + (*((((int_32)($18 + [38]) % (int_32)[37]) + [17376])) << [2])))) = (*($19) + $17)
	*(($18 = (($4 + [16]) + (*((((int_32)($18 + [39]) % (int_32)[37]) + [17376])) << [2])))) = (*($18) + $17)
	goto $label$5 
	
.LABEL $label$7
	$18 = ($18 - ((int_32)$17 * (int_32)[5]))
	$18 = ($18 + [-3])
	$17 = ((int_32)$18 / (int_32)[5])
	$17 = (((int_32)$17 * (int_32)[3]) + $18)
	$18 = (($4 + [16]) + (($17 + ( [1] ? [-1] : ((int_32)$18 < (int_32)[2]) )) << [2]))
	$19 = ($17 + [2])
	
.LABEL $label$6
	$17 = ((int_32)$16 * (int_32)[18])
	*($18) = (*($18) + $17)
	*(($18 = (($4 + [16]) + ($19 << [2])))) = (*($18) + $17)
	
.LABEL $label$5
	$7 = ($16 + $7)
	*($4 + [188]) = ($6 + [1])
	$6 = CALL $81($1, ($4 + [176]), [17173], ($4 + [188]))
	*($4 + [188]) = $6
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 == (int_32)$2), [17434])
	$18 = [0]
	
.LOOP $label$27:
	$8 = *((($4 + [16]) + $5))
	$18 = ( $8 ? $18 : ((int_32)$18 < (int_32)$8) )
	CALL eosio_assert(((int_32)$18 < (int_32)[1000001]), [17460])
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[148]) ){ goto $label$27 }
	CALL eosio_assert(((int_32)$18 <= (int_32)((int_32)$7 * (int_32)[36])), [17480])
	CALL eosio_assert(((int_32)$18 <= (int_32)$3), [17505])
	CALL $83($0, ($4 + [16]))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$28
	$global$0 = ($4 + [192])
	$17
	$18
}

int_64 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	*($1) = (int_64)0
	$2 = ($0 + [192])
	$3 = *(($0 + [220]))
	if ( ((int_32)$3 == (int_32)*(($0 + [216]))) ){ goto $label$3 }
	$4 = *(($3 + [-24]))
	if ( ((int_32)*($4 + [16]) == (int_32)$2) ){ goto $label$4 }
	CALL eosio_assert([0], [17954])
	
.LABEL $label$4
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($2), *(($0 + [200])), (int_64)7615822568287911936, (int_64)7615822568287911936)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $63($2, $3)
	if ( ((int_32)*($4 + [16]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [17954])
	goto $label$1 
	
.LABEL $label$2
	$4 = $1
	
.LABEL $label$1
	*(($3 = (($1 + [16]) + [8]))) = *(($4 + [8]))
	*($1 + [16]) = *($4)
	$5 = *($3)
	CALL eosio_assert(((uint_64)*($1 + [16]) > (uint_64)$5), [19742])
	*($3) = ((int_64)$5 + (int_64)1)
	CALL $90($2, ($1 + [16]), *($0))
	$5 = *($3)
	$global$0 = ($1 + [32])
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = [1]
	$4 = *($1 + [8])
	if ( ((int_64)$4 <= (int_64)293370680067) ){ goto $label$3 }
	if ( ((int_64)$4 == (int_64)293370680068) ){ goto $label$1 }
	if ( ((int_64)$4 == (int_64)293455873288) ){ goto $label$1 }
	if ( ((int_64)$4 == (int_64)310651471112) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$4 == (int_64)1397703940) ){ goto $label$1 }
	if ( ((int_64)$4 == (int_64)289176438024) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = [0]
	CALL eosio_assert([0], [19010])
	
.LABEL $label$1
	CALL eosio_assert($3, [19560])
	$5 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$4 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$4 = $6
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$8 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	CALL eosio_assert($5, [19579])
	CALL eosio_assert((int_64)(((uint_64)*($1) % (uint_64)$2) == 0), [19596])
	CALL eosio_assert(((uint_64)*($1) >= (uint_64)$2), [19645])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($2)
	if ( ((int_64)$4 <= (int_64)293370680067) ){ goto $label$6 }
	if ( ((int_64)$4 == (int_64)293370680068) ){ goto $label$5 }
	if ( ((int_64)$4 == (int_64)293455873288) ){ goto $label$4 }
	if ( ((int_64)$4 != (int_64)310651471112) ){ goto $label$2 }
	$4 = (int_64)4301877912145143680
	$5 = (int_64)1213482309
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$4 == (int_64)1397703940) ){ goto $label$3 }
	if ( ((int_64)$4 != (int_64)289176438024) ){ goto $label$2 }
	$4 = (int_64)4301877912145143680
	$5 = (int_64)1129595461
	goto $label$1 
	
.LABEL $label$5
	$4 = (int_64)-4492738244669860560
	$5 = (int_64)1145979219
	goto $label$1 
	
.LABEL $label$4
	$4 = (int_64)4301877912145143680
	$5 = (int_64)1146312005
	goto $label$1 
	
.LABEL $label$3
	$4 = (int_64)6138663591592764928
	$5 = (int_64)5459781
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [19010])
	$5 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$4 = (int_64)0
	
.LABEL $label$1
	CALL $109($0, $4, *($1), $5)
	if ( ((int_64)*($2) != (int_64)1397703940) ){ goto $label$7 }
	*($3 + [24]) = (int_64)1397703940
	*($3 + [16]) = (int_64)0
	$4 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$4 = $5
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$4 = $5
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $6 ){ goto $label$12 }
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [19073])
	
.LABEL $label$8
	CALL $86($3, ($1 + [72]), *($1), ($3 + [16]))
	$4 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*($0 + [8])) ){ goto $label$13 }
	CALL eosio_assert([0], [19187])
	
.LABEL $label$13
	$4 = (int_64)
	*($0) = $4(*($0) - $4))
	if ( ((int_64)$4 > (int_64)-4611686018427387904) ){ goto $label$14 }
	CALL eosio_assert([0], [19235])
	$4 = *($0)
	
.LABEL $label$14
	if ( ((int_64)$4 < (int_64)4611686018427387904) ){ goto $label$15 }
	CALL eosio_assert([0], [19257])
	$4 = *($0)
	
.LABEL $label$15
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [19704])
	
.LABEL $label$7
	$global$0 = ($3 + [32])
}