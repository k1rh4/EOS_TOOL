(data (i32.const 8220) "failed to allocate pages\00Error: Transfer must be direct to/from us.\00")
(data (i32.const 8288) "Error: You must pay in \00")
(data (i32.const 8312) ".\00")
(data (i32.const 8314) "Error: Quantity is not valid.\00")
(data (i32.const 8344) "Fund\00")
(data (i32.const 8349) "nameswapsfnd\00")
(data (i32.const 8362) "Phil\00")
(data (i32.const 8367) "eosphilsmith\00")
(data (i32.const 8380) "Error: This contract rejects transfers < 0.0001 \00")
(data (i32.const 8429) "active\00")
(data (i32.const 8436) "eosio.token\00")
(data (i32.const 8448) "transfer\00")
(data (i32.const 8457) "EOSNameSwaps Fees\00")
(data (i32.const 8475) "string is too long to be a valid name\00")
(data (i32.const 8513) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8580) "character is not in allowed character set for names\00")
(data (i32.const 8632) "invalid symbol name\00")
(data (i32.const 8652) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 8711) "attempt to add asset with different symbol\00")
(data (i32.const 8754) "addition underflow\00")
(data (i32.const 8773) "addition overflow\00")
(data (i32.const 8791) "attempt to subtract asset with different symbol\00")
(data (i32.const 8839) "subtraction underflow\00")
(data (i32.const 8861) "subtraction overflow\00")
(data (i32.const 8882) "write\00")
(data (i32.const 8888) "EOS\00")
(data (i32.const 8892) "string is too long to be a valid symbol_code\00")
(data (i32.const 8937) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8990) "read\00")
(data (i32.const 8995) "get\00")
(data (i32.const 0) "(#\00\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "abort" (func $fimport$1))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$5 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$11 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$16 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$18 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$21 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$23 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$24 (param i32)))
(import "env" "action_data_size" (func $fimport$25 (result i32)))
(import "env" "read_action_data" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$27 (param i32 i64)))
(export "apply" (func $28))
(table $0 2 2 anyfunc)
(elem (i32.const 1) $23)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 8999))
(global $global$2 i32 (i32.const 8999))


int_32 .FUNC $29 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [128])) = (int_64)0
	*(($4 + [144])) = [0]
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $5)
	*($4 + [16]) = ($4 + [88])
	*($4 + [40]) = ($4 + [104])
	CALL $30(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [96])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [88])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $31(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [152])
	CALL $32(($4 + [16]), ($4 + [104]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $3($2)
	
.LABEL $label$4
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*(($3 + [36])))
	
.LABEL $label$5
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*(($4 + [144])))
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8990])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8990])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [8]) = *($2 + [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL $0()
	*($3 + [48]) = [8436]
	*($3 + [52]) = CALL $1([8436])
	*($3 + [16]) = *($3 + [48])
	CALL $24(($3 + [56]), ($3 + [16]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [32]) = [8448]
	*($3 + [36]) = CALL $1([8448])
	*($3 + [8]) = *($3 + [32])
	CALL $24(($3 + [40]), ($3 + [8]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $29($0, (int_64)6138663591592764928, $3)
	
.LABEL $label$1
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $22($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $33 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [180]) = $2
	*($3 + [176]) = $2
	$5 = ($2 + $4)
	*($3 + [184]) = $5
	*($3 + [168]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8990])
	$5 = *(($3 + [184]))
	$2 = *($3 + [180])
	
.LABEL $label$5
	CALL memcpy(($3 + [168]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [180]) = $2
	*($3 + [160]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8990])
	$5 = *((($3 + [176]) + [8]))
	$2 = *($3 + [180])
	
.LABEL $label$6
	CALL memcpy(($3 + [160]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [180]) = $2
	*($3 + [152]) = (int_64)0
	*($3 + [144]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8990])
	$5 = *(($3 + [184]))
	$2 = *($3 + [180])
	
.LABEL $label$7
	CALL memcpy(($3 + [144]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [180]) = $2
	*($3 + [80]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8990])
	$2 = *($3 + [180])
	
.LABEL $label$8
	CALL memcpy(($3 + [80]), $2, [8])
	*(($5 = (($3 + [144]) + [8]))) = *($3 + [80])
	*($3 + [180]) = ($2 + [8])
	*($3 + [136]) = [0]
	*($3 + [128]) = (int_64)0
	CALL $34(($3 + [176]), ($3 + [128]))
	$2 = *((($3 + [176]) + [8]))
	*((($3 + [64]) + [8])) = $2
	*((($3 + [16]) + [8])) = $2
	$6 = *($3 + [176])
	*($3 + [16]) = $6
	*($3 + [64]) = $6
	$2 = CALL $31(($3 + [80]), $0, $1, ($3 + [16]))
	*(($4 = (($3 + [48]) + [8]))) = *($5)
	*($3 + [48]) = *($3 + [144])
	$0 = *($3 + [160])
	$1 = *($3 + [168])
	$5 = CALL $17(($3 + [32]), ($3 + [128]))
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [48])
	CALL $23($2, $1, $0, $3, $3)
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($5 + [8]))
	
.LABEL $label$9
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($2 + [36])))
	
.LABEL $label$10
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*(($3 + [136])))
	
.LABEL $label$11
	$global$0 = ($3 + [192])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8475])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [8580])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8513])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8580])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $17(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $17(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [96])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8990])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8990])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $35(*($1), ($0 + [16]))
	CALL $34(*($1), ($0 + [32]))
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $2($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $2($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $2($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $2(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $3($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $4 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $5 ()
{
	return [8208]
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $3 (int_32 $0)
{
}

void .FUNC $0 ()
{
	CALL $4()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

void .FUNC $16 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

void .FUNC $21 (int_32 $0)
{
}

int_32 .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $18($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	float_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$5 = ($global$0 - [336])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$4 }
	if ( ((int_64)$6 == (int_64)$2) ){ goto $label$5 }
	CALL eosio_assert([0], [8245])
	
.LABEL $label$5
	$1 = *($0 + [40])
	$2 = *($3 + [8])
	*(($5 + [144])) = [0]
	*($5 + [136]) = (int_64)0
	$7 = CALL $1([8288])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$14 }
	*($5 + [136]) = ($7 << [1])
	$8 = (($5 + [136]) | [1])
	if ( $7 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$9 = (($7 + [16]) & [-16])
	$8 = CALL $8($9)
	*($5 + [136]) = ($9 | [1])
	*($5 + [144]) = $8
	*($5 + [140]) = $7
	
.LABEL $label$13
	CALL memcpy($8, [8288], $7)
	
.LABEL $label$12
	*(($8 + $7)) = [0]
	$7 = *($0 + [28])
	$8 = ($7 & [1])
	$10 = ($0 + [29])
	$7 = CALL $20(($5 + [136]), ( *(($0 + [36])) ? $10 : $8 ), ( *(($0 + [32])) ? uint_32($7 >> [1]) : $8 ))
	$8 = ($7 + [8])
	*((($5 + [40]) + [8])) = *($8)
	*($5 + [40]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	*((($5 + [320]) + [8])) = [0]
	*($5 + [320]) = (int_64)0
	$7 = CALL $1([8312])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$17 }
	*($5 + [320]) = ($7 << [1])
	$9 = (($5 + [320]) | [1])
	$8 = $9
	if ( $7 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$9 = (($7 + [16]) & [-16])
	$8 = CALL $8($9)
	*($5 + [320]) = ($9 | [1])
	*($5 + [328]) = $8
	*($5 + [324]) = $7
	$9 = (($5 + [320]) | [1])
	
.LABEL $label$16
	CALL memcpy($8, [8312], $7)
	
.LABEL $label$15
	*(($8 + $7)) = [0]
	$7 = *($5 + [320])
	$8 = ($7 & [1])
	$7 = CALL $20(($5 + [40]), ( *($5 + [328]) ? $9 : $8 ), ( *($5 + [324]) ? uint_32($7 >> [1]) : $8 ))
	$8 = ($7 + [8])
	*((($5 + [208]) + [8])) = *($8)
	*($5 + [208]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	if ( ((int_64)$2 == (int_64)$1) ){ goto $label$18 }
	CALL eosio_assert([0], ( *($5 + [216]) ? (($5 + [208]) | [1]) : (*($5 + [208]) & [1]) ))
	
.LABEL $label$18
	if ( ((*($5 + [208]) & [1]) == 0) ){ goto $label$19 }
	CALL $10(*($5 + [216]))
	
.LABEL $label$19
	if ( ((*($5 + [320]) & [1]) == 0) ){ goto $label$20 }
	CALL $10(*(($5 + [328])))
	
.LABEL $label$20
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$21 }
	CALL $10(*($5 + [48]))
	
.LABEL $label$21
	if ( ((*($5 + [136]) & [1]) == 0) ){ goto $label$22 }
	CALL $10(*($5 + [144]))
	
.LABEL $label$22
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$24 }
	$1 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$1 = $2
	$9 = $7
	goto $label$26 
	
.LABEL $label$27
	$1 = $2
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$28 }
	
.LABEL $label$26
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	CALL eosio_assert([0], [8314])
	
.LABEL $label$23
	*($5 + [216]) = [0]
	*($5 + [208]) = (int_64)0
	$8 = CALL $1([8344])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$31 }
	*($5 + [208]) = ($8 << [1])
	$9 = (($5 + [208]) | [1])
	if ( $8 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$7 = (($8 + [16]) & [-16])
	$9 = CALL $8($7)
	*($5 + [208]) = ($7 | [1])
	*($5 + [216]) = $9
	*($5 + [212]) = $8
	
.LABEL $label$30
	CALL memcpy($9, [8344], $8)
	
.LABEL $label$29
	$7 = [0]
	*(($9 + $8)) = [0]
	*($5 + [200]) = [8349]
	*($5 + [204]) = CALL $1([8349])
	*($5 + [32]) = *($5 + [200])
	CALL $24(($5 + [224]), ($5 + [32]))
	$1 = *(($0 + [40]))
	*((($5 + [208]) + [40])) = $1
	*($5 + [232]) = [50]
	*($5 + [240]) = (int_64)0
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$1 = $2
	$9 = $7
	goto $label$35 
	
.LABEL $label$36
	$1 = $2
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$37 }
	
.LABEL $label$35
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	CALL eosio_assert([0], [8632])
	
.LABEL $label$32
	*(($5 + [264])) = [0]
	*($5 + [256]) = (int_64)0
	$7 = ($5 + [256])
	$8 = CALL $1([8362])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$40 }
	*(($5 + [256])) = ($8 << [1])
	$9 = ($7 + [1])
	if ( $8 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$7 = (($8 + [16]) & [-16])
	$9 = CALL $8($7)
	*(($5 + [264])) = $9
	*(($5 + [260])) = $8
	*($5 + [256]) = ($7 | [1])
	
.LABEL $label$39
	CALL memcpy($9, [8362], $8)
	
.LABEL $label$38
	$7 = [0]
	*(($9 + $8)) = [0]
	*($5 + [192]) = [8367]
	*($5 + [196]) = CALL $1([8367])
	*($5 + [24]) = *($5 + [192])
	CALL $24(($5 + [272]), ($5 + [24]))
	*(($5 + [280])) = [38]
	*(($5 + [288])) = (int_64)0
	$11 = *(($0 + [40]))
	*(($5 + [296])) = $11
	$1 = (uint_64)$11 >> (uint_64)(int_64)8
	$2 = $1)
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$45 }
	$2 = $6
	$9 = $7
	goto $label$44 
	
.LABEL $label$45
	$2 = $6
	
.LOOP $label$46:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$46 }
	
.LABEL $label$44
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	CALL eosio_assert([0], [8632])
	$11 = *(($0 + [40]))
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	
.LABEL $label$41
	$12 = *(($3 + [8]))
	$13 = *($3)
	$7 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$1 = $2
	$9 = $7
	goto $label$49 
	
.LABEL $label$50
	$1 = $2
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$51 }
	
.LABEL $label$49
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$48 }
	if ( ((int_64)$12 == (int_64)$11) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$47
	CALL eosio_assert([0], [8632])
	if ( ((int_64)$12 != (int_64)$11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	CALL $16(($5 + [136]))
	
.LABEL $label$10
	CALL $16(($5 + [320]))
	
.LABEL $label$9
	CALL $16(($5 + [208]))
	
.LABEL $label$8
	CALL $16($7)
	
.LABEL $label$7
	CALL eosio_assert([0], [8652])
	
.LABEL $label$6
	*(($5 + [328])) = [0]
	*($5 + [320]) = (int_64)0
	$7 = CALL $1([8380])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$54 }
	*($5 + [320]) = ($7 << [1])
	$8 = (($5 + [320]) | [1])
	if ( $7 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$9 = (($7 + [16]) & [-16])
	$8 = CALL $8($9)
	*($5 + [320]) = ($9 | [1])
	*($5 + [328]) = $8
	*($5 + [324]) = $7
	
.LABEL $label$53
	CALL memcpy($8, [8380], $7)
	
.LABEL $label$52
	*(($8 + $7)) = [0]
	$7 = *(($0 + [28]))
	$8 = ($7 & [1])
	$7 = CALL $20(($5 + [320]), ( *(($0 + [36])) ? $10 : $8 ), ( *(($0 + [32])) ? uint_32($7 >> [1]) : $8 ))
	$8 = ($7 + [8])
	*((($5 + [136]) + [8])) = *($8)
	*($5 + [136]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	*((($5 + [176]) + [8])) = [0]
	*($5 + [176]) = (int_64)0
	$7 = CALL $1([8312])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$57 }
	*($5 + [176]) = ($7 << [1])
	$9 = (($5 + [176]) | [1])
	$8 = $9
	if ( $7 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$9 = (($7 + [16]) & [-16])
	$8 = CALL $8($9)
	*($5 + [176]) = ($9 | [1])
	*($5 + [184]) = $8
	*($5 + [180]) = $7
	$9 = (($5 + [176]) | [1])
	
.LABEL $label$56
	CALL memcpy($8, [8312], $7)
	
.LABEL $label$55
	*(($8 + $7)) = [0]
	$7 = *($5 + [176])
	$8 = ($7 & [1])
	$7 = CALL $20(($5 + [136]), ( *($5 + [184]) ? $9 : $8 ), ( *($5 + [180]) ? uint_32($7 >> [1]) : $8 ))
	$8 = ($7 + [8])
	*((($5 + [40]) + [8])) = *($8)
	*($5 + [40]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	if ( ((int_64)$13 > (int_64)0) ){ goto $label$58 }
	CALL eosio_assert([0], ( *($5 + [48]) ? (($5 + [40]) | [1]) : (*($5 + [40]) & [1]) ))
	
.LABEL $label$58
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$59 }
	CALL $10(*($5 + [48]))
	
.LABEL $label$59
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$60 }
	CALL $10(*(($5 + [184])))
	
.LABEL $label$60
	if ( ((*($5 + [136]) & [1]) == 0) ){ goto $label$61 }
	CALL $10(*($5 + [144]))
	
.LABEL $label$61
	if ( ((*($5 + [320]) & [1]) == 0) ){ goto $label$62 }
	CALL $10(*($5 + [328]))
	
.LABEL $label$62
	if ( ((int_64)$13 < (int_64)10) ){ goto $label$63 }
	$11 = *(($0 + [40]))
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$66:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$65 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$68 }
	$1 = $2
	$9 = $7
	goto $label$67 
	
.LABEL $label$68
	$1 = $2
	
.LOOP $label$69:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$65 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$69 }
	
.LABEL $label$67
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$65
	CALL eosio_assert([0], [8632])
	
.LABEL $label$64
	$10 = ($5 + [164])
	$9 = (($5 + [40]) + [32])
	$14 = (($5 + [40]) + [16])
	$15 = (($5 + [176]) | [1])
	$16 = (($5 + [208]) + [40])
	$3 = (($5 + [176]) + [8])
	$17 = ($5 + [156])
	$18 = ($5 + [160])
	$7 = [1]
	$6 = (int_64)0
	
.LOOP $label$70:
	$8 = $7
	if ( ($8 == 0) ){ goto $label$76 }
	$7 = (($5 + [208]) + ((int_32)$8 * (int_32)[48]))
	$19 = ((float_64)(CASTING float_64)(int_64 ((int_64)$13 * (int_64)*($7 + [24]))) * (float_64)(float_64)0.01)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)2147483648) ){ goto $label$75 }
	$20 = [-2147483648]
	goto $label$74 
	
.LABEL $label$76
	if ( ((int_64)$11 == (int_64)$12) ){ goto $label$77 }
	CALL eosio_assert([0], [8791])
	
.LABEL $label$77
	$1 = (int_64)
	if ( ((int_64)$1($13 - $6)) <= (int_64)-4611686018427387904) ){ goto $label$73 }
	if ( ((int_64)$1 < (int_64)4611686018427387904) ){ goto $label$72 }
	CALL eosio_assert([0], [8861])
	goto $label$72 
	
.LABEL $label$75
	$20 = (CASTING int_32)(float_64 $19)
	
.LABEL $label$74
	$1 = (CASTING int_64)(int_32 $20)
	*($7 + [32]) = $1
	if ( ((int_64)*(($7 + [40])) == (int_64)$11) ){ goto $label$78 }
	CALL eosio_assert([0], [8711])
	$1 = *(($7 + [32]))
	
.LABEL $label$78
	$6 = ((int_64)$1 + (int_64)$6)
	if ( ((int_64)$6 <= (int_64)-4611686018427387904) ){ goto $label$79 }
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$71 }
	CALL eosio_assert([0], [8773])
	goto $label$71 
	
.LABEL $label$79
	CALL eosio_assert([0], [8754])
	goto $label$71 
	
.LABEL $label$73
	CALL eosio_assert([0], [8839])
	
.LABEL $label$72
	*($16) = $12
	*((($5 + [208]) + [32])) = $1
	
.LABEL $label$71
	$1 = *($0)
	*($5 + [120]) = [8429]
	*($5 + [124]) = CALL $1([8429])
	*($5 + [16]) = *($5 + [120])
	CALL $24(($5 + [128]), ($5 + [16]))
	*($5 + [104]) = [8436]
	$2 = *($5 + [128])
	*($5 + [108]) = CALL $1([8436])
	*($5 + [8]) = *($5 + [104])
	CALL $24(($5 + [112]), ($5 + [8]))
	*($5 + [88]) = [8448]
	*($5 + [92]) = CALL $1([8448])
	*($5) = *($5 + [88])
	CALL $24(($5 + [96]), $5)
	*($3) = [0]
	*($5 + [176]) = (int_64)0
	$7 = CALL $1([8457])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$3 }
	$21 = (($5 + [208]) + ((int_32)$8 * (int_32)[48]))
	$20 = ($21 + [32])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$82 }
	*($5 + [176]) = ($7 << [1])
	$22 = $15
	if ( $7 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	$23 = (($7 + [16]) & [-16])
	$22 = CALL $8($23)
	*($3) = $22
	*($5 + [176]) = ($23 | [1])
	*($5 + [180]) = $7
	
.LABEL $label$81
	CALL memcpy($22, [8457], $7)
	
.LABEL $label$80
	*(($22 + $7)) = [0]
	*((($5 + [136]) + [8])) = *($5 + [96])
	*((($5 + [40]) + [8])) = *($21 + [16])
	*($14) = *($20)
	*(($14 + [8])) = *(($20 + [8]))
	*($9) = *($5 + [176])
	*(($9 + [8])) = *($3)
	*($3) = [0]
	*($5 + [136]) = *($5 + [112])
	*($5 + [40]) = *($0)
	*($5 + [176]) = (int_64)0
	*(($20 = (($5 + [136]) + [16]))) = [0]
	*($17) = [0]
	*($18) = [0]
	$7 = CALL $8([16])
	*($20) = $7
	*($7) = $1
	*($7 + [8]) = $2
	*($10) = (int_64)0
	*((($5 + [136]) + [36])) = [0]
	$7 = ($7 + [16])
	*($18) = $7
	*($17) = $7
	$7 = *($9)
	$22 = ( *((($5 + [40]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($22 + [32])
	$1 = (CASTING uint_64)(uint_32 $22)
	
.LOOP $label$83:
	$7 = ($7 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$83 }
	if ( ($7 == 0) ){ goto $label$85 }
	CALL $25($10, $7)
	$22 = *((($5 + [136]) + [32]))
	$7 = *($10)
	goto $label$84 
	
.LABEL $label$85
	$22 = [0]
	$7 = [0]
	
.LABEL $label$84
	*((($5 + [320]) + [8])) = $22
	*($5 + [324]) = $7
	*($5 + [320]) = $7
	*($5 + [304]) = ($5 + [320])
	*($5 + [312]) = ($5 + [40])
	CALL $26(($5 + [312]), ($5 + [304]))
	CALL $27(($5 + [320]), ($5 + [136]))
	$7 = *($5 + [320])
	CALL send_inline($7, (*($5 + [324]) - $7))
	$7 = *($5 + [320])
	if ( ($7 == 0) ){ goto $label$86 }
	*($5 + [324]) = $7
	CALL $10($7)
	
.LABEL $label$86
	$7 = *($10)
	if ( ($7 == 0) ){ goto $label$87 }
	*((($5 + [136]) + [32])) = $7
	CALL $10($7)
	
.LABEL $label$87
	$7 = *($20)
	if ( ($7 == 0) ){ goto $label$88 }
	*($17) = $7
	CALL $10($7)
	
.LABEL $label$88
	if ( ((*($9) & [1]) == 0) ){ goto $label$89 }
	CALL $10(*((($5 + [40]) + [40])))
	
.LABEL $label$89
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$90 }
	CALL $10(*($3))
	
.LABEL $label$90
	$7 = ($8 + [-1])
	if ( $8 ){ goto $label$70 }
	
.LABEL $label$63
	if ( ((*($5 + [256]) & [1]) == 0) ){ goto $label$91 }
	CALL $10(*(($5 + [264])))
	
.LABEL $label$91
	if ( ((*($5 + [208]) & [1]) == 0) ){ goto $label$4 }
	CALL $10(*($5 + [216]))
	
.LABEL $label$4
	$global$0 = ($5 + [336])
	return (unreachable)
	
.LABEL $label$3
	CALL $16(($5 + [176]))
	
.LABEL $label$2
	CALL $16(($5 + [320]))
	
.LABEL $label$1
	CALL $16(($5 + [176]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $22 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $10($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($1 + [16])
	$3 = *(($1 + [20]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	$7 = [16]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$7 = (($5 & [-16]) + $7)
	
.LABEL $label$2
	$4 = *(($1 + [32]))
	$3 = *($1 + [28])
	$7 = (($3 - $7) - $4)
	$6 = (CASTING uint_64)(uint_32 ($4 - $3))
	
.LOOP $label$3:
	$7 = ($7 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$3 = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	CALL $25($0, ([0] - $7))
	$3 = *(($0 + [4]))
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	*($2 + [4]) = $7
	*($2) = $7
	*($2 + [8]) = $3
	CALL $37($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8882])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8882])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8882])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8882])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $40(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8995])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $25($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8990])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*($4) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [16]) + [8])) = $3
	$2 = *($4)
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [16]) = $2
	*(($0 + [36])) = [0]
	*($0 + [28 align=4]) = (int_64)0
	$5 = ($0 + [28])
	$3 = CALL $1([8888])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($5) = ($3 << [1])
	$6 = ($5 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($3 + [16]) & [-16])
	$6 = CALL $8($7)
	*($0 + [28]) = ($7 | [1])
	*(($0 + [36])) = $6
	*(($0 + [32])) = $3
	
.LABEL $label$4
	CALL memcpy($6, [8888], $3)
	
.LABEL $label$3
	*(($6 + $3)) = [0]
	$3 = *($5)
	if ( ($3 & [1]) ){ goto $label$7 }
	$3 = uint_32($3 >> [1])
	$7 = ($5 + [1])
	goto $label$6 
	
.LABEL $label$7
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	
.LABEL $label$6
	if ( ($3 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8892])
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = (int_64)0
	
.LOOP $label$11:
	$6 = (($7 + $3) + [-1])
	$5 = *($6)
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8937])
	$5 = *($6)
	
.LABEL $label$12
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$11 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$8
	$2 = (int_64)4
	goto $label$1 
	
.LABEL $label$2
	CALL $16($5)
	
.LABEL $label$1
	*(($0 + [40])) = $2
	$global$0 = ($4 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $39(CALL $38($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8882])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8882])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8882])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8882])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8882])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8882])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8882])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $36($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $19($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $19($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $16($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8882])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8882])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}