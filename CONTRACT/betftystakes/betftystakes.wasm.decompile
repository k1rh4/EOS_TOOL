(data (i32.const 8192) "BETFTY\00")
(data (i32.const 8199) "betfty\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8292) "betftymainac\00")
(data (i32.const 8305) "transfer\00")
(data (i32.const 8314) "new stake made from new user\00")
(data (i32.const 8343) "new stake made from existing user\00")
(data (i32.const 8377) "Player hasn\'t staked for this token\00")
(data (i32.const 8413) "active\00")
(data (i32.const 8420) "new unstake from existing user\00")
(data (i32.const 8451) "specific\00")
(data (i32.const 8460) "Record does not exist\00")
(data (i32.const 8482) "unable to find key\00")
(data (i32.const 8501) "stake user :\00")
(data (i32.const 8514) "stake amount:\00")
(data (i32.const 8528) "all\00")
(data (i32.const 8532) "totalstakeamount:\00")
(data (i32.const 8550) "totalstakerewards:\00")
(data (i32.const 8569) "Invalid type ,you be scam\00")
(data (i32.const 8595) "string is too long to be a valid symbol_code\00")
(data (i32.const 8640) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8693) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8742) "invalid symbol name\00")
(data (i32.const 8762) "string is too long to be a valid name\00")
(data (i32.const 8800) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8867) "character is not in allowed character set for names\00")
(data (i32.const 8919) "write\00")
(data (i32.const 8925) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8976) "error reading iterator\00")
(data (i32.const 8999) "read\00")
(data (i32.const 9004) "cannot create objects in table of another contract\00")
(data (i32.const 9055) "cannot pass end iterator to modify\00")
(data (i32.const 9090) "object passed to modify is not in multi_index\00")
(data (i32.const 9136) "cannot modify objects in table of another contract\00")
(data (i32.const 9187) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9246) "get\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$4 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "prints" (func $fimport$9 (param i32)))
(import "env" "printn" (func $fimport$10 (param i64)))
(import "env" "printsf" (func $fimport$11 (param f32)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$18 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$29 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$30 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$33 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$35 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$36 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$37 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $16))
(export "_Znwj" (func $24))
(export "_ZdlPv" (func $26))
(export "_Znaj" (func $25))
(export "_ZdaPv" (func $27))
(export "_ZnwjSt11align_val_t" (func $28))
(export "_ZnajSt11align_val_t" (func $29))
(export "_ZdlPvSt11align_val_t" (func $30))
(export "_ZdaPvSt11align_val_t" (func $31))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $11 $13 $1 $12)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17668))
(global $global$2 i32 (i32.const 17668))


int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $43($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8999])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$8 = (($4 + [72]) + [8])
	CALL $19(($4 + [56]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [96]) + [8])) = $3
	*(($9 = (($4 + [112]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [112]) = $10
	*($4 + [96]) = $10
	$3 = *($9)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = CALL $33(($4 + [112]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $33(($4 + [128]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [128]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [112]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $46($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $23($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $34($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $34($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $32($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $41(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9252])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $41(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8919])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8919])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8919])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8919])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8919])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9246])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $9($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8999])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8919])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8919])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $43($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9252])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $43($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $46($0)
	
.LABEL $label$1
}

int_32 .FUNC $43 (int_32 $0)
{
	return CALL $44([9272], $0)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $43($1)
	
.LABEL $label$2
	*(CALL $37()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $43(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $46($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $37())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $42($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17656])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17464]
	$3 = (((int_32)$1 * (int_32)[12]) + [17464])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9264]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9268])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9264]) = [1]
	$2 = ($2 << [16])
	*([0] + [9268]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9268])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9268]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9264]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9264]) = [1]
	$3 = ($3 << [16])
	*([0] + [9268]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9268])
	
.LABEL $label$10
	*([0] + [9268]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $45($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8206])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $36($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $36($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $9($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8919])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8919])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $21(CALL $20($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $36($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8762])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8867])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8800])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8867])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $5 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $9($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $10(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8976])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $43($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8999])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-4])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8999])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	CALL eosio_assert(((int_32)$6 != (int_32)[12]), [8999])
	CALL memcpy(($5 + [12]), ($2 + [12]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $46($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8976])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $43($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8999])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-4])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8999])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	CALL eosio_assert(((int_32)$6 != (int_32)[12]), [8999])
	CALL memcpy(($5 + [12]), ($2 + [12]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $8(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $46($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, float_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [288])
	$global$0 = $3
	CALL require_auth($1)
	CALL require_auth(*($0))
	$4 = [0]
	*((($3 + [248]) + [32])) = [0]
	*($3 + [256]) = $1
	*($3 + [264]) = (int_64)-1
	*($3 + [272]) = (int_64)0
	$5 = *($0)
	*($3 + [248]) = $5
	*((($3 + [208]) + [32])) = [0]
	*($3 + [216]) = $5
	*($3 + [208]) = $5
	*($3 + [224]) = (int_64)-1
	*($3 + [232]) = (int_64)0
	$6 = CALL db_find_i64($5, $1, (int_64)-4157660971118100480, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$12 }
	$4 = CALL $2(($3 + [248]), $6)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [248])), [8925])
	$5 = *($0)
	$8 = *(($3 + [236]))
	$7 = *(($3 + [232]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$13:
	$6 = ($8 + [-24])
	$9 = *($6)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$11 }
	$8 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$13 }
	goto $label$10 
	
.LABEL $label$12
	$5 = *($0)
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($3 + [208])), [8925])
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	$6 = CALL db_find_i64(*($3 + [208]), *(($3 + [216])), (int_64)-3660748222285828096, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $3(($3 + [208]), $6)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($3 + [208])), [8925])
	
.LABEL $label$14
	if ( ($4 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$6 = CALL $40([8192])
	$8 = ((uint_32)$6 > (uint_32)[7])
	$10 = ((float_32)$2 * (float_32)(float_32)100)
	if ( ((float_32)(float_32)|$10| < (float_32)(float_32)9223372036854775808) ){ goto $label$16 }
	$11 = (int_64)-9223372036854775808
	if ( $8 ){ goto $label$15 }
	goto $label$7 
	
.LABEL $label$16
	$11 = (Rounds 0)($10)
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$15
	CALL eosio_assert([0], [8595])
	goto $label$6 
	
.LABEL $label$8
	$10 = ((float_32)$2 * (float_32)(float_32)100)
	if ( ((float_32)(float_32)|$10| < (float_32)(float_32)9223372036854775808) ){ goto $label$19 }
	$11 = (int_64)-9223372036854775808
	$6 = CALL $40([8192])
	if ( ($9 == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$11 = (Rounds 0)($10)
	$6 = CALL $40([8192])
	if ( $9 ){ goto $label$17 }
	
.LABEL $label$18
	if ( ($6 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [8595])
	goto $label$22 
	
.LABEL $label$23
	if ( ($6 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$5 = (int_64)0
	
.LOOP $label$24:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	CALL eosio_assert([0], [8640])
	
.LABEL $label$25
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$24 }
	$12 = ((int_64)$5 << (int_64)8)
	goto $label$20 
	
.LABEL $label$21
	$12 = (int_64)0
	
.LABEL $label$20
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8693])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = ((int_64)$12 | (int_64)2)
	$6 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$12 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$5 = $12
	$8 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$5 = $12
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $8 ){ goto $label$30 }
	$8 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$8 = [0]
	
.LABEL $label$26
	CALL eosio_assert($8, [8742])
	*($3 + [168]) = [8199]
	*($3 + [172]) = CALL $40([8199])
	*($3 + [24]) = *($3 + [168])
	*($3 + [160]) = *(CALL $4(($3 + [96]), ($3 + [24])))
	*($3 + [152]) = $1
	*($3 + [168]) = [8292]
	*($3 + [172]) = CALL $40([8292])
	*($3 + [16]) = *($3 + [168])
	$5 = *(CALL $4(($3 + [96]), ($3 + [16])))
	*($3 + [168]) = [8305]
	*($3 + [172]) = CALL $40([8305])
	*($3 + [8]) = *($3 + [168])
	$12 = *(CALL $4(($3 + [96]), ($3 + [8])))
	$14 = *($0)
	*(($3 + [88])) = [0]
	*($3 + [80]) = (int_64)0
	$6 = CALL $40([8314])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$34 }
	*($3 + [80]) = ($6 << [1])
	$8 = (($3 + [80]) | [1])
	if ( $6 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$7 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($3 + [80]) = ($7 | [1])
	*($3 + [88]) = $8
	*($3 + [84]) = $6
	
.LABEL $label$33
	CALL memcpy($8, [8314], $6)
	
.LABEL $label$32
	*(($8 + $6)) = [0]
	*(($3 + [120])) = $13
	$6 = ($3 + [88])
	*(($7 = ($3 + [136]))) = *($6)
	*($6) = [0]
	*($3 + [104]) = $14
	*($3 + [96]) = $1
	*($3 + [112]) = $11
	*($3 + [128]) = *($3 + [80])
	*($3 + [80]) = (int_64)0
	$8 = CALL $5(($3 + [168]), ($3 + [152]), $5, $12, ($3 + [96]))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$35
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$36
	CALL $6(($3 + [96]), $8)
	$6 = *($3 + [96])
	CALL send_inline($6, (*($3 + [100]) - $6))
	$6 = *($3 + [96])
	if ( ($6 == 0) ){ goto $label$37 }
	*($3 + [100]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$37
	CALL eosio_assert(((int_64)*($3 + [248]) == (int_64)CALL $fimport$5()), [9004])
	*(($6 = CALL _Znwj([32])) + [16]) = ($3 + [248])
	*($6 + [8]) = ((float_32)$2 + (float_32)(float_32)0)
	*($6) = $1
	*($6 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [8919])
	CALL memcpy(($3 + [96]), $6, [8])
	CALL eosio_assert([1], [8919])
	$4 = (($3 + [96]) | [8])
	CALL memcpy($4, ($6 + [8]), [4])
	CALL eosio_assert([1], [8919])
	$15 = (($3 + [96]) | [12])
	CALL memcpy($15, ($6 + [12]), [4])
	$5 = *($6)
	$9 = CALL db_store_i64(*((($3 + [248]) + [8])), (int_64)-4157660971118100480, $1, $5, ($3 + [96]), [16])
	*($6 + [20]) = $9
	$7 = (($3 + [248]) + [16])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$38 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$38
	*($3 + [152]) = $6
	$5 = *($6)
	*($3 + [96]) = $5
	*($3 + [80]) = $9
	$16 = ($3 + [276])
	$7 = *($16)
	if ( ((uint_32)$7 >= (uint_32)*((($3 + [248]) + [32]))) ){ goto $label$41 }
	*($7 + [8]) = $5
	*($7 + [16]) = $9
	*($3 + [152]) = [0]
	*($7) = $6
	*($16) = ($7 + [24])
	$6 = *($3 + [152])
	$7 = [0]
	*($3 + [152]) = [0]
	if ( $6 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	CALL $7(($3 + [272]), ($3 + [152]), ($3 + [96]), ($3 + [80]))
	$6 = *($3 + [152])
	$7 = [0]
	*($3 + [152]) = [0]
	if ( ($6 == 0) ){ goto $label$39 }
	
.LABEL $label$40
	CALL _ZdlPv($6)
	
.LABEL $label$39
	CALL eosio_assert(((int_64)*($3 + [208]) == (int_64)CALL $fimport$5()), [9004])
	*(($6 = CALL _Znwj([32])) + [12]) = $7
	*($6 + [16]) = ($3 + [208])
	*($6 + [8]) = $2
	*($6) = *($0)
	CALL eosio_assert([1], [8919])
	CALL memcpy(($3 + [96]), $6, [8])
	CALL eosio_assert([1], [8919])
	CALL memcpy($4, ($6 + [8]), [4])
	CALL eosio_assert([1], [8919])
	CALL memcpy($15, ($6 + [12]), [4])
	$5 = *($6)
	$9 = CALL db_store_i64(*((($3 + [208]) + [8])), (int_64)-3660748222285828096, $1, $5, ($3 + [96]), [16])
	*($6 + [20]) = $9
	$7 = (($3 + [208]) + [16])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$42 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$42
	*($3 + [152]) = $6
	$5 = *($6)
	*($3 + [96]) = $5
	*($3 + [80]) = $9
	$4 = ($3 + [236])
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)*((($3 + [208]) + [32]))) ){ goto $label$45 }
	*($7 + [8]) = $5
	*($7 + [16]) = $9
	*($3 + [152]) = [0]
	*($7) = $6
	*($4) = ($7 + [24])
	$6 = *($3 + [152])
	*($3 + [152]) = [0]
	if ( $6 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	CALL $8(($3 + [232]), ($3 + [152]), ($3 + [96]), ($3 + [80]))
	$6 = *($3 + [152])
	*($3 + [152]) = [0]
	if ( ($6 == 0) ){ goto $label$43 }
	
.LABEL $label$44
	CALL _ZdlPv($6)
	
.LABEL $label$43
	$6 = *($8 + [28])
	if ( ($6 == 0) ){ goto $label$46 }
	*(($8 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$46
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$4 }
	*(($8 + [20])) = $6
	CALL _ZdlPv($6)
	goto $label$4 
	
.LABEL $label$31
	CALL $32(($3 + [80]))
	
.LABEL $label$17
	if ( ($6 <= [8]) ){ goto $label$50 }
	CALL eosio_assert([0], [8595])
	goto $label$49 
	
.LABEL $label$50
	if ( ($6 == 0) ){ goto $label$48 }
	
.LABEL $label$49
	$5 = (int_64)0
	
.LOOP $label$51:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$52 }
	CALL eosio_assert([0], [8640])
	
.LABEL $label$52
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$51 }
	$12 = ((int_64)$5 << (int_64)8)
	goto $label$47 
	
.LABEL $label$48
	$12 = (int_64)0
	
.LABEL $label$47
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8693])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = ((int_64)$12 | (int_64)2)
	$6 = [0]
	
.LOOP $label$55:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$54 }
	$12 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$56 }
	$5 = $12
	$8 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$56
	$5 = $12
	
.LOOP $label$57:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$54 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $8 ){ goto $label$57 }
	$8 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$54
	$8 = [0]
	
.LABEL $label$53
	CALL eosio_assert($8, [8742])
	*($3 + [168]) = [8199]
	*($3 + [172]) = CALL $40([8199])
	*($3 + [48]) = *($3 + [168])
	*($3 + [160]) = *(CALL $4(($3 + [96]), ($3 + [48])))
	*($3 + [152]) = $1
	*($3 + [168]) = [8292]
	*($3 + [172]) = CALL $40([8292])
	*($3 + [40]) = *($3 + [168])
	$5 = *(CALL $4(($3 + [96]), ($3 + [40])))
	*($3 + [168]) = [8305]
	*($3 + [172]) = CALL $40([8305])
	*($3 + [32]) = *($3 + [168])
	$12 = *(CALL $4(($3 + [96]), ($3 + [32])))
	$14 = *($0)
	*(($3 + [88])) = [0]
	*($3 + [80]) = (int_64)0
	$6 = CALL $40([8314])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$58 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$61 }
	*($3 + [80]) = ($6 << [1])
	$8 = (($3 + [80]) | [1])
	if ( $6 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$7 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($3 + [80]) = ($7 | [1])
	*($3 + [88]) = $8
	*($3 + [84]) = $6
	
.LABEL $label$60
	CALL memcpy($8, [8314], $6)
	
.LABEL $label$59
	*(($8 + $6)) = [0]
	*(($3 + [120])) = $13
	$6 = ($3 + [88])
	*(($7 = ($3 + [136]))) = *($6)
	*($6) = [0]
	*($3 + [104]) = $14
	*($3 + [96]) = $1
	*($3 + [112]) = $11
	*($3 + [128]) = *($3 + [80])
	*($3 + [80]) = (int_64)0
	$8 = CALL $5(($3 + [168]), ($3 + [152]), $5, $12, ($3 + [96]))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$62
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$63
	CALL $6(($3 + [96]), $8)
	$6 = *($3 + [96])
	CALL send_inline($6, (*($3 + [100]) - $6))
	$6 = *($3 + [96])
	if ( ($6 == 0) ){ goto $label$64 }
	*($3 + [100]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$64
	CALL eosio_assert(((int_64)*($3 + [248]) == (int_64)CALL $fimport$5()), [9004])
	*(($6 = CALL _Znwj([32])) + [16]) = ($3 + [248])
	*($6 + [8]) = ((float_32)$2 + (float_32)(float_32)0)
	*($6) = $1
	*($6 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [8919])
	CALL memcpy(($3 + [96]), $6, [8])
	CALL eosio_assert([1], [8919])
	$0 = (($3 + [96]) | [8])
	CALL memcpy($0, ($6 + [8]), [4])
	CALL eosio_assert([1], [8919])
	$15 = (($3 + [96]) | [12])
	CALL memcpy($15, ($6 + [12]), [4])
	$5 = *($6)
	$4 = CALL db_store_i64(*((($3 + [248]) + [8])), (int_64)-4157660971118100480, $1, $5, ($3 + [96]), [16])
	*($6 + [20]) = $4
	$7 = (($3 + [248]) + [16])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$65 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$65
	*($3 + [152]) = $6
	$5 = *($6)
	*($3 + [96]) = $5
	*($3 + [80]) = $4
	$16 = ($3 + [276])
	$7 = *($16)
	if ( ((uint_32)$7 >= (uint_32)*((($3 + [248]) + [32]))) ){ goto $label$68 }
	*($7 + [8]) = $5
	*($7 + [16]) = $4
	*($3 + [152]) = [0]
	*($7) = $6
	*($16) = ($7 + [24])
	$6 = *($3 + [152])
	$7 = [0]
	*($3 + [152]) = [0]
	if ( $6 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	CALL $7(($3 + [272]), ($3 + [152]), ($3 + [96]), ($3 + [80]))
	$6 = *($3 + [152])
	$7 = [0]
	*($3 + [152]) = [0]
	if ( ($6 == 0) ){ goto $label$66 }
	
.LABEL $label$67
	CALL _ZdlPv($6)
	
.LABEL $label$66
	CALL eosio_assert([1], [9055])
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($3 + [208])), [9090])
	CALL eosio_assert(((int_64)*($3 + [208]) == (int_64)CALL $fimport$5()), [9136])
	*($9 + [12]) = $7
	*($9 + [8]) = ((float_32)*($9 + [8]) + (float_32)$2)
	$5 = *($9)
	CALL eosio_assert([1], [9187])
	CALL eosio_assert([1], [8919])
	CALL memcpy(($3 + [96]), $9, [8])
	CALL eosio_assert([1], [8919])
	CALL memcpy($0, ($9 + [8]), [4])
	CALL eosio_assert([1], [8919])
	CALL memcpy($15, ($9 + [12]), [4])
	CALL db_update_i64(*($9 + [20]), $1, ($3 + [96]), [16])
	$6 = (($3 + [208]) + [16])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$69 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$69
	$6 = *($8 + [28])
	if ( ($6 == 0) ){ goto $label$70 }
	*(($8 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$70
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$4 }
	*(($8 + [20])) = $6
	CALL _ZdlPv($6)
	$7 = *($3 + [232])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$58
	CALL $32(($3 + [80]))
	
.LABEL $label$7
	if ( $6 ){ goto $label$6 }
	$12 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$5 = (int_64)0
	
.LOOP $label$71:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$72 }
	CALL eosio_assert([0], [8640])
	
.LABEL $label$72
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$71 }
	$12 = ((int_64)$5 << (int_64)8)
	
.LABEL $label$5
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8693])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = ((int_64)$12 | (int_64)2)
	$6 = [0]
	
.LOOP $label$75:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$74 }
	$12 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$76 }
	$5 = $12
	$8 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$75 }
	goto $label$73 
	
.LABEL $label$76
	$5 = $12
	
.LOOP $label$77:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$74 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $8 ){ goto $label$77 }
	$8 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$75 }
	goto $label$73 
	
.LABEL $label$74
	$8 = [0]
	
.LABEL $label$73
	CALL eosio_assert($8, [8742])
	*($3 + [168]) = [8199]
	*($3 + [172]) = CALL $40([8199])
	*($3 + [72]) = *($3 + [168])
	*($3 + [160]) = *(CALL $4(($3 + [96]), ($3 + [72])))
	*($3 + [152]) = $1
	*($3 + [168]) = [8292]
	*($3 + [172]) = CALL $40([8292])
	*($3 + [64]) = *($3 + [168])
	$5 = *(CALL $4(($3 + [96]), ($3 + [64])))
	*($3 + [168]) = [8305]
	*($3 + [172]) = CALL $40([8305])
	*($3 + [56]) = *($3 + [168])
	$12 = *(CALL $4(($3 + [96]), ($3 + [56])))
	$14 = *($0)
	*(($3 + [88])) = [0]
	*($3 + [80]) = (int_64)0
	$6 = CALL $40([8343])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$80 }
	*($3 + [80]) = ($6 << [1])
	$8 = (($3 + [80]) | [1])
	if ( $6 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	$7 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($3 + [80]) = ($7 | [1])
	*($3 + [88]) = $8
	*($3 + [84]) = $6
	
.LABEL $label$79
	CALL memcpy($8, [8343], $6)
	
.LABEL $label$78
	*(($8 + $6)) = [0]
	*(($3 + [120])) = $13
	$6 = ($3 + [88])
	*(($8 = ($3 + [136]))) = *($6)
	*($6) = [0]
	*($3 + [104]) = $14
	*($3 + [96]) = $1
	*($3 + [112]) = $11
	*($3 + [128]) = *($3 + [80])
	*($3 + [80]) = (int_64)0
	$6 = CALL $5(($3 + [168]), ($3 + [152]), $5, $12, ($3 + [96]))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$81 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$81
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$82 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$82
	CALL $6(($3 + [96]), $6)
	$8 = *($3 + [96])
	CALL send_inline($8, (*($3 + [100]) - $8))
	$8 = *($3 + [96])
	if ( ($8 == 0) ){ goto $label$83 }
	*($3 + [100]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$83
	CALL eosio_assert([1], [9055])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [248])), [9090])
	CALL eosio_assert(((int_64)*($3 + [248]) == (int_64)CALL $fimport$5()), [9136])
	*($4 + [8]) = ((float_32)*($4 + [8]) + (float_32)$2)
	$5 = *($4)
	*($4 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$5 == (int_64)*($4)), [9187])
	CALL eosio_assert([1], [8919])
	CALL memcpy(($3 + [96]), $4, [8])
	CALL eosio_assert([1], [8919])
	$8 = (($3 + [96]) | [8])
	CALL memcpy($8, ($4 + [8]), [4])
	CALL eosio_assert([1], [8919])
	$7 = (($3 + [96]) | [12])
	CALL memcpy($7, ($4 + [12]), [4])
	CALL db_update_i64(*($4 + [20]), $1, ($3 + [96]), [16])
	$4 = (($3 + [248]) + [16])
	if ( (uint_64)($5 <= *($4)) ){ goto $label$84 }
	*($4) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$84
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9055])
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($3 + [208])), [9090])
	CALL eosio_assert(((int_64)*($3 + [208]) == (int_64)CALL $fimport$5()), [9136])
	*($9 + [12]) = [0]
	*($9 + [8]) = ((float_32)*($9 + [8]) + (float_32)$2)
	$5 = *($9)
	CALL eosio_assert([1], [9187])
	CALL eosio_assert([1], [8919])
	CALL memcpy(($3 + [96]), $9, [8])
	CALL eosio_assert([1], [8919])
	CALL memcpy($8, ($9 + [8]), [4])
	CALL eosio_assert([1], [8919])
	CALL memcpy($7, ($9 + [12]), [4])
	CALL db_update_i64(*($9 + [20]), $1, ($3 + [96]), [16])
	if ( (uint_64)($5 <= *((($3 + [208]) + [16]))) ){ goto $label$85 }
	*(($3 + [224])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$85
	$8 = *($6 + [28])
	if ( ($8 == 0) ){ goto $label$86 }
	*(($6 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$86
	$8 = *($6 + [16])
	if ( ($8 == 0) ){ goto $label$4 }
	*(($6 + [20])) = $8
	CALL _ZdlPv($8)
	$7 = *($3 + [232])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($3 + [232])
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = ($3 + [236])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$88 }
	
.LOOP $label$89:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$90 }
	CALL _ZdlPv($8)
	
.LABEL $label$90
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$89 }
	$6 = *(($3 + [232]))
	goto $label$87 
	
.LABEL $label$88
	$6 = $7
	
.LABEL $label$87
	*($9) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$2
	$7 = *($3 + [272])
	if ( ($7 == 0) ){ goto $label$91 }
	$9 = ($3 + [276])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$93 }
	
.LOOP $label$94:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$95 }
	CALL _ZdlPv($8)
	
.LABEL $label$95
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$94 }
	$6 = *(($3 + [272]))
	goto $label$92 
	
.LABEL $label$93
	$6 = $7
	
.LABEL $label$92
	*($9) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$91
	$global$0 = ($3 + [288])
	return (unreachable)
	
.LABEL $label$1
	CALL $32(($3 + [80]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8925])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157660971118100480, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $2($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8925])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8925])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3660748222285828096, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $3($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8925])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-3075276113422576641) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4157661383434960896) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3102536759825661952) ){ goto $label$1 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [1]
	*($3 + [8]) = *($3 + [48])
	CALL $17($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 == (int_64)-3075276113422576640) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)7112182829768769536) ){ goto $label$1 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [2]
	*($3 + [16]) = *($3 + [40])
	CALL $18($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3) = *($3 + [56])
	CALL $17($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [36]) = [0]
	*($3 + [32]) = [4]
	*($3 + [24]) = *($3 + [32])
	CALL $17($1, $1, ($3 + [24]))
	
.LABEL $label$1
	CALL $38([0])
	$global$0 = ($3 + [64])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $43($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8999])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[8]), [8999])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [4])
	*(($4 + [20])) = ($2 + [12])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [40])
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $8))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $46($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	$6
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8919])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8919])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8919])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8919])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $22(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $11 (int_32 $0, int_64 $1, float_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	float_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL require_auth($1)
	CALL require_auth(*($0))
	$4 = [0]
	*((($3 + [200]) + [32])) = [0]
	*($3 + [208]) = $1
	*($3 + [216]) = (int_64)-1
	*($3 + [224]) = (int_64)0
	$5 = *($0)
	*($3 + [200]) = $5
	*((($3 + [160]) + [32])) = [0]
	*($3 + [168]) = $5
	*($3 + [160]) = $5
	*($3 + [176]) = (int_64)-1
	*($3 + [184]) = (int_64)0
	$6 = CALL db_find_i64($5, $1, (int_64)-4157660971118100480, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$4 = CALL $2(($3 + [200]), $6)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [200])), [8925])
	$5 = *($0)
	$8 = *(($3 + [188]))
	$7 = *(($3 + [184]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$5:
	$6 = ($8 + [-24])
	$9 = *($6)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$3 }
	$8 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	$5 = *($0)
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($3 + [160])), [8925])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$6 = CALL db_find_i64(*($3 + [160]), *(($3 + [168])), (int_64)-3660748222285828096, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $3(($3 + [160]), $6)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($3 + [160])), [8925])
	
.LABEL $label$1
	CALL current_time()
	$10 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($10, [8377])
	$6 = CALL $40([8192])
	$8 = ($6 <= [8])
	$11 = ((float_32)$2 * (float_32)(float_32)100)
	if ( ((float_32)(float_32)|$11| < (float_32)(float_32)9223372036854775808) ){ goto $label$10 }
	$12 = (int_64)-9223372036854775808
	if ( ($8 == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$12 = (Rounds 0)($11)
	if ( $8 ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert([0], [8595])
	goto $label$7 
	
.LABEL $label$8
	if ( $6 ){ goto $label$7 }
	$13 = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	$5 = (int_64)0
	
.LOOP $label$11:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8640])
	
.LABEL $label$12
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$11 }
	$13 = ((int_64)$5 << (int_64)8)
	
.LABEL $label$6
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8693])
	$5 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_64)$13 | (int_64)2)
	$6 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$13 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$5 = $13
	$8 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$5 = $13
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $8 ){ goto $label$17 }
	$8 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$8 = [0]
	
.LABEL $label$13
	CALL eosio_assert($8, [8742])
	$5 = *($0)
	*($3 + [120]) = [8413]
	*($3 + [124]) = CALL $40([8413])
	*($3 + [24]) = *($3 + [120])
	*($3 + [112]) = *(CALL $4(($3 + [48]), ($3 + [24])))
	*($3 + [104]) = $5
	*($3 + [120]) = [8292]
	*($3 + [124]) = CALL $40([8292])
	*($3 + [16]) = *($3 + [120])
	$5 = *(CALL $4(($3 + [48]), ($3 + [16])))
	*($3 + [120]) = [8305]
	*($3 + [124]) = CALL $40([8305])
	*($3 + [8]) = *($3 + [120])
	$13 = *(CALL $4(($3 + [48]), ($3 + [8])))
	$15 = *($0)
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	$6 = CALL $40([8420])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$21 }
	*($3 + [32]) = ($6 << [1])
	$8 = (($3 + [32]) | [1])
	if ( $6 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$7 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($3 + [32]) = ($7 | [1])
	*($3 + [40]) = $8
	*($3 + [36]) = $6
	
.LABEL $label$20
	CALL memcpy($8, [8420], $6)
	
.LABEL $label$19
	*(($8 + $6)) = [0]
	*(($3 + [72])) = $14
	$6 = ($3 + [40])
	*(($8 = ($3 + [88]))) = *($6)
	*($6) = [0]
	*($3 + [56]) = $1
	*($3 + [48]) = $15
	*($3 + [64]) = $12
	*($3 + [80]) = *($3 + [32])
	*($3 + [32]) = (int_64)0
	$6 = CALL $5(($3 + [120]), ($3 + [104]), $5, $13, ($3 + [48]))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$22
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$23
	CALL $6(($3 + [48]), $6)
	$8 = *($3 + [48])
	CALL send_inline($8, (*($3 + [52]) - $8))
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$24 }
	*($3 + [52]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$24
	CALL eosio_assert($10, [9055])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [200])), [9090])
	CALL eosio_assert(((int_64)*($3 + [200]) == (int_64)CALL $fimport$5()), [9136])
	*($4 + [8]) = (float_32))(*($4 + [8]) - $2)
	$5 = *($4)
	CALL eosio_assert([1], [9187])
	CALL eosio_assert([1], [8919])
	CALL memcpy(($3 + [48]), $4, [8])
	CALL eosio_assert([1], [8919])
	$8 = (($3 + [48]) | [8])
	CALL memcpy($8, ($4 + [8]), [4])
	CALL eosio_assert([1], [8919])
	$7 = (($3 + [48]) | [12])
	CALL memcpy($7, ($4 + [12]), [4])
	CALL db_update_i64(*($4 + [20]), $1, ($3 + [48]), [16])
	$4 = (($3 + [200]) + [16])
	if ( (uint_64)($5 <= *($4)) ){ goto $label$25 }
	*($4) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$25
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9055])
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($3 + [160])), [9090])
	CALL eosio_assert(((int_64)*($3 + [160]) == (int_64)CALL $fimport$5()), [9136])
	*($9 + [8]) = (float_32))(*($9 + [8]) - $2)
	*($9 + [12]) = ((float_32)*($9 + [12]) + (float_32)$2)
	$5 = *($9)
	CALL eosio_assert([1], [9187])
	CALL eosio_assert([1], [8919])
	CALL memcpy(($3 + [48]), $9, [8])
	CALL eosio_assert([1], [8919])
	CALL memcpy($8, ($9 + [8]), [4])
	CALL eosio_assert([1], [8919])
	CALL memcpy($7, ($9 + [12]), [4])
	CALL db_update_i64(*($9 + [20]), $1, ($3 + [48]), [16])
	if ( (uint_64)($5 <= *((($3 + [160]) + [16]))) ){ goto $label$26 }
	*(($3 + [176])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$26
	$8 = *($6 + [28])
	if ( ($8 == 0) ){ goto $label$27 }
	*(($6 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$27
	$8 = *($6 + [16])
	if ( ($8 == 0) ){ goto $label$28 }
	*(($6 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$28
	$7 = *($3 + [184])
	if ( ($7 == 0) ){ goto $label$29 }
	$9 = ($3 + [188])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$33 }
	CALL _ZdlPv($8)
	
.LABEL $label$33
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$32 }
	$6 = *(($3 + [184]))
	goto $label$30 
	
.LABEL $label$31
	$6 = $7
	
.LABEL $label$30
	*($9) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$29
	$7 = *($3 + [224])
	if ( ($7 == 0) ){ goto $label$34 }
	$9 = ($3 + [228])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$36 }
	
.LOOP $label$37:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$38 }
	CALL _ZdlPv($8)
	
.LABEL $label$38
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$37 }
	$6 = *(($3 + [224]))
	goto $label$35 
	
.LABEL $label$36
	$6 = $7
	
.LABEL $label$35
	*($9) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$34
	$global$0 = ($3 + [240])
	return (unreachable)
	
.LABEL $label$18
	CALL $32(($3 + [32]))
}

void .FUNC $12 (int_32 $0, int_64 $1, float_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	*((($3 + [40]) + [32])) = [0]
	*($3 + [48]) = $1
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$5 = *($0)
	*($3 + [40]) = $5
	*(($3 + [32])) = [0]
	*($3 + [8]) = $5
	*($3) = $5
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$6 = CALL db_find_i64($5, $1, (int_64)-4157660971118100480, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $2(($3 + [40]), $6)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [40])), [8925])
	$5 = *($0)
	$6 = *(($3 + [28]))
	$7 = *(($3 + [24]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$6:
	$0 = ($6 + [-24])
	$8 = *($0)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$6 = $0
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0)
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [8925])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = CALL db_find_i64(*($3), *(($3 + [8])), (int_64)-3660748222285828096, $5)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $3($3, $0)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [8925])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($8 == 0) ){ goto $label$1 }
	CALL eosio_assert([1], [9055])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [40])), [9090])
	CALL eosio_assert(((int_64)*($3 + [40]) == (int_64)CALL $fimport$5()), [9136])
	*($4 + [8]) = ((float_32)*($4 + [8]) + (float_32)$2)
	$5 = *($4)
	CALL eosio_assert([1], [9187])
	CALL eosio_assert([1], [8919])
	CALL memcpy(($3 + [80]), $4, [8])
	CALL eosio_assert([1], [8919])
	$0 = (($3 + [80]) | [8])
	CALL memcpy($0, ($4 + [8]), [4])
	CALL eosio_assert([1], [8919])
	$6 = (($3 + [80]) | [12])
	CALL memcpy($6, ($4 + [12]), [4])
	CALL db_update_i64(*($4 + [20]), $1, ($3 + [80]), [16])
	$7 = (($3 + [40]) + [16])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$7 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	CALL eosio_assert([1], [9055])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [9090])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$5()), [9136])
	*($8 + [8]) = ((float_32)*($8 + [8]) + (float_32)$2)
	$5 = *($8)
	CALL eosio_assert([1], [9187])
	CALL eosio_assert([1], [8919])
	CALL memcpy(($3 + [80]), $8, [8])
	CALL eosio_assert([1], [8919])
	CALL memcpy($0, ($8 + [8]), [4])
	CALL eosio_assert([1], [8919])
	CALL memcpy($6, ($8 + [12]), [4])
	CALL db_update_i64(*($8 + [20]), $1, ($3 + [80]), [16])
	if ( (uint_64)($5 <= *(($3 + [16]))) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$8 = *($3 + [24])
	if ( ($8 == 0) ){ goto $label$8 }
	$7 = ($3 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($3 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $8
	
.LABEL $label$9
	*($7) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$8 = *($3 + [64])
	if ( ($8 == 0) ){ goto $label$13 }
	$7 = ($3 + [68])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$15 }
	
.LOOP $label$16:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$17 }
	CALL _ZdlPv($6)
	
.LABEL $label$17
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$16 }
	$0 = *(($3 + [64]))
	goto $label$14 
	
.LABEL $label$15
	$0 = $8
	
.LABEL $label$14
	*($7) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$13
	$global$0 = ($3 + [96])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	float_32 $6
	float_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*((($3 + [40]) + [32])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$4 = *($0 + [8])
	*($3 + [40]) = $4
	*($3 + [48]) = $4
	*(($3 + [32])) = [0]
	*($3 + [8]) = $4
	*($3) = $4
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$0 = *($2)
	$5 = CALL $40([8451])
	if ( ((int_32)$5 != (int_32)( *($2 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) )) ){ goto $label$5 }
	if ( (CALL $35($2, [0], [-1], [8451], $5) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$0 = *($2)
	$5 = CALL $40([8528])
	if ( ((int_32)$5 != (int_32)( *(($2 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )) ){ goto $label$6 }
	$0 = [0]
	if ( (CALL $35($2, [0], [-1], [8528], $5) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL prints([8569])
	$5 = *($3 + [24])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$2 = [0]
	$0 = CALL db_find_i64($4, $4, (int_64)-4157660971118100480, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [40]), $0) + [16]) == (int_32)($3 + [40])), [8925])
	$2 = [1]
	
.LABEL $label$7
	CALL eosio_assert($2, [8460])
	$2 = CALL $14(($3 + [40]), $1, [8482])
	$6 = *($2 + [8])
	$4 = *($2)
	CALL prints([8501])
	CALL printn($4)
	CALL prints([8514])
	CALL printsf($6)
	$5 = *($3 + [24])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = CALL db_find_i64($4, $4, (int_64)-3660748222285828096, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $3($3, $2) + [16]) == (int_32)$3), [8925])
	$0 = [1]
	
.LABEL $label$8
	CALL eosio_assert($0, [8460])
	$2 = CALL $15($3, $1, [8482])
	$6 = *($2 + [12])
	$7 = *($2 + [8])
	CALL prints([8532])
	CALL printsf($7)
	CALL prints([8550])
	CALL printsf($6)
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($3 + [28])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL _ZdlPv($0)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($3 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($8) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$5 = *($3 + [64])
	if ( ($5 == 0) ){ goto $label$13 }
	$8 = ($3 + [68])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$17 }
	CALL _ZdlPv($0)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($3 + [64]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($8) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$global$0 = ($3 + [80])
}

void .FUNC $36 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $37 ()
{
	return [9256]
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $39(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $32 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $46($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $38 (int_32 $0)
{
}