(data (i32.const 8193) "Invalid token transfer\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8302) "EOS\00")
(data (i32.const 8306) "We only accept EOS for deposits\00")
(data (i32.const 8338) "Quantity must be positive\00")
(data (i32.const 8364) "&\00")
(data (i32.const 8366) "Error parsing redirect memo\00")
(data (i32.const 8394) "URL cannot be empty\00")
(data (i32.const 8414) "Backup IP cannot be empty\00")
(data (i32.const 8440) "account cannot be empty\00")
(data (i32.const 8464) "Account doesn\'t exists\00")
(data (i32.const 8487) "Account already configured please use updateredirect to change your information\00")
(data (i32.const 8567) "We don\'t have redirect price configured, we cannot accept this transaction\00")
(data (i32.const 8642) "You need to send the required amount for redirect\00")
(data (i32.const 8692) "Invalid price\00")
(data (i32.const 8706) "Price must be positive\00")
(data (i32.const 8729) "We only accept EOS for payments\00")
(data (i32.const 8761) "Account redirect configuration not found\00")
(data (i32.const 8802) "onerror action\'s are only valid from the \"eosio\" system account.\00")
(data (i32.const 8867) "string is too long to be a valid symbol_code\00")
(data (i32.const 8912) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8965) "string is too long to be a valid name\00")
(data (i32.const 9003) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9070) "character is not in allowed character set for names\00")
(data (i32.const 9122) "read\00")
(data (i32.const 9127) "get\00")
(data (i32.const 9131) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9182) "error reading iterator\00")
(data (i32.const 9205) "cannot create objects in table of another contract\00")
(data (i32.const 9256) "write\00")
(data (i32.const 9262) "cannot pass end iterator to modify\00")
(data (i32.const 9297) "object passed to modify is not in multi_index\00")
(data (i32.const 9343) "cannot modify objects in table of another contract\00")
(data (i32.const 9394) "updater cannot change primary key when modifying an object\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memcpy" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$2 (param i64) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "memset" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$15 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$18 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$23 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$25 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$26 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$27 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$30 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$32 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$33 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$34 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $17))
(export "_ZdlPv" (func $30))
(export "_Znwj" (func $28))
(export "_Znaj" (func $29))
(export "_ZdaPv" (func $31))
(export "_ZnwjSt11align_val_t" (func $32))
(export "_ZnajSt11align_val_t" (func $33))
(export "_ZdlPvSt11align_val_t" (func $34))
(export "_ZdaPvSt11align_val_t" (func $35))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $4 $12 $15)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17872))
(global $global$2 i32 (i32.const 17872))


int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $53($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9122])
	
.LABEL $label$5
	$3 = ($2 + $7)
	$8 = (($4 + [32]) + [8])
	CALL memcpy(($4 + [32]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9122])
	
.LABEL $label$6
	CALL memcpy($8, $9, [8])
	*(($4 + [24])) = $3
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [16])
	*($4 + [8]) = $1
	*($4) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *((($4 + [32]) + [8]))
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $56($2)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $53($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9122])
	
.LABEL $label$5
	$3 = ($2 + $7)
	CALL memcpy(($4 + [48]), $2, [8])
	*($4 + [16]) = (int_64)0
	$8 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9122])
	
.LABEL $label$6
	CALL memcpy(($4 + [16]), $8, [8])
	*(($8 = (($4 + [48]) + [8]))) = *($4 + [16])
	*(($4 + [40])) = $3
	*($4 + [32]) = $2
	*(($4 + [36])) = ($2 + [16])
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*(($3 = (($4 + [64]) + [8]))) = *($8)
	*($4 + [64]) = *($4 + [48])
	*((($4 + [80]) + [8])) = *($3)
	*($4 + [80]) = *($4 + [64])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	$0 = *((($4 + [80]) + [8]))
	*((($4 + [96]) + [8])) = $0
	*(($4 + [8])) = $0
	$0 = *($4 + [80])
	*($4) = $0
	*($4 + [96]) = $0
	CALL void $3((int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $56($2)
	
.LABEL $label$8
	$global$0 = ($4 + [112])
	return [1]
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $40($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $53($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9456])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $53($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $23($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $41($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $41($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $36($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $53($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*((($4 + [72]) + [24])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [60]) = $3
	*($4 + [56]) = $3
	*($4 + [64]) = ($3 + $2)
	$5 = $3
	if ( ((uint_32)$2 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9122])
	$5 = *($4 + [60])
	
.LABEL $label$5
	CALL memcpy(($4 + [72]), $5, [8])
	*($4 + [60]) = ($5 + [8])
	CALL $21(($4 + [56]), (($4 + [72]) + [8]))
	CALL $21(($4 + [56]), ($4 + [92]))
	*(($5 = (($4 + [8]) + [8]))) = *((($4 + [56]) + [8]))
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($5)
	*($4 + [112]) = *($4 + [8])
	$5 = *($6)
	*((($4 + [128]) + [8])) = $5
	*((($4 + [24]) + [24])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $22(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$10 }
	$3 = [1]
	if ( (*($4 + [92]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $56($3)
	$3 = [1]
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [100])))
	if ( (*($4 + [80]) & $3) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($4 + [80]) & $3) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9127])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $24($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9122])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $37(($2 + [16]), ($1 + [8]))
	$1 = CALL $37($2, ($1 + [20]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$7 = CALL $37(($2 + [32]), $1)
	$5 = CALL $37(($2 + [48]), $4)
	CALL void $6((int_32 $3), (int_64 $5), (int_32 $7), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9122])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	*(($2 = ($0 + [4]))) = (*($2) + [8])
	$3 = ($1 + [32])
	$2 = *($0 + [4])
	$0 = CALL $21(CALL $21($0, ($1 + [8])), ($1 + [20]))
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9122])
	$2 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $2, [8])
	$2 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $2
	$1 = ($1 + [40])
	if ( ((uint_32)(*(($0 + [8])) - $2) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9122])
	$2 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($1, $2, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9256])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9256])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9256])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	*(($2 = ($0 + [4]))) = (*($2) + [8])
	$3 = ($1 + [32])
	$2 = *($0 + [4])
	$0 = CALL $27(CALL $27($0, ($1 + [8])), ($1 + [20]))
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9256])
	$2 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $3, [8])
	$2 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $2
	$1 = ($1 + [40])
	if ( ((int_32)(*(($0 + [8])) - $2) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9256])
	$2 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $1, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $49(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $50($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $40($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $40($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $47 (int_32 $0)
{
}

int_32 .FUNC $46 ()
{
	return [9460]
}

void .FUNC $45 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $46())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $52($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9182])
	
.LABEL $label$5
	$2 = CALL $53($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9122])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9122])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	*(($5 + [8])) = *($3 + [24])
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)0
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $14(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $56($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	CALL $39(($1 + [8]), *($4 + [4]))
	CALL $39(($1 + [20]), *($4 + [8]))
	*($1 + [32]) = CALL current_time()
	*($1 + [40]) = CALL current_time()
	$4 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [24])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [20]))
	$6 = ( *(($1 + [24])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$4 = ($6 + $4)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $53($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $26($3, $1)
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)-5002676888749998080, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $56($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8965])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9070])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9003])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9070])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9182])
	
.LABEL $label$5
	$4 = CALL $53($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([64]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [48]) = $0
	CALL $25(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $10(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $56($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [288])
	$global$0 = $3
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$4 }
	CALL $5(($3 + [200]))
	$4 = ($3 + [232])
	$6 = *($3 + [232])
	$5 = CALL $50([8192])
	if ( ((int_32)$5 != (int_32)( *(($3 + [236])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$5 }
	if ( (CALL $43($4, [0], [-1], [8192], $5) == 0) ){ goto $label$1 }
	
.LABEL $label$5
	$5 = [0]
	if ( ((uint_64)((int_64)*($3 + [216]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)*((($3 + [200]) + [24])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$2 = $7
	$5 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$7
	$2 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $5 ){ goto $label$8 }
	$5 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$4
	$global$0 = ($3 + [288])
	return (unreachable)
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [8193])
	$6 = CALL $50([8302])
	if ( ($6 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [8867])
	goto $label$11 
	
.LABEL $label$12
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = (int_64)0
	
.LOOP $label$13:
	$5 = *(($6 + [8301]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [8912])
	
.LABEL $label$14
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$9 
	
.LABEL $label$10
	$2 = (int_64)0
	
.LABEL $label$9
	CALL eosio_assert(((int_64)*(($3 + [224])) == (int_64)((int_64)$2 | (int_64)4)), [8306])
	CALL eosio_assert(((int_64)*($3 + [216]) > (int_64)0), [8338])
	$5 = CALL $37(($3 + [168]), $4)
	*(($3 + [160])) = [0]
	*($3 + [152]) = (int_64)0
	$6 = CALL $50([8364])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$24 }
	*($3 + [152]) = ($6 << [1])
	$8 = (($3 + [152]) | [1])
	if ( $6 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$4 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($4)
	*($3 + [152]) = ($4 | [1])
	*($3 + [160]) = $8
	*($3 + [156]) = $6
	
.LABEL $label$23
	CALL memcpy($8, [8364], $6)
	
.LABEL $label$22
	*(($8 + $6)) = [0]
	CALL $1(($3 + [184]), $5, ($3 + [152]))
	if ( ((*($3 + [152]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($3 + [160]))
	
.LABEL $label$25
	if ( ((*($5) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$26
	CALL eosio_assert(((int_32)(*($3 + [188]) - *($3 + [184])) == (int_32)[36]), [8366])
	$6 = *($3 + [184])
	if ( ((int_32)*($3 + [188]) == (int_32)$6) ){ goto $label$20 }
	$5 = *($6)
	if ( ($5 & [1]) ){ goto $label$28 }
	$5 = uint_32($5 >> [1])
	$6 = ($6 + [1])
	goto $label$27 
	
.LABEL $label$28
	$5 = *($6 + [4])
	$6 = *($6 + [8])
	
.LABEL $label$27
	*($3 + [140]) = $5
	*($3 + [136]) = $6
	*($3) = *($3 + [136])
	$6 = CALL $6(($3 + [144]), $3)
	$5 = *($3 + [184])
	if ( ((uint_32)((int_32)(*($3 + [188]) - $5) / (int_32)[12]) <= (uint_32)[1]) ){ goto $label$19 }
	$4 = CALL $37(($3 + [120]), ($5 + [12]))
	$5 = *($3 + [184])
	if ( ((uint_32)((int_32)(*($3 + [188]) - $5) / (int_32)[12]) <= (uint_32)[2]) ){ goto $label$18 }
	$9 = CALL $37(($3 + [104]), ($5 + [24]))
	$5 = [1]
	$8 = [1]
	$11 = *($3 + [120])
	$10 = CALL $50([8192])
	if ( ((int_32)$10 != (int_32)( *($4 + [4]) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$29 }
	$8 = ((int_32)CALL $43($4, [0], [-1], [8192], $10) != (int_32)[0])
	
.LABEL $label$29
	CALL eosio_assert($8, [8394])
	$8 = *($3 + [104])
	$11 = CALL $50([8192])
	if ( ((int_32)$11 != (int_32)( *($9 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$30 }
	$5 = ((int_32)CALL $43($9, [0], [-1], [8192], $11) != (int_32)[0])
	
.LABEL $label$30
	CALL eosio_assert($5, [8414])
	CALL eosio_assert(((int_64)*($6) != (int_64)0), [8440])
	CALL eosio_assert(CALL $fimport$2(*($6)), [8464])
	CALL require_auth(*($6))
	$5 = [0]
	*((($3 + [64]) + [32])) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$2 = *($0)
	*($3 + [64]) = $2
	*($3 + [72]) = $2
	$8 = [0]
	$11 = CALL db_find_i64($2, $2, (int_64)-5002676888749998080, *($6))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$31 }
	$8 = CALL $7(($3 + [64]), $11)
	if ( ((int_32)*($8 + [48]) == (int_32)($3 + [64])) ){ goto $label$31 }
	CALL eosio_assert([0], [9131])
	
.LABEL $label$31
	CALL eosio_assert(($8 == 0), [8487])
	*((($3 + [24]) + [32])) = [0]
	*($3 + [40]) = (int_64)-1
	$2 = *($0)
	*($3 + [24]) = $2
	*($3 + [32]) = $2
	*($3 + [48]) = (int_64)0
	$8 = CALL db_find_i64($2, $2, (int_64)-5002676927702323200, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$32 }
	$5 = CALL $8(($3 + [24]), $8)
	if ( ((int_32)*($5 + [16]) == (int_32)($3 + [24])) ){ goto $label$32 }
	CALL eosio_assert([0], [9131])
	
.LABEL $label$32
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8567])
	CALL eosio_assert(((int_64)*($5) == (int_64)*(($3 + [216]))), [8642])
	$2 = *($0)
	*($3 + [12]) = $4
	*($3 + [8]) = $6
	*($3 + [16]) = $9
	*($3 + [280]) = $2
	if ( ((int_64)*($3 + [64]) == (int_64)CALL current_receiver()) ){ goto $label$33 }
	CALL eosio_assert([0], [9205])
	
.LABEL $label$33
	*($3 + [260]) = ($3 + [8])
	*($3 + [256]) = ($3 + [64])
	*($3 + [264]) = ($3 + [280])
	*(($6 = CALL _Znwj([64]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [48]) = ($3 + [64])
	CALL $9(($3 + [256]), $6)
	*($3 + [272]) = $6
	$2 = *($6)
	*($3 + [256]) = $2
	$8 = *($6 + [52])
	*($3 + [252]) = $8
	$0 = ($3 + [92])
	$5 = *($0)
	if ( ((uint_32)$5 >= (uint_32)*(($3 + [96]))) ){ goto $label$35 }
	*($5 + [8]) = $2
	*($5 + [16]) = $8
	*($3 + [272]) = [0]
	*($5) = $6
	*($0) = ($5 + [24])
	$6 = *($3 + [272])
	*($3 + [272]) = [0]
	if ( ($6 == 0) ){ goto $label$34 }
	goto $label$17 
	
.LABEL $label$35
	CALL $10(($3 + [88]), ($3 + [272]), ($3 + [256]), ($3 + [252]))
	$6 = *($3 + [272])
	*($3 + [272]) = [0]
	if ( $6 ){ goto $label$17 }
	
.LABEL $label$34
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$21
	CALL $36(($3 + [152]))
	
.LABEL $label$20
	CALL $45(($3 + [184]))
	
.LABEL $label$19
	CALL $45(($3 + [184]))
	
.LABEL $label$18
	CALL $45(($3 + [184]))
	
.LABEL $label$17
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($6 + [28])))
	
.LABEL $label$36
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$37
	CALL _ZdlPv($6)
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$0 = ($3 + [52])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$39 }
	
.LOOP $label$40:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$41 }
	CALL _ZdlPv($5)
	
.LABEL $label$41
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$40 }
	$6 = *(($3 + [48]))
	goto $label$38 
	
.LABEL $label$39
	$6 = $8
	
.LABEL $label$38
	*($0) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$8 = *($3 + [88])
	if ( ($8 == 0) ){ goto $label$42 }
	$0 = (($3 + [64]) + [28])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$44 }
	
.LOOP $label$45:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$46 }
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*(($6 + [28])))
	
.LABEL $label$47
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$48
	CALL _ZdlPv($6)
	
.LABEL $label$46
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$45 }
	$6 = *(($3 + [88]))
	goto $label$43 
	
.LABEL $label$44
	$6 = $8
	
.LABEL $label$43
	*($0) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$42
	if ( (*($3 + [104]) & [1]) ){ goto $label$52 }
	if ( (*($3 + [120]) & [1]) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$50 }
	
.LABEL $label$51
	CALL _ZdlPv(*($4 + [8]))
	$8 = *($3 + [184])
	if ( $8 ){ goto $label$49 }
	goto $label$1 
	
.LABEL $label$50
	$8 = *($3 + [184])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$49
	$5 = *($3 + [188])
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$54 }
	
.LOOP $label$55:
	$6 = ($5 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$56
	$5 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$55 }
	$6 = *($3 + [184])
	goto $label$53 
	
.LABEL $label$54
	$6 = $8
	
.LABEL $label$53
	*($3 + [188]) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$1
	if ( ((*(($3 + [232])) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*(($3 + [240])))
	
.LABEL $label$57
	$global$0 = ($3 + [288])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $53($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $11(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $37(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($2 + [1])
	$5 = ($1 + [1])
	$6 = ($2 + [4])
	$7 = ($2 + [8])
	
.LOOP $label$1:
	$9 = *($1)
	$8 = ($9 & [1])
	if ( $8 ){ goto $label$4 }
	if ( (uint_32($9 >> [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( *(($1 + [4])) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	if ( $8 ){ goto $label$6 }
	$8 = uint_32($9 >> [1])
	$10 = $5
	goto $label$5 
	
.LABEL $label$6
	$8 = *(($1 + [4]))
	$10 = *(($1 + [8]))
	
.LABEL $label$5
	$11 = ($9 & [1])
	$9 = *($2)
	$9 = ( *($6) ? uint_32($9 >> [1]) : $11 )
	if ( ($9 == 0) ){ goto $label$10 }
	if ( ((int_32)$8 < (int_32)$9) ){ goto $label$8 }
	$12 = ($10 + $8)
	$13 = ( *($7) ? $4 : $11 )
	$14 = *($13)
	$11 = $10
	
.LOOP $label$11:
	$8 = (($8 - $9) + [1])
	if ( ($8 == 0) ){ goto $label$8 }
	$8 = CALL $48($11, $14, $8)
	if ( ($8 == 0) ){ goto $label$8 }
	if ( (CALL $49($8, $13, $9) == 0) ){ goto $label$9 }
	$11 = ($8 + [1])
	$8 = ($12 - $11)
	if ( ((int_32)$8 >= (int_32)$9) ){ goto $label$11 }
	goto $label$8 
	
.LABEL $label$10
	$8 = [0]
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$8 }
	$8 = ($8 - $10)
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$7 }
	
.LABEL $label$8
	$9 = ($0 + [4])
	$8 = *($9)
	if ( ((int_32)$8 == (int_32)*(($0 + [8]))) ){ goto $label$12 }
	CALL $37($8, $1)
	*($9) = (*($9) + [12])
	CALL $42($1, [8192])
	goto $label$1 
	
.LABEL $label$12
	CALL $2($0, $1)
	CALL $42($1, [8192])
	goto $label$1 
	
.LABEL $label$7
	$14 = CALL $38($3, $1, [0], $8, $1)
	$12 = ($0 + [8])
	$9 = ($0 + [4])
	$11 = *($9)
	if ( ((uint_32)$11 >= (uint_32)*($12)) ){ goto $label$16 }
	*($11) = *($3)
	$11 = ($3 + [8])
	*(($11 + [8])) = *($11)
	*($11) = [0]
	*($9) = (*($9) + [12])
	*($3) = (int_64)0
	$11 = *($2)
	if ( (($11 & [1]) == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	CALL $3($0, $14)
	if ( (*($3) & [1]) ){ goto $label$17 }
	$11 = *($2)
	if ( ($11 & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [8])))
	$11 = *($2)
	if ( (($11 & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$11 = *($6)
	goto $label$13 
	
.LABEL $label$14
	$11 = uint_32($11 >> [1])
	
.LABEL $label$13
	CALL $38($3, $1, ($11 + $8), [-1], $1)
	if ( (*($1) & [1]) ){ goto $label$19 }
	*($1) = [0]
	goto $label$18 
	
.LABEL $label$19
	*(*(($1 + [8]))) = [0]
	*(($1 + [4])) = [0]
	
.LABEL $label$18
	CALL $41($1, [0])
	*($1) = *($3)
	*(($1 + [8])) = *(($3 + [8]))
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$21 }
	if ( uint_32($8 >> [1]) ){ goto $label$1 }
	goto $label$20 
	
.LABEL $label$21
	if ( *(($1 + [4])) ){ goto $label$1 }
	
.LABEL $label$20
	$8 = *($9)
	if ( ((int_32)$8 == (int_32)*($12)) ){ goto $label$22 }
	CALL $37($8, $1)
	*($9) = (*($9) + [12])
	goto $label$1 
	
.LABEL $label$22
	CALL $2($0, $1)
	goto $label$1 
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [56]) = $1
	$5 = [1]
	$6 = [1]
	$8 = *($2)
	$7 = CALL $50([8192])
	if ( ((int_32)$7 != (int_32)( *($2 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$1 }
	$6 = ((int_32)CALL $43($2, [0], [-1], [8192], $7) != (int_32)[0])
	
.LABEL $label$1
	CALL eosio_assert($6, [8394])
	$6 = *($3)
	$8 = CALL $50([8192])
	if ( ((int_32)$8 != (int_32)( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	$5 = ((int_32)CALL $43($3, [0], [-1], [8192], $8) != (int_32)[0])
	
.LABEL $label$2
	CALL eosio_assert($5, [8414])
	CALL eosio_assert(((int_64)$1 != (int_64)0), [8440])
	CALL eosio_assert(CALL $fimport$2($1), [8464])
	CALL require_auth($1)
	*(($4 + [48])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$9 = *($0)
	*($4 + [16]) = $9
	*($4 + [24]) = $9
	$5 = [0]
	$6 = CALL db_find_i64($9, $9, (int_64)-5002676888749998080, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $7(($4 + [16]), $6)
	if ( ((int_32)*($5 + [48]) == (int_32)($4 + [16])) ){ goto $label$3 }
	CALL eosio_assert([0], [9131])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8761])
	$1 = *($4 + [56])
	*($4 + [4]) = $2
	*($4 + [8]) = $3
	*($4) = ($4 + [56])
	if ( $5 ){ goto $label$4 }
	CALL eosio_assert([0], [9262])
	
.LABEL $label$4
	CALL $16(($4 + [16]), $5, $1, $4)
	$2 = *($4 + [40])
	if ( ($2 == 0) ){ goto $label$5 }
	$6 = (($4 + [16]) + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$10
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$8 }
	$5 = *(($4 + [40]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $2
	
.LABEL $label$6
	*($6) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [48]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9297])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9343])
	
.LABEL $label$2
	$6 = *($1)
	*($1) = *(*($3))
	$7 = ($1 + [8])
	CALL $39($7, *($3 + [4]))
	CALL $39(($1 + [20]), *($3 + [8]))
	*($1 + [40]) = CALL current_time()
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9394])
	
.LABEL $label$3
	$3 = *($7)
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$7 = *(($1 + [20]))
	$7 = ( *(($1 + [24])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($3 <= [513]) ){ goto $label$7 }
	$4 = CALL $53($3)
	goto $label$6 
	
.LABEL $label$7
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$6
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $26($5, $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $56($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [8802])
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-5002676927702335488) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-3075276114209559040) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	
.LABEL $label$5
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)-5002676927702335488) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-3075276114209559040) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3) = *($3 + [40])
	CALL $18($0, (int_64)6138663591592764928, $3)
	goto $label$2 
	
.LABEL $label$4
	*($3 + [36]) = [0]
	*($3 + [32]) = [2]
	*($3 + [8]) = *($3 + [32])
	CALL $19($0, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [28]) = [0]
	*($3 + [24]) = [3]
	*($3 + [16]) = *($3 + [24])
	CALL $20($0, $1, ($3 + [16]))
	
.LABEL $label$2
	CALL $47([0])
	$global$0 = ($3 + [48])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9122])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9122])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9122])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9122])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $21(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	$4 = *($1)
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $7
	$3 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $3 ){ goto $label$5 }
	$3 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [8692])
	CALL eosio_assert(((int_64)$4 > (int_64)0), [8706])
	$6 = CALL $50([8302])
	if ( ($6 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8867])
	goto $label$8 
	
.LABEL $label$9
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = (int_64)0
	
.LOOP $label$10:
	$3 = *(($6 + [8301]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8912])
	
.LABEL $label$11
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$10 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$6 
	
.LABEL $label$7
	$5 = (int_64)4
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)$5), [8729])
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$5 = *($0)
	*($2) = $5
	*($2 + [8]) = $5
	*($2 + [24]) = (int_64)0
	$6 = CALL db_find_i64($5, $5, (int_64)-5002676927702323200, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $8($2, $6)
	if ( ((int_32)*($6 + [16]) == (int_32)$2) ){ goto $label$15 }
	CALL eosio_assert([0], [9131])
	
.LABEL $label$15
	$5 = *($0)
	*($2 + [48]) = $1
	CALL $13($2, $6, $5, ($2 + [48]))
	$8 = *($2 + [24])
	if ( $8 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$7 = *($0)
	if ( ((int_64)$5 == (int_64)CALL current_receiver()) ){ goto $label$16 }
	CALL eosio_assert([0], [9205])
	
.LABEL $label$16
	*(($6 = CALL _Znwj([32])) + [16]) = $2
	*($6 + [8]) = *(($1 + [8]))
	*($6) = *($1)
	CALL memcpy(($2 + [48]), $6, [8])
	*($2 + [72]) = *($6 + [8])
	CALL memcpy((($2 + [48]) | [8]), ($2 + [72]), [8])
	$8 = CALL db_store_i64(*(($2 + [8])), (int_64)-5002676927702323200, $7, (int_64)0, ($2 + [48]), [16])
	*($6 + [20]) = $8
	$3 = ($2 + [16])
	if ( ((int_64)*($3) != (int_64)0) ){ goto $label$17 }
	*($3) = (int_64)1
	
.LABEL $label$17
	*($2 + [72]) = $6
	*($2 + [48]) = (int_64)0
	*($2 + [44]) = $8
	$1 = ($2 + [28])
	$3 = *($1)
	if ( ((uint_32)$3 >= (uint_32)*(($2 + [32]))) ){ goto $label$20 }
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = $8
	*($2 + [72]) = [0]
	*($3) = $6
	*($1) = ($3 + [24])
	$6 = *($2 + [72])
	*($2 + [72]) = [0]
	if ( $6 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL $14(($2 + [24]), ($2 + [72]), ($2 + [48]), ($2 + [44]))
	$6 = *($2 + [72])
	*($2 + [72]) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$8 = *($2 + [24])
	if ( ($8 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = ($2 + [28])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$24 }
	CALL _ZdlPv($3)
	
.LABEL $label$24
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$23 }
	$6 = *(($2 + [24]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $8
	
.LABEL $label$21
	*($1) = $8
	CALL _ZdlPv($6)
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$12
	$global$0 = ($2 + [80])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9297])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9343])
	
.LABEL $label$2
	$3 = *($3)
	*($1) = *($3)
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	$3 = $4
	$4 = ($3 + [-16])
	$global$0 = $4
	CALL memcpy($4, $1, [8])
	*($5 + [8]) = *($6)
	CALL memcpy(($3 + [-8]), ($5 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((int_64)*($0 + [16]) == (int_64)0) ){ goto $label$3 }
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$3
	*(($0 + [16])) = (int_64)1
	$global$0 = ($5 + [16])
}

void .FUNC $36 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $56($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $51(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9456])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $51(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $56($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $53($1)
	
.LABEL $label$2
	*(CALL $46()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $53(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $56($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $53 (int_32 $0)
{
	return CALL $54([9476], $0)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $55($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8216])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9468]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9472])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9468]) = [1]
	$2 = ($2 << [16])
	*([0] + [9472]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9472])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9472]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9468]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9468]) = [1]
	$3 = ($3 << [16])
	*([0] + [9472]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9472])
	
.LABEL $label$10
	*([0] + [9472]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17860])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17668]
	$3 = (((int_32)$1 * (int_32)[12]) + [17668])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}