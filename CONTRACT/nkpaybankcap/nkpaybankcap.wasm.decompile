(data (i32.const 8192) "invalid symbol name\00")
(data (i32.const 8212) "token with symbol already exists\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8331) "memo has more than 256 bytes\00")
(data (i32.const 8360) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8420) "invalid quantity\00")
(data (i32.const 8437) "must issue positive quantity\00")
(data (i32.const 8466) "symbol precision mismatch\00")
(data (i32.const 8492) "NKL\00")
(data (i32.const 8496) "NKL Token is locked Asset.\00")
(data (i32.const 8523) "cannot transfer to self\00")
(data (i32.const 8547) "to account does not exist\00")
(data (i32.const 8573) "unable to find key\00")
(data (i32.const 8592) "must transfer positive quantity\00")
(data (i32.const 8624) "token with symbol does not exist\00")
(data (i32.const 8657) "must retire positive quantity\00")
(data (i32.const 8687) "NKP\00%f\00")
(data (i32.const 8694) "Lockup action is only NKP Token.\00")
(data (i32.const 8727) "Burn Complete : Source Action Lockup(1/4) \00")
(data (i32.const 8770) "Airgrab Complete : Source Action Lockup(2/4) \00")
(data (i32.const 8816) "(\00")
(data (i32.const 8818) ")\00")
(data (i32.const 8820) "UnLock limit(+)\00")
(data (i32.const 8836) "Lockup Complete : Source Action Lockup(3/4) \00")
(data (i32.const 8881) "Send Token:\00")
(data (i32.const 8893) ", Burn Token:\00")
(data (i32.const 8907) ", Mint Token:\00")
(data (i32.const 8921) ", Airgrab:\00")
(data (i32.const 8932) "Lockup\00")
(data (i32.const 8939) "UnLock action is only NKL Token.\00")
(data (i32.const 8972) "Cannot UnLock because the xlimit is insufficiency[1].\00")
(data (i32.const 9026) "Cannot UnLock because the xlimit is insufficiency[2].\00")
(data (i32.const 9080) "xlimit balance : \00")
(data (i32.const 9098) "Burn Complete : Source Action UnLock(1/4) \00")
(data (i32.const 9141) "xLimit(-) Complete : Source Action UnLock(2/4) \00")
(data (i32.const 9189) "UnLock limit(-)\00")
(data (i32.const 9205) "UnLock Complete : Source Action UnLock(3/4) \00")
(data (i32.const 9250) "UnLock Token:\00")
(data (i32.const 9264) "UnLock\00")
(data (i32.const 9271) "Payment action is only NKP Token.\00")
(data (i32.const 9305) "Burn Complete : Source Action Payment(1/5) \00")
(data (i32.const 9349) "NKL Mint Lockup Complete : Source Action Payment(2/5) \00")
(data (i32.const 9404) "Send Complete : Source Action Payment(3/5) \00")
(data (i32.const 9448) "Reward Complete : Source Action Payment(4/5) \00")
(data (i32.const 9494) ", Reward:\00")
(data (i32.const 9504) "Payment\00")
(data (i32.const 9512) "Claim action is only NKL Token.\00")
(data (i32.const 9544) "Claim Request is Once a day !!\00")
(data (i32.const 9575) "NKL Balance is empty.\00")
(data (i32.const 9597) "NKL Burn Complete : Source Action Claim(1/3) \00")
(data (i32.const 9643) "NKP Mint Complete : Source Action Claim(2/3) \00")
(data (i32.const 9689) "Claim Token:\00")
(data (i32.const 9702) "/ total:\00")
(data (i32.const 9711) "Claim\00")
(data (i32.const 9717) "no balance object found\00")
(data (i32.const 9741) "overdrawn balance\00")
(data (i32.const 9759) "NKC\00")
(data (i32.const 9763) "NKC Token Only Loan Process!!\00")
(data (i32.const 9793) "Cannot read because the NKC USD is zero.\00")
(data (i32.const 9834) "nkc usd : \00")
(data (i32.const 9845) " USD)\00")
(data (i32.const 9851) " Receive Token:\00")
(data (i32.const 9867) "(0.2 USD)\00")
(data (i32.const 9877) "Loan\00")
(data (i32.const 9882) "nkpaybankcap\00")
(data (i32.const 9895) "Refund action is only NKP Token.\00")
(data (i32.const 9928) "NKP Burn Complete : Source Action Refund(1/3) \00")
(data (i32.const 9975) "NKC Refund Complete : Source Action Refund(2/3) \00")
(data (i32.const 10024) "nkpaymentcap\00")
(data (i32.const 10037) "Refund\00")
(data (i32.const 10044) "transfer\00")
(data (i32.const 10053) "string is too long to be a valid symbol_code\00")
(data (i32.const 10098) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 10151) "-%lld.%s %s\00")
(data (i32.const 10163) "%lld.%s %s\00")
(data (i32.const 10176) "\c4\'\00\00")
(data (i32.const 10180) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10213) "write\00")
(data (i32.const 10219) "string is too long to be a valid name\00")
(data (i32.const 10257) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 10324) "character is not in allowed character set for names\00")
(data (i32.const 10376) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10427) "error reading iterator\00")
(data (i32.const 10450) "read\00")
(data (i32.const 10455) "cannot create objects in table of another contract\00")
(data (i32.const 10506) "object passed to modify is not in multi_index\00")
(data (i32.const 10552) "cannot modify objects in table of another contract\00")
(data (i32.const 10603) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10662) "attempt to add asset with different symbol\00")
(data (i32.const 10705) "addition underflow\00")
(data (i32.const 10724) "addition overflow\00")
(data (i32.const 10742) "attempt to subtract asset with different symbol\00")
(data (i32.const 10790) "subtraction underflow\00")
(data (i32.const 10812) "subtraction overflow\00")
(data (i32.const 10833) "cannot pass end iterator to modify\00")
(data (i32.const 10868) "get\00")
(data (i32.const 19296) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_store_i64" (func $fimport$4 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$7 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "has_auth" (func $fimport$9 (param i64) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "prints" (func $fimport$11 (param i32)))
(import "env" "printi" (func $fimport$12 (param i64)))
(import "env" "publication_time" (func $fimport$13 (result i64)))
(import "env" "printdf" (func $fimport$14 (param f64)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$18))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$32 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$33 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$36 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$38 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$39 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$40 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $44))
(export "_Znwj" (func $66))
(export "_ZdlPv" (func $68))
(export "_Znaj" (func $67))
(export "_ZdaPv" (func $69))
(export "_ZnwjSt11align_val_t" (func $70))
(export "_ZnajSt11align_val_t" (func $71))
(export "_ZdlPvSt11align_val_t" (func $72))
(export "_ZdaPvSt11align_val_t" (func $73))
(table $0 15 15 anyfunc)
(elem (i32.const 1) $37 $14 $10 $1 $31 $28 $35 $40 $15 $33 $5 $16 $90 $92)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19376))
(global $global$2 i32 (i32.const 19376))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $99($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8245])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10884]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10888])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10884]) = [1]
	$2 = ($2 << [16])
	*([0] + [10888]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10888])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10888]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10884]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10884]) = [1]
	$3 = ($3 << [16])
	*([0] + [10888]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10888])
	
.LABEL $label$10
	*([0] + [10888]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $87())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $96($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $97($1)
	
.LABEL $label$2
	*(CALL $87()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $97(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $100($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $97 (int_32 $0)
{
	return CALL $98([10892], $0)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $89([14], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [10427])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $97($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*($3 + [40]) = ($2 + $5)
	*($3 + [32]) = $2
	*(($4 = CALL _Znwj([56]))) = (int_64)0
	*($4 + [8 align=4]) = (int_64)0
	*($4 + [16]) = [0]
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [40]) = [0]
	*($4 + [44]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10450])
	CALL memcpy($4, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $61(($3 + [32]), ($4 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [10450])
	CALL memcpy(($4 + [24]), *($3 + [36]), [8])
	*($3 + [36]) = (*($3 + [36]) + [8])
	CALL $52(($3 + [32]), ($4 + [32]))
	*($4 + [48]) = $1
	*($3 + [24]) = $4
	$6 = *($4)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $4
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $62(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $100($2)
	
.LABEL $label$6
	$2 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$10
	$0 = *($2 + [8])
	if ( ($0 == 0) ){ goto $label$11 }
	$8 = ($2 + [12])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($1 + [-24])
	if ( ((*($5) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($1 + [-16])))
	
.LABEL $label$15
	$1 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($2 + [8]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$11
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $4
}

int_32 .FUNC $49 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $97($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10450])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [10450])
	CALL memcpy(($4 + [24]), ($2 + [8]), [8])
	*($4 + [60]) = ($2 + [16])
	*($4 + [80]) = *($4 + [24])
	CALL $52(($4 + [56]), (($4 + [72]) + [16]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $55(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $100($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $48 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $97($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [64]) + [16]))) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10450])
	CALL memcpy(($4 + [64]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [10450])
	CALL memcpy((($4 + [64]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [10450])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [52]) = ($2 + [24])
	CALL $52(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $54(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $100($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10213])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10213])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10213])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10213])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $59(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $86($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [10219])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [10324])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [10257])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [10324])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $40 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	float_64 $11
	int_32 $12
	$4 = ($global$0 - [512])
	$global$0 = $4
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	$5 = CALL $94([8687])
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [10053])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($5 + [8686]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$2 
	
.LABEL $label$3
	$6 = (int_64)0
	
.LABEL $label$2
	*($4 + [432]) = [9882]
	*($4 + [436]) = CALL $94([9882])
	*($4 + [32]) = *($4 + [432])
	$8 = CALL $41(($4 + [440]), ($4 + [32]))
	CALL eosio_assert((uint_64)(((int_64)*($2 + [8]) ^ (int_64)$6) <= (int_64)256), [9895])
	*($4 + [424]) = [0]
	*($4 + [416]) = (int_64)0
	CALL $17(($4 + [448]), $2)
	$5 = CALL $84(($4 + [448]), [0], [9928])
	$7 = *($5 + [4])
	$9 = *($5)
	*($5) = (int_64)0
	$10 = *($5 + [8])
	*($5 + [8]) = [0]
	if ( (*($4 + [416]) & [1]) ){ goto $label$9 }
	*($4 + [416]) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($4 + [424]))) = [0]
	*($4 + [420]) = [0]
	
.LABEL $label$8
	CALL $77(($4 + [416]), [0])
	*((($4 + [416]) + [8])) = $10
	*($4 + [420]) = $7
	*($4 + [416]) = $9
	if ( ((*($4 + [448]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($4 + [456]))
	
.LABEL $label$10
	*(($7 = (($4 + [368]) + [24]))) = *(($2 + [8]))
	*($4 + [368]) = $1
	$6 = *($0)
	*($4 + [376]) = $6
	*($4 + [384]) = *($2)
	CALL $75(($4 + [400]), ($4 + [416]))
	*(($5 = CALL _Znwj([16]))) = $1
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [448]) + [24])) = *($7)
	$7 = (($4 + [368]) + [40])
	*(($9 = (($4 + [448]) + [40]))) = *($7)
	*($7) = [0]
	*($4 + [296]) = $5
	$5 = ($5 + [16])
	*($4 + [304]) = $5
	*($4 + [300]) = $5
	*($4 + [448]) = *($4 + [368])
	*($4 + [456]) = *($4 + [376])
	*($4 + [464]) = *($4 + [384])
	*($4 + [480]) = *($4 + [400])
	*($4 + [400]) = (int_64)0
	CALL $7($6, (int_64)-3617168760277827584, ($4 + [296]), ($4 + [448]))
	if ( ((*($4 + [480]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$11
	$5 = *($4 + [296])
	if ( ($5 == 0) ){ goto $label$12 }
	*($4 + [300]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((*(($4 + [400])) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [408])))
	
.LABEL $label$13
	*(($7 = (($4 + [336]) + [8]))) = *(($2 + [8]))
	*($4 + [336]) = *($2)
	$6 = *($0)
	CALL $75((($4 + [336]) + [16]), ($4 + [416]))
	*(($5 = CALL _Znwj([16]))) = $6
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [448]) + [8])) = *($7)
	$7 = (($4 + [336]) + [24])
	*(($9 = (($4 + [448]) + [24]))) = *($7)
	*($7) = [0]
	*($4 + [296]) = $5
	$5 = ($5 + [16])
	*($4 + [304]) = $5
	*($4 + [300]) = $5
	*($4 + [448]) = *($4 + [336])
	*($4 + [464]) = *($4 + [352])
	*($4 + [352]) = (int_64)0
	CALL $18($6, (int_64)-4993669930013425664, ($4 + [296]), ($4 + [448]))
	if ( ((*($4 + [464]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$14
	$5 = *($4 + [296])
	if ( ($5 == 0) ){ goto $label$15 }
	*($4 + [300]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((*(($4 + [352])) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [360])))
	
.LABEL $label$16
	*(($4 + [328])) = [0]
	*($4 + [304]) = (int_64)-7190695464890391904
	*($4 + [296]) = (int_64)-7190695464890391904
	*($4 + [312]) = (int_64)-1
	*($4 + [320]) = (int_64)0
	$9 = CALL $38(($4 + [296]), CALL $fimport$2((int_64)-7190695464890391904, (int_64)-7190695464890391904, (int_64)-6499669907066585088, (int_64)-7201241093365563392))
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)($4 + [296])), [10376])
	CALL eosio_assert(((float_64)*($9 + [24]) > (float_64)(float_64)0), [9793])
	CALL prints([9834])
	CALL printdf(*($9 + [24]))
	*($4 + [288]) = (int_64)0
	$11 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.8) * (float_64)(float_64)0.2) / (float_64)*($9 + [24]))
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$18 }
	$6 = (int_64)-9223372036854775808
	goto $label$17 
	
.LABEL $label$18
	$6 = (Rounds 0)($11)
	
.LABEL $label$17
	*($4 + [280]) = $6
	$5 = CALL $94([9759])
	if ( ($5 <= [8]) ){ goto $label$22 }
	CALL eosio_assert([0], [10053])
	goto $label$21 
	
.LABEL $label$22
	if ( ($5 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$6 = (int_64)0
	
.LOOP $label$23:
	$7 = *(($5 + [9758]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$24 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$24
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$23 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$19 
	
.LABEL $label$20
	$6 = (int_64)0
	
.LABEL $label$19
	*((($4 + [280]) + [8])) = ((int_64)$6 | (int_64)4)
	*($4 + [272]) = [0]
	*($4 + [264]) = (int_64)0
	CALL $17(($4 + [448]), ($4 + [280]))
	$5 = CALL $84(($4 + [448]), [0], [9975])
	$7 = *($5 + [4])
	$10 = *($5)
	*($5) = (int_64)0
	$12 = *($5 + [8])
	*($5 + [8]) = [0]
	if ( (*($4 + [264]) & [1]) ){ goto $label$26 }
	*($4 + [264]) = [0]
	goto $label$25 
	
.LABEL $label$26
	*(*((($4 + [264]) + [8]))) = [0]
	*($4 + [268]) = [0]
	
.LABEL $label$25
	CALL $77(($4 + [264]), [0])
	*((($4 + [264]) + [8])) = $12
	*($4 + [268]) = $7
	*($4 + [264]) = $10
	if ( ((*($4 + [448]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($4 + [456]))
	
.LABEL $label$27
	$6 = *($0)
	*($4 + [208]) = [10024]
	*($4 + [212]) = CALL $94([10024])
	*($4 + [24]) = *($4 + [208])
	$5 = CALL $41(($4 + [216]), ($4 + [24]))
	*((($4 + [448]) + [24])) = *((($4 + [280]) + [8]))
	*($4 + [456]) = $1
	*($4 + [448]) = *($0)
	*($4 + [464]) = *($4 + [280])
	$7 = CALL $75((($4 + [448]) + [32]), ($4 + [264]))
	*(($10 = (($4 + [224]) + [24]))) = [0]
	*($4 + [232]) = (int_64)-3617168760277827584
	*($4 + [240]) = (int_64)0
	*($4 + [224]) = *($5)
	*(($5 = CALL _Znwj([16]))) = $6
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [224]) + [36])) = [0]
	$12 = ($5 + [16])
	*($10) = $12
	*(($4 + [244])) = $12
	*($4 + [240]) = $5
	*($4 + [252 align=4]) = (int_64)0
	$5 = *($7)
	$7 = ( *((($4 + [448]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [32])
	$6 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [252])
	
.LOOP $label$28:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$28 }
	if ( ($5 == 0) ){ goto $label$30 }
	CALL $42($7, $5)
	$7 = *(($4 + [256]))
	$5 = *(($4 + [252]))
	goto $label$29 
	
.LABEL $label$30
	$7 = [0]
	$5 = [0]
	
.LABEL $label$29
	*($4 + [500]) = $5
	*($4 + [496]) = $5
	*($4 + [504]) = $7
	*($4 + [160]) = ($4 + [496])
	*($4 + [176]) = ($4 + [448])
	CALL $43(($4 + [176]), ($4 + [160]))
	CALL $21(($4 + [496]), ($4 + [224]))
	$5 = *($4 + [496])
	CALL send_inline($5, (*($4 + [500]) - $5))
	$5 = *($4 + [496])
	if ( ($5 == 0) ){ goto $label$31 }
	*($4 + [500]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$31
	$5 = *($4 + [252])
	if ( ($5 == 0) ){ goto $label$32 }
	*(($4 + [256])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$32
	$5 = *($4 + [240])
	if ( ($5 == 0) ){ goto $label$33 }
	*(($4 + [244])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$33
	if ( ((*($4 + [480]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($4 + [488])))
	
.LABEL $label$34
	$6 = *((($4 + [280]) + [8]))
	*((($4 + [192]) + [8])) = $6
	*((($4 + [8]) + [8])) = $6
	$6 = *($4 + [280])
	*($4 + [8]) = $6
	*($4 + [192]) = $6
	CALL $22($0, $1, ($4 + [8]), $1)
	*($4 + [232]) = [0]
	*($4 + [224]) = (int_64)0
	CALL $17(($4 + [112]), $2)
	$5 = CALL $84(($4 + [112]), [0], [8881])
	$7 = ($5 + [8])
	*((($4 + [128]) + [8])) = *($7)
	*($4 + [128]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	$5 = CALL $81(($4 + [128]), [9867])
	$7 = ($5 + [8])
	*((($4 + [144]) + [8])) = *($7)
	*($4 + [144]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	$5 = CALL $81(($4 + [144]), [9851])
	$7 = ($5 + [8])
	*((($4 + [160]) + [8])) = *($7)
	*($4 + [160]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	CALL $17(($4 + [96]), ($4 + [280]))
	$5 = *($4 + [96])
	$7 = ($5 & [1])
	$5 = CALL $82(($4 + [160]), ( *($4 + [104]) ? (($4 + [96]) | [1]) : $7 ), ( *($4 + [100]) ? uint_32($5 >> [1]) : $7 ))
	$7 = ($5 + [8])
	*((($4 + [176]) + [8])) = *($7)
	*($4 + [176]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	$5 = CALL $81(($4 + [176]), [8816])
	$7 = ($5 + [8])
	*((($4 + [496]) + [8])) = *($7)
	*($4 + [496]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	CALL $85(($4 + [80]), *(($9 + [24])))
	$5 = *($4 + [80])
	$7 = ($5 & [1])
	$5 = CALL $82(($4 + [496]), ( *($4 + [88]) ? (($4 + [80]) | [1]) : $7 ), ( *($4 + [84]) ? uint_32($5 >> [1]) : $7 ))
	$7 = ($5 + [8])
	*((($4 + [448]) + [8])) = *($7)
	*($4 + [448]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	$5 = CALL $81(($4 + [448]), [9845])
	$7 = *($5 + [4])
	$2 = *($5)
	*($5) = (int_64)0
	$9 = *($5 + [8])
	*($5 + [8]) = [0]
	if ( (*($4 + [224]) & [1]) ){ goto $label$36 }
	*($4 + [224]) = [0]
	goto $label$35 
	
.LABEL $label$36
	*(*((($4 + [224]) + [8]))) = [0]
	*($4 + [228]) = [0]
	
.LABEL $label$35
	CALL $77(($4 + [224]), [0])
	*(($4 + [232])) = $9
	*($4 + [228]) = $7
	*($4 + [224]) = $2
	if ( (*($4 + [448]) & [1]) ){ goto $label$53 }
	if ( (*($4 + [80]) & [1]) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	CALL _ZdlPv(*($4 + [456]))
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$51 }
	
.LABEL $label$52
	CALL _ZdlPv(*(($4 + [88])))
	$5 = [1]
	if ( ((*($4 + [496]) & [1]) == 0) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$5 = [1]
	if ( (*($4 + [496]) & [1]) ){ goto $label$49 }
	
.LABEL $label$50
	if ( (*($4 + [176]) & $5) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	CALL _ZdlPv(*($4 + [504]))
	if ( ((*($4 + [176]) & $5) == 0) ){ goto $label$47 }
	
.LABEL $label$48
	CALL _ZdlPv(*($4 + [184]))
	$5 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$5 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$45 }
	
.LABEL $label$46
	if ( (*($4 + [160]) & $5) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	CALL _ZdlPv(*(($4 + [104])))
	if ( ((*($4 + [160]) & $5) == 0) ){ goto $label$43 }
	
.LABEL $label$44
	CALL _ZdlPv(*($4 + [168]))
	$5 = [1]
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$5 = [1]
	if ( (*($4 + [144]) & [1]) ){ goto $label$41 }
	
.LABEL $label$42
	if ( (*($4 + [128]) & $5) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	CALL _ZdlPv(*($4 + [152]))
	if ( ((*($4 + [128]) & $5) == 0) ){ goto $label$39 }
	
.LABEL $label$40
	CALL _ZdlPv(*($4 + [136]))
	if ( (*($4 + [112]) & [1]) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$37 }
	
.LABEL $label$38
	CALL _ZdlPv(*($4 + [120]))
	
.LABEL $label$37
	$6 = *($0)
	*(($4 + [48])) = [0]
	*($4 + [456]) = (int_64)3617214756542218240
	*($4 + [448]) = $6
	*($4 + [40]) = (int_64)0
	$5 = CALL $94([10037])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$59 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$62 }
	*($4 + [40]) = ($5 << [1])
	$7 = (($4 + [40]) | [1])
	if ( $5 ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$2 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($2)
	*($4 + [40]) = ($2 | [1])
	*($4 + [48]) = $7
	*($4 + [44]) = $5
	
.LABEL $label$61
	CALL memcpy($7, [10037], $5)
	
.LABEL $label$60
	*(($7 + $5)) = [0]
	CALL $75(($4 + [52]), ($4 + [224]))
	*($4 + [64]) = $1
	*($4 + [72]) = *($8)
	CALL $24($6, ($4 + [448]), ($4 + [40]))
	if ( (*($4 + [52]) & [1]) ){ goto $label$64 }
	if ( (*($4 + [40]) & [1]) ){ goto $label$63 }
	goto $label$58 
	
.LABEL $label$64
	CALL _ZdlPv(*(($4 + [60])))
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$58 }
	
.LABEL $label$63
	CALL _ZdlPv(*($4 + [48]))
	$5 = [1]
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	CALL $74(($4 + [40]))
	
.LABEL $label$58
	$5 = [1]
	if ( (*($4 + [224]) & [1]) ){ goto $label$56 }
	
.LABEL $label$57
	if ( ((*($4 + [264]) & $5) == 0) ){ goto $label$54 }
	goto $label$55 
	
.LABEL $label$56
	CALL _ZdlPv(*(($4 + [232])))
	if ( ((*($4 + [264]) & $5) == 0) ){ goto $label$54 }
	
.LABEL $label$55
	CALL _ZdlPv(*(($4 + [272])))
	
.LABEL $label$54
	CALL $39(($4 + [320]))
	if ( ((*($4 + [416]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [424])))
	
.LABEL $label$1
	$global$0 = ($4 + [512])
	(unreachable)
}

int_32 .FUNC $47 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $97($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10450])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10450])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $100($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $97($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [84]) = [0]
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10450])
	CALL memcpy(($4 + [64]), $2, [8])
	*($4 + [52]) = ($2 + [8])
	CALL $52(($4 + [48]), (($4 + [64]) + [8]))
	CALL eosio_assert(((int_32)*($4 + [56]) != (int_32)*($4 + [52])), [10450])
	CALL memcpy(($4 + [84]), *($4 + [52]), [1])
	*($4 + [52]) = (*($4 + [52]) + [1])
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4)
	$3 = *($6)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	*($4 + [116]) = ($4 + [88])
	*($4 + [112]) = ($4 + [16])
	CALL $53(($4 + [112]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $100($2)
	
.LABEL $label$4
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $97($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $50(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $51(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $100($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	*($3 + [224]) = [10024]
	*($3 + [228]) = CALL $94([10024])
	*($3 + [112]) = *($3 + [224])
	CALL $41(($3 + [232]), ($3 + [112]))
	if ( ((int_64)$1 != (int_64)-7193815094041899696) ){ goto $label$2 }
	*($3 + [216]) = [10044]
	*($3 + [220]) = CALL $94([10044])
	*($3 + [104]) = *($3 + [216])
	CALL $41(($3 + [232]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [1]
	*($3 + [8]) = *($3 + [208])
	CALL $45($0, (int_64)-7193815094041899696, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-3106564276286914561) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)4921564679018381311) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-3106564276286914560) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-3075276122146757632) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)3629809370180616192) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [2]
	*($3 + [96]) = *($3 + [120])
	CALL $45($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 <= (int_64)-5001342339331915777) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4993669930013425664) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [3]
	*($3 + [32]) = *($3 + [184])
	CALL $45($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [4]
	*($3 + [16]) = *($3 + [200])
	CALL $46($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-8281823585329217536) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-6215770888931901440) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [56]) = *($3 + [160])
	CALL $45($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [132]) = [0]
	*($3 + [128]) = [6]
	*($3 + [88]) = *($3 + [128])
	CALL $45($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [148]) = [0]
	*($3 + [144]) = [7]
	*($3 + [72]) = *($3 + [144])
	CALL $47($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [140]) = [0]
	*($3 + [136]) = [8]
	*($3 + [80]) = *($3 + [136])
	CALL $48($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [180]) = [0]
	*($3 + [176]) = [9]
	*($3 + [40]) = *($3 + [176])
	CALL $49($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [156]) = [0]
	*($3 + [152]) = [10]
	*($3 + [64]) = *($3 + [152])
	CALL $45($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [196]) = [0]
	*($3 + [192]) = [11]
	*($3 + [24]) = *($3 + [192])
	CALL $48($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [172]) = [0]
	*($3 + [168]) = [12]
	*($3 + [48]) = *($3 + [168])
	CALL $45($1, $1, ($3 + [48]))
	
.LABEL $label$1
	CALL $88([0])
	$global$0 = ($3 + [240])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10427])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $97($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10450])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10450])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $100($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($2 + [8])
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $8(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [10376])
	CALL eosio_assert([1], [10833])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [10506])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [10552])
	$1 = *($0 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [10662])
	$6 = ((int_64)*($0) + (int_64)*($2))
	*($0) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10705])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [10724])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [10603])
	CALL eosio_assert([1], [10213])
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [10213])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($4 + [48]), [16])
	$0 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$3 }
	*($0) = ((int_64)$1 + (int_64)1)
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [10455])
	*(($0 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($0 + [8]) = *(($2 + [8]))
	*($0) = *($2)
	CALL eosio_assert([1], [10213])
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [10213])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [48]), [16]
	*($0 + [20]) = $7)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$5
	*($4 + [72]) = $0
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [68]) = $7
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $7
	*($4 + [72]) = [0]
	*($2) = $0
	*($8) = ($2 + [24])
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $9(($4 + [32]), ($4 + [72]), ($4 + [48]), ($4 + [68]))
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $7 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $42($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $43(($4 + [72]), ($4 + [64]))
	CALL $21(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $86(($4 + [8]))
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [224])
	$global$0 = $4
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8192])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [8331])
	$10 = [0]
	*(($4 + [120])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$8 = *($0)
	*($4 + [88]) = $8
	*($4 + [96]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $2(($4 + [88]), $5)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)($4 + [88])), [10376])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8360])
	CALL require_auth(*($11 + [24]))
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $8
	$10 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [8420])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8437])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [16])), [8466])
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)($4 + [88])), [10506])
	CALL eosio_assert(((int_64)*($4 + [88]) == (int_64)CALL $fimport$3()), [10552])
	$8 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$8), [10662])
	$7 = ((int_64)*($11) + (int_64)$9)
	*($11) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [10705])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [10724])
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [10603])
	*($4 + [192]) = (($4 + [128]) + [32])
	*($4 + [188]) = ($4 + [128])
	*($4 + [184]) = ($4 + [128])
	*($4 + [200]) = ($4 + [184])
	*($4 + [212]) = ($11 + [16])
	*($4 + [208]) = $11
	$5 = ($11 + [24])
	*($4 + [216]) = $5
	CALL $3(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($11 + [36]), (int_64)0, ($4 + [128]), [32])
	$10 = (($4 + [88]) + [16])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$14 }
	*($10) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$8 = *($5)
	$11 = ($2 + [8])
	*(($10 = (($4 + [72]) + [8]))) = *($11)
	$7 = *($2)
	*((($4 + [8]) + [8])) = *($10)
	*($4 + [72]) = $7
	*($4 + [8]) = *($4 + [72])
	CALL $6($0, $8, ($4 + [8]), $8)
	$8 = *($5)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$15 }
	*(($10 = (($4 + [24]) + [24]))) = *($11)
	*($4 + [24]) = $8
	*($4 + [32]) = $1
	*($4 + [40]) = *($2)
	$7 = *($0)
	CALL $75(($4 + [56]), $3)
	*(($5 = CALL _Znwj([16]))) = $8
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [128]) + [24])) = *($10)
	$10 = (($4 + [24]) + [40])
	*(($11 = (($4 + [128]) + [40]))) = *($10)
	*($10) = [0]
	*($4 + [208]) = $5
	$5 = ($5 + [16])
	*($4 + [216]) = $5
	*($4 + [212]) = $5
	*($4 + [128]) = *($4 + [24])
	*($4 + [136]) = *($4 + [32])
	*($4 + [144]) = *($4 + [40])
	*($4 + [160]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $7($7, (int_64)-3617168760277827584, ($4 + [208]), ($4 + [128]))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$16
	$5 = *($4 + [208])
	if ( ($5 == 0) ){ goto $label$17 }
	*($4 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$11 = *($4 + [112])
	if ( ($11 == 0) ){ goto $label$18 }
	$12 = ($4 + [116])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$22 }
	CALL _ZdlPv($10)
	
.LABEL $label$22
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($4 + [112]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $11
	
.LABEL $label$19
	*($12) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$global$0 = ($4 + [224])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10427])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $97($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	CALL $58(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $4(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $100($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10213])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10213])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [4]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10213])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10213])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth(*($0))
	if ( (*($2) & [1]) ){ goto $label$5 }
	$5 = ($2 + [1])
	$2 = CALL $94($5)
	if ( ((uint_32)$2 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($2 + [8])
	$2 = CALL $94($5)
	if ( ($2 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [10053])
	goto $label$2 
	
.LABEL $label$3
	if ( $2 ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = (($5 + $2) + [-1])
	$8 = *($7)
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [10098])
	$8 = *($7)
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$1
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)(CASTING uint_64)(uint_32 $3))
	$2 = [0]
	$10 = ((int_64)$6 & (int_64)72057594037927935)
	$6 = $10
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$6 = $11
	$8 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$6 = $11
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $8 ){ goto $label$12 }
	$8 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	
.LABEL $label$8
	CALL eosio_assert($8, [8192])
	$2 = [0]
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	*($4 + [16]) = $10
	$8 = CALL db_find_i64($6, $10, (int_64)-4157508551318700032, $10)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*(CALL $2(($4 + [8]), $8) + [32]) == (int_32)($4 + [8])), [10376])
	goto $label$13 
	
.LABEL $label$14
	$2 = [1]
	
.LABEL $label$13
	CALL eosio_assert($2, [8212])
	$11 = *($0)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [10455])
	*(($2 = CALL _Znwj([48]))) = (int_64)0
	*($2 + [32]) = ($4 + [8])
	*($2 + [8]) = $9
	*($2 + [16]) = $9
	*($2 + [24]) = $1
	*($4 + [96]) = (($4 + [48]) + [32])
	*($4 + [92]) = ($4 + [48])
	*($4 + [88]) = ($4 + [48])
	*($4 + [104]) = ($4 + [88])
	*($4 + [116]) = ($2 + [16])
	*($4 + [112]) = $2
	*($4 + [120]) = ($2 + [24])
	CALL $3(($4 + [112]), ($4 + [104]))
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)-4157508551318700032, $11, $6), ($4 + [48]), [32]
	*($2 + [36]) = $7)
	$8 = (($4 + [8]) + [16])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$15 }
	*($8) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$15
	*($4 + [112]) = $2
	$6 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $6)
	*($4 + [88]) = $7
	$5 = ($4 + [36])
	$8 = *($5)
	if ( ((uint_32)$8 >= (uint_32)*(($4 + [40]))) ){ goto $label$18 }
	*($8 + [8]) = $6
	*($8 + [16]) = $7
	*($4 + [112]) = [0]
	*($8) = $2
	*($5) = ($8 + [24])
	$2 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( $2 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $4(($4 + [32]), ($4 + [112]), ($4 + [48]), ($4 + [88]))
	$2 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv($2)
	
.LABEL $label$16
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$19 }
	$5 = ($4 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$21 }
	
.LOOP $label$22:
	$2 = ($2 + [-24])
	$8 = *($2)
	*($2) = [0]
	if ( ($8 == 0) ){ goto $label$23 }
	CALL _ZdlPv($8)
	
.LABEL $label$23
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$22 }
	$2 = *(($4 + [32]))
	goto $label$20 
	
.LABEL $label$21
	$2 = $7
	
.LABEL $label$20
	*($5) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$19
	$global$0 = ($4 + [128])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8523])
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$7($1), [8547])
	CALL eosio_assert(CALL $fimport$7($2), [8547])
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [104])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $8)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$9 = CALL $11(($5 + [72]), $8, [8573])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $12
	$7 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8420])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8592])
	CALL eosio_assert(((int_64)$6 == (int_64)*($9 + [8])), [8466])
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [8331])
	$11 = ($3 + [8])
	$12 = *($11)
	*((($5 + [56]) + [8])) = $12
	$8 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $8
	*($5 + [56]) = $8
	CALL $12($0, $1, ($5 + [24]))
	$1 = *($11)
	*((($5 + [40]) + [8])) = $1
	$8 = *($3)
	*((($5 + [8]) + [8])) = $1
	*($5 + [8]) = $8
	*($5 + [40]) = $8
	CALL $6($0, $2, ($5 + [8]), $2)
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$11 }
	$11 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$11 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = [0]
	$5 = *($1 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8192])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$7 }
	$4 = uint_32($4 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$4 = *($2 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($4 <= [257]), [8331])
	$9 = [0]
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$7 = *($0)
	*($3 + [40]) = $7
	*($3 + [48]) = $6
	$10 = [0]
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $2(($3 + [40]), $4)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($3 + [40])), [10376])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8624])
	CALL require_auth(*($10 + [24]))
	$8 = *($1)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$6 = $7
	$9 = [1]
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$6 = $7
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $9 ){ goto $label$13 }
	$9 = [1]
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$9
	CALL eosio_assert($9, [8420])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8657])
	CALL eosio_assert(((int_64)$5 == (int_64)*($10 + [8])), [8466])
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($3 + [40])), [10506])
	CALL eosio_assert(((int_64)*($3 + [40]) == (int_64)CALL $fimport$3()), [10552])
	$7 = *($10 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$7), [10742])
	$6 = (int_64)
	*($10) = $6(*($10) - $8))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10790])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [10812])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8)), [10603])
	*($3 + [128]) = (($3 + [80]) + [32])
	*($3 + [124]) = ($3 + [80])
	*($3 + [120]) = ($3 + [80])
	*($3 + [136]) = ($3 + [120])
	*($3 + [148]) = ($10 + [16])
	*($3 + [144]) = $10
	$4 = ($10 + [24])
	*($3 + [152]) = $4
	CALL $3(($3 + [144]), ($3 + [136]))
	CALL db_update_i64(*($10 + [36]), (int_64)0, ($3 + [80]), [32])
	$9 = (($3 + [40]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$14 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$14
	$7 = *($4)
	*(($4 = (($3 + [24]) + [8]))) = *(($1 + [8]))
	$6 = *($1)
	*((($3 + [8]) + [8])) = *($4)
	*($3 + [24]) = $6
	*($3 + [8]) = *($3 + [24])
	CALL $12($0, $7, ($3 + [8]))
	$10 = *($3 + [64])
	if ( ($10 == 0) ){ goto $label$15 }
	$2 = ($3 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	CALL _ZdlPv($9)
	
.LABEL $label$19
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($3 + [64]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $10
	
.LABEL $label$16
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$global$0 = ($3 + [160])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	float_64 $11
	$5 = ($global$0 - [640])
	$global$0 = $5
	*($5 + [560]) = $2
	*($5 + [568]) = $1
	$6 = CALL $94([8687])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10053])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8686]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)*($3 + [8]) ^ (int_64)$7) <= (int_64)256), [8694])
	$7 = (int_64)0
	*($5 + [552]) = (int_64)0
	*($5 + [544]) = *($3)
	$6 = CALL $94([8687])
	if ( ($6 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [10053])
	goto $label$8 
	
.LABEL $label$9
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = (int_64)0
	
.LOOP $label$10:
	$8 = *(($6 + [8686]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$10 }
	$7 = ((int_64)$7 << (int_64)8)
	
.LABEL $label$7
	*((($5 + [544]) + [8])) = ((int_64)$7 | (int_64)4)
	*($5 + [536]) = [0]
	*($5 + [528]) = (int_64)0
	CALL $17(($5 + [576]), ($5 + [544]))
	$6 = CALL $84(($5 + [576]), [0], [8727])
	$8 = *($6 + [4])
	$9 = *($6)
	*($6) = (int_64)0
	$10 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [528]) & [1]) ){ goto $label$13 }
	*($5 + [528]) = [0]
	goto $label$12 
	
.LABEL $label$13
	*(*((($5 + [528]) + [8]))) = [0]
	*($5 + [532]) = [0]
	
.LABEL $label$12
	CALL $77(($5 + [528]), [0])
	*((($5 + [528]) + [8])) = $10
	*($5 + [532]) = $8
	*($5 + [528]) = $9
	if ( ((*($5 + [576]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($5 + [584]))
	
.LABEL $label$14
	*(($8 = (($5 + [480]) + [24]))) = *((($5 + [544]) + [8]))
	*($5 + [480]) = $1
	$7 = *($0)
	*($5 + [488]) = $7
	*($5 + [496]) = *($5 + [544])
	CALL $75(($5 + [512]), ($5 + [528]))
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [576]) + [24])) = *($8)
	$8 = (($5 + [480]) + [40])
	*(($9 = (($5 + [576]) + [40]))) = *($8)
	*($8) = [0]
	*($5 + [304]) = $6
	$6 = ($6 + [16])
	*($5 + [312]) = $6
	*($5 + [308]) = $6
	*($5 + [576]) = *($5 + [480])
	*($5 + [584]) = *($5 + [488])
	*($5 + [592]) = *($5 + [496])
	*($5 + [608]) = *($5 + [512])
	*($5 + [512]) = (int_64)0
	CALL $7($7, (int_64)-3617168760277827584, ($5 + [304]), ($5 + [576]))
	if ( ((*($5 + [608]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$15
	$6 = *($5 + [304])
	if ( ($6 == 0) ){ goto $label$16 }
	*($5 + [308]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	if ( ((*(($5 + [512])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [520])))
	
.LABEL $label$17
	*(($8 = (($5 + [448]) + [8]))) = *((($5 + [544]) + [8]))
	*($5 + [448]) = *($5 + [544])
	$7 = *($0)
	CALL $75((($5 + [448]) + [16]), ($5 + [528]))
	*(($6 = CALL _Znwj([16]))) = $7
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [576]) + [8])) = *($8)
	$8 = (($5 + [448]) + [24])
	*(($9 = (($5 + [576]) + [24]))) = *($8)
	*($8) = [0]
	*($5 + [304]) = $6
	$6 = ($6 + [16])
	*($5 + [312]) = $6
	*($5 + [308]) = $6
	*($5 + [576]) = *($5 + [448])
	*($5 + [592]) = *($5 + [464])
	*($5 + [464]) = (int_64)0
	CALL $18($7, (int_64)-4993669930013425664, ($5 + [304]), ($5 + [576]))
	if ( ((*($5 + [592]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$18
	$6 = *($5 + [304])
	if ( ($6 == 0) ){ goto $label$19 }
	*($5 + [308]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	if ( ((*(($5 + [464])) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($5 + [472])))
	
.LABEL $label$20
	*($5 + [440]) = (int_64)0
	$11 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.2)
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$22 }
	$7 = (int_64)-9223372036854775808
	goto $label$21 
	
.LABEL $label$22
	$7 = (Rounds 0)($11)
	
.LABEL $label$21
	*($5 + [432]) = $7
	$6 = CALL $94([8492])
	if ( ($6 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [10053])
	goto $label$25 
	
.LABEL $label$26
	if ( ($6 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$7 = (int_64)0
	
.LOOP $label$27:
	$8 = *(($6 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$28
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$27 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$23 
	
.LABEL $label$24
	$7 = (int_64)0
	
.LABEL $label$23
	*((($5 + [432]) + [8])) = ((int_64)$7 | (int_64)4)
	$8 = [0]
	*($5 + [424]) = [0]
	*($5 + [416]) = (int_64)0
	CALL $17(($5 + [624]), ($5 + [432]))
	$6 = CALL $84(($5 + [624]), [0], [8770])
	$9 = ($6 + [8])
	*((($5 + [248]) + [8])) = *($9)
	*($5 + [248]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	$6 = CALL $81(($5 + [248]), [8816])
	$9 = ($6 + [8])
	*((($5 + [264]) + [8])) = *($9)
	*($5 + [264]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$32 }
	$9 = *([0] + [10176])
	
.LOOP $label$34:
	*((($5 + [304]) + ($6 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$33 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$34 }
	
.LABEL $label$33
	*(($5 + [408])) = [0]
	*($5 + [400]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$31 }
	*($5 + [400]) = ($8 << [1])
	$9 = (($5 + [400]) | [1])
	goto $label$30 
	
.LABEL $label$32
	*((($5 + [400]) + [8])) = [0]
	*($5 + [400]) = (int_64)0
	*($5 + [400]) = [0]
	$6 = (($5 + [400]) | [1])
	$8 = $6
	goto $label$29 
	
.LABEL $label$31
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [400]) = ($10 | [1])
	*($5 + [408]) = $9
	*($5 + [404]) = $8
	
.LABEL $label$30
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$35:
	*(($9 + $6)) = *((($5 + [304]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$35 }
	$8 = ($9 + $8)
	$6 = (($5 + [400]) | [1])
	
.LABEL $label$29
	*($8) = [0]
	$8 = *($5 + [400])
	$9 = ($8 & [1])
	$6 = CALL $82(($5 + [264]), ( *($5 + [408]) ? $6 : $9 ), ( *($5 + [404]) ? uint_32($8 >> [1]) : $9 ))
	$8 = ($6 + [8])
	*((($5 + [576]) + [8])) = *($8)
	*($5 + [576]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [576]), [8818])
	$8 = *($6 + [4])
	$9 = *($6)
	*($6) = (int_64)0
	$10 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [416]) & [1]) ){ goto $label$37 }
	*($5 + [416]) = [0]
	goto $label$36 
	
.LABEL $label$37
	*(*((($5 + [416]) + [8]))) = [0]
	*($5 + [420]) = [0]
	
.LABEL $label$36
	CALL $77(($5 + [416]), [0])
	*(($5 + [424])) = $10
	*($5 + [420]) = $8
	*($5 + [416]) = $9
	if ( (*($5 + [576]) & [1]) ){ goto $label$46 }
	if ( (*($5 + [400]) & [1]) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	CALL _ZdlPv(*($5 + [584]))
	if ( ((*($5 + [400]) & [1]) == 0) ){ goto $label$44 }
	
.LABEL $label$45
	CALL _ZdlPv(*(($5 + [408])))
	$6 = [1]
	if ( ((*($5 + [264]) & [1]) == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$6 = [1]
	if ( (*($5 + [264]) & [1]) ){ goto $label$42 }
	
.LABEL $label$43
	if ( (*($5 + [248]) & $6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	CALL _ZdlPv(*($5 + [272]))
	if ( ((*($5 + [248]) & $6) == 0) ){ goto $label$40 }
	
.LABEL $label$41
	CALL _ZdlPv(*($5 + [256]))
	if ( (*($5 + [624]) & [1]) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	if ( ((*($5 + [624]) & [1]) == 0) ){ goto $label$38 }
	
.LABEL $label$39
	CALL _ZdlPv(*($5 + [632]))
	
.LABEL $label$38
	*(($5 + [608])) = [0]
	*($5 + [592]) = (int_64)-1
	*($5 + [600]) = (int_64)0
	$2 = *($0)
	*($5 + [576]) = $2
	$7 = *($5 + [568])
	*($5 + [584]) = $7
	$6 = CALL db_find_i64($2, $7, (int_64)4921564823608885248, $7)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$74 }
	CALL eosio_assert(((int_32)*(CALL $19(($5 + [576]), $6) + [16]) == (int_32)($5 + [576])), [10376])
	$2 = *($0)
	*((($5 + [264]) + [16])) = *(($5 + [440]))
	*($5 + [264]) = *($5 + [560])
	*($5 + [272]) = *($5 + [432])
	CALL $75((($5 + [264]) + [24]), ($5 + [416]))
	*(($8 = (($5 + [304]) + [24]))) = [0]
	*($5 + [312]) = (int_64)8516769789752901632
	*($5 + [304]) = $2
	*($5 + [320]) = (int_64)0
	*(($6 = CALL _Znwj([16]))) = $2
	*($6 + [8]) = (int_64)3617214756542218240
	$9 = ($6 + [16])
	*($8) = $9
	*(($5 + [324])) = $9
	*($5 + [320]) = $6
	CALL $20(($5 + [332]), ($5 + [264]))
	CALL $21(($5 + [248]), ($5 + [304]))
	$6 = *($5 + [248])
	CALL send_inline($6, (*($5 + [252]) - $6))
	$6 = *($5 + [248])
	if ( ($6 == 0) ){ goto $label$75 }
	*($5 + [252]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$75
	$6 = *($5 + [332])
	if ( ($6 == 0) ){ goto $label$76 }
	*(($5 + [336])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$76
	$6 = *($5 + [320])
	if ( ($6 == 0) ){ goto $label$77 }
	*(($5 + [324])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$77
	if ( ((*($5 + [288]) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*(($5 + [296])))
	goto $label$73 
	
.LABEL $label$74
	$2 = *($5 + [560])
	$6 = CALL has_auth($2)
	$1 = *((($5 + [432]) + [8]))
	*((($5 + [384]) + [8])) = $1
	*(($5 + [8])) = $1
	$1 = *($5 + [432])
	*($5) = $1
	*($5 + [384]) = $1
	CALL $22($0, $2, $5, ( $2 ? $7 : $6 ))
	$2 = *($0)
	*((($5 + [344]) + [8])) = [0]
	*($5 + [312]) = (int_64)3617214756542218240
	*($5 + [304]) = $2
	*($5 + [344]) = (int_64)0
	$6 = CALL $94([8820])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$72 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$80 }
	*($5 + [344]) = ($6 << [1])
	$8 = (($5 + [344]) | [1])
	if ( $6 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [344]) = ($9 | [1])
	*($5 + [352]) = $8
	*($5 + [348]) = $6
	
.LABEL $label$79
	CALL memcpy($8, [8820], $6)
	
.LABEL $label$78
	*(($8 + $6)) = [0]
	CALL $75(($5 + [356]), ($5 + [416]))
	$7 = *($5 + [568])
	*($5 + [368]) = $7
	*($5 + [376]) = *($5 + [560])
	CALL $23($2, ($5 + [304]), ($5 + [344]))
	if ( ((*($5 + [356]) & [1]) == 0) ){ goto $label$81 }
	CALL _ZdlPv(*(($5 + [364])))
	
.LABEL $label$81
	if ( ((*($5 + [344]) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*($5 + [352]))
	
.LABEL $label$73
	$2 = (int_64)0
	*($5 + [256]) = (int_64)0
	*($5 + [248]) = ((int_64)*($3) * (int_64)6)
	$6 = CALL $94([8492])
	if ( ($6 <= [8]) ){ goto $label$84 }
	CALL eosio_assert([0], [10053])
	goto $label$83 
	
.LABEL $label$84
	if ( ($6 == 0) ){ goto $label$82 }
	
.LABEL $label$83
	$2 = (int_64)0
	
.LOOP $label$85:
	$8 = *(($6 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$86 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$86
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$85 }
	$2 = ((int_64)$2 << (int_64)8)
	
.LABEL $label$82
	*((($5 + [248]) + [8])) = ((int_64)$2 | (int_64)4)
	*($5 + [408]) = [0]
	*($5 + [400]) = (int_64)0
	CALL $17(($5 + [304]), ($5 + [248]))
	$6 = CALL $84(($5 + [304]), [0], [8836])
	$8 = *($6 + [4])
	$9 = *($6)
	*($6) = (int_64)0
	$10 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [400]) & [1]) ){ goto $label$88 }
	*($5 + [400]) = [0]
	goto $label$87 
	
.LABEL $label$88
	*(*((($5 + [400]) + [8]))) = [0]
	*($5 + [404]) = [0]
	
.LABEL $label$87
	CALL $77(($5 + [400]), [0])
	*((($5 + [400]) + [8])) = $10
	*($5 + [404]) = $8
	*($5 + [400]) = $9
	if ( ((*($5 + [304]) & [1]) == 0) ){ goto $label$89 }
	CALL _ZdlPv(*($5 + [312]))
	
.LABEL $label$89
	$2 = *($0)
	*((($5 + [264]) + [16])) = *((($5 + [248]) + [8]))
	*($5 + [264]) = $7
	*($5 + [272]) = *($5 + [248])
	CALL $75((($5 + [264]) + [24]), ($5 + [400]))
	*(($8 = (($5 + [304]) + [24]))) = [0]
	*($5 + [312]) = (int_64)8516769789752901632
	*($5 + [304]) = $2
	*($5 + [320]) = (int_64)0
	*(($6 = CALL _Znwj([16]))) = $2
	*($6 + [8]) = (int_64)3617214756542218240
	$9 = ($6 + [16])
	*($8) = $9
	*(($5 + [324])) = $9
	*($5 + [320]) = $6
	CALL $20(($5 + [332]), ($5 + [264]))
	CALL $21(($5 + [624]), ($5 + [304]))
	$6 = *($5 + [624])
	CALL send_inline($6, (*($5 + [628]) - $6))
	$6 = *($5 + [624])
	if ( ($6 == 0) ){ goto $label$90 }
	*($5 + [628]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$90
	$6 = *($5 + [332])
	if ( ($6 == 0) ){ goto $label$91 }
	*(($5 + [336])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$91
	$6 = *($5 + [320])
	if ( ($6 == 0) ){ goto $label$92 }
	*(($5 + [324])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$92
	if ( ((*($5 + [288]) & [1]) == 0) ){ goto $label$93 }
	CALL _ZdlPv(*(($5 + [296])))
	
.LABEL $label$93
	$8 = [0]
	*($5 + [272]) = [0]
	*($5 + [264]) = (int_64)0
	CALL $17(($5 + [120]), $3)
	$6 = CALL $84(($5 + [120]), [0], [8881])
	$9 = ($6 + [8])
	*((($5 + [136]) + [8])) = *($9)
	*($5 + [136]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	$6 = CALL $81(($5 + [136]), [8893])
	$9 = ($6 + [8])
	*((($5 + [152]) + [8])) = *($9)
	*($5 + [152]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	CALL $17(($5 + [104]), ($5 + [544]))
	$6 = *($5 + [104])
	$9 = ($6 & [1])
	$6 = CALL $82(($5 + [152]), ( *($5 + [112]) ? (($5 + [104]) | [1]) : $9 ), ( *($5 + [108]) ? uint_32($6 >> [1]) : $9 ))
	$9 = ($6 + [8])
	*((($5 + [168]) + [8])) = *($9)
	*($5 + [168]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	$6 = CALL $81(($5 + [168]), [8907])
	$9 = ($6 + [8])
	*((($5 + [184]) + [8])) = *($9)
	*($5 + [184]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	CALL $17(($5 + [88]), ($5 + [248]))
	$6 = *($5 + [88])
	$9 = ($6 & [1])
	$6 = CALL $82(($5 + [184]), ( *($5 + [96]) ? (($5 + [88]) | [1]) : $9 ), ( *($5 + [92]) ? uint_32($6 >> [1]) : $9 ))
	$9 = ($6 + [8])
	*((($5 + [200]) + [8])) = *($9)
	*($5 + [200]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	$6 = CALL $81(($5 + [200]), [8921])
	$9 = ($6 + [8])
	*((($5 + [216]) + [8])) = *($9)
	*($5 + [216]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	CALL $17(($5 + [72]), ($5 + [432]))
	$6 = *($5 + [72])
	$9 = ($6 & [1])
	$6 = CALL $82(($5 + [216]), ( *($5 + [80]) ? (($5 + [72]) | [1]) : $9 ), ( *($5 + [76]) ? uint_32($6 >> [1]) : $9 ))
	$9 = ($6 + [8])
	*((($5 + [232]) + [8])) = *($9)
	*($5 + [232]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	$6 = CALL $81(($5 + [232]), [8816])
	$9 = ($6 + [8])
	*((($5 + [624]) + [8])) = *($9)
	*($5 + [624]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	$2 = *($5 + [560])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$97 }
	$9 = *([0] + [10176])
	
.LOOP $label$99:
	*((($5 + [304]) + ($6 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$98 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$99 }
	
.LABEL $label$98
	*(($5 + [64])) = [0]
	*($5 + [56]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$96 }
	*($5 + [56]) = ($8 << [1])
	$9 = (($5 + [56]) | [1])
	goto $label$95 
	
.LABEL $label$97
	*((($5 + [56]) + [8])) = [0]
	*($5 + [56]) = (int_64)0
	*($5 + [56]) = [0]
	$6 = (($5 + [56]) | [1])
	$8 = $6
	goto $label$94 
	
.LABEL $label$96
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [56]) = ($10 | [1])
	*($5 + [64]) = $9
	*($5 + [60]) = $8
	
.LABEL $label$95
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$100:
	*(($9 + $6)) = *((($5 + [304]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$100 }
	$8 = ($9 + $8)
	$6 = (($5 + [56]) | [1])
	
.LABEL $label$94
	*($8) = [0]
	$8 = *($5 + [56])
	$9 = ($8 & [1])
	$6 = CALL $82(($5 + [624]), ( *($5 + [64]) ? $6 : $9 ), ( *($5 + [60]) ? uint_32($8 >> [1]) : $9 ))
	$8 = ($6 + [8])
	*((($5 + [304]) + [8])) = *($8)
	*($5 + [304]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [304]), [8818])
	$8 = *($6 + [4])
	$9 = *($6)
	*($6) = (int_64)0
	$10 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [264]) & [1]) ){ goto $label$102 }
	*($5 + [264]) = [0]
	goto $label$101 
	
.LABEL $label$102
	*(*((($5 + [264]) + [8]))) = [0]
	*($5 + [268]) = [0]
	
.LABEL $label$101
	CALL $77(($5 + [264]), [0])
	*(($5 + [272])) = $10
	*($5 + [268]) = $8
	*($5 + [264]) = $9
	if ( (*($5 + [304]) & [1]) ){ goto $label$104 }
	if ( (*($5 + [56]) & [1]) ){ goto $label$103 }
	goto $label$71 
	
.LABEL $label$104
	CALL _ZdlPv(*($5 + [312]))
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$71 }
	
.LABEL $label$103
	CALL _ZdlPv(*(($5 + [64])))
	$6 = [1]
	if ( ((*($5 + [624]) & [1]) == 0) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	CALL $74(($5 + [344]))
	
.LABEL $label$71
	$6 = [1]
	if ( (*($5 + [624]) & [1]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( (*($5 + [232]) & $6) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	CALL _ZdlPv(*($5 + [632]))
	if ( ((*($5 + [232]) & $6) == 0) ){ goto $label$67 }
	
.LABEL $label$68
	CALL _ZdlPv(*($5 + [240]))
	$6 = [1]
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$6 = [1]
	if ( (*($5 + [72]) & [1]) ){ goto $label$65 }
	
.LABEL $label$66
	if ( (*($5 + [216]) & $6) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	CALL _ZdlPv(*(($5 + [80])))
	if ( ((*($5 + [216]) & $6) == 0) ){ goto $label$63 }
	
.LABEL $label$64
	CALL _ZdlPv(*($5 + [224]))
	$6 = [1]
	if ( ((*($5 + [200]) & [1]) == 0) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$6 = [1]
	if ( (*($5 + [200]) & [1]) ){ goto $label$61 }
	
.LABEL $label$62
	if ( (*($5 + [88]) & $6) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	CALL _ZdlPv(*($5 + [208]))
	if ( ((*($5 + [88]) & $6) == 0) ){ goto $label$59 }
	
.LABEL $label$60
	CALL _ZdlPv(*(($5 + [96])))
	$6 = [1]
	if ( ((*($5 + [184]) & [1]) == 0) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	$6 = [1]
	if ( (*($5 + [184]) & [1]) ){ goto $label$57 }
	
.LABEL $label$58
	if ( (*($5 + [168]) & $6) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	CALL _ZdlPv(*($5 + [192]))
	if ( ((*($5 + [168]) & $6) == 0) ){ goto $label$55 }
	
.LABEL $label$56
	CALL _ZdlPv(*($5 + [176]))
	$6 = [1]
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$6 = [1]
	if ( (*($5 + [104]) & [1]) ){ goto $label$53 }
	
.LABEL $label$54
	if ( (*($5 + [152]) & $6) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	CALL _ZdlPv(*(($5 + [112])))
	if ( ((*($5 + [152]) & $6) == 0) ){ goto $label$51 }
	
.LABEL $label$52
	CALL _ZdlPv(*($5 + [160]))
	$6 = [1]
	if ( ((*($5 + [136]) & [1]) == 0) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$6 = [1]
	if ( (*($5 + [136]) & [1]) ){ goto $label$49 }
	
.LABEL $label$50
	if ( ((*($5 + [120]) & $6) == 0) ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$49
	CALL _ZdlPv(*($5 + [144]))
	if ( ((*($5 + [120]) & $6) == 0) ){ goto $label$47 }
	
.LABEL $label$48
	CALL _ZdlPv(*($5 + [128]))
	
.LABEL $label$47
	$2 = *($0)
	*(($5 + [24])) = [0]
	*($5 + [312]) = (int_64)3617214756542218240
	*($5 + [304]) = $2
	*($5 + [16]) = (int_64)0
	$6 = CALL $94([8932])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$116 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$119 }
	*($5 + [16]) = ($6 << [1])
	$8 = (($5 + [16]) | [1])
	if ( $6 ){ goto $label$118 }
	goto $label$117 
	
.LABEL $label$119
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [16]) = ($9 | [1])
	*($5 + [24]) = $8
	*($5 + [20]) = $6
	
.LABEL $label$118
	CALL memcpy($8, [8932], $6)
	
.LABEL $label$117
	*(($8 + $6)) = [0]
	CALL $75(($5 + [28]), ($5 + [264]))
	$7 = *($5 + [568])
	*($5 + [40]) = $7
	*($5 + [48]) = $7
	CALL $24($2, ($5 + [304]), ($5 + [16]))
	if ( (*($5 + [28]) & [1]) ){ goto $label$121 }
	if ( (*($5 + [16]) & [1]) ){ goto $label$120 }
	goto $label$115 
	
.LABEL $label$121
	CALL _ZdlPv(*(($5 + [36])))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$115 }
	
.LABEL $label$120
	CALL _ZdlPv(*($5 + [24]))
	$6 = [1]
	if ( ((*($5 + [264]) & [1]) == 0) ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$116
	CALL $74(($5 + [16]))
	
.LABEL $label$115
	$6 = [1]
	if ( (*($5 + [264]) & [1]) ){ goto $label$113 }
	
.LABEL $label$114
	if ( (*($5 + [400]) & $6) ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$113
	CALL _ZdlPv(*(($5 + [272])))
	if ( ((*($5 + [400]) & $6) == 0) ){ goto $label$111 }
	
.LABEL $label$112
	CALL _ZdlPv(*(($5 + [408])))
	$9 = *($5 + [600])
	if ( ($9 == 0) ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$111
	$9 = *($5 + [600])
	if ( $9 ){ goto $label$109 }
	
.LABEL $label$110
	$6 = [1]
	if ( (*($5 + [416]) & [1]) ){ goto $label$108 }
	goto $label$107 
	
.LABEL $label$109
	$10 = ($5 + [604])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$123 }
	
.LOOP $label$124:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$125 }
	CALL _ZdlPv($8)
	
.LABEL $label$125
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$124 }
	$6 = *(($5 + [600]))
	goto $label$122 
	
.LABEL $label$123
	$6 = $9
	
.LABEL $label$122
	*($10) = $9
	CALL _ZdlPv($6)
	$6 = [1]
	if ( ((*($5 + [416]) & [1]) == 0) ){ goto $label$107 }
	
.LABEL $label$108
	CALL _ZdlPv(*(($5 + [424])))
	if ( ((*($5 + [528]) & $6) == 0) ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$107
	if ( (*($5 + [528]) & $6) ){ goto $label$105 }
	
.LABEL $label$106
	$global$0 = ($5 + [640])
	return 
	
.LABEL $label$105
	CALL _ZdlPv(*(($5 + [536])))
	$global$0 = ($5 + [640])
	(unreachable)
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [10151] ? [10163] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $93($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $94($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $74($0)
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	$6 = CALL $94([8492])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10053])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	$10 = *($3 + [8])
	$7 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)$7) != (int_64)$9) ){ goto $label$7 }
	$9 = *($0)
	CALL eosio_assert((((int_64)$9 == (int_64)$1) | ((int_64)$9 == (int_64)$2)), [8496])
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8523])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$7($2), [8547])
	$8 = [0]
	*(($5 + [104])) = [0]
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	*($5 + [80]) = $7
	$11 = CALL $11(($5 + [72]), $7, [8573])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$12 = *($3)
	if ( ((uint_64)((int_64)$12 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$7 = $9
	$8 = [1]
	$13 = $6
	$6 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$7 = $9
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$13 = ($6 + [1])
	$6 = $13
	if ( $8 ){ goto $label$12 }
	$8 = [1]
	$6 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	
.LABEL $label$8
	CALL eosio_assert($8, [8420])
	CALL eosio_assert(((int_64)$12 > (int_64)0), [8592])
	CALL eosio_assert(((int_64)$10 == (int_64)*($11 + [8])), [8466])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$14 }
	$6 = uint_32($6 >> [1])
	goto $label$13 
	
.LABEL $label$14
	$6 = *($4 + [4])
	
.LABEL $label$13
	CALL eosio_assert(($6 <= [257]), [8331])
	$6 = CALL has_auth($2)
	$8 = ($3 + [8])
	$9 = *($8)
	*((($5 + [56]) + [8])) = $9
	$7 = *($3)
	*((($5 + [24]) + [8])) = $9
	*($5 + [24]) = $7
	*($5 + [56]) = $7
	CALL $12($0, $1, ($5 + [24]))
	$9 = *($8)
	*((($5 + [40]) + [8])) = $9
	$7 = *($3)
	*((($5 + [8]) + [8])) = $9
	*($5 + [8]) = $7
	*($5 + [40]) = $7
	CALL $6($0, $2, ($5 + [8]), ( $2 ? $1 : $6 ))
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$15 }
	$3 = ($5 + [100])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$17 }
	
.LOOP $label$18:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$19 }
	CALL _ZdlPv($8)
	
.LABEL $label$19
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$18 }
	$6 = *(($5 + [96]))
	goto $label$16 
	
.LABEL $label$17
	$6 = $13
	
.LABEL $label$16
	*($3) = $13
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$global$0 = ($5 + [112])
}

int_32 .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$0), [10376])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $2($0, $4)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$0), [10376])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$5 = *($2)
	$4 = *($2 + [8])
	$0 = CALL $13(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), [9717]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$5), [9741])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [10506])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [10552])
	$6 = *($0 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [10742])
	$4 = (int_64)
	*($0) = $4(*($0) - $5))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10790])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [10812])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [10603])
	CALL eosio_assert([1], [10213])
	CALL memcpy(($3 + [48]), $0, [8])
	*($3 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [10213])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), $1, ($3 + [48]), [16])
	if ( (uint_64)($4 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [80])
}

int_32 .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [10376])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $8($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [10376])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $18 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [8])) = $5
	*($4) = $7
	*($4 + [4]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [4]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*((($4 + [16]) + [20])) = $6
	*(($4 + [40])) = $5
	*(($4 + [8])) = [0]
	*(($4 + [52])) = [0]
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $7
	*($4) = (int_64)0
	*($4 + [44 align=4]) = (int_64)0
	$7 = *($3 + [16])
	$2 = ( *(($3 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [16])
	$0 = (CASTING uint_64)(uint_32 $2)
	$5 = ($3 + [16])
	$2 = ($4 + [44])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $42($2, $7)
	$2 = *(($4 + [48]))
	$7 = *(($4 + [44]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [64]) = $7
	*($4 + [72]) = $2
	$2 = ($2 - $7)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [10213])
	CALL memcpy($7, $3, [8])
	*($4 + [56]) = *($3 + [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [10213])
	CALL memcpy(($7 + [8]), ($4 + [56]), [8])
	*($4 + [68]) = ($7 + [16])
	CALL $59(($4 + [64]), $5)
	CALL $21(($4 + [64]), ($4 + [16]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [44])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [48])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [36])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [4]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $86($4)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10427])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $97($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10450])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10450])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $100($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10450])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10450])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10450])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10450])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10213])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10213])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10450])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10450])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10450])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10450])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $52(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $75(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $75(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $64($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $77($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $77($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $74($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $75($2, ($1 + [8]))
	$5 = *($1 + [20])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*($0) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$6 = CALL $75(($2 + [16]), $4)
	CALL void $0((int_32 $3), (int_64 $6), (int_32 ($5 & [255])), (int_32 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $75(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $75(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $34 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*((($4 + [8]) + [8])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $42(($4 + [52]), [16])
	$7 = *($4 + [52])
	$2 = (*(($4 + [56])) - $7)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [10213])
	CALL memcpy($7, $3, [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [10213])
	CALL memcpy(($7 + [8]), ($3 + [8]), [8])
	CALL $21(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $86(($4 + [8]))
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10213])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10213])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10213])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10213])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10213])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $35 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$global$0 = $3
	*((($3 + [8]) + [32])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	$5 = CALL db_find_i64($4, $1, (int_64)4921564823608885248, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $19(($3 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($3 + [8])), [10376])
	$4 = *($0)
	CALL eosio_assert([1], [10833])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($3 + [8])), [10506])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [10552])
	*($5 + [8]) = $2
	$1 = *($5)
	CALL eosio_assert([1], [10603])
	CALL eosio_assert([1], [10213])
	CALL memcpy(($3 + [64]), $5, [8])
	CALL eosio_assert([1], [10213])
	CALL memcpy((($3 + [64]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), $4, ($3 + [64]), [16])
	$5 = (($3 + [8]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$3 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$6 = *($3 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$2 = *($0)
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$3()), [10455])
	*(($5 = CALL _Znwj([32])) + [16]) = ($3 + [8])
	*($5) = $1
	*($5 + [8]) = CALL publication_time()
	CALL eosio_assert([1], [10213])
	CALL memcpy(($3 + [64]), $5, [8])
	CALL eosio_assert([1], [10213])
	CALL memcpy((($3 + [64]) | [8]), ($5 + [8]), [8])
	$1 = *($5)
	$6 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)4921564823608885248, $2, $1, ($3 + [64]), [16])
	*($5 + [20]) = $6
	$0 = (($3 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($3 + [56]) = $5
	$1 = *($5)
	*($3 + [64]) = $1
	*($3 + [52]) = $6
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)*(($3 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $1
	*($0 + [16]) = $6
	*($3 + [56]) = [0]
	*($0) = $5
	*($7) = ($0 + [24])
	$5 = *($3 + [56])
	*($3 + [56]) = [0]
	if ( $5 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $36(($3 + [32]), ($3 + [56]), ($3 + [64]), ($3 + [52]))
	$5 = *($3 + [56])
	*($3 + [56]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($3 + [36])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($3 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $6
	
.LABEL $label$8
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

int_32 .FUNC $29 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [10376])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-1414931397474254848, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $25($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [10376])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$5 = ($global$0 - [624])
	$global$0 = $5
	$6 = CALL $94([8492])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10053])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((int_64)(uint_64)*($3 + [8]) >> (uint_64)(int_64)8) == (int_64)$7), [8939])
	$9 = *($0)
	*((($5 + [560]) + [32])) = [0]
	*($5 + [568]) = $1
	*($5 + [560]) = $9
	*($5 + [576]) = (int_64)-1
	*($5 + [584]) = (int_64)0
	$9 = *(CALL $13(($5 + [560]), $7, [8573]))
	$3 = *($5 + [584])
	if ( ($3 == 0) ){ goto $label$7 }
	$10 = ($5 + [588])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	CALL _ZdlPv($8)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($5 + [584]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $3
	
.LABEL $label$8
	*($10) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$7
	*((($5 + [520]) + [32])) = [0]
	*($5 + [536]) = (int_64)-1
	*($5 + [544]) = (int_64)0
	*($5 + [528]) = $1
	*($5 + [520]) = (int_64)-7193815285172662960
	$6 = CALL db_find_i64((int_64)-7193815285172662960, $1, (int_64)-1414931397474254848, $7)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $25(($5 + [520]), $6) + [16]) == (int_32)($5 + [520])), [10376])
	goto $label$12 
	
.LABEL $label$13
	CALL eosio_assert([0], [8972])
	
.LABEL $label$12
	$6 = CALL $29(($5 + [520]), $7, [8573])
	CALL eosio_assert(((int_64)*($6) > (int_64)0), [9026])
	CALL prints([9080])
	CALL printi(*($6))
	*($5 + [504]) = (int_64)0
	*($5 + [512]) = (int_64)0
	$7 = *($6)
	if ( ((int_64)$9 >= (int_64)$7) ){ goto $label$23 }
	*($5 + [504]) = $9
	$6 = CALL $94([8492])
	if ( ($6 <= [8]) ){ goto $label$22 }
	CALL eosio_assert([0], [10053])
	goto $label$21 
	
.LABEL $label$23
	*($5 + [504]) = $7
	$6 = CALL $94([8492])
	if ( ($6 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [10053])
	goto $label$19 
	
.LABEL $label$22
	if ( ($6 == 0) ){ goto $label$18 }
	
.LABEL $label$21
	$7 = (int_64)0
	
.LOOP $label$24:
	$8 = *(($6 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$25
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$24 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$15 
	
.LABEL $label$20
	if ( ($6 == 0) ){ goto $label$17 }
	
.LABEL $label$19
	$7 = (int_64)0
	
.LOOP $label$26:
	$8 = *(($6 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$27
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$26 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$16 
	
.LABEL $label$18
	$7 = (int_64)0
	goto $label$15 
	
.LABEL $label$17
	$7 = (int_64)0
	
.LABEL $label$16
	*((($5 + [504]) + [8])) = ((int_64)$7 | (int_64)4)
	*($5 + [248]) = [0]
	*($5 + [240]) = (int_64)0
	CALL $17(($5 + [560]), ($5 + [504]))
	$6 = CALL $84(($5 + [560]), [0], [9098])
	$8 = *($6 + [4])
	$3 = *($6)
	*($6) = (int_64)0
	$10 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [240]) & [1]) ){ goto $label$29 }
	*($5 + [240]) = [0]
	goto $label$28 
	
.LABEL $label$29
	*(*((($5 + [240]) + [8]))) = [0]
	*($5 + [244]) = [0]
	
.LABEL $label$28
	CALL $77(($5 + [240]), [0])
	*((($5 + [240]) + [8])) = $10
	*($5 + [244]) = $8
	*($5 + [240]) = $3
	if ( ((*($5 + [560]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($5 + [568]))
	
.LABEL $label$30
	*(($8 = (($5 + [456]) + [24]))) = *((($5 + [504]) + [8]))
	*($5 + [456]) = $1
	$7 = *($0)
	*($5 + [464]) = $7
	*($5 + [472]) = *($5 + [504])
	CALL $75(($5 + [488]), ($5 + [240]))
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [560]) + [24])) = *($8)
	$8 = (($5 + [456]) + [40])
	*(($3 = (($5 + [560]) + [40]))) = *($8)
	*($8) = [0]
	*($5 + [168]) = $6
	$6 = ($6 + [16])
	*($5 + [176]) = $6
	*($5 + [172]) = $6
	*($5 + [560]) = *($5 + [456])
	*($5 + [568]) = *($5 + [464])
	*($5 + [576]) = *($5 + [472])
	*($5 + [592]) = *($5 + [488])
	*($5 + [488]) = (int_64)0
	CALL $7($7, (int_64)-3617168760277827584, ($5 + [168]), ($5 + [560]))
	if ( ((*($5 + [592]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$31
	$6 = *($5 + [168])
	if ( ($6 == 0) ){ goto $label$32 }
	*($5 + [172]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$32
	if ( ((*(($5 + [488])) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($5 + [496])))
	
.LABEL $label$33
	*(($8 = (($5 + [424]) + [8]))) = *((($5 + [504]) + [8]))
	*($5 + [424]) = *($5 + [504])
	$7 = *($0)
	CALL $75((($5 + [424]) + [16]), ($5 + [240]))
	*(($6 = CALL _Znwj([16]))) = $7
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [560]) + [8])) = *($8)
	$8 = (($5 + [424]) + [24])
	*(($3 = (($5 + [560]) + [24]))) = *($8)
	*($8) = [0]
	*($5 + [168]) = $6
	$6 = ($6 + [16])
	*($5 + [176]) = $6
	*($5 + [172]) = $6
	*($5 + [560]) = *($5 + [424])
	*($5 + [576]) = *($5 + [440])
	*($5 + [440]) = (int_64)0
	CALL $18($7, (int_64)-4993669930013425664, ($5 + [168]), ($5 + [560]))
	if ( ((*($5 + [576]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$34
	$6 = *($5 + [168])
	if ( ($6 == 0) ){ goto $label$35 }
	*($5 + [172]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$35
	if ( ((*(($5 + [440])) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($5 + [448])))
	
.LABEL $label$36
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [248])))
	goto $label$14 
	
.LABEL $label$15
	*((($5 + [504]) + [8])) = ((int_64)$7 | (int_64)4)
	*($5 + [248]) = [0]
	*($5 + [240]) = (int_64)0
	CALL $17(($5 + [560]), ($5 + [504]))
	$6 = CALL $84(($5 + [560]), [0], [9098])
	$8 = *($6 + [4])
	$3 = *($6)
	*($6) = (int_64)0
	$10 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [240]) & [1]) ){ goto $label$38 }
	*($5 + [240]) = [0]
	goto $label$37 
	
.LABEL $label$38
	*(*((($5 + [240]) + [8]))) = [0]
	*($5 + [244]) = [0]
	
.LABEL $label$37
	CALL $77(($5 + [240]), [0])
	*((($5 + [240]) + [8])) = $10
	*($5 + [244]) = $8
	*($5 + [240]) = $3
	if ( ((*($5 + [560]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*($5 + [568]))
	
.LABEL $label$39
	*(($8 = (($5 + [376]) + [24]))) = *((($5 + [504]) + [8]))
	*($5 + [376]) = $1
	$7 = *($0)
	*($5 + [384]) = $7
	*($5 + [392]) = *($5 + [504])
	CALL $75(($5 + [408]), ($5 + [240]))
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [560]) + [24])) = *($8)
	$8 = (($5 + [376]) + [40])
	*(($3 = (($5 + [560]) + [40]))) = *($8)
	*($8) = [0]
	*($5 + [168]) = $6
	$6 = ($6 + [16])
	*($5 + [176]) = $6
	*($5 + [172]) = $6
	*($5 + [560]) = *($5 + [376])
	*($5 + [568]) = *($5 + [384])
	*($5 + [576]) = *($5 + [392])
	*($5 + [592]) = *($5 + [408])
	*($5 + [408]) = (int_64)0
	CALL $7($7, (int_64)-3617168760277827584, ($5 + [168]), ($5 + [560]))
	if ( ((*($5 + [592]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$40
	$6 = *($5 + [168])
	if ( ($6 == 0) ){ goto $label$41 }
	*($5 + [172]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$41
	if ( ((*(($5 + [408])) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($5 + [416])))
	
.LABEL $label$42
	*(($8 = (($5 + [344]) + [8]))) = *((($5 + [504]) + [8]))
	*($5 + [344]) = *($5 + [504])
	$7 = *($0)
	CALL $75((($5 + [344]) + [16]), ($5 + [240]))
	*(($6 = CALL _Znwj([16]))) = $7
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [560]) + [8])) = *($8)
	$8 = (($5 + [344]) + [24])
	*(($3 = (($5 + [560]) + [24]))) = *($8)
	*($8) = [0]
	*($5 + [168]) = $6
	$6 = ($6 + [16])
	*($5 + [176]) = $6
	*($5 + [172]) = $6
	*($5 + [560]) = *($5 + [344])
	*($5 + [576]) = *($5 + [360])
	*($5 + [360]) = (int_64)0
	CALL $18($7, (int_64)-4993669930013425664, ($5 + [168]), ($5 + [560]))
	if ( ((*($5 + [576]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$43
	$6 = *($5 + [168])
	if ( ($6 == 0) ){ goto $label$44 }
	*($5 + [172]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$44
	if ( ((*(($5 + [360])) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*(($5 + [368])))
	
.LABEL $label$45
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [248])))
	
.LABEL $label$14
	$7 = *((($5 + [504]) + [8]))
	*((($5 + [328]) + [8])) = $7
	*(($5 + [8])) = $7
	$7 = *($5 + [504])
	*($5) = $7
	*($5 + [328]) = $7
	CALL $30($0, $1, $5)
	$8 = [0]
	*($5 + [320]) = [0]
	*($5 + [312]) = (int_64)0
	CALL $17(($5 + [608]), ($5 + [504]))
	$6 = CALL $84(($5 + [608]), [0], [9141])
	$3 = ($6 + [8])
	*((($5 + [240]) + [8])) = *($3)
	*($5 + [240]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [240]), [8816])
	$3 = ($6 + [8])
	*((($5 + [168]) + [8])) = *($3)
	*($5 + [168]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$49 }
	$3 = *([0] + [10176])
	$7 = $1
	
.LOOP $label$51:
	*((($5 + [560]) + ($6 = $8))) = *(($3 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$50 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$51 }
	
.LABEL $label$50
	*(($5 + [304])) = [0]
	*($5 + [296]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$48 }
	*($5 + [296]) = ($8 << [1])
	$3 = (($5 + [296]) | [1])
	goto $label$47 
	
.LABEL $label$49
	*((($5 + [296]) + [8])) = [0]
	*($5 + [296]) = (int_64)0
	*($5 + [296]) = [0]
	$6 = (($5 + [296]) | [1])
	$8 = $6
	goto $label$46 
	
.LABEL $label$48
	$10 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($10)
	*($5 + [296]) = ($10 | [1])
	*($5 + [304]) = $3
	*($5 + [300]) = $8
	
.LABEL $label$47
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$52:
	*(($3 + $6)) = *((($5 + [560]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$52 }
	$8 = ($3 + $8)
	$6 = (($5 + [296]) | [1])
	
.LABEL $label$46
	*($8) = [0]
	$8 = *($5 + [296])
	$3 = ($8 & [1])
	$6 = CALL $82(($5 + [168]), ( *($5 + [304]) ? $6 : $3 ), ( *($5 + [300]) ? uint_32($8 >> [1]) : $3 ))
	$8 = ($6 + [8])
	*((($5 + [560]) + [8])) = *($8)
	*($5 + [560]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [560]), [8818])
	$8 = *($6 + [4])
	$3 = *($6)
	*($6) = (int_64)0
	$10 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [312]) & [1]) ){ goto $label$54 }
	*($5 + [312]) = [0]
	goto $label$53 
	
.LABEL $label$54
	*(*((($5 + [312]) + [8]))) = [0]
	*($5 + [316]) = [0]
	
.LABEL $label$53
	CALL $77(($5 + [312]), [0])
	*(($5 + [320])) = $10
	*($5 + [316]) = $8
	*($5 + [312]) = $3
	if ( (*($5 + [560]) & [1]) ){ goto $label$63 }
	if ( (*($5 + [296]) & [1]) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	CALL _ZdlPv(*($5 + [568]))
	if ( ((*($5 + [296]) & [1]) == 0) ){ goto $label$61 }
	
.LABEL $label$62
	CALL _ZdlPv(*(($5 + [304])))
	$6 = [1]
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$6 = [1]
	if ( (*($5 + [168]) & [1]) ){ goto $label$59 }
	
.LABEL $label$60
	if ( (*($5 + [240]) & $6) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	CALL _ZdlPv(*($5 + [176]))
	if ( ((*($5 + [240]) & $6) == 0) ){ goto $label$57 }
	
.LABEL $label$58
	CALL _ZdlPv(*($5 + [248]))
	if ( (*($5 + [608]) & [1]) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	if ( ((*($5 + [608]) & [1]) == 0) ){ goto $label$55 }
	
.LABEL $label$56
	CALL _ZdlPv(*($5 + [616]))
	
.LABEL $label$55
	$7 = *($0)
	*(($5 + [264])) = [0]
	*($5 + [568]) = (int_64)3617214756542218240
	*($5 + [560]) = $7
	*($5 + [256]) = (int_64)0
	$6 = CALL $94([9189])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$71 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$74 }
	*($5 + [256]) = ($6 << [1])
	$8 = (($5 + [256]) | [1])
	if ( $6 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	$3 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($3)
	*($5 + [256]) = ($3 | [1])
	*($5 + [264]) = $8
	*($5 + [260]) = $6
	
.LABEL $label$73
	CALL memcpy($8, [9189], $6)
	
.LABEL $label$72
	*(($8 + $6)) = [0]
	CALL $75(($5 + [268]), ($5 + [312]))
	*($5 + [288]) = $2
	*($5 + [280]) = $1
	CALL $23($7, ($5 + [560]), ($5 + [256]))
	if ( ((*($5 + [268]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*(($5 + [276])))
	
.LABEL $label$75
	if ( ((*($5 + [256]) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*($5 + [264]))
	
.LABEL $label$76
	$7 = (int_64)0
	*($5 + [248]) = (int_64)0
	*($5 + [240]) = *($5 + [504])
	$6 = CALL $94([8687])
	if ( ($6 <= [8]) ){ goto $label$79 }
	CALL eosio_assert([0], [10053])
	goto $label$78 
	
.LABEL $label$79
	if ( ($6 == 0) ){ goto $label$77 }
	
.LABEL $label$78
	$7 = (int_64)0
	
.LOOP $label$80:
	$8 = *(($6 + [8686]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$81 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$81
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$80 }
	$7 = ((int_64)$7 << (int_64)8)
	
.LABEL $label$77
	*((($5 + [240]) + [8])) = ((int_64)$7 | (int_64)4)
	$8 = [0]
	*($5 + [304]) = [0]
	*($5 + [296]) = (int_64)0
	CALL $17(($5 + [224]), ($5 + [240]))
	$6 = CALL $84(($5 + [224]), [0], [9205])
	$3 = ($6 + [8])
	*((($5 + [608]) + [8])) = *($3)
	*($5 + [608]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [608]), [8816])
	$3 = ($6 + [8])
	*((($5 + [168]) + [8])) = *($3)
	*($5 + [168]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$85 }
	$3 = *([0] + [10176])
	$7 = $1
	
.LOOP $label$87:
	*((($5 + [560]) + ($6 = $8))) = *(($3 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$86 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$87 }
	
.LABEL $label$86
	*(($5 + [216])) = [0]
	*($5 + [208]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$84 }
	*($5 + [208]) = ($8 << [1])
	$3 = (($5 + [208]) | [1])
	goto $label$83 
	
.LABEL $label$85
	*((($5 + [208]) + [8])) = [0]
	*($5 + [208]) = (int_64)0
	*($5 + [208]) = [0]
	$6 = (($5 + [208]) | [1])
	$8 = $6
	goto $label$82 
	
.LABEL $label$84
	$10 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($10)
	*($5 + [208]) = ($10 | [1])
	*($5 + [216]) = $3
	*($5 + [212]) = $8
	
.LABEL $label$83
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$88:
	*(($3 + $6)) = *((($5 + [560]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$88 }
	$8 = ($3 + $8)
	$6 = (($5 + [208]) | [1])
	
.LABEL $label$82
	*($8) = [0]
	$8 = *($5 + [208])
	$3 = ($8 & [1])
	$6 = CALL $82(($5 + [168]), ( *($5 + [216]) ? $6 : $3 ), ( *($5 + [212]) ? uint_32($8 >> [1]) : $3 ))
	$8 = ($6 + [8])
	*((($5 + [560]) + [8])) = *($8)
	*($5 + [560]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [560]), [8818])
	$8 = *($6 + [4])
	$3 = *($6)
	*($6) = (int_64)0
	$10 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [296]) & [1]) ){ goto $label$90 }
	*($5 + [296]) = [0]
	goto $label$89 
	
.LABEL $label$90
	*(*((($5 + [296]) + [8]))) = [0]
	*($5 + [300]) = [0]
	
.LABEL $label$89
	CALL $77(($5 + [296]), [0])
	*(($5 + [304])) = $10
	*($5 + [300]) = $8
	*($5 + [296]) = $3
	if ( (*($5 + [560]) & [1]) ){ goto $label$92 }
	if ( (*($5 + [208]) & [1]) ){ goto $label$91 }
	goto $label$70 
	
.LABEL $label$92
	CALL _ZdlPv(*($5 + [568]))
	if ( ((*($5 + [208]) & [1]) == 0) ){ goto $label$70 }
	
.LABEL $label$91
	CALL _ZdlPv(*(($5 + [216])))
	$6 = [1]
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$71
	CALL $74(($5 + [256]))
	
.LABEL $label$70
	$6 = [1]
	if ( (*($5 + [168]) & [1]) ){ goto $label$68 }
	
.LABEL $label$69
	if ( (*($5 + [608]) & $6) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	CALL _ZdlPv(*($5 + [176]))
	if ( ((*($5 + [608]) & $6) == 0) ){ goto $label$66 }
	
.LABEL $label$67
	CALL _ZdlPv(*($5 + [616]))
	if ( (*($5 + [224]) & [1]) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$64 }
	
.LABEL $label$65
	CALL _ZdlPv(*($5 + [232]))
	
.LABEL $label$64
	$7 = *($0)
	*((($5 + [168]) + [16])) = *(($5 + [248]))
	*($5 + [168]) = $1
	*($5 + [176]) = *($5 + [240])
	CALL $75((($5 + [168]) + [24]), ($5 + [296]))
	*(($8 = (($5 + [560]) + [24]))) = [0]
	*($5 + [568]) = (int_64)8516769789752901632
	*($5 + [560]) = $7
	*($5 + [576]) = (int_64)0
	*(($6 = CALL _Znwj([16]))) = $7
	*($6 + [8]) = (int_64)3617214756542218240
	$3 = ($6 + [16])
	*($8) = $3
	*(($5 + [580])) = $3
	*($5 + [576]) = $6
	CALL $20(($5 + [588]), ($5 + [168]))
	CALL $21(($5 + [608]), ($5 + [560]))
	$6 = *($5 + [608])
	CALL send_inline($6, (*($5 + [612]) - $6))
	$6 = *($5 + [608])
	if ( ($6 == 0) ){ goto $label$93 }
	*($5 + [612]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$93
	$6 = *($5 + [588])
	if ( ($6 == 0) ){ goto $label$94 }
	*(($5 + [592])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$94
	$6 = *($5 + [576])
	if ( ($6 == 0) ){ goto $label$95 }
	*(($5 + [580])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$95
	if ( ((*($5 + [192]) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*(($5 + [200])))
	
.LABEL $label$96
	$8 = [0]
	*($5 + [176]) = [0]
	*($5 + [168]) = (int_64)0
	CALL $17(($5 + [104]), ($5 + [504]))
	$6 = CALL $84(($5 + [104]), [0], [9250])
	$3 = ($6 + [8])
	*((($5 + [120]) + [8])) = *($3)
	*($5 + [120]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [120]), [8893])
	$3 = ($6 + [8])
	*((($5 + [136]) + [8])) = *($3)
	*($5 + [136]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	CALL $17(($5 + [88]), ($5 + [504]))
	$6 = *($5 + [88])
	$3 = ($6 & [1])
	$6 = CALL $82(($5 + [136]), ( *($5 + [96]) ? (($5 + [88]) | [1]) : $3 ), ( *($5 + [92]) ? uint_32($6 >> [1]) : $3 ))
	$3 = ($6 + [8])
	*((($5 + [152]) + [8])) = *($3)
	*($5 + [152]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [152]), [8907])
	$3 = ($6 + [8])
	*((($5 + [208]) + [8])) = *($3)
	*($5 + [208]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	CALL $17(($5 + [72]), ($5 + [240]))
	$6 = *($5 + [72])
	$3 = ($6 & [1])
	$6 = CALL $82(($5 + [208]), ( *($5 + [80]) ? (($5 + [72]) | [1]) : $3 ), ( *($5 + [76]) ? uint_32($6 >> [1]) : $3 ))
	$3 = ($6 + [8])
	*((($5 + [224]) + [8])) = *($3)
	*($5 + [224]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [224]), [8816])
	$3 = ($6 + [8])
	*((($5 + [608]) + [8])) = *($3)
	*($5 + [608]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$100 }
	$3 = *([0] + [10176])
	$7 = $1
	
.LOOP $label$102:
	*((($5 + [560]) + ($6 = $8))) = *(($3 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$101 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$102 }
	
.LABEL $label$101
	*(($5 + [64])) = [0]
	*($5 + [56]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$99 }
	*($5 + [56]) = ($8 << [1])
	$3 = (($5 + [56]) | [1])
	goto $label$98 
	
.LABEL $label$100
	*((($5 + [56]) + [8])) = [0]
	*($5 + [56]) = (int_64)0
	*($5 + [56]) = [0]
	$6 = (($5 + [56]) | [1])
	$8 = $6
	goto $label$97 
	
.LABEL $label$99
	$10 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($10)
	*($5 + [56]) = ($10 | [1])
	*($5 + [64]) = $3
	*($5 + [60]) = $8
	
.LABEL $label$98
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$103:
	*(($3 + $6)) = *((($5 + [560]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$103 }
	$8 = ($3 + $8)
	$6 = (($5 + [56]) | [1])
	
.LABEL $label$97
	*($8) = [0]
	$8 = *($5 + [56])
	$3 = ($8 & [1])
	$6 = CALL $82(($5 + [608]), ( *($5 + [64]) ? $6 : $3 ), ( *($5 + [60]) ? uint_32($8 >> [1]) : $3 ))
	$8 = ($6 + [8])
	*((($5 + [560]) + [8])) = *($8)
	*($5 + [560]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [560]), [8818])
	$8 = *($6 + [4])
	$3 = *($6)
	*($6) = (int_64)0
	$10 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [168]) & [1]) ){ goto $label$105 }
	*($5 + [168]) = [0]
	goto $label$104 
	
.LABEL $label$105
	*(*((($5 + [168]) + [8]))) = [0]
	*($5 + [172]) = [0]
	
.LABEL $label$104
	CALL $77(($5 + [168]), [0])
	*(($5 + [176])) = $10
	*($5 + [172]) = $8
	*($5 + [168]) = $3
	if ( (*($5 + [560]) & [1]) ){ goto $label$126 }
	if ( (*($5 + [56]) & [1]) ){ goto $label$125 }
	goto $label$124 
	
.LABEL $label$126
	CALL _ZdlPv(*($5 + [568]))
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$124 }
	
.LABEL $label$125
	CALL _ZdlPv(*(($5 + [64])))
	$6 = [1]
	if ( ((*($5 + [608]) & [1]) == 0) ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$124
	$6 = [1]
	if ( (*($5 + [608]) & [1]) ){ goto $label$122 }
	
.LABEL $label$123
	if ( (*($5 + [224]) & $6) ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$122
	CALL _ZdlPv(*($5 + [616]))
	if ( ((*($5 + [224]) & $6) == 0) ){ goto $label$120 }
	
.LABEL $label$121
	CALL _ZdlPv(*($5 + [232]))
	$6 = [1]
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$6 = [1]
	if ( (*($5 + [72]) & [1]) ){ goto $label$118 }
	
.LABEL $label$119
	if ( (*($5 + [208]) & $6) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$118
	CALL _ZdlPv(*(($5 + [80])))
	if ( ((*($5 + [208]) & $6) == 0) ){ goto $label$116 }
	
.LABEL $label$117
	CALL _ZdlPv(*($5 + [216]))
	$6 = [1]
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$116
	$6 = [1]
	if ( (*($5 + [152]) & [1]) ){ goto $label$114 }
	
.LABEL $label$115
	if ( (*($5 + [88]) & $6) ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$114
	CALL _ZdlPv(*($5 + [160]))
	if ( ((*($5 + [88]) & $6) == 0) ){ goto $label$112 }
	
.LABEL $label$113
	CALL _ZdlPv(*(($5 + [96])))
	$6 = [1]
	if ( ((*($5 + [136]) & [1]) == 0) ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$112
	$6 = [1]
	if ( (*($5 + [136]) & [1]) ){ goto $label$110 }
	
.LABEL $label$111
	if ( (*($5 + [120]) & $6) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$110
	CALL _ZdlPv(*($5 + [144]))
	if ( ((*($5 + [120]) & $6) == 0) ){ goto $label$108 }
	
.LABEL $label$109
	CALL _ZdlPv(*($5 + [128]))
	if ( (*($5 + [104]) & [1]) ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$108
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$106 }
	
.LABEL $label$107
	CALL _ZdlPv(*($5 + [112]))
	
.LABEL $label$106
	$7 = *($0)
	*(($5 + [24])) = [0]
	*($5 + [568]) = (int_64)3617214756542218240
	*($5 + [560]) = $7
	*($5 + [16]) = (int_64)0
	$6 = CALL $94([9264])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$136 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$139 }
	*($5 + [16]) = ($6 << [1])
	$8 = (($5 + [16]) | [1])
	if ( $6 ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$139
	$3 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($3)
	*($5 + [16]) = ($3 | [1])
	*($5 + [24]) = $8
	*($5 + [20]) = $6
	
.LABEL $label$138
	CALL memcpy($8, [9264], $6)
	
.LABEL $label$137
	*(($8 + $6)) = [0]
	CALL $75(($5 + [28]), ($5 + [168]))
	*($5 + [48]) = $1
	*($5 + [40]) = $1
	CALL $24($7, ($5 + [560]), ($5 + [16]))
	if ( (*($5 + [28]) & [1]) ){ goto $label$141 }
	if ( (*($5 + [16]) & [1]) ){ goto $label$140 }
	goto $label$135 
	
.LABEL $label$141
	CALL _ZdlPv(*(($5 + [36])))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$135 }
	
.LABEL $label$140
	CALL _ZdlPv(*($5 + [24]))
	$6 = [1]
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$134 }
	goto $label$133 
	
.LABEL $label$136
	CALL $74(($5 + [16]))
	
.LABEL $label$135
	$6 = [1]
	if ( (*($5 + [168]) & [1]) ){ goto $label$133 }
	
.LABEL $label$134
	if ( (*($5 + [296]) & $6) ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$133
	CALL _ZdlPv(*(($5 + [176])))
	if ( ((*($5 + [296]) & $6) == 0) ){ goto $label$131 }
	
.LABEL $label$132
	CALL _ZdlPv(*(($5 + [304])))
	if ( ((*($5 + [312]) & [1]) == 0) ){ goto $label$130 }
	goto $label$129 
	
.LABEL $label$131
	if ( (*($5 + [312]) & [1]) ){ goto $label$129 }
	
.LABEL $label$130
	$3 = *($5 + [544])
	if ( $3 ){ goto $label$128 }
	goto $label$127 
	
.LABEL $label$129
	CALL _ZdlPv(*(($5 + [320])))
	$3 = *($5 + [544])
	if ( ($3 == 0) ){ goto $label$127 }
	
.LABEL $label$128
	$10 = ($5 + [548])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$143 }
	
.LOOP $label$144:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$145 }
	CALL _ZdlPv($8)
	
.LABEL $label$145
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$144 }
	$6 = *(($5 + [544]))
	goto $label$142 
	
.LABEL $label$143
	$6 = $3
	
.LABEL $label$142
	*($10) = $3
	CALL _ZdlPv($6)
	$global$0 = ($5 + [624])
	return 
	
.LABEL $label$127
	$global$0 = ($5 + [624])
	(unreachable)
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [8]))
	*($2 + [32]) = *($1)
	$1 = CALL $75(($2 + [16]), ($1 + [16]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($5 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$4 = CALL $75(($2 + [64]), $1)
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $42($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10213])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10213])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $57(CALL $56($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [24])
	$4 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-24] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $42($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2 + [8]) = $3
	*($2 + [16]) = $4
	$0 = ($4 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10213])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10213])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [24]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)($0 + [-16]) > (int_32)[7]), [10213])
	CALL memcpy(($3 + [16]), ($2 + [24]), [8])
	*($2 + [12]) = ($3 + [24])
	CALL $59(($2 + [8]), $6)
	$global$0 = ($2 + [32])
}

void .FUNC $23 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = CALL _Znwj([16])
	$5 = *(($1 + [8]))
	$6 = *($2 + [12 align=4])
	$7 = *($1)
	*($2 + [12]) = [0]
	$1 = ($2 + [8])
	$8 = *($1)
	*($1) = [0]
	$9 = *($2)
	*($2) = (int_64)0
	*(($4 + [8])) = $5
	*($4) = $7
	*((($3 + [8]) + [8])) = $8
	$1 = ($2 + [20])
	*(($8 = (($3 + [8]) + [20]))) = *($1)
	*($3 + [48]) = $4
	$4 = ($4 + [16])
	*($3 + [56]) = $4
	*($3 + [52]) = $4
	*($3 + [8]) = $9
	*($3 + [20 align=4]) = $6
	*(($2 + [16])) = [0]
	*($1) = [0]
	*($3 + [32]) = *($2 + [24])
	*($3 + [40]) = *($2 + [32])
	CALL $27($0, (int_64)4982871653160583168, ($3 + [48]), ($3 + [8]))
	if ( (*($3 + [20]) & [1]) ){ goto $label$5 }
	if ( (*($3 + [8]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($8))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [16]))
	$2 = *($3 + [48])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = *($3 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [52]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($2 + [8])
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)-1414931397474254848, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $25(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [10376])
	CALL eosio_assert([1], [10833])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [10506])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [10552])
	$1 = *($0 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [10662])
	$6 = ((int_64)*($0) + (int_64)*($2))
	*($0) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10705])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [10724])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [10603])
	CALL eosio_assert([1], [10213])
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [10213])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($4 + [48]), [16])
	$0 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$3 }
	*($0) = ((int_64)$1 + (int_64)1)
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [10455])
	*(($0 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($0 + [8]) = *(($2 + [8]))
	*($0) = *($2)
	CALL eosio_assert([1], [10213])
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [10213])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)-1414931397474254848, $3, $1), ($4 + [48]), [16]
	*($0 + [20]) = $7)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$5
	*($4 + [72]) = $0
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [68]) = $7
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $7
	*($4 + [72]) = [0]
	*($2) = $0
	*($8) = ($2 + [24])
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $26(($4 + [32]), ($4 + [72]), ($4 + [48]), ($4 + [68]))
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10427])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $97($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10450])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10450])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $100($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $24 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = CALL _Znwj([16])
	$5 = *(($1 + [8]))
	$6 = *($2 + [12 align=4])
	$7 = *($1)
	*($2 + [12]) = [0]
	$1 = ($2 + [8])
	$8 = *($1)
	*($1) = [0]
	$9 = *($2)
	*($2) = (int_64)0
	*(($4 + [8])) = $5
	*($4) = $7
	*((($3 + [8]) + [8])) = $8
	$1 = ($2 + [20])
	*(($8 = (($3 + [8]) + [20]))) = *($1)
	*($3 + [48]) = $4
	$4 = ($4 + [16])
	*($3 + [56]) = $4
	*($3 + [52]) = $4
	*($3 + [8]) = $9
	*($3 + [20 align=4]) = $6
	*(($2 + [16])) = [0]
	*($1) = [0]
	*($3 + [32]) = *($2 + [24])
	*($3 + [40]) = *($2 + [32])
	CALL $27($0, (int_64)-5003315193367756800, ($3 + [48]), ($3 + [8]))
	if ( (*($3 + [20]) & [1]) ){ goto $label$5 }
	if ( (*($3 + [8]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($8))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [16]))
	$2 = *($3 + [48])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = *($3 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [52]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $27 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	CALL $60(($4 + [52]), $3)
	CALL $21(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $86(($4 + [8]))
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $100($0)
	
.LABEL $label$1
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$4
	$5 = *($4 + [8])
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = ($4 + [12])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = ($7 + [-24])
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($7 + [-16])))
	
.LABEL $label$9
	$7 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$8 }
	$1 = *(($4 + [8]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $5
	
.LABEL $label$6
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$5
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10868])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $42($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10450])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $97($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10872])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $97($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10868])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[24])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $63($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$2 = ($6 + ((int_32)$7 * (int_32)[24]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-24])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [-16])))
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $2
	$3 = $2
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	
.LOOP $label$9:
	CALL $52($0, $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - *($2)) > (uint_32)[7]), [10450])
	CALL memcpy(($7 + [16]), *($2), [8])
	*($2) = (*($2) + [8])
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-16] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [12])
	$4 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = ($3 - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [12])
	
.LOOP $label$2:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $42($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	
.LABEL $label$3
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	CALL $59($2, $1)
	CALL $59($2, $6)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [10213])
	CALL memcpy(*($2 + [4]), ($1 + [24]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((int_32)(*($2 + [8]) - $3) > (int_32)[7]), [10213])
	CALL memcpy(*($2 + [4]), ($1 + [32]), [8])
	$global$0 = ($2 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[24])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$3 }
	$3 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$4 = CALL _Znwj(((int_32)$3 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($3 + [8]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*($4) = [0]
	$3 = (*($2) + [24])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $86($0)
	
.LABEL $label$2
	$7 = ($4 + ((int_32)$3 * (int_32)[24]))
	$5 = ($4 + ((int_32)$5 * (int_32)[24]))
	$3 = $5
	
.LOOP $label$8:
	*(($2 = ($3 + [8]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$8 = ($4 + ((int_32)$6 * (int_32)[24]))
	$1 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$10 }
	$10 = ($1 - $9)
	$3 = [0]
	
.LOOP $label$11:
	$2 = ($9 + $3)
	$4 = ($2 + [-16])
	*((($1 = ($5 + $3)) + [-16])) = *($4)
	$6 = ($2 + [-24])
	*(($1 + [-24])) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	*(($1 + [-8])) = *(($2 + [-8]))
	$3 = ($3 + [-24])
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$11 }
	$5 = ($5 + $3)
	$1 = *(($0 + [4]))
	$2 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$2 = $1
	
.LABEL $label$9
	*($0) = $5
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($1 + [-24])
	if ( ((*($3) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($1 + [-16])))
	
.LABEL $label$14
	$1 = $3
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$1 }
	CALL _ZdlPv($2)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $65(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19276])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19084]
	$3 = (((int_32)$1 * (int_32)[12]) + [19084])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [13] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $91($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $91($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $91($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $91($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19296]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $91($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $91($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $91($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $88 (int_32 $0)
{
}

int_32 .FUNC $87 ()
{
	return [10876]
}

void .FUNC $86 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $85 (int_32 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $79(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $93(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8691], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $79(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $79(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $83($0, $1, $2, CALL $94($2))
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $76($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $76($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $94($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $76($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $100($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $95(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10872])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $95(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $74 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$6
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$7 }
	$5 = ($3 + [12])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($6 + [-24])
	if ( ((*($7) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [-16])))
	
.LABEL $label$11
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$10 }
	$7 = *(($3 + [8]))
	goto $label$8 
	
.LABEL $label$9
	$7 = $4
	
.LABEL $label$8
	*($5) = $4
	CALL _ZdlPv($7)
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($7)
	
.LABEL $label$1
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_32 $11
	$5 = ($global$0 - [368])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	$7 = CALL $94([9759])
	if ( ($7 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [10053])
	goto $label$4 
	
.LABEL $label$5
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$8 = *(($7 + [9758]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$6 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$2 
	
.LABEL $label$3
	$6 = (int_64)0
	
.LABEL $label$2
	CALL eosio_assert((uint_64)(((int_64)*($3 + [8]) ^ (int_64)$6) <= (int_64)256), [9763])
	*(($5 + [344])) = [0]
	*($5 + [320]) = (int_64)-7190695464890391904
	*($5 + [312]) = (int_64)-7190695464890391904
	*($5 + [328]) = (int_64)-1
	*($5 + [336]) = (int_64)0
	$9 = CALL $38(($5 + [312]), CALL $fimport$2((int_64)-7190695464890391904, (int_64)-7190695464890391904, (int_64)-6499669907066585088, (int_64)-7201241093365563392))
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)($5 + [312])), [10376])
	CALL eosio_assert(((float_64)*($9 + [24]) > (float_64)(float_64)0), [9793])
	CALL prints([9834])
	CALL printdf(*($9 + [24]))
	*($5 + [304]) = (int_64)0
	$10 = ((float_64)((float_64)((float_64)*($9 + [24]) / (float_64)(float_64)0.2) * (float_64)(CASTING float_64)(int_64 *($3))) * (float_64)(float_64)0.2)
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$6 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$9
	$6 = (Rounds 0)($10)
	
.LABEL $label$8
	*($5 + [296]) = $6
	$7 = CALL $94([8492])
	if ( ($7 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [10053])
	goto $label$12 
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$6 = (int_64)0
	
.LOOP $label$14:
	$8 = *(($7 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$15
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$14 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$10 
	
.LABEL $label$11
	$6 = (int_64)0
	
.LABEL $label$10
	*(($7 = ($5 + [304]))) = ((int_64)$6 | (int_64)4)
	$6 = *($0)
	*((($5 + [216]) + [16])) = *($7)
	*($5 + [216]) = $1
	*($5 + [224]) = *($5 + [296])
	CALL $75((($5 + [216]) + [24]), $4)
	*(($8 = (($5 + [256]) + [24]))) = [0]
	*($5 + [264]) = (int_64)8516769789752901632
	*($5 + [256]) = $6
	*($5 + [272]) = (int_64)0
	*(($7 = CALL _Znwj([16]))) = $6
	*($7 + [8]) = (int_64)3617214756542218240
	$11 = ($7 + [16])
	*($8) = $11
	*(($5 + [276])) = $11
	*($5 + [272]) = $7
	CALL $20(($5 + [284]), ($5 + [216]))
	CALL $21(($5 + [200]), ($5 + [256]))
	$7 = *($5 + [200])
	CALL send_inline($7, (*($5 + [204]) - $7))
	$7 = *($5 + [200])
	if ( ($7 == 0) ){ goto $label$16 }
	*($5 + [204]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$7 = *($5 + [284])
	if ( ($7 == 0) ){ goto $label$17 }
	*(($5 + [288])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$7 = *($5 + [272])
	if ( ($7 == 0) ){ goto $label$18 }
	*(($5 + [276])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($5 + [248])))
	
.LABEL $label$19
	$6 = (int_64)0
	*($5 + [208]) = (int_64)0
	*($5 + [200]) = ((int_64)*($5 + [296]) << (int_64)2)
	$7 = CALL $94([8687])
	if ( ($7 <= [8]) ){ goto $label$22 }
	CALL eosio_assert([0], [10053])
	goto $label$21 
	
.LABEL $label$22
	if ( ($7 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$6 = (int_64)0
	
.LOOP $label$23:
	$8 = *(($7 + [8686]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$24 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$24
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$23 }
	$6 = ((int_64)$6 << (int_64)8)
	
.LABEL $label$20
	*(($7 = ($5 + [208]))) = ((int_64)$6 | (int_64)4)
	$6 = *($0)
	*((($5 + [216]) + [16])) = *($7)
	*($5 + [216]) = $1
	*($5 + [224]) = *($5 + [200])
	CALL $75((($5 + [216]) + [24]), $4)
	*(($8 = (($5 + [256]) + [24]))) = [0]
	*($5 + [264]) = (int_64)8516769789752901632
	*($5 + [256]) = $6
	*($5 + [272]) = (int_64)0
	*(($7 = CALL _Znwj([16]))) = $6
	*($7 + [8]) = (int_64)3617214756542218240
	$4 = ($7 + [16])
	*($8) = $4
	*(($5 + [276])) = $4
	*($5 + [272]) = $7
	CALL $20(($5 + [284]), ($5 + [216]))
	CALL $21(($5 + [352]), ($5 + [256]))
	$7 = *($5 + [352])
	CALL send_inline($7, (*($5 + [356]) - $7))
	$7 = *($5 + [352])
	if ( ($7 == 0) ){ goto $label$25 }
	*($5 + [356]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$25
	$7 = *($5 + [284])
	if ( ($7 == 0) ){ goto $label$26 }
	*(($5 + [288])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$26
	$7 = *($5 + [272])
	if ( ($7 == 0) ){ goto $label$27 }
	*(($5 + [276])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$27
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($5 + [248])))
	
.LABEL $label$28
	*($5 + [224]) = [0]
	*($5 + [216]) = (int_64)0
	CALL $17(($5 + [88]), $3)
	$7 = CALL $84(($5 + [88]), [0], [8881])
	$8 = ($7 + [8])
	*((($5 + [104]) + [8])) = *($8)
	*($5 + [104]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	$7 = CALL $81(($5 + [104]), [8816])
	$8 = ($7 + [8])
	*((($5 + [120]) + [8])) = *($8)
	*($5 + [120]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	CALL $85(($5 + [72]), *(($9 + [24])))
	$7 = *($5 + [72])
	$8 = ($7 & [1])
	$7 = CALL $82(($5 + [120]), ( *($5 + [80]) ? (($5 + [72]) | [1]) : $8 ), ( *($5 + [76]) ? uint_32($7 >> [1]) : $8 ))
	$8 = ($7 + [8])
	*((($5 + [136]) + [8])) = *($8)
	*($5 + [136]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	$7 = CALL $81(($5 + [136]), [9845])
	$8 = ($7 + [8])
	*((($5 + [152]) + [8])) = *($8)
	*($5 + [152]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	$7 = CALL $81(($5 + [152]), [9851])
	$8 = ($7 + [8])
	*((($5 + [168]) + [8])) = *($8)
	*($5 + [168]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	CALL $17(($5 + [56]), ($5 + [200]))
	$7 = *($5 + [56])
	$8 = ($7 & [1])
	$7 = CALL $82(($5 + [168]), ( *($5 + [64]) ? (($5 + [56]) | [1]) : $8 ), ( *($5 + [60]) ? uint_32($7 >> [1]) : $8 ))
	$8 = ($7 + [8])
	*((($5 + [184]) + [8])) = *($8)
	*($5 + [184]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	$7 = CALL $81(($5 + [184]), [9867])
	$8 = ($7 + [8])
	*((($5 + [352]) + [8])) = *($8)
	*($5 + [352]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	CALL $17(($5 + [40]), ($5 + [296]))
	$7 = *($5 + [40])
	$8 = ($7 & [1])
	$7 = CALL $82(($5 + [352]), ( *($5 + [48]) ? (($5 + [40]) | [1]) : $8 ), ( *($5 + [44]) ? uint_32($7 >> [1]) : $8 ))
	$8 = ($7 + [8])
	*((($5 + [256]) + [8])) = *($8)
	*($5 + [256]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	$7 = CALL $81(($5 + [256]), [9867])
	$8 = *($7 + [4])
	$3 = *($7)
	*($7) = (int_64)0
	$9 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( (*($5 + [216]) & [1]) ){ goto $label$30 }
	*($5 + [216]) = [0]
	goto $label$29 
	
.LABEL $label$30
	*(*((($5 + [216]) + [8]))) = [0]
	*($5 + [220]) = [0]
	
.LABEL $label$29
	CALL $77(($5 + [216]), [0])
	*(($5 + [224])) = $9
	*($5 + [220]) = $8
	*($5 + [216]) = $3
	if ( (*($5 + [256]) & [1]) ){ goto $label$53 }
	if ( (*($5 + [40]) & [1]) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	CALL _ZdlPv(*($5 + [264]))
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$51 }
	
.LABEL $label$52
	CALL _ZdlPv(*(($5 + [48])))
	$7 = [1]
	if ( ((*($5 + [352]) & [1]) == 0) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$7 = [1]
	if ( (*($5 + [352]) & [1]) ){ goto $label$49 }
	
.LABEL $label$50
	if ( (*($5 + [184]) & $7) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	CALL _ZdlPv(*($5 + [360]))
	if ( ((*($5 + [184]) & $7) == 0) ){ goto $label$47 }
	
.LABEL $label$48
	CALL _ZdlPv(*($5 + [192]))
	$7 = [1]
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$7 = [1]
	if ( (*($5 + [56]) & [1]) ){ goto $label$45 }
	
.LABEL $label$46
	if ( (*($5 + [168]) & $7) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	CALL _ZdlPv(*(($5 + [64])))
	if ( ((*($5 + [168]) & $7) == 0) ){ goto $label$43 }
	
.LABEL $label$44
	CALL _ZdlPv(*($5 + [176]))
	$7 = [1]
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$7 = [1]
	if ( (*($5 + [152]) & [1]) ){ goto $label$41 }
	
.LABEL $label$42
	if ( (*($5 + [136]) & $7) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	CALL _ZdlPv(*($5 + [160]))
	if ( ((*($5 + [136]) & $7) == 0) ){ goto $label$39 }
	
.LABEL $label$40
	CALL _ZdlPv(*($5 + [144]))
	$7 = [1]
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$7 = [1]
	if ( (*($5 + [72]) & [1]) ){ goto $label$37 }
	
.LABEL $label$38
	if ( (*($5 + [120]) & $7) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	CALL _ZdlPv(*(($5 + [80])))
	if ( ((*($5 + [120]) & $7) == 0) ){ goto $label$35 }
	
.LABEL $label$36
	CALL _ZdlPv(*($5 + [128]))
	$7 = [1]
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$7 = [1]
	if ( (*($5 + [104]) & [1]) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ((*($5 + [88]) & $7) == 0) ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$33
	CALL _ZdlPv(*($5 + [112]))
	if ( ((*($5 + [88]) & $7) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*($5 + [96]))
	
.LABEL $label$31
	$6 = *($0)
	*(($5 + [8])) = [0]
	*($5 + [264]) = (int_64)3617214756542218240
	*($5 + [256]) = $6
	*($5) = (int_64)0
	$7 = CALL $94([9877])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$57 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$60 }
	*($5) = ($7 << [1])
	$8 = ($5 | [1])
	if ( $7 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$0 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($0)
	*($5) = ($0 | [1])
	*($5 + [8]) = $8
	*($5 + [4]) = $7
	
.LABEL $label$59
	CALL memcpy($8, [9877], $7)
	
.LABEL $label$58
	*(($8 + $7)) = [0]
	CALL $75(($5 + [12]), ($5 + [216]))
	*($5 + [32]) = $2
	*($5 + [24]) = $1
	CALL $24($6, ($5 + [256]), $5)
	if ( (*($5 + [12]) & [1]) ){ goto $label$62 }
	if ( (*($5) & [1]) ){ goto $label$61 }
	goto $label$56 
	
.LABEL $label$62
	CALL _ZdlPv(*(($5 + [20])))
	if ( ((*($5) & [1]) == 0) ){ goto $label$56 }
	
.LABEL $label$61
	CALL _ZdlPv(*($5 + [8]))
	if ( (*($5 + [216]) & [1]) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	CALL $74($5)
	
.LABEL $label$56
	if ( ((*($5 + [216]) & [1]) == 0) ){ goto $label$54 }
	
.LABEL $label$55
	CALL _ZdlPv(*(($5 + [224])))
	
.LABEL $label$54
	CALL $39(($5 + [336]))
	
.LABEL $label$1
	$global$0 = ($5 + [368])
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $94($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $76($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $76($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $80($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $32 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	CALL $20(($4 + [52]), $3)
	CALL $21(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $86(($4 + [8]))
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	float_64 $13
	$5 = ($global$0 - [608])
	$global$0 = $5
	$6 = CALL $94([8492])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10053])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)*($3 + [8]) ^ (int_64)$7) <= (int_64)256), [9512])
	$7 = CALL publication_time()
	*(($5 + [536])) = [0]
	*($5 + [520]) = (int_64)-1
	*($5 + [528]) = (int_64)0
	$9 = *($0)
	*($5 + [504]) = $9
	*($5 + [512]) = $1
	$10 = ((uint_64)$7 / (uint_64)(int_64)86400000000)
	$6 = CALL db_find_i64($9, $1, (int_64)4921564823608885248, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $19(($5 + [504]), $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($5 + [504])), [10376])
	$9 = ((uint_64)*($6 + [8]) / (uint_64)(int_64)86400000000)
	goto $label$7 
	
.LABEL $label$8
	$9 = (int_64)17917
	
.LABEL $label$7
	CALL eosio_assert(((uint_64)$10 > (uint_64)$9), [9544])
	$9 = *($0)
	*(($6 = CALL _Znwj([16])) + [8]) = (int_64)3617214756542218240
	*($6) = $1
	*($5 + [552]) = $7
	*((($5 + [8]) + [8])) = *($5 + [552])
	*($5 + [544]) = $1
	*($5 + [472]) = $6
	$6 = ($6 + [16])
	*($5 + [480]) = $6
	*($5 + [476]) = $6
	*($5 + [8]) = *($5 + [544])
	CALL $34($9, (int_64)-3075276122146757632, ($5 + [472]), ($5 + [8]))
	$6 = *($5 + [472])
	if ( ($6 == 0) ){ goto $label$9 }
	*($5 + [476]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	*($5 + [496]) = [0]
	$7 = (int_64)0
	*($5 + [488]) = (int_64)0
	*($5 + [480]) = (int_64)0
	*($5 + [472]) = (int_64)0
	CALL $78(($5 + [488]), [8492])
	$11 = ( *($5 + [496]) ? (($5 + [488]) | [1]) : (*($5 + [488]) & [1]) )
	$6 = CALL $94($11)
	if ( ($6 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [10053])
	goto $label$11 
	
.LABEL $label$12
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$7 = (int_64)0
	
.LOOP $label$13:
	$3 = (($11 + $6) + [-1])
	$8 = *($3)
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [10098])
	$8 = *($3)
	
.LABEL $label$14
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$13 }
	
.LABEL $label$10
	$9 = *($0)
	*(($5 + [576])) = [0]
	*($5 + [552]) = $1
	*($5 + [544]) = $9
	*($5 + [560]) = (int_64)-1
	*($5 + [568]) = (int_64)0
	$6 = CALL $13(($5 + [544]), $7, [8573])
	*(($11 = (($5 + [456]) + [8]))) = *(($6 + [8]))
	*($5 + [456]) = *($6)
	$3 = *($5 + [568])
	if ( ($3 == 0) ){ goto $label$15 }
	$12 = ($5 + [572])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$17 }
	
.LOOP $label$18:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$19 }
	CALL _ZdlPv($8)
	
.LABEL $label$19
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$18 }
	$6 = *(($5 + [568]))
	goto $label$16 
	
.LABEL $label$17
	$6 = $3
	
.LABEL $label$16
	*($12) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$15
	*((($5 + [472]) + [8])) = *($11)
	*($5 + [472]) = *($5 + [456])
	CALL eosio_assert(((int_64)*($5 + [472]) != (int_64)0), [9575])
	*($5 + [464]) = (int_64)0
	$13 = ((float_64)(CASTING float_64)(int_64 *($5 + [472])) * (float_64)(float_64)0.002)
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$21 }
	$7 = (int_64)-9223372036854775808
	goto $label$20 
	
.LABEL $label$21
	$7 = (Rounds 0)($13)
	
.LABEL $label$20
	*($5 + [456]) = $7
	$6 = CALL $94([8492])
	if ( ($6 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [10053])
	goto $label$24 
	
.LABEL $label$25
	if ( ($6 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$7 = (int_64)0
	
.LOOP $label$26:
	$8 = *(($6 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$27
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$26 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$22 
	
.LABEL $label$23
	$7 = (int_64)0
	
.LABEL $label$22
	*((($5 + [456]) + [8])) = ((int_64)$7 | (int_64)4)
	*($5 + [448]) = [0]
	*($5 + [440]) = (int_64)0
	CALL $17(($5 + [544]), ($5 + [456]))
	$6 = CALL $84(($5 + [544]), [0], [9597])
	$8 = *($6 + [4])
	$3 = *($6)
	*($6) = (int_64)0
	$11 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [440]) & [1]) ){ goto $label$29 }
	*($5 + [440]) = [0]
	goto $label$28 
	
.LABEL $label$29
	*(*((($5 + [440]) + [8]))) = [0]
	*($5 + [444]) = [0]
	
.LABEL $label$28
	CALL $77(($5 + [440]), [0])
	*((($5 + [440]) + [8])) = $11
	*($5 + [444]) = $8
	*($5 + [440]) = $3
	if ( ((*($5 + [544]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($5 + [552]))
	
.LABEL $label$30
	*(($8 = (($5 + [392]) + [24]))) = *((($5 + [456]) + [8]))
	*($5 + [392]) = $1
	$7 = *($0)
	*($5 + [400]) = $7
	*($5 + [408]) = *($5 + [456])
	CALL $75(($5 + [424]), ($5 + [440]))
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [544]) + [24])) = *($8)
	$8 = (($5 + [392]) + [40])
	*(($3 = (($5 + [544]) + [40]))) = *($8)
	*($8) = [0]
	*($5 + [344]) = $6
	$6 = ($6 + [16])
	*($5 + [352]) = $6
	*($5 + [348]) = $6
	*($5 + [544]) = *($5 + [392])
	*($5 + [552]) = *($5 + [400])
	*($5 + [560]) = *($5 + [408])
	*($5 + [576]) = *($5 + [424])
	*($5 + [424]) = (int_64)0
	CALL $7($7, (int_64)-3617168760277827584, ($5 + [344]), ($5 + [544]))
	if ( ((*($5 + [576]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$31
	$6 = *($5 + [344])
	if ( ($6 == 0) ){ goto $label$32 }
	*($5 + [348]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$32
	if ( ((*(($5 + [424])) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($5 + [432])))
	
.LABEL $label$33
	*(($8 = (($5 + [360]) + [8]))) = *((($5 + [456]) + [8]))
	*($5 + [360]) = *($5 + [456])
	$7 = *($0)
	CALL $75((($5 + [360]) + [16]), ($5 + [440]))
	*(($6 = CALL _Znwj([16]))) = $7
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [544]) + [8])) = *($8)
	$8 = (($5 + [360]) + [24])
	*(($3 = (($5 + [544]) + [24]))) = *($8)
	*($8) = [0]
	*($5 + [344]) = $6
	$6 = ($6 + [16])
	*($5 + [352]) = $6
	*($5 + [348]) = $6
	*($5 + [544]) = *($5 + [360])
	*($5 + [560]) = *($5 + [376])
	*($5 + [376]) = (int_64)0
	CALL $18($7, (int_64)-4993669930013425664, ($5 + [344]), ($5 + [544]))
	if ( ((*($5 + [560]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$34
	$6 = *($5 + [344])
	if ( ($6 == 0) ){ goto $label$35 }
	*($5 + [348]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$35
	if ( ((*(($5 + [376])) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($5 + [384])))
	
.LABEL $label$36
	$7 = (int_64)0
	*($5 + [352]) = (int_64)0
	*($5 + [344]) = *($5 + [456])
	$6 = CALL $94([8687])
	if ( ($6 <= [8]) ){ goto $label$39 }
	CALL eosio_assert([0], [10053])
	goto $label$38 
	
.LABEL $label$39
	if ( ($6 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	$7 = (int_64)0
	
.LOOP $label$40:
	$8 = *(($6 + [8686]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$41 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$41
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$40 }
	$7 = ((int_64)$7 << (int_64)8)
	
.LABEL $label$37
	*((($5 + [344]) + [8])) = ((int_64)$7 | (int_64)4)
	$8 = [0]
	*($5 + [336]) = [0]
	*($5 + [328]) = (int_64)0
	CALL $17(($5 + [296]), ($5 + [344]))
	$6 = CALL $84(($5 + [296]), [0], [9643])
	$3 = ($6 + [8])
	*((($5 + [312]) + [8])) = *($3)
	*($5 + [312]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [312]), [8816])
	$3 = ($6 + [8])
	*((($5 + [592]) + [8])) = *($3)
	*($5 + [592]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$45 }
	$3 = *([0] + [10176])
	
.LOOP $label$47:
	*((($5 + [544]) + ($6 = $8))) = *(($3 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$46 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$47 }
	
.LABEL $label$46
	*(($5 + [288])) = [0]
	*($5 + [280]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$44 }
	*($5 + [280]) = ($8 << [1])
	$3 = (($5 + [280]) | [1])
	goto $label$43 
	
.LABEL $label$45
	*((($5 + [280]) + [8])) = [0]
	*($5 + [280]) = (int_64)0
	*($5 + [280]) = [0]
	$6 = (($5 + [280]) | [1])
	$8 = $6
	goto $label$42 
	
.LABEL $label$44
	$11 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($11)
	*($5 + [280]) = ($11 | [1])
	*($5 + [288]) = $3
	*($5 + [284]) = $8
	
.LABEL $label$43
	$11 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$48:
	*(($3 + $6)) = *((($5 + [544]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$48 }
	$8 = ($3 + $8)
	$6 = (($5 + [280]) | [1])
	
.LABEL $label$42
	*($8) = [0]
	$8 = *($5 + [280])
	$3 = ($8 & [1])
	$6 = CALL $82(($5 + [592]), ( *($5 + [288]) ? $6 : $3 ), ( *($5 + [284]) ? uint_32($8 >> [1]) : $3 ))
	$8 = ($6 + [8])
	*((($5 + [544]) + [8])) = *($8)
	*($5 + [544]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [544]), [8818])
	$8 = *($6 + [4])
	$3 = *($6)
	*($6) = (int_64)0
	$11 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [328]) & [1]) ){ goto $label$50 }
	*($5 + [328]) = [0]
	goto $label$49 
	
.LABEL $label$50
	*(*((($5 + [328]) + [8]))) = [0]
	*($5 + [332]) = [0]
	
.LABEL $label$49
	CALL $77(($5 + [328]), [0])
	*(($5 + [336])) = $11
	*($5 + [332]) = $8
	*($5 + [328]) = $3
	if ( (*($5 + [544]) & [1]) ){ goto $label$59 }
	if ( (*($5 + [280]) & [1]) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	CALL _ZdlPv(*($5 + [552]))
	if ( ((*($5 + [280]) & [1]) == 0) ){ goto $label$57 }
	
.LABEL $label$58
	CALL _ZdlPv(*(($5 + [288])))
	$6 = [1]
	if ( ((*($5 + [592]) & [1]) == 0) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$6 = [1]
	if ( (*($5 + [592]) & [1]) ){ goto $label$55 }
	
.LABEL $label$56
	if ( (*($5 + [312]) & $6) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	CALL _ZdlPv(*($5 + [600]))
	if ( ((*($5 + [312]) & $6) == 0) ){ goto $label$53 }
	
.LABEL $label$54
	CALL _ZdlPv(*($5 + [320]))
	$8 = [1]
	if ( (*($5 + [296]) & [1]) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$8 = [1]
	if ( ((*($5 + [296]) & [1]) == 0) ){ goto $label$51 }
	
.LABEL $label$52
	CALL _ZdlPv(*($5 + [304]))
	
.LABEL $label$51
	*(($3 = (($5 + [240]) + [16]))) = *(($5 + [352]))
	*($5 + [240]) = $1
	*($5 + [248]) = *($5 + [344])
	$2 = *($0)
	CALL $75(($5 + [264]), ($5 + [328]))
	*(($6 = CALL _Znwj([16]))) = $2
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [544]) + [16])) = *($3)
	$3 = (($5 + [240]) + [32])
	*(($11 = (($5 + [544]) + [32]))) = *($3)
	*($3) = [0]
	*($5 + [592]) = $6
	$6 = ($6 + [16])
	*($5 + [600]) = $6
	*($5 + [596]) = $6
	*($5 + [544]) = *($5 + [240])
	*($5 + [552]) = *($5 + [248])
	*($5 + [568]) = *($5 + [264])
	*($5 + [264]) = (int_64)0
	CALL $32($2, (int_64)8516769789752901632, ($5 + [592]), ($5 + [544]))
	if ( ((*($5 + [568]) & $8) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$60
	$6 = *($5 + [592])
	if ( ($6 == 0) ){ goto $label$61 }
	*($5 + [596]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$61
	if ( ((*(($5 + [264])) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*(($5 + [272])))
	
.LABEL $label$62
	$8 = [0]
	*($5 + [600]) = [0]
	*($5 + [592]) = (int_64)0
	CALL $17(($5 + [128]), ($5 + [344]))
	$6 = CALL $84(($5 + [128]), [0], [9689])
	$3 = ($6 + [8])
	*((($5 + [144]) + [8])) = *($3)
	*($5 + [144]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [144]), [8816])
	$3 = ($6 + [8])
	*((($5 + [160]) + [8])) = *($3)
	*($5 + [160]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$66 }
	$3 = *([0] + [10176])
	$2 = $1
	
.LOOP $label$68:
	*((($5 + [544]) + ($6 = $8))) = *(($3 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$67 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$68 }
	
.LABEL $label$67
	*(($5 + [120])) = [0]
	*($5 + [112]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$65 }
	*($5 + [112]) = ($8 << [1])
	$3 = (($5 + [112]) | [1])
	goto $label$64 
	
.LABEL $label$66
	*((($5 + [112]) + [8])) = [0]
	*($5 + [112]) = (int_64)0
	*($5 + [112]) = [0]
	$6 = (($5 + [112]) | [1])
	$3 = $6
	goto $label$63 
	
.LABEL $label$65
	$11 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($11)
	*($5 + [112]) = ($11 | [1])
	*($5 + [120]) = $3
	*($5 + [116]) = $8
	
.LABEL $label$64
	$11 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$69:
	*(($3 + $6)) = *((($5 + [544]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$69 }
	$3 = ($3 + $8)
	$6 = (($5 + [112]) | [1])
	
.LABEL $label$63
	$8 = [0]
	*($3) = [0]
	$3 = *($5 + [112])
	$11 = ($3 & [1])
	$6 = CALL $82(($5 + [160]), ( *($5 + [120]) ? $6 : $11 ), ( *($5 + [116]) ? uint_32($3 >> [1]) : $11 ))
	$3 = ($6 + [8])
	*((($5 + [176]) + [8])) = *($3)
	*($5 + [176]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [176]), [9702])
	$3 = ($6 + [8])
	*((($5 + [192]) + [8])) = *($3)
	*($5 + [192]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	CALL $17(($5 + [96]), ($5 + [472]))
	$6 = *($5 + [96])
	$3 = ($6 & [1])
	$6 = CALL $82(($5 + [192]), ( *($5 + [104]) ? (($5 + [96]) | [1]) : $3 ), ( *($5 + [100]) ? uint_32($6 >> [1]) : $3 ))
	$3 = ($6 + [8])
	*((($5 + [208]) + [8])) = *($3)
	*($5 + [208]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [208]), [8818])
	$3 = ($6 + [8])
	*((($5 + [224]) + [8])) = *($3)
	*($5 + [224]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [224]), [8893])
	$3 = ($6 + [8])
	*((($5 + [280]) + [8])) = *($3)
	*($5 + [280]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	CALL $17(($5 + [80]), ($5 + [456]))
	$6 = *($5 + [80])
	$3 = ($6 & [1])
	$6 = CALL $82(($5 + [280]), ( *($5 + [88]) ? (($5 + [80]) | [1]) : $3 ), ( *($5 + [84]) ? uint_32($6 >> [1]) : $3 ))
	$3 = ($6 + [8])
	*((($5 + [296]) + [8])) = *($3)
	*($5 + [296]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	$6 = CALL $81(($5 + [296]), [8816])
	$3 = ($6 + [8])
	*((($5 + [312]) + [8])) = *($3)
	*($5 + [312]) = *($6)
	*($6) = (int_64)0
	*($3) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$73 }
	$3 = *([0] + [10176])
	$2 = $1
	
.LOOP $label$75:
	*((($5 + [544]) + ($6 = $8))) = *(($3 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$74 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$75 }
	
.LABEL $label$74
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$72 }
	*($5 + [64]) = ($8 << [1])
	$3 = (($5 + [64]) | [1])
	goto $label$71 
	
.LABEL $label$73
	*((($5 + [64]) + [8])) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [64]) = [0]
	$6 = (($5 + [64]) | [1])
	$8 = $6
	goto $label$70 
	
.LABEL $label$72
	$11 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($11)
	*($5 + [64]) = ($11 | [1])
	*($5 + [72]) = $3
	*($5 + [68]) = $8
	
.LABEL $label$71
	$11 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$76:
	*(($3 + $6)) = *((($5 + [544]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$76 }
	$8 = ($3 + $8)
	$6 = (($5 + [64]) | [1])
	
.LABEL $label$70
	*($8) = [0]
	$8 = *($5 + [64])
	$3 = ($8 & [1])
	$6 = CALL $82(($5 + [312]), ( *($5 + [72]) ? $6 : $3 ), ( *($5 + [68]) ? uint_32($8 >> [1]) : $3 ))
	$8 = ($6 + [8])
	*((($5 + [544]) + [8])) = *($8)
	*($5 + [544]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [544]), [8818])
	$8 = *($6 + [4])
	$3 = *($6)
	*($6) = (int_64)0
	$11 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [592]) & [1]) ){ goto $label$78 }
	*($5 + [592]) = [0]
	goto $label$77 
	
.LABEL $label$78
	*(*((($5 + [592]) + [8]))) = [0]
	*($5 + [596]) = [0]
	
.LABEL $label$77
	CALL $77(($5 + [592]), [0])
	*(($5 + [600])) = $11
	*($5 + [596]) = $8
	*($5 + [592]) = $3
	if ( (*($5 + [544]) & [1]) ){ goto $label$107 }
	if ( (*($5 + [64]) & [1]) ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$107
	CALL _ZdlPv(*($5 + [552]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$105 }
	
.LABEL $label$106
	CALL _ZdlPv(*(($5 + [72])))
	$6 = [1]
	if ( ((*($5 + [312]) & [1]) == 0) ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$105
	$6 = [1]
	if ( (*($5 + [312]) & [1]) ){ goto $label$103 }
	
.LABEL $label$104
	if ( (*($5 + [296]) & $6) ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$103
	CALL _ZdlPv(*($5 + [320]))
	if ( ((*($5 + [296]) & $6) == 0) ){ goto $label$101 }
	
.LABEL $label$102
	CALL _ZdlPv(*($5 + [304]))
	$6 = [1]
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$100 }
	goto $label$99 
	
.LABEL $label$101
	$6 = [1]
	if ( (*($5 + [80]) & [1]) ){ goto $label$99 }
	
.LABEL $label$100
	if ( (*($5 + [280]) & $6) ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$99
	CALL _ZdlPv(*(($5 + [88])))
	if ( ((*($5 + [280]) & $6) == 0) ){ goto $label$97 }
	
.LABEL $label$98
	CALL _ZdlPv(*($5 + [288]))
	$6 = [1]
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$97
	$6 = [1]
	if ( (*($5 + [224]) & [1]) ){ goto $label$95 }
	
.LABEL $label$96
	if ( (*($5 + [208]) & $6) ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$95
	CALL _ZdlPv(*($5 + [232]))
	if ( ((*($5 + [208]) & $6) == 0) ){ goto $label$93 }
	
.LABEL $label$94
	CALL _ZdlPv(*($5 + [216]))
	$6 = [1]
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$93
	$6 = [1]
	if ( (*($5 + [96]) & [1]) ){ goto $label$91 }
	
.LABEL $label$92
	if ( (*($5 + [192]) & $6) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	CALL _ZdlPv(*(($5 + [104])))
	if ( ((*($5 + [192]) & $6) == 0) ){ goto $label$89 }
	
.LABEL $label$90
	CALL _ZdlPv(*($5 + [200]))
	$6 = [1]
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$89
	$6 = [1]
	if ( (*($5 + [176]) & [1]) ){ goto $label$87 }
	
.LABEL $label$88
	if ( (*($5 + [112]) & $6) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$87
	CALL _ZdlPv(*($5 + [184]))
	if ( ((*($5 + [112]) & $6) == 0) ){ goto $label$85 }
	
.LABEL $label$86
	CALL _ZdlPv(*(($5 + [120])))
	$6 = [1]
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$85
	$6 = [1]
	if ( (*($5 + [160]) & [1]) ){ goto $label$83 }
	
.LABEL $label$84
	if ( (*($5 + [144]) & $6) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$83
	CALL _ZdlPv(*($5 + [168]))
	if ( ((*($5 + [144]) & $6) == 0) ){ goto $label$81 }
	
.LABEL $label$82
	CALL _ZdlPv(*($5 + [152]))
	if ( (*($5 + [128]) & [1]) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$79 }
	
.LABEL $label$80
	CALL _ZdlPv(*($5 + [136]))
	
.LABEL $label$79
	$2 = *($0)
	*(($5 + [32])) = [0]
	*($5 + [552]) = (int_64)3617214756542218240
	*($5 + [544]) = $2
	*($5 + [24]) = (int_64)0
	$6 = CALL $94([9711])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$119 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$122 }
	*($5 + [24]) = ($6 << [1])
	$8 = (($5 + [24]) | [1])
	if ( $6 ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$122
	$3 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($3)
	*($5 + [24]) = ($3 | [1])
	*($5 + [32]) = $8
	*($5 + [28]) = $6
	
.LABEL $label$121
	CALL memcpy($8, [9711], $6)
	
.LABEL $label$120
	*(($8 + $6)) = [0]
	CALL $75(($5 + [36]), ($5 + [592]))
	*($5 + [56]) = $1
	*($5 + [48]) = $1
	CALL $24($2, ($5 + [544]), ($5 + [24]))
	if ( (*($5 + [36]) & [1]) ){ goto $label$124 }
	if ( (*($5 + [24]) & [1]) ){ goto $label$123 }
	goto $label$118 
	
.LABEL $label$124
	CALL _ZdlPv(*(($5 + [44])))
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$118 }
	
.LABEL $label$123
	CALL _ZdlPv(*($5 + [32]))
	$6 = [1]
	if ( ((*($5 + [592]) & [1]) == 0) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	CALL $74(($5 + [24]))
	
.LABEL $label$118
	$6 = [1]
	if ( (*($5 + [592]) & [1]) ){ goto $label$116 }
	
.LABEL $label$117
	if ( (*($5 + [328]) & $6) ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$116
	CALL _ZdlPv(*(($5 + [600])))
	if ( ((*($5 + [328]) & $6) == 0) ){ goto $label$114 }
	
.LABEL $label$115
	CALL _ZdlPv(*(($5 + [336])))
	$6 = [1]
	if ( ((*($5 + [440]) & [1]) == 0) ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$114
	$6 = [1]
	if ( (*($5 + [440]) & [1]) ){ goto $label$112 }
	
.LABEL $label$113
	if ( (*($5 + [488]) & $6) ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$112
	CALL _ZdlPv(*(($5 + [448])))
	if ( ((*($5 + [488]) & $6) == 0) ){ goto $label$110 }
	
.LABEL $label$111
	CALL _ZdlPv(*(($5 + [496])))
	$3 = *($5 + [528])
	if ( ($3 == 0) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$110
	$3 = *($5 + [528])
	if ( $3 ){ goto $label$108 }
	
.LABEL $label$109
	$global$0 = ($5 + [608])
	return 
	
.LABEL $label$108
	$11 = ($5 + [532])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$126 }
	
.LOOP $label$127:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$128 }
	CALL _ZdlPv($8)
	
.LABEL $label$128
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$127 }
	$6 = *(($5 + [528]))
	goto $label$125 
	
.LABEL $label$126
	$6 = $3
	
.LABEL $label$125
	*($11) = $3
	CALL _ZdlPv($6)
	$global$0 = ($5 + [608])
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$5 = *($2)
	$4 = *($2 + [8])
	$0 = CALL $29(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), [9717]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$5), [9741])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [10506])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [10552])
	$6 = *($0 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [10742])
	$4 = (int_64)
	*($0) = $4(*($0) - $5))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10790])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [10812])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [10603])
	CALL eosio_assert([1], [10213])
	CALL memcpy(($3 + [48]), $0, [8])
	*($3 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [10213])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), $1, ($3 + [48]), [16])
	if ( (uint_64)($4 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [80])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	float_64 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [784])
	$global$0 = $5
	$6 = CALL $94([8687])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10053])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8686]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)*($3 + [8]) ^ (int_64)$7) <= (int_64)256), [9271])
	*($5 + [712]) = (int_64)0
	$9 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.2)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$8 }
	$7 = (int_64)-9223372036854775808
	goto $label$7 
	
.LABEL $label$8
	$7 = (Rounds 0)($9)
	
.LABEL $label$7
	*($5 + [704]) = $7
	$6 = CALL $94([8687])
	if ( ($6 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [10053])
	goto $label$11 
	
.LABEL $label$12
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$7 = (int_64)0
	
.LOOP $label$13:
	$8 = *(($6 + [8686]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$14
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$13 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$9 
	
.LABEL $label$10
	$7 = (int_64)0
	
.LABEL $label$9
	*((($5 + [704]) + [8])) = ((int_64)$7 | (int_64)4)
	*($5 + [696]) = [0]
	*($5 + [688]) = (int_64)0
	CALL $17(($5 + [720]), ($5 + [704]))
	$6 = CALL $84(($5 + [720]), [0], [9305])
	$8 = *($6 + [4])
	$10 = *($6)
	*($6) = (int_64)0
	$11 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [688]) & [1]) ){ goto $label$16 }
	*($5 + [688]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*((($5 + [688]) + [8]))) = [0]
	*($5 + [692]) = [0]
	
.LABEL $label$15
	CALL $77(($5 + [688]), [0])
	*((($5 + [688]) + [8])) = $11
	*($5 + [692]) = $8
	*($5 + [688]) = $10
	if ( ((*($5 + [720]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($5 + [728]))
	
.LABEL $label$17
	*(($8 = (($5 + [640]) + [24]))) = *((($5 + [704]) + [8]))
	*($5 + [640]) = $1
	$7 = *($0)
	*($5 + [648]) = $7
	*($5 + [656]) = *($5 + [704])
	CALL $75(($5 + [672]), ($5 + [688]))
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [720]) + [24])) = *($8)
	$8 = (($5 + [640]) + [40])
	*(($10 = (($5 + [720]) + [40]))) = *($8)
	*($8) = [0]
	*($5 + [592]) = $6
	$6 = ($6 + [16])
	*($5 + [600]) = $6
	*($5 + [596]) = $6
	*($5 + [720]) = *($5 + [640])
	*($5 + [728]) = *($5 + [648])
	*($5 + [736]) = *($5 + [656])
	*($5 + [752]) = *($5 + [672])
	*($5 + [672]) = (int_64)0
	CALL $7($7, (int_64)-3617168760277827584, ($5 + [592]), ($5 + [720]))
	if ( ((*($5 + [752]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$18
	$6 = *($5 + [592])
	if ( ($6 == 0) ){ goto $label$19 }
	*($5 + [596]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	if ( ((*(($5 + [672])) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($5 + [680])))
	
.LABEL $label$20
	*(($8 = (($5 + [608]) + [8]))) = *((($5 + [704]) + [8]))
	*($5 + [608]) = *($5 + [704])
	$7 = *($0)
	CALL $75((($5 + [608]) + [16]), ($5 + [688]))
	*(($6 = CALL _Znwj([16]))) = $7
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [720]) + [8])) = *($8)
	$8 = (($5 + [608]) + [24])
	*(($10 = (($5 + [720]) + [24]))) = *($8)
	*($8) = [0]
	*($5 + [592]) = $6
	$6 = ($6 + [16])
	*($5 + [600]) = $6
	*($5 + [596]) = $6
	*($5 + [720]) = *($5 + [608])
	*($5 + [736]) = *($5 + [624])
	*($5 + [624]) = (int_64)0
	CALL $18($7, (int_64)-4993669930013425664, ($5 + [592]), ($5 + [720]))
	if ( ((*($5 + [736]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$21
	$6 = *($5 + [592])
	if ( ($6 == 0) ){ goto $label$22 }
	*($5 + [596]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$22
	if ( ((*(($5 + [624])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($5 + [632])))
	
.LABEL $label$23
	$7 = (int_64)0
	*($5 + [600]) = (int_64)0
	*($5 + [592]) = *($5 + [704])
	$6 = CALL $94([8492])
	if ( ($6 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [10053])
	goto $label$25 
	
.LABEL $label$26
	if ( ($6 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$7 = (int_64)0
	
.LOOP $label$27:
	$8 = *(($6 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$28
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$27 }
	$7 = ((int_64)$7 << (int_64)8)
	
.LABEL $label$24
	*((($5 + [592]) + [8])) = ((int_64)$7 | (int_64)4)
	$8 = [0]
	*($5 + [584]) = [0]
	*($5 + [576]) = (int_64)0
	CALL $17(($5 + [768]), ($5 + [592]))
	$6 = CALL $84(($5 + [768]), [0], [9349])
	$10 = ($6 + [8])
	*((($5 + [408]) + [8])) = *($10)
	*($5 + [408]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [408]), [8816])
	$10 = ($6 + [8])
	*((($5 + [504]) + [8])) = *($10)
	*($5 + [504]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$32 }
	$10 = *([0] + [10176])
	$7 = $2
	
.LOOP $label$34:
	*((($5 + [720]) + ($6 = $8))) = *(($10 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$33 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$34 }
	
.LABEL $label$33
	*(($5 + [568])) = [0]
	*($5 + [560]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$31 }
	*($5 + [560]) = ($8 << [1])
	$10 = (($5 + [560]) | [1])
	goto $label$30 
	
.LABEL $label$32
	*((($5 + [560]) + [8])) = [0]
	*($5 + [560]) = (int_64)0
	*($5 + [560]) = [0]
	$6 = (($5 + [560]) | [1])
	$8 = $6
	goto $label$29 
	
.LABEL $label$31
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [560]) = ($11 | [1])
	*($5 + [568]) = $10
	*($5 + [564]) = $8
	
.LABEL $label$30
	$11 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$35:
	*(($10 + $6)) = *((($5 + [720]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$35 }
	$8 = ($10 + $8)
	$6 = (($5 + [560]) | [1])
	
.LABEL $label$29
	*($8) = [0]
	$8 = *($5 + [560])
	$10 = ($8 & [1])
	$6 = CALL $82(($5 + [504]), ( *($5 + [568]) ? $6 : $10 ), ( *($5 + [564]) ? uint_32($8 >> [1]) : $10 ))
	$8 = ($6 + [8])
	*((($5 + [720]) + [8])) = *($8)
	*($5 + [720]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [720]), [8818])
	$8 = *($6 + [4])
	$10 = *($6)
	*($6) = (int_64)0
	$11 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [576]) & [1]) ){ goto $label$37 }
	*($5 + [576]) = [0]
	goto $label$36 
	
.LABEL $label$37
	*(*((($5 + [576]) + [8]))) = [0]
	*($5 + [580]) = [0]
	
.LABEL $label$36
	CALL $77(($5 + [576]), [0])
	*(($5 + [584])) = $11
	*($5 + [580]) = $8
	*($5 + [576]) = $10
	if ( (*($5 + [720]) & [1]) ){ goto $label$46 }
	if ( (*($5 + [560]) & [1]) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	CALL _ZdlPv(*($5 + [728]))
	if ( ((*($5 + [560]) & [1]) == 0) ){ goto $label$44 }
	
.LABEL $label$45
	CALL _ZdlPv(*(($5 + [568])))
	$6 = [1]
	if ( ((*($5 + [504]) & [1]) == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$6 = [1]
	if ( (*($5 + [504]) & [1]) ){ goto $label$42 }
	
.LABEL $label$43
	if ( (*($5 + [408]) & $6) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	CALL _ZdlPv(*($5 + [512]))
	if ( ((*($5 + [408]) & $6) == 0) ){ goto $label$40 }
	
.LABEL $label$41
	CALL _ZdlPv(*($5 + [416]))
	$8 = [1]
	if ( (*($5 + [768]) & [1]) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$8 = [1]
	if ( ((*($5 + [768]) & [1]) == 0) ){ goto $label$38 }
	
.LABEL $label$39
	CALL _ZdlPv(*($5 + [776]))
	
.LABEL $label$38
	*(($10 = (($5 + [520]) + [16]))) = *(($5 + [600]))
	*($5 + [520]) = $2
	*($5 + [528]) = *($5 + [592])
	$7 = *($0)
	CALL $75(($5 + [544]), ($5 + [576]))
	*(($6 = CALL _Znwj([16]))) = $7
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [720]) + [16])) = *($10)
	$10 = (($5 + [520]) + [32])
	*(($11 = (($5 + [720]) + [32]))) = *($10)
	*($10) = [0]
	*($5 + [504]) = $6
	$6 = ($6 + [16])
	*($5 + [512]) = $6
	*($5 + [508]) = $6
	*($5 + [720]) = *($5 + [520])
	*($5 + [728]) = *($5 + [528])
	*($5 + [744]) = *($5 + [544])
	*($5 + [544]) = (int_64)0
	CALL $32($7, (int_64)8516769789752901632, ($5 + [504]), ($5 + [720]))
	if ( ((*($5 + [744]) & $8) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$47
	$6 = *($5 + [504])
	if ( ($6 == 0) ){ goto $label$48 }
	*($5 + [508]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$48
	if ( ((*(($5 + [544])) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($5 + [552])))
	
.LABEL $label$49
	*($5 + [512]) = (int_64)0
	$9 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.8)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$51 }
	$7 = (int_64)-9223372036854775808
	goto $label$50 
	
.LABEL $label$51
	$7 = (Rounds 0)($9)
	
.LABEL $label$50
	*($5 + [504]) = $7
	$6 = CALL $94([8687])
	if ( ($6 <= [8]) ){ goto $label$55 }
	CALL eosio_assert([0], [10053])
	goto $label$54 
	
.LABEL $label$55
	if ( ($6 == 0) ){ goto $label$53 }
	
.LABEL $label$54
	$7 = (int_64)0
	
.LOOP $label$56:
	$8 = *(($6 + [8686]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$57 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$57
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$56 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$52 
	
.LABEL $label$53
	$7 = (int_64)0
	
.LABEL $label$52
	*((($5 + [504]) + [8])) = ((int_64)$7 | (int_64)4)
	$8 = [0]
	*($5 + [568]) = [0]
	*($5 + [560]) = (int_64)0
	CALL $17(($5 + [488]), ($5 + [504]))
	$6 = CALL $84(($5 + [488]), [0], [9404])
	$10 = ($6 + [8])
	*((($5 + [768]) + [8])) = *($10)
	*($5 + [768]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [768]), [8816])
	$10 = ($6 + [8])
	*((($5 + [408]) + [8])) = *($10)
	*($5 + [408]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$61 }
	$10 = *([0] + [10176])
	$7 = $2
	
.LOOP $label$63:
	*((($5 + [720]) + ($6 = $8))) = *(($10 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$62 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$63 }
	
.LABEL $label$62
	*(($5 + [480])) = [0]
	*($5 + [472]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$60 }
	*($5 + [472]) = ($8 << [1])
	$10 = (($5 + [472]) | [1])
	goto $label$59 
	
.LABEL $label$61
	*((($5 + [472]) + [8])) = [0]
	*($5 + [472]) = (int_64)0
	*($5 + [472]) = [0]
	$6 = (($5 + [472]) | [1])
	$8 = $6
	goto $label$58 
	
.LABEL $label$60
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [472]) = ($11 | [1])
	*($5 + [480]) = $10
	*($5 + [476]) = $8
	
.LABEL $label$59
	$11 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$64:
	*(($10 + $6)) = *((($5 + [720]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$64 }
	$8 = ($10 + $8)
	$6 = (($5 + [472]) | [1])
	
.LABEL $label$58
	*($8) = [0]
	$8 = *($5 + [472])
	$10 = ($8 & [1])
	$6 = CALL $82(($5 + [408]), ( *($5 + [480]) ? $6 : $10 ), ( *($5 + [476]) ? uint_32($8 >> [1]) : $10 ))
	$8 = ($6 + [8])
	*((($5 + [720]) + [8])) = *($8)
	*($5 + [720]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [720]), [8818])
	$8 = *($6 + [4])
	$10 = *($6)
	*($6) = (int_64)0
	$11 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [560]) & [1]) ){ goto $label$66 }
	*($5 + [560]) = [0]
	goto $label$65 
	
.LABEL $label$66
	*(*((($5 + [560]) + [8]))) = [0]
	*($5 + [564]) = [0]
	
.LABEL $label$65
	CALL $77(($5 + [560]), [0])
	*(($5 + [568])) = $11
	*($5 + [564]) = $8
	*($5 + [560]) = $10
	if ( (*($5 + [720]) & [1]) ){ goto $label$75 }
	if ( (*($5 + [472]) & [1]) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$75
	CALL _ZdlPv(*($5 + [728]))
	if ( ((*($5 + [472]) & [1]) == 0) ){ goto $label$73 }
	
.LABEL $label$74
	CALL _ZdlPv(*(($5 + [480])))
	$6 = [1]
	if ( ((*($5 + [408]) & [1]) == 0) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$6 = [1]
	if ( (*($5 + [408]) & [1]) ){ goto $label$71 }
	
.LABEL $label$72
	if ( (*($5 + [768]) & $6) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	CALL _ZdlPv(*($5 + [416]))
	if ( ((*($5 + [768]) & $6) == 0) ){ goto $label$69 }
	
.LABEL $label$70
	CALL _ZdlPv(*($5 + [776]))
	$8 = [1]
	if ( (*($5 + [488]) & [1]) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$8 = [1]
	if ( ((*($5 + [488]) & [1]) == 0) ){ goto $label$67 }
	
.LABEL $label$68
	CALL _ZdlPv(*($5 + [496]))
	
.LABEL $label$67
	*(($10 = (($5 + [424]) + [24]))) = *(($5 + [512]))
	*($5 + [424]) = $1
	*($5 + [432]) = $2
	*($5 + [440]) = *($5 + [504])
	$7 = *($0)
	CALL $75(($5 + [456]), ($5 + [560]))
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [720]) + [24])) = *($10)
	$10 = (($5 + [424]) + [40])
	*(($11 = (($5 + [720]) + [40]))) = *($10)
	*($10) = [0]
	*($5 + [408]) = $6
	$6 = ($6 + [16])
	*($5 + [416]) = $6
	*($5 + [412]) = $6
	*($5 + [720]) = *($5 + [424])
	*($5 + [728]) = *($5 + [432])
	*($5 + [736]) = *($5 + [440])
	*($5 + [752]) = *($5 + [456])
	*($5 + [456]) = (int_64)0
	CALL $7($7, (int_64)-3617168760277827584, ($5 + [408]), ($5 + [720]))
	if ( ((*($5 + [752]) & $8) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$76
	$6 = *($5 + [408])
	if ( ($6 == 0) ){ goto $label$77 }
	*($5 + [412]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$77
	if ( ((*(($5 + [456])) & [1]) == 0) ){ goto $label$78 }
	CALL _ZdlPv(*(($5 + [464])))
	
.LABEL $label$78
	*($5 + [416]) = (int_64)0
	$9 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.8)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$80 }
	$7 = (int_64)-9223372036854775808
	goto $label$79 
	
.LABEL $label$80
	$7 = (Rounds 0)($9)
	
.LABEL $label$79
	*($5 + [408]) = $7
	$6 = CALL $94([8492])
	if ( ($6 <= [8]) ){ goto $label$84 }
	CALL eosio_assert([0], [10053])
	goto $label$83 
	
.LABEL $label$84
	if ( ($6 == 0) ){ goto $label$82 }
	
.LABEL $label$83
	$7 = (int_64)0
	
.LOOP $label$85:
	$8 = *(($6 + [8491]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$86 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$86
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$85 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$81 
	
.LABEL $label$82
	$7 = (int_64)0
	
.LABEL $label$81
	*((($5 + [408]) + [8])) = ((int_64)$7 | (int_64)4)
	$8 = [0]
	*($5 + [496]) = [0]
	*($5 + [488]) = (int_64)0
	CALL $17(($5 + [392]), ($5 + [408]))
	$6 = CALL $84(($5 + [392]), [0], [9448])
	$10 = ($6 + [8])
	*((($5 + [472]) + [8])) = *($10)
	*($5 + [472]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [472]), [8816])
	$10 = ($6 + [8])
	*((($5 + [768]) + [8])) = *($10)
	*($5 + [768]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$90 }
	$10 = *([0] + [10176])
	$7 = $1
	
.LOOP $label$92:
	*((($5 + [720]) + ($6 = $8))) = *(($10 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$91 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$92 }
	
.LABEL $label$91
	*(($5 + [384])) = [0]
	*($5 + [376]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$89 }
	*($5 + [376]) = ($8 << [1])
	$10 = (($5 + [376]) | [1])
	goto $label$88 
	
.LABEL $label$90
	*((($5 + [376]) + [8])) = [0]
	*($5 + [376]) = (int_64)0
	*($5 + [376]) = [0]
	$6 = (($5 + [376]) | [1])
	$8 = $6
	goto $label$87 
	
.LABEL $label$89
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [376]) = ($11 | [1])
	*($5 + [384]) = $10
	*($5 + [380]) = $8
	
.LABEL $label$88
	$11 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$93:
	*(($10 + $6)) = *((($5 + [720]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$93 }
	$8 = ($10 + $8)
	$6 = (($5 + [376]) | [1])
	
.LABEL $label$87
	*($8) = [0]
	$8 = *($5 + [376])
	$10 = ($8 & [1])
	$6 = CALL $82(($5 + [768]), ( *($5 + [384]) ? $6 : $10 ), ( *($5 + [380]) ? uint_32($8 >> [1]) : $10 ))
	$8 = ($6 + [8])
	*((($5 + [720]) + [8])) = *($8)
	*($5 + [720]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [720]), [8818])
	$8 = *($6 + [4])
	$10 = *($6)
	*($6) = (int_64)0
	$11 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [488]) & [1]) ){ goto $label$95 }
	*($5 + [488]) = [0]
	goto $label$94 
	
.LABEL $label$95
	*(*((($5 + [488]) + [8]))) = [0]
	*($5 + [492]) = [0]
	
.LABEL $label$94
	CALL $77(($5 + [488]), [0])
	*(($5 + [496])) = $11
	*($5 + [492]) = $8
	*($5 + [488]) = $10
	if ( (*($5 + [720]) & [1]) ){ goto $label$104 }
	if ( (*($5 + [376]) & [1]) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$104
	CALL _ZdlPv(*($5 + [728]))
	if ( ((*($5 + [376]) & [1]) == 0) ){ goto $label$102 }
	
.LABEL $label$103
	CALL _ZdlPv(*(($5 + [384])))
	$6 = [1]
	if ( ((*($5 + [768]) & [1]) == 0) ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$102
	$6 = [1]
	if ( (*($5 + [768]) & [1]) ){ goto $label$100 }
	
.LABEL $label$101
	if ( (*($5 + [472]) & $6) ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$100
	CALL _ZdlPv(*($5 + [776]))
	if ( ((*($5 + [472]) & $6) == 0) ){ goto $label$98 }
	
.LABEL $label$99
	CALL _ZdlPv(*($5 + [480]))
	$8 = [1]
	if ( (*($5 + [392]) & [1]) ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$98
	$8 = [1]
	if ( ((*($5 + [392]) & [1]) == 0) ){ goto $label$96 }
	
.LABEL $label$97
	CALL _ZdlPv(*($5 + [400]))
	
.LABEL $label$96
	*(($10 = (($5 + [336]) + [16]))) = *(($5 + [416]))
	*($5 + [336]) = $1
	*($5 + [344]) = *($5 + [408])
	$7 = *($0)
	CALL $75(($5 + [360]), ($5 + [488]))
	*(($6 = CALL _Znwj([16]))) = $7
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [720]) + [16])) = *($10)
	$10 = (($5 + [336]) + [32])
	*(($11 = (($5 + [720]) + [32]))) = *($10)
	*($10) = [0]
	*($5 + [768]) = $6
	$6 = ($6 + [16])
	*($5 + [776]) = $6
	*($5 + [772]) = $6
	*($5 + [720]) = *($5 + [336])
	*($5 + [728]) = *($5 + [344])
	*($5 + [744]) = *($5 + [360])
	*($5 + [360]) = (int_64)0
	CALL $32($7, (int_64)8516769789752901632, ($5 + [768]), ($5 + [720]))
	if ( ((*($5 + [744]) & $8) == 0) ){ goto $label$105 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$105
	$6 = *($5 + [768])
	if ( ($6 == 0) ){ goto $label$106 }
	*($5 + [772]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$106
	if ( ((*(($5 + [360])) & [1]) == 0) ){ goto $label$107 }
	CALL _ZdlPv(*(($5 + [368])))
	
.LABEL $label$107
	$8 = [0]
	*($5 + [776]) = [0]
	*($5 + [768]) = (int_64)0
	CALL $17(($5 + [144]), ($5 + [504]))
	$6 = CALL $84(($5 + [144]), [0], [8881])
	$10 = ($6 + [8])
	*((($5 + [160]) + [8])) = *($10)
	*($5 + [160]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [160]), [8816])
	$10 = ($6 + [8])
	*((($5 + [176]) + [8])) = *($10)
	*($5 + [176]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$111 }
	$10 = *([0] + [10176])
	$7 = $2
	
.LOOP $label$113:
	*((($5 + [720]) + ($6 = $8))) = *(($10 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$112 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$113 }
	
.LABEL $label$112
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$110 }
	*($5 + [128]) = ($8 << [1])
	$10 = (($5 + [128]) | [1])
	goto $label$109 
	
.LABEL $label$111
	*((($5 + [128]) + [8])) = [0]
	*($5 + [128]) = (int_64)0
	*($5 + [128]) = [0]
	$6 = (($5 + [128]) | [1])
	$10 = $6
	goto $label$108 
	
.LABEL $label$110
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [128]) = ($11 | [1])
	*($5 + [136]) = $10
	*($5 + [132]) = $8
	
.LABEL $label$109
	$11 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$114:
	*(($10 + $6)) = *((($5 + [720]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$114 }
	$10 = ($10 + $8)
	$6 = (($5 + [128]) | [1])
	
.LABEL $label$108
	$8 = [0]
	*($10) = [0]
	$10 = *($5 + [128])
	$11 = ($10 & [1])
	$6 = CALL $82(($5 + [176]), ( *($5 + [136]) ? $6 : $11 ), ( *($5 + [132]) ? uint_32($10 >> [1]) : $11 ))
	$10 = ($6 + [8])
	*((($5 + [192]) + [8])) = *($10)
	*($5 + [192]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [192]), [8818])
	$10 = ($6 + [8])
	*((($5 + [208]) + [8])) = *($10)
	*($5 + [208]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [208]), [8893])
	$10 = ($6 + [8])
	*((($5 + [224]) + [8])) = *($10)
	*($5 + [224]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	CALL $17(($5 + [112]), ($5 + [704]))
	$6 = *($5 + [112])
	$10 = ($6 & [1])
	$6 = CALL $82(($5 + [224]), ( *($5 + [120]) ? (($5 + [112]) | [1]) : $10 ), ( *($5 + [116]) ? uint_32($6 >> [1]) : $10 ))
	$10 = ($6 + [8])
	*((($5 + [240]) + [8])) = *($10)
	*($5 + [240]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [240]), [8907])
	$10 = ($6 + [8])
	*((($5 + [256]) + [8])) = *($10)
	*($5 + [256]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	CALL $17(($5 + [96]), ($5 + [592]))
	$6 = *($5 + [96])
	$10 = ($6 & [1])
	$6 = CALL $82(($5 + [256]), ( *($5 + [104]) ? (($5 + [96]) | [1]) : $10 ), ( *($5 + [100]) ? uint_32($6 >> [1]) : $10 ))
	$10 = ($6 + [8])
	*((($5 + [272]) + [8])) = *($10)
	*($5 + [272]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [272]), [8816])
	$10 = ($6 + [8])
	*((($5 + [288]) + [8])) = *($10)
	*($5 + [288]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$118 }
	$10 = *([0] + [10176])
	$7 = $2
	
.LOOP $label$120:
	*((($5 + [720]) + ($6 = $8))) = *(($10 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$119 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$120 }
	
.LABEL $label$119
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$117 }
	*($5 + [80]) = ($8 << [1])
	$10 = (($5 + [80]) | [1])
	goto $label$116 
	
.LABEL $label$118
	*((($5 + [80]) + [8])) = [0]
	*($5 + [80]) = (int_64)0
	*($5 + [80]) = [0]
	$6 = (($5 + [80]) | [1])
	$10 = $6
	goto $label$115 
	
.LABEL $label$117
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [80]) = ($11 | [1])
	*($5 + [88]) = $10
	*($5 + [84]) = $8
	
.LABEL $label$116
	$11 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$121:
	*(($10 + $6)) = *((($5 + [720]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$121 }
	$10 = ($10 + $8)
	$6 = (($5 + [80]) | [1])
	
.LABEL $label$115
	$8 = [0]
	*($10) = [0]
	$10 = *($5 + [80])
	$11 = ($10 & [1])
	$6 = CALL $82(($5 + [288]), ( *($5 + [88]) ? $6 : $11 ), ( *($5 + [84]) ? uint_32($10 >> [1]) : $11 ))
	$10 = ($6 + [8])
	*((($5 + [304]) + [8])) = *($10)
	*($5 + [304]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [304]), [8818])
	$10 = ($6 + [8])
	*((($5 + [320]) + [8])) = *($10)
	*($5 + [320]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [320]), [9494])
	$10 = ($6 + [8])
	*((($5 + [376]) + [8])) = *($10)
	*($5 + [376]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	CALL $17(($5 + [64]), ($5 + [408]))
	$6 = *($5 + [64])
	$10 = ($6 & [1])
	$6 = CALL $82(($5 + [376]), ( *($5 + [72]) ? (($5 + [64]) | [1]) : $10 ), ( *($5 + [68]) ? uint_32($6 >> [1]) : $10 ))
	$10 = ($6 + [8])
	*((($5 + [392]) + [8])) = *($10)
	*($5 + [392]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	$6 = CALL $81(($5 + [392]), [8816])
	$10 = ($6 + [8])
	*((($5 + [472]) + [8])) = *($10)
	*($5 + [472]) = *($6)
	*($6) = (int_64)0
	*($10) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$125 }
	$10 = *([0] + [10176])
	$7 = $1
	
.LOOP $label$127:
	*((($5 + [720]) + ($6 = $8))) = *(($10 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$126 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$127 }
	
.LABEL $label$126
	*(($5 + [56])) = [0]
	*($5 + [48]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$124 }
	*($5 + [48]) = ($8 << [1])
	$10 = (($5 + [48]) | [1])
	goto $label$123 
	
.LABEL $label$125
	*((($5 + [48]) + [8])) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [48]) = [0]
	$6 = (($5 + [48]) | [1])
	$8 = $6
	goto $label$122 
	
.LABEL $label$124
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [48]) = ($11 | [1])
	*($5 + [56]) = $10
	*($5 + [52]) = $8
	
.LABEL $label$123
	$11 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$128:
	*(($10 + $6)) = *((($5 + [720]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$128 }
	$8 = ($10 + $8)
	$6 = (($5 + [48]) | [1])
	
.LABEL $label$122
	*($8) = [0]
	$8 = *($5 + [48])
	$10 = ($8 & [1])
	$6 = CALL $82(($5 + [472]), ( *($5 + [56]) ? $6 : $10 ), ( *($5 + [52]) ? uint_32($8 >> [1]) : $10 ))
	$8 = ($6 + [8])
	*((($5 + [720]) + [8])) = *($8)
	*($5 + [720]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = CALL $81(($5 + [720]), [8818])
	$8 = *($6 + [4])
	$10 = *($6)
	*($6) = (int_64)0
	$11 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($5 + [768]) & [1]) ){ goto $label$130 }
	*($5 + [768]) = [0]
	goto $label$129 
	
.LABEL $label$130
	*(*((($5 + [768]) + [8]))) = [0]
	*($5 + [772]) = [0]
	
.LABEL $label$129
	CALL $77(($5 + [768]), [0])
	*(($5 + [776])) = $11
	*($5 + [772]) = $8
	*($5 + [768]) = $10
	if ( (*($5 + [720]) & [1]) ){ goto $label$173 }
	if ( (*($5 + [48]) & [1]) ){ goto $label$172 }
	goto $label$171 
	
.LABEL $label$173
	CALL _ZdlPv(*($5 + [728]))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$171 }
	
.LABEL $label$172
	CALL _ZdlPv(*(($5 + [56])))
	$6 = [1]
	if ( ((*($5 + [472]) & [1]) == 0) ){ goto $label$170 }
	goto $label$169 
	
.LABEL $label$171
	$6 = [1]
	if ( (*($5 + [472]) & [1]) ){ goto $label$169 }
	
.LABEL $label$170
	if ( (*($5 + [392]) & $6) ){ goto $label$168 }
	goto $label$167 
	
.LABEL $label$169
	CALL _ZdlPv(*($5 + [480]))
	if ( ((*($5 + [392]) & $6) == 0) ){ goto $label$167 }
	
.LABEL $label$168
	CALL _ZdlPv(*($5 + [400]))
	$6 = [1]
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$166 }
	goto $label$165 
	
.LABEL $label$167
	$6 = [1]
	if ( (*($5 + [64]) & [1]) ){ goto $label$165 }
	
.LABEL $label$166
	if ( (*($5 + [376]) & $6) ){ goto $label$164 }
	goto $label$163 
	
.LABEL $label$165
	CALL _ZdlPv(*(($5 + [72])))
	if ( ((*($5 + [376]) & $6) == 0) ){ goto $label$163 }
	
.LABEL $label$164
	CALL _ZdlPv(*($5 + [384]))
	$6 = [1]
	if ( ((*($5 + [320]) & [1]) == 0) ){ goto $label$162 }
	goto $label$161 
	
.LABEL $label$163
	$6 = [1]
	if ( (*($5 + [320]) & [1]) ){ goto $label$161 }
	
.LABEL $label$162
	if ( (*($5 + [304]) & $6) ){ goto $label$160 }
	goto $label$159 
	
.LABEL $label$161
	CALL _ZdlPv(*($5 + [328]))
	if ( ((*($5 + [304]) & $6) == 0) ){ goto $label$159 }
	
.LABEL $label$160
	CALL _ZdlPv(*($5 + [312]))
	$6 = [1]
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$158 }
	goto $label$157 
	
.LABEL $label$159
	$6 = [1]
	if ( (*($5 + [80]) & [1]) ){ goto $label$157 }
	
.LABEL $label$158
	if ( (*($5 + [288]) & $6) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$157
	CALL _ZdlPv(*(($5 + [88])))
	if ( ((*($5 + [288]) & $6) == 0) ){ goto $label$155 }
	
.LABEL $label$156
	CALL _ZdlPv(*($5 + [296]))
	$6 = [1]
	if ( ((*($5 + [272]) & [1]) == 0) ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	$6 = [1]
	if ( (*($5 + [272]) & [1]) ){ goto $label$153 }
	
.LABEL $label$154
	if ( (*($5 + [96]) & $6) ){ goto $label$152 }
	goto $label$151 
	
.LABEL $label$153
	CALL _ZdlPv(*($5 + [280]))
	if ( ((*($5 + [96]) & $6) == 0) ){ goto $label$151 }
	
.LABEL $label$152
	CALL _ZdlPv(*(($5 + [104])))
	$6 = [1]
	if ( ((*($5 + [256]) & [1]) == 0) ){ goto $label$150 }
	goto $label$149 
	
.LABEL $label$151
	$6 = [1]
	if ( (*($5 + [256]) & [1]) ){ goto $label$149 }
	
.LABEL $label$150
	if ( (*($5 + [240]) & $6) ){ goto $label$148 }
	goto $label$147 
	
.LABEL $label$149
	CALL _ZdlPv(*($5 + [264]))
	if ( ((*($5 + [240]) & $6) == 0) ){ goto $label$147 }
	
.LABEL $label$148
	CALL _ZdlPv(*($5 + [248]))
	$6 = [1]
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$146 }
	goto $label$145 
	
.LABEL $label$147
	$6 = [1]
	if ( (*($5 + [112]) & [1]) ){ goto $label$145 }
	
.LABEL $label$146
	if ( (*($5 + [224]) & $6) ){ goto $label$144 }
	goto $label$143 
	
.LABEL $label$145
	CALL _ZdlPv(*(($5 + [120])))
	if ( ((*($5 + [224]) & $6) == 0) ){ goto $label$143 }
	
.LABEL $label$144
	CALL _ZdlPv(*($5 + [232]))
	$6 = [1]
	if ( ((*($5 + [208]) & [1]) == 0) ){ goto $label$142 }
	goto $label$141 
	
.LABEL $label$143
	$6 = [1]
	if ( (*($5 + [208]) & [1]) ){ goto $label$141 }
	
.LABEL $label$142
	if ( (*($5 + [192]) & $6) ){ goto $label$140 }
	goto $label$139 
	
.LABEL $label$141
	CALL _ZdlPv(*($5 + [216]))
	if ( ((*($5 + [192]) & $6) == 0) ){ goto $label$139 }
	
.LABEL $label$140
	CALL _ZdlPv(*($5 + [200]))
	$6 = [1]
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$139
	$6 = [1]
	if ( (*($5 + [128]) & [1]) ){ goto $label$137 }
	
.LABEL $label$138
	if ( (*($5 + [176]) & $6) ){ goto $label$136 }
	goto $label$135 
	
.LABEL $label$137
	CALL _ZdlPv(*(($5 + [136])))
	if ( ((*($5 + [176]) & $6) == 0) ){ goto $label$135 }
	
.LABEL $label$136
	CALL _ZdlPv(*($5 + [184]))
	$6 = [1]
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$134 }
	goto $label$133 
	
.LABEL $label$135
	$6 = [1]
	if ( (*($5 + [160]) & [1]) ){ goto $label$133 }
	
.LABEL $label$134
	if ( ((*($5 + [144]) & $6) == 0) ){ goto $label$131 }
	goto $label$132 
	
.LABEL $label$133
	CALL _ZdlPv(*($5 + [168]))
	if ( ((*($5 + [144]) & $6) == 0) ){ goto $label$131 }
	
.LABEL $label$132
	CALL _ZdlPv(*($5 + [152]))
	
.LABEL $label$131
	$7 = *($0)
	*(($5 + [16])) = [0]
	*($5 + [728]) = (int_64)3617214756542218240
	*($5 + [720]) = $7
	*($5 + [8]) = (int_64)0
	$6 = CALL $94([9504])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$185 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$188 }
	*($5 + [8]) = ($6 << [1])
	$8 = (($5 + [8]) | [1])
	if ( $6 ){ goto $label$187 }
	goto $label$186 
	
.LABEL $label$188
	$10 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($5 + [8]) = ($10 | [1])
	*($5 + [16]) = $8
	*($5 + [12]) = $6
	
.LABEL $label$187
	CALL memcpy($8, [9504], $6)
	
.LABEL $label$186
	*(($8 + $6)) = [0]
	CALL $75(($5 + [20]), ($5 + [768]))
	*($5 + [40]) = $2
	*($5 + [32]) = $1
	CALL $24($7, ($5 + [720]), ($5 + [8]))
	if ( (*($5 + [20]) & [1]) ){ goto $label$190 }
	if ( (*($5 + [8]) & [1]) ){ goto $label$189 }
	goto $label$184 
	
.LABEL $label$190
	CALL _ZdlPv(*(($5 + [28])))
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$184 }
	
.LABEL $label$189
	CALL _ZdlPv(*($5 + [16]))
	$6 = [1]
	if ( ((*($5 + [768]) & [1]) == 0) ){ goto $label$183 }
	goto $label$182 
	
.LABEL $label$185
	CALL $74(($5 + [8]))
	
.LABEL $label$184
	$6 = [1]
	if ( (*($5 + [768]) & [1]) ){ goto $label$182 }
	
.LABEL $label$183
	if ( (*($5 + [488]) & $6) ){ goto $label$181 }
	goto $label$180 
	
.LABEL $label$182
	CALL _ZdlPv(*(($5 + [776])))
	if ( ((*($5 + [488]) & $6) == 0) ){ goto $label$180 }
	
.LABEL $label$181
	CALL _ZdlPv(*(($5 + [496])))
	$6 = [1]
	if ( ((*($5 + [560]) & [1]) == 0) ){ goto $label$179 }
	goto $label$178 
	
.LABEL $label$180
	$6 = [1]
	if ( (*($5 + [560]) & [1]) ){ goto $label$178 }
	
.LABEL $label$179
	if ( (*($5 + [576]) & $6) ){ goto $label$177 }
	goto $label$176 
	
.LABEL $label$178
	CALL _ZdlPv(*(($5 + [568])))
	if ( ((*($5 + [576]) & $6) == 0) ){ goto $label$176 }
	
.LABEL $label$177
	CALL _ZdlPv(*(($5 + [584])))
	if ( ((*($5 + [688]) & [1]) == 0) ){ goto $label$175 }
	goto $label$174 
	
.LABEL $label$176
	if ( (*($5 + [688]) & [1]) ){ goto $label$174 }
	
.LABEL $label$175
	$global$0 = ($5 + [784])
	return 
	
.LABEL $label$174
	CALL _ZdlPv(*(($5 + [696])))
	$global$0 = ($5 + [784])
	(unreachable)
}