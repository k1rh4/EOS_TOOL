(data (i32.const 8192) "already initialized\00")
(data (i32.const 8212) "can not find any relay authority\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8331) "relay not found\00")
(data (i32.const 8347) "lwcls is valid, can\'t remove\00")
(data (i32.const 8376) "can not delete the last section\00")
(data (i32.const 8408) "next section must be valid\00")
(data (i32.const 8435) "-- delete block1 --\00")
(data (i32.const 8455) "-- delete block2 --\00")
(data (i32.const 8475) "-- delete block3 --\00")
(data (i32.const 8495) "add\00")
(data (i32.const 8499) "relay already exist\00")
(data (i32.const 8519) "remove\00")
(data (i32.const 8526) "relay not exist\00%lu\00")
(data (i32.const 8546) "unknown action\00")
(data (i32.const 8561) "the block number should be integral multiple of 1024\00")
(data (i32.const 8614) "the block\'s blockroot_merkle already exist\00")
(data (i32.const 8657) "section root header can not contain new_producers\00")
(data (i32.const 8707) "last_section is not valid\00")
(data (i32.const 8733) "header_block_num should larger then last_section.last + 1\00")
(data (i32.const 8791) "unable to find key\00")
(data (i32.const 8810) "schedule_version not equal to previous one\00")
(data (i32.const 8853) "-- new section block added: % --\00")
(data (i32.const 8886) "new header number must larger then section root number\00")
(data (i32.const 8941) "unlinkable block\00")
(data (i32.const 8958) "block repeated: \00")
(data (i32.const 8975) "-- block deleted: from % back to % --\00")
(data (i32.const 9013) " header.new_producers version invalid\00")
(data (i32.const 9051) "-- block added: % --\00")
(data (i32.const 9072) "internal error: block_header_state::sig_digest\00")
(data (i32.const 9119) "producer schedule id not found\00")
(data (i32.const 9150) "producer not found: \00")
(data (i32.const 9171) "invalid number\00")
(data (i32.const 9186) "write\00")
(data (i32.const 9192) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9246) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9294) "error reading iterator\00")
(data (i32.const 9317) "read\00")
(data (i32.const 9322) "get\00")
(data (i32.const 9328) "t$\00\00")
(data (i32.const 9332) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9365) "eosio")
(data (i32.const 9370) "string is too long to be a valid name\00")
(data (i32.const 9408) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9475) "character is not in allowed character set for names\00")
(data (i32.const 9527) "singleton does not exist\00")
(data (i32.const 9552) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9603) "cannot pass end iterator to modify\00")
(data (i32.const 9638) "object passed to modify is not in multi_index\00")
(data (i32.const 9684) "cannot modify objects in table of another contract\00")
(data (i32.const 9735) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9794) "cannot create objects in table of another contract\00")
(data (i32.const 9845) "cannot pass end iterator to erase\00")
(data (i32.const 9879) "cannot increment end iterator\00")
(data (i32.const 9909) "object passed to erase is not in multi_index\00")
(data (i32.const 9954) "cannot erase objects in table of another contract\00")
(data (i32.const 10004) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10057) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18528) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memcpy" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$2 (param i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "has_auth" (func $fimport$4 (param i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "assert_recover_key" (func $fimport$8 (param i32 i32 i32 i32 i32)))
(import "env" "require_auth" (func $fimport$9 (param i64)))
(import "env" "prints_l" (func $fimport$10 (param i32 i32)))
(import "env" "printui" (func $fimport$11 (param i64)))
(import "env" "prints" (func $fimport$12 (param i32)))
(import "env" "db_previous_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$14 (param i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "action_data_size" (func $fimport$18 (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$22 (param i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $78))
(export "_ZdlPv" (func $125))
(export "_Znwj" (func $123))
(export "_Znaj" (func $124))
(export "_ZdaPv" (func $126))
(export "_ZnwjSt11align_val_t" (func $127))
(export "_ZnajSt11align_val_t" (func $128))
(export "_ZdlPvSt11align_val_t" (func $129))
(export "_ZdaPvSt11align_val_t" (func $130))
(table $0 11 11 anyfunc)
(elem (i32.const 1) $65 $68 $61 $77 $36 $12 $62 $13 $146 $148)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18608))
(global $global$2 i32 (i32.const 18608))


void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $142($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9317])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9317])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9317])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9317])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [24]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$0 = CALL $101(CALL $100($0, ($1 + [28])), ($1 + [40]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [4])
	if ( ((uint_32)$3 <= (uint_32)int_32(($4 - $5) >> [4])) ){ goto $label$8 }
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$6 = ($4 + [-16])
	$7 = *(($4 + [-12]))
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$4 = $6
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$9 }
	$4 = *($0)
	goto $label$6 
	
.LABEL $label$8
	$8 = int_32($4 >> [4])
	$4 = (*($0 + [4]) - $5)
	$6 = ($1 + $4)
	$9 = ( $6 ? $2 : ((uint_32)$3 > (uint_32)$8) )
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$11 }
	$10 = ($9 - $1)
	$4 = [0]
	
.LOOP $label$12:
	$7 = ($1 + $4)
	*(($11 = ($5 + $4))) = *($7)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$13 }
	CALL $95(($11 + [4]), *(($7 + [4])), *(($7 + [8])))
	
.LABEL $label$13
	$4 = ($4 + [16])
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$12 }
	$5 = ($5 + $4)
	
.LABEL $label$11
	if ( ((uint_32)$3 <= (uint_32)$8) ){ goto $label$14 }
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$4 }
	$0 = ($0 + [4])
	$1 = *($0)
	
.LOOP $label$15:
	*($1 + [4]) = [0]
	*(($5 = ($1 + [8]))) = (int_64)0
	*($1) = *($6)
	$10 = ($6 + [4])
	$11 = ($6 + [8])
	$4 = (*($11) - *($10))
	if ( ($4 == 0) ){ goto $label$16 }
	$3 = ($1 + [4])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL _Znwj($4)
	*($3) = $7
	*(($1 + [12])) = ($7 + $4)
	*($5) = $7
	$4 = *($10)
	$1 = (*($11) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($7, $4, $1)
	*($5) = (*($5) + $1)
	
.LABEL $label$16
	$1 = (*($0) + [16])
	*($0) = $1
	$6 = ($6 + [16])
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$14
	$7 = ($0 + [4])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($1 + [-16])
	$6 = *(($1 + [-12]))
	if ( ($6 == 0) ){ goto $label$19 }
	*(($1 + [-8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$1 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$18 }
	
.LABEL $label$17
	*($7) = $5
	return (unreachable)
	
.LABEL $label$7
	$4 = $5
	
.LABEL $label$6
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = [268435455]
	if ( ((uint_32)int_32($4 >> [4]) > (uint_32)[134217726]) ){ goto $label$20 }
	$5 = $3
	$4 = int_32($4 >> [3])
	if ( ($4 <= $3) ){ goto $label$20 }
	$5 = $4
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$20
	$5 = ($5 << [4])
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$21:
	*($4 + [4]) = [0]
	*(($6 = ($4 + [8]))) = (int_64)0
	*($4) = *($1)
	$10 = ($1 + [4])
	$11 = ($1 + [8])
	$5 = (*($11) - *($10))
	if ( ($5 == 0) ){ goto $label$22 }
	$3 = ($4 + [4])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = CALL _Znwj($5)
	*($3) = $7
	*(($4 + [12])) = ($7 + $5)
	*($6) = $7
	$5 = *($10)
	$4 = (*($11) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($7, $5, $4)
	*($6) = (*($6) + $4)
	
.LABEL $label$22
	$4 = (*($4) + [16])
	*(($4 = ($0 + [4]))) = $4
	$1 = ($1 + [16])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$21 }
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $142($3)
	
.LABEL $label$2
	CALL $142($3)
	
.LABEL $label$1
	CALL $142($0)
	(unreachable)
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $142($0)
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[48]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[48])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[89478486]) ){ goto $label$3 }
	$3 = [89478485]
	$2 = ((int_32)($2 - $4) / (int_32)[48])
	if ( ((uint_32)$2 > (uint_32)[44739241]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$4 = CALL _Znwj(((int_32)$3 * (int_32)[48]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($0 = ($3 + [8]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*($0) = [0]
	$3 = (*($2) + [48])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $142($0)
	
.LABEL $label$2
	$7 = ($4 + ((int_32)$3 * (int_32)[48]))
	$5 = ($4 + ((int_32)$5 * (int_32)[48]))
	$3 = $5
	
.LOOP $label$8:
	*(($2 = ($3 + [8]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [48])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($4 + ((int_32)$6 * (int_32)[48]))
	$3 = *($0)
	$6 = ($0 + [4])
	$1 = (*($6) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-48]) * (int_32)[48]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9317])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *(($0 + [8]))), [9322])
	$2 = *($5)
	$6 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($6 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($6 & [128]) ){ goto $label$1 }
	*($1 + [8]) = $4
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) > (uint_32)[32]), [9317])
	$6 = ($0 + [4])
	CALL memcpy(($1 + [12]), *($6), [33])
	*($6) = (*($6) + [33])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [32]) = [0]
	*($2 + [24]) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	$4 = CALL _Znwj($3)
	*(($2 + [32])) = ($4 + $3)
	*($2 + [24]) = $4
	*($2 + [28]) = $4
	$5 = *($1)
	$3 = (*(($1 + [4])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $5, $3)
	*($2 + [28]) = ($4 + $3)
	
.LABEL $label$3
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = int_32($3 >> [5])
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ($4 << [5]))
	*($2) = $3
	*($2 + [4]) = $3
	$5 = *(($1 + [16]))
	$4 = (*(($1 + [20])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($3, $5, $4)
	*($2 + [4]) = ($3 + $4)
	
.LABEL $label$4
	*($2 + [16]) = *(($1 + [32]))
	*($2 + [40]) = *($1 + [40])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$1 = *((*($0) + $1))
	
.LABEL $label$5
	CALL void $0((int_32 ($2 + [24])), (int_32 $2), (int_32 ($2 + [40])), (int_32 $1))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$6 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$1 = *($2 + [24])
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [28]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $142(($2 + [24]))
	
.LABEL $label$1
	CALL $142($2)
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $86($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $134($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $134($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $131($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2) = (int_64)0
	$3 = [0]
	*($2 + [8]) = [0]
	$4 = *($1)
	$5 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = int_32($5 >> [5])
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$2 }
	$3 = CALL _Znwj($5)
	*(($2 + [8])) = ($3 + ($6 << [5]))
	*($2) = $3
	*($2 + [4]) = $3
	$6 = *(($1 + [8]))
	$5 = (*(($1 + [12])) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($3, $6, $5)
	$5 = ($3 + $5)
	*($2 + [4]) = $5
	$6 = $3
	$3 = $5
	$7 = $6
	goto $label$3 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$3 
	
.LABEL $label$4
	$6 = $3
	$7 = $3
	
.LABEL $label$3
	$8 = *(($1 + [24]))
	*($2 + [16]) = $8
	$9 = *($1 + [32])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$5 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$6 }
	$1 = *((*($5) + $1))
	
.LABEL $label$6
	*($2 + [32]) = [0]
	*($2 + [24]) = (int_64)0
	$0 = ($3 - $7)
	if ( ($0 == 0) ){ goto $label$7 }
	$7 = int_32($0 >> [5])
	if ( ((uint_32)$7 >= (uint_32)[134217728]) ){ goto $label$1 }
	$0 = CALL _Znwj($0)
	*(($2 + [32])) = ($0 + ($7 << [5]))
	*($2 + [24]) = $0
	*($2 + [28]) = $0
	$3 = ($3 - $6)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($0, $6, $3)
	*($2 + [28]) = ($0 + $3)
	
.LABEL $label$7
	*($2 + [40]) = $8
	CALL void $5((int_32 $4), (int_64 ($2 + [24])), (int_32 $9), (int_64 $1))
	$1 = *($2 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	*($2 + [28]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $142($2)
	
.LABEL $label$1
	CALL $142(($2 + [24]))
	(unreachable)
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[48])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($5 - $6) / (int_32)[48])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$1 }
	$6 = [89478485]
	$2 = ((int_32)$5 / (int_32)[48])
	if ( ((uint_32)$2 > (uint_32)[44739241]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$6 * (int_32)[48])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[48]) * (int_32)[48]))
	goto $label$3 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $6) / (int_32)[48])
	$7 = ( ($1 + ((int_32)$3 * (int_32)[48])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	$8 = ((int_32)$5 / (int_32)[48])
	if ( ($5 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[48]) * (int_32)[48]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + ((int_32)$8 * (int_32)[48]))
	return (unreachable)
	
.LABEL $label$1
	CALL $142($0)
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $133($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $154($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10112])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $154($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( (*(($0 + [196])) == 0) ){ goto $label$2 }
	$2 = *(($0 + [184]))
	$1 = *(($0 + [188]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($1 - $2) / (int_32)[48]))
	$4 = [159]
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$4:
	$4 = ($4 + [41])
	$3 = *($2 + [8])
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	$2 = ($2 + [48])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [155]
	
.LABEL $label$1
	$2 = *(($0 + [200]))
	$5 = *(($0 + [204]))
	$3 = (CASTING uint_64)(uint_32 int_32(($5 - $2) >> [4]))
	
.LOOP $label$6:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = *($2 + [4])
	$1 = *(($2 + [8]))
	$4 = ((($4 + $1) + [2]) - $6)
	$3 = (CASTING uint_64)(uint_32 ($1 - $6))
	
.LOOP $label$9:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = ($4 + [74])
	$1 = *($0 + [296])
	$2 = *(($0 + [300]))
	$6 = ($2 - $1)
	$3 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	
.LOOP $label$10:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$11 }
	$4 = (($6 & [-32]) + $4)
	
.LABEL $label$11
	return ($4 + [42])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[240]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[240])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[17895698]) ){ goto $label$3 }
	$3 = [17895697]
	$2 = ((int_32)($2 - $4) / (int_32)[240])
	if ( ((uint_32)$2 > (uint_32)[8947847]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[240]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($3 = CALL memset($3, [0], [240])) + [132]) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = [0]
	*(($3 + [148])) = [0]
	*($3 + [152 align=4]) = (int_64)0
	*(($3 + [160])) = [0]
	$3 = (*($2) + [240])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $142($0)
	
.LABEL $label$2
	$7 = ($2 + ((int_32)$3 * (int_32)[240]))
	$8 = ($2 + ((int_32)$5 * (int_32)[240]))
	$3 = $8
	
.LOOP $label$8:
	*((($3 = CALL memset($3, [0], [240])) + [8])) = (int_64)0
	*($3) = [0]
	*(($3 + [132])) = [0]
	*(($3 + [148])) = [0]
	*(($3 + [152])) = (int_64)0
	*(($3 + [160])) = [0]
	$3 = ($3 + [240])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$9 = ($2 + ((int_32)$6 * (int_32)[240]))
	$3 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$10 }
	$11 = ($3 - $10)
	$2 = [0]
	
.LOOP $label$11:
	$1 = ($10 + $2)
	$3 = ($8 + $2)
	CALL memcpy(($3 + [-240]), ($1 + [-240]), [132])
	*(($6 = ($3 + [-92]))) = [0]
	*(($4 = ($3 + [-108]))) = [0]
	if ( (*(($1 + [-92])) == 0) ){ goto $label$12 }
	*(($5 = ($3 + [-104]))) = (int_64)0
	*(($12 = ($3 + [-96]))) = [0]
	$13 = ($1 + [-104])
	*($5) = *($13)
	$5 = ($1 + [-96])
	*($12) = *($5)
	*($4) = *(($1 + [-108]))
	*($6) = [1]
	*($5) = [0]
	*($13) = (int_64)0
	
.LABEL $label$12
	*(($6 = ($3 + [-88]))) = (int_64)0
	*(($4 = ($3 + [-80]))) = [0]
	$5 = ($1 + [-88])
	*($6) = *($5)
	$6 = ($1 + [-80])
	*($4) = *($6)
	*($6) = [0]
	*($5) = (int_64)0
	CALL memcpy(($3 + [-76]), ($1 + [-76]), [66])
	$2 = ($2 + [-240])
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$11 }
	$8 = ($8 + $2)
	$3 = *(($0 + [4]))
	$13 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$13 = $3
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = $3
	$5 = ($4 + [-88])
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$15 }
	$12 = ($4 + [-84])
	$3 = *($12)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$19 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$19
	$3 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$18 }
	$3 = *($5)
	goto $label$16 
	
.LABEL $label$17
	$3 = $6
	
.LABEL $label$16
	*($12) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$15
	$3 = ($4 + [-240])
	if ( (*(($4 + [-92])) == 0) ){ goto $label$20 }
	$1 = *(($4 + [-104]))
	if ( ($1 == 0) ){ goto $label$20 }
	*(($4 + [-100])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$20
	if ( ((int_32)$3 != (int_32)$13) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($13 == 0) ){ goto $label$1 }
	CALL _ZdlPv($13)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $131 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[240])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$1 }
	CALL $122($0, ($1 - $4))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$4 <= (uint_32)$1) ){ goto $label$2 }
	$5 = ($3 + ((int_32)$1 * (int_32)[240]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = $2
	$7 = ($6 + [-88])
	$3 = *($7)
	if ( ($3 == 0) ){ goto $label$5 }
	$8 = ($6 + [-84])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = ($2 + [-16])
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$9 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$2 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$2 = *($7)
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($8) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = ($6 + [-240])
	if ( (*(($6 + [-92])) == 0) ){ goto $label$10 }
	$1 = *(($6 + [-104]))
	if ( ($1 == 0) ){ goto $label$10 }
	*(($6 + [-100])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	*(($0 + [4])) = $5
	
.LABEL $label$2
}

void .FUNC $136 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $133($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9186])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[3]), [9186])
	$7 = ($0 + [4])
	CALL memcpy(*($7), $6, [4])
	$4 = (*($7) + [4])
	*($7) = $4
	$6 = ($6 + [4])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [9322])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	CALL $121($1, (CASTING uint_32)(uint_64 $5))
	$3 = *($1 + [4])
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	$4 = ($2 + [16])
	$7 = ($2 + [20])
	$6 = ($2 + [24])
	$1 = ($2 + [28])
	$9 = ($2 + [32])
	$10 = ($2 + [36])
	$11 = ($2 + [40])
	$12 = ($2 + [44])
	$13 = ($2 + [48])
	$14 = ($2 + [52])
	$15 = ($2 + [56])
	$16 = ($2 + [60])
	$17 = ($2 + [64])
	$18 = ($2 + [68])
	$19 = ($2 + [72])
	$20 = ($2 + [76])
	$21 = ($2 + [80])
	$22 = ($2 + [88])
	$23 = ($2 + [84])
	$24 = ($2 + [92])
	$25 = ($2 + [96])
	$26 = ($2 + [100])
	$27 = ($2 + [104])
	$28 = ($2 + [108])
	$29 = ($2 + [112])
	$30 = ($2 + [116])
	$31 = ($2 + [120])
	$32 = ($2 + [124])
	$33 = ($2 + [128])
	$34 = ($2 + [132])
	$35 = ($2 + [136])
	$36 = ($2 + [140])
	$37 = ($2 + [144])
	$38 = ($2 + [148])
	$39 = ($2 + [152])
	$40 = ($2 + [156])
	$41 = ($2 + [164])
	$42 = ($2 + [160])
	$43 = ($2 + [168])
	$44 = ($2 + [240])
	$45 = ($2 + [244])
	$46 = ($2 + [252])
	$47 = ($2 + [256])
	$48 = ($2 + [260])
	$49 = ($2 + [264])
	$50 = ($2 + [268])
	
.LOOP $label$3:
	CALL $21($0, $8)
	*($2) = $0
	*($4) = ($8 + [166])
	*($7) = ($8 + [167])
	*($6) = ($8 + [168])
	*($1) = ($8 + [169])
	*($9) = ($8 + [170])
	*($10) = ($8 + [171])
	*($11) = ($8 + [172])
	*($12) = ($8 + [173])
	*($13) = ($8 + [174])
	*($14) = ($8 + [175])
	*($15) = ($8 + [176])
	*($16) = ($8 + [177])
	*($17) = ($8 + [178])
	*($18) = ($8 + [179])
	*($19) = ($8 + [180])
	*($20) = ($8 + [181])
	*($21) = ($8 + [182])
	*($2 + [12]) = ($8 + [165])
	*($2 + [8]) = ($8 + [164])
	*($22) = ($8 + [184])
	*($23) = ($8 + [183])
	*($24) = ($8 + [185])
	*($25) = ($8 + [186])
	*($26) = ($8 + [187])
	*($27) = ($8 + [188])
	*($28) = ($8 + [189])
	*($29) = ($8 + [190])
	*($30) = ($8 + [191])
	*($31) = ($8 + [192])
	*($32) = ($8 + [193])
	*($33) = ($8 + [194])
	*($34) = ($8 + [195])
	*($35) = ($8 + [196])
	*($36) = ($8 + [197])
	*($37) = ($8 + [198])
	*($38) = ($8 + [199])
	*($39) = ($8 + [200])
	*($40) = ($8 + [201])
	*($41) = ($8 + [203])
	*($42) = ($8 + [202])
	*($43) = ($8 + [204])
	*((($2 + [8]) + [164])) = ($8 + [205])
	*((($2 + [8]) + [168])) = ($8 + [206])
	*((($2 + [8]) + [172])) = ($8 + [207])
	*((($2 + [8]) + [176])) = ($8 + [208])
	*((($2 + [8]) + [180])) = ($8 + [209])
	*((($2 + [8]) + [184])) = ($8 + [210])
	*((($2 + [8]) + [188])) = ($8 + [211])
	*((($2 + [8]) + [192])) = ($8 + [212])
	*((($2 + [8]) + [196])) = ($8 + [213])
	*((($2 + [8]) + [200])) = ($8 + [214])
	*((($2 + [8]) + [204])) = ($8 + [215])
	*((($2 + [8]) + [208])) = ($8 + [216])
	*((($2 + [8]) + [212])) = ($8 + [217])
	*((($2 + [8]) + [216])) = ($8 + [218])
	*((($2 + [8]) + [220])) = ($8 + [219])
	*((($2 + [8]) + [224])) = ($8 + [220])
	*($44) = ($8 + [222])
	*((($2 + [8]) + [228])) = ($8 + [221])
	*($45) = ($8 + [223])
	*((($2 + [8]) + [240])) = ($8 + [224])
	*($46) = ($8 + [225])
	*($47) = ($8 + [226])
	*($48) = ($8 + [227])
	*($49) = ($8 + [228])
	*($50) = ($8 + [229])
	CALL $22(($2 + [8]), $2)
	$8 = ($8 + [240])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [272])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	*((($2 = CALL memcpy($0, $1, [132])) + [148])) = [0]
	*($2 + [132]) = [0]
	if ( (*(($1 + [148])) == 0) ){ goto $label$2 }
	*(($3 = ($2 + [136]))) = [0]
	*(($2 + [140])) = (int_64)0
	*(($2 + [132])) = *($1 + [132])
	$0 = (*(($1 + [140])) - *(($1 + [136])))
	$4 = ((int_32)$0 / (int_32)[48])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$1 }
	$0 = CALL _Znwj($0)
	*(($2 + [136])) = $0
	*(($2 + [144])) = ($0 + ((int_32)$4 * (int_32)[48]))
	*(($4 = ($2 + [140]))) = $0
	$5 = *(($1 + [136]))
	$3 = (*(($1 + [140])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($0, $5, $3)
	*($4) = (*($4) + ((int_32)((uint_32)$3 / (uint_32)[48]) * (int_32)[48]))
	
.LABEL $label$3
	*(($2 + [148])) = [1]
	
.LABEL $label$2
	*($2 + [152 align=4]) = (int_64)0
	*(($2 + [160])) = [0]
	$0 = (*(($1 + [156])) - *($1 + [152]))
	if ( ($0 == 0) ){ goto $label$6 }
	$4 = int_32($0 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$0 = CALL _Znwj($0)
	*(($6 = ($2 + [156]))) = $0
	*(($2 + [160])) = ($0 + ($4 << [4]))
	*(($2 + [152])) = $0
	$7 = *(($1 + [156]))
	$4 = *(($1 + [152]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	*($0 + [4]) = [0]
	*(($3 = ($0 + [8]))) = (int_64)0
	*($0) = *($4)
	$9 = ($4 + [4])
	$8 = ($4 + [8])
	$1 = (*($8) - *($9))
	if ( ($1 == 0) ){ goto $label$8 }
	$10 = ($0 + [4])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL _Znwj($1)
	*($10) = $5
	*(($0 + [12])) = ($5 + $1)
	*($3) = $5
	$1 = *($9)
	$0 = (*($8) - $1)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($5, $1, $0)
	*($3) = (*($3) + $0)
	
.LABEL $label$8
	$0 = (*($6) + [16])
	*($6) = $0
	$4 = ($4 + [16])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	
.LABEL $label$6
	return $2
	
.LABEL $label$5
	CALL $142($10)
	
.LABEL $label$4
	CALL $142(($2 + [152]))
	
.LABEL $label$1
	CALL $142($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$2 }
	*(($1 + [32])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [36]))) = [0]
	*($1 + [28 align=4]) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [36])
	
.LABEL $label$1
	$7 = ($5 + [28])
	*(($1 + [28])) = *($7)
	$8 = ($5 + [36])
	*($6) = *($8)
	*($8) = [0]
	*($7) = (int_64)0
	$6 = *($1 + [40])
	if ( ($6 == 0) ){ goto $label$4 }
	*(($1 + [44])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [48]))) = [0]
	*($1 + [40 align=4]) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$6 = ($1 + [48])
	
.LABEL $label$3
	$7 = ($5 + [40])
	*(($1 + [40])) = *($7)
	$5 = ($5 + [48])
	*($6) = *($5)
	*($5) = [0]
	*($7) = (int_64)0
	$7 = *($1 + [28])
	$6 = *(($1 + [32]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$5 = [25]
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$6 }
	$5 = (($8 & [-8]) + $5)
	
.LABEL $label$6
	$7 = *($1 + [40])
	$6 = *(($1 + [44]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [2]))
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	$5 = (($8 & [-4]) + $5)
	
.LABEL $label$8
	if ( ($5 <= [513]) ){ goto $label$10 }
	$2 = CALL $154($5)
	goto $label$9 
	
.LABEL $label$10
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$9
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $73($3, $1)
	$9 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)-4426590578272108544, *(*($0 + [8])), $9, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$13 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $157($2)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$11 }
	
.LABEL $label$12
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$global$0 = ($3 + [16])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $157($0)
	
.LABEL $label$1
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [880])
	$global$0 = $2
	$3 = *($1 + [32])
	*($2 + [836]) = (((($3 << [24]) | (($3 << [8]) & [16711680])) | ((uint_32($3 >> [8]) & [65280]) | uint_32($3 >> [24]))) + [1])
	CALL $2(($2 + [48]), $1)
	$3 = *($2 + [48])
	CALL sha256($3, (*($2 + [52]) - $3), ($2 + [432]))
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$1 }
	*($2 + [52]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$4 = (($2 + [432]) + [16])
	*(($3 = (($2 + [48]) + [8]))) = *($4)
	*(($5 = (($2 + [48]) + [16]))) = *((($2 + [432]) + [24]))
	*($2 + [48]) = *($2 + [440])
	$6 = *($2 + [432])
	*((($2 + [800]) + [16])) = *($3)
	*((($2 + [800]) + [24])) = *($5)
	*($2 + [808]) = *($2 + [48])
	$3 = *(($1 + [32]))
	$3 = (((($3 << [24]) | (($3 << [8]) & [16711680])) | ((uint_32($3 >> [8]) & [65280]) | uint_32($3 >> [24]))) + [1])
	*($2 + [800]) = ((int_64)((int_64)$6 & (int_64)-4294967296) | (int_64)(CASTING uint_64)(uint_32 ((($3 << [24]) | (($3 << [8]) & [16711680])) | ((uint_32($3 >> [8]) & [65280]) | uint_32($3 >> [24])))))
	$7 = ($0 + [112])
	*($2 + [432]) = (CASTING uint_64)(uint_32 $7)
	$8 = *(CALL $39(($2 + [432])) + [4])
	$9 = *($8 + [8])
	$10 = *($8)
	CALL eosio_assert((uint_64)($10 <= *($2 + [836])), [8886])
	$6 = ((int_64)$9 + (int_64)1)
	CALL eosio_assert(((uint_64)$6 >= (uint_64)*($2 + [836])), [8941])
	$11 = *($2 + [836])
	if ( ((uint_64)$6 <= (uint_64)$11) ){ goto $label$9 }
	$12 = ($0 + [32])
	$3 = CALL $45($12, $11, [8791])
	*((($2 + [432]) + [40])) = *(($3 + [40]))
	*((($2 + [432]) + [32])) = *(($3 + [32]))
	*((($2 + [432]) + [24])) = *(($3 + [24]))
	*($4) = *(($3 + [16]))
	*($2 + [432]) = *($3)
	*($2 + [440]) = *(($3 + [8]))
	CALL $49((($2 + [432]) + [48]), ($3 + [48]))
	CALL memcpy((($2 + [432]) + [212]), ($3 + [212]), [66])
	$6 = *($3 + [288])
	*((($2 + [432]) + [300])) = (int_64)0
	*($2 + [728]) = [0]
	*($2 + [720]) = $6
	$5 = (*(($3 + [300])) - *($3 + [296]))
	if ( ($5 == 0) ){ goto $label$10 }
	$4 = int_32($5 >> [5])
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$5 }
	$5 = CALL _Znwj($5)
	*((($2 + [432]) + [296])) = $5
	*(($2 + [736])) = ($5 + ($4 << [5]))
	*(($4 = (($2 + [432]) + [300]))) = $5
	$13 = *(($3 + [296]))
	$14 = (*(($3 + [300])) - $13)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $13, $14)
	*($4) = (*($4) + $14)
	
.LABEL $label$10
	*((($2 + [432]) + [312])) = *(($3 + [312]))
	*((($2 + [432]) + [328])) = *(($3 + [328]))
	*((($2 + [432]) + [336])) = *(($3 + [336]))
	*((($2 + [432]) + [344])) = *(($3 + [344]))
	*((($2 + [432]) + [352])) = *(($3 + [352]))
	*($2 + [752]) = *($3 + [320])
	$5 = CALL $150(($2 + [800]), ($2 + [448]), [32])
	CALL $141($2, *($2 + [836]))
	$3 = CALL $139($2, [0], [8958])
	$14 = ($3 + [8])
	*(($4 = (($2 + [48]) + [8]))) = *($14)
	*($2 + [48]) = *($3)
	*($3) = (int_64)0
	*($14) = [0]
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), ( *($4) ? (($2 + [48]) | [1]) : (*($2 + [48]) & [1]) ))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$11
	if ( ((*($2) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$12
	if ( ((uint_64)(int_64))(*($2 + [836]) - $10) >= (uint_64)*($0 + [232])) ){ goto $label$13 }
	CALL $50($7, $8)
	
.LABEL $label$13
	$11 = (CASTING uint_64)(uint_32 $12)
	*($2 + [48]) = $11
	if ( ((int_64)*(*(CALL $51(($2 + [48])) + [4])) == (int_64)(CASTING uint_64)(uint_32 (*($2 + [836]) + [-1]))) ){ goto $label$14 }
	
.LOOP $label$15:
	*($2 + [424]) = $12
	*($2 + [428]) = [0]
	$6 = *(CALL $51(($2 + [424])))
	$3 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	$5 = ((int_32)$3) != (int_32)[0]
	CALL eosio_assert($5), [9845])
	CALL eosio_assert($5, [9879])
	$5 = CALL db_next_i64(*($3 + [360]), ($2 + [48]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$16 }
	CALL $14((CASTING uint_32)(uint_64 $6), $5)
	
.LABEL $label$16
	CALL $15($12, $3)
	*($2 + [48]) = $11
	if ( ((int_64)*(*(CALL $51(($2 + [48])) + [4])) != (int_64)(CASTING uint_64)(uint_32 (*($2 + [836]) + [-1]))) ){ goto $label$15 }
	
.LABEL $label$14
	*($2 + [48]) = ($2 + [836])
	CALL $52($7, $8, ($2 + [48]))
	$3 = [8975]
	$6 = *($2 + [836])
	$5 = *([8975])
	if ( ($5 == 0) ){ goto $label$7 }
	
.LOOP $label$17:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$8 }
	CALL prints_l($3, [1])
	$3 = ($3 + [1])
	$5 = *($3)
	if ( $5 ){ goto $label$17 }
	goto $label$7 
	
.LABEL $label$9
	$12 = ($0 + [32])
	$11 = (CASTING uint_64)(uint_32 $12)
	goto $label$2 
	
.LABEL $label$8
	CALL printui($9)
	$3 = ($3 + [1])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$7 }
	
.LOOP $label$18:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$6 }
	CALL prints_l($3, [1])
	$3 = ($3 + [1])
	$5 = *($3)
	if ( $5 ){ goto $label$18 }
	
.LABEL $label$7
	$3 = *($2 + [728])
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	CALL printui($6)
	CALL prints(($3 + [1]))
	$3 = *($2 + [728])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $142(($2 + [728]))
	
.LABEL $label$4
	*(($2 + [732])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$14 = *(($2 + [632]))
	if ( ($14 == 0) ){ goto $label$19 }
	$13 = ($2 + [636])
	$3 = *($13)
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($3 + [-16])
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$23 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$3 = $5
	if ( ((int_32)$14 != (int_32)$5) ){ goto $label$22 }
	$3 = *(($2 + [632]))
	goto $label$20 
	
.LABEL $label$21
	$3 = $14
	
.LABEL $label$20
	*($13) = $14
	CALL _ZdlPv($3)
	
.LABEL $label$19
	if ( (*(($2 + [628])) == 0) ){ goto $label$2 }
	$3 = *(($2 + [616]))
	if ( ($3 == 0) ){ goto $label$2 }
	*(($2 + [620])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	*($2 + [432]) = $11
	$3 = *(CALL $51(($2 + [432])) + [4])
	*((($2 + [432]) + [40])) = *(($3 + [40]))
	*((($2 + [432]) + [32])) = *(($3 + [32]))
	*((($2 + [432]) + [24])) = *(($3 + [24]))
	*(($5 = (($2 + [432]) + [16]))) = *(($3 + [16]))
	*($2 + [440]) = *(($3 + [8]))
	*($2 + [432]) = *($3)
	CALL $49((($2 + [432]) + [48]), ($3 + [48]))
	CALL memcpy((($2 + [432]) + [212]), ($3 + [212]), [66])
	$6 = *($3 + [288])
	*((($2 + [432]) + [300])) = (int_64)0
	*($2 + [728]) = [0]
	*($2 + [720]) = $6
	$14 = ($2 + [728])
	$4 = (*(($3 + [300])) - *($3 + [296]))
	if ( ($4 == 0) ){ goto $label$30 }
	$13 = int_32($4 >> [5])
	if ( ((uint_32)$13 >= (uint_32)[134217728]) ){ goto $label$29 }
	$4 = CALL _Znwj($4)
	*((($2 + [432]) + [296])) = $4
	*(($2 + [736])) = ($4 + ($13 << [5]))
	*(($13 = (($2 + [432]) + [300]))) = $4
	$15 = *(($3 + [296]))
	$16 = (*(($3 + [300])) - $15)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$30 }
	CALL memcpy($4, $15, $16)
	*($13) = (*($13) + $16)
	
.LABEL $label$30
	*(($4 = (($2 + [432]) + [312]))) = *(($3 + [312]))
	*((($2 + [432]) + [328])) = *(($3 + [328]))
	*((($2 + [432]) + [336])) = *(($3 + [336]))
	*((($2 + [432]) + [344])) = *(($3 + [344]))
	*((($2 + [432]) + [352])) = *(($3 + [352]))
	*($2 + [752]) = *($3 + [320])
	CALL eosio_assert((CALL $150($5, ($1 + [32]), [32]) == 0), [8941])
	*(($2 + [104])) = (int_64)0
	*(($2 + [228])) = [0]
	*(($2 + [244])) = [0]
	*(($2 + [248])) = (int_64)0
	*(($2 + [256])) = [0]
	*(($3 = (($2 + [48]) + [304]))) = [0]
	*((($2 + [48]) + [24])) = *($2 + [808])
	*((($2 + [48]) + [32])) = *((($2 + [800]) + [16]))
	*((($2 + [48]) + [40])) = *((($2 + [800]) + [24]))
	*($2 + [96]) = [0]
	*($2 + [344]) = (int_64)0
	*($2 + [48]) = *($2 + [836])
	*($2 + [64]) = *($2 + [800])
	CALL $53($14, $5)
	$5 = *($2 + [344])
	if ( ($5 == 0) ){ goto $label$31 }
	*(($2 + [348])) = $5
	CALL _ZdlPv($5)
	*($3) = [0]
	*(($2 + [344])) = (int_64)0
	
.LABEL $label$31
	$5 = (($2 + [432]) + [296])
	*((($2 + [48]) + [296])) = *($5)
	$14 = (($2 + [432]) + [304])
	$13 = *($14)
	*($14) = [0]
	*($3) = $13
	*($5) = (int_64)0
	*((($2 + [48]) + [312])) = *($4)
	if ( (*(($1 + [148])) == 0) ){ goto $label$36 }
	$3 = ($0 + [72])
	$5 = CALL $46($3, *(($2 + [720])), [8791])
	CALL eosio_assert(((int_32)*($1 + [132]) == (int_32)(*($5 + [8]) + [1])), [9013])
	*($2) = ($2 + [836])
	CALL $54($7, $8, $2)
	$5 = ($0 + [88])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$37 }
	$6 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($3), *(($0 + [80])), (int_64)-5915306442138583040, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$38 }
	CALL $16($3, $4)
	*($2 + [4]) = [0]
	*($2) = $3
	$6 = *(*(CALL $55($2) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$38
	*(($0 + [88])) = $6
	
.LABEL $label$37
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [10057])
	*($2 + [872]) = *($5)
	$6 = *($0)
	*($2 + [44]) = $1
	*($2 + [40]) = ($2 + [872])
	*($2 + [856]) = $6
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$7()), [9794])
	*($2) = $3
	*($2 + [4]) = ($2 + [40])
	*($2 + [8]) = ($2 + [856])
	*(($5 = CALL _Znwj([80])) + [20]) = [0]
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [64]) = $3
	CALL $56($2, $5)
	*($2 + [848]) = $5
	$6 = *($5)
	*($2) = $6
	$14 = *($5 + [68])
	*($2 + [840]) = $14
	$13 = ($0 + [100])
	$4 = *($13)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [104]))) ){ goto $label$35 }
	*($4 + [8]) = $6
	*($4 + [16]) = $14
	*($2 + [848]) = [0]
	*($4) = $5
	*($13) = ($4 + [24])
	$5 = *($2 + [848])
	*($2 + [848]) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$36
	$4 = *($2 + [724])
	$5 = ($2 + [720])
	$3 = *($5)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$34 }
	$6 = *($2 + [836])
	$11 = *($8 + [16])
	if ( (int_64)($11 == 0) ){ goto $label$33 }
	if ( ((uint_64)(int_64))($6 - $11) >= (uint_64)(CASTING uint_64)(uint_32 (*($0 + [232]) + [325]))) ){ goto $label$32 }
	goto $label$28 
	
.LABEL $label$35
	CALL $24(($0 + [96]), ($2 + [848]), $2, ($2 + [840]))
	$5 = *($2 + [848])
	*($2 + [848]) = [0]
	if ( $5 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$34
	$3 = CALL $46(($0 + [72]), (CASTING uint_64)(uint_32 $4), [8791])
	$4 = *(($2 + [724]))
	*($2 + [340]) = $4
	*($2 + [336]) = ( $4 ? *($5) : ((int_32)*($1 + [128]) == (int_32)*($3 + [8])) )
	goto $label$24 
	
.LABEL $label$33
	if ( (uint_64)((int_64))($6 - $10) <= *($0 + [232])) ){ goto $label$28 }
	
.LABEL $label$32
	$5 = $3
	if ( *($8 + [24]) ){ goto $label$27 }
	CALL $57($7, $8)
	$3 = *(($2 + [724]))
	$5 = *(($2 + [720]))
	goto $label$27 
	
.LABEL $label$29
	CALL $142($14)
	
.LABEL $label$28
	$5 = $3
	
.LABEL $label$27
	*($2 + [340]) = $3
	*($2 + [336]) = $5
	goto $label$24 
	
.LABEL $label$26
	$4 = *(($5 + [12]))
	if ( ($4 == 0) ){ goto $label$39 }
	*(($5 + [16])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$39
	CALL _ZdlPv($5)
	
.LABEL $label$25
	*($2) = (CASTING uint_64)(uint_32 $3)
	$14 = ($0 + [80])
	$4 = ($0 + [72])
	if ( (uint_64)((int_64))(*(*(CALL $55($2) + [4])) - *(CALL $16($3, CALL $fimport$5(*($4), *($14), (int_64)-5915306442138583040, (int_64)0)))) <= (int_64)10) ){ goto $label$40 }
	$5 = [0]
	$4 = CALL db_lowerbound_i64(*($4), *($14), (int_64)-5915306442138583040, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$41 }
	$5 = CALL $16($3, $4)
	
.LABEL $label$41
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [9845])
	CALL eosio_assert($4, [9879])
	$4 = CALL db_next_i64(*($5 + [68]), $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$42 }
	CALL $16($3, $4)
	
.LABEL $label$42
	CALL $17($3, $5)
	
.LABEL $label$40
	*($2 + [340]) = *($2 + [872])
	*($2 + [336]) = *(($2 + [720]))
	
.LABEL $label$24
	CALL $26(($2 + [96]), $1)
	$5 = CALL memcpy(($2 + [260]), ($1 + [164]), [66])
	$3 = *($2 + [336])
	$6 = *((($2 + [48]) + [56]))
	if ( ((int_64)$6 != (int_64)*((($2 + [432]) + [56]))) ){ goto $label$44 }
	if ( ((int_32)$3 != (int_32)*(($2 + [720]))) ){ goto $label$44 }
	$3 = ($2 + [752])
	*(($2 + [400])) = *(($3 + [32]))
	*(($2 + [392])) = *(($3 + [24]))
	*(($2 + [384])) = *(($3 + [16]))
	*(($2 + [376])) = *(($3 + [8]))
	*($2 + [368]) = *($3)
	$3 = ($2 + [368])
	goto $label$43 
	
.LABEL $label$44
	CALL $25($2, $0, (CASTING uint_64)(uint_32 $3), $6)
	*(($2 + [400])) = *(($2 + [32]))
	*(($2 + [392])) = *(($2 + [24]))
	*(($2 + [384])) = *(($2 + [16]))
	*(($2 + [376])) = *(($2 + [8]))
	*($2 + [368]) = *($2)
	$3 = ($2 + [368])
	
.LABEL $label$43
	CALL $28($2, $0, ($2 + [48]))
	CALL assert_recover_key($2, $5, [66], $3, [34])
	$6 = *($0)
	*($2 + [840]) = ($2 + [48])
	*($2 + [872]) = $6
	CALL eosio_assert(((int_64)*($0 + [32]) == (int_64)CALL $fimport$7()), [9794])
	*($2 + [856]) = $12
	*($2 + [860]) = ($2 + [840])
	*($2 + [864]) = ($2 + [872])
	*(($3 = CALL _Znwj([368])) + [56]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [180]) = [0]
	*($3 + [196]) = [0]
	*($3 + [200 align=4]) = (int_64)0
	*($3 + [208]) = [0]
	*($3 + [296 align=4]) = (int_64)0
	*($3 + [304]) = [0]
	*($3 + [356]) = $12
	CALL $58(($2 + [856]), $3)
	*($2 + [40]) = $3
	$6 = *($3)
	*($2 + [856]) = $6
	$12 = *($3 + [360])
	*($2 + [848]) = $12
	$4 = ($0 + [60])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [64]))) ){ goto $label$47 }
	*($5 + [8]) = $6
	*($5 + [16]) = $12
	*($2 + [40]) = [0]
	*($5) = $3
	*($4) = ($5 + [24])
	$14 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( ($14 == 0) ){ goto $label$45 }
	goto $label$46 
	
.LABEL $label$47
	CALL $30(($0 + [56]), ($2 + [40]), ($2 + [856]), ($2 + [848]))
	$14 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( ($14 == 0) ){ goto $label$45 }
	
.LABEL $label$46
	$3 = *($14 + [296])
	if ( ($3 == 0) ){ goto $label$48 }
	*(($14 + [300])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$48
	$4 = *(($14 + [200]))
	if ( ($4 == 0) ){ goto $label$49 }
	$13 = ($14 + [204])
	$3 = *($13)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$51 }
	
.LOOP $label$52:
	$5 = ($3 + [-16])
	$12 = *(($3 + [-12]))
	if ( ($12 == 0) ){ goto $label$53 }
	*(($3 + [-8])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$53
	$3 = $5
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$52 }
	$3 = *(($14 + [200]))
	goto $label$50 
	
.LABEL $label$51
	$3 = $4
	
.LABEL $label$50
	*($13) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$49
	if ( (*(($14 + [196])) == 0) ){ goto $label$54 }
	$3 = *(($14 + [184]))
	if ( ($3 == 0) ){ goto $label$54 }
	*(($14 + [188])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$54
	CALL _ZdlPv($14)
	
.LABEL $label$45
	$3 = CALL $46(($0 + [72]), *($2 + [336]), [8791])
	*($2 + [860]) = $1
	*($2 + [864]) = ($3 + [8])
	*($2 + [856]) = ($2 + [836])
	CALL $59($7, $8, ($2 + [856]))
	CALL $60($0)
	$3 = [9051]
	$6 = *($2 + [836])
	$5 = *([9051])
	if ( ($5 == 0) ){ goto $label$58 }
	
.LOOP $label$59:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$57 }
	CALL prints_l($3, [1])
	$3 = ($3 + [1])
	$5 = *($3)
	if ( $5 ){ goto $label$59 }
	
.LABEL $label$58
	$3 = *(($2 + [344]))
	if ( ($3 == 0) ){ goto $label$55 }
	goto $label$56 
	
.LABEL $label$57
	CALL printui($6)
	CALL prints(($3 + [1]))
	$3 = *(($2 + [344]))
	if ( ($3 == 0) ){ goto $label$55 }
	
.LABEL $label$56
	*(($2 + [348])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$55
	$0 = *(($2 + [248]))
	if ( ($0 == 0) ){ goto $label$60 }
	$4 = ($2 + [252])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$62 }
	
.LOOP $label$63:
	$5 = ($3 + [-16])
	$12 = *(($3 + [-12]))
	if ( ($12 == 0) ){ goto $label$64 }
	*(($3 + [-8])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$64
	$3 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$63 }
	$3 = *(($2 + [248]))
	goto $label$61 
	
.LABEL $label$62
	$3 = $0
	
.LABEL $label$61
	*($4) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$60
	if ( (*(($2 + [244])) == 0) ){ goto $label$65 }
	$3 = *(($2 + [232]))
	if ( ($3 == 0) ){ goto $label$65 }
	*(($2 + [236])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$65
	$3 = *($2 + [728])
	if ( ($3 == 0) ){ goto $label$66 }
	*(($2 + [732])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$66
	$0 = *(($2 + [632]))
	if ( ($0 == 0) ){ goto $label$67 }
	$4 = ($2 + [636])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$69 }
	
.LOOP $label$70:
	$5 = ($3 + [-16])
	$12 = *(($3 + [-12]))
	if ( ($12 == 0) ){ goto $label$71 }
	*(($3 + [-8])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$71
	$3 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$70 }
	$3 = *(($2 + [632]))
	goto $label$68 
	
.LABEL $label$69
	$3 = $0
	
.LABEL $label$68
	*($4) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$67
	if ( (*(($2 + [628])) == 0) ){ goto $label$72 }
	$3 = *(($2 + [616]))
	if ( ($3 == 0) ){ goto $label$72 }
	*(($2 + [620])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$72
	$global$0 = ($2 + [880])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = CALL memcpy($0, $1, [132])
	$0 = *(($2 + [148]))
	if ( ((int_32)$0 != (int_32)*(($1 + [148]))) ){ goto $label$8 }
	if ( ($0 == 0) ){ goto $label$7 }
	*(($2 + [132])) = *(($1 + [132]))
	$3 = ($2 + [136])
	$0 = *($3)
	if ( ($0 == 0) ){ goto $label$5 }
	*(($2 + [140])) = $0
	CALL _ZdlPv($0)
	*(($0 = ($2 + [144]))) = [0]
	*($3) = (int_64)0
	goto $label$4 
	
.LABEL $label$8
	if ( ($0 == 0) ){ goto $label$6 }
	$0 = *(($2 + [136]))
	if ( ($0 == 0) ){ goto $label$9 }
	*(($2 + [140])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	*(($2 + [148])) = [0]
	
.LABEL $label$7
	$4 = *($2 + [152])
	if ( ($4 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*(($0 = ($2 + [136]))) = (int_64)0
	*(($3 = ($2 + [144]))) = [0]
	$6 = ($1 + [136])
	*($0) = *($6)
	$0 = ($1 + [144])
	*($3) = *($0)
	*(($2 + [132])) = *(($1 + [132]))
	*(($2 + [148])) = [1]
	*($0) = [0]
	*($6) = (int_64)0
	$4 = *($2 + [152])
	if ( $4 ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$5
	$0 = ($2 + [144])
	
.LABEL $label$4
	$3 = ($1 + [136])
	*(($2 + [136])) = *($3)
	$6 = ($1 + [144])
	*($0) = *($6)
	*($6) = [0]
	*($3) = (int_64)0
	$4 = *($2 + [152])
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($2 + [160])
	$5 = ($2 + [156])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($2 + [156])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$11 }
	
.LOOP $label$12:
	$3 = ($0 + [-16])
	$6 = *(($0 + [-12]))
	if ( ($6 == 0) ){ goto $label$13 }
	*(($0 + [-8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$13
	$0 = $3
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$12 }
	$0 = *(($2 + [152]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $4
	
.LABEL $label$10
	*(($2 + [156])) = $4
	CALL _ZdlPv($0)
	*(($6 = ($2 + [160]))) = [0]
	*($2 + [152 align=4]) = (int_64)0
	
.LABEL $label$1
	$0 = ($1 + [152])
	*(($2 + [152])) = *($0)
	*($5) = *(($1 + [156]))
	$3 = ($1 + [160])
	*($6) = *($3)
	*($3) = [0]
	*($0) = (int_64)0
	return $2
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [560])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [148])) ^ (int_32)[1]), [8657])
	CALL $44($0)
	$4 = *($1 + [32])
	$5 = ($0 + [112])
	*($3 + [112]) = (CASTING uint_64)(uint_32 $5)
	$6 = *(CALL $39(($3 + [112])) + [4])
	CALL eosio_assert(*($6 + [24]), [8707])
	$7 = (CASTING uint_64)(uint_32 (((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) + [1]))
	CALL eosio_assert((uint_64)(((int_64)*($6 + [8]) + (int_64)1) <= $7), [8733])
	$8 = ($0 + [32])
	$6 = *(CALL $45($8, *($6 + [8]), [8791]) + [288])
	$9 = (CASTING uint_64)(uint_32 $6)
	$4 = CALL $46(($0 + [72]), $9, [8791])
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)*($4 + [8])), [8810])
	CALL $25(($3 + [480]), $0, $9, *($1 + [8]))
	*(($3 + [168])) = (int_64)0
	*(($3 + [292])) = [0]
	*(($3 + [308])) = [0]
	*(($3 + [312])) = (int_64)0
	*(($3 + [320])) = [0]
	*(($3 + [416])) = [0]
	*($3 + [160]) = [0]
	*($3 + [408]) = (int_64)0
	*($3 + [112]) = $7
	CALL $2(($3 + [80]), $1)
	$4 = *($3 + [80])
	CALL sha256($4, (*($3 + [84]) - $4), ($3 + [16]))
	$4 = *($3 + [80])
	if ( ($4 == 0) ){ goto $label$1 }
	*($3 + [84]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$10 = (($3 + [16]) + [16])
	*(($4 = (($3 + [80]) + [8]))) = *($10)
	*(($11 = (($3 + [80]) + [16]))) = *((($3 + [16]) + [24]))
	*($3 + [80]) = *($3 + [24])
	$9 = *($3 + [16])
	*(($12 = (($3 + [16]) + [8]))) = *($4)
	*($10) = *($11)
	*($3 + [16]) = *($3 + [80])
	$4 = *(($1 + [32]))
	*((($3 + [112]) + [24])) = *($3 + [16])
	*((($3 + [112]) + [32])) = *($12)
	*(($3 + [152])) = *($10)
	$4 = (((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) + [1])
	*($3 + [128]) = ((int_64)((int_64)$9 & (int_64)-4294967296) | (int_64)(CASTING uint_64)(uint_32 ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))))
	CALL $26(($3 + [160]), $1)
	$1 = ($1 + [164])
	CALL memcpy(($3 + [324]), $1, [66])
	*($3 + [404]) = $6
	*($3 + [400]) = $6
	$4 = ($3 + [408])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	CALL $27($4, *($2), *($2 + [4]))
	
.LABEL $label$2
	*(($3 + [424])) = *($2 + [16])
	*(($3 + [440])) = *(($3 + [488]))
	*(($3 + [448])) = *((($3 + [480]) + [16]))
	*(($3 + [456])) = *((($3 + [480]) + [24]))
	*(($3 + [464])) = *((($3 + [480]) + [32]))
	*($3 + [432]) = *($3 + [480])
	CALL $28(($3 + [80]), $0, ($3 + [112]))
	CALL assert_recover_key(($3 + [80]), $1, [66], ($3 + [480]), [34])
	$9 = *($0)
	*($3 + [520]) = ($3 + [112])
	*($3 + [528]) = $9
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$7()), [9794])
	*($3 + [16]) = $8
	*($3 + [20]) = ($3 + [520])
	*($3 + [24]) = ($3 + [528])
	*(($1 = CALL _Znwj([368])) + [56]) = (int_64)0
	*($1 + [48]) = [0]
	*($1 + [180]) = [0]
	*($1 + [196]) = [0]
	*($1 + [200 align=4]) = (int_64)0
	*($1 + [208]) = [0]
	*($1 + [296 align=4]) = (int_64)0
	*($1 + [304]) = [0]
	*($1 + [356]) = $8
	CALL $47(($3 + [16]), $1)
	*($3 + [552]) = $1
	$9 = *($1)
	*($3 + [16]) = $9
	$2 = *($1 + [360])
	*($3 + [544]) = $2
	$6 = ($0 + [60])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [64]))) ){ goto $label$5 }
	*($4 + [8]) = $9
	*($4 + [16]) = $2
	*($3 + [552]) = [0]
	*($4) = $1
	*($6) = ($4 + [24])
	$8 = *($3 + [552])
	$10 = [0]
	*($3 + [552]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL $30(($0 + [56]), ($3 + [552]), ($3 + [16]), ($3 + [544]))
	$8 = *($3 + [552])
	$10 = [0]
	*($3 + [552]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = *($8 + [296])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($8 + [300])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$6 = *(($8 + [200]))
	if ( ($6 == 0) ){ goto $label$7 }
	$11 = ($8 + [204])
	$1 = *($11)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($1 + [-16])
	$2 = *(($1 + [-12]))
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$1 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$10 }
	$1 = *(($8 + [200]))
	goto $label$8 
	
.LABEL $label$9
	$1 = $6
	
.LABEL $label$8
	*($11) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( (*(($8 + [196])) == 0) ){ goto $label$12 }
	$1 = *(($8 + [184]))
	if ( ($1 == 0) ){ goto $label$12 }
	*(($8 + [188])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	CALL _ZdlPv($8)
	
.LABEL $label$3
	*(($3 + [52])) = (int_64)0
	*(($3 + [60])) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [44 align=4]) = (int_64)0
	*($3 + [16]) = $7
	*($3 + [24]) = $7
	*($3 + [40]) = $10
	$9 = *($0)
	*($3 + [8]) = ($3 + [16])
	*($3 + [552]) = $9
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$7()), [9794])
	*($3 + [528]) = $5
	*($3 + [532]) = ($3 + [8])
	*($3 + [536]) = ($3 + [552])
	*(($1 = CALL _Znwj([64])) + [24]) = $10
	*($1 + [16]) = (int_64)0
	*($1 + [28 align=4]) = (int_64)0
	*($1 + [36 align=4]) = (int_64)0
	*($1 + [44 align=4]) = (int_64)0
	*($1 + [52]) = $5
	CALL $48(($3 + [528]), $1)
	*($3 + [544]) = $1
	$9 = *($1)
	*($3 + [528]) = $9
	$2 = *($1 + [56])
	*($3 + [520]) = $2
	$6 = ($0 + [140])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [144]))) ){ goto $label$15 }
	*($4 + [8]) = $9
	*($4 + [16]) = $2
	*($3 + [544]) = [0]
	*($4) = $1
	*($6) = ($4 + [24])
	$1 = *($3 + [544])
	*($3 + [544]) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	CALL $32(($0 + [136]), ($3 + [544]), ($3 + [528]), ($3 + [520]))
	$1 = *($3 + [544])
	*($3 + [544]) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$16 }
	*(($1 + [44])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = *($1 + [28])
	if ( ($4 == 0) ){ goto $label$17 }
	*(($1 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$17
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$1 = [8853]
	$4 = *([8853])
	if ( ($4 == 0) ){ goto $label$18 }
	
.LOOP $label$20:
	if ( ((int_32)$4 == (int_32)[37]) ){ goto $label$19 }
	CALL prints_l($1, [1])
	$1 = ($1 + [1])
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$18 }
	goto $label$20 
	
.LABEL $label$19
	CALL printui($7)
	CALL prints(($1 + [1]))
	
.LABEL $label$18
	$1 = *(($3 + [56]))
	if ( ($1 == 0) ){ goto $label$21 }
	*(($3 + [60])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$21
	$1 = *(($3 + [44]))
	if ( ($1 == 0) ){ goto $label$22 }
	*(($3 + [48])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$22
	$1 = *(($3 + [408]))
	if ( ($1 == 0) ){ goto $label$23 }
	*(($3 + [412])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$23
	$0 = *(($3 + [312]))
	if ( ($0 == 0) ){ goto $label$24 }
	$6 = ($3 + [316])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($1 + [-16])
	$2 = *(($1 + [-12]))
	if ( ($2 == 0) ){ goto $label$28 }
	*(($1 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$28
	$1 = $4
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$27 }
	$1 = *(($3 + [312]))
	goto $label$25 
	
.LABEL $label$26
	$1 = $0
	
.LABEL $label$25
	*($6) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$24
	if ( (*(($3 + [308])) == 0) ){ goto $label$29 }
	$1 = *(($3 + [296]))
	if ( ($1 == 0) ){ goto $label$29 }
	*(($3 + [300])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$29
	$global$0 = ($3 + [560])
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [112])
	$5 = *(($0 + [140]))
	$4 = *(($0 + [136]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$3), [9552])
	if ( ($7 == 0) ){ goto $label$1 }
	$1 = *($7)
	if ( ((uint_64)$1 <= (uint_64)*($7 + [8])) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)-4426590578272108544, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $18($3, $6)
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$3), [9552])
	$1 = *($7)
	if ( ((uint_64)$1 > (uint_64)*($7 + [8])) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [32])
	$9 = ($0 + [60])
	$10 = ($0 + [56])
	$11 = ($0 + [40])
	$12 = ($7 + [8])
	
.LOOP $label$7:
	$5 = *($9)
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$12:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$11 }
	$5 = $6
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*(($4 + [356])) == (int_32)$8), [9552])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = CALL db_find_i64(*($8), *($11), (int_64)4849507793113186304, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$4 = CALL $14($8, $6)
	CALL eosio_assert(((int_32)*($4 + [356]) == (int_32)$8), [9552])
	
.LABEL $label$9
	CALL eosio_assert([1], [9845])
	CALL eosio_assert([1], [9879])
	$6 = CALL db_next_i64(*($4 + [360]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	CALL $14($8, $6)
	
.LABEL $label$13
	CALL $15($8, $4)
	
.LABEL $label$8
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((uint_64)$1 <= (uint_64)*($12)) ){ goto $label$7 }
	
.LABEL $label$2
	CALL eosio_assert([1], [9845])
	CALL eosio_assert([1], [9879])
	$6 = CALL db_next_i64(*($7 + [56]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	CALL $18($3, $6)
	
.LABEL $label$14
	CALL $19($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [40])) = *(($5 + [40]))
	*(($1 + [32])) = *(($5 + [32]))
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	CALL $42(($1 + [48]), ($5 + [48]))
	CALL memcpy(($1 + [212]), ($5 + [212]), [66])
	*($1 + [288]) = *($5 + [288])
	$6 = *($1 + [296])
	if ( ($6 == 0) ){ goto $label$2 }
	*(($1 + [300])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [304]))) = [0]
	*($1 + [296 align=4]) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [304])
	
.LABEL $label$1
	$7 = ($5 + [296])
	*(($1 + [296])) = *($7)
	$8 = ($5 + [304])
	*($6) = *($8)
	*(($1 + [312])) = *(($5 + [312]))
	*($7) = (int_64)0
	*($8) = [0]
	*(($1 + [344])) = *(($5 + [344]))
	*(($1 + [336])) = *(($5 + [336]))
	*(($1 + [328])) = *(($5 + [328]))
	*($1 + [320]) = *($5 + [320])
	*(($1 + [352])) = *(($5 + [352]))
	$6 = CALL $115($1)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$5 = CALL $154($6)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $6)
	CALL $116($3, $1)
	$9 = *($1)
	*($1 + [360]) = CALL db_store_i64(*($4 + [8]), (int_64)4849507793113186304, *(*($0 + [8])), $9, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $157($5)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $46 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [9552])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5915306442138583040, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $16($0, $4)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$0), [9552])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $45 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(($6 + [356])) == (int_32)$0), [9552])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4849507793113186304, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $14($0, $4)
	CALL eosio_assert(((int_32)*($5 + [356]) == (int_32)$0), [9552])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-4426590578272108544, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [112])
	$2 = CALL $18($3, $2)
	CALL eosio_assert([1], [9879])
	$4 = CALL db_next_i64(*($2 + [56]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$2 = [1]
	
.LOOP $label$2:
	$4 = CALL $18($3, $4)
	CALL eosio_assert([1], [9879])
	$2 = ($2 + [1])
	$4 = CALL db_next_i64(*($4 + [56]), ($1 + [8]))
	if ( ((int_32)$4 >= (int_32)[0]) ){ goto $label$2 }
	if ( ((uint_32)$2 <= (uint_32)[4]) ){ goto $label$1 }
	CALL $40($0, *(CALL $18($3, CALL $fimport$5(*(($0 + [112])), *(($0 + [120])), (int_64)-4426590578272108544, (int_64)0))))
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)$0), [9552])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $5($0, $4)
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)$0), [9552])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9603])
	CALL $10($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $11($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [296])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [300])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$5 = ($3 + [200])
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$7 }
	$7 = ($3 + [204])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = ($4 + [-16])
	$9 = *(($4 + [-12]))
	if ( ($9 == 0) ){ goto $label$11 }
	*(($4 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	$4 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$10 }
	$4 = *($5)
	goto $label$8 
	
.LABEL $label$9
	$4 = $6
	
.LABEL $label$8
	*($7) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( (*(($3 + [196])) == 0) ){ goto $label$12 }
	$4 = *(($3 + [184]))
	if ( ($4 == 0) ){ goto $label$12 }
	*(($3 + [188])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	$4 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [4]) == (int_32)$0), [9552])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $5($0, $2)
	CALL eosio_assert(((int_32)*($1 + [4]) == (int_32)$0), [9552])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9527])
	return *($1)
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $8(($0 + [192]), ($0 + [232]), *($0))
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [216]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [176]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$2 = *(($0 + [136]))
	if ( ($2 == 0) ){ goto $label$11 }
	$5 = ($0 + [140])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$16 }
	*(($3 + [44])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($3 + [28])
	if ( ($1 == 0) ){ goto $label$17 }
	*(($3 + [32])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$17
	CALL _ZdlPv($3)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$14 }
	$3 = *(($0 + [136]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $2
	
.LABEL $label$12
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$2 = *(($0 + [96]))
	if ( ($2 == 0) ){ goto $label$18 }
	$5 = ($0 + [100])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$20 }
	
.LOOP $label$21:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	$1 = *(($4 + [12]))
	if ( ($1 == 0) ){ goto $label$23 }
	*(($4 + [16])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$23
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$21 }
	$3 = *(($0 + [96]))
	goto $label$19 
	
.LABEL $label$20
	$3 = $2
	
.LABEL $label$19
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$18
	CALL $9(($0 + [56]))
	return $0
}

int_32 .FUNC $4 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*($4) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [16]) + [8])) = $3
	$2 = *($4)
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [16]) = $2
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	*(($0 + [56])) = (int_64)0
	$3 = [0]
	*(($0 + [64])) = [0]
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*($0 + [112]) = $1
	*(($0 + [120])) = $1
	*(($0 + [128])) = (int_64)-1
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = [0]
	*($0 + [152]) = $1
	*(($0 + [160])) = $1
	*(($0 + [168])) = (int_64)-1
	*(($0 + [184])) = [0]
	*(($0 + [176])) = (int_64)0
	*($0 + [192]) = $1
	*(($0 + [200])) = $1
	*(($0 + [208])) = (int_64)-1
	*(($0 + [216])) = (int_64)0
	*(($0 + [224])) = [0]
	$5 = CALL db_find_i64($1, $1, (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [192])
	CALL eosio_assert(((int_32)*(CALL $5($3, $5) + [4]) == (int_32)$3), [9552])
	$3 = CALL $6($3)
	
.LABEL $label$1
	*($0 + [232]) = $3
	$global$0 = ($4 + [32])
	return $0
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9294])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $154($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([16])) + [4]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[3]), [9317])
	CALL memcpy($4, $2, [4])
	*($4 + [8]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $98(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $157($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( (*(($1 + [148])) == 0) ){ goto $label$2 }
	$4 = *(($1 + [136]))
	$3 = *(($1 + [140]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($3 - $4) / (int_32)[48]))
	$6 = [119]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	
.LOOP $label$4:
	$6 = ($6 + [41])
	$5 = *($4 + [8])
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	$4 = ($4 + [48])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [115]
	
.LABEL $label$1
	$4 = *($1 + [152])
	$7 = *(($1 + [156]))
	$5 = (CASTING uint_64)(uint_32 int_32(($7 - $4) >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = *($4 + [4])
	$3 = *(($4 + [8]))
	$6 = ((($6 + $3) + [2]) - $8)
	$5 = (CASTING uint_64)(uint_32 ($3 - $8))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $1($0, $6)
	$4 = *(($0 + [4]))
	$6 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$4 = [0]
	$6 = [0]
	
.LABEL $label$10
	*($2 + [4]) = $6
	*($2) = $6
	*($2 + [8]) = $4
	CALL $3($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9186])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[31]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[31]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[31]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	*($2 + [15]) = *(($1 + [148]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9186])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	if ( (*($2 + [15]) == 0) ){ goto $label$1 }
	*($2 + [16]) = $0
	*($2 + [28]) = ($1 + [136])
	*($2 + [24]) = ($1 + [132])
	CALL $105(($2 + [24]), ($2 + [16]))
	
.LABEL $label$1
	$0 = CALL $106($0, ($1 + [152]))
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $142($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9294])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $154($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($2 = CALL _Znwj([368])) + [56]) = (int_64)0
	*($2 + [48]) = [0]
	*($2 + [180]) = [0]
	*($2 + [196]) = [0]
	*($2 + [200 align=4]) = (int_64)0
	*($2 + [208]) = [0]
	*($2 + [296 align=4]) = (int_64)0
	*($2 + [304]) = [0]
	*($2 + [356]) = $0
	CALL $109(($3 + [32]), $2)
	*($2 + [360]) = $1
	*($3 + [24]) = $2
	$6 = *($2)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $2
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $157($4)
	
.LABEL $label$6
	$8 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	$5 = *($8 + [296])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($8 + [300])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$0 = *(($8 + [200]))
	if ( ($0 == 0) ){ goto $label$11 }
	$7 = ($8 + [204])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($5 + [-16])
	$4 = *(($5 + [-12]))
	if ( ($4 == 0) ){ goto $label$15 }
	*(($5 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$5 = $1
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$14 }
	$5 = *(($8 + [200]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($7) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( (*(($8 + [196])) == 0) ){ goto $label$16 }
	$5 = *(($8 + [184]))
	if ( ($5 == 0) ){ goto $label$16 }
	*(($8 + [188])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	CALL eosio_assert(((int_32)*(($1 + [356])) == (int_32)$0), [9909])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9954])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10004])
	$9 = ($3 + [-24])
	$10 = *($4)
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = *($3)
	*($3) = [0]
	$4 = *($9)
	*($9) = $5
	if ( ($4 == 0) ){ goto $label$8 }
	$5 = *($4 + [296])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($4 + [300])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$11 = ($4 + [200])
	$2 = *($11)
	if ( ($2 == 0) ){ goto $label$10 }
	$12 = ($4 + [204])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$8 = ($5 + [-16])
	$7 = *(($5 + [-12]))
	if ( ($7 == 0) ){ goto $label$14 }
	*(($5 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	$5 = $8
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$13 }
	$5 = *($11)
	goto $label$11 
	
.LABEL $label$12
	$5 = $2
	
.LABEL $label$11
	*($12) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( (*(($4 + [196])) == 0) ){ goto $label$15 }
	$5 = *(($4 + [184]))
	if ( ($5 == 0) ){ goto $label$15 }
	*(($4 + [188])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	CALL _ZdlPv($4)
	
.LABEL $label$8
	*($9 + [8]) = *($3 + [8])
	*(($9 + [16])) = *(($3 + [16]))
	$9 = ($9 + [24])
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$7 }
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$5 }
	
.LABEL $label$6
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	$5 = *($4 + [296])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($4 + [300])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$10 = ($4 + [200])
	$2 = *($10)
	if ( ($2 == 0) ){ goto $label$19 }
	$11 = ($4 + [204])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$21 }
	
.LOOP $label$22:
	$8 = ($5 + [-16])
	$7 = *(($5 + [-12]))
	if ( ($7 == 0) ){ goto $label$23 }
	*(($5 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$23
	$5 = $8
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$22 }
	$5 = *($10)
	goto $label$20 
	
.LABEL $label$21
	$5 = $2
	
.LABEL $label$20
	*($11) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( (*(($4 + [196])) == 0) ){ goto $label$24 }
	$5 = *(($4 + [184]))
	if ( ($5 == 0) ){ goto $label$24 }
	*(($4 + [188])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$24
	CALL _ZdlPv($4)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$16 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [360])))
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9294])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $154($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [24]) = ($2 + $4)
	*($3 + [16]) = $2
	*(($5 = CALL _Znwj([80])) + [20]) = [0]
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [64]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9317])
	CALL memcpy($5, $2, [8])
	*($3 + [20]) = ($2 + [8])
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [12])
	*($3 + [40]) = ($5 + [8])
	CALL $87(($3 + [32]), ($3 + [40]))
	CALL eosio_assert(((uint_32)(*($3 + [24]) - *($3 + [20])) > (uint_32)[31]), [9317])
	CALL memcpy(($5 + [32]), *($3 + [20]), [32])
	*($5 + [68]) = $1
	*($3 + [32]) = $5
	*($3 + [20]) = (*($3 + [20]) + [32])
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $157($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *(($1 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [16])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9909])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9954])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10004])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *(($3 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [16])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *(($5 + [12]))
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [16])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [4]) == (int_32)$0), [9638])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9684])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9735])
	CALL eosio_assert([1], [9186])
	CALL memcpy($4, $1, [4])
	CALL db_update_i64(*($1 + [8]), $2, $4, [4])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [9794])
	*(($5 = CALL _Znwj([16])) + [4]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9186])
	CALL memcpy(($4 + [16]), $5, [4])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [4])
	*($5 + [8]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [24]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [24]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $98(($1 + [24]), ($4 + [24]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [24])
	*($4 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	*($0 + [232]) = *($1)
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [816])
	$global$0 = $4
	$5 = ($0 + [32])
	$6 = CALL has_auth(*($0))
	$7 = *(($0 + [40]))
	$8 = *($0 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	$6 = CALL db_lowerbound_i64($8, $7, (int_64)4849507793113186304, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$9 = ($0 + [40])
	$10 = ($0 + [32])
	
.LOOP $label$4:
	CALL $14($5, $6)
	$6 = [0]
	$11 = CALL db_lowerbound_i64(*($10), *($9), (int_64)4849507793113186304, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $14($5, $11)
	
.LABEL $label$5
	$11 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($11, [9845])
	CALL eosio_assert($11, [9879])
	$11 = CALL db_next_i64(*($6 + [360]), ($4 + [112]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$6 }
	CALL $14($5, $11)
	
.LABEL $label$6
	CALL $15($5, $6)
	$6 = CALL db_lowerbound_i64(*($10), *($9), (int_64)4849507793113186304, (int_64)0)
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	$10 = ($0 + [72])
	$9 = ($0 + [80])
	$6 = CALL db_lowerbound_i64(*($0 + [72]), *($9), (int_64)-5915306442138583040, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$11 = ($0 + [72])
	
.LOOP $label$8:
	CALL $16($10, $6)
	$6 = [0]
	$12 = CALL db_lowerbound_i64(*($11), *($9), (int_64)-5915306442138583040, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $16($10, $12)
	
.LABEL $label$9
	$12 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($12, [9845])
	CALL eosio_assert($12, [9879])
	$12 = CALL db_next_i64(*($6 + [68]), ($4 + [112]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$10 }
	CALL $16($10, $12)
	
.LABEL $label$10
	CALL $17($10, $6)
	$6 = CALL db_lowerbound_i64(*($11), *($9), (int_64)-5915306442138583040, (int_64)0)
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$8 }
	
.LABEL $label$7
	$11 = ($0 + [120])
	$9 = CALL db_lowerbound_i64(*($0 + [112]), *($11), (int_64)-4426590578272108544, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$6 = ($0 + [112])
	
.LOOP $label$11:
	CALL $18($6, $9)
	$9 = [0]
	$12 = CALL db_lowerbound_i64(*($6), *($11), (int_64)-4426590578272108544, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$12 }
	$9 = CALL $18($6, $12)
	
.LABEL $label$12
	$12 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($12, [9845])
	CALL eosio_assert($12, [9879])
	$12 = CALL db_next_i64(*($9 + [56]), ($4 + [112]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$13 }
	CALL $18($6, $12)
	
.LABEL $label$13
	CALL $19($6, $9)
	$9 = CALL db_lowerbound_i64(*($6), *($11), (int_64)-4426590578272108544, (int_64)0)
	if ( ((int_32)$9 >= (int_32)[0]) ){ goto $label$11 }
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL db_lowerbound_i64($8, $7, (int_64)4849507793113186304, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$15 }
	CALL $14($5, $6)
	CALL eosio_assert([0], [8192])
	$10 = ($0 + [72])
	goto $label$14 
	
.LABEL $label$15
	$10 = ($0 + [72])
	$9 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)-5915306442138583040, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	CALL $16($10, $6)
	CALL eosio_assert([0], [8192])
	goto $label$14 
	
.LABEL $label$16
	$6 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-4426590578272108544, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$17 }
	$9 = CALL $18(($0 + [112]), $6)
	
.LABEL $label$17
	CALL eosio_assert(($9 == 0), [8192])
	
.LABEL $label$14
	CALL eosio_assert(CALL $20($0), [8212])
	
.LABEL $label$1
	*(($4 + [676])) = [0]
	*(($4 + [688])) = [0]
	*($4 + [528]) = [0]
	*($4 + [536]) = (int_64)0
	*($4 + [660]) = [0]
	*($4 + [680]) = (int_64)0
	$6 = *($1 + [4])
	$9 = *($1)
	*($4 + [20]) = $9
	*($4 + [16]) = $9
	*($4 + [24]) = $6
	CALL $21(($4 + [16]), ($4 + [528]))
	*($4 + [488]) = ($4 + [16])
	*($4 + [116]) = ($4 + [693])
	$11 = ($4 + [692])
	*($4 + [112]) = $11
	*($4 + [120]) = ($4 + [694])
	*($4 + [124]) = ($4 + [695])
	*($4 + [128]) = ($4 + [696])
	*($4 + [132]) = ($4 + [697])
	*($4 + [136]) = ($4 + [698])
	*($4 + [140]) = ($4 + [699])
	*($4 + [144]) = ($4 + [700])
	*($4 + [148]) = ($4 + [701])
	*($4 + [152]) = ($4 + [702])
	*($4 + [156]) = ($4 + [703])
	*($4 + [160]) = ($4 + [704])
	*($4 + [164]) = ($4 + [705])
	*($4 + [168]) = ($4 + [706])
	*($4 + [172]) = ($4 + [707])
	*($4 + [176]) = ($4 + [708])
	*($4 + [180]) = ($4 + [709])
	*($4 + [184]) = ($4 + [710])
	*($4 + [192]) = ($4 + [712])
	*($4 + [188]) = ($4 + [711])
	*($4 + [196]) = ($4 + [713])
	*($4 + [200]) = ($4 + [714])
	*($4 + [204]) = ($4 + [715])
	*($4 + [208]) = ($4 + [716])
	*($4 + [212]) = ($4 + [717])
	*($4 + [216]) = ($4 + [718])
	*($4 + [220]) = ($4 + [719])
	*($4 + [224]) = ($4 + [720])
	*($4 + [228]) = ($4 + [721])
	*($4 + [232]) = ($4 + [722])
	*($4 + [236]) = ($4 + [723])
	*($4 + [240]) = ($4 + [724])
	*($4 + [244]) = ($4 + [725])
	*($4 + [248]) = ($4 + [726])
	*($4 + [252]) = ($4 + [727])
	*($4 + [256]) = ($4 + [728])
	*($4 + [260]) = ($4 + [729])
	*($4 + [268]) = ($4 + [731])
	*($4 + [264]) = ($4 + [730])
	*($4 + [272]) = ($4 + [732])
	*($4 + [276]) = ($4 + [733])
	*($4 + [280]) = ($4 + [734])
	*($4 + [284]) = ($4 + [735])
	*($4 + [288]) = ($4 + [736])
	*($4 + [292]) = ($4 + [737])
	*($4 + [296]) = ($4 + [738])
	*($4 + [300]) = ($4 + [739])
	*($4 + [304]) = ($4 + [740])
	*($4 + [308]) = ($4 + [741])
	*($4 + [312]) = ($4 + [742])
	*($4 + [316]) = ($4 + [743])
	*($4 + [320]) = ($4 + [744])
	*($4 + [324]) = ($4 + [745])
	*($4 + [328]) = ($4 + [746])
	*($4 + [332]) = ($4 + [747])
	*($4 + [336]) = ($4 + [748])
	*($4 + [344]) = ($4 + [750])
	*($4 + [340]) = ($4 + [749])
	*($4 + [348]) = ($4 + [751])
	*($4 + [352]) = ($4 + [752])
	*($4 + [356]) = ($4 + [753])
	*($4 + [360]) = ($4 + [754])
	*($4 + [364]) = ($4 + [755])
	*($4 + [368]) = ($4 + [756])
	*($4 + [372]) = ($4 + [757])
	CALL $22(($4 + [112]), ($4 + [488]))
	*($4 + [524]) = [1]
	$7 = *($0)
	*($4 + [492]) = $2
	*($4 + [488]) = ($4 + [524])
	*($4 + [16]) = $7
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$7()), [9794])
	*($4 + [112]) = $10
	*($4 + [116]) = ($4 + [488])
	*($4 + [120]) = ($4 + [16])
	*(($6 = CALL _Znwj([80])) + [20]) = [0]
	*($6 + [12 align=4]) = (int_64)0
	*($6 + [64]) = $10
	CALL $23(($4 + [112]), $6)
	*($4 + [80]) = $6
	$7 = *($6)
	*($4 + [112]) = $7
	$10 = *($6 + [68])
	*($4 + [784]) = $10
	$12 = ($0 + [100])
	$9 = *($12)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [104]))) ){ goto $label$20 }
	*($9 + [8]) = $7
	*($9 + [16]) = $10
	*($4 + [80]) = [0]
	*($9) = $6
	*($12) = ($9 + [24])
	$9 = *($4 + [80])
	$6 = [0]
	*($4 + [80]) = [0]
	if ( ($9 == 0) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$20
	CALL $24(($0 + [96]), ($4 + [80]), ($4 + [112]), ($4 + [784]))
	$9 = *($4 + [80])
	$6 = [0]
	*($4 + [80]) = [0]
	if ( ($9 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$10 = *(($9 + [12]))
	if ( ($10 == 0) ){ goto $label$21 }
	*(($9 + [16])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$21
	CALL _ZdlPv($9)
	
.LABEL $label$18
	CALL $25(($4 + [488]), $0, *($4 + [524]), *($4 + [536]))
	$9 = *($4 + [560])
	*(($4 + [168])) = (int_64)0
	*(($4 + [292])) = $6
	*(($4 + [308])) = $6
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = $6
	*(($4 + [416])) = $6
	*($4 + [160]) = $6
	*($4 + [408]) = (int_64)0
	$7 = (CASTING uint_64)(uint_32 (((($9 << [24]) | (($9 << [8]) & [16711680])) | ((uint_32($9 >> [8]) & [65280]) | uint_32($9 >> [24]))) + [1]))
	*($4 + [112]) = $7
	CALL $2(($4 + [80]), ($4 + [528]))
	$6 = *($4 + [80])
	CALL sha256($6, (*($4 + [84]) - $6), ($4 + [16]))
	$6 = *($4 + [80])
	if ( ($6 == 0) ){ goto $label$22 }
	*($4 + [84]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$22
	$9 = (($4 + [16]) + [16])
	*(($6 = (($4 + [80]) + [8]))) = *($9)
	*(($10 = (($4 + [80]) + [16]))) = *((($4 + [16]) + [24]))
	*($4 + [80]) = *($4 + [24])
	$8 = *($4 + [16])
	*(($12 = (($4 + [16]) + [8]))) = *($6)
	*($9) = *($10)
	*($4 + [16]) = *($4 + [80])
	$6 = *((($4 + [528]) + [32]))
	*((($4 + [112]) + [24])) = *($4 + [16])
	*((($4 + [112]) + [32])) = *($12)
	*(($4 + [152])) = *($9)
	$6 = (((($6 << [24]) | (($6 << [8]) & [16711680])) | ((uint_32($6 >> [8]) & [65280]) | uint_32($6 >> [24]))) + [1])
	*($4 + [128]) = ((int_64)((int_64)$8 & (int_64)-4294967296) | (int_64)(CASTING uint_64)(uint_32 ((($6 << [24]) | (($6 << [8]) & [16711680])) | ((uint_32($6 >> [8]) & [65280]) | uint_32($6 >> [24])))))
	CALL $26(($4 + [160]), ($4 + [528]))
	CALL memcpy(($4 + [324]), ($4 + [692]), [66])
	$6 = *($4 + [524])
	*($4 + [400]) = $6
	*($4 + [404]) = $6
	$6 = ($4 + [408])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$23 }
	CALL $27($6, *($3), *($3 + [4]))
	
.LABEL $label$23
	*(($4 + [424])) = *($3 + [16])
	*(($4 + [440])) = *(($4 + [496]))
	*(($4 + [448])) = *((($4 + [488]) + [16]))
	*(($4 + [456])) = *((($4 + [488]) + [24]))
	*(($4 + [464])) = *((($4 + [488]) + [32]))
	*($4 + [432]) = *($4 + [488])
	CALL $28(($4 + [80]), $0, ($4 + [112]))
	CALL assert_recover_key(($4 + [80]), $11, [66], ($4 + [488]), [34])
	$8 = *($0)
	*($4 + [776]) = ($4 + [112])
	*($4 + [784]) = $8
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$7()), [9794])
	*($4 + [16]) = $5
	*($4 + [20]) = ($4 + [776])
	*($4 + [24]) = ($4 + [784])
	*(($6 = CALL _Znwj([368])) + [56]) = (int_64)0
	*($6 + [48]) = [0]
	*($6 + [180]) = [0]
	*($6 + [196]) = [0]
	*($6 + [200 align=4]) = (int_64)0
	*($6 + [208]) = [0]
	*($6 + [296 align=4]) = (int_64)0
	*($6 + [304]) = [0]
	*($6 + [356]) = $5
	CALL $29(($4 + [16]), $6)
	*($4 + [808]) = $6
	$8 = *($6)
	*($4 + [16]) = $8
	$5 = *($6 + [360])
	*($4 + [800]) = $5
	$10 = ($0 + [60])
	$9 = *($10)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [64]))) ){ goto $label$26 }
	*($9 + [8]) = $8
	*($9 + [16]) = $5
	*($4 + [808]) = [0]
	*($9) = $6
	*($10) = ($9 + [24])
	$11 = *($4 + [808])
	$12 = [0]
	*($4 + [808]) = [0]
	if ( ($11 == 0) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$26
	CALL $30(($0 + [56]), ($4 + [808]), ($4 + [16]), ($4 + [800]))
	$11 = *($4 + [808])
	$12 = [0]
	*($4 + [808]) = [0]
	if ( ($11 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$6 = *($11 + [296])
	if ( ($6 == 0) ){ goto $label$27 }
	*(($11 + [300])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$27
	$10 = *(($11 + [200]))
	if ( ($10 == 0) ){ goto $label$28 }
	$3 = ($11 + [204])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$30 }
	
.LOOP $label$31:
	$9 = ($6 + [-16])
	$5 = *(($6 + [-12]))
	if ( ($5 == 0) ){ goto $label$32 }
	*(($6 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$32
	$6 = $9
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$31 }
	$6 = *(($11 + [200]))
	goto $label$29 
	
.LABEL $label$30
	$6 = $10
	
.LABEL $label$29
	*($3) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$28
	if ( (*(($11 + [196])) == 0) ){ goto $label$33 }
	$6 = *(($11 + [184]))
	if ( ($6 == 0) ){ goto $label$33 }
	*(($11 + [188])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$33
	CALL _ZdlPv($11)
	
.LABEL $label$24
	*(($4 + [52])) = (int_64)0
	*(($4 + [60])) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [44 align=4]) = (int_64)0
	*($4 + [16]) = $7
	*($4 + [24]) = $7
	*($4 + [40]) = [1]
	$7 = *($0)
	*($4 + [8]) = ($4 + [16])
	*($4 + [808]) = $7
	CALL eosio_assert(((int_64)*($0 + [112]) == (int_64)CALL $fimport$7()), [9794])
	$9 = ($0 + [112])
	*($4 + [784]) = $9
	*($4 + [788]) = ($4 + [8])
	*($4 + [792]) = ($4 + [808])
	*(($6 = CALL _Znwj([64])) + [24]) = $12
	*($6 + [16]) = (int_64)0
	*($6 + [28 align=4]) = (int_64)0
	*($6 + [36 align=4]) = (int_64)0
	*($6 + [44 align=4]) = (int_64)0
	*($6 + [52]) = $9
	CALL $31(($4 + [784]), $6)
	*($4 + [800]) = $6
	$7 = *($6)
	*($4 + [784]) = $7
	$5 = *($6 + [56])
	*($4 + [776]) = $5
	$10 = ($0 + [140])
	$9 = *($10)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [144]))) ){ goto $label$38 }
	*($9 + [8]) = $7
	*($9 + [16]) = $5
	*($4 + [800]) = [0]
	*($9) = $6
	*($10) = ($9 + [24])
	$6 = *($4 + [800])
	*($4 + [800]) = [0]
	if ( ($6 == 0) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	CALL $32(($0 + [136]), ($4 + [800]), ($4 + [784]), ($4 + [776]))
	$6 = *($4 + [800])
	*($4 + [800]) = [0]
	if ( $6 ){ goto $label$36 }
	
.LABEL $label$37
	$6 = *(($4 + [56]))
	if ( ($6 == 0) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$36
	$9 = *($6 + [40])
	if ( ($9 == 0) ){ goto $label$39 }
	*(($6 + [44])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$39
	$9 = *($6 + [28])
	if ( ($9 == 0) ){ goto $label$40 }
	*(($6 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$40
	CALL _ZdlPv($6)
	$6 = *(($4 + [56]))
	if ( ($6 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	*(($4 + [60])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$34
	$6 = *(($4 + [44]))
	if ( ($6 == 0) ){ goto $label$41 }
	*(($4 + [48])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$41
	$6 = *(($4 + [408]))
	if ( ($6 == 0) ){ goto $label$42 }
	*(($4 + [412])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$42
	$10 = *(($4 + [312]))
	if ( ($10 == 0) ){ goto $label$43 }
	$0 = ($4 + [316])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$45 }
	
.LOOP $label$46:
	$9 = ($6 + [-16])
	$5 = *(($6 + [-12]))
	if ( ($5 == 0) ){ goto $label$47 }
	*(($6 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$47
	$6 = $9
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$46 }
	$6 = *(($4 + [312]))
	goto $label$44 
	
.LABEL $label$45
	$6 = $10
	
.LABEL $label$44
	*($0) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$43
	if ( (*(($4 + [308])) == 0) ){ goto $label$48 }
	$6 = *(($4 + [296]))
	if ( ($6 == 0) ){ goto $label$48 }
	*(($4 + [300])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$48
	$10 = *($4 + [680])
	if ( ($10 == 0) ){ goto $label$49 }
	$0 = ($4 + [684])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$51 }
	
.LOOP $label$52:
	$9 = ($6 + [-16])
	$5 = *(($6 + [-12]))
	if ( ($5 == 0) ){ goto $label$53 }
	*(($6 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$53
	$6 = $9
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$52 }
	$6 = *(($4 + [680]))
	goto $label$50 
	
.LABEL $label$51
	$6 = $10
	
.LABEL $label$50
	*($0) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$49
	if ( (*(($4 + [676])) == 0) ){ goto $label$54 }
	$6 = *(($4 + [664]))
	if ( ($6 == 0) ){ goto $label$54 }
	*(($4 + [668])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$54
	$global$0 = ($4 + [816])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [5])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$3 }
	$6 = [134217727]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$6 = int_32($7 >> [4])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [5]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $142($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [5])))) = *($1)
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [5]))
	$4 = ($4 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9294])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $154($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [24]) = [0]
	*($5 + [16]) = (int_64)0
	*($5 + [28 align=4]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [44 align=4]) = (int_64)0
	*($5 + [52]) = $0
	CALL $99(($3 + [32]), $5)
	*($5 + [56]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $32(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $157($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [44])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [28])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9909])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9954])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10004])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($3 + [28])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($3 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	$8 = *($5 + [40])
	if ( ($8 == 0) ){ goto $label$14 }
	*(($5 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$8 = *($5 + [28])
	if ( ($8 == 0) ){ goto $label$15 }
	*(($5 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [56]))
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [40])) = *(($5 + [40]))
	*(($1 + [32])) = *(($5 + [32]))
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	CALL $42(($1 + [48]), ($5 + [48]))
	CALL memcpy(($1 + [212]), ($5 + [212]), [66])
	*($1 + [288]) = *($5 + [288])
	$6 = *($1 + [296])
	if ( ($6 == 0) ){ goto $label$2 }
	*(($1 + [300])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [304]))) = [0]
	*($1 + [296 align=4]) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [304])
	
.LABEL $label$1
	$7 = ($5 + [296])
	*(($1 + [296])) = *($7)
	$8 = ($5 + [304])
	*($6) = *($8)
	*(($1 + [312])) = *(($5 + [312]))
	*($7) = (int_64)0
	*($8) = [0]
	*(($1 + [344])) = *(($5 + [344]))
	*(($1 + [336])) = *(($5 + [336]))
	*(($1 + [328])) = *(($5 + [328]))
	*($1 + [320]) = *($5 + [320])
	*(($1 + [352])) = *(($5 + [352]))
	$6 = CALL $115($1)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$5 = CALL $154($6)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $6)
	CALL $116($3, $1)
	$9 = *($1)
	*($1 + [360]) = CALL db_store_i64(*($4 + [8]), (int_64)4849507793113186304, *(*($0 + [8])), $9, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $157($5)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9638])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9684])
	*($1 + [8]) = *(*($2))
	$5 = *($1)
	$6 = $5
	$2 = *(($2 + [8]))
	if ( ((int_32)(*(($2 + [8])) - *($2 + [4])) != (int_32)[48]) ){ goto $label$1 }
	*($4 + [28]) = [5]
	*($4 + [24]) = [9365]
	*($4) = *($4 + [24])
	CALL $35(($4 + [8]), $4)
	$6 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9735])
	$8 = *($1 + [28])
	$7 = *(($1 + [32]))
	$9 = ($7 - $8)
	$6 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$2 = [25]
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$3 }
	$2 = (($9 & [-8]) + $2)
	
.LABEL $label$3
	$8 = *($1 + [40])
	$7 = *(($1 + [44]))
	$9 = ($7 - $8)
	$6 = (CASTING uint_64)(uint_32 int_32($9 >> [2]))
	
.LOOP $label$4:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$5 }
	$2 = (($9 & [-4]) + $2)
	
.LABEL $label$5
	if ( ($2 <= [513]) ){ goto $label$7 }
	$3 = CALL $154($2)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $2)
	CALL $73(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [56]), (int_64)0, $3, $2)
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $157($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$8
	$global$0 = ($4 + [32])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9638])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9684])
	*($1 + [24]) = [0]
	$4 = *($1)
	CALL eosio_assert([1], [9735])
	$6 = *($1 + [28])
	$5 = *(($1 + [32]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$9 = [25]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$9 = (($7 & [-8]) + $9)
	
.LABEL $label$2
	$6 = *($1 + [40])
	$5 = *(($1 + [44]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	
.LOOP $label$3:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$9 = (($7 & [-4]) + $9)
	
.LABEL $label$4
	if ( ($9 <= [513]) ){ goto $label$6 }
	$2 = CALL $154($9)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($9 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $9)
	CALL $73($3, $1)
	CALL db_update_i64(*($1 + [56]), (int_64)0, $2, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $157($2)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [360]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9246])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4849507793113186304)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9192])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9192])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $14(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9638])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9684])
	$5 = [0]
	$7 = *(*($2))
	$8 = (CASTING uint_64)(uint_32 $7)
	$6 = *($1)
	if ( ((uint_64)$6 >= (uint_64)$8) ){ goto $label$1 }
	$5 = ((uint_64)*($1 + [8]) >= (uint_64)$8)
	
.LABEL $label$1
	CALL eosio_assert($5, [9171])
	$5 = *(($1 + [44]))
	if ( (*(($5 + [-4])) <= $7) ){ goto $label$2 }
	$2 = *(($1 + [32]))
	
.LOOP $label$3:
	$2 = ($2 + [-8])
	$9 = ($5 + [-8])
	$10 = ($5 + [-4])
	$5 = $10
	if ( ((uint_32)*($9) >= (uint_32)$7) ){ goto $label$3 }
	*(($1 + [44])) = $10
	*(($1 + [32])) = $2
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9735])
	$9 = *($1 + [28])
	$2 = *(($1 + [32]))
	$7 = ($2 - $9)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$5 = [25]
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$5 }
	$5 = (($7 & [-8]) + $5)
	
.LABEL $label$5
	$9 = *($1 + [40])
	$2 = *(($1 + [44]))
	$7 = ($2 - $9)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$7 }
	$5 = (($7 & [-4]) + $5)
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	$2 = CALL $154($5)
	goto $label$8 
	
.LABEL $label$9
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$8
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL $73($4, $1)
	CALL db_update_i64(*($1 + [56]), (int_64)0, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$12 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $157($2)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$10
	$global$0 = ($4 + [16])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$2 = ($global$0 - [288])
	$global$0 = $2
	$3 = [0]
	$4 = *($0 + [16])
	if ( ((int_64)$4 == (int_64)-1) ){ goto $label$1 }
	$5 = ((int_64)(uint_64)$4 >> (uint_64)(int_64)1) | (int_64)$4
	$5 = ((int_64)(uint_64)$5) >> (uint_64)(int_64)2
	$5 = ((int_64)(uint_64)$5 | (int_64)$5)
	$5 = ((int_64)(uint_64)$5 >> (uint_64)(int_64)4) | (int_64)$5
	$5 = ((int_64)(uint_64)$5) >> (uint_64)(int_64)8
	$5 = ((int_64)((int_64)(uint_64)$5 | (int_64)$5)) >> (uint_64)(int_64)16
	$6 = ( [64] ? [63] : (int_64)($5 | (int_64)$5)) >> (uint_64)(int_64)32
	$6 = ( ($6 | (int_64)$5) + (int_64)1)
	$6 = ( $6 == 0) 
	$6 = ( $6) + [-32]
	$6 = ( $6 ? $6 : (CASTING uint_32)(uint_64 $5) )
	$3 = (( $6 ? ($6 + [-16]) : (int_64)(((int_64)$5 & (int_64)281470681808895) == 0) )) ? ($6 + [-8]) : (int_64)(((int_64)$5 & (int_64)71777214294589695) == 0) )) ? ($6 + [-4]) : (int_64)(((int_64)$5 & (int_64)1085102592571150095) == 0) )) ? ($6 + [-2]) : (int_64)(((int_64)$5 & (int_64)3689348814741910323) == 0) ) + (int_64)(((int_64)$5 & (int_64)6148914691236517205) == 0))
	
.LABEL $label$1
	*((($2 + [176]) + [24])) = *(($1 + [24]))
	*((($2 + [176]) + [16])) = *(($1 + [16]))
	*($2 + [176]) = *($1)
	*($2 + [184]) = *(($1 + [8]))
	$6 = *($0)
	*($2 + [168]) = [0]
	*($2 + [160]) = (int_64)0
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$4 }
	$8 = ($3 << [5])
	$1 = CALL _Znwj($8)
	$8 = ($1 + $8)
	*(($7 = (($2 + [160]) + [8]))) = $8
	*($2 + [164]) = $1
	*($2 + [160]) = $1
	if ( ((int_32)$3 < (int_32)[2]) ){ goto $label$7 }
	$9 = ($3 + [1])
	$3 = ($2 + [241])
	$10 = (($2 + [208]) + [32])
	$8 = (($2 + [208]) | [1])
	$1 = (($2 + [176]) | [1])
	$11 = [0]
	
.LOOP $label$9:
	if ( (CASTING uint_32)(uint_64 ((int_64)$4 & (int_64)1)) ){ goto $label$14 }
	if ( ($11 & [1]) ){ goto $label$12 }
	$11 = *($2 + [164])
	if ( ((uint_32)$11 >= (uint_32)*($7)) ){ goto $label$13 }
	*($11) = *($2 + [176])
	*(($11 + [8])) = *($2 + [184])
	*(($11 + [24])) = *((($2 + [176]) + [24]))
	*(($11 + [16])) = *((($2 + [176]) + [16]))
	*($2 + [164]) = ($11 + [32])
	goto $label$12 
	
.LABEL $label$14
	if ( (($11 & [1]) == 0) ){ goto $label$10 }
	$12 = *($2 + [164])
	if ( ((uint_32)$12 >= (uint_32)*($7)) ){ goto $label$11 }
	*($12) = *($6)
	*(($12 + [24])) = *(($6 + [24]))
	*(($12 + [16])) = *(($6 + [16]))
	*(($12 + [8])) = *(($6 + [8]))
	*($2 + [164]) = ($12 + [32])
	goto $label$10 
	
.LABEL $label$13
	CALL $74(($2 + [160]), ($2 + [176]))
	
.LABEL $label$12
	$14 = ($1 + [8])
	*(($13 = (($2 + [208]) + [8]))) = *($14)
	$16 = ($1 + [16])
	*(($15 = (($2 + [208]) + [16]))) = *($16)
	$12 = ($1 + [23])
	*(($17 = (($2 + [208]) + [23]))) = *($12)
	*($2 + [208]) = *($1)
	$11 = *($2 + [176])
	*(($18 = (($2 + [128]) + [23]))) = *($12)
	*(($12 = (($2 + [128]) + [16]))) = *($16)
	$5 = *($14)
	*((($2 + [128]) + [8])) = $5
	*(($14 = (($2 + [96]) + [8]))) = *($13)
	*(($13 = (($2 + [96]) + [16]))) = *($15)
	*(($15 = (($2 + [96]) + [23]))) = *($17)
	*(($16 = (($2 + [64]) + [8]))) = $5
	*(($17 = (($2 + [64]) + [16]))) = *($12)
	*(($19 = (($2 + [64]) + [23]))) = *($18)
	$5 = *($1)
	*($2 + [128]) = $5
	*($2 + [96]) = *($2 + [208])
	*($2 + [64]) = $5
	*($10) = ($11 | [128])
	*($8) = *($2 + [96])
	*(($8 + [8])) = *($14)
	*(($8 + [16])) = *($13)
	*(($8 + [23])) = *($15)
	*($3) = *($2 + [64])
	*(($3 + [8])) = *($16)
	*(($3 + [16])) = *($17)
	*(($3 + [23])) = *($19)
	*($2 + [208]) = ($11 & [127])
	*((($2 + [272]) + [8])) = [0]
	*($2 + [272]) = (int_64)0
	CALL $1(($2 + [272]), [64])
	$11 = *($2 + [272])
	$13 = (*($2 + [276]) - $11)
	CALL eosio_assert(((int_32)$13 > (int_32)[31]), [9186])
	CALL memcpy($11, ($2 + [208]), [32])
	CALL eosio_assert(((int_32)($13 + [-32]) > (int_32)[31]), [9186])
	CALL memcpy(($11 + [32]), $10, [32])
	$11 = *($2 + [272])
	CALL sha256($11, (*($2 + [276]) - $11), ($2 + [128]))
	$11 = *($2 + [272])
	if ( ($11 == 0) ){ goto $label$15 }
	*($2 + [276]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$15
	*((($2 + [176]) + [24])) = *((($2 + [128]) + [24]))
	*((($2 + [176]) + [16])) = *($12)
	*($2 + [184]) = *($2 + [136])
	*($2 + [176]) = *($2 + [128])
	$11 = [1]
	$4 = (uint_64)$4 >> (uint_64)(int_64)1)
	$9 = ($9 + [-1])
	if ( ((int_32)$9 > (int_32)[2]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL $75(($2 + [160]), $6)
	
.LABEL $label$10
	$13 = *($6)
	*(($14 = (($2 + [208]) + [23]))) = *(($6 + [24]))
	*(($15 = (($2 + [208]) + [16]))) = *(($6 + [17]))
	*(($16 = (($2 + [208]) + [8]))) = *(($6 + [9]))
	*($2 + [208]) = *($6 + [1 align=1])
	*(($17 = (($2 + [128]) + [23]))) = *(($1 + [23]))
	*(($12 = (($2 + [128]) + [16]))) = *(($1 + [16]))
	$5 = *(($1 + [8]))
	*((($2 + [128]) + [8])) = $5
	*(($18 = (($2 + [32]) + [8]))) = *($16)
	*(($16 = (($2 + [32]) + [16]))) = *($15)
	*(($15 = (($2 + [32]) + [23]))) = *($14)
	*(($14 = ($2 + [8]))) = $5
	*(($19 = ($2 + [23]))) = *($17)
	*(($17 = ($2 + [16]))) = *($12)
	$5 = *($1)
	*($2 + [128]) = $5
	*($2 + [32]) = *($2 + [208])
	*($2) = $5
	*($10) = (*($2 + [176]) | [128])
	*($8) = *($2 + [32])
	*(($8 + [8])) = *($18)
	*(($8 + [16])) = *($16)
	*(($8 + [23])) = *($15)
	*($3) = *($2)
	*(($3 + [8])) = *($14)
	*(($3 + [16])) = *($17)
	*(($3 + [23])) = *($19)
	*($2 + [208]) = ($13 & [127])
	*((($2 + [272]) + [8])) = [0]
	*($2 + [272]) = (int_64)0
	CALL $1(($2 + [272]), [64])
	$13 = *($2 + [272])
	$14 = (*($2 + [276]) - $13)
	CALL eosio_assert(((int_32)$14 > (int_32)[31]), [9186])
	CALL memcpy($13, ($2 + [208]), [32])
	CALL eosio_assert(((int_32)($14 + [-32]) > (int_32)[31]), [9186])
	CALL memcpy(($13 + [32]), $10, [32])
	$13 = *($2 + [272])
	CALL sha256($13, (*($2 + [276]) - $13), ($2 + [128]))
	$13 = *($2 + [272])
	if ( ($13 == 0) ){ goto $label$16 }
	*($2 + [276]) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$16
	$6 = ($6 + [32])
	*((($2 + [176]) + [24])) = *((($2 + [128]) + [24]))
	*((($2 + [176]) + [16])) = *($12)
	*($2 + [184]) = *($2 + [136])
	*($2 + [176]) = *($2 + [128])
	$4 = (uint_64)$4 >> (uint_64)(int_64)1)
	$9 = ($9 + [-1])
	if ( ((int_32)$9 > (int_32)[2]) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = *(($2 + [168]))
	$1 = *($2 + [164])
	
.LABEL $label$7
	if ( ((uint_32)$1 >= (uint_32)$8) ){ goto $label$6 }
	*($1) = *($2 + [176])
	*(($1 + [8])) = *($2 + [184])
	*(($1 + [24])) = *((($2 + [176]) + [24]))
	*(($1 + [16])) = *((($2 + [176]) + [16]))
	*($2 + [164]) = ($1 + [32])
	$1 = *($0)
	if ( $1 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	CALL $74(($2 + [160]), ($2 + [176]))
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	*($0 + [4]) = $1
	CALL _ZdlPv($1)
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$1 = ($0 + [8])
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$1 = ($0 + [8])
	
.LABEL $label$2
	*($0) = *($2 + [160])
	$6 = *($2 + [164])
	*(($0 + [4])) = $6
	*($1) = *(($2 + [168]))
	*(($1 = ($0 + [16]))) = ((int_64)*($1) + (int_64)1)
	$global$0 = ($2 + [288])
	(unreachable)
	return ($6 + [-32])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9638])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9684])
	*($1 + [24]) = [0]
	*($1 + [16]) = *(*($2))
	$5 = *($1)
	CALL eosio_assert([1], [9735])
	$7 = *($1 + [28])
	$6 = *(($1 + [32]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$2 = [25]
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$2 = (($8 & [-8]) + $2)
	
.LABEL $label$2
	$7 = *($1 + [40])
	$6 = *(($1 + [44]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [2]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$2 = (($8 & [-4]) + $2)
	
.LABEL $label$4
	if ( ($2 <= [513]) ){ goto $label$6 }
	$3 = CALL $154($2)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $2)
	CALL $73($4, $1)
	CALL db_update_i64(*($1 + [56]), (int_64)0, $3, $2)
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $157($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($4 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	*($2 + [72]) = [0]
	*($2 + [64]) = (int_64)0
	CALL $1(($2 + [64]), [64])
	*(($3 = ($2 + [16]))) = *(($1 + [16]))
	*(($4 = ($2 + [24]))) = *(($1 + [24]))
	*(($5 = ($2 + [32]))) = *(($1 + [32]))
	*(($6 = ($2 + [40]))) = *(($1 + [40]))
	*(($7 = ($2 + [48]))) = *(($1 + [48]))
	*(($8 = ($2 + [56]))) = *(($1 + [56]))
	*($2) = *($1)
	*($2 + [8]) = *(($1 + [8]))
	$9 = *($2 + [68])
	$1 = *($2 + [64])
	*((($2 + [80]) + [56])) = *($8)
	*((($2 + [80]) + [48])) = *($7)
	*((($2 + [80]) + [40])) = *($6)
	*(($6 = (($2 + [80]) + [32]))) = *($5)
	*((($2 + [80]) + [24])) = *($4)
	*((($2 + [80]) + [16])) = *($3)
	*($2 + [88]) = *($2 + [8])
	*($2 + [80]) = *($2)
	$3 = ($9 - $1)
	CALL eosio_assert(((int_32)$3 > (int_32)[31]), [9186])
	CALL memcpy($1, ($2 + [80]), [32])
	CALL eosio_assert(((int_32)($3 + [-32]) > (int_32)[31]), [9186])
	CALL memcpy(($1 + [32]), $6, [32])
	$1 = *($2 + [64])
	CALL sha256($1, (*($2 + [68]) - $1), $0)
	$1 = *($2 + [64])
	if ( ($1 == 0) ){ goto $label$1 }
	*($2 + [68]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [144])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($4 + [4])
	*($1 + [8]) = *($5 + [132])
	$6 = [12]
	$7 = ($1 + [12])
	$8 = *($0)
	$10 = ($5 + [132])
	$9 = ($1 + [8])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	CALL $93($7, *(($5 + [136])), *(($5 + [140])))
	$10 = (*(($4 + [4])) + [132])
	
.LABEL $label$1
	CALL $114($3, $10)
	*(($1 + [56])) = *(($3 + [24]))
	*(($1 + [48])) = *(($3 + [16]))
	*(($1 + [40])) = *($3 + [8])
	*($1 + [32]) = *($3)
	$5 = *($7)
	$4 = *(($1 + [16]))
	$11 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[48]))
	$10 = ($1 + [32])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [41])
	$11 = *($5 + [8])
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	$5 = ($5 + [48])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$4 }
	
.LABEL $label$3
	$4 = ($6 + [32])
	if ( ($4 <= [513]) ){ goto $label$7 }
	$5 = CALL $154($4)
	goto $label$6 
	
.LABEL $label$7
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$6
	*($3) = $5
	*($3 + [8]) = ($5 + $4)
	CALL eosio_assert(((int_32)($6 + [32]) > (int_32)[7]), [9186])
	CALL memcpy($5, $1, [8])
	*($3 + [4]) = ($5 + [8])
	*($3 + [32]) = $3
	*($3 + [44]) = $7
	*($3 + [40]) = $9
	CALL $105(($3 + [40]), ($3 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [9186])
	CALL memcpy(*($3 + [4]), $10, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$11 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($8 + [8]), (int_64)-5915306442138583040, *(*($0 + [8])), $11, $5, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$11 >= (uint_64)*($8 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $157($5)
	if ( (uint_64)($11 <= *($8 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9638])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9684])
	*($1 + [24]) = [1]
	$4 = *($1)
	CALL eosio_assert([1], [9735])
	$6 = *($1 + [28])
	$5 = *(($1 + [32]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$9 = [25]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$9 = (($7 & [-8]) + $9)
	
.LABEL $label$2
	$6 = *($1 + [40])
	$5 = *(($1 + [44]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	
.LOOP $label$3:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$9 = (($7 & [-4]) + $9)
	
.LABEL $label$4
	if ( ($9 <= [513]) ){ goto $label$6 }
	$2 = CALL $154($9)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($9 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $9)
	CALL $73($3, $1)
	CALL db_update_i64(*($1 + [56]), (int_64)0, $2, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $157($2)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [272])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9186])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[31]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	CALL $3($0, ($1 + [48]))
	*($2) = $0
	*($2 + [12]) = ($1 + [213])
	*($2 + [8]) = ($1 + [212])
	*($2 + [16]) = ($1 + [214])
	*($2 + [20]) = ($1 + [215])
	*($2 + [24]) = ($1 + [216])
	*($2 + [28]) = ($1 + [217])
	*($2 + [32]) = ($1 + [218])
	*($2 + [36]) = ($1 + [219])
	*($2 + [40]) = ($1 + [220])
	*($2 + [44]) = ($1 + [221])
	*($2 + [48]) = ($1 + [222])
	*($2 + [52]) = ($1 + [223])
	*($2 + [56]) = ($1 + [224])
	*($2 + [60]) = ($1 + [225])
	*($2 + [64]) = ($1 + [226])
	*($2 + [68]) = ($1 + [227])
	*($2 + [72]) = ($1 + [228])
	*($2 + [76]) = ($1 + [229])
	*($2 + [80]) = ($1 + [230])
	*($2 + [88]) = ($1 + [232])
	*($2 + [84]) = ($1 + [231])
	*($2 + [92]) = ($1 + [233])
	*($2 + [96]) = ($1 + [234])
	*($2 + [100]) = ($1 + [235])
	*($2 + [104]) = ($1 + [236])
	*($2 + [108]) = ($1 + [237])
	*($2 + [112]) = ($1 + [238])
	*($2 + [116]) = ($1 + [239])
	*($2 + [120]) = ($1 + [240])
	*($2 + [124]) = ($1 + [241])
	*($2 + [128]) = ($1 + [242])
	*($2 + [132]) = ($1 + [243])
	*($2 + [136]) = ($1 + [244])
	*($2 + [140]) = ($1 + [245])
	*($2 + [144]) = ($1 + [246])
	*($2 + [148]) = ($1 + [247])
	*($2 + [152]) = ($1 + [248])
	*($2 + [156]) = ($1 + [249])
	*($2 + [164]) = ($1 + [251])
	*($2 + [160]) = ($1 + [250])
	*($2 + [168]) = ($1 + [252])
	*($2 + [172]) = ($1 + [253])
	*($2 + [176]) = ($1 + [254])
	*($2 + [180]) = ($1 + [255])
	*($2 + [184]) = ($1 + [256])
	*($2 + [188]) = ($1 + [257])
	*($2 + [192]) = ($1 + [258])
	*($2 + [196]) = ($1 + [259])
	*($2 + [200]) = ($1 + [260])
	*($2 + [204]) = ($1 + [261])
	*($2 + [208]) = ($1 + [262])
	*($2 + [212]) = ($1 + [263])
	*($2 + [216]) = ($1 + [264])
	*($2 + [220]) = ($1 + [265])
	*($2 + [224]) = ($1 + [266])
	*($2 + [228]) = ($1 + [267])
	*($2 + [232]) = ($1 + [268])
	*($2 + [240]) = ($1 + [270])
	*($2 + [236]) = ($1 + [269])
	*($2 + [244]) = ($1 + [271])
	*($2 + [248]) = ($1 + [272])
	*($2 + [252]) = ($1 + [273])
	*($2 + [256]) = ($1 + [274])
	*($2 + [260]) = ($1 + [275])
	*($2 + [264]) = ($1 + [276])
	*($2 + [268]) = ($1 + [277])
	CALL $117(($2 + [8]), $2)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [288]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [292]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $118($0, ($1 + [296]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [312]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[33]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [320]), [34])
	*($0 + [4]) = (*($0 + [4]) + [34])
	$global$0 = ($2 + [272])
	return $0
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9186])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = [0]
	*(($2 + [60])) = [0]
	*($2 + [52 align=4]) = (int_64)0
	*($2 + [48]) = *($1)
	$4 = (*(($1 + [8])) - *($1 + [4]))
	$5 = ((int_32)$4 / (int_32)[48])
	$6 = [4]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[89478486]) ){ goto $label$2 }
	$3 = CALL _Znwj($4)
	*(($7 = (($2 + [48]) + [8]))) = $3
	*(($2 + [60])) = ($3 + ((int_32)$5 * (int_32)[48]))
	*($2 + [52]) = $3
	$5 = *(($1 + [4]))
	$4 = (*(($1 + [8])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($3, $5, $4)
	$5 = ($3 + ((int_32)((uint_32)$4 / (uint_32)[48]) * (int_32)[48]))
	*($7) = $5
	goto $label$3 
	
.LABEL $label$5
	$5 = [0]
	goto $label$3 
	
.LABEL $label$4
	$5 = $3
	
.LABEL $label$3
	$8 = (CASTING uint_64)(uint_32 ((int_32)($5 - $3) / (int_32)[48]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$7 }
	$4 = $3
	
.LOOP $label$8:
	$6 = ($6 + [41])
	$8 = *($4 + [8])
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	$4 = ($4 + [48])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	*(($2 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$10
	*($2 + [40]) = [0]
	*($2 + [32]) = (int_64)0
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $1(($2 + [32]), $6)
	$4 = *($2 + [36])
	$6 = *($2 + [32])
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	$6 = [0]
	
.LABEL $label$11
	*(($2 + [12])) = [0]
	*($2 + [20]) = $6
	*($2 + [16]) = $6
	*($2 + [24]) = $4
	*($2 + [4 align=4]) = (int_64)0
	*($2) = *($1)
	$6 = (*(($1 + [8])) - *(($1 + [4])))
	$4 = ((int_32)$6 / (int_32)[48])
	$5 = ($2 | [4])
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$1 }
	$6 = CALL _Znwj($6)
	*(($3 = ($2 + [8]))) = $6
	*(($2 + [12])) = ($6 + ((int_32)$4 * (int_32)[48]))
	*($2 + [4]) = $6
	$1 = *(($1 + [4]))
	$4 = (*(($1 + [8])) - $1)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($6, $1, $4)
	*($3) = (*($3) + ((int_32)((uint_32)$4 / (uint_32)[48]) * (int_32)[48]))
	
.LABEL $label$13
	*($2 + [64]) = ($2 + [16])
	*($2 + [76]) = $5
	*($2 + [72]) = $2
	CALL $105(($2 + [72]), ($2 + [64]))
	$6 = *($2 + [4])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($2 + [8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$6 = *($2 + [32])
	CALL sha256($6, (*($2 + [36]) - $6), $0)
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$15 }
	*($2 + [36]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$global$0 = ($2 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $142((($2 + [48]) | [4]))
	
.LABEL $label$1
	CALL $142($5)
	(unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9370])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9475])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9408])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9475])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $142($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $113 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$1 = *($4 + [296])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($4 + [300])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$5 = ($4 + [200])
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($4 + [204])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($1 + [-16])
	$9 = *(($1 + [-12]))
	if ( ($9 == 0) ){ goto $label$9 }
	*(($1 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$9
	$1 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$8 }
	$1 = *($5)
	goto $label$6 
	
.LABEL $label$7
	$1 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( (*(($4 + [196])) == 0) ){ goto $label$10 }
	$1 = *(($4 + [184]))
	if ( ($1 == 0) ){ goto $label$10 }
	*(($4 + [188])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [31]) = [0]
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9317])
	CALL memcpy(($2 + [31]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	if ( (*($2 + [31]) == 0) ){ goto $label$1 }
	*((($2 + [8]) + [12])) = [0]
	*($2 + [12 align=4]) = (int_64)0
	*($2 + [32]) = $0
	*($2 + [44]) = (($2 + [8]) | [4])
	*($2 + [40]) = ($2 + [8])
	CALL $87(($2 + [32]), ($2 + [40]))
	if ( (*($1 + [16]) == 0) ){ goto $label$3 }
	*($1) = *($2 + [8])
	if ( ((int_32)$1 == (int_32)($2 + [8])) ){ goto $label$4 }
	CALL $93(($1 + [4]), *($2 + [12]), *(($2 + [16])))
	
.LABEL $label$4
	$1 = *($2 + [12])
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	*($1) = *($2 + [8])
	*($1 + [4 align=4]) = (int_64)0
	*(($1 + [12])) = [0]
	$3 = (*(($2 + [16])) - *($2 + [12]))
	$4 = ((int_32)$3 / (int_32)[48])
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$5 }
	$3 = CALL _Znwj($3)
	*(($1 + [4])) = $3
	*(($5 = ($1 + [8]))) = $3
	*(($1 + [12])) = ($3 + ((int_32)$4 * (int_32)[48]))
	$6 = *($2 + [12])
	$4 = (*((($2 + [8]) + [8])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($3, $6, $4)
	*($5) = (*($5) + ((int_32)((uint_32)$4 / (uint_32)[48]) * (int_32)[48]))
	
.LABEL $label$6
	*(($1 + [16])) = [1]
	$1 = *($2 + [12])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $142(($1 + [4]))
	
.LABEL $label$2
	*(($2 + [16])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
	(unreachable)
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9322])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $112($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [9317])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $86($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $138($0, $1, $2, CALL $151($2))
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9186])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[31]), [9186])
	CALL memcpy(*($7), $6, [32])
	$4 = (*($7) + [32])
	*($7) = $4
	$6 = ($6 + [32])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9186])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [9186])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $143())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $153($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $154($1)
	
.LABEL $label$2
	*(CALL $143()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $154(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $157($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $151 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $156 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10124]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10128])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10124]) = [1]
	$2 = ($2 << [16])
	*([0] + [10128]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10128])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10128]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10124]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10124]) = [1]
	$3 = ($3 << [16])
	*([0] + [10128]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10128])
	
.LABEL $label$10
	*([0] + [10128]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $157 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18516])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18324]
	$3 = (((int_32)$1 * (int_32)[12]) + [18324])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $154 (int_32 $0)
{
	return CALL $155([10132], $0)
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $156($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8245])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [40])) = *(($5 + [40]))
	*(($1 + [32])) = *(($5 + [32]))
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	CALL $42(($1 + [48]), ($5 + [48]))
	CALL memcpy(($1 + [212]), ($5 + [212]), [66])
	*($1 + [288]) = *($5 + [288])
	$6 = *($1 + [296])
	if ( ($6 == 0) ){ goto $label$2 }
	*(($1 + [300])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [304]))) = [0]
	*($1 + [296 align=4]) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [304])
	
.LABEL $label$1
	$7 = ($5 + [296])
	*(($1 + [296])) = *($7)
	$8 = ($5 + [304])
	*($6) = *($8)
	*(($1 + [312])) = *(($5 + [312]))
	*($7) = (int_64)0
	*($8) = [0]
	*(($1 + [344])) = *(($5 + [344]))
	*(($1 + [336])) = *(($5 + [336]))
	*(($1 + [328])) = *(($5 + [328]))
	*($1 + [320]) = *($5 + [320])
	*(($1 + [352])) = *(($5 + [352]))
	$6 = CALL $115($1)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$5 = CALL $154($6)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $6)
	CALL $116($3, $1)
	$9 = *($1)
	*($1 + [360]) = CALL db_store_i64(*($4 + [8]), (int_64)4849507793113186304, *(*($0 + [8])), $9, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $157($5)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = ($1 + [72])
	$5 = *($2 + [292])
	$7 = *(($1 + [100]))
	$6 = *(($1 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$4), [9552])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($1 + [80])), (int_64)-5915306442138583040, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $16($4, $8)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$4), [9552])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9072])
	CALL $2(($3 + [64]), ($2 + [48]))
	$8 = *($3 + [64])
	CALL sha256($8, (*($3 + [68]) - $8), ($3 + [32]))
	$8 = *($3 + [64])
	if ( ($8 == 0) ){ goto $label$5 }
	*($3 + [68]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$5
	if ( (int_64)(*(($2 + [312])) == 0) ){ goto $label$7 }
	$8 = *(($2 + [300]))
	*(($3 + [16])) = *(($8 + [-16]))
	*(($3 + [24])) = *(($8 + [-8]))
	*($3) = *(($8 + [-32]))
	*($3 + [8]) = *(($8 + [-24]))
	goto $label$6 
	
.LABEL $label$7
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	
.LABEL $label$6
	*(($8 = (($3 + [64]) + [40]))) = *($3 + [8])
	*(($7 = (($3 + [64]) + [24]))) = *((($3 + [32]) + [24]))
	*(($6 = (($3 + [64]) + [16]))) = *((($3 + [32]) + [16]))
	*(($1 = (($3 + [64]) + [48]))) = *(($3 + [16]))
	*(($2 = (($3 + [64]) + [56]))) = *(($3 + [24]))
	*($3 + [72]) = *($3 + [40])
	*($3 + [64]) = *($3 + [32])
	*($3 + [96]) = *($3)
	CALL $34(($3 + [128]), ($3 + [64]))
	*($7) = *((($3 + [128]) + [24]))
	*($6) = *((($3 + [128]) + [16]))
	*($8) = *(($9 + [40]))
	*($1) = *(($9 + [48]))
	*($2) = *(($9 + [56]))
	*($3 + [72]) = *($3 + [136])
	*($3 + [64]) = *($3 + [128])
	*($3 + [96]) = *($9 + [32])
	CALL $34($0, ($3 + [64]))
	$global$0 = ($3 + [160])
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9246])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5915306442138583040)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9192])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9192])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $16(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9186])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9186])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9186])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9186])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $107($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $111(CALL $110($0, ($1 + [132])), ($1 + [152]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9317])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9317])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [9317])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [9317])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [9317])
	CALL memcpy(($1 + [64]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [9317])
	CALL memcpy(($1 + [96]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9317])
	CALL memcpy(($1 + [128]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [152]), *(($0 + [160])), (int_64)-4998310178320285696, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$2 = [1]
	$4 = ($0 + [152])
	$0 = CALL $33($4, $3)
	if ( CALL has_auth(*($0)) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL eosio_assert([1], [9879])
	$0 = CALL db_next_i64(*($0 + [12]), ($1 + [8]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$0 = CALL $33($4, $0)
	if ( (CALL has_auth(*($0)) == 0) ){ goto $label$3 }
	$2 = [1]
	
.LABEL $label$2
	$global$0 = ($1 + [16])
	return $2
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return [0]
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($4 + [4])
	*($1 + [8]) = *($5)
	$6 = [12]
	$7 = ($1 + [12])
	$8 = *($0)
	$9 = ($1 + [8])
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$1 }
	CALL $93($7, *($5 + [4]), *(($5 + [8])))
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL $114($3, $5)
	*(($1 + [56])) = *(($3 + [24]))
	*(($1 + [48])) = *(($3 + [16]))
	*(($1 + [40])) = *($3 + [8])
	*($1 + [32]) = *($3)
	$5 = *($7)
	$4 = *(($1 + [16]))
	$10 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[48]))
	$11 = ($1 + [32])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [41])
	$10 = *($5 + [8])
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	$5 = ($5 + [48])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$4 }
	
.LABEL $label$3
	$4 = ($6 + [32])
	if ( ($4 <= [513]) ){ goto $label$7 }
	$5 = CALL $154($4)
	goto $label$6 
	
.LABEL $label$7
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$6
	*($3) = $5
	*($3 + [8]) = ($5 + $4)
	CALL eosio_assert(((int_32)($6 + [32]) > (int_32)[7]), [9186])
	CALL memcpy($5, $1, [8])
	*($3 + [4]) = ($5 + [8])
	*($3 + [32]) = $3
	*($3 + [44]) = $7
	*($3 + [40]) = $9
	CALL $105(($3 + [40]), ($3 + [32]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [9186])
	CALL memcpy(*($3 + [4]), $11, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$10 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($8 + [8]), (int_64)-5915306442138583040, *(*($0 + [8])), $10, $5, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$10 >= (uint_64)*($8 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $157($5)
	if ( (uint_64)($10 <= *($8 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [48])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9317])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9317])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = ($1 + [72])
	$7 = *(($1 + [100]))
	$6 = *(($1 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [9552])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($1 + [80])), (int_64)-5915306442138583040, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $16($5, $8)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [9552])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9119])
	$7 = *(($9 + [16]))
	$8 = *(($9 + [12]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$15:
	*((($4 + [32]) + [40])) = *(($8 + [40]))
	*((($4 + [32]) + [32])) = *(($8 + [32]))
	*((($4 + [32]) + [24])) = *(($8 + [24]))
	*((($4 + [32]) + [16])) = *(($8 + [16]))
	*((($4 + [32]) + [8])) = *(($8 + [8]))
	$2 = *($8)
	*($4 + [32]) = $2
	if ( ((int_64)$2 == (int_64)$3) ){ goto $label$13 }
	$8 = ($8 + [48])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$15 }
	
.LABEL $label$14
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$8 = CALL $151([9150])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$18 }
	*($4 + [16]) = ($8 << [1])
	$9 = (($4 + [16]) | [1])
	if ( $8 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$7 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($7)
	*($4 + [16]) = ($7 | [1])
	*($4 + [24]) = $9
	*($4 + [20]) = $8
	
.LABEL $label$17
	CALL memcpy($9, [9150], $8)
	
.LABEL $label$16
	$7 = [0]
	*(($9 + $8)) = [0]
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$12 }
	$9 = *([0] + [9328])
	
.LOOP $label$20:
	*((($4 + [32]) + ($8 = $7))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$19 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$20 }
	
.LABEL $label$19
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($7 << [1])
	$9 = ($4 | [1])
	goto $label$10 
	
.LABEL $label$13
	$7 = ($0 + [66])
	$3 = *($4 + [40])
	
.LOOP $label$21:
	$8 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	*($4 + [16]) = ((((int_64)$3) != (int_64)0) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[0]), [9186])
	CALL memcpy($0, ($4 + [16]), [1])
	$0 = ($0 + [1])
	if ( ((int_64)($3 == 0) == 0) ){ goto $label$21 }
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[32]), [9186])
	CALL memcpy($0, ($4 + [44]), [33])
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$12
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$8 = ($4 | [1])
	$7 = $8
	goto $label$9 
	
.LABEL $label$11
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($4) = ($6 | [1])
	*($4 + [8]) = $9
	*($4 + [4]) = $7
	
.LABEL $label$10
	$6 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$22:
	*(($9 + $8)) = *((($4 + [32]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$22 }
	$7 = ($9 + $7)
	$8 = ($4 | [1])
	
.LABEL $label$9
	*($7) = [0]
	$9 = *($4)
	$6 = ($9 & [1])
	$8 = CALL $137(($4 + [16]), ( *($4 + [8]) ? $8 : $6 ), ( *($4 + [4]) ? uint_32($9 >> [1]) : $6 ))
	$9 = ($8 + [8])
	*(($7 = (($4 + [32]) + [8]))) = *($9)
	*($4 + [32]) = *($8)
	*($8) = (int_64)0
	*($9) = [0]
	CALL eosio_assert([0], ( *($7) ? (($4 + [32]) | [1]) : (*($4 + [32]) & [1]) ))
	if ( (*($4 + [32]) & [1]) ){ goto $label$24 }
	if ( (*($4) & [1]) ){ goto $label$23 }
	goto $label$7 
	
.LABEL $label$24
	CALL _ZdlPv(*($7))
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($4 + [8])))
	if ( (*($4 + [16]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	CALL $131(($4 + [16]))
	
.LABEL $label$7
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($4 + [24]))
	
.LABEL $label$5
	*(($0 + [32])) = [0]
	*(($0 + [24])) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [8])) = (int_64)0
	*($0) = (int_64)0
	$global$0 = ($4 + [80])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $142($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *(($1 + [12]))
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [16])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [5])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [5])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$1 }
	$6 = [134217727]
	if ( ((uint_32)int_32($5 >> [5]) > (uint_32)[67108862]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [4])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[134217728]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [5])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [5])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [5]) << [5]))
	return (unreachable)
	
.LABEL $label$1
	CALL $142($0)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$0 = CALL memcpy($0, $1, [132])
	$2 = *(($0 + [148]))
	if ( ((int_32)$2 != (int_32)*(($1 + [148]))) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$4 }
	*(($0 + [132])) = *(($1 + [132]))
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	CALL $93(($0 + [136]), *(($1 + [136])), *(($1 + [140])))
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$3 }
	$2 = *(($0 + [136]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($0 + [140])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	*(($0 + [148])) = [0]
	
.LABEL $label$4
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	*(($3 = ($0 + [136]))) = [0]
	*(($0 + [140])) = (int_64)0
	*(($0 + [132])) = *(($1 + [132]))
	$2 = (*(($1 + [140])) - *(($1 + [136])))
	$4 = ((int_32)$2 / (int_32)[48])
	if ( ($2 == 0) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$7 }
	$2 = CALL _Znwj($2)
	*(($0 + [136])) = $2
	*(($0 + [144])) = ($2 + ((int_32)$4 * (int_32)[48]))
	*(($4 = ($0 + [140]))) = $2
	$5 = *(($1 + [136]))
	$3 = (*(($1 + [140])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($2, $5, $3)
	*($4) = (*($4) + ((int_32)((uint_32)$3 / (uint_32)[48]) * (int_32)[48]))
	
.LABEL $label$8
	*(($0 + [148])) = [1]
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	CALL $142($3)
	
.LABEL $label$2
	CALL $94(($0 + [152]), *($1 + [152]), *(($1 + [156])))
	
.LABEL $label$1
	(unreachable)
	return $0
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [272])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9317])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[31]), [9317])
	CALL memcpy(($1 + [16]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	CALL $21($0, ($1 + [48]))
	*($2) = $0
	*($2 + [12]) = ($1 + [213])
	*($2 + [8]) = ($1 + [212])
	*($2 + [16]) = ($1 + [214])
	*($2 + [20]) = ($1 + [215])
	*($2 + [24]) = ($1 + [216])
	*($2 + [28]) = ($1 + [217])
	*($2 + [32]) = ($1 + [218])
	*($2 + [36]) = ($1 + [219])
	*($2 + [40]) = ($1 + [220])
	*($2 + [44]) = ($1 + [221])
	*($2 + [48]) = ($1 + [222])
	*($2 + [52]) = ($1 + [223])
	*($2 + [56]) = ($1 + [224])
	*($2 + [60]) = ($1 + [225])
	*($2 + [64]) = ($1 + [226])
	*($2 + [68]) = ($1 + [227])
	*($2 + [72]) = ($1 + [228])
	*($2 + [76]) = ($1 + [229])
	*($2 + [80]) = ($1 + [230])
	*($2 + [88]) = ($1 + [232])
	*($2 + [84]) = ($1 + [231])
	*($2 + [92]) = ($1 + [233])
	*($2 + [96]) = ($1 + [234])
	*($2 + [100]) = ($1 + [235])
	*($2 + [104]) = ($1 + [236])
	*($2 + [108]) = ($1 + [237])
	*($2 + [112]) = ($1 + [238])
	*($2 + [116]) = ($1 + [239])
	*($2 + [120]) = ($1 + [240])
	*($2 + [124]) = ($1 + [241])
	*($2 + [128]) = ($1 + [242])
	*($2 + [132]) = ($1 + [243])
	*($2 + [136]) = ($1 + [244])
	*($2 + [140]) = ($1 + [245])
	*($2 + [144]) = ($1 + [246])
	*($2 + [148]) = ($1 + [247])
	*($2 + [152]) = ($1 + [248])
	*($2 + [156]) = ($1 + [249])
	*($2 + [164]) = ($1 + [251])
	*($2 + [160]) = ($1 + [250])
	*($2 + [168]) = ($1 + [252])
	*($2 + [172]) = ($1 + [253])
	*($2 + [176]) = ($1 + [254])
	*($2 + [180]) = ($1 + [255])
	*($2 + [184]) = ($1 + [256])
	*($2 + [188]) = ($1 + [257])
	*($2 + [192]) = ($1 + [258])
	*($2 + [196]) = ($1 + [259])
	*($2 + [200]) = ($1 + [260])
	*($2 + [204]) = ($1 + [261])
	*($2 + [208]) = ($1 + [262])
	*($2 + [212]) = ($1 + [263])
	*($2 + [216]) = ($1 + [264])
	*($2 + [220]) = ($1 + [265])
	*($2 + [224]) = ($1 + [266])
	*($2 + [228]) = ($1 + [267])
	*($2 + [232]) = ($1 + [268])
	*($2 + [240]) = ($1 + [270])
	*($2 + [236]) = ($1 + [269])
	*($2 + [244]) = ($1 + [271])
	*($2 + [248]) = ($1 + [272])
	*($2 + [252]) = ($1 + [273])
	*($2 + [256]) = ($1 + [274])
	*($2 + [260]) = ($1 + [275])
	*($2 + [264]) = ($1 + [276])
	*($2 + [268]) = ($1 + [277])
	CALL $22(($2 + [8]), $2)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9317])
	CALL memcpy(($1 + [288]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9317])
	CALL memcpy(($1 + [292]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $88($0, ($1 + [296]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9317])
	CALL memcpy(($1 + [312]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[33]), [9317])
	CALL memcpy(($1 + [320]), *($0 + [4]), [34])
	*($0 + [4]) = (*($0 + [4]) + [34])
	$global$0 = ($2 + [272])
	return $0
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $136($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9294])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $154($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9317])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	$6 = CALL $88(($3 + [32]), ($5 + [8]))
	CALL eosio_assert(((uint_32)(*($6 + [8]) - *($6 + [4])) > (uint_32)[7]), [9317])
	CALL memcpy(($5 + [24]), *($6 + [4]), [8])
	*($5 + [36]) = $1
	*($6 + [4]) = (*($6 + [4]) + [8])
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $71(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $157($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $68 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [48]) = $1
	CALL eosio_assert(CALL $37(*($0), $3), [8331])
	CALL require_auth($3)
	CALL eosio_assert((int_64)(((int_64)$1 & (int_64)1023) == 0), [8561])
	*(($5 = ($4 + [40]))) = [0]
	*($4 + [16]) = $3
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	$7 = CALL db_find_i64($6, $3, (int_64)4350895922339643392, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $69(($4 + [8]), $7) + [32]) == (int_32)($4 + [8])), [9552])
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	$7 = [1]
	
.LABEL $label$1
	CALL eosio_assert($7, [8614])
	$3 = *($0)
	*($4 + [4]) = $2
	*($4) = ($4 + [48])
	*($4 + [88]) = $3
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$7()), [9794])
	*($4 + [68]) = $4
	*($4 + [64]) = ($4 + [8])
	*($4 + [72]) = ($4 + [88])
	*(($0 = CALL _Znwj([48])) + [16]) = [0]
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [32]) = ($4 + [8])
	CALL $70(($4 + [64]), $0)
	*($4 + [80]) = $0
	$3 = *($0)
	*($4 + [64]) = $3
	$7 = *($0 + [36])
	*($4 + [60]) = $7
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*($5)) ){ goto $label$7 }
	*($2 + [8]) = $3
	*($2 + [16]) = $7
	*($4 + [80]) = [0]
	*($2) = $0
	*($8) = ($2 + [24])
	$0 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $71(($4 + [32]), ($4 + [80]), ($4 + [64]), ($4 + [60]))
	$0 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( $0 ){ goto $label$5 }
	
.LABEL $label$6
	if ( (uint_64)(*($4 + [48]) <= (int_64)524289) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$2 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$8 }
	*(($0 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	CALL _ZdlPv($0)
	if ( (uint_64)(*($4 + [48]) <= (int_64)524289) ){ goto $label$3 }
	
.LABEL $label$4
	$0 = [0]
	$2 = ($4 + [16])
	$5 = CALL db_lowerbound_i64(*($4 + [8]), *($2), (int_64)4350895922339643392, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	CALL $69(($4 + [8]), $5)
	$2 = CALL db_lowerbound_i64(*($4 + [8]), *($2), (int_64)4350895922339643392, ((int_64)*($4 + [48]) + (int_64)-524288))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$0 = CALL $69(($4 + [8]), $2)
	
.LABEL $label$9
	$3 = *($0)
	if ( (int_64)(((uint_64)$3 % (uint_64)(int_64)6144) == 0) ){ goto $label$10 }
	if ( ((uint_64)$3 >= (uint_64)((int_64)*($4 + [48]) + (int_64)-522240)) ){ goto $label$10 }
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [9845])
	CALL eosio_assert($2, [9879])
	$2 = CALL db_next_i64(*($0 + [36]), ($4 + [64]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$11 }
	CALL $69(($4 + [8]), $2)
	
.LABEL $label$11
	CALL $72(($4 + [8]), $0)
	
.LABEL $label$10
	$2 = ($4 + [16])
	if ( ((uint_64)*(CALL $69(($4 + [8]), CALL $fimport$5(*($4 + [8]), *($2), (int_64)4350895922339643392, (int_64)0))) >= (uint_64)((int_64)*($4 + [48]) + (int_64)-1048576)) ){ goto $label$3 }
	$0 = [0]
	$2 = CALL db_lowerbound_i64(*($4 + [8]), *($2), (int_64)4350895922339643392, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$0 = CALL $69(($4 + [8]), $2)
	
.LABEL $label$12
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [9845])
	CALL eosio_assert($2, [9879])
	$2 = CALL db_next_i64(*($0 + [36]), ($4 + [64]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	CALL $69(($4 + [8]), $2)
	
.LABEL $label$13
	CALL $72(($4 + [8]), $0)
	
.LABEL $label$3
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$14 }
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$18 }
	$5 = *($2 + [8])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($2 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	CALL _ZdlPv($2)
	
.LABEL $label$18
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($4 + [32]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $7
	
.LABEL $label$15
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$14
	$global$0 = ($4 + [96])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9186])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	$4 = *($1 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$7 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $3) > (int_32)[0]), [9186])
	CALL memcpy(*($5), ($2 + [15]), [1])
	$3 = (*($5) + [1])
	*($5) = $3
	if ( $7 ){ goto $label$1 }
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $3) > (int_32)[32]), [9186])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ($1 + [12]), [33])
	*($5) = (*($5) + [33])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [152])
	$6 = *(($0 + [180]))
	$5 = *(($0 + [176]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$4), [9552])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [160])), (int_64)-4998310178320285696, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $33($4, $7)
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$4), [9552])
	
.LABEL $label$1
	$7 = *($1)
	$6 = CALL $151([8495])
	if ( ((int_32)$6 != (int_32)( *($1 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$10 }
	if ( (CALL $140($1, [0], [-1], [8495], $6) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$7 = *($1)
	$6 = CALL $151([8519])
	if ( ((int_32)$6 != (int_32)( *(($1 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$11 }
	if ( (CALL $140($1, [0], [-1], [8519], $6) == 0) ){ goto $label$8 }
	
.LABEL $label$11
	CALL eosio_assert([0], [8546])
	goto $label$5 
	
.LABEL $label$9
	CALL eosio_assert(($8 == 0), [8499])
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL $fimport$7()), [9794])
	*(($7 = CALL _Znwj([24])) + [8]) = $4
	*($7) = $2
	CALL eosio_assert([1], [9186])
	CALL memcpy(($3 + [16]), $7, [8])
	$2 = *($7)
	$8 = CALL db_store_i64(*(($0 + [160])), (int_64)-4998310178320285696, $9, $2, ($3 + [16]), [8])
	*($7 + [12]) = $8
	$6 = ($0 + [168])
	if ( (uint_64)($2 <= *($6)) ){ goto $label$12 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($3 + [8]) = $7
	$2 = *($7)
	*($3 + [16]) = $2
	*($3 + [4]) = $8
	$5 = ($0 + [180])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [184]))) ){ goto $label$7 }
	*($6 + [8]) = $2
	*($6 + [16]) = $8
	*($3 + [8]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8526])
	CALL eosio_assert($7, [9845])
	CALL eosio_assert($7, [9879])
	$7 = CALL db_next_i64(*($8 + [12]), ($3 + [16]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	CALL $33($4, $7)
	
.LABEL $label$13
	CALL $66($4, $8)
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$7
	CALL $67(($0 + [176]), ($3 + [8]), ($3 + [16]), ($3 + [4]))
	$7 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($7)
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [32])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$2 }
	*(($1 + [32])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [36]))) = [0]
	*($1 + [28 align=4]) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [36])
	
.LABEL $label$1
	$7 = ($5 + [28])
	*(($1 + [28])) = *($7)
	$8 = ($5 + [36])
	*($6) = *($8)
	*($8) = [0]
	*($7) = (int_64)0
	$6 = *($1 + [40])
	if ( ($6 == 0) ){ goto $label$4 }
	*(($1 + [44])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [48]))) = [0]
	*($1 + [40 align=4]) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$6 = ($1 + [48])
	
.LABEL $label$3
	$7 = ($5 + [40])
	*(($1 + [40])) = *($7)
	$5 = ($5 + [48])
	*($6) = *($5)
	*($5) = [0]
	*($7) = (int_64)0
	$7 = *($1 + [28])
	$6 = *(($1 + [32]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$5 = [25]
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$6 }
	$5 = (($8 & [-8]) + $5)
	
.LABEL $label$6
	$7 = *($1 + [40])
	$6 = *(($1 + [44]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [2]))
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	$5 = (($8 & [-4]) + $5)
	
.LABEL $label$8
	if ( ($5 <= [513]) ){ goto $label$10 }
	$2 = CALL $154($5)
	goto $label$9 
	
.LABEL $label$10
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$9
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $73($3, $1)
	$9 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)-4426590578272108544, *(*($0 + [8])), $9, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$13 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $157($2)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$11 }
	
.LABEL $label$12
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$global$0 = ($3 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $142($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9909])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9954])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10004])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(CALL $37(*($0), *($1)), [8331])
	CALL require_auth(*($1))
	*($2 + [4]) = [0]
	$3 = ($0 + [112])
	*($2) = $3
	$1 = CALL $39($2)
	$4 = *($1)
	$5 = *($1 + [4])
	CALL eosio_assert(((int_32)*($5 + [24]) ^ (int_32)[1]), [8347])
	$6 = *($5)
	if ( ((uint_64)$6 > (uint_64)*($5 + [8])) ){ goto $label$1 }
	$7 = ($0 + [32])
	$8 = ($0 + [60])
	$9 = ($0 + [56])
	$10 = ($0 + [40])
	$11 = ($5 + [8])
	
.LOOP $label$2:
	$1 = *($8)
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$7:
	$0 = ($1 + [-24])
	$13 = *($0)
	if ( ((int_64)*($13) == (int_64)$6) ){ goto $label$6 }
	$1 = $0
	if ( ((int_32)$12 != (int_32)$0) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(($13 + [356])) == (int_32)$7), [9552])
	if ( $13 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$0 = CALL db_find_i64(*($7), *($10), (int_64)4849507793113186304, $6)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$13 = CALL $14($7, $0)
	CALL eosio_assert(((int_32)*($13 + [356]) == (int_32)$7), [9552])
	
.LABEL $label$4
	CALL eosio_assert([1], [9845])
	CALL eosio_assert([1], [9879])
	$0 = CALL db_next_i64(*($13 + [360]), ($2 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	CALL $14($7, $0)
	
.LABEL $label$8
	CALL $15($7, $13)
	
.LABEL $label$3
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((uint_64)$6 <= (uint_64)*($11)) ){ goto $label$2 }
	
.LABEL $label$1
	$0 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($0, [9845])
	CALL eosio_assert($0, [9879])
	$0 = CALL db_next_i64(*($5 + [56]), ($2 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$9 }
	CALL $18($4, $0)
	
.LABEL $label$9
	CALL $19($3, $5)
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$1 = ($global$0 - [176])
	$global$0 = $1
	$2 = ($0 + [112])
	*($1 + [80]) = (CASTING uint_64)(uint_32 $2)
	$4 = *($3)
	$3 = CALL $63(($1 + [80]), *(CALL $39(($1 + [80])) + [4]))
	if ( (uint_64)((int_64))(*($3 + [8]) - $4) <= (int_64)1001) ){ goto $label$1 }
	$5 = ((int_64)$4 & (int_64)4294967295)
	if ( ((uint_64)((int_64)$4 + (int_64)50) <= (uint_64)$5) ){ goto $label$2 }
	$6 = ($0 + [32])
	$7 = (CASTING uint_32)(uint_64 $4)
	$8 = ($0 + [60])
	$9 = ($0 + [56])
	$10 = ($0 + [40])
	
.LOOP $label$3:
	$12 = *($8)
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$6 }
	
.LOOP $label$8:
	$13 = ($12 + [-24])
	$14 = *($13)
	if ( ((int_64)*($14) == (int_64)$5) ){ goto $label$7 }
	$12 = $13
	if ( ((int_32)$11 != (int_32)$13) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(($14 + [356])) == (int_32)$6), [9552])
	if ( $14 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$13 = CALL db_find_i64(*($6), *($10), (int_64)4849507793113186304, $5)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$4 }
	$14 = CALL $14($6, $13)
	CALL eosio_assert(((int_32)*($14 + [356]) == (int_32)$6), [9552])
	
.LABEL $label$5
	CALL eosio_assert([1], [9845])
	CALL eosio_assert([1], [9879])
	$13 = CALL db_next_i64(*($14 + [360]), ($1 + [24]))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$9 }
	CALL $14($6, $13)
	
.LABEL $label$9
	CALL $15($6, $14)
	
.LABEL $label$4
	$7 = ($7 + [1])
	$5 = (CASTING uint_64)(uint_32 $7)
	if ( ((uint_64)((int_64)*($3) + (int_64)50) > (uint_64)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*(($12 = CALL $63(($1 + [24]), $3))) = ((int_64)*($12) + (int_64)50)
	*($1 + [16]) = $2
	*($1 + [20]) = [0]
	$5 = *(CALL $39(($1 + [16])))
	$13 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	$14 = ((int_32)$13) != (int_32)[0]
	CALL eosio_assert($14), [9845])
	CALL eosio_assert($14, [9879])
	$14 = CALL db_next_i64(*($13 + [56]), ($1 + [144]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$10 }
	CALL $18((CASTING uint_32)(uint_64 $5), $14)
	
.LABEL $label$10
	CALL $19($2, $13)
	$5 = *($0)
	*($1 + [8]) = $12
	*($1 + [168]) = $5
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$7()), [9794])
	*($1 + [144]) = $2
	*($1 + [148]) = ($1 + [8])
	*($1 + [152]) = ($1 + [168])
	*(($13 = CALL _Znwj([64])) + [24]) = [0]
	*($13 + [16]) = (int_64)0
	*($13 + [28 align=4]) = (int_64)0
	*($13 + [36 align=4]) = (int_64)0
	*($13 + [44 align=4]) = (int_64)0
	*($13 + [52]) = $2
	CALL $76(($1 + [144]), $13)
	*($1 + [160]) = $13
	$5 = *($13)
	*($1 + [144]) = $5
	$11 = *($13 + [56])
	*($1 + [140]) = $11
	$6 = ($0 + [140])
	$14 = *($6)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [144]))) ){ goto $label$15 }
	*($14 + [8]) = $5
	*($14 + [16]) = $11
	*($1 + [160]) = [0]
	*($14) = $13
	*($6) = ($14 + [24])
	$13 = *($1 + [160])
	*($1 + [160]) = [0]
	if ( ($13 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $32(($0 + [136]), ($1 + [160]), ($1 + [144]), ($1 + [140]))
	$13 = *($1 + [160])
	*($1 + [160]) = [0]
	if ( $13 ){ goto $label$13 }
	
.LABEL $label$14
	$13 = *($12 + [40])
	if ( ($13 == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$14 = *($13 + [40])
	if ( ($14 == 0) ){ goto $label$16 }
	*(($13 + [44])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$16
	$14 = *($13 + [28])
	if ( ($14 == 0) ){ goto $label$17 }
	*(($13 + [32])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$17
	CALL _ZdlPv($13)
	$13 = *($12 + [40])
	if ( ($13 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*(($12 + [44])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$11
	$13 = *($12 + [28])
	if ( ($13 == 0) ){ goto $label$1 }
	*(($12 + [32])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$1
	$13 = *($3 + [40])
	if ( ($13 == 0) ){ goto $label$18 }
	*(($3 + [44])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$18
	$13 = *($3 + [28])
	if ( ($13 == 0) ){ goto $label$19 }
	*(($3 + [32])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$19
	$global$0 = ($1 + [176])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = *($1)
	$2 = *(($1 + [8]))
	$3 = *(($1 + [16]))
	$4 = *(($1 + [24]))
	*(($0 + [32])) = (int_64)0
	*(($0 + [24])) = $4
	*(($0 + [16])) = $3
	*(($0 + [8])) = $2
	*($0 + [28]) = [0]
	$4 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = int_32($4 >> [3])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$2 }
	$4 = CALL _Znwj($4)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + ($5 << [3]))
	*(($5 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$7 = (*(($1 + [32])) - $6)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $6, $7)
	*($5) = (*($5) + $7)
	
.LABEL $label$3
	*($0 + [40 align=4]) = (int_64)0
	*(($0 + [48])) = [0]
	$4 = (*(($1 + [44])) - *($1 + [40]))
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = int_32($4 >> [2])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$4 = CALL _Znwj($4)
	*(($0 + [40])) = $4
	*(($0 + [48])) = ($4 + ($5 << [2]))
	*(($5 = ($0 + [44]))) = $4
	$7 = *(($1 + [40]))
	$1 = (*(($1 + [44])) - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $7, $1)
	*($5) = (*($5) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $142(($0 + [28]))
	
.LABEL $label$1
	CALL $142(($0 + [40]))
	(unreachable)
	return (unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [112])
	$global$0 = $2
	CALL eosio_assert(CALL $37(*($0), *($1)), [8331])
	CALL require_auth(*($1))
	$3 = ($0 + [112])
	$1 = [0]
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-4426590578272108544, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $18($3, $5)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9879])
	$4 = CALL db_next_i64(*($4 + [56]), ($2 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$1 = CALL $18($3, $4)
	
.LABEL $label$2
	$6 = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [8376])
	CALL eosio_assert(*($1 + [24]), [8408])
	$1 = CALL db_lowerbound_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-4426590578272108544, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $18($3, $1)
	
.LABEL $label$3
	$7 = *($6)
	$8 = ((int_64)$7 & (int_64)4294967295)
	$9 = (CASTING uint_32)(uint_64 $7)
	$10 = *($6 + [8])
	if ( ((uint_64)(int_64))(((int_64)$10 + (int_64)1) - $7) <= (uint_64)(int_64)150) ){ goto $label$10 }
	if ( ((uint_64)((int_64)$7 + (int_64)150) <= (uint_64)$8) ){ goto $label$11 }
	$11 = ($0 + [32])
	$12 = ($0 + [60])
	$13 = ($0 + [56])
	$14 = ($0 + [40])
	
.LOOP $label$12:
	$4 = *($12)
	$15 = *($13)
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$17:
	$1 = ($4 + [-24])
	$5 = *($1)
	if ( ((int_64)*($5) == (int_64)$8) ){ goto $label$16 }
	$4 = $1
	if ( ((int_32)$15 != (int_32)$1) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*(($5 + [356])) == (int_32)$11), [9552])
	if ( $5 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = CALL db_find_i64(*($11), *($14), (int_64)4849507793113186304, $8)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $14($11, $1)
	CALL eosio_assert(((int_32)*($5 + [356]) == (int_32)$11), [9552])
	
.LABEL $label$14
	CALL prints([8435])
	CALL printui($8)
	CALL eosio_assert([1], [9845])
	CALL eosio_assert([1], [9879])
	$1 = CALL db_next_i64(*($5 + [360]), ($2 + [16]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$18 }
	CALL $14($11, $1)
	
.LABEL $label$18
	CALL $15($11, $5)
	
.LABEL $label$13
	$9 = ($9 + [1])
	$8 = (CASTING uint_64)(uint_32 $9)
	if ( ((uint_64)((int_64)*($6) + (int_64)150) > (uint_64)$8) ){ goto $label$12 }
	
.LABEL $label$11
	*(($4 = CALL $63(($2 + [16]), $6))) = ((int_64)*($4) + (int_64)150)
	$1 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($1, [9845])
	CALL eosio_assert($1, [9879])
	$1 = CALL db_next_i64(*($6 + [56]), ($2 + [80]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$19 }
	CALL $18($3, $1)
	
.LABEL $label$19
	CALL $19($3, $6)
	$8 = *($0)
	*($2 + [8]) = $4
	*($2 + [104]) = $8
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$7()), [9794])
	*($2 + [80]) = $3
	*($2 + [84]) = ($2 + [8])
	*($2 + [88]) = ($2 + [104])
	*(($1 = CALL _Znwj([64])) + [24]) = [0]
	*($1 + [16]) = (int_64)0
	*($1 + [28 align=4]) = (int_64)0
	*($1 + [36 align=4]) = (int_64)0
	*($1 + [44 align=4]) = (int_64)0
	*($1 + [52]) = $3
	CALL $64(($2 + [80]), $1)
	*($2 + [96]) = $1
	$8 = *($1)
	*($2 + [80]) = $8
	$15 = *($1 + [56])
	*($2 + [76]) = $15
	$9 = ($0 + [140])
	$5 = *($9)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [144]))) ){ goto $label$9 }
	*($5 + [8]) = $8
	*($5 + [16]) = $15
	*($2 + [96]) = [0]
	*($5) = $1
	*($9) = ($5 + [24])
	$1 = *($2 + [96])
	*($2 + [96]) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	if ( (uint_64)($10 <= $8) ){ goto $label$20 }
	$11 = ($0 + [32])
	$12 = ($0 + [60])
	$13 = ($0 + [56])
	$16 = ($0 + [40])
	$14 = ($6 + [8])
	
.LOOP $label$21:
	$4 = *($12)
	$15 = *($13)
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$24 }
	
.LOOP $label$26:
	$1 = ($4 + [-24])
	$5 = *($1)
	if ( ((int_64)*($5) == (int_64)$8) ){ goto $label$25 }
	$4 = $1
	if ( ((int_32)$15 != (int_32)$1) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*(($5 + [356])) == (int_32)$11), [9552])
	if ( $5 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$1 = CALL db_find_i64(*($11), *($16), (int_64)4849507793113186304, $8)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$22 }
	$5 = CALL $14($11, $1)
	CALL eosio_assert(((int_32)*($5 + [356]) == (int_32)$11), [9552])
	
.LABEL $label$23
	CALL prints([8455])
	CALL printui($8)
	CALL eosio_assert([1], [9845])
	CALL eosio_assert([1], [9879])
	$1 = CALL db_next_i64(*($5 + [360]), ($2 + [16]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$27 }
	CALL $14($11, $1)
	
.LABEL $label$27
	CALL $15($11, $5)
	
.LABEL $label$22
	$9 = ($9 + [1])
	$8 = (CASTING uint_64)(uint_32 $9)
	$10 = *($14)
	if ( ((uint_64)$10 >= (uint_64)$8) ){ goto $label$21 }
	$7 = *($6)
	
.LABEL $label$20
	$1 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($1, [9845])
	CALL eosio_assert($1, [9879])
	$1 = (CASTING uint_32)(uint_64 (int_64))($10 - $7))
	$4 = CALL db_next_i64(*($6 + [56]), ($2 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$28 }
	CALL $18($3, $4)
	
.LABEL $label$28
	CALL $19($3, $6)
	$15 = CALL $18($3, CALL $fimport$5(*(($0 + [112])), *(($0 + [120])), (int_64)-4426590578272108544, (int_64)0))
	$5 = ($1 + [1])
	if ( ((uint_32)$5 > (uint_32)[150]) ){ goto $label$4 }
	$4 = ($0 + [32])
	$8 = *($15)
	$9 = ($0 + [40])
	
.LOOP $label$29:
	$1 = [0]
	$15 = CALL db_lowerbound_i64(*($4), *($9), (int_64)4849507793113186304, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$30 }
	$1 = CALL $14($4, $15)
	
.LABEL $label$30
	if ( ((uint_64)*($1) >= (uint_64)$8) ){ goto $label$4 }
	$15 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($15, [9845])
	CALL eosio_assert($15, [9879])
	$15 = CALL db_next_i64(*($1 + [360]), ($2 + [16]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$31 }
	CALL $14($4, $15)
	
.LABEL $label$31
	CALL $15($4, $1)
	CALL prints([8475])
	CALL printui(*($1))
	$5 = ($5 + [1])
	if ( ($5 <= [151]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$9
	CALL $32(($0 + [136]), ($2 + [96]), ($2 + [80]), ($2 + [76]))
	$1 = *($2 + [96])
	*($2 + [96]) = [0]
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$8
	$1 = *($4 + [40])
	if ( ($1 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = *($1 + [40])
	if ( ($5 == 0) ){ goto $label$32 }
	*(($1 + [44])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$32
	$5 = *($1 + [28])
	if ( ($5 == 0) ){ goto $label$33 }
	*(($1 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$33
	CALL _ZdlPv($1)
	$1 = *($4 + [40])
	if ( ($1 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [44])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($4 + [32])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [112])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9322])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [2])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $102($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [2]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[3]), [9317])
	CALL memcpy($7, *($2), [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$7 = ($7 + [4])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9322])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $103($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [9317])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $142($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [2])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($2 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $142($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [2]))
	$3 = ($2 + ($3 << [2]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [2]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9186])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$5 = *($0 + [4])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($5 + [4]) - *($5)) / (int_32)[48]))
	$3 = *($1)
	$0 = *($3 + [4])
	$7 = ($3 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $0) > (int_32)[0]), [9186])
	$4 = ($3 + [4])
	CALL memcpy(*($4), ($2 + [15]), [1])
	$0 = (*($4) + [1])
	*($4) = $0
	if ( $1 ){ goto $label$1 }
	$0 = *(($5 + [4]))
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $108($3, $4)
	$4 = ($4 + [48])
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [5])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$4 }
	$3 = [134217727]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$3 = int_32($2 >> [4])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [32])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $142($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [5]))
	$5 = ($2 + ($5 << [5]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [5]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL _Znwj($3)
	*(($2 + [56])) = ($4 + $3)
	*($2 + [48]) = $4
	*($2 + [52]) = $4
	$5 = *($1)
	$3 = (*(($1 + [4])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $5, $3)
	*($2 + [52]) = ($4 + $3)
	
.LABEL $label$4
	*(($2 + [44])) = [0]
	*($2 + [36 align=4]) = (int_64)0
	*($2 + [32]) = *($1 + [12])
	$3 = (*(($1 + [20])) - *(($1 + [16])))
	$4 = ((int_32)$3 / (int_32)[48])
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($5 = ($2 + [40]))) = $3
	*(($2 + [44])) = ($3 + ((int_32)$4 * (int_32)[48]))
	*($2 + [36]) = $3
	$6 = *(($1 + [16]))
	$4 = (*(($1 + [20])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $6, $4)
	*($5) = ($3 + ((int_32)((uint_32)$4 / (uint_32)[48]) * (int_32)[48]))
	
.LABEL $label$5
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	$3 = (*(($1 + [36])) - *($1 + [32]))
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = int_32($3 >> [5])
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [16])) = ($3 + ($4 << [5]))
	*($2 + [8]) = $3
	*($2 + [12]) = $3
	$5 = *(($1 + [32]))
	$4 = (*(($1 + [36])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($3, $5, $4)
	*($2 + [12]) = ($3 + $4)
	
.LABEL $label$6
	*($2 + [24]) = *(($1 + [48]))
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($0) + $1))
	
.LABEL $label$7
	CALL void $0((int_32 ($2 + [48])), (int_32 ($2 + [32])), (int_32 ($2 + [8])), (int_32 $1))
	$1 = *($2 + [8])
	if ( ($1 == 0) ){ goto $label$8 }
	*($2 + [12]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$1 = *($2 + [36])
	if ( ($1 == 0) ){ goto $label$9 }
	*(($2 + [40])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2 + [48])
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [52]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$3
	CALL $142(($2 + [48]))
	
.LABEL $label$2
	CALL $142((($2 + [32]) | [4]))
	
.LABEL $label$1
	CALL $142(($2 + [8]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9322])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [5])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $104($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [5]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[31]), [9317])
	CALL memcpy($7, *($2), [32])
	$3 = (*($2) + [32])
	*($2) = $3
	$7 = ($7 + [32])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = *($1)
	$3 = *($0)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9317])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$4 = *($1 + [4])
	$5 = *($0)
	$1 = *($5 + [4])
	$0 = [0]
	$6 = (int_64)0
	$7 = ($5 + [8])
	
.LOOP $label$1:
	CALL eosio_assert(($1 <= *($7)), [9322])
	$2 = ($5 + [4])
	$1 = *($2)
	$3 = *($1)
	$1 = ($1 + [1])
	*($2) = $1
	$0 = ($0 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $0)))
	$0 = ($0 + [7])
	if ( ($3 & [128]) ){ goto $label$1 }
	$0 = (CASTING uint_32)(uint_64 $6)
	$3 = *($4)
	$1 = *($4 + [4])
	$2 = ((int_32)($1 - $3) / (int_32)[48])
	if ( ((uint_32)$2 >= (uint_32)$0) ){ goto $label$4 }
	CALL $96($4, ($0 - $2))
	$1 = *(($4 + [4]))
	$3 = *($4)
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$0) ){ goto $label$5 }
	$1 = ($3 + ((int_32)$0 * (int_32)[48]))
	*(($4 + [4])) = $1
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $97($5, $3)
	$3 = ($3 + [48])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$2
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9322])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $1($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9317])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $85 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [368])
	$global$0 = $3
	*(($4 = $3) + [360]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $154($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = ($4 + [344]))) = (int_64)0
	*(($6 = ($4 + [320]))) = (int_64)0
	*(($4 + [328])) = [0]
	*(($7 = ($4 + [352]))) = (int_64)0
	*($3) = [0]
	*($4 + [304]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $5)
	CALL $86(($4 + [288]), ($4 + [304]))
	*($4 + [24]) = ($4 + [288])
	*($4 + [52]) = $6
	*($4 + [48]) = ($4 + [316])
	CALL $87(($4 + [24]), ($4 + [48]))
	$3 = CALL $88(($4 + [288]), ($4 + [336]))
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9317])
	CALL memcpy($7, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($4 + [296])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [288])
	*($4 + [8]) = $8
	*($4 + [32]) = $8
	$3 = CALL $4(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [360])
	CALL $89(($4 + [24]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $157($2)
	
.LABEL $label$4
	CALL $7($3)
	$2 = *($4 + [336])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [340])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *(($4 + [320]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [324])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$2 = *($4 + [304])
	if ( ($2 == 0) ){ goto $label$7 }
	*($4 + [308]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$global$0 = ($4 + [368])
	return [1]
}

int_32 .FUNC $84 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $154($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [9317])
	CALL memcpy(($4 + [272]), $2, [4])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [4])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $4(($4 + [32]), $0, $1, $4)
	*($4 + [280]) = *($4 + [272])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [280])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $157($2)
	
.LABEL $label$5
	CALL $7($8)
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $83 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [352])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $154($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = ($4 + [320]))) = (int_64)0
	*(($6 = ($4 + [328]))) = (int_64)0
	*($3) = [0]
	*($4 + [304]) = [0]
	*($4 + [296]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [284]) = $2
	*($4 + [280]) = $2
	*($4 + [288]) = ($2 + $5)
	CALL $86(($4 + [280]), ($4 + [296]))
	$3 = CALL $88(($4 + [280]), ($4 + [312]))
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9317])
	CALL memcpy($6, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($4 + [288]) - *($4 + [284])) > (uint_32)[7]), [9317])
	CALL memcpy(($4 + [336]), *($4 + [284]), [8])
	*($4 + [284]) = (*($4 + [284]) + [8])
	$3 = *($4 + [288])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$7 = *($4 + [280])
	*($4) = $7
	*($4 + [24]) = $7
	$3 = CALL $4(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [344])
	CALL $90(($4 + [16]), ($4 + [296]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $157($2)
	
.LABEL $label$4
	CALL $7($3)
	$2 = *($4 + [312])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [316])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *($4 + [296])
	if ( ($2 == 0) ){ goto $label$6 }
	*($4 + [300]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [352])
	return [1]
}

int_32 .FUNC $82 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $154($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $4(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $157($2)
	
.LABEL $label$6
	CALL $7($8)
	$global$0 = ($4 + [272])
	return [1]
}

int_32 .FUNC $81 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $154($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9317])
	CALL memcpy(($4 + [272]), $2, [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $4(($4 + [32]), $0, $1, $4)
	*($4 + [280]) = *($4 + [272])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [280])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $157($2)
	
.LABEL $label$6
	CALL $7($8)
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $80 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [352])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $154($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = ($4 + [320]))) = (int_64)0
	*(($6 = ($4 + [328]))) = (int_64)0
	*($3) = [0]
	*($4 + [304]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [296]) = ($2 + $5)
	*($4 + [288]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9317])
	CALL memcpy(($4 + [304]), $2, [8])
	*($4 + [292]) = ($2 + [8])
	$3 = CALL $88(($4 + [288]), (($4 + [304]) + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9317])
	CALL memcpy($6, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($4 + [296]) - *($4 + [292])) > (uint_32)[7]), [9317])
	CALL memcpy(($4 + [336]), *($4 + [292]), [8])
	*($4 + [292]) = (*($4 + [292]) + [8])
	$3 = *($4 + [296])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$7 = *($4 + [288])
	*($4 + [8]) = $7
	*($4 + [32]) = $7
	$3 = CALL $4(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [344])
	CALL $92(($4 + [24]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $157($2)
	
.LABEL $label$4
	CALL $7($3)
	$2 = *($4 + [312])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [316])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [352])
	return [1]
}

int_32 .FUNC $149 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $145([10], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [9] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $147($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $147($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $147($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $147($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18528]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $147($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $147($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $147($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $144 (int_32 $0)
{
}

int_32 .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $135(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $149(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8542], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $135(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $135(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $150(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $143 ()
{
	return [10116]
}

void .FUNC $142 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9909])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9954])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10004])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9186])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9186])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [24])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9186])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $120(CALL $119($0, ($1 + [28])), ($1 + [40]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = [8]
	$6 = *($0)
	$4 = *(($4 + [4]))
	$7 = ($1 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	CALL $27($7, *($4), *($4 + [4]))
	
.LABEL $label$1
	*(($8 = ($1 + [24]))) = *($4 + [16])
	$7 = *($1 + [8])
	$4 = *(($1 + [12]))
	$9 = ($4 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [5]))
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	$5 = (($9 & [-32]) + $5)
	
.LABEL $label$3
	$7 = ($5 + [8])
	if ( ($7 <= [513]) ){ goto $label$5 }
	$4 = CALL $154($7)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	CALL eosio_assert(((int_32)($5 + [8]) > (int_32)[7]), [9186])
	CALL memcpy($4, $1, [8])
	*($3 + [4]) = ($4 + [8])
	$5 = CALL $118($3, ($1 + [8]))
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [9186])
	CALL memcpy(*($5 + [4]), $8, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	$10 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($6 + [8]), (int_64)4350895922339643392, *(*($0 + [8])), $10, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$10 >= (uint_64)*($6 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $157($4)
	if ( (uint_64)($10 <= *($6 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $142($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$2 }
	*(($1 + [32])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [36]))) = [0]
	*($1 + [28 align=4]) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [36])
	
.LABEL $label$1
	$7 = ($5 + [28])
	*(($1 + [28])) = *($7)
	$8 = ($5 + [36])
	*($6) = *($8)
	*($8) = [0]
	*($7) = (int_64)0
	$6 = *($1 + [40])
	if ( ($6 == 0) ){ goto $label$4 }
	*(($1 + [44])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [48]))) = [0]
	*($1 + [40 align=4]) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$6 = ($1 + [48])
	
.LABEL $label$3
	$7 = ($5 + [40])
	*(($1 + [40])) = *($7)
	$5 = ($5 + [48])
	*($6) = *($5)
	*($5) = [0]
	*($7) = (int_64)0
	$7 = *($1 + [28])
	$6 = *(($1 + [32]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$5 = [25]
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$6 }
	$5 = (($8 & [-8]) + $5)
	
.LABEL $label$6
	$7 = *($1 + [40])
	$6 = *(($1 + [44]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [2]))
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	$5 = (($8 & [-4]) + $5)
	
.LABEL $label$8
	if ( ($5 <= [513]) ){ goto $label$10 }
	$2 = CALL $154($5)
	goto $label$9 
	
.LABEL $label$10
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$9
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $73($3, $1)
	$9 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)-4426590578272108544, *(*($0 + [8])), $9, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$13 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $157($2)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$11 }
	
.LABEL $label$12
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$global$0 = ($3 + [16])
}

void .FUNC $77 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [40])
	$3 = CALL db_lowerbound_i64(*($0 + [32]), *($2), (int_64)4849507793113186304, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = ($0 + [32])
	
.LOOP $label$2:
	CALL $14($4, $3)
	$3 = [0]
	$5 = CALL db_lowerbound_i64(*($4), *($2), (int_64)4849507793113186304, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $14($4, $5)
	
.LABEL $label$3
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [9845])
	CALL eosio_assert($5, [9879])
	$5 = CALL db_next_i64(*($3 + [360]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $14($4, $5)
	
.LABEL $label$4
	CALL $15($4, $3)
	$3 = CALL db_lowerbound_i64(*($4), *($2), (int_64)4849507793113186304, (int_64)0)
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [80])
	$3 = CALL db_lowerbound_i64(*($0 + [72]), *($2), (int_64)-5915306442138583040, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$4 = ($0 + [72])
	
.LOOP $label$6:
	CALL $16($4, $3)
	$3 = [0]
	$5 = CALL db_lowerbound_i64(*($4), *($2), (int_64)-5915306442138583040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $16($4, $5)
	
.LABEL $label$7
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [9845])
	CALL eosio_assert($5, [9879])
	$5 = CALL db_next_i64(*($3 + [68]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL $16($4, $5)
	
.LABEL $label$8
	CALL $17($4, $3)
	$3 = CALL db_lowerbound_i64(*($4), *($2), (int_64)-5915306442138583040, (int_64)0)
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = ($0 + [120])
	$3 = CALL db_lowerbound_i64(*($0 + [112]), *($2), (int_64)-4426590578272108544, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$4 = ($0 + [112])
	
.LOOP $label$10:
	CALL $18($4, $3)
	$3 = [0]
	$5 = CALL db_lowerbound_i64(*($4), *($2), (int_64)-4426590578272108544, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$3 = CALL $18($4, $5)
	
.LABEL $label$11
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [9845])
	CALL eosio_assert($5, [9879])
	$5 = CALL db_next_i64(*($3 + [56]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	CALL $18($4, $5)
	
.LABEL $label$12
	CALL $19($4, $3)
	$3 = CALL db_lowerbound_i64(*($4), *($2), (int_64)-4426590578272108544, (int_64)0)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	
.LABEL $label$9
	$global$0 = ($1 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [5])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$3 }
	$6 = [134217727]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$6 = int_32($7 >> [4])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [5]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $142($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [5])))) = *($1)
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [5]))
	$4 = ($4 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [56]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9246])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4426590578272108544)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9192])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9192])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $18(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(CALL $37(*($0), *($3)), [8331])
	CALL require_auth(*($3))
	*($4) = (int_64)0
	*($4 + [8]) = [0]
	$3 = *($1 + [4])
	$1 = *($1)
	*($4 + [20]) = $1
	*($4 + [16]) = $1
	*($4 + [24]) = $3
	CALL $38(($4 + [16]), $4)
	*($4 + [16]) = (CASTING uint_64)(uint_32 ($0 + [112]))
	$5 = *($4)
	$1 = *($5 + [32])
	$3 = *(CALL $39(($4 + [16])) + [4])
	if ( ((uint_64)((int_64)*($3 + [8]) + (int_64)1) >= (uint_64)(CASTING uint_64)(uint_32 (((($1 << [24]) | (($1 << [8]) & [16711680])) | ((uint_32($1 >> [8]) & [65280]) | uint_32($1 >> [24]))) + [1]))) ){ goto $label$6 }
	if ( *($3 + [24]) ){ goto $label$7 }
	CALL $40($0, *($3))
	$5 = *($4)
	
.LABEL $label$7
	CALL $41($0, $5, $2)
	$2 = *($4 + [4])
	$1 = *($4)
	$3 = ($1 + [240])
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$8:
	$6 = ($1 + [240])
	CALL $42($1, $6)
	CALL memcpy(($1 + [164]), ($1 + [404]), [66])
	$3 = ($1 + [480])
	$1 = $6
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$3 = *($4 + [4])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$6 = *($4 + [4])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$6 = $1
	
.LABEL $label$4
	
.LOOP $label$9:
	$5 = $3
	$7 = ($5 + [-88])
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$10 }
	$9 = ($5 + [-84])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($1 + [-16])
	$2 = *(($1 + [-12]))
	if ( ($2 == 0) ){ goto $label$14 }
	*(($1 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$14
	$1 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$13 }
	$1 = *($7)
	goto $label$11 
	
.LABEL $label$12
	$1 = $8
	
.LABEL $label$11
	*($9) = $8
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$3 = ($5 + [-240])
	if ( (*(($5 + [-92])) == 0) ){ goto $label$15 }
	$1 = *(($5 + [-104]))
	if ( ($1 == 0) ){ goto $label$15 }
	*(($5 + [-100])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$3
	*($4 + [4]) = $6
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	
.LABEL $label$2
	
.LOOP $label$16:
	CALL $43($0, $5)
	$5 = ($5 + [240])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$16 }
	$5 = *($4)
	
.LABEL $label$1
	if ( ($5 == 0) ){ goto $label$17 }
	$1 = *($4 + [4])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$20:
	$6 = $1
	$0 = ($6 + [-88])
	$8 = *($0)
	if ( ($8 == 0) ){ goto $label$21 }
	$7 = ($6 + [-84])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($1 + [-16])
	$2 = *(($1 + [-12]))
	if ( ($2 == 0) ){ goto $label$25 }
	*(($1 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$25
	$1 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$24 }
	$1 = *($0)
	goto $label$22 
	
.LABEL $label$23
	$1 = $8
	
.LABEL $label$22
	*($7) = $8
	CALL _ZdlPv($1)
	
.LABEL $label$21
	$1 = ($6 + [-240])
	if ( (*(($6 + [-92])) == 0) ){ goto $label$26 }
	$3 = *(($6 + [-104]))
	if ( ($3 == 0) ){ goto $label$26 }
	*(($6 + [-100])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$26
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$20 }
	$1 = *($4)
	goto $label$18 
	
.LABEL $label$19
	$1 = $5
	
.LABEL $label$18
	*($4 + [4]) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$17
	$global$0 = ($4 + [32])
}

int_32 .FUNC $37 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [16]) = $0
	*($2 + [8]) = $0
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = CALL db_find_i64($0, $0, (int_64)-4998310178320285696, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $33(($2 + [8]), $4) + [8]) == (int_32)($2 + [8])), [9552])
	$3 = [1]
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	CALL _ZdlPv($7)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
	return $3
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-4417247484950609921) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)-4857435786938259969) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-5858941046130137600) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4998310590637146112) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [1]
	*($3 + [40]) = *($3 + [80])
	CALL $79($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 > (int_64)4849507885702971391) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4417247484950609920) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4352878888435864576) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3 + [48]) = *($3 + [72])
	CALL $80($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4857435786938259968) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4855657090824507392) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [3]
	*($3 + [24]) = *($3 + [96])
	CALL $81($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)4849507885702971392) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)6493407140374380544) ){ goto $label$1 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [56]) = *($3 + [64])
	CALL $82($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [16]) = *($3 + [104])
	CALL $83($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [124]) = [0]
	*($3 + [120]) = [6]
	*($3) = *($3 + [120])
	CALL $84($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [92]) = [0]
	*($3 + [88]) = [7]
	*($3 + [32]) = *($3 + [88])
	CALL $81($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [116]) = [0]
	*($3 + [112]) = [8]
	*($3 + [8]) = *($3 + [112])
	CALL $85($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $144([0])
	$global$0 = ($3 + [128])
}

int_32 .FUNC $79 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [352])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $154($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [304]) = [0]
	*($4 + [296]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [284]) = $2
	*($4 + [280]) = $2
	*($4 + [288]) = ($2 + $7)
	CALL $91(($4 + [280]), ($4 + [296]))
	CALL eosio_assert(((uint_32)(*($4 + [288]) - *($4 + [284])) > (uint_32)[7]), [9317])
	CALL memcpy(($4 + [312]), *($4 + [284]), [8])
	*($4 + [284]) = (*($4 + [284]) + [8])
	$3 = *($4 + [288])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [280])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	$9 = CALL $4(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$10 = CALL $132(($4 + [320]), ($4 + [296]))
	$0 = *($4 + [312])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $132(($4 + [336]), $10)
	CALL void $3((int_32 $5), (int_32 $0), (int_64 $6))
	if ( (*($4 + [336]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [320]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($10 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $157($2)
	
.LABEL $label$5
	CALL $7($9)
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [304])))
	
.LABEL $label$10
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $142($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [40])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1 + [28])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9294])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $154($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9317])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $157($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $142($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $113(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$2 }
	*(($1 + [32])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [36]))) = [0]
	*($1 + [28 align=4]) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [36])
	
.LABEL $label$1
	$7 = ($5 + [28])
	*(($1 + [28])) = *($7)
	$8 = ($5 + [36])
	*($6) = *($8)
	*($8) = [0]
	*($7) = (int_64)0
	$6 = *($1 + [40])
	if ( ($6 == 0) ){ goto $label$4 }
	*(($1 + [44])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [48]))) = [0]
	*($1 + [40 align=4]) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$6 = ($1 + [48])
	
.LABEL $label$3
	$7 = ($5 + [40])
	*(($1 + [40])) = *($7)
	$5 = ($5 + [48])
	*($6) = *($5)
	*($5) = [0]
	*($7) = (int_64)0
	$7 = *($1 + [28])
	$6 = *(($1 + [32]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$5 = [25]
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$6 }
	$5 = (($8 & [-8]) + $5)
	
.LABEL $label$6
	$7 = *($1 + [40])
	$6 = *(($1 + [44]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [2]))
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	$5 = (($8 & [-4]) + $5)
	
.LABEL $label$8
	if ( ($5 <= [513]) ){ goto $label$10 }
	$2 = CALL $154($5)
	goto $label$9 
	
.LABEL $label$10
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$9
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $73($3, $1)
	$9 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)-4426590578272108544, *(*($0 + [8])), $9, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$13 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $157($2)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$11 }
	
.LABEL $label$12
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$global$0 = ($3 + [16])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $157($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $152(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10112])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $152(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}