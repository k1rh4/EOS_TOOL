(data (i32.const 4) "\90~\00\00")
(data (i32.const 16) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 272) "carry == 0\00")
(data (i32.const 288) "./bitcoinutils.hpp\00")
(data (i32.const 320) "DecodeBase58\00")
(data (i32.const 336) "eosio.token\00")
(data (i32.const 352) "eosbettokens\00")
(data (i32.const 368) "transfer\00")
(data (i32.const 384) "incomingdivs\00")
(data (i32.const 400) "ezeosaccount\00")
(data (i32.const 416) "there are still pending transfers\00")
(data (i32.const 464) "cannot create objects in table of another contract\00")
(data (i32.const 528) "write\00")
(data (i32.const 544) "error reading iterator\00")
(data (i32.const 576) "read\00")
(data (i32.const 592) "you have no divs to claim\00")
(data (i32.const 624) "active\00")
(data (i32.const 640) "acceptdivs\00")
(data (i32.const 656) "Not a valid Symbol\00")
(data (i32.const 688) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 752) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 816) "invalid symbol name\00")
(data (i32.const 848) "attempt to subtract asset with different symbol\00")
(data (i32.const 896) "subtraction underflow\00")
(data (i32.const 928) "subtraction overflow\00")
(data (i32.const 960) "Dividend payment from EarnBet, get dividends for life! https://EarnBet.io\00")
(data (i32.const 1040) "unable to find key\00")
(data (i32.const 1072) "get\00")
(data (i32.const 1088) "must claim through `claimdivsez` function\00")
(data (i32.const 1136) "betdividends\00")
(data (i32.const 1152) "must be authed by owner or eosbet\00")
(data (i32.const 1200) "eosbetbinanc\00")
(data (i32.const 1216) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1280) "cannot pass end iterator to modify\00")
(data (i32.const 1328) "eosbetcasino\00")
(data (i32.const 1344) "eosbetbank11\00")
(data (i32.const 1360) "Dividend payment from uncirculating tokens -- send back to bankroll\00")
(data (i32.const 1440) "eosbetdice11\00")
(data (i32.const 1456) "eosbetcrash1\00")
(data (i32.const 1472) "eosbaccarat1\00")
(data (i32.const 1488) "eosbethilo11\00")
(data (i32.const 1504) "eosbetblkjck\00")
(data (i32.const 1520) "eosbetplinko\00")
(data (i32.const 1552) "eosbetlocked\00")
(data (i32.const 1568) "newdexpublic\00")
(data (i32.const 1584) "Dividend payment from EarnBet, used for buyback!\00")
(data (i32.const 1648) "eosbetcldstr\00")
(data (i32.const 1664) "Dividend payment for buyback!\00")
(data (i32.const 1696) "object passed to modify is not in multi_index\00")
(data (i32.const 1744) "cannot modify objects in table of another contract\00")
(data (i32.const 1808) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1872) "cannot transfer to self\00")
(data (i32.const 1904) "to account does not exist\00")
(data (i32.const 1936) "invalid quantity\00")
(data (i32.const 1968) "must transfer positive quantity\00")
(data (i32.const 2000) "symbol precision mismatch\00")
(data (i32.const 2032) "memo has more than 256 bytes\00")
(data (i32.const 2064) "bet doesn\'t exist, game acct cannot perform transfer\00")
(data (i32.const 2128) "addbettok\00")
(data (i32.const 2144) "nothing in temp table, cannot debit ezeosaccount\00")
(data (i32.const 2208) "cannot pass end iterator to erase\00")
(data (i32.const 2256) "cannot increment end iterator\00")
(data (i32.const 2288) "attempt to add asset with different symbol\00")
(data (i32.const 2336) "addition underflow\00")
(data (i32.const 2368) "addition overflow\00")
(data (i32.const 2400) "no balance object found\00")
(data (i32.const 2432) "overdrawn balance\00")
(data (i32.const 2464) "object passed to erase is not in multi_index\00")
(data (i32.const 2512) "cannot erase objects in table of another contract\00")
(data (i32.const 2576) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2640) "mismatched asset vector symbol\00")
(data (i32.const 2672) "modifybettok\00")
(data (i32.const 2688) "multiplication overflow or underflow\00")
(data (i32.const 2736) "multiplication underflow\00")
(data (i32.const 2768) "multiplication overflow\00")
(data (i32.const 2800) "Length of key str must be 53\00")
(data (i32.const 2832) "EOS\00")
(data (i32.const 2848) "This must be an EOS key.\00")
(data (i32.const 2880) "Decode key failed\00")
(data (i32.const 2912) "Invalid public key\00")
(data (i32.const 2944) "Checksum failed\00")
(data (i32.const 2960) "token with symbol doesn\'t exist\00")
(data (i32.const 2992) "must update BET supply\00")
(data (i32.const 3024) "issue complete\00")
(data (i32.const 3040) "create complete\00")
(data (i32.const 3056) "Invalid asset\00")
(data (i32.const 3072) "Must transfer to or from account\00")
(data (i32.const 3120) "eosbetjckpot\00")
(data (i32.const 3136) "Only banker can fund dividend payouts\00")
(data (i32.const 11584) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11680) "stoull\00")
(data (i32.const 11696) ": no conversion\00")
(data (i32.const 11712) ": out of range\00")
(data (i32.const 11736) "\a0<\00\00")
(data (i32.const 11744) "Assertion failed: %s (%s: %s: %d)\n\00")
(data (i32.const 11780) "\18.\00\00")
(data (i32.const 11800) "\05\00\00\00\00\00\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\0b\00\00\00\b8.\00\00\00\04\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 12992) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 13456) "0123456789ABCDEF")
(data (i32.const 13472) "-+   0X0x\00")
(data (i32.const 13488) "(null)\00")
(data (i32.const 13504) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 13536) "inf\00")
(data (i32.const 13552) "INF\00")
(data (i32.const 13568) "nan\00")
(data (i32.const 13584) "NAN\00")
(data (i32.const 13600) ".\00")
(data (i32.const 13616) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 13712) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 15520) "\05\00\00\00\00\00\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\0b\00\00\008=\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 15680) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 15696) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 15712) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 15728) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 16000) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunsdfti" (func $fimport$4 (param i32 f64)))
(import "env" "__fixunstfsi" (func $fimport$5 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$7 (param i32 i32)))
(import "env" "__floatuntidf" (func $fimport$8 (param i64 i64) (result f64)))
(import "env" "__multf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__multi3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__udivti3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "action_data_size" (func $fimport$16 (result i32)))
(import "env" "current_receiver" (func $fimport$17 (result i64)))
(import "env" "current_time" (func $fimport$18 (result i64)))
(import "env" "db_find_i64" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$23 (param i32)))
(import "env" "db_store_i64" (func $fimport$24 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$25 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$26 (param i32 i32)))
(import "env" "has_auth" (func $fimport$27 (param i64) (result i32)))
(import "env" "is_account" (func $fimport$28 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$30 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$31 (param i32 i32)))
(import "env" "read_action_data" (func $fimport$32 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$33 (param i64)))
(import "env" "require_auth2" (func $fimport$34 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$35 (param i64)))
(import "env" "ripemd160" (func $fimport$36 (param i32 i32 i32)))
(import "env" "send_inline" (func $fimport$37 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE" (func $5))
(export "_Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE" (func $8))
(export "apply" (func $9))
(export "malloc" (func $100))
(export "free" (func $103))
(export "_ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $109))
(export "isspace" (func $118))
(export "__errno_location" (func $119))
(export "__assert_fail" (func $120))
(export "fprintf" (func $121))
(export "fflush" (func $122))
(export "__ofl_lock" (func $123))
(export "__lockfile" (func $124))
(export "__unlockfile" (func $125))
(export "__ofl_unlock" (func $126))
(export "__unlock" (func $127))
(export "__lock" (func $128))
(export "__stdio_close" (func $129))
(export "__stdout_write" (func $130))
(export "__stdio_seek" (func $131))
(export "__stdio_write" (func $132))
(export "vfprintf" (func $133))
(export "__fwritex" (func $135))
(export "strerror" (func $137))
(export "strnlen" (func $138))
(export "wctomb" (func $139))
(export "__signbitl" (func $140))
(export "__fpclassifyl" (func $141))
(export "frexpl" (func $142))
(export "wcrtomb" (func $143))
(export "memchr" (func $144))
(export "__lctrans" (func $145))
(export "__lctrans_impl" (func $146))
(export "__mo_lookup" (func $147))
(export "strcmp" (func $148))
(export "__towrite" (func $149))
(export "pow" (func $150))
(export "sqrt" (func $151))
(export "fabs" (func $152))
(export "scalbn" (func $153))
(export "strtoull" (func $154))
(export "__shlim" (func $155))
(export "__intscan" (func $156))
(export "__shgetc" (func $157))
(export "__uflow" (func $158))
(export "__toread" (func $159))
(export "memcmp" (func $160))
(export "strlen" (func $161))
(table $0 13 13 anyfunc)
(elem (i32.const 0) $162 $11 $17 $23 $22 $15 $18 $13 $20 $129 $130 $131 $132)



void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [752])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $99(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $60(*($1), *($0 + [12]))
}

void .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $98($0, $2, $1)
	*([0] + [4]) = $3
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$17()), [464])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $104([32])
	CALL $97($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($7 + [16]) = $2)
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $38(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $105($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [1744])
	$4 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*(($3 + [24])) == (int_64)$4), [2288])
	$5 = ((int_64)*($1) + (int_64)*($3 + [16]))
	*($1) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [2336])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [2368])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [1808])
	CALL eosio_assert([1], [528])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $6, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [16]) = $1
	$4 = *($2)
	$1 = *(*($2 + [4]))
	*($0) = *($1 + [16])
	*(($5 = ($0 + [8]))) = *(($1 + [24]))
	CALL eosio_assert([1], [528])
	CALL memcpy($6, $0, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 | [8]), $5, [8])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)-6224938531340550144, *(*($2 + [8])), $3), $6, [16])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [1744])
	$3 = *($3)
	*($1) = *($3)
	$4 = *($1 + [8])
	*($1 + [8]) = *(($3 + [8]))
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [1808])
	*($5 + [48]) = ($5 + [40])
	*($5 + [44]) = $5
	*($5 + [40]) = $5
	*($5 + [56]) = ($5 + [40])
	*($5 + [68]) = ($1 + [16])
	*($5 + [64]) = $1
	*($5 + [72]) = ($1 + [32])
	CALL $91(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($2 = (($3 + [32]) + [8]))) = *(($1 + [8]))
	*($3 + [32]) = *($1)
	CALL $116(($3 + [16]), ($1 + [16]))
	*((($3 + [48]) + [8])) = *($2)
	*($3 + [48]) = *($3 + [32])
	$1 = *($0 + [4])
	$2 = *($1 + [4])
	$0 = (*(*($0)) + int_32($2 >> [1]))
	$1 = *($1)
	if ( (($2 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($2 = (($3 + [80]) + [8]))) = *((($3 + [48]) + [8]))
	*($3 + [80]) = *($3 + [48])
	CALL $116(($3 + [64]), ($3 + [16]))
	*(($3 + [8])) = *($2)
	*($3) = *($3 + [80])
	CALL void $0((int_32 $3), (int_32 ($3 + [64])), (int_32 $1))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $105(*($3 + [72]))
	
.LABEL $label$2
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $105(*($3 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($3 + [96])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [576])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [576])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC __ofl_lock ()
{
	CALL __lock([11784])
	return [11792]
}

void .FUNC $115 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC fflush (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	if ( (*([0] + [11780]) == 0) ){ goto $label$8 }
	$5 = CALL fflush(*([0] + [11780]))
	
.LABEL $label$8
	$0 = *(CALL __ofl_lock())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$11
	$2 = *($0 + [28])
	$3 = *($0 + [20])
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$12 }
	$4 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL __lockfile($0)
	$2 = *(($0 + [28]))
	$3 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$3 = [-1]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL __unlockfile($0)
	
.LABEL $label$14
	$5 = ($3 | $5)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL __unlockfile($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL __ofl_unlock()
	return $5
	
.LABEL $label$3
	$3 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL __unlockfile($0)
	
.LABEL $label$1
	return $3
}

int_32 .FUNC __stdout_write (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL __stdio_write($0, $1, $2)
}

int_64 .FUNC __stdio_seek (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC __stdio_write (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $134([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $134($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $134($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [12992]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $136(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [13472]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [13504]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [13510] ? [13505] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [13474] ? [13472] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [13507]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $119()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [13472]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [13472]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [13456])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [13472])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [13488] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [13472]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [13568] ? [13584] : $30 ) ? ( [13536] ? [13552] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [13472]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [13473]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [13472] ? [13477] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13456])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13456])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [13456])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([13600], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([13600], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([13600], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $136(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $136(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $136(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $136(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $136(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $136(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $136(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $136(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $136(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC fprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vfprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

void .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [13616])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [13712]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [13712]
	return .LABEL $label$1
}

void .FUNC __assert_fail (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL fprintf(*([0] + [11736]), [11744], $4)
	CALL fflush([0])
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $104(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $105($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $105($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC __ofl_unlock ()
{
	CALL __unlock([11784])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$17()), [464])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $104([32])
	CALL $55($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($7 + [16]) = $2)
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $56(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $105($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $104([32])
	$6 = CALL $57($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $56(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $105($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $104([48])
	$6 = CALL $44($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [40])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [24])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [28])) = $7
	CALL $105($7)
	
.LABEL $label$10
	CALL $105($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $42 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [36]) == (int_32)$0), [688])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4229569739493650432, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $43($0, $5)
	CALL eosio_assert(((int_32)*($6 + [36]) == (int_32)$0), [688])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [528])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [528])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$8 = *($0)
	$2 = int_32(($6 - $8) >> [4])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$7 = ($7 - $8)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($7 >> [3])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $104(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*($6 + [8]) = (int_64)1398362884
	*($6) = (int_64)0
	CALL eosio_assert([1], [752])
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [816])
	$6 = (*($8) + [16])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $115($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [4]))
	$2 = ($7 + ($2 << [4]))
	$8 = $2
	
.LOOP $label$14:
	*($8 + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [752])
	$5 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [816])
	$8 = ($8 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$20
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $105($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1072])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $47($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [576])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [576])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $104(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [24])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [28])) = $6
	CALL $105($6)
	
.LABEL $label$11
	CALL $105($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $105($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*(($0 + [32])) = [0]
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [36]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46($4, ($0 + [24]))
	*($0 + [40]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC __lock (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $162 ()
{
	(unreachable)
}

int_32 .FUNC _Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE (int_32 $0, int_32 $1)
{
	return CALL _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE(( *($0 + [8]) ? ($0 + [1]) : (*($0) & [1]) ), $1)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [272])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [336]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$20 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [352]
	$10 = (int_64)0
	
.LOOP $label$21:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$22 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$3 = ($3 + [165])
	goto $label$23 
	
.LABEL $label$24
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$22
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$19 }
	
.LABEL $label$20
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [368]
	$10 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$30 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$3 = ($3 + [165])
	goto $label$28 
	
.LABEL $label$30
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$26
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$25 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$7 }
	$4 = CALL $10(($12 + [144]), $0)
	*($12 + [140]) = [0]
	*($12 + [136]) = [1]
	*($12) = *($12 + [136])
	CALL $12($4, $12)
	$5 = *(($4 + [112]))
	if ( ($5 == 0) ){ goto $label$16 }
	$6 = ($4 + [116])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$31:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$32 }
	CALL $105($3)
	
.LABEL $label$32
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$31 }
	$7 = *(($4 + [112]))
	goto $label$17 
	
.LABEL $label$19
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [384]
	$10 = (int_64)0
	
.LOOP $label$33:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$34 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$3 = ($3 + [165])
	goto $label$35 
	
.LABEL $label$36
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$34
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$33 }
	if ( ((int_64)$10 == (int_64)$2) ){ goto $label$7 }
	$4 = CALL $10(($12 + [144]), $1)
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)4921564841618964479) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-3075276113397858304) ){ goto $label$8 }
	*($12 + [116]) = [0]
	*($12 + [112]) = [2]
	*($12 + [24 align=4]) = *($12 + [112])
	CALL $14($4, ($12 + [24]))
	goto $label$8 
	
.LABEL $label$18
	$7 = $5
	
.LABEL $label$17
	*($6) = $5
	CALL $105($7)
	
.LABEL $label$16
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$37 }
	$6 = ($4 + [76])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$39 }
	
.LOOP $label$40:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$41 }
	CALL $105($3)
	
.LABEL $label$41
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$40 }
	$7 = *(($4 + [72]))
	goto $label$38 
	
.LABEL $label$39
	$7 = $5
	
.LABEL $label$38
	*($6) = $5
	CALL $105($7)
	
.LABEL $label$37
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [36])) = $7
	CALL $105($7)
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_64)$2 > (int_64)8417589693805999999) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)6326577157339725824) ){ goto $label$8 }
	*($12 + [76]) = [0]
	*($12 + [72]) = [3]
	*($12 + [64 align=4]) = *($12 + [72])
	CALL $21($4, ($12 + [64]))
	goto $label$8 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)4921564841618964480) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)4921564841619144192) ){ goto $label$8 }
	*($12 + [92]) = [0]
	*($12 + [88]) = [4]
	*($12 + [48 align=4]) = *($12 + [88])
	CALL $21($4, ($12 + [48]))
	goto $label$8 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)8417589693806000000) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$8 }
	*($12 + [124]) = [0]
	*($12 + [120]) = [5]
	*($12 + [16 align=4]) = *($12 + [120])
	CALL $16($4, ($12 + [16]))
	goto $label$8 
	
.LABEL $label$12
	*($12 + [108]) = [0]
	*($12 + [104]) = [6]
	*($12 + [32 align=4]) = *($12 + [104])
	CALL $19($4, ($12 + [32]))
	goto $label$8 
	
.LABEL $label$11
	*($12 + [132]) = [0]
	*($12 + [128]) = [7]
	*($12 + [8 align=4]) = *($12 + [128])
	CALL $14($4, ($12 + [8]))
	goto $label$8 
	
.LABEL $label$10
	*($12 + [100]) = [0]
	*($12 + [96]) = [8]
	*($12 + [40 align=4]) = *($12 + [96])
	CALL $21($4, ($12 + [40]))
	goto $label$8 
	
.LABEL $label$9
	*($12 + [84]) = [0]
	*($12 + [80]) = [1]
	*($12 + [56 align=4]) = *($12 + [80])
	CALL $12($4, ($12 + [56]))
	
.LABEL $label$8
	$5 = *(($4 + [112]))
	if ( ($5 == 0) ){ goto $label$42 }
	$6 = ($4 + [116])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$44 }
	
.LOOP $label$45:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$46 }
	CALL $105($3)
	
.LABEL $label$46
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$45 }
	$7 = *(($4 + [112]))
	goto $label$43 
	
.LABEL $label$44
	$7 = $5
	
.LABEL $label$43
	*($6) = $5
	CALL $105($7)
	
.LABEL $label$42
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$47 }
	$6 = ($4 + [76])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$49 }
	
.LOOP $label$50:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$51 }
	CALL $105($3)
	
.LABEL $label$51
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$50 }
	$7 = *(($4 + [72]))
	goto $label$48 
	
.LABEL $label$49
	$7 = $5
	
.LABEL $label$48
	*($6) = $5
	CALL $105($7)
	
.LABEL $label$47
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [36])) = $7
	CALL $105($7)
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [272])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $5) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $105($5)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($3 << [1])
	$4 = ( $1 ? $5 : ($5 <= $1) )
	
.LABEL $label$6
	$5 = CALL $104($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($5) = *($2)
	$5 = (*($0) + [1])
	*($0) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $5)
	$4 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($4 == 0) ){ goto $label$8 }
	CALL memset($5, *($2), $4)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$5 = ($0 + [4])
	$0 = *($5)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($5) + [1])
	*($5) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $115($0)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $104($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $105($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL isspace(int_32(($10 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$10 = [0]
	
.LOOP $label$5:
	$11 = ($0 + $10)
	$8 = ($10 + [1])
	$10 = $8
	if ( ((int_32)*(($11 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$0 = ($0 + $8)
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	$11 = ((uint_32)((int_32)CALL strlen($0) * (int_32)[733]) / (uint_32)[1000])
	$10 = ((int_32)$11 ^ (int_32)[-1])
	$2 = ($11 + [1])
	$3 = CALL $104($2)
	$5 = $3
	
.LOOP $label$6:
	*($5) = [0]
	$4 = $5
	$5 = ($4 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$6 }
	$11 = [0]
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$16 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$17 }
	$6 = [0]
	
.LOOP $label$18:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$15 }
	$10 = *($0)
	$9 = *(($10 + [16]))
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$13 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$20 }
	$11 = [0]
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$20
	$11 = [0]
	$10 = $5
	
.LOOP $label$21:
	$7 = (((int_32)*($10) * (int_32)[58]) + $9)
	*(($10 = ($10 + [-1]))) = $7
	$11 = ($11 + [1])
	$9 = ((int_32)$7 / (int_32)[256])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$19 }
	if ( (((uint_32)($7 + [255]) > (uint_32)[510]) | ((int_32)$11 < (int_32)$6)) ){ goto $label$21 }
	
.LABEL $label$19
	if ( $9 ){ goto $label$7 }
	$10 = *($0 + [1])
	$6 = $11
	$7 = ($0 + [1])
	$0 = $7
	if ( $10 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$17
	
.LOOP $label$22:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$16 }
	$10 = *($0)
	if ( ((int_32)*(($10 + [16])) == (int_32)[255]) ){ goto $label$10 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$7 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$22 }
	$11 = [0]
	
.LABEL $label$16
	$7 = $0
	goto $label$14 
	
.LABEL $label$15
	$7 = $0
	$11 = $6
	
.LABEL $label$14
	$10 = ($7 + [-1])
	
.LOOP $label$23:
	$10 = ($10 + [1])
	if ( CALL isspace(*($10)) ){ goto $label$23 }
	$7 = [0]
	if ( (*($10) == 0) ){ goto $label$24 }
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$24
	$11 = ($3 + ($2 - $11))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$12 }
	$9 = ([0] - $4)
	$7 = *($12 + [8])
	
.LOOP $label$26:
	$10 = $11
	if ( *($10) ){ goto $label$25 }
	$7 = $10
	$11 = ($10 + [1])
	if ( ((int_32)($11 + $9) != (int_32)[1]) ){ goto $label$26 }
	$10 = $11
	$7 = $4
	
.LABEL $label$25
	*($12 + [8]) = $7
	goto $label$11 
	
.LABEL $label$13
	$7 = [0]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$10 = $5
	
.LABEL $label$11
	$11 = (($5 - $11) + $8)
	$7 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $7) >= (uint_32)$11) ){ goto $label$27 }
	$9 = *($1 + [4])
	$7 = *($1)
	$9 = (*($1 + [4]) - $7)
	$0 = CALL $104($11)
	$2 = ($0 + ($9 - $7))
	$6 = ($2 - $9)
	$11 = ($0 + $11)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($6, $7, $9)
	$7 = *($1)
	
.LABEL $label$28
	*($1) = $6
	*(($1 + [4])) = $2
	*(($1 + [8])) = $11
	if ( ($7 == 0) ){ goto $label$27 }
	CALL $105($7)
	
.LABEL $label$27
	*($12 + [7]) = [0]
	CALL $6($1, $8, ($12 + [7]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$29 }
	$5 = ($4 + [1])
	$6 = ($1 + [8])
	$7 = ($1 + [4])
	
.LOOP $label$30:
	$11 = ($10 + [1])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)*($6)) ){ goto $label$32 }
	*($9) = *($10)
	*($7) = (*($7) + [1])
	goto $label$31 
	
.LABEL $label$32
	CALL $7($1, $10)
	
.LABEL $label$31
	$10 = $11
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$30 }
	
.LABEL $label$29
	$7 = [1]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $105($3)
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [16])
	return $7
	
.LABEL $label$7
	CALL __assert_fail([272], [288], [57], [320])
	return (unreachable)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [80])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	CALL $93(($6 + [16]), $4, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*(($1 = (($6 + [32]) + [8]))) = *((($6 + [16]) + [8]))
	*($6 + [32]) = *($6 + [16])
	*((($6 + [48]) + [8])) = *($1)
	*($6 + [48]) = *($6 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$3 = *((($6 + [48]) + [8]))
	*((($6 + [64]) + [8])) = $3
	*(($6 + [8])) = $3
	$3 = *($6 + [48])
	*($6 + [64]) = $3
	*($6) = $3
	CALL void $1((int_32 $6), (int_32 $5))
	*([0] + [4]) = ($6 + [80])
	return [1]
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1328]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	CALL eosio_assert([0], [3024])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($5 = $4) + [44]) = $0
	*($5 + [32]) = *($1)
	*($5 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*($5 + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [816])
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	*($5 + [48]) = $0
	$1 = ($0 + $2)
	*($5 + [56]) = $1
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [576])
	CALL memcpy($5, $0, [8])
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [576])
	CALL memcpy(($5 + [8]), $4, [8])
	*($5 + [52]) = ($0 + [16])
	CALL $60(($5 + [48]), ($5 + [16]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [52]) = ($5 + [32])
	*($5 + [48]) = ($5 + [44])
	CALL $92(($5 + [48]), $5)
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $105(*(($5 + [24])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [64])
	return [1]
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1328]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = [0]
	$4 = *($0)
	*($8 + [8]) = $4
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($8 + [16]) = $5)
	*(($8 + [36])) = [0]
	*(($8 + [40])) = [0]
	$3 = [0]
	$2 = CALL db_find_i64($4, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $86(($8 + [8]), $2)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)($8 + [8])), [688])
	
.LABEL $label$5
	$2 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($2, [2960])
	CALL eosio_assert(((int_64)*($0 + [24]) == (int_64)*(($1 + [8]))), [2992])
	$5 = *($0)
	*($8) = $1
	CALL eosio_assert($2, [1280])
	CALL $90(($8 + [8]), $3, $5, $8)
	$0 = *($8 + [32])
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = ($8 + [36])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $105($2)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($8 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $0
	
.LABEL $label$7
	*($1) = $0
	CALL $105($3)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $10 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [144])
	*([0] + [4]) = $20
	*($0) = $1
	$1 = (int_64)0
	$19 = (int_64)59
	$15 = [352]
	$16 = (int_64)0
	
.LOOP $label$1:
	$17 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($15)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$2
	$15 = ($15 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$1 }
	*(($0 + [8])) = $16
	$1 = (int_64)0
	$17 = (int_64)59
	$15 = [336]
	$18 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$10 }
	$2 = *($15)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$2 = ($2 + [165])
	goto $label$8 
	
.LABEL $label$10
	$19 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$6
	$15 = ($15 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$5 }
	*($0 + [24]) = (int_64)1413825028
	*(($0 + [16])) = $18
	*(($2 = ($20 + [32]))) = (int_64)1129595404
	*(($3 = ($20 + [40]))) = $16
	*($20 + [8]) = (int_64)1397703944
	*($20) = (int_64)1397703940
	*($20 + [16]) = $18
	*($20 + [24]) = (int_64)1129595400
	*($20 + [48]) = (int_64)1129597960
	*(($4 = ($20 + [56]))) = (int_64)1129597964
	*(($5 = ($20 + [64]))) = $16
	*($20 + [72]) = (int_64)1213482248
	*(($6 = ($20 + [80]))) = (int_64)1213482252
	*(($7 = ($20 + [88]))) = $16
	*($20 + [96]) = (int_64)1347573766
	*(($8 = ($20 + [104]))) = (int_64)1347573770
	*(($9 = ($20 + [112]))) = $16
	*($20 + [120]) = (int_64)1212367368
	*(($10 = ($20 + [128]))) = (int_64)1212367372
	*(($11 = ($20 + [136]))) = $16
	*(($12 = ($0 + [32]))) = [0]
	*(($13 = ($0 + [36]))) = [0]
	*(($14 = ($0 + [40]))) = [0]
	$15 = CALL $104([144])
	*($12) = $15
	$12 = ($15 + [144])
	*($14) = $12
	*(($15 + [20])) = *(($20 + [20]))
	*(($15 + [16])) = *($20 + [16])
	*(($15 + [12])) = *(($20 + [12]))
	*(($15 + [8])) = *($20 + [8])
	*(($15 + [4])) = *($20 + [4])
	*($15) = *($20)
	*(($15 + [40])) = *($3)
	*(($15 + [32])) = *($2)
	*($15 + [24]) = *($20 + [24])
	*(($15 + [64])) = *($5)
	*(($15 + [56])) = *($4)
	*($15 + [48]) = *($20 + [48])
	*(($15 + [88])) = *($7)
	*(($15 + [80])) = *($6)
	*($15 + [72]) = *($20 + [72])
	*(($15 + [112])) = *($9)
	*(($15 + [104])) = *($8)
	*($15 + [96]) = *($20 + [96])
	*(($15 + [136])) = *($11)
	*(($15 + [128])) = *($10)
	*($15 + [120]) = *($20 + [120])
	*($13) = $12
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = (int_64)0
	*(($0 + [80])) = [0]
	$1 = *($0)
	*($0 + [48]) = $1
	*(($0 + [56])) = $1
	*($0 + [88]) = $1
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = [0]
	*(($0 + [116])) = [0]
	*(($0 + [120])) = [0]
	*([0] + [4]) = ($20 + [144])
	return $0
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	CALL $94(($13 + [16]))
	$4 = [0]
	if ( ((uint_64)((int_64)*($13 + [32]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)*((($13 + [16]) + [24])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [3056])
	$4 = *(($0 + [36]))
	$7 = *($0 + [32])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$9 = *((($13 + [16]) + [24]))
	
.LOOP $label$7:
	if ( ((int_64)*($7) == (int_64)$9) ){ goto $label$6 }
	$7 = ($7 + [24])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$7 }
	$7 = $4
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$7 != (int_32)$4), [656])
	$9 = *($0)
	CALL eosio_assert((((int_64)*($13 + [16]) == (int_64)$9) | ((int_64)*($13 + [24]) == (int_64)$9)), [3072])
	$9 = *($0)
	$3 = *($13 + [16])
	if ( ((int_64)$3 == (int_64)$9) ){ goto $label$8 }
	if ( ((int_64)*($13 + [24]) != (int_64)$9) ){ goto $label$8 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1344]
	$10 = (int_64)0
	
.LOOP $label$9:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$10 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$4 = ($4 + [165])
	goto $label$11 
	
.LABEL $label$12
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$9 }
	$7 = [1]
	if ( ((int_64)$3 == (int_64)$10) ){ goto $label$13 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [3120]
	$10 = (int_64)0
	
.LOOP $label$14:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$15 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [165])
	goto $label$16 
	
.LABEL $label$17
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$15
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$14 }
	$7 = ((int_64)$3 == (int_64)$10)
	
.LABEL $label$13
	CALL eosio_assert($7, [3136])
	$9 = (uint_64)*(($13 + [40])) >> (uint_64)(int_64)8)
	$5 = *(($0 + [72]))
	$12 = *(($0 + [76]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$18 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$19:
	if ( ((int_64)(uint_64)*(*($7) + [8]) >> (uint_64)(int_64)8) == (int_64)$9) ){ goto $label$18 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = ($0 + [48])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$23 }
	$4 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$7), [688])
	$9 = *($0)
	if ( $4 ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-6224938531340550144, $9)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$21 }
	$4 = CALL $31($7, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$7), [688])
	$9 = *($0)
	
.LABEL $label$22
	*($13) = ($13 + [16])
	CALL eosio_assert([1], [1280])
	CALL $96($7, $4, $9, $13)
	goto $label$8 
	
.LABEL $label$21
	$9 = *($0)
	
.LABEL $label$20
	*($13 + [8]) = ($13 + [16])
	CALL $95($13, $7, $9, ($13 + [8]))
	
.LABEL $label$8
	if ( ((*($13 + [48]) & [1]) == 0) ){ goto $label$24 }
	CALL $105(*(($13 + [56])))
	
.LABEL $label$24
	*([0] + [4]) = ($13 + [64])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [576])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [576])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1328]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	CALL eosio_assert([0], [3040])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [16]) = $1
	$4 = *($2)
	$1 = *(*($2 + [4]))
	*($0) = *($1)
	*(($5 = ($0 + [8]))) = *(($1 + [8]))
	CALL eosio_assert([1], [528])
	CALL memcpy($6, $0, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 | [8]), $5, [8])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749779137757184, *(*($2 + [8])), $3), $6, [16])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [640])
	*([0] + [4]) = $19
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [1872])
	CALL eosio_assert(CALL $fimport$28($2), [1904])
	$13 = *($3 + [8])
	$6 = [0]
	*(($19 + [552])) = [0]
	$14 = (uint_64)$13 >> (uint_64)(int_64)8
	*($19 + [528]) = $14)
	*($19 + [536]) = (int_64)-1
	*($19 + [544]) = (int_64)0
	*($19 + [520]) = *($0)
	$5 = CALL $62(($19 + [520]), $14, [1040])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$16 = *($3)
	if ( ((uint_64)((int_64)$16 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$12 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1936])
	CALL eosio_assert(((int_64)$16 > (int_64)0), [1968])
	CALL eosio_assert(((int_64)$13 == (int_64)*($5 + [8])), [2000])
	$12 = *($4)
	if ( ($12 & [1]) ){ goto $label$7 }
	$12 = uint_32($12 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$12 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($12 <= [257]), [2032])
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [400]
	$15 = (int_64)0
	
.LOOP $label$8:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$9 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$9
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$8 }
	if ( ((int_64)$15 != (int_64)$2) ){ goto $label$21 }
	if ( (CALL $63($0, $1) == 0) ){ goto $label$20 }
	$18 = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($4, [0], [10])
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [400]
	$15 = (int_64)0
	
.LOOP $label$22:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$23 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$6 = ($6 + [165])
	goto $label$24 
	
.LABEL $label$25
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$23
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$22 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [400]
	$17 = (int_64)0
	
.LOOP $label$26:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$27 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$6 = ($6 + [165])
	goto $label$28 
	
.LABEL $label$29
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$27
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$26 }
	*(($19 + [512])) = [0]
	*($19 + [496]) = (int_64)-1
	*($19 + [504]) = (int_64)0
	*($19 + [488]) = $17
	*($19 + [480]) = $15
	$12 = [0]
	$6 = CALL db_find_i64($15, $17, (int_64)3617214760481587200, $18)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$30 }
	$12 = CALL $64(($19 + [480]), $6)
	CALL eosio_assert(((int_32)*($12 + [16]) == (int_32)($19 + [480])), [688])
	
.LABEL $label$30
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [2064])
	$5 = ($3 + [8])
	*(($6 = (($19 + [464]) + [8]))) = *($5)
	$14 = *($3)
	*((($19 + [56]) + [12])) = *((($19 + [464]) + [12]))
	*((($19 + [56]) + [8])) = *($6)
	*($19 + [464]) = $14
	*($19 + [60]) = *($19 + [468])
	*($19 + [56]) = *($19 + [464])
	CALL $65(($19 + [600]), $0, ($19 + [56]), $1)
	*($19 + [448]) = (int_64)0
	*($19 + [456]) = [0]
	$6 = (*($19 + [604]) - *($19 + [600]))
	$4 = int_32($6 >> [4])
	if ( ($4 == 0) ){ goto $label$31 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$15 }
	$6 = CALL $104($6)
	*(($19 + [456])) = ($6 + ($4 << [4]))
	*($19 + [448]) = $6
	*($19 + [452]) = $6
	$8 = *($19 + [600])
	$4 = (*($19 + [604]) - $8)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$31 }
	CALL memcpy($6, $8, $4)
	*($19 + [452]) = (*($19 + [452]) + $4)
	
.LABEL $label$31
	$13 = *($5)
	*((($19 + [432]) + [8])) = $13
	$16 = *($12 + [8])
	$14 = *($3)
	*((($19 + [40]) + [8])) = $13
	*($19 + [432]) = $14
	*($19 + [40]) = $14
	CALL $66($0, ($19 + [448]), ($19 + [40]), $16)
	$12 = *($19 + [448])
	if ( ($12 == 0) ){ goto $label$32 }
	*($19 + [452]) = $12
	CALL $105($12)
	
.LABEL $label$32
	$12 = *($19 + [600])
	if ( ($12 == 0) ){ goto $label$33 }
	*($19 + [604]) = $12
	CALL $105($12)
	
.LABEL $label$33
	$4 = *($19 + [504])
	if ( ($4 == 0) ){ goto $label$16 }
	$5 = ($19 + [508])
	$12 = *($5)
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$18 }
	
.LOOP $label$34:
	$12 = ($12 + [-24])
	$6 = *($12)
	*($12) = [0]
	if ( ($6 == 0) ){ goto $label$35 }
	CALL $105($6)
	
.LABEL $label$35
	if ( ((int_32)$4 != (int_32)$12) ){ goto $label$34 }
	$12 = *(($19 + [504]))
	goto $label$17 
	
.LABEL $label$21
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [400]
	$15 = (int_64)0
	
.LOOP $label$36:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$37 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$6 = ($6 + [165])
	goto $label$38 
	
.LABEL $label$39
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$37
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$36 }
	if ( ((int_64)$15 != (int_64)$1) ){ goto $label$19 }
	$6 = ($0 + [88])
	$12 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)-6150061881519591552, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$40 }
	$12 = CALL $24($6, $4)
	
.LABEL $label$40
	$4 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($4, [2144])
	*(($5 = (($19 + [216]) + [8]))) = *(($3 + [8]))
	*($19 + [216]) = *($3)
	$14 = *($12)
	*((($19 + [104]) + [8])) = *($5)
	*($19 + [104]) = *($19 + [216])
	CALL $68(($19 + [480]), $0, ($19 + [104]), $14)
	*($19 + [200]) = (int_64)0
	*($19 + [208]) = [0]
	$5 = (*($19 + [484]) - *($19 + [480]))
	$8 = int_32($5 >> [4])
	if ( ($8 == 0) ){ goto $label$41 }
	if ( ((uint_32)$8 >= (uint_32)[268435456]) ){ goto $label$14 }
	$5 = CALL $104($5)
	*(($19 + [208])) = ($5 + ($8 << [4]))
	*($19 + [200]) = $5
	*($19 + [204]) = $5
	$9 = *($19 + [480])
	$8 = (*($19 + [484]) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$41 }
	CALL memcpy($5, $9, $8)
	*($19 + [204]) = (*($19 + [204]) + $8)
	
.LABEL $label$41
	CALL $69($0, ($19 + [200]), $2, $1)
	$5 = *($19 + [200])
	if ( ($5 == 0) ){ goto $label$42 }
	*($19 + [204]) = $5
	CALL $105($5)
	
.LABEL $label$42
	CALL eosio_assert($4, [2208])
	CALL eosio_assert($4, [2256])
	$4 = CALL db_next_i64(*($12 + [12]), ($19 + [600]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$43 }
	CALL $24($6, $4)
	
.LABEL $label$43
	CALL $70($6, $12)
	$12 = *($19 + [480])
	if ( ($12 == 0) ){ goto $label$16 }
	*($19 + [484]) = $12
	CALL $105($12)
	goto $label$16 
	
.LABEL $label$20
	$12 = [0]
	CALL $117(($19 + [416]), $4, [0], CALL $108($4, [45], [0]), $4)
	CALL $116(($19 + [360]), ($19 + [416]))
	CALL $67(($19 + [376]), $0, ($19 + [360]))
	if ( ((*($19 + [360]) & [1]) == 0) ){ goto $label$44 }
	CALL $105(*($19 + [368]))
	
.LABEL $label$44
	*($19 + [320]) = [0]
	$6 = (($19 + [320]) | [1])
	
.LOOP $label$45:
	*(($6 + $12)) = *((($19 + [376]) + $12))
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)[33]) ){ goto $label$45 }
	$7 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [624]
	$15 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$51 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$6 = ($6 + [165])
	goto $label$49 
	
.LABEL $label$51
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$47
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$46 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [400]
	$17 = (int_64)0
	
.LOOP $label$52:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$53 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$6 = ($6 + [165])
	goto $label$54 
	
.LABEL $label$55
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$53
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$52 }
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2128]
	$18 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$14 > (uint_64)(int_64)8) ){ goto $label$61 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$6 = ($6 + [165])
	goto $label$59 
	
.LABEL $label$61
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$57
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$18 = ((int_64)$13 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$56 }
	CALL memcpy(($19 + [286]), ($19 + [320]), [34])
	*($19 + [488]) = $18
	*($19 + [480]) = $17
	*(($12 = CALL $104([16]))) = $7
	*($12 + [8]) = $15
	*(($6 = ($19 + [512]))) = [0]
	$4 = ($12 + [16])
	*(($19 + [504])) = $4
	*(($19 + [500])) = $4
	*($19 + [496]) = $12
	*($19 + [508]) = [0]
	*(($19 + [516])) = [0]
	CALL $34(($19 + [508]), [34])
	$6 = *($6)
	$12 = *($19 + [508])
	CALL memcpy(($19 + [566]), ($19 + [286]), [34])
	CALL memcpy(($19 + [600]), ($19 + [566]), [34])
	CALL eosio_assert(((int_32)($6 - $12) > (int_32)[33]), [528])
	CALL memcpy($12, ($19 + [600]), [34])
	CALL $30(($19 + [600]), ($19 + [480]))
	$12 = *($19 + [600])
	CALL send_inline($12, (*($19 + [604]) - $12))
	$12 = *($19 + [600])
	if ( ($12 == 0) ){ goto $label$62 }
	*($19 + [604]) = $12
	CALL $105($12)
	
.LABEL $label$62
	$12 = *($19 + [508])
	if ( ($12 == 0) ){ goto $label$63 }
	*(($19 + [512])) = $12
	CALL $105($12)
	
.LABEL $label$63
	$12 = *($19 + [496])
	if ( ($12 == 0) ){ goto $label$64 }
	*(($19 + [500])) = $12
	CALL $105($12)
	
.LABEL $label$64
	$13 = *($19 + [327])
	$16 = *($19 + [326])
	$15 = *($19 + [325])
	$17 = *($19 + [324])
	$18 = *($19 + [323])
	$7 = *($19 + [322])
	$10 = *($19 + [321])
	$4 = ($3 + [8])
	*(($12 = (($19 + [264]) + [8]))) = *($4)
	$14 = *($3)
	*((($19 + [88]) + [12])) = *((($19 + [264]) + [12]))
	*((($19 + [88]) + [8])) = *($12)
	*($19 + [264]) = $14
	*($19 + [92]) = *($19 + [268])
	*($19 + [88]) = *($19 + [264])
	CALL $65(($19 + [480]), $0, ($19 + [88]), $1)
	*($19 + [248]) = (int_64)0
	*($19 + [256]) = [0]
	$12 = (*($19 + [484]) - *($19 + [480]))
	$6 = int_32($12 >> [4])
	if ( ($6 == 0) ){ goto $label$65 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$13 }
	$12 = CALL $104($12)
	*(($19 + [256])) = ($12 + ($6 << [4]))
	*($19 + [248]) = $12
	*($19 + [252]) = $12
	$5 = *($19 + [480])
	$6 = (*($19 + [484]) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$65 }
	CALL memcpy($12, $5, $6)
	*($19 + [252]) = (*($19 + [252]) + $6)
	
.LABEL $label$65
	$14 = *($4)
	*((($19 + [232]) + [8])) = $14
	$11 = *($3)
	*((($19 + [72]) + [8])) = $14
	*($19 + [232]) = $11
	*($19 + [76]) = *($19 + [236])
	*($19 + [72]) = *($19 + [232])
	CALL $66($0, ($19 + [248]), ($19 + [72]), ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)$7 << (int_64)40) | (int_64)((int_64)$10 << (int_64)48)) | (int_64)((int_64)$18 << (int_64)32)) | (int_64)((int_64)$17 << (int_64)24)) | (int_64)((int_64)$15 << (int_64)16)) | (int_64)((int_64)$16 << (int_64)8)) | (int_64)$13))
	$12 = *($19 + [248])
	if ( ($12 == 0) ){ goto $label$66 }
	*($19 + [252]) = $12
	CALL $105($12)
	
.LABEL $label$66
	$12 = *($19 + [480])
	if ( ($12 == 0) ){ goto $label$67 }
	*($19 + [484]) = $12
	CALL $105($12)
	
.LABEL $label$67
	if ( ((*($19 + [416]) & [1]) == 0) ){ goto $label$16 }
	CALL $105(*($19 + [424]))
	goto $label$16 
	
.LABEL $label$19
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1568]
	$15 = (int_64)0
	
.LOOP $label$68:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$69 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$6 = ($6 + [165])
	goto $label$70 
	
.LABEL $label$71
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$70
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$69
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$68 }
	if ( ((int_64)$15 != (int_64)$1) ){ goto $label$72 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1568]
	$15 = (int_64)0
	
.LOOP $label$73:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$74 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$6 = ($6 + [165])
	goto $label$75 
	
.LABEL $label$76
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$74
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$73 }
	CALL $20($0, $15)
	
.LABEL $label$72
	*(($12 = (($19 + [184]) + [8]))) = *(($3 + [8]))
	$14 = *($3)
	*((($19 + [120]) + [12])) = *((($19 + [184]) + [12]))
	*((($19 + [120]) + [8])) = *($12)
	*($19 + [184]) = $14
	*($19 + [124]) = *($19 + [188])
	*($19 + [120]) = *($19 + [184])
	CALL $65(($19 + [480]), $0, ($19 + [120]), $1)
	*($19 + [168]) = (int_64)0
	*($19 + [176]) = [0]
	$12 = (*($19 + [484]) - *($19 + [480]))
	$6 = int_32($12 >> [4])
	if ( ($6 == 0) ){ goto $label$77 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$12 }
	$12 = CALL $104($12)
	*(($19 + [176])) = ($12 + ($6 << [4]))
	*($19 + [168]) = $12
	*($19 + [172]) = $12
	$4 = *($19 + [480])
	$6 = (*($19 + [484]) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$77 }
	CALL memcpy($12, $4, $6)
	*($19 + [172]) = (*($19 + [172]) + $6)
	
.LABEL $label$77
	CALL $69($0, ($19 + [168]), $2, $1)
	$12 = *($19 + [168])
	if ( ($12 == 0) ){ goto $label$78 }
	*($19 + [172]) = $12
	CALL $105($12)
	
.LABEL $label$78
	$12 = *($19 + [480])
	if ( ($12 == 0) ){ goto $label$16 }
	*($19 + [484]) = $12
	CALL $105($12)
	goto $label$16 
	
.LABEL $label$18
	$12 = $4
	
.LABEL $label$17
	*($5) = $4
	CALL $105($12)
	
.LABEL $label$16
	$12 = ($3 + [8])
	$14 = *($12)
	*((($19 + [152]) + [8])) = $14
	$13 = *($3)
	*((($19 + [24]) + [8])) = $14
	*($19 + [152]) = $13
	*($19 + [28]) = *($19 + [156])
	*($19 + [24]) = *($19 + [152])
	CALL $71($0, $1, ($19 + [24]))
	*(($6 = (($19 + [136]) + [8]))) = *($12)
	$14 = *($3)
	*((($19 + [8]) + [12])) = *((($19 + [136]) + [12]))
	*((($19 + [8]) + [8])) = *($6)
	*($19 + [136]) = $14
	*($19 + [12]) = *($19 + [140])
	*($19 + [8]) = *($19 + [136])
	CALL $72($0, $2, ($19 + [8]), $1)
	$3 = *($19 + [544])
	if ( ($3 == 0) ){ goto $label$79 }
	$0 = ($19 + [548])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$81 }
	
.LOOP $label$82:
	$12 = ($12 + [-24])
	$6 = *($12)
	*($12) = [0]
	if ( ($6 == 0) ){ goto $label$83 }
	CALL $105($6)
	
.LABEL $label$83
	if ( ((int_32)$3 != (int_32)$12) ){ goto $label$82 }
	$12 = *(($19 + [544]))
	goto $label$80 
	
.LABEL $label$81
	$12 = $3
	
.LABEL $label$80
	*($0) = $3
	CALL $105($12)
	
.LABEL $label$79
	*([0] + [4]) = ($19 + [640])
	return (unreachable)
	
.LABEL $label$15
	CALL $115(($19 + [448]))
	
.LABEL $label$14
	CALL $115(($19 + [200]))
	
.LABEL $label$13
	CALL $115(($19 + [248]))
	
.LABEL $label$12
	CALL $115(($19 + [168]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [816])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $58(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $59(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $105(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $60(*($1), ($0 + [32]))
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $116(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $116(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $105(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $105(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [1744])
	$3 = *($3)
	*($1) = *($3)
	$4 = *($1 + [8])
	*($1 + [8]) = *(($3 + [8]))
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [1808])
	CALL eosio_assert([1], [528])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $51 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [688])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $52($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [688])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $104([32])
	$6 = CALL $53($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $54(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $105($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $104(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $105($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $105($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $104($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $115($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $105($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $104(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $105($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $105($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $104($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $104($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $104($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $105($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $36(*($1), ($0 + [32]))
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $104($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $113($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $114($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $110 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $112($1, $0, [11712])
	CALL abort()
	(unreachable)
}

void .FUNC $111 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $112($1, $0, [11696])
	CALL abort()
	(unreachable)
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC __errno_location ()
{
	return [11728]
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [15696])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [15680]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [15712]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [15729])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [15729])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [15729]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [15729]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16000]))
	$10 = *(($13 + [15729]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [15729]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [15729]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [15729]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [15729])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [15729])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_64 .FUNC strtoull (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$2 = ($1 + [8])
	$3 = *($1 + [8])
	$8 = *(($1 + [12]))
	$4 = ($8 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$5 = [-8]
	
.LOOP $label$1:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$7 = [0]
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$8 = [0]
	$3 = ($4 & [-16])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$2 }
	$5 = ($3 - $5)
	goto $label$3 
	
.LABEL $label$4
	$5 = ([0] - $5)
	
.LABEL $label$3
	CALL $34($0, $5)
	$7 = *(($0 + [4]))
	$8 = *($0)
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $8) > (int_32)[7]), [528])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $41($9, $2)
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [400]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$5 = ($5 + [165])
	goto $label$3 
	
.LABEL $label$4
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [400]
	$12 = (int_64)0
	
.LOOP $label$5:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$6 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$5 = ($5 + [165])
	goto $label$7 
	
.LABEL $label$8
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$6
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$5 }
	*((($13 + [40]) + [32])) = [0]
	*($13 + [48]) = $12
	*($13 + [40]) = $10
	*($13 + [56]) = (int_64)-1
	*($13 + [64]) = (int_64)0
	$5 = CALL $42(($13 + [40]), $2, [1040])
	*(($13 + [16])) = *(($5 + [16]))
	*(($13 + [8])) = *(($5 + [8]))
	$9 = *($5)
	*(($13 + [32])) = [0]
	*($13) = $9
	*($13 + [24]) = (int_64)0
	$7 = (*(($5 + [28])) - *($5 + [24]))
	$4 = int_32($7 >> [4])
	if ( ($4 == 0) ){ goto $label$13 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$10 }
	$7 = CALL $104($7)
	*(($6 = ($13 + [24]))) = $7
	*(($13 + [32])) = ($7 + ($4 << [4]))
	*(($4 = ($13 + [28]))) = $7
	$3 = *(($5 + [24]))
	$5 = (*(($5 + [28])) - $3)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($7, $3, $5)
	$5 = (*($4) + $5)
	*($4) = $5
	$7 = *($6)
	$4 = $7
	goto $label$11 
	
.LABEL $label$13
	$7 = [0]
	$4 = [0]
	$5 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = $7
	$5 = $7
	
.LABEL $label$11
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($5 - $4)
	$4 = int_32($5 >> [4])
	if ( ($4 == 0) ){ goto $label$14 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$9 }
	$5 = CALL $104($5)
	*($0) = $5
	*(($6 = ($0 + [4]))) = $5
	*(($0 + [8])) = ($5 + ($4 << [4]))
	$7 = *(($13 + [24]))
	$0 = (*(($13 + [28])) - $7)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($5, $7, $0)
	*($6) = (*($6) + $0)
	$7 = *($13 + [24])
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*(($13 + [28])) = $7
	CALL $105($7)
	
.LABEL $label$15
	$4 = *($13 + [64])
	if ( ($4 == 0) ){ goto $label$16 }
	$6 = (($13 + [40]) + [28])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$18 }
	
.LOOP $label$19:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	$0 = *($5 + [24])
	if ( ($0 == 0) ){ goto $label$21 }
	*(($5 + [28])) = $0
	CALL $105($0)
	
.LABEL $label$21
	CALL $105($5)
	
.LABEL $label$20
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$19 }
	$7 = *(($13 + [64]))
	goto $label$17 
	
.LABEL $label$18
	$7 = $4
	
.LABEL $label$17
	*($6) = $4
	CALL $105($7)
	
.LABEL $label$16
	*([0] + [4]) = ($13 + [80])
	return (unreachable)
	
.LABEL $label$10
	CALL $115(($13 + [24]))
	
.LABEL $label$9
	CALL $115($0)
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [16]) = $1
	$4 = *($2)
	$1 = *(*($2 + [4]))
	*($0) = *($1)
	*(($5 = ($0 + [8]))) = *(($1 + [8]))
	CALL eosio_assert([1], [528])
	CALL memcpy($6, $0, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 | [8]), $5, [8])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)4921564855807700992, *(*($2 + [8])), $3), $6, [16])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $104(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $105($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $106 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [576])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	float_64 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	float_64 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_64 $36
	int_32 $37
	int_64 $38
	int_64 $39
	int_64 $40
	int_64 $41
	int_32 $42
	int_32 $43
	$43 = (*([0] + [4]) - [224])
	*([0] + [4]) = $43
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [400]
	$39 = (int_64)0
	
.LOOP $label$1:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$2 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$17 = ($17 + [165])
	goto $label$3 
	
.LABEL $label$4
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$2
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$39 != (int_64)$1), [1088])
	$37 = [1]
	if ( CALL has_auth($1) ){ goto $label$5 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1136]
	$39 = (int_64)0
	
.LOOP $label$6:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$7 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$17 = ($17 + [165])
	goto $label$8 
	
.LABEL $label$9
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$7
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$6 }
	$37 = CALL has_auth($39)
	
.LABEL $label$5
	CALL eosio_assert($37, [1152])
	$19 = $1
	if ( CALL has_auth($1) ){ goto $label$10 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1136]
	$19 = (int_64)0
	
.LOOP $label$11:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$12 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$17 = ($17 + [165])
	goto $label$13 
	
.LABEL $label$14
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$12
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$19 = ((int_64)$40 | (int_64)$19)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$11 }
	
.LABEL $label$10
	$38 = *($0)
	$42 = [0]
	*((($43 + [48]) + [32])) = [0]
	*($43 + [56]) = $1
	*($43 + [48]) = $38
	*($43 + [64]) = (int_64)-1
	*($43 + [72]) = (int_64)0
	$20 = *(CALL $51(($43 + [48]), (int_64)5522754, [1040]))
	$35 = *($43 + [72])
	if ( ($35 == 0) ){ goto $label$15 }
	$13 = ($43 + [76])
	$37 = *($13)
	if ( ((int_32)$37 == (int_32)$35) ){ goto $label$17 }
	
.LOOP $label$18:
	$37 = ($37 + [-24])
	$17 = *($37)
	*($37) = [0]
	if ( ($17 == 0) ){ goto $label$19 }
	CALL $105($17)
	
.LABEL $label$19
	if ( ((int_32)$35 != (int_32)$37) ){ goto $label$18 }
	$37 = *(($43 + [72]))
	goto $label$16 
	
.LABEL $label$17
	$37 = $35
	
.LABEL $label$16
	*($13) = $35
	CALL $105($37)
	
.LABEL $label$15
	*((($43 + [168]) + [32])) = [0]
	*($43 + [176]) = $1
	*($43 + [184]) = (int_64)-1
	*($43 + [192]) = (int_64)0
	*($43 + [168]) = *($0)
	$21 = ($0 + [36])
	if ( ((int_32)*($21) == (int_32)*($0 + [32])) ){ goto $label$26 }
	$2 = ($0 + [48])
	$17 = *($21)
	$22 = ($0 + [32])
	$37 = *($22)
	$8 = (($43 + [32]) | [1])
	$7 = (($43 + [32]) | [1])
	$6 = (($43 + [32]) | [1])
	$5 = (($43 + [32]) | [1])
	$4 = (($43 + [32]) | [1])
	$3 = (($43 + [32]) | [1])
	$23 = ($0 + [72])
	$24 = ($0 + [76])
	$25 = ($0 + [56])
	$28 = (($43 + [168]) + [28])
	$31 = (($43 + [48]) + [16])
	$9 = (($43 + [48]) + [32])
	$32 = ($9 + [4])
	$34 = ($43 + [88])
	$33 = ($43 + [132])
	$35 = [0]
	$42 = [0]
	$10 = [0]
	
.LOOP $label$27:
	$35 = ($37 + ((int_32)$35 * (int_32)[24]))
	$40 = *($35 + [8])
	$11 = *($35)
	$35 = $17
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$28 }
	
.LOOP $label$30:
	if ( ((int_64)*($37) == (int_64)$11) ){ goto $label$29 }
	$37 = ($37 + [24])
	if ( ((int_32)$17 != (int_32)$37) ){ goto $label$30 }
	$35 = $17
	goto $label$28 
	
.LABEL $label$29
	$35 = $37
	
.LABEL $label$28
	CALL eosio_assert(((int_32)$35 != (int_32)$17), [656])
	$38 = (uint_64)$11 >> (uint_64)(int_64)8)
	$12 = *($35 + [16])
	$27 = *($23)
	$35 = *($24)
	if ( ((int_32)$35 == (int_32)$27) ){ goto $label$31 }
	$37 = ($35 + [-24])
	$13 = ([0] - $27)
	
.LOOP $label$32:
	if ( ((int_64)(uint_64)*(*($37) + [8]) >> (uint_64)(int_64)8) == (int_64)$38) ){ goto $label$31 }
	$35 = $37
	$17 = ($37 + [-24])
	$37 = $17
	if ( ((int_32)($17 + $13) != (int_32)[-24]) ){ goto $label$32 }
	
.LABEL $label$31
	if ( ((int_32)$35 == (int_32)$27) ){ goto $label$35 }
	$37 = *(($35 + [-24]))
	CALL eosio_assert(((int_32)*($37 + [16]) == (int_32)$2), [688])
	if ( $37 ){ goto $label$34 }
	$36 = (int_64)0
	goto $label$33 
	
.LABEL $label$35
	$37 = CALL db_find_i64(*($2), *($25), (int_64)-6224938531340550144, $38)
	if ( ((int_32)$37 >= (int_32)[0]) ){ goto $label$36 }
	$36 = (int_64)0
	goto $label$33 
	
.LABEL $label$36
	$37 = CALL $31($2, $37)
	CALL eosio_assert(((int_32)*($37 + [16]) == (int_32)$2), [688])
	
.LABEL $label$34
	$36 = *($37)
	
.LABEL $label$33
	CALL __multi3(($43 + [16]), $36, (int_64)$36 >> (int_64)63), $20, (int_64)$20 >> (int_64)63))
	$14 = (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 (int_64))($40 - $11)) & [255])
	$26 = CALL pow((float_64)10, $14))
	*(($27 = (($43 + [152]) + [8]))) = $40
	CALL __fixunsdfti($43, ((float_64)((float_64)$26 * (float_64)CALL $fimport$8(*($43 + [16]), *((($43 + [16]) + [8])))) / (float_64)(float_64)88e10))
	$36 = *($43)
	*($43 + [152]) = $36
	CALL eosio_assert((uint_64)(((int_64)$36 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [752])
	$36 = (uint_64)*($27) >> (uint_64)(int_64)8)
	$37 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $36) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	
.LOOP $label$41:
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$38 }
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$41 }
	
.LABEL $label$40
	$17 = [1]
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$17 = [0]
	
.LABEL $label$37
	CALL eosio_assert($17, [816])
	CALL eosio_assert([1], [752])
	$36 = (uint_64)$40 >> (uint_64)(int_64)8)
	$37 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $36) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	
.LOOP $label$46:
	$36 = (uint_64)$36 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$36) & (int_64)255) != (int_64)0) ){ goto $label$43 }
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$46 }
	
.LABEL $label$45
	$17 = [1]
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$17 = [0]
	
.LABEL $label$42
	CALL eosio_assert($17, [816])
	$15 = *((($43 + [168]) + [24]))
	$35 = *($28)
	if ( ((int_32)$35 == (int_32)$15) ){ goto $label$47 }
	$37 = ($35 + [-24])
	$13 = ([0] - $15)
	
.LOOP $label$48:
	if ( ((int_64)(uint_64)*(*($37) + [8]) >> (uint_64)(int_64)8) == (int_64)$38) ){ goto $label$47 }
	$35 = $37
	$17 = ($37 + [-24])
	$37 = $17
	if ( ((int_32)($17 + $13) != (int_32)[-24]) ){ goto $label$48 }
	
.LABEL $label$47
	if ( ((int_32)$35 == (int_32)$15) ){ goto $label$52 }
	$37 = *(($35 + [-24]))
	CALL eosio_assert(((int_32)*($37 + [16]) == (int_32)($43 + [168])), [688])
	if ( $37 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$37 = CALL db_find_i64(*($43 + [168]), *((($43 + [168]) + [8])), (int_64)4921564855807700992, $38)
	if ( ((int_32)$37 < (int_32)[0]) ){ goto $label$50 }
	$37 = CALL $48(($43 + [168]), $37)
	CALL eosio_assert(((int_32)*($37 + [16]) == (int_32)($43 + [168])), [688])
	
.LABEL $label$51
	CALL eosio_assert(((int_64)*($27) == (int_64)*($37 + [8])), [1216])
	$36 = (int_64)0
	$40 = *($43 + [152])
	if ( ((int_64)$40 < (int_64)*($37)) ){ goto $label$49 }
	CALL eosio_assert(((int_64)*(($37 + [8])) == (int_64)*($27)), [848])
	$36 = (int_64)
	CALL eosio_assert(((int_64)$36($40 - *($37))) > (int_64)-4611686018427387904), [896])
	CALL eosio_assert(((int_64)$36 < (int_64)4611686018427387904), [928])
	*($43 + [48]) = ($43 + [152])
	CALL eosio_assert([1], [1280])
	CALL $50(($43 + [168]), $37, $19, ($43 + [48]))
	goto $label$49 
	
.LABEL $label$50
	$36 = *($43 + [152])
	*($43 + [112]) = ($43 + [152])
	CALL $49(($43 + [48]), ($43 + [168]), $19, ($43 + [112]))
	
.LABEL $label$49
	$16 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $36) / (float_64)CALL pow((float_64)10, $14)))
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [752])
	$37 = [0]
	
.LOOP $label$55:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $38) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$54 }
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$56 }
	
.LOOP $label$57:
	$38 = (uint_64)$38 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$38) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$57 }
	
.LABEL $label$56
	$17 = [1]
	$37 = ($37 + [1])
	if ( ((int_32)$37 < (int_32)[7]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$54
	$17 = [0]
	
.LABEL $label$53
	CALL eosio_assert($17, [816])
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$58 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1328]
	$39 = (int_64)0
	
.LOOP $label$59:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$60 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$17 = ($17 + [165])
	goto $label$61 
	
.LABEL $label$62
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$60
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$59 }
	if ( ((int_64)$39 != (int_64)$1) ){ goto $label$70 }
	$41 = *($0)
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [624]
	$39 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$76 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$17 = ($17 + [165])
	goto $label$74 
	
.LABEL $label$76
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$72
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$71 }
	*((($43 + [96]) + [8])) = $39
	*($43 + [96]) = $41
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [368]
	$39 = (int_64)0
	
.LOOP $label$77:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$82 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$17 = ($17 + [165])
	goto $label$80 
	
.LABEL $label$82
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$81
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$79
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$78
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$77 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1344]
	$41 = (int_64)0
	
.LOOP $label$83:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$84 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$17 = ($17 + [165])
	goto $label$85 
	
.LABEL $label$86
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$84
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$41 = ((int_64)$40 | (int_64)$41)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$83 }
	*(($17 = (($43 + [32]) + [8]))) = [0]
	*($43 + [32]) = (int_64)0
	$37 = CALL strlen([1360])
	if ( ((uint_32)$37 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$37 >= (uint_32)[11]) ){ goto $label$69 }
	*($43 + [32]) = ($37 << [1])
	$35 = $3
	if ( $37 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$70
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1440]
	$39 = (int_64)0
	
.LOOP $label$87:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$88 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$90 }
	$17 = ($17 + [165])
	goto $label$89 
	
.LABEL $label$90
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$89
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$88
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$87 }
	if ( ((int_64)$39 == (int_64)$1) ){ goto $label$91 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1456]
	$39 = (int_64)0
	
.LOOP $label$92:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$93 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$17 = ($17 + [165])
	goto $label$94 
	
.LABEL $label$95
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$93
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$92 }
	if ( ((int_64)$39 == (int_64)$1) ){ goto $label$91 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1472]
	$39 = (int_64)0
	
.LOOP $label$96:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$97 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$99 }
	$17 = ($17 + [165])
	goto $label$98 
	
.LABEL $label$99
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$98
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$97
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$96 }
	if ( ((int_64)$39 == (int_64)$1) ){ goto $label$91 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1488]
	$39 = (int_64)0
	
.LOOP $label$100:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$101 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$103 }
	$17 = ($17 + [165])
	goto $label$102 
	
.LABEL $label$103
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$102
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$101
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$100 }
	if ( ((int_64)$39 == (int_64)$1) ){ goto $label$91 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1504]
	$39 = (int_64)0
	
.LOOP $label$104:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$105 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$107 }
	$17 = ($17 + [165])
	goto $label$106 
	
.LABEL $label$107
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$106
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$105
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$104 }
	if ( ((int_64)$39 == (int_64)$1) ){ goto $label$91 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1520]
	$39 = (int_64)0
	
.LOOP $label$108:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$109 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$111 }
	$17 = ($17 + [165])
	goto $label$110 
	
.LABEL $label$111
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$110
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$109
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$108 }
	if ( ((int_64)$39 == (int_64)$1) ){ goto $label$91 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1552]
	$39 = (int_64)0
	
.LOOP $label$112:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$113 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$115 }
	$17 = ($17 + [165])
	goto $label$114 
	
.LABEL $label$115
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$114
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$113
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$112 }
	if ( ((int_64)$39 == (int_64)$1) ){ goto $label$117 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1568]
	$39 = (int_64)0
	
.LOOP $label$118:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$119 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$121 }
	$17 = ($17 + [165])
	goto $label$120 
	
.LABEL $label$121
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$120
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$119
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$118 }
	if ( ((int_64)$39 != (int_64)$1) ){ goto $label$116 }
	
.LABEL $label$117
	$41 = *($0)
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [624]
	$39 = (int_64)0
	
.LOOP $label$122:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$127 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$126 }
	$17 = ($17 + [165])
	goto $label$125 
	
.LABEL $label$127
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$124 }
	goto $label$123 
	
.LABEL $label$126
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$125
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$124
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$123
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$122 }
	*((($43 + [96]) + [8])) = $39
	*($43 + [96]) = $41
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [368]
	$39 = (int_64)0
	
.LOOP $label$128:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$133 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$132 }
	$17 = ($17 + [165])
	goto $label$131 
	
.LABEL $label$133
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$130 }
	goto $label$129 
	
.LABEL $label$132
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$131
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$130
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$129
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$128 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1200]
	$41 = (int_64)0
	
.LOOP $label$134:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$135 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$137 }
	$17 = ($17 + [165])
	goto $label$136 
	
.LABEL $label$137
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$136
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$135
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$41 = ((int_64)$40 | (int_64)$41)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$134 }
	*(($17 = (($43 + [32]) + [8]))) = [0]
	*($43 + [32]) = (int_64)0
	$37 = CALL strlen([1584])
	if ( ((uint_32)$37 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$37 >= (uint_32)[11]) ){ goto $label$140 }
	*($43 + [32]) = ($37 << [1])
	$35 = $5
	if ( $37 ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$140
	$13 = (($37 + [16]) & [-16])
	$35 = CALL $104($13)
	*($17) = $35
	*($43 + [32]) = ($13 | [1])
	*($43 + [36]) = $37
	
.LABEL $label$139
	CALL memcpy($35, [1584], $37)
	
.LABEL $label$138
	*(($35 + $37)) = [0]
	*((($43 + [48]) + [8])) = $41
	*($31) = $16
	*((($43 + [48]) + [24])) = $11
	*($32) = *($43 + [36])
	*(($9 + [8])) = *($17)
	*($43 + [48]) = *($0)
	*($9) = *($43 + [32])
	*($43 + [32]) = [0]
	*($43 + [36]) = [0]
	*($17) = [0]
	CALL $30(($43 + [208]), CALL $32(($43 + [112]), ($43 + [96]), $12, $39, ($43 + [48])))
	$37 = *($43 + [208])
	CALL send_inline($37, (*($43 + [212]) - $37))
	$37 = *($43 + [208])
	if ( ($37 == 0) ){ goto $label$141 }
	*($43 + [212]) = $37
	CALL $105($37)
	
.LABEL $label$141
	$37 = *((($43 + [112]) + [28]))
	if ( ($37 == 0) ){ goto $label$142 }
	*((($43 + [112]) + [32])) = $37
	CALL $105($37)
	
.LABEL $label$142
	$37 = *((($43 + [112]) + [16]))
	if ( ($37 == 0) ){ goto $label$143 }
	*($33) = $37
	CALL $105($37)
	
.LABEL $label$143
	if ( ((*($9) & [1]) == 0) ){ goto $label$144 }
	CALL $105(*($34))
	
.LABEL $label$144
	if ( ((*($43 + [32]) & [1]) == 0) ){ goto $label$63 }
	CALL $105(*($17))
	goto $label$63 
	
.LABEL $label$116
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1648]
	$39 = (int_64)0
	
.LOOP $label$145:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$146 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$148 }
	$17 = ($17 + [165])
	goto $label$147 
	
.LABEL $label$148
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$147
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$146
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$145 }
	if ( ((int_64)$39 != (int_64)$1) ){ goto $label$158 }
	CALL eosio_assert([1], [848])
	$18 = ((int_64)$16 / (int_64)2)
	$16 = (int_64)
	CALL eosio_assert(((int_64)$16($16 - $18)) > (int_64)-4611686018427387904), [896])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [928])
	$41 = *($0)
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [624]
	$39 = (int_64)0
	
.LOOP $label$159:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$164 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$163 }
	$17 = ($17 + [165])
	goto $label$162 
	
.LABEL $label$164
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$161 }
	goto $label$160 
	
.LABEL $label$163
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$162
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$161
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$160
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$159 }
	*(($13 = (($43 + [96]) + [8]))) = $39
	*($43 + [96]) = $41
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [368]
	$39 = (int_64)0
	
.LOOP $label$165:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$170 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$169 }
	$17 = ($17 + [165])
	goto $label$168 
	
.LABEL $label$170
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$167 }
	goto $label$166 
	
.LABEL $label$169
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$168
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$167
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$166
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$165 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1200]
	$41 = (int_64)0
	
.LOOP $label$171:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$172 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$174 }
	$17 = ($17 + [165])
	goto $label$173 
	
.LABEL $label$174
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$173
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$172
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$41 = ((int_64)$40 | (int_64)$41)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$171 }
	*(($35 = (($43 + [32]) + [8]))) = [0]
	*($43 + [32]) = (int_64)0
	$37 = CALL strlen([1664])
	if ( ((uint_32)$37 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$37 >= (uint_32)[11]) ){ goto $label$157 }
	*($43 + [32]) = ($37 << [1])
	$17 = $6
	if ( $37 ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$158
	$41 = *($0)
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [624]
	$39 = (int_64)0
	
.LOOP $label$175:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$180 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$179 }
	$17 = ($17 + [165])
	goto $label$178 
	
.LABEL $label$180
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$177 }
	goto $label$176 
	
.LABEL $label$179
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$178
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$177
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$176
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$175 }
	*((($43 + [96]) + [8])) = $39
	*($43 + [96]) = $41
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [368]
	$39 = (int_64)0
	
.LOOP $label$181:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$186 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$185 }
	$17 = ($17 + [165])
	goto $label$184 
	
.LABEL $label$186
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$183 }
	goto $label$182 
	
.LABEL $label$185
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$184
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$183
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$182
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$181 }
	*(($17 = (($43 + [32]) + [8]))) = [0]
	*($43 + [32]) = (int_64)0
	$37 = CALL strlen([960])
	if ( ((uint_32)$37 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$37 >= (uint_32)[11]) ){ goto $label$154 }
	*($43 + [32]) = ($37 << [1])
	$35 = $8
	if ( $37 ){ goto $label$153 }
	goto $label$152 
	
.LABEL $label$157
	$27 = (($37 + [16]) & [-16])
	$17 = CALL $104($27)
	*($35) = $17
	*($43 + [32]) = ($27 | [1])
	*($43 + [36]) = $37
	
.LABEL $label$156
	CALL memcpy($17, [1664], $37)
	
.LABEL $label$155
	*(($17 + $37)) = [0]
	*(($27 = (($43 + [48]) + [8]))) = $41
	*($31) = $18
	*(($15 = (($43 + [48]) + [24]))) = $11
	*($32) = *($43 + [36])
	*(($42 = ($9 + [8]))) = *($35)
	*($43 + [48]) = *($0)
	*($9) = *($43 + [32])
	*($43 + [32]) = [0]
	*($43 + [36]) = [0]
	*($35) = [0]
	CALL $30(($43 + [208]), CALL $32(($43 + [112]), ($43 + [96]), $12, $39, ($43 + [48])))
	$37 = *($43 + [208])
	CALL send_inline($37, (*($43 + [212]) - $37))
	$37 = *($43 + [208])
	if ( ($37 == 0) ){ goto $label$187 }
	*($43 + [212]) = $37
	CALL $105($37)
	
.LABEL $label$187
	$29 = (($43 + [112]) + [28])
	$37 = *($29)
	if ( ($37 == 0) ){ goto $label$188 }
	*((($43 + [112]) + [32])) = $37
	CALL $105($37)
	
.LABEL $label$188
	$30 = (($43 + [112]) + [16])
	$37 = *($30)
	if ( ($37 == 0) ){ goto $label$189 }
	*($33) = $37
	CALL $105($37)
	
.LABEL $label$189
	if ( ((*($9) & [1]) == 0) ){ goto $label$190 }
	CALL $105(*($34))
	
.LABEL $label$190
	if ( ((*($43 + [32]) & [1]) == 0) ){ goto $label$191 }
	CALL $105(*($35))
	
.LABEL $label$191
	$41 = *($0)
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [624]
	$39 = (int_64)0
	
.LOOP $label$192:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$197 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$196 }
	$17 = ($17 + [165])
	goto $label$195 
	
.LABEL $label$197
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$194 }
	goto $label$193 
	
.LABEL $label$196
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$195
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$194
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$193
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$192 }
	*($13) = $39
	*($43 + [96]) = $41
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [368]
	$39 = (int_64)0
	
.LOOP $label$198:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$203 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$202 }
	$17 = ($17 + [165])
	goto $label$201 
	
.LABEL $label$203
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$200 }
	goto $label$199 
	
.LABEL $label$202
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$201
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$200
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$199
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$198 }
	*($35) = [0]
	*($43 + [32]) = (int_64)0
	$37 = CALL strlen([960])
	if ( ((uint_32)$37 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$37 >= (uint_32)[11]) ){ goto $label$151 }
	*($43 + [32]) = ($37 << [1])
	$17 = $7
	if ( $37 ){ goto $label$150 }
	goto $label$149 
	
.LABEL $label$154
	$13 = (($37 + [16]) & [-16])
	$35 = CALL $104($13)
	*($17) = $35
	*($43 + [32]) = ($13 | [1])
	*($43 + [36]) = $37
	
.LABEL $label$153
	CALL memcpy($35, [960], $37)
	
.LABEL $label$152
	*(($35 + $37)) = [0]
	*((($43 + [48]) + [8])) = $1
	*($31) = $16
	*((($43 + [48]) + [24])) = $11
	*($32) = *($43 + [36])
	*(($9 + [8])) = *($17)
	*($43 + [48]) = *($0)
	*($9) = *($43 + [32])
	*($43 + [32]) = [0]
	*($43 + [36]) = [0]
	*($17) = [0]
	CALL $30(($43 + [208]), CALL $32(($43 + [112]), ($43 + [96]), $12, $39, ($43 + [48])))
	$37 = *($43 + [208])
	CALL send_inline($37, (*($43 + [212]) - $37))
	$37 = *($43 + [208])
	if ( ($37 == 0) ){ goto $label$204 }
	*($43 + [212]) = $37
	CALL $105($37)
	
.LABEL $label$204
	$37 = *((($43 + [112]) + [28]))
	if ( ($37 == 0) ){ goto $label$205 }
	*((($43 + [112]) + [32])) = $37
	CALL $105($37)
	
.LABEL $label$205
	$37 = *((($43 + [112]) + [16]))
	if ( ($37 == 0) ){ goto $label$206 }
	*($33) = $37
	CALL $105($37)
	
.LABEL $label$206
	if ( ((*($9) & [1]) == 0) ){ goto $label$207 }
	CALL $105(*($34))
	
.LABEL $label$207
	if ( ((*($43 + [32]) & [1]) == 0) ){ goto $label$63 }
	CALL $105(*($17))
	goto $label$63 
	
.LABEL $label$151
	$13 = (($37 + [16]) & [-16])
	$17 = CALL $104($13)
	*($35) = $17
	*($43 + [32]) = ($13 | [1])
	*($43 + [36]) = $37
	
.LABEL $label$150
	CALL memcpy($17, [960], $37)
	
.LABEL $label$149
	*(($17 + $37)) = [0]
	*($27) = $1
	*($31) = $16
	*($15) = $11
	*($32) = *($43 + [36])
	*($42) = *($35)
	*($43 + [48]) = *($0)
	*($9) = *($43 + [32])
	*($43 + [32]) = [0]
	*($43 + [36]) = [0]
	*($35) = [0]
	CALL $30(($43 + [208]), CALL $32(($43 + [112]), ($43 + [96]), $12, $39, ($43 + [48])))
	$37 = *($43 + [208])
	CALL send_inline($37, (*($43 + [212]) - $37))
	$37 = *($43 + [208])
	if ( ($37 == 0) ){ goto $label$208 }
	*($43 + [212]) = $37
	CALL $105($37)
	
.LABEL $label$208
	$37 = *($29)
	if ( ($37 == 0) ){ goto $label$209 }
	*((($43 + [112]) + [32])) = $37
	CALL $105($37)
	
.LABEL $label$209
	$37 = *($30)
	if ( ($37 == 0) ){ goto $label$210 }
	*($33) = $37
	CALL $105($37)
	
.LABEL $label$210
	if ( ((*($9) & [1]) == 0) ){ goto $label$211 }
	CALL $105(*($34))
	
.LABEL $label$211
	if ( ((*($43 + [32]) & [1]) == 0) ){ goto $label$63 }
	CALL $105(*($35))
	goto $label$63 
	
.LABEL $label$91
	$41 = *($0)
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [624]
	$39 = (int_64)0
	
.LOOP $label$212:
	if ( ((uint_64)$38 > (uint_64)(int_64)5) ){ goto $label$217 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$216 }
	$17 = ($17 + [165])
	goto $label$215 
	
.LABEL $label$217
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$214 }
	goto $label$213 
	
.LABEL $label$216
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$215
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$214
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$213
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$212 }
	*((($43 + [96]) + [8])) = $39
	*($43 + [96]) = $41
	$38 = (int_64)0
	$40 = (int_64)59
	$37 = [368]
	$39 = (int_64)0
	
.LOOP $label$218:
	if ( ((uint_64)$38 > (uint_64)(int_64)7) ){ goto $label$223 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$222 }
	$17 = ($17 + [165])
	goto $label$221 
	
.LABEL $label$223
	$36 = (int_64)0
	if ( ((uint_64)$38 <= (uint_64)(int_64)11) ){ goto $label$220 }
	goto $label$219 
	
.LABEL $label$222
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$221
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$220
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$219
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$36 | (int_64)$39)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$218 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1328]
	$41 = (int_64)0
	
.LOOP $label$224:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$225 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$227 }
	$17 = ($17 + [165])
	goto $label$226 
	
.LABEL $label$227
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$226
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$225
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$41 = ((int_64)$40 | (int_64)$41)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$224 }
	*(($17 = (($43 + [32]) + [8]))) = [0]
	*($43 + [32]) = (int_64)0
	$37 = CALL strlen([1536])
	if ( ((uint_32)$37 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$37 >= (uint_32)[11]) ){ goto $label$66 }
	*($43 + [32]) = ($37 << [1])
	$35 = $4
	if ( $37 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$69
	$13 = (($37 + [16]) & [-16])
	$35 = CALL $104($13)
	*($17) = $35
	*($43 + [32]) = ($13 | [1])
	*($43 + [36]) = $37
	
.LABEL $label$68
	CALL memcpy($35, [1360], $37)
	
.LABEL $label$67
	*(($35 + $37)) = [0]
	*((($43 + [48]) + [8])) = $41
	*($31) = $16
	*((($43 + [48]) + [24])) = $11
	*($32) = *($43 + [36])
	*(($9 + [8])) = *($17)
	*($43 + [48]) = *($0)
	*($9) = *($43 + [32])
	*($43 + [32]) = [0]
	*($43 + [36]) = [0]
	*($17) = [0]
	CALL $30(($43 + [208]), CALL $32(($43 + [112]), ($43 + [96]), $12, $39, ($43 + [48])))
	$37 = *($43 + [208])
	CALL send_inline($37, (*($43 + [212]) - $37))
	$37 = *($43 + [208])
	if ( ($37 == 0) ){ goto $label$228 }
	*($43 + [212]) = $37
	CALL $105($37)
	
.LABEL $label$228
	$37 = *((($43 + [112]) + [28]))
	if ( ($37 == 0) ){ goto $label$229 }
	*((($43 + [112]) + [32])) = $37
	CALL $105($37)
	
.LABEL $label$229
	$37 = *((($43 + [112]) + [16]))
	if ( ($37 == 0) ){ goto $label$230 }
	*($33) = $37
	CALL $105($37)
	
.LABEL $label$230
	if ( ((*($9) & [1]) == 0) ){ goto $label$231 }
	CALL $105(*($34))
	
.LABEL $label$231
	if ( ((*($43 + [32]) & [1]) == 0) ){ goto $label$63 }
	CALL $105(*($17))
	goto $label$63 
	
.LABEL $label$66
	$13 = (($37 + [16]) & [-16])
	$35 = CALL $104($13)
	*($17) = $35
	*($43 + [32]) = ($13 | [1])
	*($43 + [36]) = $37
	
.LABEL $label$65
	CALL memcpy($35, [1536], $37)
	
.LABEL $label$64
	*(($35 + $37)) = [0]
	*((($43 + [48]) + [8])) = $41
	*($31) = $16
	*((($43 + [48]) + [24])) = $11
	*($32) = *($43 + [36])
	*(($9 + [8])) = *($17)
	*($43 + [48]) = *($0)
	*($9) = *($43 + [32])
	*($43 + [32]) = [0]
	*($43 + [36]) = [0]
	*($17) = [0]
	CALL $30(($43 + [208]), CALL $32(($43 + [112]), ($43 + [96]), $12, $39, ($43 + [48])))
	$37 = *($43 + [208])
	CALL send_inline($37, (*($43 + [212]) - $37))
	$37 = *($43 + [208])
	if ( ($37 == 0) ){ goto $label$232 }
	*($43 + [212]) = $37
	CALL $105($37)
	
.LABEL $label$232
	$37 = *((($43 + [112]) + [28]))
	if ( ($37 == 0) ){ goto $label$233 }
	*((($43 + [112]) + [32])) = $37
	CALL $105($37)
	
.LABEL $label$233
	$37 = *((($43 + [112]) + [16]))
	if ( ($37 == 0) ){ goto $label$234 }
	*($33) = $37
	CALL $105($37)
	
.LABEL $label$234
	if ( ((*($9) & [1]) == 0) ){ goto $label$235 }
	CALL $105(*($34))
	
.LABEL $label$235
	if ( ((*($43 + [32]) & [1]) == 0) ){ goto $label$63 }
	CALL $105(*($17))
	
.LABEL $label$63
	$42 = [1]
	
.LABEL $label$58
	$37 = *($22)
	$17 = *($21)
	$10 = ($10 + [1])
	$35 = ($10 & [255])
	if ( ($35 <= ((int_32)($17 - $37) / (int_32)[24])) ){ goto $label$27 }
	
.LABEL $label$26
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1200]
	$39 = (int_64)0
	
.LOOP $label$236:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$237 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$239 }
	$17 = ($17 + [165])
	goto $label$238 
	
.LABEL $label$239
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$238
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$237
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$236 }
	if ( ((int_64)$39 == (int_64)$1) ){ goto $label$240 }
	$38 = (int_64)0
	$36 = (int_64)59
	$37 = [1568]
	$39 = (int_64)0
	
.LOOP $label$241:
	$40 = (int_64)0
	if ( ((uint_64)$38 > (uint_64)(int_64)11) ){ goto $label$242 }
	$17 = *($37)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$244 }
	$17 = ($17 + [165])
	goto $label$243 
	
.LABEL $label$244
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$243
	$40 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$242
	$37 = ($37 + [1])
	$38 = ((int_64)$38 + (int_64)1)
	$39 = ((int_64)$40 | (int_64)$39)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$241 }
	if ( ((int_64)$39 == (int_64)$1) ){ goto $label$240 }
	CALL eosio_assert(($42 & [1]), [592])
	
.LABEL $label$240
	$35 = *($43 + [192])
	if ( ($35 == 0) ){ goto $label$245 }
	$13 = ($43 + [196])
	$37 = *($13)
	if ( ((int_32)$37 == (int_32)$35) ){ goto $label$247 }
	
.LOOP $label$248:
	$37 = ($37 + [-24])
	$17 = *($37)
	*($37) = [0]
	if ( ($17 == 0) ){ goto $label$249 }
	CALL $105($17)
	
.LABEL $label$249
	if ( ((int_32)$35 != (int_32)$37) ){ goto $label$248 }
	$37 = *(($43 + [192]))
	goto $label$246 
	
.LABEL $label$247
	$37 = $35
	
.LABEL $label$246
	*($13) = $35
	CALL $105($37)
	
.LABEL $label$245
	*([0] + [4]) = ($43 + [224])
	return (unreachable)
	
.LABEL $label$25
	CALL $106(($43 + [32]))
	
.LABEL $label$24
	CALL $106(($43 + [32]))
	
.LABEL $label$23
	CALL $106(($43 + [32]))
	
.LABEL $label$22
	CALL $106(($43 + [32]))
	
.LABEL $label$21
	CALL $106(($43 + [32]))
	
.LABEL $label$20
	CALL $106(($43 + [32]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [24]) = $1
	$1 = (int_64)0
	$5 = (int_64)59
	$4 = [400]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	$4 = ($0 + [88])
	$2 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)-6150061881519591552, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	CALL $24($4, $3)
	goto $label$5 
	
.LABEL $label$6
	$2 = [1]
	
.LABEL $label$5
	CALL eosio_assert($2, [416])
	$1 = *($0)
	*($8 + [16]) = ($8 + [24])
	CALL $25(($8 + [8]), $4, $1, ($8 + [16]))
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	$32 = (*([0] + [4]) - [224])
	*([0] + [4]) = $32
	$26 = (int_64)0
	$29 = (int_64)59
	$25 = [400]
	$28 = (int_64)0
	
.LOOP $label$1:
	$27 = (int_64)0
	if ( ((uint_64)$26 > (uint_64)(int_64)11) ){ goto $label$2 }
	$12 = *($25)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$12 = ($12 + [165])
	goto $label$3 
	
.LABEL $label$4
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$27 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$29 & (int_64)4294967295))
	
.LABEL $label$2
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)1)
	$28 = ((int_64)$27 | (int_64)$28)
	$29 = ((int_64)$29 + (int_64)-5)
	if ( ((int_64)$29 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($28)
	*($32 + [200]) = [0]
	*($32 + [192]) = (int_64)0
	CALL $27(($32 + [56]), $0, $1)
	$2 = *($32 + [56])
	CALL $28(($32 + [176]), $0, $1)
	$25 = *($0 + [32])
	$13 = ($0 + [36])
	$12 = *($13)
	if ( ((int_32)$12 != (int_32)$25) ){ goto $label$8 }
	$31 = [0]
	goto $label$7 
	
.LABEL $label$8
	$3 = ($0 + [48])
	$5 = (($32 + [56]) + [32])
	$4 = (($32 + [40]) | [1])
	$14 = ($0 + [72])
	$15 = ($0 + [76])
	$16 = ($0 + [56])
	$17 = (($32 + [24]) + [8])
	$18 = (($32 + [56]) + [16])
	$19 = ($32 + [148])
	$21 = ($32 + [96])
	$20 = ($32 + [140])
	$22 = [0]
	$31 = [0]
	$23 = [0]
	
.LOOP $label$9:
	$24 = ($25 + ((int_32)$22 * (int_32)[24]))
	$27 = *($24 + [8])
	$6 = *($24)
	if ( ((int_32)$25 == (int_32)$12) ){ goto $label$11 }
	
.LOOP $label$12:
	if ( ((int_64)*($25) == (int_64)$6) ){ goto $label$10 }
	$25 = ($25 + [24])
	if ( ((int_32)$12 != (int_32)$25) ){ goto $label$12 }
	
.LABEL $label$11
	$25 = $12
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$25 != (int_32)$12), [656])
	$26 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = *($25 + [16])
	$8 = *($14)
	$24 = *($15)
	if ( ((int_32)$24 == (int_32)$8) ){ goto $label$13 }
	$25 = ($24 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$14:
	if ( ((int_64)(uint_64)*(*($25) + [8]) >> (uint_64)(int_64)8) == (int_64)$26) ){ goto $label$13 }
	$24 = $25
	$12 = ($25 + [-24])
	$25 = $12
	if ( ((int_32)($12 + $9) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$24 == (int_32)$8) ){ goto $label$17 }
	$25 = *(($24 + [-24]))
	CALL eosio_assert(((int_32)*($25 + [16]) == (int_32)$3), [688])
	if ( $25 ){ goto $label$16 }
	$29 = (int_64)0
	goto $label$15 
	
.LABEL $label$17
	$25 = CALL db_find_i64(*($3), *($16), (int_64)-6224938531340550144, $26)
	if ( ((int_32)$25 >= (int_32)[0]) ){ goto $label$18 }
	$29 = (int_64)0
	goto $label$15 
	
.LABEL $label$18
	$25 = CALL $31($3, $25)
	CALL eosio_assert(((int_32)*($25 + [16]) == (int_32)$3), [688])
	
.LABEL $label$16
	$29 = *($25)
	
.LABEL $label$15
	CALL __multi3(($32 + [24]), $29, (int_64)$29 >> (int_64)63), $2, (int_64)$2 >> (int_64)63))
	$10 = (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 (int_64))($27 - $6)) & [255])
	CALL __fixunsdfti(($32 + [8]), ((float_64)((float_64)CALL $fimport$8(*($32 + [24]), *($17)) * (float_64)CALL $150((float_64)10, $10))) / (float_64)(float_64)88e10))
	$28 = *($32 + [8])
	CALL eosio_assert((uint_64)(((int_64)$28 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [752])
	$29 = (uint_64)$27 >> (uint_64)(int_64)8)
	$25 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $29) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$12 = [1]
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$12 = [0]
	
.LABEL $label$19
	CALL eosio_assert($12, [816])
	*(($24 = (($32 + [160]) + [8]))) = $27
	*($32 + [160]) = (int_64)0
	CALL eosio_assert([1], [752])
	$29 = (uint_64)*($24) >> (uint_64)(int_64)8)
	$25 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $29) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	
.LOOP $label$28:
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$28 }
	
.LABEL $label$27
	$12 = [1]
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$12 = [0]
	
.LABEL $label$24
	CALL eosio_assert($12, [816])
	$25 = *($32 + [176])
	if ( ((uint_32)int_32((*($32 + [180]) - $25) >> [4]) <= (uint_32)$22) ){ goto $label$29 }
	$25 = ($25 + ($22 << [4]))
	CALL eosio_assert(((int_64)*($25 + [8]) == (int_64)$27), [848])
	$28 = (int_64)
	CALL eosio_assert(((int_64)$28($28 - *($25))) > (int_64)-4611686018427387904), [896])
	CALL eosio_assert(((int_64)$28 < (int_64)4611686018427387904), [928])
	
.LABEL $label$29
	*($24) = $27
	*($32 + [160]) = $28
	$11 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $28) / (float_64)CALL pow((float_64)10, $10)))
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [752])
	$25 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $26) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$26 = (uint_64)$26 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$26) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	
.LOOP $label$34:
	$26 = (uint_64)$26 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$26) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$34 }
	
.LABEL $label$33
	$12 = [1]
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$12 = [0]
	
.LABEL $label$30
	CALL eosio_assert($12, [816])
	if ( ((int_64)$11 < (int_64)1) ){ goto $label$35 }
	$30 = *($0)
	$26 = (int_64)0
	$27 = (int_64)59
	$25 = [624]
	$28 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$26 > (uint_64)(int_64)5) ){ goto $label$41 }
	$12 = *($25)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$12 = ($12 + [165])
	goto $label$39 
	
.LABEL $label$41
	$29 = (int_64)0
	if ( ((uint_64)$26 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$37
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)1)
	$28 = ((int_64)$29 | (int_64)$28)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$36 }
	*((($32 + [104]) + [8])) = $28
	*($32 + [104]) = $30
	$26 = (int_64)0
	$27 = (int_64)59
	$25 = [368]
	$28 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$26 > (uint_64)(int_64)7) ){ goto $label$47 }
	$12 = *($25)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$12 = ($12 + [165])
	goto $label$45 
	
.LABEL $label$47
	$29 = (int_64)0
	if ( ((uint_64)$26 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$43
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)1)
	$28 = ((int_64)$29 | (int_64)$28)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$42 }
	$26 = (int_64)0
	$29 = (int_64)59
	$25 = [400]
	$30 = (int_64)0
	
.LOOP $label$48:
	$27 = (int_64)0
	if ( ((uint_64)$26 > (uint_64)(int_64)11) ){ goto $label$49 }
	$12 = *($25)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$12 = ($12 + [165])
	goto $label$50 
	
.LABEL $label$51
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$27 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$29 & (int_64)4294967295))
	
.LABEL $label$49
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)1)
	$30 = ((int_64)$27 | (int_64)$30)
	$29 = ((int_64)$29 + (int_64)-5)
	if ( ((int_64)$29 != (int_64)-6) ){ goto $label$48 }
	*(($12 = (($32 + [40]) + [8]))) = [0]
	*($32 + [40]) = (int_64)0
	$25 = CALL strlen([960])
	if ( ((uint_32)$25 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$25 >= (uint_32)[11]) ){ goto $label$54 }
	*($32 + [40]) = ($25 << [1])
	$9 = $4
	if ( $25 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$22 = (($25 + [16]) & [-16])
	$9 = CALL $104($22)
	*($12) = $9
	*($32 + [40]) = ($22 | [1])
	*($32 + [44]) = $25
	
.LABEL $label$53
	CALL memcpy($9, [960], $25)
	
.LABEL $label$52
	*(($9 + $25)) = [0]
	*((($32 + [56]) + [8])) = $30
	*($18) = $11
	*((($32 + [56]) + [24])) = $6
	*(($5 + [4])) = *($32 + [44])
	*(($5 + [8])) = *($12)
	*($32 + [56]) = *($0)
	*($5) = *($32 + [40])
	*($32 + [40]) = [0]
	*($32 + [44]) = [0]
	*($12) = [0]
	CALL $30(($32 + [208]), CALL $32(($32 + [120]), ($32 + [104]), $7, $28, ($32 + [56])))
	$25 = *($32 + [208])
	CALL send_inline($25, (*($32 + [212]) - $25))
	$25 = *($32 + [208])
	if ( ($25 == 0) ){ goto $label$55 }
	*($32 + [212]) = $25
	CALL $105($25)
	
.LABEL $label$55
	$25 = *($19)
	if ( ($25 == 0) ){ goto $label$56 }
	*((($32 + [120]) + [32])) = $25
	CALL $105($25)
	
.LABEL $label$56
	$25 = *((($32 + [120]) + [16]))
	if ( ($25 == 0) ){ goto $label$57 }
	*($20) = $25
	CALL $105($25)
	
.LABEL $label$57
	if ( ((*($5) & [1]) == 0) ){ goto $label$58 }
	CALL $105(*($21))
	
.LABEL $label$58
	if ( ((*($32 + [40]) & [1]) == 0) ){ goto $label$59 }
	CALL $105(*($12))
	
.LABEL $label$59
	$31 = [1]
	
.LABEL $label$35
	$25 = *($32 + [196])
	if ( ((int_32)$25 == (int_32)*((($32 + [192]) + [8]))) ){ goto $label$61 }
	*($25) = *($32 + [160])
	*(($25 + [8])) = *($24)
	*($32 + [196]) = ($25 + [16])
	goto $label$60 
	
.LABEL $label$61
	CALL $33(($32 + [192]), ($32 + [160]))
	
.LABEL $label$60
	$25 = *(($0 + [32]))
	$12 = *($13)
	$23 = ($23 + [1])
	$22 = ($23 & [255])
	if ( ($22 <= ((int_32)($12 - $25) / (int_32)[24])) ){ goto $label$9 }
	
.LABEL $label$7
	CALL eosio_assert(($31 & [1]), [592])
	$11 = *($0)
	$26 = (int_64)0
	$27 = (int_64)59
	$25 = [624]
	$28 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$26 > (uint_64)(int_64)5) ){ goto $label$67 }
	$12 = *($25)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$12 = ($12 + [165])
	goto $label$65 
	
.LABEL $label$67
	$29 = (int_64)0
	if ( ((uint_64)$26 <= (uint_64)(int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$63
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)1)
	$28 = ((int_64)$29 | (int_64)$28)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$62 }
	$26 = (int_64)0
	$29 = (int_64)59
	$25 = [400]
	$30 = (int_64)0
	
.LOOP $label$68:
	$27 = (int_64)0
	if ( ((uint_64)$26 > (uint_64)(int_64)11) ){ goto $label$69 }
	$12 = *($25)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$12 = ($12 + [165])
	goto $label$70 
	
.LABEL $label$71
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$70
	$27 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$29 & (int_64)4294967295))
	
.LABEL $label$69
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)1)
	$30 = ((int_64)$27 | (int_64)$30)
	$29 = ((int_64)$29 + (int_64)-5)
	if ( ((int_64)$29 != (int_64)-6) ){ goto $label$68 }
	$26 = (int_64)0
	$27 = (int_64)59
	$25 = [640]
	$6 = (int_64)0
	
.LOOP $label$72:
	if ( ((uint_64)$26 > (uint_64)(int_64)9) ){ goto $label$77 }
	$12 = *($25)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$12 = ($12 + [165])
	goto $label$75 
	
.LABEL $label$77
	$29 = (int_64)0
	if ( ((uint_64)$26 <= (uint_64)(int_64)11) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$29 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$74
	$29 = ((int_64)((int_64)$29 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$73
	$25 = ($25 + [1])
	$26 = ((int_64)$26 + (int_64)1)
	$6 = ((int_64)$29 | (int_64)$6)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$72 }
	*((($32 + [120]) + [16])) = [0]
	*($32 + [120]) = $1
	*($32 + [128]) = (int_64)0
	$25 = (*($32 + [196]) - *($32 + [192]))
	$12 = int_32($25 >> [4])
	if ( ($12 == 0) ){ goto $label$78 }
	if ( ((uint_32)$12 >= (uint_32)[268435456]) ){ goto $label$5 }
	$25 = CALL $104($25)
	*(($32 + [128])) = $25
	*(($24 = ($32 + [132]))) = $25
	*(($32 + [136])) = ($25 + ($12 << [4]))
	$9 = *($32 + [192])
	$12 = (*($32 + [196]) - $9)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$78 }
	CALL memcpy($25, $9, $12)
	*($24) = (*($24) + $12)
	
.LABEL $label$78
	*($32 + [64]) = $6
	*($32 + [56]) = $30
	*(($25 = CALL $104([16]))) = $11
	*($25 + [8]) = $28
	$12 = ($25 + [16])
	*(($32 + [80])) = $12
	*(($32 + [76])) = $12
	*($32 + [72]) = $25
	CALL $29(($32 + [84]), ($32 + [120]))
	CALL $30(($32 + [160]), ($32 + [56]))
	$25 = *($32 + [160])
	CALL send_inline($25, (*($32 + [164]) - $25))
	$25 = *($32 + [160])
	if ( ($25 == 0) ){ goto $label$79 }
	*($32 + [164]) = $25
	CALL $105($25)
	
.LABEL $label$79
	$25 = *($32 + [84])
	if ( ($25 == 0) ){ goto $label$80 }
	*(($32 + [88])) = $25
	CALL $105($25)
	
.LABEL $label$80
	$25 = *($32 + [72])
	if ( ($25 == 0) ){ goto $label$81 }
	*(($32 + [76])) = $25
	CALL $105($25)
	
.LABEL $label$81
	$25 = *($32 + [128])
	if ( ($25 == 0) ){ goto $label$82 }
	*(($32 + [132])) = $25
	CALL $105($25)
	
.LABEL $label$82
	$25 = *($32 + [176])
	if ( ($25 == 0) ){ goto $label$83 }
	*($32 + [180]) = $25
	CALL $105($25)
	
.LABEL $label$83
	$25 = *($32 + [192])
	if ( ($25 == 0) ){ goto $label$84 }
	*($32 + [196]) = $25
	CALL $105($25)
	
.LABEL $label$84
	*([0] + [4]) = ($32 + [224])
	return (unreachable)
	
.LABEL $label$6
	CALL $106(($32 + [40]))
	
.LABEL $label$5
	CALL $115(($32 + [128]))
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$17()), [464])
	*(($4 = CALL $104([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [528])
	CALL memcpy(($8 + [16]), $4, [8])
	$5 = *($4)
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-6150061881519591552, $2, $5, ($8 + [16]), [8])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [12])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $26(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $105($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [544])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $104([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [576])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $105($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [400]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [400]
	$11 = (int_64)0
	
.LOOP $label$5:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$6 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$4 = ($4 + [165])
	goto $label$7 
	
.LABEL $label$8
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$5 }
	*((($12 + [40]) + [32])) = [0]
	*($12 + [48]) = $11
	*($12 + [40]) = $9
	*($12 + [56]) = (int_64)-1
	*($12 + [64]) = (int_64)0
	$6 = CALL $42(($12 + [40]), $2, [1040])
	*(($5 = ($12 + [16]))) = *(($6 + [16]))
	*(($12 + [8])) = *(($6 + [8]))
	$8 = *($6)
	*(($12 + [32])) = [0]
	*($12) = $8
	*($12 + [24]) = (int_64)0
	$4 = (*(($6 + [28])) - *($6 + [24]))
	$3 = int_32($4 >> [4])
	if ( ($3 == 0) ){ goto $label$13 }
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$9 }
	$4 = CALL $104($4)
	*(($12 + [24])) = $4
	*(($12 + [32])) = ($4 + ($3 << [4]))
	*(($3 = ($12 + [28]))) = $4
	$5 = *(($6 + [24]))
	$6 = (*(($6 + [28])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($4, $5, $6)
	*($3) = (*($3) + $6)
	$4 = *($12 + [24])
	
.LABEL $label$14
	*($0) = *($12 + [8])
	*(($0 + [8])) = *(($12 + [16]))
	if ( ($4 == 0) ){ goto $label$12 }
	*(($12 + [28])) = $4
	CALL $105($4)
	$3 = *($12 + [64])
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	*($0) = *($12 + [8])
	*(($0 + [8])) = *($5)
	
.LABEL $label$12
	$3 = *($12 + [64])
	if ( ($3 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$5 = (($12 + [40]) + [28])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$18 }
	$0 = *($4 + [24])
	if ( ($0 == 0) ){ goto $label$19 }
	*(($4 + [28])) = $0
	CALL $105($0)
	
.LABEL $label$19
	CALL $105($4)
	
.LABEL $label$18
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$17 }
	$6 = *(($12 + [64]))
	goto $label$15 
	
.LABEL $label$16
	$6 = $3
	
.LABEL $label$15
	*($5) = $3
	CALL $105($6)
	
.LABEL $label$10
	*([0] + [4]) = ($12 + [80])
	return (unreachable)
	
.LABEL $label$9
	CALL $115(($12 + [24]))
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $104(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $105($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $105($6)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$3 = CALL strlen([11680])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($3 << [1])
	$6 = ($7 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$6 = CALL $104($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($6, [11680], $3)
	
.LABEL $label$4
	*(($6 + $3)) = [0]
	*($7 + [12]) = [0]
	$3 = *($0 + [8])
	$6 = *($0)
	$5 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($6 & [1]) )
	$4 = CALL strtoull($3, ($7 + [12]), $2)
	$0 = CALL __errno_location()
	$6 = *($0)
	*($0) = $5
	if ( ((int_32)$6 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($7 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $105(*($7 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [16])
	return $4
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $110($7)
	
.LABEL $label$1
	CALL $111($7)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	*((($12 + [24]) + [32])) = [0]
	*($12 + [32]) = $2
	*($12 + [40]) = (int_64)-1
	*($12 + [48]) = (int_64)0
	*($12 + [24]) = *($0)
	*($12 + [23]) = [0]
	$10 = *($0 + [32])
	$6 = ($0 + [36])
	if ( ((int_32)*($6) == (int_32)$10) ){ goto $label$1 }
	$7 = ($12 + [52])
	$8 = ($12 + [32])
	$9 = ($0 + [32])
	$0 = [0]
	
.LOOP $label$2:
	$2 = *(($10 + ((int_32)$0 * (int_32)[24])) + [8])
	CALL eosio_assert(((int_64)*((*($1) + ($0 << [4])) + [8]) == (int_64)$2), [2640])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = *((($12 + [24]) + [24]))
	$11 = *($7)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$3 }
	$10 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)(uint_64)*(*($10) + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$3 }
	$11 = $10
	$0 = ($10 + [-24])
	$10 = $0
	if ( ((int_32)($0 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)($12 + [24])), [688])
	if ( $10 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$10 = CALL db_find_i64(*($12 + [24]), *($8), (int_64)4921564855807700992, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $48(($12 + [24]), $10)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)($12 + [24])), [688])
	
.LABEL $label$7
	*($12 + [8]) = $1
	*($12 + [12]) = ($12 + [23])
	CALL eosio_assert([1], [1280])
	CALL $79(($12 + [24]), $10, $3, ($12 + [8]))
	goto $label$5 
	
.LABEL $label$6
	*($12 + [8]) = $1
	*($12 + [12]) = ($12 + [23])
	CALL $78($12, ($12 + [24]), $3, ($12 + [8]))
	
.LABEL $label$5
	$10 = *($9)
	$11 = *($6)
	$0 = (*($12 + [23]) + [1])
	*($12 + [23]) = $0
	$0 = ($0 & [255])
	if ( ($0 <= ((int_32)($11 - $10) / (int_32)[24])) ){ goto $label$2 }
	$11 = *($12 + [48])
	if ( ($11 == 0) ){ goto $label$1 }
	$5 = ($12 + [52])
	$10 = *($5)
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$10 }
	
.LOOP $label$11:
	$10 = ($10 + [-24])
	$0 = *($10)
	*($10) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL $105($0)
	
.LABEL $label$12
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$11 }
	$10 = *(($12 + [48]))
	goto $label$9 
	
.LABEL $label$10
	$10 = $11
	
.LABEL $label$9
	*($5) = $11
	CALL $105($10)
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [176])
	*([0] + [4]) = $15
	$13 = [0]
	*($0 + [8]) = [0]
	$8 = (int_64)0
	*($0) = (int_64)0
	*($15 + [152]) = [0]
	*($15 + [144]) = (int_64)0
	CALL $28(($15 + [128]), $1, $3)
	CALL $27(($15 + [88]), $1, $3)
	$14 = *($1 + [32])
	$4 = ($1 + [36])
	if ( ((int_32)*($4) == (int_32)$14) ){ goto $label$1 }
	$9 = *($15 + [88])
	$6 = ($1 + [32])
	$11 = [0]
	
.LOOP $label$2:
	$12 = *(($14 + ((int_32)$13 * (int_32)[24])) + [8])
	$14 = *($15 + [128])
	if ( ((uint_32)int_32((*($15 + [132]) - $14) >> [4]) <= (uint_32)$13) ){ goto $label$4 }
	$13 = ($13 << [4])
	CALL eosio_assert(((int_64)*(($14 + $13) + [8]) == (int_64)$12), [2640])
	$7 = *((*($15 + [128]) + $13))
	goto $label$3 
	
.LABEL $label$4
	$7 = (int_64)0
	
.LABEL $label$3
	CALL __multi3(($15 + [16]), *($2), (int_64)0, $7, (int_64)0)
	CALL __udivti3($15, *($15 + [16]), *((($15 + [16]) + [8])), $9, (int_64)0)
	*(($5 = (($15 + [88]) + [8]))) = $12
	$12 = *($15)
	*($15 + [88]) = $12
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [752])
	$12 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$14 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$14 = [0]
	
.LABEL $label$5
	CALL eosio_assert($14, [816])
	*(($14 = (($15 + [32]) + [8]))) = *($5)
	*($15 + [32]) = *($15 + [88])
	CALL eosio_assert([1], [2688])
	$12 = *($15 + [32])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [2736])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [2768])
	*($15 + [32]) = (int_64))((int_64)0 - $12)
	$13 = *($15 + [148])
	if ( ((uint_32)$13 >= (uint_32)*((($15 + [144]) + [8]))) ){ goto $label$11 }
	*($13) = *($15 + [32])
	*(($13 + [8])) = *($14)
	*($15 + [148]) = ($13 + [16])
	goto $label$10 
	
.LABEL $label$11
	CALL $82(($15 + [144]), ($15 + [32]))
	
.LABEL $label$10
	$13 = ($0 + [4])
	$14 = *($13)
	if ( ((int_32)$14 == (int_32)*(($0 + [8]))) ){ goto $label$13 }
	*($14) = *($15 + [88])
	*(($14 + [8])) = *($5)
	*($13) = (*($13) + [16])
	goto $label$12 
	
.LABEL $label$13
	CALL $33($0, ($15 + [88]))
	
.LABEL $label$12
	$14 = *($6)
	$11 = ($11 + [1])
	$13 = ($11 & [255])
	if ( ($13 <= ((int_32)(*($4) - $14) / (int_32)[24])) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = *($1)
	$7 = (int_64)59
	$13 = [624]
	$9 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$19 }
	$14 = *($13)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$14 = ($14 + [165])
	goto $label$17 
	
.LABEL $label$19
	$12 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$13 = ($13 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$12 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$14 }
	*($15 + [80]) = $9
	*($15 + [72]) = $10
	$12 = (int_64)0
	$8 = (int_64)59
	$13 = [400]
	$9 = (int_64)0
	
.LOOP $label$20:
	$7 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$21 }
	$14 = *($13)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$14 = ($14 + [165])
	goto $label$22 
	
.LABEL $label$23
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($14 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$21
	$13 = ($13 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$20 }
	$12 = (int_64)0
	$8 = (int_64)59
	$13 = [2672]
	$10 = (int_64)0
	
.LOOP $label$24:
	$7 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$25 }
	$14 = *($13)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$14 = ($14 + [165])
	goto $label$26 
	
.LABEL $label$27
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($14 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$25
	$13 = ($13 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$10 = ((int_64)$7 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$24 }
	$8 = *($2 + [8])
	$12 = *($2)
	CALL eosio_assert([1], [2688])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [2736])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [2768])
	*(($15 + [48])) = $8
	*(($15 + [64])) = [0]
	*($15 + [32]) = $3
	*($15 + [56]) = (int_64)0
	*($15 + [40]) = (int_64))((int_64)0 - $12)
	$13 = (*($15 + [148]) - *($15 + [144]))
	$14 = int_32($13 >> [4])
	if ( ($14 == 0) ){ goto $label$29 }
	if ( ((uint_32)$14 >= (uint_32)[268435456]) ){ goto $label$28 }
	$13 = CALL $104($13)
	*(($15 + [56])) = $13
	*(($5 = ($15 + [60]))) = $13
	*(($15 + [64])) = ($13 + ($14 << [4]))
	$0 = *($15 + [144])
	$14 = (*($15 + [148]) - $0)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$29 }
	CALL memcpy($13, $0, $14)
	*($5) = (*($5) + $14)
	
.LABEL $label$29
	$13 = CALL $81(($15 + [88]), ($15 + [72]), $9, $10, ($15 + [32]))
	CALL $30(($15 + [160]), $13)
	$14 = *($15 + [160])
	CALL send_inline($14, (*($15 + [164]) - $14))
	$14 = *($15 + [160])
	if ( ($14 == 0) ){ goto $label$30 }
	*($15 + [164]) = $14
	CALL $105($14)
	
.LABEL $label$30
	$14 = *($13 + [28])
	if ( ($14 == 0) ){ goto $label$31 }
	*(($13 + [32])) = $14
	CALL $105($14)
	
.LABEL $label$31
	$14 = *($13 + [16])
	if ( ($14 == 0) ){ goto $label$32 }
	*(($13 + [20])) = $14
	CALL $105($14)
	
.LABEL $label$32
	$13 = *($15 + [56])
	if ( ($13 == 0) ){ goto $label$33 }
	*(($15 + [60])) = $13
	CALL $105($13)
	
.LABEL $label$33
	$13 = *($15 + [128])
	if ( ($13 == 0) ){ goto $label$34 }
	*($15 + [132]) = $13
	CALL $105($13)
	
.LABEL $label$34
	$13 = *($15 + [144])
	if ( ($13 == 0) ){ goto $label$35 }
	*($15 + [148]) = $13
	CALL $105($13)
	
.LABEL $label$35
	*([0] + [4]) = ($15 + [176])
	return (unreachable)
	
.LABEL $label$28
	CALL $115(($15 + [56]))
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_32 $23
	$23 = (*([0] + [4]) - [128])
	*([0] + [4]) = $23
	*((($23 + [40]) + [32])) = [0]
	*($23 + [48]) = $3
	*($23 + [56]) = (int_64)-1
	*($23 + [64]) = (int_64)0
	*($23 + [40]) = *($1)
	*($0) = [0]
	*($0 + [4]) = [0]
	*($0 + [8]) = [0]
	$19 = *($1 + [32])
	$8 = ($1 + [36])
	if ( ((int_32)*($8) == (int_32)$19) ){ goto $label$1 }
	$9 = (($23 + [40]) + [8])
	$11 = (($23 + [88]) + [16])
	$13 = (($23 + [88]) + [32])
	$15 = ($0 + [4])
	$16 = (($23 + [40]) + [28])
	$10 = [0]
	$7 = [0]
	$6 = [0]
	$17 = [0]
	
.LOOP $label$2:
	$19 = ($19 + ((int_32)$6 * (int_32)[24]))
	$18 = (uint_64)*($19) >> (uint_64)(int_64)8)
	$4 = *($19 + [8])
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$3 }
	$19 = ($7 + [-24])
	$5 = ([0] - $10)
	
.LOOP $label$4:
	if ( ((int_64)(uint_64)*(*($19) + [8]) >> (uint_64)(int_64)8) == (int_64)$18) ){ goto $label$3 }
	$7 = $19
	$6 = ($19 + [-24])
	$19 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$9 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($23 + [40])), [688])
	if ( $5 ){ goto $label$8 }
	$21 = (int_64)0
	$5 = [0]
	goto $label$6 
	
.LABEL $label$9
	$5 = [0]
	$19 = CALL db_find_i64(*($23 + [40]), *($9), (int_64)4921564855807700992, $18)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $48(($23 + [40]), $19)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($23 + [40])), [688])
	
.LABEL $label$8
	$21 = *($5)
	$22 = (int_64)0
	$20 = [0]
	goto $label$5 
	
.LABEL $label$7
	$21 = (int_64)0
	
.LABEL $label$6
	$20 = [1]
	$22 = (int_64)0
	
.LABEL $label$5
	$18 = *($1)
	*(($10 = (($23 + [88]) + [8]))) = $3
	*($11) = (int_64)-1
	*(($12 = (($23 + [88]) + [24]))) = (int_64)0
	*($13) = [0]
	*($23 + [88]) = $18
	$18 = *(CALL $51(($23 + [88]), (int_64)5522754, [1040]))
	$7 = *($12)
	if ( ($7 == 0) ){ goto $label$10 }
	$14 = (($23 + [88]) + [28])
	$19 = *($14)
	if ( ((int_32)$19 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$13:
	$19 = ($19 + [-24])
	$6 = *($19)
	*($19) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $105($6)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$19) ){ goto $label$13 }
	$19 = *($12)
	goto $label$11 
	
.LABEL $label$12
	$19 = $7
	
.LABEL $label$11
	*($14) = $7
	CALL $105($19)
	
.LABEL $label$10
	CALL __multi3(($23 + [24]), *($2), (int_64)0, $21, $22)
	CALL __udivti3(($23 + [8]), *($23 + [24]), *((($23 + [24]) + [8])), $18, (int_64)$18 >> (int_64)63))
	*($10) = $4
	$18 = *($23 + [8])
	*($23 + [88]) = $18
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [752])
	$18 = (uint_64)*($10) >> (uint_64)(int_64)8)
	$19 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$6 = [1]
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$20 }
	goto $label$17 
	
.LABEL $label$19
	CALL eosio_assert([0], [816])
	if ( ($20 == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$6 = [0]
	
.LABEL $label$17
	CALL eosio_assert($6, [816])
	if ( $20 ){ goto $label$15 }
	
.LABEL $label$16
	CALL eosio_assert(((int_64)*($10) == (int_64)*($5 + [8])), [1216])
	if ( ((int_64)*($23 + [88]) != (int_64)*($5)) ){ goto $label$23 }
	CALL eosio_assert([1], [2208])
	CALL eosio_assert([1], [2256])
	$19 = CALL db_next_i64(*($5 + [20]), ($23 + [80]))
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$24 }
	CALL $48(($23 + [40]), $19)
	
.LABEL $label$24
	CALL $83(($23 + [40]), $5)
	goto $label$15 
	
.LABEL $label$23
	*($23 + [80]) = ($23 + [88])
	CALL eosio_assert([1], [1280])
	CALL $84(($23 + [40]), $5, $3, ($23 + [80]))
	
.LABEL $label$15
	$19 = *($15)
	if ( ((int_32)$19 == (int_32)*(($0 + [8]))) ){ goto $label$26 }
	*($19) = *($23 + [88])
	*(($19 + [8])) = *($10)
	*($15) = (*($15) + [16])
	goto $label$25 
	
.LABEL $label$26
	CALL $33($0, ($23 + [88]))
	
.LABEL $label$25
	$19 = *(($1 + [32]))
	$17 = ($17 + [1])
	$6 = ($17 & [255])
	if ( ((uint_32)$6 >= (uint_32)((int_32)(*($8) - $19) / (int_32)[24])) ){ goto $label$27 }
	$10 = *((($23 + [40]) + [24]))
	$7 = *($16)
	goto $label$2 
	
.LABEL $label$27
	$7 = *($23 + [64])
	if ( ($7 == 0) ){ goto $label$1 }
	$5 = ($23 + [68])
	$19 = *($5)
	if ( ((int_32)$19 == (int_32)$7) ){ goto $label$29 }
	
.LOOP $label$30:
	$19 = ($19 + [-24])
	$6 = *($19)
	*($19) = [0]
	if ( ($6 == 0) ){ goto $label$31 }
	CALL $105($6)
	
.LABEL $label$31
	if ( ((int_32)$7 != (int_32)$19) ){ goto $label$30 }
	$19 = *(($23 + [64]))
	goto $label$28 
	
.LABEL $label$29
	$19 = $7
	
.LABEL $label$28
	*($5) = $7
	CALL $105($19)
	
.LABEL $label$1
	*([0] + [4]) = ($23 + [128])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [544])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $104([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [576])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [576])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $85(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $105($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 == (int_32)[53]), [2800])
	CALL $117($9, $2, [0], [3], $2)
	*(($9 + [40])) = [0]
	*($9 + [32]) = (int_64)0
	$6 = CALL strlen([2832])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($9 + [32]) = ($6 << [1])
	$7 = (($9 + [32]) | [1])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($6 + [16]) & [-16])
	$7 = CALL $104($5)
	*($9 + [32]) = ($5 | [1])
	*($9 + [40]) = $7
	*($9 + [36]) = $6
	
.LABEL $label$5
	CALL memcpy($7, [2832], $6)
	
.LABEL $label$4
	$8 = [0]
	*(($7 + $6)) = [0]
	$6 = ($6 & [1])
	$6 = *($9 + [32])
	$5 = ($6 & [1])
	$6 = *($9)
	$3 = uint_32($6 >> [1])
	$4 = ( *($9 + [4]) ? $3 : $5 )
	if ( ((int_32)$4 != (int_32)( *($9 + [36]) ? uint_32($6 >> [1]) : $6 )) ){ goto $label$7 }
	$6 = ( *($9 + [40]) ? (($9 + [32]) | [1]) : $6 )
	$7 = ($9 | [1])
	if ( $5 ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$9 }
	$5 = ([0] - $3)
	
.LOOP $label$11:
	if ( ((int_32)*($7) != (int_32)*($6)) ){ goto $label$8 }
	$8 = [1]
	$6 = ($6 + [1])
	$7 = ($7 + [1])
	$5 = ($5 + [1])
	if ( $5 ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$9 }
	$8 = (CALL memcmp(( *($9 + [8]) ? $7 : $5 ), $6, $4) == 0)
	goto $label$7 
	
.LABEL $label$9
	$8 = [1]
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [2848])
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $105(*($9 + [40]))
	
.LABEL $label$12
	if ( ((*($9) & [1]) == 0) ){ goto $label$13 }
	CALL $105(*($9 + [8]))
	
.LABEL $label$13
	CALL $117($9, $2, [3], [-1], $2)
	if ( (*($2) & [1]) ){ goto $label$15 }
	*($2) = [0]
	goto $label$14 
	
.LABEL $label$15
	*(*($2 + [8])) = [0]
	*($2 + [4]) = [0]
	
.LABEL $label$14
	CALL $107($2, [0])
	*($2) = *($9)
	$6 = *(($9 + [8]))
	*(($2 + [8])) = $6
	$7 = *($2)
	*($9 + [40]) = [0]
	*($9 + [32]) = (int_64)0
	CALL eosio_assert(CALL $5(( $6 ? ($2 + [1]) : ($7 & [1]) ), ($9 + [32])), [2880])
	CALL eosio_assert(((int_32)(*($9 + [36]) - *($9 + [32])) == (int_32)[37]), [2912])
	$2 = *($9 + [32])
	*($0) = *($2)
	*($0 + [1]) = *($2 + [1])
	*($0 + [2]) = *($2 + [2])
	*($0 + [3]) = *($2 + [3])
	*($0 + [4]) = *($2 + [4])
	*($0 + [5]) = *($2 + [5])
	*($0 + [6]) = *($2 + [6])
	*($0 + [7]) = *($2 + [7])
	*($0 + [8]) = *($2 + [8])
	*($0 + [9]) = *($2 + [9])
	*($0 + [10]) = *($2 + [10])
	*($0 + [11]) = *($2 + [11])
	*($0 + [12]) = *($2 + [12])
	*($0 + [13]) = *($2 + [13])
	*($0 + [14]) = *($2 + [14])
	*($0 + [15]) = *($2 + [15])
	*($0 + [16]) = *($2 + [16])
	*($0 + [17]) = *($2 + [17])
	*($0 + [18]) = *($2 + [18])
	*($0 + [19]) = *($2 + [19])
	*($0 + [20]) = *($2 + [20])
	*($0 + [21]) = *($2 + [21])
	*($0 + [22]) = *($2 + [22])
	*($0 + [23]) = *($2 + [23])
	*($0 + [24]) = *($2 + [24])
	*($0 + [25]) = *($2 + [25])
	*($0 + [26]) = *($2 + [26])
	*($0 + [27]) = *($2 + [27])
	*($0 + [28]) = *($2 + [28])
	*($0 + [29]) = *($2 + [29])
	*($0 + [30]) = *($2 + [30])
	*($0 + [31]) = *($2 + [31])
	*($0 + [32]) = *($2 + [32])
	CALL ripemd160($0, [33], $9)
	CALL eosio_assert((CALL $160($9, (*($9 + [36]) + [-4]), [4]) == 0), [2944])
	$0 = *($9 + [32])
	if ( ($0 == 0) ){ goto $label$16 }
	*($9 + [36]) = $0
	CALL $105($0)
	
.LABEL $label$16
	*([0] + [4]) = ($9 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $106(($9 + [32]))
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$9 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [624]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($10 + [48]) = $7
	*($10 + [40]) = $9
	$6 = (int_64)0
	$8 = (int_64)59
	$0 = [400]
	$7 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$8 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$4 = ($4 + [165])
	goto $label$9 
	
.LABEL $label$10
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	$6 = (int_64)0
	$8 = (int_64)59
	$0 = [2672]
	$9 = (int_64)0
	
.LOOP $label$11:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$12 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$4 = ($4 + [165])
	goto $label$13 
	
.LABEL $label$14
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$12
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$5 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$11 }
	*(($10 + [20])) = *(($2 + [12]))
	*(($10 + [16])) = *(($2 + [8]))
	*(($10 + [12])) = *(($2 + [4]))
	*($10) = $3
	*($10 + [8]) = *($2)
	*($10 + [24]) = [0]
	*(($10 + [28])) = [0]
	*(($10 + [32])) = [0]
	$0 = (*($1 + [4]) - *($1))
	$4 = int_32($0 >> [4])
	if ( ($4 == 0) ){ goto $label$16 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$15 }
	$0 = CALL $104($0)
	*(($10 + [24])) = $0
	*(($2 = ($10 + [28]))) = $0
	*(($10 + [32])) = ($0 + ($4 << [4]))
	$1 = *($1)
	$4 = (*(($1 + [4])) - $1)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($0, $1, $4)
	*($2) = ($0 + $4)
	
.LABEL $label$16
	$0 = CALL $81(($10 + [56]), ($10 + [40]), $7, $9, $10)
	CALL $30(($10 + [96]), $0)
	$4 = *($10 + [96])
	CALL send_inline($4, (*($10 + [100]) - $4))
	$4 = *($10 + [96])
	if ( ($4 == 0) ){ goto $label$17 }
	*($10 + [100]) = $4
	CALL $105($4)
	
.LABEL $label$17
	$4 = *($0 + [28])
	if ( ($4 == 0) ){ goto $label$18 }
	*(($0 + [32])) = $4
	CALL $105($4)
	
.LABEL $label$18
	$4 = *($0 + [16])
	if ( ($4 == 0) ){ goto $label$19 }
	*(($0 + [20])) = $4
	CALL $105($4)
	
.LABEL $label$19
	$0 = *($10 + [24])
	if ( ($0 == 0) ){ goto $label$20 }
	*(($10 + [28])) = $0
	CALL $105($0)
	
.LABEL $label$20
	*([0] + [4]) = ($10 + [112])
	return (unreachable)
	
.LABEL $label$15
	CALL $115(($10 + [24]))
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1072])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $34($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [576])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $61($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $107($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $104($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $107($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $105($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $106($7)
	return (unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1440]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1456]
	$6 = (int_64)0
	
.LOOP $label$7:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$8 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$2 = ($2 + [165])
	goto $label$9 
	
.LABEL $label$10
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$8
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$7 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1472]
	$6 = (int_64)0
	
.LOOP $label$11:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$12 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$2 = ($2 + [165])
	goto $label$13 
	
.LABEL $label$14
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$12
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$11 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1488]
	$6 = (int_64)0
	
.LOOP $label$15:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$16 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$2 = ($2 + [165])
	goto $label$17 
	
.LABEL $label$18
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$16
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$15 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1504]
	$6 = (int_64)0
	
.LOOP $label$19:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$20 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$2 = ($2 + [165])
	goto $label$21 
	
.LABEL $label$22
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$20
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$19 }
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	return [1]
	
.LABEL $label$5
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1520]
	$6 = (int_64)0
	
.LOOP $label$23:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$24 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$2 = ($2 + [165])
	goto $label$25 
	
.LABEL $label$26
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$24
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$23 }
	return ((int_64)$6 == (int_64)$1)
}

int_32 .FUNC $62 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [688])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $86($0, $5)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [688])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $102($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11584])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $101([3176], $0)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11560])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11368]
	$1 = (((int_32)$2 * (int_32)[12]) + [11368])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $102 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11670]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11672])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11670]) = [1]
	$7 = ($7 << [16])
	*([0] + [11672]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11672])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11672]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11670]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11670]) = [1]
	$3 = ($3 << [16])
	*([0] + [11672]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11672])
	
.LABEL $label$8
	*([0] + [11672]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $105 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $104 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11676])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $104(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $105($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $105($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $87 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [752])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [816])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [752])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [816])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $104([56])
	CALL $87($6)
	*($6 + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [16])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [32])
	CALL $88(($8 + [32]), ($8 + [24]))
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [32]) = $5)
	$7 = *($6 + [44])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $89(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $105($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $104(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $105($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $105($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [1744])
	$4 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$4), [848])
	$5 = (int_64)
	*($1) = $5(*($1) - *($3)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [896])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [928])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [1808])
	CALL eosio_assert([1], [528])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $6, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [2464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [2512])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [8])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( (uint_64)(((int_64)*(*($8) + [8]) ^ (int_64)$2) <= (int_64)256) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2576])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $105($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $105($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $104(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $115($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $105($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($10 = ($0 + [24]))) = [0]
	$9 = CALL $104([16])
	*($0 + [16]) = $9
	*(($6 = ($0 + [20]))) = $9
	$7 = ($9 + [16])
	*($10) = $7
	*(($9 + [8])) = *(($1 + [8]))
	*($9) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$6 = ($4 + [24])
	$5 = ($0 + [28])
	$7 = *($4 + [24])
	$1 = *(($4 + [28]))
	$8 = ($1 - $7)
	$2 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	$9 = [-24]
	
.LOOP $label$1:
	$9 = ($9 + [-1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	$10 = [0]
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$4 }
	$1 = [0]
	$7 = ($8 & [-16])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$2 }
	$9 = ($7 - $9)
	goto $label$3 
	
.LABEL $label$4
	$9 = ([0] - $9)
	
.LABEL $label$3
	CALL $34($5, $9)
	$10 = *(($0 + [32]))
	$1 = *(($0 + [28]))
	
.LABEL $label$2
	*($11) = $1
	*($11 + [8]) = $10
	CALL eosio_assert(((int_32)($10 - $1) > (int_32)[7]), [528])
	CALL memcpy($1, $4, [8])
	$9 = ($1 + [8])
	CALL eosio_assert(((int_32)($10 - $9) > (int_32)[7]), [528])
	CALL memcpy($9, ($4 + [8]), [8])
	$9 = ($1 + [16])
	CALL eosio_assert(((int_32)($10 - $9) > (int_32)[7]), [528])
	CALL memcpy($9, ($4 + [16]), [8])
	*($11 + [4]) = ($1 + [24])
	CALL $41($11, $6)
	*([0] + [4]) = ($11 + [16])
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [16]) = $1
	$4 = *($2)
	$5 = *($2 + [4])
	$1 = (*(*($5)) + (*(*($5 + [4])) << [4]))
	*($0) = *($1)
	*(($5 = ($0 + [8]))) = *(($1 + [8]))
	CALL eosio_assert([1], [528])
	CALL memcpy($6, $0, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 | [8]), $5, [8])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)4921564855807700992, *(*($2 + [8])), $3), $6, [16])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
	return $0
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $72 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$5 = *($0)
	*($7 + [24]) = $5
	*($7 + [32]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $52(($7 + [24]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($7 + [24])), [688])
	*($7 + [8]) = $2
	CALL eosio_assert([1], [1280])
	CALL $73(($7 + [24]), $0, $3, ($7 + [8]))
	$4 = *($7 + [48])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($7 + [16]) = $2
	CALL $74(($7 + [8]), ($7 + [24]), $3, ($7 + [16]))
	$4 = *($7 + [48])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [52])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $105($0)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($7 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $4
	
.LABEL $label$4
	*($6) = $4
	CALL $105($2)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [1744])
	$4 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$4), [2288])
	$5 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [2336])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [2368])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [1808])
	CALL eosio_assert([1], [528])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $6, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [2464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [2512])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2576])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $105($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $105($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $71 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [40])) = [0]
	*($6 + [16]) = $1
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	*($6 + [8]) = *($0)
	$4 = *($2)
	$0 = CALL $51(($6 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [2400]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$4), [2432])
	if ( ((int_64)$4 != (int_64)*($0)) ){ goto $label$3 }
	CALL $76(($6 + [8]), $0)
	$3 = *($6 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($6) = $2
	CALL $77(($6 + [8]), $0, $1, $6)
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $105($0)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($6 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL $105($2)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [2464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [2512])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [8])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( (uint_64)(((int_64)*(*($8) + [8]) ^ (int_64)$2) <= (int_64)256) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2576])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $105($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $105($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [1744])
	$4 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$4), [848])
	$5 = (int_64)
	*($1) = $5(*($1) - *($3)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [896])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [928])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [1808])
	CALL eosio_assert([1], [528])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $6, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$17()), [464])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $104([32])
	CALL $75($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($7 + [16]) = $2)
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $54(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $105($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [528])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [528])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$17()), [464])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $104([32])
	CALL $80($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($7 + [16]) = $2)
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $56(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $105($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [1744])
	$4 = *($1 + [8])
	$3 = (*(*($3)) + (*(*($3 + [4])) << [4]))
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$4), [2288])
	$5 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [2336])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [2368])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [1808])
	CALL eosio_assert([1], [528])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $6, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $104([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $34($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $35(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $104(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $115($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $105($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $34($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [528])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [528])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $40(CALL $39($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $104([32])
	$6 = CALL $37($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $38(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $105($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC __stdio_close (int_32 $0)
{
	return [0]
}

void .FUNC __unlock (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}