(data (i32.const 8192) "eosio.stake\00")
(data (i32.const 8204) "Invalid transfer amount.\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8315) "Transfer amount not positive\00")
(data (i32.const 8344) "Memo is required\00")
(data (i32.const 8361) "transfer\00")
(data (i32.const 8370) "Contract not allowed\00")
(data (i32.const 8391) "active\00")
(data (i32.const 8398) "eosio.token\00")
(data (i32.const 8410) "eosio\00")
(data (i32.const 8416) "onerror\00")
(data (i32.const 8424) "must be an eos account\00")
(data (i32.const 8447) "EOS\00")
(data (i32.const 8451) "init\00")
(data (i32.const 8456) "game is not active\00")
(data (i32.const 8475) "user name can not be empty\00")
(data (i32.const 8502) "invalid player account\00")
(data (i32.const 8525) "target can not be empty\00")
(data (i32.const 8549) "deposit\00")
(data (i32.const 8557) "param missing\00")
(data (i32.const 8571) "invalid action\00")
(data (i32.const 8586) "Game does not exist\00")
(data (i32.const 8606) "Token not supported\00")
(data (i32.const 8626) "bairenniuniu\00")
(data (i32.const 8639) "Dapp365 Referral Bonus\00")
(data (i32.const 8662) "Unpaid record does not exist\00")
(data (i32.const 8691) "Dapp365 settle payment\00")
(data (i32.const 8714) "Invalid Player Name\00")
(data (i32.const 8736) "\n\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00d\00\00\00\00\00\00\00d\00\00\00\00\00\00\00\f4\01\00\00\00\00\00\00,\01\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\f4\01\00\00\00\00\00\00\d0\07\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\88\13\00\00\00\00\00\00\b8\0b\00\00\00\00\00\00\10\'\00\00\00\00\00\00\88\13\00\00\00\00\00\00\a0\86\01\00\00\00\00\00\10\'\00\00\00\00\00\00\f4\01\00\00\00\00\00\00d\00\00\00\00\00\00\00\88\13\00\00\00\00\00\00\f4\01\00\00\00\00\00\00\10\'\00\00\00\00\00\00\e8\03\00\00\00\00\00\00 N\00\00\00\00\00\00\88\13\00\00\00\00\00\00\a0\86\01\00\00\00\00\00 N\00\00\00\00\00\00")
(data (i32.const 8944) "Player does not exist\00")
(data (i32.const 8966) "reward already claimed\00")
(data (i32.const 8989) "Invalid Chest type\00")
(data (i32.const 9008) "Nothis.timer = setInterval(() => this.getRealTimeMarket(), 1000);t enough bonus point\00")
(data (i32.const 9094) "Reward already claimed\00")
(data (i32.const 9117) "Dapp365 Chest Reward\00")
(data (i32.const 9138) "string is too long to be a valid name\00")
(data (i32.const 9176) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9243) "character is not in allowed character set for names\00")
(data (i32.const 9295) "get_action size failed\00")
(data (i32.const 9318) "get_action failed\00")
(data (i32.const 9336) "get\00")
(data (i32.const 9340) "read\00")
(data (i32.const 9345) "write\00")
(data (i32.const 9351) "string is too long to be a valid symbol_code\00")
(data (i32.const 9396) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9449) "multiplication overflow\00")
(data (i32.const 9473) "multiplication underflow\00")
(data (i32.const 9498) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9547) "invalid symbol name\00")
(data (i32.const 9567) "divide by zero\00")
(data (i32.const 9582) "signed division overflow\00")
(data (i32.const 9607) "attempt to add asset with different symbol\00")
(data (i32.const 9650) "addition underflow\00")
(data (i32.const 9669) "addition overflow\00")
(data (i32.const 9687) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9738) "error reading iterator\00")
(data (i32.const 9761) "cannot create objects in table of another contract\00")
(data (i32.const 9812) "cannot pass end iterator to modify\00")
(data (i32.const 9847) "object passed to modify is not in multi_index\00")
(data (i32.const 9893) "cannot modify objects in table of another contract\00")
(data (i32.const 9944) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10003) "item does not exist\00")
(data (i32.const 10023) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10075) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10129) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10177) "cannot pass end iterator to erase\00")
(data (i32.const 10211) "cannot increment end iterator\00")
(data (i32.const 10241) "object passed to erase is not in multi_index\00")
(data (i32.const 10286) "cannot erase objects in table of another contract\00")
(data (i32.const 10336) "attempt to remove object that was not in multi_index\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "get_action" (func $fimport$2 (param i32 i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "send_deferred" (func $fimport$5 (param i32 i64 i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$9 (result i64)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "is_account" (func $fimport$11 (param i64) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$12 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$13 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$15 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "__multi3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "db_lowerbound_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "tapos_block_num" (func $fimport$19 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$20 (result i32)))
(import "env" "sha256" (func $fimport$21 (param i32 i32 i32)))
(import "env" "assert_recover_key" (func $fimport$22 (param i32 i32 i32 i32 i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "db_get_i64" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$25 (param i32 i32)))
(import "env" "db_previous_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$27 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "memset" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$30 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$31 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$42 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$43 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$46 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$48 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$49 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$50 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $8))
(export "_ZdlPv" (func $74))
(export "_Znwj" (func $72))
(export "_Znaj" (func $73))
(export "_ZdaPv" (func $75))
(export "_ZnwjSt11align_val_t" (func $76))
(export "_ZnajSt11align_val_t" (func $77))
(export "_ZdlPvSt11align_val_t" (func $78))
(export "_ZdaPvSt11align_val_t" (func $79))
(table $0 13 13 anyfunc)
(elem (i32.const 1) $9 $11 $13 $15 $17 $19 $21 $23 $25 $27 $29 $30)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18808))
(global $global$2 i32 (i32.const 18808))


int_32 .FUNC $94 (int_32 $0)
{
	return CALL $95([10412], $0)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $96($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8229])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10404]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10408])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10404]) = [1]
	$2 = ($2 << [16])
	*([0] + [10408]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10408])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10408]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10404]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10404]) = [1]
	$3 = ($3 << [16])
	*([0] + [10408]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10408])
	
.LABEL $label$10
	*([0] + [10408]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18796])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18604]
	$3 = (((int_32)$1 * (int_32)[12]) + [18604])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $87())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $93($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $94($1)
	
.LABEL $label$2
	*(CALL $87()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $94(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $97($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-3104555588802052096, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $53($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $69(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [10023])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	$6 = *($5 + [12])
	*($1 + [24]) = *($6)
	*(($1 + [32])) = *(($6 + [8]))
	$6 = *($5 + [16])
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	*($1 + [56]) = *(*($5 + [20]))
	$6 = $2
	$5 = ($6 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = $6
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [40])
	*($3 + [44]) = ($1 + [56])
	CALL $70(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-3104555588802052096, *(*($0 + [8])), $7, $5, [64])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($4 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($4 + [40]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$6 = ($2 + [16])
	*($3) = $6
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $6
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($7 + [40])
	$2 = *($0)
	$11 = *(($0 + [4]))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $11)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($11 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$6 = ($8 + [-24])
	*($5) = *($6)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($6) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = CALL $91([8447])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9351])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8446]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9396])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)4
	
.LABEL $label$1
	*($1) = $6
	*($3 + [8]) = [8398]
	*($3 + [12]) = CALL $91([8398])
	*($3) = *($3 + [8])
	*($1 + [8]) = *(CALL $2(($3 + [32]), $3))
	*($1 + [48]) = (int_64)2000000
	*($1 + [40]) = (int_64)1000
	*($1 + [56]) = (int_64)0
	$7 = $2
	$5 = ($7 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $7
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = ($1 + [32])
	*($3 + [52]) = ($1 + [40])
	*($3 + [56]) = ($1 + [48])
	*($3 + [60]) = ($1 + [56])
	CALL $35(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-3665743317141815296, *(*($0 + [8])), $6, $5, [64])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$7 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$global$0 = ($3 + [64])
}

void .FUNC $47 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $55($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $66(($4 + [72]), ($4 + [64]))
	CALL $67(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $86(($4 + [8]))
}

int_32 .FUNC $46 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(($6 + [20])) == (int_32)$0), [9687])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035924439720001536, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $33($0, $4)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$0), [9687])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [160])
	$global$0 = $2
	*(($3 = (($2 + [64]) + [8]))) = *(($1 + [24]))
	*(($4 = (($2 + [48]) + [8]))) = *(($1 + [40]))
	*($2 + [64]) = *($1 + [16])
	*($2 + [48]) = *($1 + [32])
	$5 = *($1 + [8])
	$6 = *($1)
	$7 = CALL $81(($2 + [32]), ($1 + [48]))
	$8 = *($1 + [64])
	*((($2 + [96]) + [8])) = *($4)
	*((($2 + [80]) + [8])) = *($3)
	*($2 + [96]) = *($2 + [48])
	*($2 + [80]) = *($2 + [64])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($2 + [144]) + [8]))) = *((($2 + [80]) + [8]))
	*(($9 = (($2 + [128]) + [8]))) = *((($2 + [96]) + [8]))
	*($2 + [144]) = *($2 + [80])
	*($2 + [128]) = *($2 + [96])
	$3 = CALL $81(($2 + [112]), $7)
	*((($2 + [16]) + [8])) = *($4)
	*(($2 + [8])) = *($9)
	*($2 + [16]) = *($2 + [144])
	*($2) = *($2 + [128])
	CALL void $0((int_32 $6), (int_64 $5), (int_64 ($2 + [16])), (int_32 $2), (int_32 $3), (int_32 $8), (int_64 $1))
	if ( (*($2 + [112]) & [1]) ){ goto $label$4 }
	if ( (*($7) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($7 + [8]))
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [160])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9340])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9340])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [40])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $64(*($1), ($0 + [48]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($0 + [64]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [320])
	$global$0 = $3
	CALL memory()
	[0]
	[0]
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	*($3 + [304]) = [8361]
	*($3 + [308]) = CALL $91([8361])
	*($3 + [136]) = *($3 + [304])
	CALL $2(($3 + [312]), ($3 + [136]))
	[1]
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	
.LABEL $label$3
	*($3 + [288]) = [8398]
	*($3 + [292]) = CALL $91([8398])
	*($3 + [128]) = *($3 + [288])
	CALL $2(($3 + [296]), ($3 + [128]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$6 }
	*($3 + [272]) = [8361]
	*($3 + [276]) = CALL $91([8361])
	*($3 + [120]) = *($3 + [272])
	CALL $2(($3 + [280]), ($3 + [120]))
	[1]
	$4 = [1]
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	
.LABEL $label$6
	*($3 + [256]) = [8410]
	*($3 + [260]) = CALL $91([8410])
	*($3 + [112]) = *($3 + [256])
	CALL $2(($3 + [264]), ($3 + [112]))
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$4 }
	*($3 + [240]) = [8416]
	*($3 + [244]) = CALL $91([8416])
	*($3 + [104]) = *($3 + [240])
	$4 = ((int_64)$2 == (int_64)-6569208335818555392)
	CALL $2(($3 + [248]), ($3 + [104]))
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	if ( ([0] == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$17 }
	if ( ((int_64)$2 > (int_64)-4417060034159607809) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)-6533258280703623168) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-6216093385678127104) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-4417357895863107584) ){ goto $label$1 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [1]
	*($3 + [48]) = *($3 + [192])
	CALL $10($0, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$17
	if ( ((int_64)$2 > (int_64)3626175369360441343) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-3075276120177606656) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-3075276112964442624) ){ goto $label$1 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [2]
	*($3 + [24]) = *($3 + [216])
	CALL $12($0, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)-4417060034159607808) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4417057971921108992) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-4417018947909870448) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [3]
	*($3 + [96]) = *($3 + [144])
	CALL $14($0, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)3626175369360441344) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4921565079997370880) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4923678930630918144) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [4]
	*($3 + [64]) = *($3 + [176])
	CALL $16($0, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [156]) = [0]
	*($3 + [152]) = [5]
	*($3 + [88]) = *($3 + [152])
	CALL $18($0, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$13
	*($3 + [204]) = [0]
	*($3 + [200]) = [6]
	*($3 + [40]) = *($3 + [200])
	CALL $20($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [236]) = [0]
	*($3 + [232]) = [7]
	*($3 + [8]) = *($3 + [232])
	CALL $22($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [212]) = [0]
	*($3 + [208]) = [8]
	*($3 + [32]) = *($3 + [208])
	CALL $24($0, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [188]) = [0]
	*($3 + [184]) = [9]
	*($3 + [56]) = *($3 + [184])
	CALL $26($0, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [164]) = [0]
	*($3 + [160]) = [10]
	*($3 + [80]) = *($3 + [160])
	CALL $28($0, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [228]) = [0]
	*($3 + [224]) = [11]
	*($3 + [16]) = *($3 + [224])
	CALL $24($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [172]) = [0]
	*($3 + [168]) = [12]
	*($3 + [72]) = *($3 + [168])
	CALL $18($0, $1, ($3 + [72]))
	
.LABEL $label$1
	CALL $88([0])
	$global$0 = ($3 + [320])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)7035924439720001536, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $33(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($3 + [8])), [9687])
	
.LABEL $label$1
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [10003])
	$1 = *($0)
	CALL eosio_assert($6, [9812])
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($3 + [8])), [9847])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$9()), [9893])
	*($5 + [16]) = $2
	$0 = ($5 + [8])
	*($3 + [72]) = *($0)
	$4 = *($5)
	CALL eosio_assert([1], [9944])
	CALL eosio_assert([1], [9345])
	CALL memcpy(($3 + [48]), $5, [8])
	CALL eosio_assert([1], [9345])
	CALL memcpy((($3 + [48]) | [8]), $0, [8])
	*($3 + [88]) = *($5 + [16])
	CALL eosio_assert([1], [9345])
	CALL memcpy((($3 + [48]) + [16]), ($3 + [88]), [1])
	CALL db_update_i64(*($5 + [24]), $1, ($3 + [48]), [17])
	$2 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($2)) ){ goto $label$2 }
	*($2) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($3 + [88]) = *($0)
	if ( (CALL $90(($3 + [72]), ($3 + [88]), [8]) == 0) ){ goto $label$3 }
	$0 = *($5 + [28])
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($3 + [8]), *(($3 + [16])), (int_64)7035924439720001536, ($3 + [80]), $4)
	*(($5 + [28])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, $1, ($3 + [88]))
	
.LABEL $label$3
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	$6 = ($3 + [36])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($3 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $2
	
.LABEL $label$6
	*($6) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($3 + [96])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $57($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $55($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $58($2, $1)
	CALL $60(CALL $59(CALL $59($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9336])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $56($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9340])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9336])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $55($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9340])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9138])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9243])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9176])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9243])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	$5 = CALL get_action($1, $2, [0], [0])
	CALL eosio_assert(((int_32)$5 > (int_32)[0]), [9295])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$3 = CALL $94($5)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 == (int_32)CALL $fimport$2($1, $2, $3, $5)), [9318])
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*($4 + [8]) = ($3 + $5)
	*($4) = $3
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9340])
	CALL memcpy($0, $3, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9340])
	CALL memcpy(($0 + [8]), ($3 + [8]), [8])
	*($4 + [4]) = ($3 + [16])
	CALL $5(CALL $4($4, ($0 + [16])), ($0 + [28]))
	$global$0 = ($4 + [16])
}

void .FUNC memory ()
{
}

int_32 .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$6 = ($global$0 - [80])
	$global$0 = $6
	$7 = [0]
	$8 = *($0)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$1 }
	*($6 + [72]) = [8192]
	*($6 + [76]) = CALL $91([8192])
	*($6 + [8]) = *($6 + [72])
	if ( ((int_64)*(CALL $2(($6 + [32]), ($6 + [8]))) == (int_64)$1) ){ goto $label$1 }
	CALL require_auth($1)
	$0 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $8
	$0 = [1]
	$3 = $7
	$7 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $8
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$0 = ((int_32)$7 < (int_32)[6])
	$3 = ($7 + [1])
	$7 = $3
	if ( $0 ){ goto $label$6 }
	$0 = [1]
	$7 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$0 = [0]
	
.LABEL $label$2
	CALL eosio_assert($0, [8204])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8315])
	$7 = [1]
	$0 = *($4)
	CALL eosio_assert(((int_32)( *($4 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) ) != (int_32)[0]), [8344])
	if ( ($5 == 0) ){ goto $label$1 }
	$7 = [0]
	CALL $3(($6 + [32]), [1], [0])
	*($6 + [16]) = [8361]
	*($6 + [20]) = CALL $91([8361])
	*($6) = *($6 + [16])
	$0 = CALL $2(($6 + [24]), $6)
	if ( ((int_64)*($6 + [40]) != (int_64)*($0)) ){ goto $label$7 }
	$7 = ((int_64)*(*($6 + [48])) == (int_64)$1)
	
.LABEL $label$7
	CALL eosio_assert($7, [8370])
	$7 = *($6 + [60])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($6 + [64])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($6 + [48])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($6 + [52])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = [1]
	
.LABEL $label$1
	$global$0 = ($6 + [80])
	return $7
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9340])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [9340])
	CALL memcpy($4, ($2 + [8]), [1])
	$8 = *($4)
	*($4 + [40]) = ((int_32)$8 != (int_32)[0])
	*(($4 + [20])) = ($2 + [9])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ((int_32)$8 != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $97($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $1
	*($2 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($3, $1, (int_64)-3665743317141815296, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $34($2, $0)
	
.LOOP $label$2:
	$3 = *($4)
	$0 = CALL $91([8447])
	if ( ($0 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [9351])
	goto $label$6 
	
.LABEL $label$7
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$1 = (int_64)0
	
.LOOP $label$8:
	$5 = *(($0 + [8446]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [9396])
	
.LABEL $label$9
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$8 }
	if ( (uint_64)(((int_64)((int_64)$1 << (int_64)8) ^ (int_64)$3) <= (int_64)256) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_64)((int_64)0 ^ (int_64)$3) >= (uint_64)(int_64)256) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([1], [10211])
	$0 = *($4 + [68])
	$4 = [0]
	$0 = CALL db_next_i64($0, ($2 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$10 }
	$4 = CALL $34($2, $0)
	
.LABEL $label$10
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = [0]
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [10177])
	CALL eosio_assert($5, [10211])
	$5 = CALL db_next_i64(*($4 + [68]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$0 = CALL $34($2, $5)
	
.LABEL $label$11
	CALL $52($2, $4)
	$4 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = *($2 + [24])
	if ( ($4 == 0) ){ goto $label$12 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($2 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $4
	
.LABEL $label$13
	*($6) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$global$0 = ($2 + [48])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9340])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $97($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [464])
	$global$0 = $3
	CALL require_auth($1)
	CALL eosio_assert(($2 <= [5]), [8989])
	$4 = ($2 << [4])
	$5 = *(($4 + [8872]))
	$6 = *(($4 + [8864]))
	$4 = CALL $91([8447])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9351])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($4 + [8446]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9396])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	$10 = ([1] << $2)
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9498])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $11
	$8 = [1]
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $11
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [9547])
	*((($3 + [216]) + [32])) = [0]
	*($3 + [232]) = (int_64)-1
	*($3 + [240]) = (int_64)0
	*($3 + [252]) = [0]
	$7 = *($0)
	*($3 + [216]) = $7
	*($3 + [224]) = $7
	$4 = [0]
	$8 = CALL db_find_i64($7, $7, (int_64)-6030912129153084416, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$4 = CALL $36(($3 + [216]), $8)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [216])), [9687])
	
.LABEL $label$12
	$2 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($2, [8944])
	CALL eosio_assert(((uint_64)*($4 + [72]) >= (uint_64)$5), [9008])
	CALL eosio_assert(((*($4 + [68]) & $10) == 0), [9094])
	*($3 + [264]) = $1
	*($3 + [256]) = (int_64)0
	*($3 + [272]) = CALL tapos_block_num()
	*($3 + [276]) = CALL tapos_block_prefix()
	CALL sha256(($3 + [256]), [24], ($3 + [112]))
	$7 = *((($3 + [112]) + [24]))
	*(($12 = (($3 + [256]) + [24]))) = $7
	$11 = *((($3 + [112]) + [16]))
	*(($13 = (($3 + [256]) + [16]))) = $11
	$5 = *($3 + [120])
	*(($8 = (($3 + [144]) + [40]))) = $5
	*(($14 = (($3 + [144]) + [48]))) = $11
	*(($15 = (($3 + [144]) + [56]))) = $7
	*(($16 = (($3 + [144]) + [16]))) = $11
	*(($17 = (($3 + [144]) + [24]))) = $7
	*($3 + [264]) = $5
	$7 = *($3 + [112])
	*($3 + [176]) = $7
	*($3 + [256]) = $7
	*($3 + [144]) = $7
	*($3 + [152]) = $5
	*($12) = *($17)
	*($13) = *($16)
	*((($3 + [256]) + [40])) = *($8)
	*((($3 + [256]) + [48])) = *($14)
	*((($3 + [256]) + [56])) = *($15)
	*($3 + [264]) = *($3 + [152])
	*($3 + [256]) = *($3 + [144])
	*($3 + [288]) = *($3 + [176])
	CALL sha256(($3 + [256]), [64], (($3 + [144]) + [32]))
	CALL __multi3(($3 + [16]), ((uint_64)*($8) % (uint_64)(int_64)101), (int_64)0, $6, (int_64)$6 >> (int_64)63))
	$7 = *((($3 + [16]) + [8]))
	$11 = *($3 + [16])
	CALL eosio_assert(( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9449])
	CALL eosio_assert(( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9473])
	CALL eosio_assert([1], [9567])
	CALL eosio_assert([1], [9582])
	CALL eosio_assert([1], [9607])
	$7 = ((int_64)((int_64)$11 / (int_64)100) + (int_64)$6)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9650])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9669])
	$6 = *($0)
	CALL eosio_assert($2, [9812])
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($3 + [216])), [9847])
	CALL eosio_assert(((int_64)*($3 + [216]) == (int_64)CALL $fimport$9()), [9893])
	*($4 + [16]) = ((int_64)*($4 + [16]) + (int_64)$7)
	*($4 + [80]) = ((int_64)*($4 + [80]) + (int_64)$7)
	*($4 + [68]) = (*($4 + [68]) | $10)
	$8 = ($4 + [40])
	*($3 + [384]) = *($8)
	$11 = *($4)
	CALL eosio_assert([1], [9944])
	*($3 + [376]) = (($3 + [256]) + [108])
	*($3 + [372]) = ($3 + [256])
	*($3 + [368]) = ($3 + [256])
	*($3 + [392]) = ($3 + [368])
	*($3 + [404]) = ($4 + [8])
	*($3 + [400]) = $4
	*($3 + [408]) = ($4 + [16])
	*($3 + [412]) = ($4 + [24])
	*($3 + [416]) = ($4 + [32])
	*($3 + [420]) = $8
	*($3 + [424]) = ($4 + [48])
	*($3 + [428]) = ($4 + [56])
	*($3 + [432]) = ($4 + [64])
	*($3 + [436]) = ($4 + [68])
	*($3 + [440]) = ($4 + [72])
	*($3 + [444]) = ($4 + [80])
	*($3 + [448]) = ($4 + [88])
	*($3 + [452]) = ($4 + [96])
	*($3 + [456]) = ($4 + [104])
	CALL $37(($3 + [400]), ($3 + [392]))
	CALL db_update_i64(*($4 + [116]), $6, ($3 + [256]), [108])
	$2 = (($3 + [216]) + [16])
	if ( (uint_64)($11 <= *($2)) ){ goto $label$13 }
	*($2) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($3 + [400]) = *($8)
	if ( (CALL $90(($3 + [384]), ($3 + [400]), [8]) == 0) ){ goto $label$14 }
	$8 = ($4 + [120])
	$4 = *($8)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$15 }
	$4 = CALL db_idx64_find_primary(*($3 + [216]), *(($3 + [224])), (int_64)-6030912129153084416, ($3 + [392]), $11)
	*($8) = $4
	
.LABEL $label$15
	CALL db_idx64_update($4, $6, ($3 + [400]))
	
.LABEL $label$14
	*($3 + [96]) = [8398]
	*($3 + [100]) = CALL $91([8398])
	*($3 + [8]) = *($3 + [96])
	$10 = CALL $2(($3 + [104]), ($3 + [8]))
	$11 = *($0)
	*($3 + [80]) = [8391]
	*($3 + [84]) = CALL $91([8391])
	*($3) = *($3 + [80])
	$4 = CALL $2(($3 + [88]), $3)
	*(($3 + [56])) = $9
	*(($3 + [72])) = [0]
	*($3 + [40]) = $1
	*($3 + [48]) = $7
	*($3 + [64]) = (int_64)0
	*($3 + [32]) = *($0)
	$7 = *($4)
	$8 = ($3 + [64])
	$4 = CALL $91([9117])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$19 }
	*(($3 + [64])) = ($4 << [1])
	$2 = ($8 + [1])
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$0 = (($4 + [16]) & [-16])
	$2 = CALL _Znwj($0)
	*(($3 + [72])) = $2
	*(($3 + [68])) = $4
	*($3 + [64]) = ($0 | [1])
	
.LABEL $label$18
	CALL memcpy($2, [9117], $4)
	
.LABEL $label$17
	*(($2 + $4)) = [0]
	$1 = *($10)
	*(($4 = CALL _Znwj([16]))) = $11
	*($4 + [8]) = $7
	*((($3 + [256]) + [24])) = *((($3 + [32]) + [24]))
	*(($2 = (($3 + [256]) + [40]))) = *(($8 + [8]))
	$7 = *($8)
	*(($3 + [64])) = (int_64)0
	*($3 + [400]) = $4
	$4 = ($4 + [16])
	*($3 + [408]) = $4
	*($3 + [404]) = $4
	*($3 + [256]) = *($3 + [32])
	*($3 + [264]) = *((($3 + [32]) + [8]))
	*($3 + [272]) = *($3 + [48])
	*($3 + [288]) = $7
	*((($3 + [32]) + [40])) = [0]
	CALL $47($1, (int_64)-3617168760277827584, ($3 + [400]), ($3 + [256]))
	if ( ((*($3 + [288]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($2))
	
.LABEL $label$20
	$4 = *($3 + [400])
	if ( ($4 == 0) ){ goto $label$21 }
	*($3 + [404]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$21
	if ( ((*(($3 + [64])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$22
	$2 = *($3 + [240])
	if ( ($2 == 0) ){ goto $label$23 }
	$0 = ($3 + [244])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$25 }
	
.LOOP $label$26:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$27 }
	CALL _ZdlPv($8)
	
.LABEL $label$27
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$26 }
	$4 = *(($3 + [240]))
	goto $label$24 
	
.LABEL $label$25
	$4 = $2
	
.LABEL $label$24
	*($0) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$global$0 = ($3 + [464])
	return (unreachable)
	
.LABEL $label$16
	CALL $80($8)
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9340])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [9340])
	CALL memcpy($4, ($2 + [8]), [1])
	$8 = *($4)
	*($4 + [40]) = ((int_32)$8 != (int_32)[0])
	*(($4 + [20])) = ($2 + [9])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ((int_32)$8 != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $97($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = ($global$0 - [176])
	$global$0 = $7
	CALL require_auth(*($0))
	*((($7 + [8]) + [32])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$8 = *($0)
	*($7 + [8]) = $8
	*($7 + [16]) = $1
	$9 = CALL db_find_i64($8, $1, (int_64)-3665743317141815296, $2)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$4 }
	$9 = CALL $34(($7 + [8]), $9)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)($7 + [8])), [9687])
	$8 = *($0)
	CALL eosio_assert([1], [9812])
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)($7 + [8])), [9847])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$9()), [9893])
	*($9 + [8]) = $3
	*($9 + [40]) = $4
	*($9 + [48]) = $5
	*($9 + [56]) = $6
	$1 = *($9)
	*($9) = $2
	CALL eosio_assert(((int_64)$1 == (int_64)$2), [9944])
	*($7 + [128]) = (($7 + [48]) + [64])
	*($7 + [124]) = ($7 + [48])
	*($7 + [120]) = ($7 + [48])
	*($7 + [136]) = ($7 + [120])
	*($7 + [148]) = ($9 + [8])
	*($7 + [144]) = $9
	*($7 + [152]) = ($9 + [16])
	*($7 + [156]) = ($9 + [24])
	*($7 + [160]) = ($9 + [32])
	*($7 + [164]) = ($9 + [40])
	*($7 + [168]) = ($9 + [48])
	*($7 + [172]) = ($9 + [56])
	CALL $35(($7 + [144]), ($7 + [136]))
	CALL db_update_i64(*($9 + [68]), $8, ($7 + [48]), [64])
	$9 = (($7 + [8]) + [16])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$3 }
	*($9) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$10 = *($7 + [32])
	if ( $10 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$1 = *($0)
	CALL eosio_assert(((int_64)$8 == (int_64)CALL $fimport$9()), [9761])
	*(($9 = CALL _Znwj([80])) + [24]) = (int_64)0
	*($9 + [16]) = (int_64)0
	*($9 + [32]) = (int_64)0
	*($9 + [64]) = ($7 + [8])
	*($9 + [8]) = $3
	*($9) = $2
	*($9 + [40]) = $4
	*($9 + [48]) = $5
	*($9 + [56]) = $6
	*($7 + [128]) = (($7 + [48]) + [64])
	*($7 + [124]) = ($7 + [48])
	*($7 + [120]) = ($7 + [48])
	*($7 + [136]) = ($7 + [120])
	*($7 + [148]) = ($9 + [8])
	*($7 + [144]) = $9
	*($7 + [152]) = ($9 + [16])
	*($7 + [156]) = ($9 + [24])
	*($7 + [160]) = ($9 + [32])
	*($7 + [164]) = ($9 + [40])
	*($7 + [168]) = ($9 + [48])
	*($7 + [172]) = ($9 + [56])
	CALL $35(($7 + [144]), ($7 + [136]))
	$2 = *($9)
	$10 = CALL db_store_i64(*((($7 + [8]) + [8])), (int_64)-3665743317141815296, $1, $2, ($7 + [48]), [64])
	*($9 + [68]) = $10
	$0 = (($7 + [8]) + [16])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($7 + [144]) = $9
	$2 = *($9)
	*($7 + [48]) = $2
	*($7 + [120]) = $10
	$11 = ($7 + [36])
	$0 = *($11)
	if ( ((uint_32)$0 >= (uint_32)*(($7 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $2
	*($0 + [16]) = $10
	*($7 + [144]) = [0]
	*($0) = $9
	*($11) = ($0 + [24])
	$9 = *($7 + [144])
	*($7 + [144]) = [0]
	if ( $9 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $41(($7 + [32]), ($7 + [144]), ($7 + [48]), ($7 + [120]))
	$9 = *($7 + [144])
	*($7 + [144]) = [0]
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($9)
	
.LABEL $label$3
	$10 = *($7 + [32])
	if ( ($10 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$11 = ($7 + [36])
	$9 = *($11)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$9 }
	
.LOOP $label$10:
	$9 = ($9 + [-24])
	$0 = *($9)
	*($9) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$10 }
	$9 = *(($7 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$9 = $10
	
.LABEL $label$8
	*($11) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$1
	$global$0 = ($7 + [176])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $43(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($8 = (($4 + [128]) + [8]))) = $3
	$9 = *($4)
	*($4 + [128]) = $9
	*($4 + [112]) = $9
	$3 = *($8)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	$9 = *($4 + [88])
	$10 = *($4 + [80])
	$11 = *($4 + [72])
	$12 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $12), (int_64 $11), (int_64 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $97($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [400])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	$4 = *($0)
	*($3 + [120]) = $4
	*($3 + [128]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-3104555588802052096, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $53(($3 + [120]), $6)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)($3 + [120])), [9687])
	
.LABEL $label$1
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [8662])
	if ( ($2 == 0) ){ goto $label$3 }
	$8 = *(($5 + [48]))
	$4 = *($5 + [40])
	$9 = *($5 + [16])
	*((($3 + [80]) + [32])) = [0]
	*($3 + [96]) = (int_64)-1
	*($3 + [104]) = (int_64)0
	*($3 + [116]) = [0]
	$1 = *($0)
	*($3 + [80]) = $1
	*($3 + [88]) = $1
	$2 = [0]
	$6 = CALL db_find_i64($1, $1, (int_64)-6030912129153084416, $9)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $36(($3 + [80]), $6)
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)($3 + [80])), [9687])
	
.LABEL $label$4
	$10 = *($0)
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9812])
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)($3 + [80])), [9847])
	CALL eosio_assert(((int_64)*($3 + [80]) == (int_64)CALL $fimport$9()), [9893])
	*($2 + [16]) = ((int_64)*($2 + [16]) + (int_64)$4)
	$6 = ($2 + [40])
	*($3 + [280]) = *($6)
	$1 = *($2)
	CALL eosio_assert([1], [9944])
	*($3 + [376]) = (($3 + [160]) + [108])
	*($3 + [372]) = ($3 + [160])
	*($3 + [368]) = ($3 + [160])
	*($3 + [352]) = ($3 + [368])
	*($3 + [292]) = ($2 + [8])
	*($3 + [288]) = $2
	*($3 + [296]) = ($2 + [16])
	*($3 + [300]) = ($2 + [24])
	*($3 + [304]) = ($2 + [32])
	*($3 + [308]) = $6
	*($3 + [312]) = ($2 + [48])
	*($3 + [316]) = ($2 + [56])
	*($3 + [320]) = ($2 + [64])
	*($3 + [324]) = ($2 + [68])
	*($3 + [328]) = ($2 + [72])
	*($3 + [332]) = ($2 + [80])
	*($3 + [336]) = ($2 + [88])
	*($3 + [340]) = ($2 + [96])
	*($3 + [344]) = ($2 + [104])
	CALL $37(($3 + [288]), ($3 + [352]))
	CALL db_update_i64(*($2 + [116]), $10, ($3 + [160]), [108])
	$11 = (($3 + [80]) + [16])
	if ( (uint_64)($1 <= *($11)) ){ goto $label$5 }
	*($11) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($3 + [288]) = *($6)
	if ( (CALL $90(($3 + [280]), ($3 + [288]), [8]) == 0) ){ goto $label$6 }
	$6 = ($2 + [120])
	$2 = *($6)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$7 }
	$2 = CALL db_idx64_find_primary(*($3 + [80]), *(($3 + [88])), (int_64)-6030912129153084416, ($3 + [352]), $1)
	*($6) = $2
	
.LABEL $label$7
	CALL db_idx64_update($2, $10, ($3 + [288]))
	
.LABEL $label$6
	*((($3 + [288]) + [32])) = [0]
	*($3 + [304]) = (int_64)-1
	*($3 + [312]) = (int_64)0
	$1 = *($0)
	*($3 + [288]) = $1
	$10 = *($5 + [8])
	*($3 + [296]) = $10
	$2 = [0]
	$6 = CALL db_find_i64($1, $10, (int_64)-3665743317141815296, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$2 = CALL $34(($3 + [288]), $6)
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)($3 + [288])), [9687])
	
.LABEL $label$8
	$6 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($6, [8606])
	$10 = *($0)
	CALL eosio_assert($6, [9812])
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)($3 + [288])), [9847])
	CALL eosio_assert(((int_64)*($3 + [288]) == (int_64)CALL $fimport$9()), [9893])
	*($2 + [24]) = $4
	*($2 + [56]) = (int_64))(*($2 + [56]) - $4)
	$1 = *($2)
	CALL eosio_assert([1], [9944])
	*($3 + [360]) = (($3 + [160]) + [64])
	*($3 + [356]) = ($3 + [160])
	*($3 + [352]) = ($3 + [160])
	*($3 + [280]) = ($3 + [352])
	*($3 + [372]) = ($2 + [8])
	*($3 + [368]) = $2
	*($3 + [376]) = ($2 + [16])
	*($3 + [380]) = ($2 + [24])
	*($3 + [384]) = ($2 + [32])
	*($3 + [388]) = ($2 + [40])
	*($3 + [392]) = ($2 + [48])
	*($3 + [396]) = ($2 + [56])
	CALL $35(($3 + [368]), ($3 + [280]))
	CALL db_update_i64(*($2 + [68]), $10, ($3 + [160]), [64])
	$6 = (($3 + [288]) + [16])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$9 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$10 }
	$1 = *($0)
	$10 = *($2 + [8])
	*($3 + [64]) = [8391]
	*($3 + [68]) = CALL $91([8391])
	*($3 + [8]) = *($3 + [64])
	$2 = CALL $2(($3 + [72]), ($3 + [8]))
	*(($3 + [40])) = $8
	*(($3 + [56])) = [0]
	*($3 + [24]) = $9
	*($3 + [32]) = $4
	*($3 + [48]) = (int_64)0
	*($3 + [16]) = *($0)
	$4 = *($2)
	$0 = ($3 + [48])
	$2 = CALL $91([8691])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$13 }
	*(($3 + [48])) = ($2 << [1])
	$6 = ($0 + [1])
	if ( $2 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$11 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($11)
	*(($3 + [56])) = $6
	*(($3 + [52])) = $2
	*($3 + [48]) = ($11 | [1])
	
.LABEL $label$12
	CALL memcpy($6, [8691], $2)
	
.LABEL $label$11
	*(($6 + $2)) = [0]
	*(($2 = CALL _Znwj([16]))) = $1
	*($2 + [8]) = $4
	*((($3 + [160]) + [24])) = *((($3 + [16]) + [24]))
	*(($6 = (($3 + [160]) + [40]))) = *(($0 + [8]))
	$4 = *($0)
	*(($3 + [48])) = (int_64)0
	*($3 + [368]) = $2
	$2 = ($2 + [16])
	*($3 + [376]) = $2
	*($3 + [372]) = $2
	*($3 + [160]) = *($3 + [16])
	*($3 + [168]) = *((($3 + [16]) + [8]))
	*($3 + [176]) = *($3 + [32])
	*($3 + [192]) = $4
	*((($3 + [16]) + [40])) = [0]
	CALL $47($10, (int_64)-3617168760277827584, ($3 + [368]), ($3 + [160]))
	if ( ((*($3 + [192]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$14
	$2 = *($3 + [368])
	if ( ($2 == 0) ){ goto $label$15 }
	*($3 + [372]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$15
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$10
	$6 = *($3 + [312])
	if ( ($6 == 0) ){ goto $label$16 }
	$11 = ($3 + [316])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$20 }
	CALL _ZdlPv($0)
	
.LABEL $label$20
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($3 + [312]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $6
	
.LABEL $label$17
	*($11) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$16
	$6 = *($3 + [104])
	if ( ($6 == 0) ){ goto $label$3 }
	$11 = ($3 + [108])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$24 }
	CALL _ZdlPv($0)
	
.LABEL $label$24
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($3 + [104]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $6
	
.LABEL $label$21
	*($11) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$3
	CALL eosio_assert($7, [10177])
	CALL eosio_assert($7, [10211])
	$2 = CALL db_next_i64(*($5 + [68]), ($3 + [160]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$25 }
	CALL $53(($3 + [120]), $2)
	
.LABEL $label$25
	CALL $54(($3 + [120]), $5)
	$6 = *($3 + [144])
	if ( ($6 == 0) ){ goto $label$26 }
	$5 = ($3 + [148])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$30 }
	CALL _ZdlPv($0)
	
.LABEL $label$30
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$29 }
	$2 = *(($3 + [144]))
	goto $label$27 
	
.LABEL $label$28
	$2 = $6
	
.LABEL $label$27
	*($5) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$26
	$global$0 = ($3 + [400])
	return (unreachable)
	
.LABEL $label$2
	CALL $80($0)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9340])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [9340])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [1])
	*(($4 + [20])) = ($2 + [9])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [40])
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $97($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$7 = ($global$0 - [560])
	$global$0 = $7
	*($7 + [336]) = $2
	*($7 + [344]) = $1
	*($7 + [328]) = $6
	CALL require_auth($1)
	*((($7 + [288]) + [32])) = [0]
	*($7 + [304]) = (int_64)-1
	*($7 + [312]) = (int_64)0
	*($7 + [324]) = [0]
	$6 = *($0)
	*($7 + [288]) = $6
	*($7 + [296]) = $6
	$8 = *(CALL $46(($7 + [288]), $1, [8586]) + [8])
	*((($7 + [248]) + [32])) = [0]
	*($7 + [256]) = $1
	*($7 + [264]) = (int_64)-1
	*($7 + [272]) = (int_64)0
	$6 = *($0)
	*($7 + [248]) = $6
	$9 = [0]
	$10 = CALL db_find_i64($6, $1, (int_64)-3665743317141815296, *($4 + [8]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $34(($7 + [248]), $10)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)($7 + [248])), [9687])
	$1 = *($7 + [344])
	
.LABEL $label$1
	$11 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($11, [8606])
	$6 = *($4)
	*((($7 + [232]) + [8])) = *(($3 + [8]))
	*($7 + [232]) = *($3)
	*($7 + [224]) = [8626]
	*($7 + [228]) = CALL $91([8626])
	*($7 + [48]) = *($7 + [224])
	if ( ((int_64)$1 != (int_64)*(CALL $2(($7 + [352]), ($7 + [48])))) ){ goto $label$2 }
	$1 = *($7 + [232])
	CALL __multi3(($7 + [32]), $1, (int_64)$1 >> (int_64)63), (int_64)5, (int_64)0)
	$1 = *((($7 + [32]) + [8]))
	$2 = *($7 + [32])
	CALL eosio_assert(( (uint_64)($2 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [9449])
	CALL eosio_assert(( ((uint_64)$2 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [9473])
	*($7 + [232]) = $2
	
.LABEL $label$2
	if ( (uint_64)(*($9 + [56]) <= $6) ){ goto $label$6 }
	$10 = CALL $91([8447])
	if ( ($10 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9351])
	goto $label$9 
	
.LABEL $label$10
	if ( ($10 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = (int_64)0
	
.LOOP $label$11:
	$12 = *(($10 + [8446]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9396])
	
.LABEL $label$12
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$11 }
	$1 = ((int_64)$1 << (int_64)8)
	goto $label$7 
	
.LABEL $label$8
	$1 = (int_64)0
	
.LABEL $label$7
	if ( ((int_64)*(($4 + [8])) != (int_64)((int_64)$1 | (int_64)4)) ){ goto $label$13 }
	if ( ((int_64))($6 - *($7 + [232])) >= (int_64)1500000) ){ goto $label$6 }
	
.LABEL $label$13
	*(($7 + [216])) = [0]
	*($7 + [200]) = (int_64)-1
	$1 = (int_64)0
	*($7 + [208]) = (int_64)0
	*($7 + [220]) = [0]
	$2 = *($0)
	*($7 + [184]) = $2
	*($7 + [192]) = $2
	$10 = CALL $91([8447])
	if ( ($10 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [9351])
	goto $label$15 
	
.LABEL $label$16
	if ( ($10 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$1 = (int_64)0
	
.LOOP $label$17:
	$12 = *(($10 + [8446]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [9396])
	
.LABEL $label$18
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$17 }
	$1 = ((int_64)$1 << (int_64)8)
	
.LABEL $label$14
	if ( ((int_64)*(($4 + [8])) != (int_64)((int_64)$1 | (int_64)4)) ){ goto $label$20 }
	if ( ((int_64)*($7 + [328]) != (int_64)*($0)) ){ goto $label$21 }
	*($7 + [328]) = (int_64)0
	
.LABEL $label$21
	$1 = *($7 + [336])
	$12 = *(($7 + [212]))
	$13 = *(($7 + [208]))
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$23 }
	
.LOOP $label$25:
	$10 = ($12 + [-24])
	$14 = *($10)
	if ( ((int_64)*($14) == (int_64)$1) ){ goto $label$24 }
	$12 = $10
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*($14 + [112]) == (int_32)($7 + [184])), [9687])
	goto $label$22 
	
.LABEL $label$23
	$10 = CALL db_find_i64(*($7 + [184]), *(($7 + [192])), (int_64)-6030912129153084416, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$20 }
	$14 = CALL $36(($7 + [184]), $10)
	CALL eosio_assert(((int_32)*($14 + [112]) == (int_32)($7 + [184])), [9687])
	
.LABEL $label$22
	$1 = *(($14 + [40]))
	if ( (int_64)($1 == 0) ){ goto $label$26 }
	*($7 + [328]) = $1
	
.LABEL $label$26
	$10 = CALL $91([8447])
	if ( ($10 <= [8]) ){ goto $label$30 }
	CALL eosio_assert([0], [9351])
	goto $label$29 
	
.LABEL $label$30
	if ( ($10 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$1 = (int_64)0
	
.LOOP $label$31:
	$12 = *(($10 + [8446]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [9396])
	
.LABEL $label$32
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$31 }
	$1 = ((int_64)$1 & (int_64)72057594037927935)
	goto $label$27 
	
.LABEL $label$28
	$1 = (int_64)0
	
.LABEL $label$27
	CALL eosio_assert([1], [9498])
	$10 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$1 = $2
	$12 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$1 = $2
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$12 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $12 ){ goto $label$37 }
	$12 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$12 = [0]
	
.LABEL $label$33
	CALL eosio_assert($12, [9547])
	if ( (int_64)(*($7 + [328]) == 0) ){ goto $label$42 }
	$1 = *($3)
	CALL __multi3(($7 + [16]), $1, (int_64)$1 >> (int_64)63), (int_64)5, (int_64)0)
	$15 = *($3 + [8])
	$1 = *(($7 + [24]))
	$2 = *($7 + [16])
	CALL eosio_assert(( (uint_64)($2 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [9449])
	CALL eosio_assert(( ((uint_64)$2 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [9473])
	CALL eosio_assert([1], [9567])
	CALL eosio_assert([1], [9582])
	$1 = ((int_64)$2 / (int_64)1000)
	if ( ((int_64)$8 != (int_64)9) ){ goto $label$43 }
	CALL eosio_assert([1], [9567])
	CALL eosio_assert([1], [9582])
	$1 = ((int_64)$2 / (int_64)5000)
	
.LABEL $label$43
	$6 = ((int_64)$1 + (int_64)$6)
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$38 }
	$2 = *($0)
	$8 = *($9 + [8])
	*($7 + [168]) = [8391]
	*($7 + [172]) = CALL $91([8391])
	*($7 + [8]) = *($7 + [168])
	$10 = CALL $2(($7 + [176]), ($7 + [8]))
	*(($7 + [144])) = $15
	*(($7 + [160])) = [0]
	*($7 + [136]) = $1
	*($7 + [152]) = (int_64)0
	*($7 + [120]) = *($0)
	*($7 + [128]) = *($7 + [328])
	$15 = *($10)
	$12 = ($7 + [152])
	$10 = CALL $91([8639])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$41 }
	*(($7 + [152])) = ($10 << [1])
	$13 = ($12 + [1])
	if ( $10 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$1 = (int_64)0
	goto $label$38 
	
.LABEL $label$41
	$3 = (($10 + [16]) & [-16])
	$13 = CALL _Znwj($3)
	*(($7 + [160])) = $13
	*(($7 + [156])) = $10
	*($7 + [152]) = ($3 | [1])
	
.LABEL $label$40
	CALL memcpy($13, [8639], $10)
	
.LABEL $label$39
	*(($13 + $10)) = [0]
	*(($10 = CALL _Znwj([16]))) = $2
	*($10 + [8]) = $15
	*((($7 + [352]) + [24])) = *((($7 + [120]) + [24]))
	*(($13 = (($7 + [352]) + [40]))) = *(($12 + [8]))
	$2 = *($12)
	*(($7 + [152])) = (int_64)0
	*($7 + [480]) = $10
	$10 = ($10 + [16])
	*($7 + [488]) = $10
	*($7 + [484]) = $10
	*($7 + [352]) = *($7 + [120])
	*($7 + [360]) = *((($7 + [120]) + [8]))
	*($7 + [368]) = *($7 + [136])
	*($7 + [384]) = $2
	*((($7 + [120]) + [40])) = [0]
	CALL $47($8, (int_64)-3617168760277827584, ($7 + [480]), ($7 + [352]))
	if ( ((*($7 + [384]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*($13))
	
.LABEL $label$44
	$10 = *($7 + [480])
	if ( ($10 == 0) ){ goto $label$45 }
	*($7 + [484]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$45
	if ( ((*(($7 + [152])) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($7 + [160])))
	
.LABEL $label$38
	$2 = *($0)
	CALL eosio_assert([1], [9812])
	CALL eosio_assert(((int_32)*($14 + [112]) == (int_32)($7 + [184])), [9847])
	CALL eosio_assert(((int_64)*($7 + [184]) == (int_64)CALL $fimport$9()), [9893])
	*($14 + [16]) = ((int_64)*($14 + [16]) + (int_64)*($4))
	$10 = ($14 + [40])
	*($7 + [464]) = *($10)
	*($10) = *($7 + [328])
	*($14 + [48]) = ((int_64)*($14 + [48]) + (int_64)$1)
	$1 = *($14)
	CALL eosio_assert([1], [9944])
	*($7 + [552]) = (($7 + [352]) + [108])
	*($7 + [548]) = ($7 + [352])
	*($7 + [544]) = ($7 + [352])
	*($7 + [472]) = ($7 + [544])
	*($7 + [484]) = ($14 + [8])
	*($7 + [480]) = $14
	*($7 + [488]) = ($14 + [16])
	*($7 + [492]) = ($14 + [24])
	*($7 + [496]) = ($14 + [32])
	*($7 + [500]) = $10
	*($7 + [504]) = ($14 + [48])
	*($7 + [508]) = ($14 + [56])
	*($7 + [512]) = ($14 + [64])
	*($7 + [516]) = ($14 + [68])
	*($7 + [520]) = ($14 + [72])
	*($7 + [524]) = ($14 + [80])
	*($7 + [528]) = ($14 + [88])
	*($7 + [532]) = ($14 + [96])
	*($7 + [536]) = ($14 + [104])
	CALL $37(($7 + [480]), ($7 + [472]))
	CALL db_update_i64(*($14 + [116]), $2, ($7 + [352]), [108])
	$12 = (($7 + [184]) + [16])
	if ( (uint_64)($1 <= *($12)) ){ goto $label$46 }
	*($12) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$46
	*($7 + [480]) = *($10)
	if ( (CALL $90(($7 + [464]), ($7 + [480]), [8]) == 0) ){ goto $label$20 }
	$12 = ($14 + [120])
	$10 = *($12)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$47 }
	$10 = CALL db_idx64_find_primary(*($7 + [184]), *(($7 + [192])), (int_64)-6030912129153084416, ($7 + [472]), $1)
	*($12) = $10
	
.LABEL $label$47
	CALL db_idx64_update($10, $2, ($7 + [480]))
	
.LABEL $label$20
	$2 = *($0)
	CALL eosio_assert($11, [9812])
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)($7 + [248])), [9847])
	CALL eosio_assert(((int_64)*($7 + [248]) == (int_64)CALL $fimport$9()), [9893])
	*($9 + [24]) = ((int_64)*($9 + [24]) + (int_64)$6)
	*($9 + [56]) = (int_64))(*($9 + [56]) - $6)
	$1 = *($9)
	CALL eosio_assert([1], [9944])
	*($7 + [552]) = (($7 + [352]) + [64])
	*($7 + [548]) = ($7 + [352])
	*($7 + [544]) = ($7 + [352])
	*($7 + [472]) = ($7 + [544])
	*($7 + [484]) = ($9 + [8])
	*($7 + [480]) = $9
	*($7 + [488]) = ($9 + [16])
	*($7 + [492]) = ($9 + [24])
	*($7 + [496]) = ($9 + [32])
	*($7 + [500]) = ($9 + [40])
	*($7 + [504]) = ($9 + [48])
	*($7 + [508]) = ($9 + [56])
	CALL $35(($7 + [480]), ($7 + [472]))
	CALL db_update_i64(*($9 + [68]), $2, ($7 + [352]), [64])
	$10 = (($7 + [248]) + [16])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$48 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$48
	if ( ((int_64)*($4) < (int_64)1) ){ goto $label$49 }
	$1 = *($9 + [8])
	$6 = *($0)
	*($7 + [104]) = [8391]
	*($7 + [108]) = CALL $91([8391])
	*($7) = *($7 + [104])
	$10 = CALL $2(($7 + [112]), $7)
	*(($12 = (($7 + [56]) + [24]))) = *(($4 + [8]))
	*($7 + [56]) = *($0)
	*($7 + [64]) = *($7 + [336])
	*($7 + [72]) = *($4)
	$2 = *($10)
	CALL $81(($7 + [88]), $5)
	*(($10 = CALL _Znwj([16]))) = $6
	*($10 + [8]) = $2
	*((($7 + [352]) + [24])) = *($12)
	$12 = (($7 + [56]) + [40])
	*(($9 = (($7 + [352]) + [40]))) = *($12)
	*($12) = [0]
	*($7 + [480]) = $10
	$10 = ($10 + [16])
	*($7 + [488]) = $10
	*($7 + [484]) = $10
	*($7 + [352]) = *($7 + [56])
	*($7 + [360]) = *($7 + [64])
	*($7 + [368]) = *($7 + [72])
	*($7 + [384]) = *($7 + [88])
	*($7 + [88]) = (int_64)0
	CALL $47($1, (int_64)-3617168760277827584, ($7 + [480]), ($7 + [352]))
	if ( ((*($7 + [384]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$50
	$10 = *($7 + [480])
	if ( ($10 == 0) ){ goto $label$51 }
	*($7 + [484]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$51
	if ( ((*(($7 + [88])) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($7 + [96])))
	
.LABEL $label$49
	$9 = *($7 + [208])
	if ( ($9 == 0) ){ goto $label$5 }
	$4 = ($7 + [212])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$53 }
	
.LOOP $label$54:
	$10 = ($10 + [-24])
	$12 = *($10)
	*($10) = [0]
	if ( ($12 == 0) ){ goto $label$55 }
	CALL _ZdlPv($12)
	
.LABEL $label$55
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$54 }
	$10 = *(($7 + [208]))
	goto $label$52 
	
.LABEL $label$53
	$10 = $9
	
.LABEL $label$52
	*($4) = $9
	CALL _ZdlPv($10)
	goto $label$5 
	
.LABEL $label$19
	CALL $80($12)
	
.LABEL $label$6
	*(($9 = ($7 + [384]))) = [0]
	*($7 + [368]) = (int_64)-1
	*($7 + [376]) = (int_64)0
	$1 = *($0)
	*($7 + [352]) = $1
	*($7 + [360]) = $1
	*($7 + [496]) = $4
	*($7 + [484]) = ($7 + [344])
	*($7 + [480]) = ($7 + [352])
	*($7 + [488]) = ($7 + [336])
	*($7 + [492]) = ($7 + [232])
	*($7 + [500]) = ($7 + [328])
	*($7 + [544]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$9()), [9761])
	*($7 + [188]) = ($7 + [480])
	*($7 + [184]) = ($7 + [352])
	*($7 + [192]) = ($7 + [544])
	*(($10 = CALL _Znwj([80])) + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	*($10 + [32]) = (int_64)0
	*($10 + [40]) = (int_64)0
	*($10 + [48]) = (int_64)0
	*($10 + [56]) = (int_64)0
	*($10 + [64]) = ($7 + [352])
	CALL $48(($7 + [184]), $10)
	*($7 + [472]) = $10
	$1 = *($10)
	*($7 + [184]) = $1
	$4 = *($10 + [68])
	*($7 + [464]) = $4
	$0 = ($7 + [380])
	$12 = *($0)
	if ( ((uint_32)$12 >= (uint_32)*($9)) ){ goto $label$58 }
	*($12 + [8]) = $1
	*($12 + [16]) = $4
	*($7 + [472]) = [0]
	*($12) = $10
	*($0) = ($12 + [24])
	$10 = *($7 + [472])
	*($7 + [472]) = [0]
	if ( $10 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	CALL $49(($7 + [376]), ($7 + [472]), ($7 + [184]), ($7 + [464]))
	$10 = *($7 + [472])
	*($7 + [472]) = [0]
	if ( ($10 == 0) ){ goto $label$56 }
	
.LABEL $label$57
	CALL _ZdlPv($10)
	
.LABEL $label$56
	$9 = *($7 + [376])
	if ( ($9 == 0) ){ goto $label$5 }
	$4 = ($7 + [380])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$60 }
	
.LOOP $label$61:
	$10 = ($10 + [-24])
	$12 = *($10)
	*($10) = [0]
	if ( ($12 == 0) ){ goto $label$62 }
	CALL _ZdlPv($12)
	
.LABEL $label$62
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$61 }
	$10 = *(($7 + [376]))
	goto $label$59 
	
.LABEL $label$60
	$10 = $9
	
.LABEL $label$59
	*($4) = $9
	CALL _ZdlPv($10)
	$9 = *($7 + [272])
	if ( $9 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = *($7 + [272])
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = ($7 + [276])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$64 }
	
.LOOP $label$65:
	$10 = ($10 + [-24])
	$12 = *($10)
	*($10) = [0]
	if ( ($12 == 0) ){ goto $label$66 }
	CALL _ZdlPv($12)
	
.LABEL $label$66
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$65 }
	$10 = *(($7 + [272]))
	goto $label$63 
	
.LABEL $label$64
	$10 = $9
	
.LABEL $label$63
	*($4) = $9
	CALL _ZdlPv($10)
	
.LABEL $label$3
	$9 = *($7 + [312])
	if ( ($9 == 0) ){ goto $label$67 }
	$4 = ($7 + [316])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$69 }
	
.LOOP $label$70:
	$10 = ($10 + [-24])
	$12 = *($10)
	*($10) = [0]
	if ( ($12 == 0) ){ goto $label$71 }
	CALL _ZdlPv($12)
	
.LABEL $label$71
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$70 }
	$10 = *(($7 + [312]))
	goto $label$68 
	
.LABEL $label$69
	$10 = $9
	
.LABEL $label$68
	*($4) = $9
	CALL _ZdlPv($10)
	
.LABEL $label$67
	$global$0 = ($7 + [560])
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9345])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9345])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9345])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9345])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9345])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9345])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9345])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9345])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9345])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $61(CALL $62($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9738])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9340])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[33]), [9340])
	CALL memcpy(($5 + [8]), ($2 + [8]), [34])
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $51(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [10241])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [10286])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10336])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9738])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [56])
	CALL $71(($3 + [40]), ($3 + [32]))
	*($5 + [68]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $49(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [10241])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [10286])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10336])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9738])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	CALL $65(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $41(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $86($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = *(*($0))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [224])
	$global$0 = $3
	*($3 + [184]) = $1
	CALL require_auth(*($0))
	CALL eosio_assert(CALL eosio_assert1($1), [8424])
	*((($3 + [144]) + [32])) = [0]
	*($3 + [160]) = (int_64)-1
	*($3 + [168]) = (int_64)0
	*($3 + [180]) = [0]
	$4 = *($0)
	*($3 + [144]) = $4
	*($3 + [152]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)7035924439720001536, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $33(($3 + [144]), $5) + [20]) == (int_32)($3 + [144])), [9687])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$9()), [9761])
	*(($5 = CALL _Znwj([32])) + [20]) = ($3 + [144])
	*($5 + [8]) = $2
	*($5 + [16]) = [1]
	*($5) = *($3 + [184])
	CALL eosio_assert([1], [9345])
	CALL memcpy(($3 + [64]), $5, [8])
	CALL eosio_assert([1], [9345])
	$6 = ($5 + [8])
	CALL memcpy((($3 + [64]) | [8]), $6, [8])
	*($3 + [48]) = *($5 + [16])
	CALL eosio_assert([1], [9345])
	CALL memcpy((($3 + [64]) + [16]), ($3 + [48]), [1])
	$4 = *($5)
	$7 = (($3 + [144]) + [8])
	*($5 + [24]) = CALL db_store_i64(*($7), (int_64)7035924439720001536, $1, $4, ($3 + [64]), [17])
	$8 = (($3 + [144]) + [16])
	if ( (uint_64)($4 <= *($8)) ){ goto $label$3 }
	*($8) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = *($5)
	$2 = *($7)
	*($3 + [48]) = *($6)
	*($5 + [28]) = CALL db_idx64_store($2, (int_64)7035924439720001536, $1, $4, ($3 + [48]))
	*($3 + [48]) = $5
	$4 = *($5)
	*($3 + [64]) = $4
	$7 = *(($5 + [24]))
	*($3 + [208]) = $7
	$8 = ($3 + [172])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [176]))) ){ goto $label$6 }
	*($6 + [8]) = $4
	*($6 + [16]) = $7
	*($3 + [48]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	$5 = *($3 + [48])
	$6 = [0]
	*($3 + [48]) = [0]
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $39((($3 + [144]) + [24]), ($3 + [48]), ($3 + [64]), ($3 + [208]))
	$5 = *($3 + [48])
	$6 = [0]
	*($3 + [48]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($5)
	
.LABEL $label$4
	*(($3 + [96])) = $6
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	*($3 + [64]) = *($0)
	*($3 + [72]) = *($3 + [184])
	$5 = CALL $91([8447])
	if ( ($5 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9351])
	goto $label$12 
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$4 = (int_64)0
	
.LOOP $label$14:
	$6 = *(($5 + [8446]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9396])
	
.LABEL $label$15
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$14 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	$6 = *(($3 + [92]))
	$7 = *(($3 + [88]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$17:
	$5 = ($6 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$16 }
	$6 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)($3 + [64])), [9687])
	if ( $8 ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$11
	$4 = (int_64)4
	
.LABEL $label$10
	$5 = CALL db_find_i64(*($3 + [64]), *(($3 + [72])), (int_64)-3665743317141815296, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $34(($3 + [64]), $5) + [64]) == (int_32)($3 + [64])), [9687])
	$7 = *($3 + [88])
	if ( $7 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$9
	*($3 + [208]) = *($0)
	CALL eosio_assert(((int_64)*($3 + [64]) == (int_64)CALL $fimport$9()), [9761])
	*($3 + [52]) = ($3 + [136])
	*($3 + [48]) = ($3 + [64])
	*($3 + [56]) = ($3 + [208])
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = ($3 + [64])
	CALL $40(($3 + [48]), $5)
	*($3 + [200]) = $5
	$4 = *($5)
	*($3 + [48]) = $4
	$7 = *($5 + [68])
	*($3 + [196]) = $7
	$8 = ($3 + [92])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [96]))) ){ goto $label$19 }
	*($6 + [8]) = $4
	*($6 + [16]) = $7
	*($3 + [200]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	$5 = *($3 + [200])
	*($3 + [200]) = [0]
	if ( $5 ){ goto $label$18 }
	goto $label$8 
	
.LABEL $label$19
	CALL $41(($3 + [88]), ($3 + [200]), ($3 + [48]), ($3 + [196]))
	$5 = *($3 + [200])
	*($3 + [200]) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	
.LABEL $label$18
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$7 = *($3 + [88])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$8 = ($3 + [92])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$23 }
	CALL _ZdlPv($6)
	
.LABEL $label$23
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($3 + [88]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $7
	
.LABEL $label$20
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$4 = CALL current_time()
	*(($3 + [92])) = (int_64)0
	*(($3 + [108])) = (int_64)0
	*(($3 + [116])) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [80]) = [0]
	*($3 + [84 align=4]) = (int_64)0
	*($3 + [100 align=4]) = (int_64)0
	*($3 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$4 = *($0)
	*($3 + [32]) = [8391]
	*($3 + [36]) = CALL $91([8391])
	*($3 + [16]) = *($3 + [32])
	$5 = CALL $2(($3 + [40]), ($3 + [16]))
	*($3 + [48]) = $4
	*($3 + [56]) = *($5)
	*($3 + [24]) = [8451]
	*($3 + [28]) = CALL $91([8451])
	*($3 + [8]) = *($3 + [24])
	CALL $42(($3 + [100]), ($3 + [48]), ($3 + [184]), CALL $2(($3 + [208]), ($3 + [8])), ($3 + [200]))
	$4 = *($0)
	*($3 + [84]) = [0]
	*($3 + [56]) = (int_64)0
	*($3 + [48]) = $4
	CALL $6(($3 + [208]), ($3 + [64]))
	$5 = *($3 + [208])
	CALL send_deferred(($3 + [48]), $4, $5, (*($3 + [212]) - $5), [0])
	$5 = *($3 + [208])
	if ( ($5 == 0) ){ goto $label$24 }
	*($3 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$24
	CALL $7(($3 + [64]))
	$0 = *($3 + [168])
	if ( ($0 == 0) ){ goto $label$25 }
	$7 = ($3 + [172])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$27 }
	
.LOOP $label$28:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$29 }
	CALL _ZdlPv($6)
	
.LABEL $label$29
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$28 }
	$5 = *(($3 + [168]))
	goto $label$26 
	
.LABEL $label$27
	$5 = $0
	
.LABEL $label$26
	*($7) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$25
	$global$0 = ($3 + [224])
}

int_32 .FUNC $28 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9340])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9340])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $97($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $86($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [416])
	$global$0 = $5
	$6 = *(($3 + [8]))
	*((($5 + [192]) + [8])) = $6
	$7 = *($3)
	*((($5 + [16]) + [8])) = $6
	*($5 + [192]) = $7
	*($5 + [16]) = $7
	if ( (CALL $1($0, $1, $2, ($5 + [16]), $4, [0]) == 0) ){ goto $label$1 }
	*((($5 + [152]) + [32])) = [0]
	*($5 + [168]) = (int_64)-1
	*($5 + [176]) = (int_64)0
	*($5 + [188]) = [0]
	$7 = *($0)
	*($5 + [152]) = $7
	*($5 + [160]) = $7
	$8 = CALL db_find_i64($7, $7, (int_64)7035924439720001536, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$9 = CALL $33(($5 + [152]), $8)
	CALL eosio_assert(((int_32)*($9 + [20]) == (int_32)($5 + [152])), [9687])
	CALL eosio_assert(*($9 + [16]), [8456])
	*((($5 + [112]) + [32])) = [0]
	*($5 + [128]) = (int_64)-1
	*($5 + [136]) = (int_64)0
	$7 = *($0)
	*($5 + [112]) = $7
	*($5 + [120]) = $1
	$8 = [0]
	$2 = *($3 + [8])
	$10 = CALL db_find_i64($7, $1, (int_64)-3665743317141815296, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$11 }
	$8 = CALL $34(($5 + [112]), $10)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)($5 + [112])), [9687])
	
.LABEL $label$11
	$7 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9812])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)($5 + [112])), [9847])
	CALL eosio_assert(((int_64)*($5 + [112]) == (int_64)CALL $fimport$9()), [9893])
	$1 = *($3)
	*($8 + [16]) = ((int_64)*($8 + [16]) + (int_64)$1)
	*($8 + [56]) = ((int_64)$1 + (int_64)*($8 + [56]))
	*($8 + [32]) = ((int_64)*($8 + [32]) + (int_64)1)
	$1 = *($8)
	CALL eosio_assert([1], [9944])
	*($5 + [80]) = (($5 + [208]) + [64])
	*($5 + [76]) = ($5 + [208])
	*($5 + [72]) = ($5 + [208])
	*($5 + [320]) = ($5 + [72])
	*($5 + [356]) = ($8 + [8])
	*($5 + [352]) = $8
	*($5 + [360]) = ($8 + [16])
	*($5 + [364]) = ($8 + [24])
	*($5 + [368]) = ($8 + [32])
	*($5 + [372]) = ($8 + [40])
	*($5 + [376]) = ($8 + [48])
	*($5 + [380]) = ($8 + [56])
	CALL $35(($5 + [352]), ($5 + [320]))
	CALL db_update_i64(*($8 + [68]), $7, ($5 + [208]), [64])
	$8 = (($5 + [112]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$12 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*((($5 + [72]) + [32])) = [0]
	*($5 + [88]) = (int_64)-1
	$1 = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [108]) = [0]
	$7 = *($0)
	*($5 + [72]) = $7
	*($5 + [80]) = $7
	$8 = CALL $84($4, [44], [0])
	CALL eosio_assert([1], [8475])
	$8 = *($5 + [56])
	$4 = ($8 & [1])
	$11 = CALL $82(($5 + [56]), $4, [0], $8, $4)
	*($5 + [40]) = ( *($11 + [8]) ? ($11 + [1]) : $4 )
	*($5 + [44]) = ( *($11 + [4]) ? uint_32($8 >> [1]) : $4 )
	*($5 + [8]) = *($5 + [40])
	$12 = CALL $2(($5 + [48]), ($5 + [8]))
	CALL eosio_assert(CALL eosio_assert1(*($12)), [8502])
	$8 = CALL $91([8447])
	if ( ($8 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9351])
	goto $label$8 
	
.LABEL $label$10
	$8 = CALL $84($4, [44], [0])
	CALL eosio_assert([1], [8525])
	$10 = CALL $82(($5 + [320]), $4, [0], $8, $4)
	$11 = *($5 + [320])
	$9 = CALL $91([8549])
	if ( ((int_32)$9 != (int_32)( *($10 + [4]) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$13 }
	if ( (CALL $85($10, [0], [-1], [8549], $9) == 0) ){ goto $label$6 }
	
.LABEL $label$13
	CALL eosio_assert([0], [8571])
	goto $label$5 
	
.LABEL $label$9
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$1 = (int_64)0
	
.LOOP $label$14:
	$4 = *(($8 + [8446]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9396])
	
.LABEL $label$15
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$14 }
	$1 = ((int_64)$1 << (int_64)8)
	
.LABEL $label$7
	$7 = ( *($3) ? (int_64)0 : ((int_64)$2 == (int_64)((int_64)$1 | (int_64)4)) )
	$1 = *($12)
	$3 = *(($5 + [100]))
	$10 = *(($5 + [96]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$21 }
	
.LOOP $label$23:
	$8 = ($3 + [-24])
	$4 = *($8)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$22 }
	$3 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($5 + [72])), [9687])
	goto $label$20 
	
.LABEL $label$21
	$4 = (($5 + [72]) + [8])
	$8 = CALL db_find_i64(*($5 + [72]), *($4), (int_64)-6030912129153084416, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$19 }
	$4 = CALL $36(($5 + [72]), $8)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($5 + [72])), [9687])
	
.LABEL $label$20
	$8 = ($4 + [88])
	$3 = ($4 + [32])
	$1 = (int_64)0
	$10 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	if ( ((uint_32)((uint_32)$10 / (uint_32)[86400]) > (uint_32)((uint_32)*($4 + [32]) / (uint_32)[86400])) ){ goto $label$24 }
	$1 = *($8)
	
.LABEL $label$24
	$2 = *($0)
	CALL eosio_assert([1], [9812])
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($5 + [72])), [9847])
	CALL eosio_assert(((int_64)*($5 + [72]) == (int_64)CALL $fimport$9()), [9893])
	*($4 + [8]) = ((int_64)*($4 + [8]) + (int_64)$7)
	*($4 + [24]) = ((int_64)*($4 + [24]) + (int_64)1)
	$0 = ($4 + [40])
	*($5 + [336]) = *($0)
	*($3) = $10
	*($8) = ((int_64)$1 + (int_64)$7)
	*($4 + [56]) = ((int_64)*($4 + [56]) | (int_64)(CASTING int_64)(int_32 ([1] << *($9 + [8]))))
	$1 = *($4)
	CALL eosio_assert([1], [9944])
	*($5 + [328]) = (($5 + [208]) + [108])
	*($5 + [324]) = ($5 + [208])
	*($5 + [320]) = ($5 + [208])
	*($5 + [344]) = ($5 + [320])
	*($5 + [356]) = ($4 + [8])
	*($5 + [352]) = $4
	*($5 + [360]) = ($4 + [16])
	*($5 + [364]) = ($4 + [24])
	*($5 + [368]) = $3
	*($5 + [372]) = $0
	*($5 + [376]) = ($4 + [48])
	*($5 + [380]) = ($4 + [56])
	*($5 + [384]) = ($4 + [64])
	*($5 + [388]) = ($4 + [68])
	*($5 + [392]) = ($4 + [72])
	*($5 + [396]) = ($4 + [80])
	*($5 + [400]) = $8
	*($5 + [404]) = ($4 + [96])
	*($5 + [408]) = ($4 + [104])
	CALL $37(($5 + [352]), ($5 + [344]))
	CALL db_update_i64(*($4 + [116]), $2, ($5 + [208]), [108])
	$8 = (($5 + [72]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$25 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$25
	*($5 + [352]) = *($0)
	if ( (CALL $90(($5 + [336]), ($5 + [352]), [8]) == 0) ){ goto $label$18 }
	$4 = ($4 + [120])
	$8 = *($4)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$26 }
	$8 = CALL db_idx64_find_primary(*($5 + [72]), *(($5 + [80])), (int_64)-6030912129153084416, ($5 + [344]), $1)
	*($4) = $8
	
.LABEL $label$26
	CALL db_idx64_update($8, $2, ($5 + [352]))
	if ( (*($5 + [56]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$1 = *($0)
	CALL eosio_assert(((int_64)*($5 + [72]) == (int_64)CALL $fimport$9()), [9761])
	*(($8 = CALL _Znwj([128])) + [40]) = (int_64)0
	*($8 + [112]) = ($5 + [72])
	*($8 + [8]) = $7
	*($8 + [88]) = $7
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = (int_64)1
	*($8) = *($12)
	*($8 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($8 + [56]) = ((int_64)*($8 + [56]) | (int_64)(CASTING int_64)(int_32 ([1] << *($9 + [8]))))
	*($5 + [328]) = (($5 + [208]) + [108])
	*($5 + [324]) = ($5 + [208])
	*($5 + [320]) = ($5 + [208])
	*($5 + [344]) = ($5 + [320])
	*($5 + [356]) = ($8 + [8])
	*($5 + [352]) = $8
	*($5 + [360]) = ($8 + [16])
	*($5 + [364]) = ($8 + [24])
	*($5 + [368]) = ($8 + [32])
	$3 = ($8 + [40])
	*($5 + [372]) = $3
	*($5 + [376]) = ($8 + [48])
	*($5 + [380]) = ($8 + [56])
	*($5 + [384]) = ($8 + [64])
	*($5 + [388]) = ($8 + [68])
	*($5 + [392]) = ($8 + [72])
	*($5 + [396]) = ($8 + [80])
	*($5 + [400]) = ($8 + [88])
	*($5 + [404]) = ($8 + [96])
	*($5 + [408]) = ($8 + [104])
	CALL $37(($5 + [352]), ($5 + [344]))
	$7 = *($8)
	*($8 + [116]) = CALL db_store_i64(*($4), (int_64)-6030912129153084416, $1, $7, ($5 + [208]), [108])
	$4 = (($5 + [72]) + [16])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$27 }
	*($4) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	$7 = *($8)
	$2 = *(($5 + [80]))
	*($5 + [352]) = *($3)
	*($8 + [120]) = CALL db_idx64_store($2, (int_64)-6030912129153084416, $1, $7, ($5 + [352]))
	*($5 + [352]) = $8
	$1 = *($8)
	*($5 + [208]) = $1
	$3 = *(($8 + [116]))
	*($5 + [320]) = $3
	$0 = ($5 + [100])
	$4 = *($0)
	if ( ((uint_32)$4 >= (uint_32)*((($5 + [72]) + [32]))) ){ goto $label$29 }
	*($4 + [8]) = $1
	*($4 + [16]) = $3
	*($5 + [352]) = [0]
	*($4) = $8
	*($0) = ($4 + [24])
	$8 = *($5 + [352])
	*($5 + [352]) = [0]
	if ( $8 ){ goto $label$28 }
	goto $label$18 
	
.LABEL $label$29
	CALL $38(($5 + [96]), ($5 + [352]), ($5 + [208]), ($5 + [320]))
	$8 = *($5 + [352])
	*($5 + [352]) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	
.LABEL $label$28
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($11 + [8])))
	
.LABEL $label$16
	$3 = *($5 + [96])
	if ( ($3 == 0) ){ goto $label$30 }
	$0 = ($5 + [100])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$32 }
	
.LOOP $label$33:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$34 }
	CALL _ZdlPv($4)
	
.LABEL $label$34
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$33 }
	$8 = *(($5 + [96]))
	goto $label$31 
	
.LABEL $label$32
	$8 = $3
	
.LABEL $label$31
	*($0) = $3
	CALL _ZdlPv($8)
	
.LABEL $label$30
	$3 = *($5 + [136])
	if ( ($3 == 0) ){ goto $label$3 }
	$0 = ($5 + [140])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$36 }
	
.LOOP $label$37:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$38 }
	CALL _ZdlPv($4)
	
.LABEL $label$38
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$37 }
	$8 = *(($5 + [136]))
	goto $label$35 
	
.LABEL $label$36
	$8 = $3
	
.LABEL $label$35
	*($0) = $3
	CALL _ZdlPv($8)
	goto $label$3 
	
.LABEL $label$6
	$8 = ($8 + [1])
	$11 = CALL $84($4, [44], $8)
	CALL eosio_assert([1], [8557])
	CALL $82(($5 + [208]), $4, $8, ($11 - $8), $4)
	if ( (*($5 + [320]) & [1]) ){ goto $label$40 }
	*($10 + [1]) = [0]
	*($5 + [320]) = [0]
	goto $label$39 
	
.LABEL $label$40
	*(*($10 + [8])) = [0]
	*(($10 + [4])) = [0]
	
.LABEL $label$39
	CALL $83($10, [0])
	*((($5 + [320]) + [8])) = *((($5 + [208]) + [8]))
	*($5 + [320]) = *($5 + [208])
	$8 = *($10 + [8])
	$4 = ($4 & [1])
	$4 = *($5 + [320])
	*($5 + [36]) = ( *(($10 + [4])) ? uint_32($4 >> [1]) : $4 )
	*($5 + [32]) = ( $8 ? ($10 + [1]) : $4 )
	*($5) = *($5 + [32])
	$1 = *(CALL $2(($5 + [208]), $5))
	*((($5 + [352]) + [32])) = [0]
	*($5 + [360]) = $1
	*($5 + [368]) = (int_64)-1
	*($5 + [376]) = (int_64)0
	$7 = *($0)
	*($5 + [352]) = $7
	$8 = CALL db_find_i64($7, $1, (int_64)-3665743317141815296, *($3 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $34(($5 + [352]), $8)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)($5 + [352])), [9687])
	$7 = *($0)
	CALL eosio_assert([1], [9812])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)($5 + [352])), [9847])
	CALL eosio_assert(((int_64)*($5 + [352]) == (int_64)CALL $fimport$9()), [9893])
	*($8 + [56]) = ((int_64)*($8 + [56]) + (int_64)*($3))
	$1 = *($8)
	CALL eosio_assert([1], [9944])
	*($5 + [80]) = (($5 + [208]) + [64])
	*($5 + [76]) = ($5 + [208])
	*($5 + [72]) = ($5 + [208])
	*($5 + [56]) = ($5 + [72])
	*($5 + [116]) = ($8 + [8])
	*($5 + [112]) = $8
	*($5 + [120]) = ($8 + [16])
	*($5 + [124]) = ($8 + [24])
	*($5 + [128]) = ($8 + [32])
	*($5 + [132]) = ($8 + [40])
	*($5 + [136]) = ($8 + [48])
	*($5 + [140]) = ($8 + [56])
	CALL $35(($5 + [112]), ($5 + [56]))
	CALL db_update_i64(*($8 + [68]), $7, ($5 + [208]), [64])
	$8 = (($5 + [352]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$41 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$41
	$3 = *($5 + [376])
	if ( ($3 == 0) ){ goto $label$5 }
	$0 = ($5 + [380])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$43 }
	
.LOOP $label$44:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$44 }
	$8 = *(($5 + [376]))
	goto $label$42 
	
.LABEL $label$43
	$8 = $3
	
.LABEL $label$42
	*($0) = $3
	CALL _ZdlPv($8)
	if ( (*($5 + [320]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((*($5 + [320]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($10 + [8]))
	$3 = *($5 + [176])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = *($5 + [176])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$0 = ($5 + [180])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$47 }
	
.LOOP $label$48:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$49 }
	CALL _ZdlPv($4)
	
.LABEL $label$49
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$48 }
	$8 = *(($5 + [176]))
	goto $label$46 
	
.LABEL $label$47
	$8 = $3
	
.LABEL $label$46
	*($0) = $3
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($5 + [416])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [176]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $44(($4 + [16]), ($4 + [176]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($6 = (($4 + [160]) + [8]))) = $3
	$7 = *($4)
	*($4 + [160]) = $7
	*($4 + [144]) = $7
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [160])
	*($4 + [32]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [16])
	CALL $45(($4 + [176]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $97($2)
	$2 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [120])))
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return $2
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)7035924439720001536, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $33(($3 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($3 + [8])), [9687])
	$1 = *($0)
	CALL eosio_assert([1], [9812])
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($3 + [8])), [9847])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$9()), [9893])
	$0 = ($5 + [8])
	*($3 + [72]) = *($0)
	*($0) = $2
	$4 = *($5)
	CALL eosio_assert([1], [9944])
	CALL eosio_assert([1], [9345])
	CALL memcpy(($3 + [48]), $5, [8])
	CALL eosio_assert([1], [9345])
	CALL memcpy((($3 + [48]) | [8]), $0, [8])
	*($3 + [88]) = *($5 + [16])
	CALL eosio_assert([1], [9345])
	CALL memcpy((($3 + [48]) + [16]), ($3 + [88]), [1])
	CALL db_update_i64(*($5 + [24]), $1, ($3 + [48]), [17])
	$6 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$2 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($3 + [88]) = *($0)
	if ( (CALL $90(($3 + [72]), ($3 + [88]), [8]) == 0) ){ goto $label$3 }
	$0 = *($5 + [28])
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($3 + [8]), *(($3 + [16])), (int_64)7035924439720001536, ($3 + [80]), $4)
	*(($5 + [28])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, $1, ($3 + [88]))
	
.LABEL $label$3
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($3 + [36])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($3 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($3 + [96])
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $31(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $32(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $97($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [176])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = CALL db_find_i64($3, $3, (int_64)-5069197016484020224, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$4 }
	$4 = CALL $50(($2 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($2 + [8])), [9687])
	$5 = *($0)
	CALL eosio_assert([1], [9812])
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($2 + [8])), [9847])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$9()), [9893])
	*($4 + [8 align=1]) = *($1)
	*(($0 = ($4 + [16]))) = *(($1 + [8]))
	*(($6 = ($4 + [24]))) = *(($1 + [16]))
	*(($7 = ($4 + [32]))) = *(($1 + [24]))
	*(($8 = ($4 + [40]))) = *(($1 + [32]))
	$3 = *($4)
	CALL eosio_assert([1], [9944])
	CALL eosio_assert([1], [9345])
	CALL memcpy(($2 + [48]), $4, [8])
	*(($1 = (($2 + [96]) + [32]))) = *($8)
	*(($8 = (($2 + [96]) + [24]))) = *($7)
	*(($7 = (($2 + [96]) + [16]))) = *($6)
	*(($6 = (($2 + [96]) + [8]))) = *($0)
	*($2 + [96]) = *($4 + [8 align=1])
	*((($2 + [136]) + [32])) = *($1)
	*((($2 + [136]) + [24])) = *($8)
	*((($2 + [136]) + [16])) = *($7)
	*((($2 + [136]) + [8])) = *($6)
	*($2 + [136]) = *($2 + [96])
	CALL eosio_assert([1], [9345])
	CALL memcpy((($2 + [48]) | [8]), ($2 + [136]), [34])
	CALL db_update_i64(*($4 + [52]), $5, ($2 + [48]), [42])
	$4 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$3 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$0 = *($2 + [32])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$9()), [9761])
	*(($4 = CALL _Znwj([64])) + [48]) = ($2 + [8])
	*(($0 = ($4 + [40]))) = *(($1 + [32]))
	*(($6 = ($4 + [32]))) = *(($1 + [24]))
	*(($7 = ($4 + [24]))) = *(($1 + [16]))
	*(($8 = ($4 + [16]))) = *(($1 + [8]))
	*($4 + [8 align=1]) = *($1)
	CALL eosio_assert([1], [9345])
	CALL memcpy(($2 + [48]), $4, [8])
	*(($1 = (($2 + [96]) + [32]))) = *($0)
	*(($0 = (($2 + [96]) + [24]))) = *($6)
	*(($6 = (($2 + [96]) + [16]))) = *($7)
	*(($7 = (($2 + [96]) + [8]))) = *($8)
	*($2 + [96]) = *($4 + [8 align=1])
	*((($2 + [136]) + [32])) = *($1)
	*((($2 + [136]) + [24])) = *($0)
	*((($2 + [136]) + [16])) = *($6)
	*((($2 + [136]) + [8])) = *($7)
	*($2 + [136]) = *($2 + [96])
	CALL eosio_assert([1], [9345])
	CALL memcpy((($2 + [48]) | [8]), ($2 + [136]), [34])
	$3 = *($4)
	$0 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)-5069197016484020224, $5, $3, ($2 + [48]), [42])
	*($4 + [52]) = $0
	$1 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($1)) ){ goto $label$5 }
	*($1) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [136]) = $4
	$3 = *($4)
	*($2 + [48]) = $3
	*($2 + [96]) = $0
	$6 = ($2 + [36])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*(($2 + [40]))) ){ goto $label$7 }
	*($1 + [8]) = $3
	*($1 + [16]) = $0
	*($2 + [136]) = [0]
	*($1) = $4
	*($6) = ($1 + [24])
	$4 = *($2 + [136])
	*($2 + [136]) = [0]
	if ( $4 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $51(($2 + [32]), ($2 + [136]), ($2 + [48]), ($2 + [96]))
	$4 = *($2 + [136])
	*($2 + [136]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($6) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($2 + [176])
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9340])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9340])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $97($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$5 = *($0)
	*($3 + [8]) = $5
	*($3 + [16]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)-6030912129153084416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $36(($3 + [8]), $7)
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)($3 + [8])), [9687])
	
.LABEL $label$1
	if ( ((int_64)$2 == (int_64)$1) ){ goto $label$2 }
	$4 = ((int_64)*($0) != (int_64)$2)
	
.LABEL $label$2
	CALL eosio_assert($4, [8714])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((int_64)*($6 + [40]) == (int_64)$2) ){ goto $label$5 }
	$5 = *($0)
	CALL eosio_assert([1], [9812])
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)($3 + [8])), [9847])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$9()), [9893])
	*($6 + [48]) = (int_64)0
	$0 = ($6 + [40])
	*($3 + [160]) = *($0)
	*($0) = $2
	$1 = *($6)
	CALL eosio_assert([1], [9944])
	*($3 + [184]) = (($3 + [48]) + [108])
	*($3 + [180]) = ($3 + [48])
	*($3 + [176]) = ($3 + [48])
	*($3 + [168]) = ($3 + [176])
	*($3 + [196]) = ($6 + [8])
	*($3 + [192]) = $6
	*($3 + [200]) = ($6 + [16])
	*($3 + [204]) = ($6 + [24])
	*($3 + [208]) = ($6 + [32])
	*($3 + [212]) = $0
	*($3 + [216]) = ($6 + [48])
	*($3 + [220]) = ($6 + [56])
	*($3 + [224]) = ($6 + [64])
	*($3 + [228]) = ($6 + [68])
	*($3 + [232]) = ($6 + [72])
	*($3 + [236]) = ($6 + [80])
	*($3 + [240]) = ($6 + [88])
	*($3 + [244]) = ($6 + [96])
	*($3 + [248]) = ($6 + [104])
	CALL $37(($3 + [192]), ($3 + [168]))
	CALL db_update_i64(*($6 + [116]), $5, ($3 + [48]), [108])
	$4 = (($3 + [8]) + [16])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$7 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($3 + [192]) = *($0)
	if ( (CALL $90(($3 + [160]), ($3 + [192]), [8]) == 0) ){ goto $label$5 }
	$0 = ($6 + [120])
	$6 = *($0)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$8 }
	$6 = CALL db_idx64_find_primary(*($3 + [8]), *(($3 + [16])), (int_64)-6030912129153084416, ($3 + [168]), $1)
	*($0) = $6
	
.LABEL $label$8
	CALL db_idx64_update($6, $5, ($3 + [192]))
	$4 = *($3 + [32])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$9()), [9761])
	*(($6 = CALL _Znwj([128])) + [112]) = ($3 + [8])
	*($6 + [40]) = $2
	*($6) = $1
	*($3 + [184]) = (($3 + [48]) + [108])
	*($3 + [180]) = ($3 + [48])
	*($3 + [176]) = ($3 + [48])
	*($3 + [168]) = ($3 + [176])
	*($3 + [196]) = ($6 + [8])
	*($3 + [192]) = $6
	*($3 + [200]) = ($6 + [16])
	*($3 + [204]) = ($6 + [24])
	*($3 + [208]) = ($6 + [32])
	$0 = ($6 + [40])
	*($3 + [212]) = $0
	*($3 + [216]) = ($6 + [48])
	*($3 + [220]) = ($6 + [56])
	*($3 + [224]) = ($6 + [64])
	*($3 + [228]) = ($6 + [68])
	*($3 + [232]) = ($6 + [72])
	*($3 + [236]) = ($6 + [80])
	*($3 + [240]) = ($6 + [88])
	*($3 + [244]) = ($6 + [96])
	*($3 + [248]) = ($6 + [104])
	CALL $37(($3 + [192]), ($3 + [168]))
	$1 = *($6)
	$4 = (($3 + [8]) + [8])
	*($6 + [116]) = CALL db_store_i64(*($4), (int_64)-6030912129153084416, $5, $1, ($3 + [48]), [108])
	$7 = (($3 + [8]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$9 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$1 = *($6)
	$2 = *($4)
	*($3 + [192]) = *($0)
	*($6 + [120]) = CALL db_idx64_store($2, (int_64)-6030912129153084416, $5, $1, ($3 + [192]))
	*($3 + [192]) = $6
	$1 = *($6)
	*($3 + [48]) = $1
	$4 = *(($6 + [116]))
	*($3 + [176]) = $4
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)*((($3 + [8]) + [32]))) ){ goto $label$11 }
	*($0 + [8]) = $1
	*($0 + [16]) = $4
	*($3 + [192]) = [0]
	*($0) = $6
	*($7) = ($0 + [24])
	$6 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( $6 ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$11
	CALL $38(($3 + [32]), ($3 + [192]), ($3 + [48]), ($3 + [176]))
	$6 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	
.LABEL $label$10
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($3 + [36])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$14 }
	$6 = *(($3 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $4
	
.LABEL $label$12
	*($7) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$3
	$global$0 = ($3 + [256])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [80]) + [32]))) = [0]
	*(($8 = (($4 + [80]) + [24]))) = (int_64)0
	*(($9 = (($4 + [80]) + [16]))) = (int_64)0
	*(($10 = (($4 + [80]) + [8]))) = (int_64)0
	*($4 + [80]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[33]), [9340])
	CALL memcpy(($4 + [80]), $2, [34])
	*(($4 + [68])) = ($2 + [34])
	*((($4 + [48]) + [24])) = ($2 + $7)
	*($4 + [56]) = $1
	*($4 + [48]) = $0
	*($4 + [64]) = $2
	*(($11 = (($4 + [120]) + [32]))) = *($3)
	*(($3 = (($4 + [120]) + [24]))) = *($8)
	*(($8 = (($4 + [120]) + [16]))) = *($9)
	*(($9 = (($4 + [120]) + [8]))) = *($10)
	*($4 + [120]) = *($4 + [80])
	*((($4 + [160]) + [32])) = *($11)
	*((($4 + [160]) + [24])) = *($3)
	*((($4 + [160]) + [16])) = *($8)
	*((($4 + [160]) + [8])) = *($9)
	*($4 + [160]) = *($4 + [120])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	*(($5 = (($4 + [200]) + [32]))) = *((($4 + [160]) + [32]))
	$0 = *((($4 + [160]) + [24]))
	*((($4 + [200]) + [24])) = $0
	$1 = *((($4 + [160]) + [16]))
	*((($4 + [200]) + [16])) = $1
	$12 = *((($4 + [160]) + [8]))
	*((($4 + [200]) + [8])) = $12
	*((($4 + [8]) + [8])) = $12
	*((($4 + [8]) + [16])) = $1
	*((($4 + [8]) + [24])) = $0
	*((($4 + [8]) + [32])) = *($5)
	$0 = *($4 + [160])
	*($4 + [8]) = $0
	*($4 + [200]) = $0
	CALL void $3((int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $97($2)
	
.LABEL $label$5
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10129])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3104555588802052096)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10075])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10075])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $53(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9340])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9340])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9340])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [28])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($0, *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $5($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $83($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $83($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $80($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $55($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9345])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9345])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $61(CALL $62($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9345])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9345])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9345])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9345])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $61($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9345])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9345])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9345])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9345])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9345])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $88 (int_32 $0)
{
}

int_32 .FUNC $87 ()
{
	return [10396]
}

void .FUNC $86 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $90(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $89(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $80 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $94($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10392])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $94($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9340])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9340])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $92(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10392])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $92(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $97($0)
	
.LABEL $label$1
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $86($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9738])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [40]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [112]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [68])
	*($3 + [72]) = ($5 + [72])
	*($3 + [76]) = ($5 + [80])
	*($3 + [80]) = ($5 + [88])
	*($3 + [84]) = ($5 + [96])
	*($3 + [88]) = ($5 + [104])
	CALL $68(($3 + [32]), ($3 + [24]))
	*($5 + [120]) = [-1]
	*($5 + [116]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9345])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9345])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9345])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9345])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $97($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $81(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $81(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9738])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [20]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9340])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9340])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [9340])
	CALL memcpy(($3 + [16]), ($2 + [16]), [1])
	*($5 + [16]) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($5 + [28]) = [-1]
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$5 = ([1] << $2)
	$6 = [0]
	$7 = CALL db_find_i64($4, $4, (int_64)-6030912129153084416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $36(($3 + [8]), $7)
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)($3 + [8])), [9687])
	
.LABEL $label$1
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [8944])
	CALL eosio_assert(((*($6 + [64]) & $5) == 0), [8966])
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$5 }
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	if ( $2 ){ goto $label$3 }
	$4 = ( (int_64)0 ? (int_64)50 : (int_64)(*($6 + [40]) == 0) )
	goto $label$2 
	
.LABEL $label$5
	$4 = ( (int_64)20 ? (int_64)0 : ((int_64)((int_64)*($6 + [56]) & (int_64)1022) == (int_64)1022) )
	goto $label$2 
	
.LABEL $label$4
	$4 = ( (int_64)0 ? (int_64)20 : (int_64)(*($6 + [56]) == 0) )
	goto $label$2 
	
.LABEL $label$3
	$4 = (int_64)0
	$2 = ($2 + [-20])
	if ( ((uint_32)($2 & [255]) > (uint_32)[7]) ){ goto $label$2 }
	$2 = ($2 << [4])
	if ( (uint_64)(*($6 + [8]) <= ((int_64)*(($2 + [8736])) * (int_64)10000)) ){ goto $label$2 }
	$4 = *(($2 + [8744]))
	
.LABEL $label$2
	$1 = *($0)
	CALL eosio_assert($7, [9812])
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)($3 + [8])), [9847])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$9()), [9893])
	*($6 + [72]) = ((int_64)*($6 + [72]) + (int_64)$4)
	*($6 + [64]) = (*($6 + [64]) | $5)
	$2 = ($6 + [40])
	*($3 + [176]) = *($2)
	$4 = *($6)
	CALL eosio_assert([1], [9944])
	*($3 + [168]) = (($3 + [48]) + [108])
	*($3 + [164]) = ($3 + [48])
	*($3 + [160]) = ($3 + [48])
	*($3 + [184]) = ($3 + [160])
	*($3 + [196]) = ($6 + [8])
	*($3 + [192]) = $6
	*($3 + [200]) = ($6 + [16])
	*($3 + [204]) = ($6 + [24])
	*($3 + [208]) = ($6 + [32])
	*($3 + [212]) = $2
	*($3 + [216]) = ($6 + [48])
	*($3 + [220]) = ($6 + [56])
	*($3 + [224]) = ($6 + [64])
	*($3 + [228]) = ($6 + [68])
	*($3 + [232]) = ($6 + [72])
	*($3 + [236]) = ($6 + [80])
	*($3 + [240]) = ($6 + [88])
	*($3 + [244]) = ($6 + [96])
	*($3 + [248]) = ($6 + [104])
	CALL $37(($3 + [192]), ($3 + [184]))
	CALL db_update_i64(*($6 + [116]), $1, ($3 + [48]), [108])
	$0 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($0)) ){ goto $label$6 }
	*($0) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($3 + [192]) = *($2)
	if ( (CALL $90(($3 + [176]), ($3 + [192]), [8]) == 0) ){ goto $label$7 }
	$2 = ($6 + [120])
	$6 = *($2)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$8 }
	$6 = CALL db_idx64_find_primary(*($3 + [8]), *(($3 + [16])), (int_64)-6030912129153084416, ($3 + [184]), $4)
	*($2) = $6
	
.LABEL $label$8
	CALL db_idx64_update($6, $1, ($3 + [192]))
	
.LABEL $label$7
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$9 }
	$5 = ($3 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($3 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $0
	
.LABEL $label$10
	*($5) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$global$0 = ($3 + [256])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9340])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9340])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $64(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}