(data (i32.const 4) "\a0g\00\00")
(data (i32.const 16) "start_time must be after now\00")
(data (i32.const 48) "days must be more than 1 day\00")
(data (i32.const 80) "cannot create objects in table of another contract\00")
(data (i32.const 144) "cannot pass end iterator to erase\00")
(data (i32.const 192) "cannot increment end iterator\00")
(data (i32.const 224) "symbol must be EOS\00")
(data (i32.const 256) "max_quant must be positive\00")
(data (i32.const 288) "object passed to erase is not in multi_index\00")
(data (i32.const 336) "cannot erase objects in table of another contract\00")
(data (i32.const 400) "attempt to remove object that was not in multi_index\00")
(data (i32.const 464) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 528) "invalid symbol name\00")
(data (i32.const 560) "write\00")
(data (i32.const 576) "error reading iterator\00")
(data (i32.const 608) "read\00")
(data (i32.const 624) "get\00")
(data (i32.const 640) "quantity must be >= 10.0000 EOS\00")
(data (i32.const 672) "quantity must be integer\00")
(data (i32.const 704) "there is no invest\00")
(data (i32.const 736) "attempt to add asset with different symbol\00")
(data (i32.const 784) "addition underflow\00")
(data (i32.const 816) "addition overflow\00")
(data (i32.const 848) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 912) "quantity exceed max EOS \00")
(data (i32.const 944) "time has expired\00")
(data (i32.const 992) "cannot pass end iterator to modify\00")
(data (i32.const 1040) "object passed to modify is not in multi_index\00")
(data (i32.const 1088) "cannot modify objects in table of another contract\00")
(data (i32.const 1152) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1216) "please come to claim afetr expire_days\00")
(data (i32.const 1264) "multiplication overflow\00")
(data (i32.const 1296) "multiplication underflow\00")
(data (i32.const 1328) "divide by zero\00")
(data (i32.const 1344) "signed division overflow\00")
(data (i32.const 1376) "active\00")
(data (i32.const 1392) "eosio.token\00")
(data (i32.const 1408) "transfer\00")
(data (i32.const 1424) "send EOS to account\00")
(data (i32.const 1456) "account not exists\00")
(data (i32.const 1488) "Function name and other command must be separated with space or colon\00")
(data (i32.const 1568) "deposit\00")
(data (i32.const 1584) "reward\00")
(data (i32.const 1600) "memo format is error\00")
(data (i32.const 1632) "onerror\00")
(data (i32.const 10048) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN9eosinvest6invest6createEyyN5eosio5assetE" (func $5))
(export "_ZN9eosinvest6invest7depositEyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE" (func $17))
(export "_ZN9eosinvest6invest5claimEy" (func $22))
(export "apply" (func $31))
(export "malloc" (func $40))
(export "free" (func $43))
(export "isspace" (func $54))
(export "memchr" (func $55))
(export "memcmp" (func $56))
(export "strlen" (func $57))
(table $0 3 3 anyfunc)
(elem (i32.const 0) $58 $5 $22)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$7 = [0]
	*(($6 = (($2 = CALL memcpy($0, $1, [56])) + [60]))) = [0]
	*($2 + [56]) = $6
	*(($9 = ($2 + [64]))) = [0]
	$3 = ($1 + [60])
	$13 = *($1 + [56])
	if ( ((int_32)$13 == (int_32)$3) ){ goto $label$1 }
	$11 = ($2 + [56])
	$12 = ($2 + [60])
	$1 = $6
	
.LOOP $label$2:
	$4 = ($13 + [16])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$0 = $7
	if ( ($7 == 0) ){ goto $label$12 }
	
.LOOP $label$14:
	$1 = $0
	$0 = *($1 + [4])
	if ( $0 ){ goto $label$14 }
	goto $label$11 
	
.LABEL $label$13
	$1 = $6
	if ( $7 ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$12
	$0 = $6
	
.LOOP $label$15:
	$1 = *($0 + [8])
	$10 = ((int_32)*($1) == (int_32)$0)
	$0 = $1
	if ( $10 ){ goto $label$15 }
	
.LABEL $label$11
	$5 = *($4)
	if ( ((uint_64)*($1 + [16]) >= (uint_64)$5) ){ goto $label$9 }
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$10
	$7 = ($1 + [4])
	if ( *($7) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$9
	if ( ($7 == 0) ){ goto $label$8 }
	$0 = $6
	
.LOOP $label$16:
	$8 = *($7 + [16])
	if ( ((uint_64)$5 >= (uint_64)$8) ){ goto $label$18 }
	$1 = *($7)
	if ( $1 ){ goto $label$17 }
	goto $label$7 
	
.LABEL $label$18
	if ( ((uint_64)$8 >= (uint_64)$5) ){ goto $label$6 }
	$0 = ($7 + [4])
	$1 = *($7 + [4])
	if ( ($1 == 0) ){ goto $label$5 }
	$7 = $0
	
.LABEL $label$17
	$0 = $7
	$7 = $1
	goto $label$16 
	
.LABEL $label$8
	$1 = $6
	$7 = $6
	if ( *($7) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$7
	$1 = $7
	if ( *($7) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	$1 = $7
	$7 = $0
	if ( *($7) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$1 = $7
	$7 = $0
	if ( *($7) ){ goto $label$3 }
	
.LABEL $label$4
	*((($0 = CALL $44([40])) + [32])) = *(($4 + [16]))
	*(($0 + [24])) = *(($4 + [8]))
	*($0 + [16]) = *($4)
	*($0) = (int_64)0
	*($0 + [8]) = $1
	*($7) = $0
	$1 = *(*($11))
	if ( ($1 == 0) ){ goto $label$19 }
	*($11) = $1
	$0 = *($7)
	
.LABEL $label$19
	CALL $16(*($12), $0)
	*($9) = (*($9) + [1])
	
.LABEL $label$3
	$1 = *($13 + [4])
	if ( ($1 == 0) ){ goto $label$21 }
	
.LOOP $label$22:
	$0 = $1
	$1 = *($0)
	if ( $1 ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$0 = *($13 + [8])
	if ( ((int_32)*($0) == (int_32)$13) ){ goto $label$20 }
	$7 = ($13 + [8])
	
.LOOP $label$23:
	$1 = *($7)
	$7 = ($1 + [8])
	$0 = *($1 + [8])
	if ( ((int_32)$1 != (int_32)*($0)) ){ goto $label$23 }
	
.LABEL $label$20
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	$7 = *($12)
	$1 = *($11)
	$13 = $0
	goto $label$2 
	
.LABEL $label$1
	return $2
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$6 = *($1 + [4])
	if ( ($6 == 0) ){ goto $label$3 }
	$8 = ($1 + [4])
	$9 = *($2)
	
.LOOP $label$4:
	$7 = *($6 + [16])
	if ( ((uint_64)$9 >= (uint_64)$7) ){ goto $label$6 }
	$2 = *($6)
	if ( $2 ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$6
	if ( ((uint_64)$7 >= (uint_64)$9) ){ goto $label$1 }
	$8 = ($6 + [4])
	$2 = *($6 + [4])
	if ( ($2 == 0) ){ goto $label$1 }
	$6 = $8
	
.LABEL $label$5
	$8 = $6
	$6 = $2
	goto $label$4 
	
.LABEL $label$3
	$6 = ($1 + [4])
	
.LABEL $label$2
	$8 = $6
	
.LABEL $label$1
	$2 = [0]
	$10 = *($8)
	if ( $10 ){ goto $label$7 }
	*(($10 = CALL $44([40])) + [16]) = *(*($4))
	*($10 + [24]) = (int_64)0
	*($10 + [32]) = (int_64)1398362884
	CALL eosio_assert([1], [464])
	$9 = (int_64)5462355
	$2 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$4 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$4 = [0]
	
.LABEL $label$8
	CALL eosio_assert($4, [528])
	*($10 + [8]) = $6
	*($10) = (int_64)0
	*($8) = $10
	$6 = *(*($1))
	if ( ($6 == 0) ){ goto $label$14 }
	*($1) = $6
	$6 = *($8)
	goto $label$13 
	
.LABEL $label$14
	$6 = $10
	
.LABEL $label$13
	CALL $16(*($1 + [4]), $6)
	$2 = [1]
	*($1 + [8]) = (*($1 + [8]) + [1])
	
.LABEL $label$7
	*($0 + [4]) = $2
	*($0) = $10
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [624])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $23($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [608])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [560])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [560])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [560])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (*($0 + [8]) == 0) ){ goto $label$2 }
	$10 = *($0)
	$3 = ($0 + [4])
	*($0) = $3
	$8 = *($0 + [4])
	*($0 + [4]) = [0]
	*(($5 = ($0 + [8]))) = [0]
	*($8 + [8]) = [0]
	$8 = *($10 + [4])
	$10 = ( $8 ? $10 : $8 )
	if ( ($10 == 0) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	$9 = $10
	$4 = $1
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$1 }
	$6 = *($4 + [16])
	*($9 + [16]) = $6
	*(($9 + [32])) = *(($4 + [32]))
	*(($9 + [24])) = *($4 + [24])
	$10 = *($9 + [8])
	if ( ($10 == 0) ){ goto $label$9 }
	$1 = *($10)
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$8 }
	*($10 + [4]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LOOP $label$10:
	$10 = $1
	$1 = *($10)
	if ( $1 ){ goto $label$10 }
	$1 = *($10 + [4])
	if ( $1 ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$10 = [0]
	$1 = *($3)
	if ( $1 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$8
	*($10) = [0]
	
.LOOP $label$11:
	$1 = *($10 + [4])
	if ( ($1 == 0) ){ goto $label$7 }
	
.LOOP $label$12:
	$10 = $1
	$1 = *($10)
	if ( $1 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$7
	$1 = *($3)
	if ( $1 ){ goto $label$5 }
	
.LABEL $label$6
	$1 = $3
	$8 = $3
	goto $label$4 
	
.LABEL $label$5
	
.LOOP $label$15:
	if ( ((uint_64)$6 >= (uint_64)*($1 + [16])) ){ goto $label$17 }
	$8 = *($1)
	if ( $8 ){ goto $label$16 }
	goto $label$13 
	
.LABEL $label$17
	$8 = *($1 + [4])
	if ( ($8 == 0) ){ goto $label$14 }
	
.LABEL $label$16
	$1 = $8
	goto $label$15 
	
.LABEL $label$14
	$8 = ($1 + [4])
	goto $label$4 
	
.LABEL $label$13
	$8 = $1
	
.LABEL $label$4
	*($9) = (int_64)0
	*(($9 + [8])) = $1
	*($8) = $9
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$18 }
	*($0) = $1
	$9 = *($8)
	
.LABEL $label$18
	CALL $16(*($7), $9)
	*($5) = (*($5) + [1])
	$8 = *($4 + [4])
	if ( ($8 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	$1 = $8
	$8 = *($1)
	if ( $8 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$1 = *($4 + [8])
	if ( ((int_32)*($1) == (int_32)$4) ){ goto $label$19 }
	$9 = ($4 + [8])
	
.LOOP $label$22:
	$8 = *($9)
	$9 = ($8 + [8])
	$1 = *($8 + [8])
	if ( ((int_32)$8 != (int_32)*($1)) ){ goto $label$22 }
	
.LABEL $label$19
	if ( $10 ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$23 }
	$5 = ($0 + [4])
	$4 = ($0 + [8])
	
.LOOP $label$24:
	$9 = $1
	*((($8 = CALL $44([40])) + [32])) = *(($9 + [32]))
	*(($8 + [24])) = *(($9 + [24]))
	*($8 + [16]) = *($9 + [16])
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$27 }
	$6 = *(($8 + [16]))
	
.LOOP $label$29:
	if ( ((uint_64)$6 >= (uint_64)*($1 + [16])) ){ goto $label$31 }
	$10 = *($1)
	if ( $10 ){ goto $label$30 }
	goto $label$26 
	
.LABEL $label$31
	$10 = *($1 + [4])
	if ( ($10 == 0) ){ goto $label$28 }
	
.LABEL $label$30
	$1 = $10
	goto $label$29 
	
.LABEL $label$28
	$10 = ($1 + [4])
	goto $label$25 
	
.LABEL $label$27
	$1 = $5
	$10 = $5
	goto $label$25 
	
.LABEL $label$26
	$10 = $1
	
.LABEL $label$25
	*($8 + [8]) = $1
	*($8) = (int_64)0
	*($10) = $8
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$32 }
	*($0) = $1
	$8 = *($10)
	
.LABEL $label$32
	CALL $16(*(($0 + [4])), $8)
	*($4) = (*($4) + [1])
	$10 = *($9 + [4])
	if ( ($10 == 0) ){ goto $label$34 }
	
.LOOP $label$35:
	$1 = $10
	$10 = *($1)
	if ( $10 ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$1 = *($9 + [8])
	if ( ((int_32)*($1) == (int_32)$9) ){ goto $label$33 }
	$8 = ($9 + [8])
	
.LOOP $label$36:
	$10 = *($8)
	$8 = ($10 + [8])
	$1 = *($10 + [8])
	if ( ((int_32)$10 != (int_32)*($1)) ){ goto $label$36 }
	
.LABEL $label$33
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$24 }
	
.LABEL $label$23
	return 
	
.LABEL $label$1
	
.LOOP $label$38:
	$1 = *($9 + [8])
	if ( ($1 == 0) ){ goto $label$37 }
	$9 = $1
	goto $label$38 
	
.LABEL $label$37
	CALL $10($0, $9)
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [1040])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1088])
	$4 = *($1)
	$3 = CALL memcpy($1, $2, [56])
	$2 = *($2)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	CALL $21(($3 + [56]), *($2 + [56]), ($2 + [60]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($3)), [1152])
	$6 = *(($3 + [64]))
	$8 = [52]
	
.LOOP $label$2:
	$8 = ($8 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	$5 = ($3 + [60])
	$2 = *($3 + [56])
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = $2
	$1 = *($7 + [4])
	if ( ($1 == 0) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = $1
	$1 = *($2)
	if ( $1 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$2 = *($7 + [8])
	if ( ((int_32)*($2) == (int_32)$7) ){ goto $label$5 }
	$7 = ($7 + [8])
	
.LOOP $label$8:
	$1 = *($7)
	$7 = ($1 + [8])
	$2 = *($1 + [8])
	if ( ((int_32)$1 != (int_32)*($2)) ){ goto $label$8 }
	
.LABEL $label$5
	$8 = ($8 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($8 <= [513]) ){ goto $label$10 }
	$1 = CALL malloc($8)
	goto $label$9 
	
.LABEL $label$10
	$1 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$9
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = ($1 + $8)
	*($9 + [16]) = $9
	*($9 + [24]) = $3
	*($9 + [28]) = ($3 + [8])
	*($9 + [32]) = ($3 + [16])
	*($9 + [36]) = ($3 + [24])
	*($9 + [40]) = ($3 + [40])
	*($9 + [44]) = ($3 + [56])
	CALL $12(($9 + [24]), ($9 + [16]))
	CALL db_update_i64(*($3 + [72]), (int_64)0, $1, $8)
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL free($1)
	
.LABEL $label$11
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $44($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $51($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $45($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZN9eosinvest6invest5claimEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [272])
	*([0] + [4]) = $18
	*($18 + [232]) = $1
	CALL require_auth($1)
	*(($18 + [224])) = [0]
	*($18 + [208]) = (int_64)-1
	$1 = *($0)
	*($18 + [192]) = $1
	*($18 + [200]) = $1
	*($18 + [216]) = (int_64)0
	$10 = [0]
	$11 = CALL db_lowerbound_i64($1, $1, (int_64)8428113306008236032, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $6(($18 + [192]), $11)
	
.LABEL $label$1
	$2 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($2, [704])
	$8 = CALL $18(($18 + [120]), $10)
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)((int_64)((int_64)*($8 + [16]) * (int_64)86400) + (int_64)*($8 + [8]))), [1216])
	*($18 + [80]) = ($18 + [232])
	$3 = ($8 + [56])
	CALL $19(($18 + [32]), $3, ($18 + [232]), [976], ($18 + [80]), ($18 + [256]))
	if ( ((int_64)*((*($18 + [32]) + [24])) < (int_64)1) ){ goto $label$7 }
	*($18 + [80]) = ($18 + [232])
	CALL $19(($18 + [32]), $3, ($18 + [232]), [976], ($18 + [80]), ($18 + [256]))
	$1 = (int_64)0
	$11 = *($18 + [32])
	$12 = *(($11 + [24]))
	CALL __multi3($18, $12, (int_64)$12 >> (int_64)63), (int_64)15, (int_64)0)
	$4 = *(($11 + [32]))
	$14 = *(($18 + [8]))
	$13 = *($18)
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$14 < (int_64)0) : (int_64)($14 == 0) ), [1264])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$14 > (int_64)-1) : ((int_64)$14 == (int_64)-1) ), [1296])
	CALL eosio_assert([1], [1328])
	CALL eosio_assert([1], [1344])
	CALL eosio_assert([1], [736])
	$5 = ((int_64)$12 + (int_64)((int_64)$13 / (int_64)1200))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [784])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [816])
	$6 = *($0)
	$12 = (int_64)59
	$11 = [1376]
	$13 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$13 }
	$9 = *($11)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$9 = ($9 + [165])
	goto $label$11 
	
.LABEL $label$13
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$9
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$8 }
	$1 = (int_64)0
	$12 = (int_64)59
	$11 = [1392]
	$15 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$19 }
	$9 = *($11)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$9 = ($9 + [165])
	goto $label$17 
	
.LABEL $label$19
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$15
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$15 = ((int_64)$14 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$14 }
	$1 = (int_64)0
	$12 = (int_64)59
	$11 = [1408]
	$16 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$25 }
	$9 = *($11)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$9 = ($9 + [165])
	goto $label$23 
	
.LABEL $label$25
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$21
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$20 }
	*(($18 + [24])) = [0]
	*($18 + [16]) = (int_64)0
	$11 = CALL strlen([1424])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$6 }
	*($18 + [16]) = ($11 << [1])
	$9 = (($18 + [16]) | [1])
	if ( $11 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL eosio_assert([0], [1456])
	goto $label$3 
	
.LABEL $label$6
	$17 = (($11 + [16]) & [-16])
	$9 = CALL $44($17)
	*($18 + [16]) = ($17 | [1])
	*($18 + [24]) = $9
	*($18 + [20]) = $11
	
.LABEL $label$5
	CALL memcpy($9, [1424], $11)
	
.LABEL $label$4
	*(($9 + $11)) = [0]
	*((($18 + [32]) + [24])) = $4
	*($18 + [32]) = *($0)
	*($18 + [40]) = *($18 + [232])
	$11 = ($18 + [24])
	*(($18 + [72])) = *($11)
	*($18 + [48]) = $5
	*($18 + [64]) = *($18 + [16])
	*($18 + [16]) = [0]
	*($18 + [20]) = [0]
	*($11) = [0]
	*($18 + [80]) = $15
	*($18 + [88]) = $16
	*($18 + [96]) = [0]
	*(($9 = ($18 + [100]))) = [0]
	*(($0 = (($18 + [80]) + [24]))) = [0]
	*(($11 = CALL $44([16]))) = $6
	*($11 + [8]) = $13
	*((($18 + [80]) + [32])) = [0]
	$17 = ($11 + [16])
	*($0) = $17
	*($9) = $17
	*($18 + [96]) = $11
	*($18 + [108]) = [0]
	*((($18 + [80]) + [36])) = [0]
	$11 = *($18 + [64])
	$9 = ( *((($18 + [32]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($9 + [32])
	$1 = (CASTING uint_64)(uint_32 $9)
	$9 = ($18 + [108])
	
.LOOP $label$26:
	$11 = ($11 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$26 }
	if ( ($11 == 0) ){ goto $label$28 }
	CALL $23($9, $11)
	$9 = *(($18 + [112]))
	$11 = *(($18 + [108]))
	goto $label$27 
	
.LABEL $label$28
	$9 = [0]
	$11 = [0]
	
.LABEL $label$27
	*($18 + [260]) = $11
	*($18 + [256]) = $11
	*($18 + [264]) = $9
	*($18 + [240]) = ($18 + [256])
	*($18 + [248]) = ($18 + [32])
	CALL $24(($18 + [248]), ($18 + [240]))
	CALL $25(($18 + [256]), ($18 + [80]))
	$11 = *($18 + [256])
	CALL send_inline($11, (*($18 + [260]) - $11))
	$11 = *($18 + [256])
	if ( ($11 == 0) ){ goto $label$29 }
	*($18 + [260]) = $11
	CALL $45($11)
	
.LABEL $label$29
	$11 = *($18 + [108])
	if ( ($11 == 0) ){ goto $label$30 }
	*(($18 + [112])) = $11
	CALL $45($11)
	
.LABEL $label$30
	$11 = *($18 + [96])
	if ( ($11 == 0) ){ goto $label$31 }
	*(($18 + [100])) = $11
	CALL $45($11)
	
.LABEL $label$31
	if ( ((*(($18 + [64])) & [1]) == 0) ){ goto $label$32 }
	CALL $45(*(($18 + [72])))
	
.LABEL $label$32
	if ( ((*($18 + [16]) & [1]) == 0) ){ goto $label$33 }
	CALL $45(*(($18 + [24])))
	
.LABEL $label$33
	$9 = ($8 + [60])
	$7 = *($9)
	if ( ($7 == 0) ){ goto $label$34 }
	$1 = *($18 + [232])
	$0 = $9
	$11 = $7
	
.LOOP $label$36:
	if ( ((uint_64)*($11 + [16]) >= (uint_64)$1) ){ goto $label$37 }
	$11 = *($11 + [4])
	if ( $11 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$0 = $11
	$17 = *($11)
	$11 = $17
	if ( $17 ){ goto $label$36 }
	
.LABEL $label$35
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$34 }
	if ( (uint_64)($1 <= *($0 + [16])) ){ goto $label$34 }
	$11 = *($0 + [4])
	if ( ($11 == 0) ){ goto $label$39 }
	
.LOOP $label$40:
	$9 = $11
	$11 = *($9)
	if ( $11 ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$9 = *($0 + [8])
	if ( ((int_32)*($9) == (int_32)$0) ){ goto $label$38 }
	$17 = ($0 + [8])
	
.LOOP $label$41:
	$11 = *($17)
	$17 = ($11 + [8])
	$9 = *($11 + [8])
	if ( ((int_32)$11 != (int_32)*($9)) ){ goto $label$41 }
	
.LABEL $label$38
	if ( ((int_32)*($3) != (int_32)$0) ){ goto $label$42 }
	*($3) = $9
	
.LABEL $label$42
	*(($11 = ($8 + [64]))) = (*($11) + [-1])
	CALL $26($7, $0)
	CALL $45($0)
	
.LABEL $label$34
	*($18 + [32]) = $8
	CALL eosio_assert($2, [992])
	CALL $27(($18 + [192]), $10, ($18 + [32]))
	
.LABEL $label$3
	CALL $10(($8 + [56]), *(($8 + [60])))
	$8 = *($18 + [216])
	if ( ($8 == 0) ){ goto $label$43 }
	$10 = ($18 + [220])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$45 }
	
.LOOP $label$46:
	$11 = ($11 + [-24])
	$9 = *($11)
	*($11) = [0]
	if ( ($9 == 0) ){ goto $label$47 }
	CALL $10(($9 + [56]), *(($9 + [60])))
	CALL $45($9)
	
.LABEL $label$47
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$46 }
	$11 = *(($18 + [216]))
	goto $label$44 
	
.LABEL $label$45
	$11 = $8
	
.LABEL $label$44
	*($10) = $8
	CALL $45($11)
	
.LABEL $label$43
	*([0] + [4]) = ($18 + [272])
	return (unreachable)
	
.LABEL $label$2
	CALL $46(($18 + [16]))
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [560])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [560])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $29(CALL $28($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [560])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $30(*($1), ($0 + [32]))
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [1040])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1088])
	$4 = *($1)
	$3 = CALL memcpy($1, $2, [56])
	$2 = *($2)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	CALL $21(($3 + [56]), *($2 + [56]), ($2 + [60]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($3)), [1152])
	$6 = *(($3 + [64]))
	$8 = [52]
	
.LOOP $label$2:
	$8 = ($8 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	$5 = ($3 + [60])
	$2 = *($3 + [56])
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = $2
	$1 = *($7 + [4])
	if ( ($1 == 0) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = $1
	$1 = *($2)
	if ( $1 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$2 = *($7 + [8])
	if ( ((int_32)*($2) == (int_32)$7) ){ goto $label$5 }
	$7 = ($7 + [8])
	
.LOOP $label$8:
	$1 = *($7)
	$7 = ($1 + [8])
	$2 = *($1 + [8])
	if ( ((int_32)$1 != (int_32)*($2)) ){ goto $label$8 }
	
.LABEL $label$5
	$8 = ($8 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($8 <= [513]) ){ goto $label$10 }
	$1 = CALL malloc($8)
	goto $label$9 
	
.LABEL $label$10
	$1 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$9
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = ($1 + $8)
	*($9 + [16]) = $9
	*($9 + [24]) = $3
	*($9 + [28]) = ($3 + [8])
	*($9 + [32]) = ($3 + [16])
	*($9 + [36]) = ($3 + [24])
	*($9 + [40]) = ($3 + [40])
	*($9 + [44]) = ($3 + [56])
	CALL $12(($9 + [24]), ($9 + [16]))
	CALL db_update_i64(*($3 + [72]), (int_64)0, $1, $8)
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL free($1)
	
.LABEL $label$11
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$2 }
	$7 = $1
	$6 = *($1 + [4])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$7 = $6
	$6 = *($7)
	if ( $6 ){ goto $label$3 }
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$7 = $1
	
.LABEL $label$1
	$2 = *(( $7 ? ($7 + [4]) : $2 ))
	if ( ($2 == 0) ){ goto $label$4 }
	*($2 + [8]) = *(($7 + [8]))
	
.LABEL $label$4
	$6 = *(($7 + [8]))
	if ( ((int_32)*($6) == (int_32)$7) ){ goto $label$8 }
	*($6 + [4]) = $2
	goto $label$7 
	
.LABEL $label$8
	*($6) = $2
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$6 }
	$6 = ($6 + [4])
	
.LABEL $label$7
	$6 = *($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	$0 = $2
	
.LABEL $label$5
	$3 = *($7 + [12])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$9 }
	$4 = *($1 + [8])
	*(($7 + [8])) = $4
	*(( $4 ? ($4 + [4]) : ((int_32)*(*($1 + [8])) == (int_32)$1) )) = $7
	$5 = *($1)
	*($7) = $5
	$4 = *($1 + [4])
	*(($7 + [4])) = $4
	*($5 + [8]) = $7
	if ( ($4 == 0) ){ goto $label$10 }
	*($4 + [8]) = $7
	
.LABEL $label$10
	*(($7 + [12])) = *($1 + [12])
	$0 = ( $7 ? $0 : ((int_32)$0 == (int_32)$1) )
	
.LABEL $label$9
	if ( (($3 & [255]) == 0) ){ goto $label$11 }
	if ( ($0 == 0) ){ goto $label$11 }
	if ( ($2 == 0) ){ goto $label$12 }
	*($2 + [12]) = [1]
	return 
	
.LABEL $label$12
	
.LOOP $label$26:
	$1 = *($6 + [12])
	$7 = *($6 + [8])
	if ( ((int_32)*($7) == (int_32)$6) ){ goto $label$28 }
	if ( ($1 & [255]) ){ goto $label$29 }
	*(($6 + [12])) = [1]
	*($7 + [12]) = [0]
	$1 = *($7 + [4])
	$2 = *($1)
	*($7 + [4]) = $2
	if ( ($2 == 0) ){ goto $label$30 }
	*($2 + [8]) = $7
	
.LABEL $label$30
	*($1 + [8]) = *($7 + [8])
	*(( ($2 = *($7 + [8])) ? ($2 + [4]) : ((int_32)*($2) == (int_32)$7) )) = $1
	*($1) = $7
	*($7 + [8]) = $1
	$7 = *($6)
	$0 = ( $6 ? $0 : ((int_32)$0 == (int_32)$7) )
	$6 = *($7 + [4])
	
.LABEL $label$29
	$7 = *($6)
	if ( ($7 == 0) ){ goto $label$31 }
	if ( (*($7 + [12]) == 0) ){ goto $label$22 }
	
.LABEL $label$31
	$1 = *($6 + [4])
	if ( ($1 == 0) ){ goto $label$32 }
	if ( (*($1 + [12]) == 0) ){ goto $label$21 }
	
.LABEL $label$32
	*($6 + [12]) = [0]
	$6 = *($6 + [8])
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$24 }
	if ( *($6 + [12]) ){ goto $label$27 }
	goto $label$23 
	
.LABEL $label$28
	if ( ($1 & [255]) ){ goto $label$33 }
	*(($6 + [12])) = [1]
	*($7 + [12]) = [0]
	$1 = *($7)
	$2 = *($1 + [4])
	*($7) = $2
	if ( ($2 == 0) ){ goto $label$34 }
	*($2 + [8]) = $7
	
.LABEL $label$34
	*($1 + [8]) = *($7 + [8])
	*(( ($2 = *($7 + [8])) ? ($2 + [4]) : ((int_32)*($2) == (int_32)$7) )) = $1
	*(($1 + [4])) = $7
	*($7 + [8]) = $1
	$7 = *($6 + [4])
	$0 = ( $6 ? $0 : ((int_32)$0 == (int_32)$7) )
	$6 = *($7)
	
.LABEL $label$33
	$7 = *($6)
	if ( ($7 == 0) ){ goto $label$35 }
	if ( (*($7 + [12]) == 0) ){ goto $label$16 }
	
.LABEL $label$35
	$1 = *($6 + [4])
	if ( ($1 == 0) ){ goto $label$36 }
	if ( (*($1 + [12]) == 0) ){ goto $label$17 }
	
.LABEL $label$36
	*($6 + [12]) = [0]
	$6 = *($6 + [8])
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$25 }
	if ( ((*($6 + [12]) & [255]) == 0) ){ goto $label$25 }
	
.LABEL $label$27
	$7 = *($6 + [8])
	$6 = *(( ($7 + [4]) ? $7 : ((int_32)*($7) == (int_32)$6) ))
	goto $label$26 
	
.LABEL $label$25
	*(($6 + [12])) = [1]
	return 
	
.LABEL $label$24
	$6 = $0
	
.LABEL $label$23
	*($6 + [12]) = [1]
	return 
	
.LABEL $label$22
	$1 = *($6 + [4])
	if ( ($1 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	if ( (*($1 + [12]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	*($7 + [12]) = [1]
	*($6 + [12]) = [0]
	$1 = *($7 + [4])
	*($6) = $1
	if ( ($1 == 0) ){ goto $label$37 }
	*($1 + [8]) = $6
	
.LABEL $label$37
	*($7 + [8]) = *($6 + [8])
	*(( ($1 = *($6 + [8])) ? ($1 + [4]) : ((int_32)*($1) == (int_32)$6) )) = $7
	*($6 + [8]) = $7
	*(($7 + [4])) = $6
	$1 = $6
	goto $label$18 
	
.LABEL $label$19
	$7 = $6
	
.LABEL $label$18
	$6 = *($7 + [8])
	*($7 + [12]) = *($6 + [12])
	*($6 + [12]) = [1]
	*($1 + [12]) = [1]
	$7 = *($6 + [4])
	$1 = *($7)
	*($6 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$38 }
	*($1 + [8]) = $6
	
.LABEL $label$38
	*($7 + [8]) = *($6 + [8])
	*(( ($1 = *($6 + [8])) ? ($1 + [4]) : ((int_32)*($1) == (int_32)$6) )) = $7
	*($6 + [8]) = $7
	*($7) = $6
	return 
	
.LABEL $label$17
	if ( ($7 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($7 + [12]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	*(($1 = *($6 + [4])) + [12]) = [1]
	*($6 + [12]) = [0]
	$7 = *($1)
	*($6 + [4]) = $7
	if ( ($7 == 0) ){ goto $label$39 }
	*($7 + [8]) = $6
	
.LABEL $label$39
	*($1 + [8]) = *($6 + [8])
	*(( ($7 = *($6 + [8])) ? ($7 + [4]) : ((int_32)*($7) == (int_32)$6) )) = $1
	*($6 + [8]) = $1
	*($1) = $6
	$7 = $6
	goto $label$13 
	
.LABEL $label$14
	$1 = $6
	
.LABEL $label$13
	$6 = *($1 + [8])
	*($1 + [12]) = *($6 + [12])
	*($6 + [12]) = [1]
	*($7 + [12]) = [1]
	$7 = *($6)
	$1 = *($7 + [4])
	*($6) = $1
	if ( ($1 == 0) ){ goto $label$40 }
	*($1 + [8]) = $6
	
.LABEL $label$40
	*($7 + [8]) = *($6 + [8])
	*(( ($1 = *($6 + [8])) ? ($1 + [4]) : ((int_32)*($1) == (int_32)$6) )) = $7
	*($6 + [8]) = $7
	*(($7 + [4])) = $6
	
.LABEL $label$11
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10024])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9832]
	$1 = (((int_32)$2 * (int_32)[12]) + [9832])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10134]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10136])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10134]) = [1]
	$7 = ($7 << [16])
	*([0] + [10136]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10136])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10136]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10134]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10134]) = [1]
	$3 = ($3 << [16])
	*([0] + [10136]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10136])
	
.LABEL $label$8
	*([0] + [10136]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $42($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10048])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $41([1640], $0)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $44(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $45($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $46 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $45 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10140])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $51 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	$11 = $12
	*([0] + [4]) = $12
	$8 = *($0 + [4])
	*($1) = *(*($8))
	$2 = *($0)
	*($1 + [8]) = *(*($8))
	*($1 + [16]) = *(*($8 + [4]))
	$8 = *($8 + [8])
	*($1 + [24]) = *($8)
	*(($1 + [32])) = *(($8 + [8]))
	CALL eosio_assert([1], [464])
	$4 = ($1 + [24])
	$3 = ($1 + [16])
	$6 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [528])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	$6 = *(($1 + [64]))
	$10 = [52]
	
.LOOP $label$6:
	$10 = ($10 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	$5 = ($1 + [60])
	$7 = *($1 + [56])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = $7
	$8 = *($9 + [4])
	if ( ($8 == 0) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = $8
	$8 = *($7)
	if ( $8 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = *($9 + [8])
	if ( ((int_32)*($7) == (int_32)$9) ){ goto $label$9 }
	$9 = ($9 + [8])
	
.LOOP $label$12:
	$8 = *($9)
	$9 = ($8 + [8])
	$7 = *($8 + [8])
	if ( ((int_32)$8 != (int_32)*($7)) ){ goto $label$12 }
	
.LABEL $label$9
	$10 = ($10 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($10 <= [513]) ){ goto $label$14 }
	$8 = CALL malloc($10)
	goto $label$13 
	
.LABEL $label$14
	$8 = ($12 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$13
	*($11 + [4]) = $8
	*($11) = $8
	*($11 + [8]) = ($8 + $10)
	*($11 + [16]) = $11
	*($11 + [28]) = ($1 + [8])
	*($11 + [24]) = $1
	*($11 + [32]) = $3
	*($11 + [36]) = $4
	*($11 + [40]) = ($1 + [40])
	*($11 + [44]) = ($1 + [56])
	CALL $12(($11 + [24]), ($11 + [16]))
	$6 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($2 + [8]), (int_64)8428113306008236032, *(*($0 + [8])), $6, $8, $10)
	if ( ($10 <= [513]) ){ goto $label$15 }
	CALL free($8)
	
.LABEL $label$15
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$16 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $44(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10(($1 + [56]), *(($1 + [60])))
	CALL $45($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $45($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [576])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $44([80])
	CALL $7($6)
	*($6 + [68]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [40])
	*($8 + [60]) = ($6 + [56])
	CALL $14(($8 + [40]), ($8 + [32]))
	*($6 + [72]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [72])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $10(($4 + [56]), *(($4 + [60])))
	CALL $45($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

int_32 .FUNC $7 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	$2 = [0]
	*($0 + [8]) = [0]
	*(($3 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [464])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [528])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [464])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [528])
	*(($0 + [64])) = [0]
	*(($2 = ($0 + [60]))) = [0]
	*($0 + [56]) = $2
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN9eosinvest6invest6createEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	*($9 + [64]) = $1
	*($9 + [56]) = $2
	CALL require_auth(*($0))
	*(($5 = ($9 + [48]))) = [0]
	*($9 + [32]) = (int_64)-1
	$6 = *($0)
	*($9 + [16]) = $6
	*($9 + [24]) = $6
	*($9 + [40]) = (int_64)0
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= (uint_64)$1), [16])
	CALL eosio_assert(((int_64)$2 != (int_64)0), [48])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [224])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [256])
	$8 = CALL db_lowerbound_i64($6, $6, (int_64)8428113306008236032, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $6(($9 + [16]), $8)
	$7 = ($9 + [24])
	
.LOOP $label$2:
	CALL eosio_assert([1], [144])
	CALL eosio_assert([1], [192])
	$4 = CALL db_next_i64(*($8 + [72]), ($9 + [80]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $6(($9 + [16]), $4)
	
.LABEL $label$3
	CALL $11(($9 + [16]), $8)
	$8 = CALL db_lowerbound_i64(*($9 + [16]), *($7), (int_64)8428113306008236032, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $6(($9 + [16]), $8)
	goto $label$2 
	
.LABEL $label$1
	$6 = *($0)
	*($9 + [8]) = $3
	*($9 + [4]) = ($9 + [56])
	*($9) = ($9 + [64])
	*($9 + [104]) = $6
	CALL eosio_assert(((int_64)*($9 + [16]) == (int_64)CALL $fimport$3()), [80])
	*($9 + [84]) = $9
	*($9 + [80]) = ($9 + [16])
	*($9 + [88]) = ($9 + [104])
	$8 = CALL $44([80])
	CALL $7($8)
	*($8 + [68]) = ($9 + [16])
	CALL $8(($9 + [80]), $8)
	*($9 + [96]) = $8
	$6 = *($8)
	*($9 + [80]) = $6
	$7 = *($8 + [72])
	*($9 + [76]) = $7
	$3 = ($9 + [44])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$5 }
	*($4 + [8]) = $6
	*($4 + [16]) = $7
	*($9 + [96]) = [0]
	*($4) = $8
	*($3) = ($4 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $9(($9 + [40]), ($9 + [96]), ($9 + [80]), ($9 + [76]))
	
.LABEL $label$4
	$8 = *($9 + [96])
	*($9 + [96]) = [0]
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $10(($8 + [56]), *(($8 + [60])))
	CALL $45($8)
	
.LABEL $label$6
	$7 = *($9 + [40])
	if ( ($7 == 0) ){ goto $label$7 }
	$3 = ($9 + [44])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $10(($4 + [56]), *(($4 + [60])))
	CALL $45($4)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$10 }
	$8 = *(($9 + [40]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $7
	
.LABEL $label$8
	*($3) = $7
	CALL $45($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [608])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $15(*($1), *($0 + [20]))
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [32])
	*([0] + [4]) = $13
	CALL $10($1, *($1 + [4]))
	$2 = ($1 + [4])
	*($1) = $2
	$11 = [0]
	*($1 + [8]) = [0]
	*($1 + [4]) = [0]
	$10 = *($0 + [4])
	$9 = (int_64)0
	$12 = ($0 + [8])
	
.LOOP $label$1:
	CALL eosio_assert(($10 <= *($12)), [624])
	$4 = ($0 + [4])
	$10 = *($4)
	$6 = *($10)
	$10 = ($10 + [1])
	*($4) = $10
	$11 = ($11 & [255])
	$9 = ((int_64)(CASTING uint_64)(uint_32 (($6 & [127]) << $11)) | (int_64)$9)
	$11 = ($11 + [7])
	if ( uint_32($6 >> [7]) ){ goto $label$1 }
	$3 = (CASTING uint_32)(uint_64 $9)
	if ( ($3 == 0) ){ goto $label$2 }
	$5 = ($1 + [4])
	$4 = (($13 + [8]) + [8])
	$8 = ($13 + [20])
	$12 = [0]
	
.LOOP $label$3:
	*($4) = (int_64)1398362884
	*($13 + [8]) = (int_64)0
	CALL eosio_assert([1], [464])
	$9 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$5:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$11 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($11, [528])
	$6 = ($0 + [4])
	$11 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($11) - *($6)) > (uint_32)[7]), [608])
	CALL memcpy(($13 + [24]), *($6), [8])
	$10 = (*($6) + [8])
	*($6) = $10
	CALL eosio_assert(((uint_32)(*($11) - $10) > (uint_32)[7]), [608])
	CALL memcpy(($13 + [8]), *($6), [8])
	$10 = (*($6) + [8])
	*($6) = $10
	CALL eosio_assert(((uint_32)(*($11) - $10) > (uint_32)[7]), [608])
	CALL memcpy($4, *($6), [8])
	*($6) = (*($6) + [8])
	$6 = *($2)
	if ( ($6 == 0) ){ goto $label$12 }
	$9 = *($13 + [24])
	$11 = $5
	
.LOOP $label$13:
	$7 = *($6 + [16])
	if ( ((uint_64)$9 >= (uint_64)$7) ){ goto $label$15 }
	$10 = *($6)
	if ( $10 ){ goto $label$14 }
	goto $label$11 
	
.LABEL $label$15
	if ( ((uint_64)$7 >= (uint_64)$9) ){ goto $label$10 }
	$11 = ($6 + [4])
	$10 = *($6 + [4])
	if ( ($10 == 0) ){ goto $label$10 }
	$6 = $11
	
.LABEL $label$14
	$11 = $6
	$6 = $10
	goto $label$13 
	
.LABEL $label$12
	$6 = $2
	$11 = $2
	if ( *($11) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$11
	$11 = $6
	
.LABEL $label$10
	if ( *($11) ){ goto $label$8 }
	
.LABEL $label$9
	*(($10 = CALL $44([40])) + [16]) = *($13 + [24])
	*(($10 + [36])) = *($8)
	*(($10 + [32])) = *($4)
	*(($10 + [28])) = *($13 + [12])
	*($10 + [24]) = *($13 + [8])
	*($10) = [0]
	*($10 + [4]) = [0]
	*($10 + [8]) = $6
	*($11) = $10
	$6 = *(*($1))
	if ( ($6 == 0) ){ goto $label$16 }
	*($1) = $6
	$10 = *($11)
	
.LABEL $label$16
	CALL $16(*(($1 + [4])), $10)
	*(($6 = ($1 + [8]))) = (*($6) + [1])
	
.LABEL $label$8
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($13 + [32])
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $3
	if ( $3 ){ goto $label$3 }
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( *($2 + [12]) ){ goto $label$3 }
	$3 = *($2 + [8])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$8 }
	if ( *($4 + [12]) ){ goto $label$8 }
	$4 = ($4 + [12])
	goto $label$9 
	
.LABEL $label$10
	$4 = *($3 + [4])
	if ( ($4 == 0) ){ goto $label$6 }
	if ( *($4 + [12]) ){ goto $label$6 }
	$4 = ($4 + [12])
	
.LABEL $label$9
	*(($2 + [12])) = [1]
	$2 = ((int_32)$3 == (int_32)$0)
	*($3 + [12]) = $2
	*($4) = [1]
	$1 = $3
	if ( ($2 == 0) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$5 }
	$4 = $2
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$2 }
	$4 = *($2 + [4])
	$1 = *($4)
	*($2 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$11
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*($4) = $2
	$3 = *($4 + [8])
	goto $label$1 
	
.LABEL $label$5
	$4 = *($2)
	$1 = *($4 + [4])
	*($2) = $1
	if ( ($1 == 0) ){ goto $label$12 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$12
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*(($4 + [4])) = $2
	$3 = *($4 + [8])
	
.LABEL $label$4
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3 + [4])
	$4 = *($2)
	*($3 + [4]) = $4
	if ( ($4 == 0) ){ goto $label$13 }
	*($4 + [8]) = $3
	
.LABEL $label$13
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*($2) = $3
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3)
	$4 = *($2 + [4])
	*($3) = $4
	if ( ($4 == 0) ){ goto $label$14 }
	*($4 + [8]) = $3
	
.LABEL $label$14
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*(($2 + [4])) = $3
}

void .FUNC _ZN9eosinvest6invest7depositEyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [144])
	*([0] + [4]) = $14
	*($14 + [112]) = $1
	CALL require_auth($1)
	$4 = *($2)
	CALL eosio_assert(((int_64)$4 > (int_64)99999), [640])
	CALL eosio_assert((int_64)(((int_64)$4 % (int_64)10000) == 0), [672])
	$5 = *($2 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)1397703940), [224])
	*((($14 + [72]) + [32])) = [0]
	*($14 + [88]) = (int_64)-1
	$1 = *($0)
	*($14 + [72]) = $1
	*($14 + [80]) = $1
	*($14 + [96]) = (int_64)0
	$10 = [0]
	$0 = CALL db_lowerbound_i64($1, $1, (int_64)8428113306008236032, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $6(($14 + [72]), $0)
	
.LABEL $label$1
	$6 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($6, [704])
	$11 = CALL $18($14, $10)
	$1 = *($11 + [40])
	$0 = ($11 + [48])
	$12 = *($0)
	CALL eosio_assert(((int_64)$5 == (int_64)$12), [736])
	$1 = ((int_64)$4 + (int_64)$1)
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [784])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [816])
	CALL eosio_assert(((int_64)$12 == (int_64)*(($11 + [32]))), [848])
	CALL eosio_assert(((int_64)$1 <= (int_64)*($11 + [24])), [912])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000)) <= (uint_32)*($11 + [8])), [944])
	CALL eosio_assert(((int_64)$5 == (int_64)*($0)), [736])
	$1 = ((int_64)*($11 + [40]) + (int_64)$4)
	*($11 + [40]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [784])
	CALL eosio_assert(((int_64)*($11 + [40]) < (int_64)4611686018427387904), [816])
	$7 = ($11 + [60])
	$0 = *($7)
	if ( ($0 == 0) ){ goto $label$3 }
	$1 = *($14 + [112])
	$13 = $7
	
.LOOP $label$5:
	if ( ((uint_64)*($0 + [16]) >= (uint_64)$1) ){ goto $label$6 }
	$0 = *($0 + [4])
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$13 = $0
	$8 = *($0)
	$0 = $8
	if ( $8 ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$3 }
	if ( ((uint_64)$1 >= (uint_64)*($13 + [16])) ){ goto $label$2 }
	
.LABEL $label$3
	$13 = $7
	
.LABEL $label$2
	*($14 + [128]) = ($14 + [112])
	$8 = ($11 + [56])
	CALL $19(($14 + [136]), $8, ($14 + [112]), [976], ($14 + [128]), ($14 + [120]))
	$9 = *($14 + [136])
	$0 = ($9 + [24])
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$5 == (int_64)*(($9 + [32]))), [736])
	$1 = ((int_64)*($0) + (int_64)$4)
	*($0) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [784])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [816])
	goto $label$7 
	
.LABEL $label$8
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
	
.LABEL $label$7
	*($14 + [136]) = $11
	CALL eosio_assert($6, [992])
	CALL $20(($14 + [72]), $10, ($14 + [136]))
	CALL $10($8, *(($11 + [60])))
	$10 = *($14 + [96])
	if ( ($10 == 0) ){ goto $label$9 }
	$7 = ($14 + [100])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$11 = *($0)
	*($0) = [0]
	if ( ($11 == 0) ){ goto $label$13 }
	CALL $10(($11 + [56]), *(($11 + [60])))
	CALL $45($11)
	
.LABEL $label$13
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($14 + [96]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $10
	
.LABEL $label$10
	*($7) = $10
	CALL $45($0)
	
.LABEL $label$9
	*([0] + [4]) = ($14 + [144])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($0, *($1))
	CALL $10($0, *($1 + [4]))
	CALL $45($1)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $10(($4 + [56]), *(($4 + [60])))
	CALL $45($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $10(($4 + [56]), *(($4 + [60])))
	CALL $45($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [72]))
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [560])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [560])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [560])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [560])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $13(*($1), *($0 + [20]))
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$3 = *($1 + [8])
	$2 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($8 + [15]) = (($7) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $4) > (int_32)[0]), [560])
	CALL memcpy(*($6), ($8 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = ($1 + [4])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	$6 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($6) - $4) > (int_32)[7]), [560])
	$7 = $5
	CALL memcpy(*($2), ($7 + [16]), [8])
	$5 = (*($2) + [8])
	*($2) = $5
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($2), ($7 + [24]), [8])
	$5 = (*($2) + [8])
	*($2) = $5
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[7]), [560])
	CALL memcpy(*($2), ($7 + [32]), [8])
	$4 = (*($2) + [8])
	*($2) = $4
	$6 = *($7 + [4])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = $6
	$6 = *($5)
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = *($7 + [8])
	if ( ((int_32)*($5) == (int_32)$7) ){ goto $label$4 }
	$7 = ($7 + [8])
	
.LOOP $label$7:
	$6 = *($7)
	$7 = ($6 + [8])
	$5 = *($6 + [8])
	if ( ((int_32)$6 != (int_32)*($5)) ){ goto $label$7 }
	
.LABEL $label$4
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [464])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [528])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $37(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $38(*($1), *($0 + [12]))
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [608])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $36($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1398362884
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [464])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [528])
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $35(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *((($10 + [16]) + [8]))
	*(($10 + [60])) = *(($10 + [44]))
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [40]))
	$4 = *($10 + [16])
	*($10 + [48]) = *($10 + [32])
	*($10 + [52]) = *(($10 + [36]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 $10), (int_32 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [560])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [560])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [176])
	*([0] + [4]) = $15
	*($15 + [168]) = $0
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1392]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$11 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1408]
	$10 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$17 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$13
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$12 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$11 }
	CALL $32(($15 + [120]))
	if ( ((int_64)*($15 + [128]) != (int_64)$0) ){ goto $label$10 }
	$4 = ($15 + [152])
	CALL $52(($15 + [104]), $4)
	$6 = *($15 + [104])
	$3 = ($6 & [1])
	$5 = (($15 + [104]) | [1])
	$12 = *($15 + [112])
	$13 = ( $12 ? $5 : $3 )
	$7 = $13
	$3 = ( *($15 + [108]) ? uint_32($6 >> [1]) : $3 )
	if ( ($3 == 0) ){ goto $label$18 }
	$6 = ($13 + $3)
	$7 = $13
	
.LOOP $label$20:
	if ( (CALL isspace(*($7)) == 0) ){ goto $label$19 }
	$7 = ($7 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$20 }
	$7 = $6
	
.LABEL $label$19
	$12 = *(($15 + [112]))
	$6 = *($15 + [104])
	
.LABEL $label$18
	CALL $48(($15 + [104]), ($13 - ( $12 ? $5 : ($6 & [1]) )), ($7 - $13))
	$14 = *($15 + [108])
	$7 = ( $14 ? uint_32($3 >> [1]) : $7 )
	$3 = *($15 + [104])
	$7 = ($3 & [1])
	$12 = *(($15 + [112]))
	$6 = ( $12 ? $5 : $7 )
	$13 = ($6 + $7)
	if ( ($7 == 0) ){ goto $label$21 }
	
.LOOP $label$23:
	$3 = (($6 + $7) + [-1])
	if ( (CALL isspace(*($3)) == 0) ){ goto $label$22 }
	$13 = $3
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$23 }
	
.LABEL $label$22
	$12 = *(($15 + [112]))
	$14 = *($15 + [108])
	$3 = *($15 + [104])
	
.LABEL $label$21
	$7 = ($3 & [1])
	$6 = ( $12 ? $5 : $7 )
	CALL $48(($15 + [104]), ($13 - $6), (($6 + ( $14 ? uint_32(($3 & [254]) >> [1]) : $7 )) - $13))
	$7 = CALL $49(($15 + [104]), [32], [0])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$24 }
	$7 = CALL $49(($15 + [104]), [58], [0])
	
.LABEL $label$24
	CALL eosio_assert(((int_32)$7 != (int_32)[-1]), [1488])
	CALL $53(($15 + [88]), ($15 + [104]), [0], $7, ($15 + [104]))
	if ( (CALL $50(($15 + [88]), [1568]) == 0) ){ goto $label$9 }
	if ( (CALL $50(($15 + [88]), [1584]) == 0) ){ goto $label$8 }
	CALL eosio_assert([0], [1600])
	goto $label$8 
	
.LABEL $label$11
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$25 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1632]
	$10 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$31 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$3 = ($3 + [165])
	goto $label$29 
	
.LABEL $label$31
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$27
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$26 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$7 }
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$7 }
	*($15 + [52]) = [0]
	*($15 + [48]) = [1]
	*($15 + [24 align=4]) = *($15 + [48])
	CALL $33(($15 + [168]), ($15 + [24]))
	goto $label$7 
	
.LABEL $label$32
	*($15 + [44]) = [0]
	*($15 + [40]) = [2]
	*($15 + [32 align=4]) = *($15 + [40])
	CALL $34(($15 + [168]), ($15 + [32]))
	goto $label$7 
	
.LABEL $label$10
	if ( ((*($15 + [152]) & [1]) == 0) ){ goto $label$7 }
	CALL $45(*(($15 + [160])))
	goto $label$7 
	
.LABEL $label$9
	*(($7 = (($15 + [72]) + [8]))) = *(($15 + [144]))
	$9 = *($15 + [120])
	*($15 + [72]) = *($15 + [136])
	CALL $52(($15 + [56]), $4)
	*((($15 + [8]) + [8])) = *($7)
	*($15 + [8]) = *($15 + [72])
	CALL _ZN9eosinvest6invest7depositEyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(($15 + [168]), $9, ($15 + [8]), $7)
	if ( ((*($15 + [56]) & [1]) == 0) ){ goto $label$8 }
	CALL $45(*($15 + [64]))
	
.LABEL $label$8
	if ( ((*($15 + [88]) & [1]) == 0) ){ goto $label$33 }
	CALL $45(*($15 + [96]))
	
.LABEL $label$33
	if ( ((*($15 + [104]) & [1]) == 0) ){ goto $label$34 }
	CALL $45(*(($15 + [112])))
	
.LABEL $label$34
	if ( ((*(($15 + [152])) & [1]) == 0) ){ goto $label$7 }
	CALL $45(*(($15 + [160])))
	
.LABEL $label$7
	*([0] + [4]) = ($15 + [176])
}

void .FUNC $58 ()
{
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = *($0)
	$3 = ($5 & [1])
	if ( $3 ){ goto $label$2 }
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	if ( $3 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$4 = ((uint_32)$5 > (uint_32)$2)
	$3 = ( $2 ? $5 : $4 )
	if ( ($3 == 0) ){ goto $label$7 }
	$0 = CALL memcmp($0, $1, $3)
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ( [-1] ? $4 : ($5 <= $2) )
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $39($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $47($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $44($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $47($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $45($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $46($7)
	return (unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $44($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $44($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}