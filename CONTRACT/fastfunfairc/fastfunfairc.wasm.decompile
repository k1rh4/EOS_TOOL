(data (i32.const 8192) "checkenable\n\00\00\01\02\04\07\03\06\05\00unexpected error in fixed_bytes constructor\00")
(data (i32.const 8258) "enabled is \00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8356) " \n\00stol\00")
(data (i32.const 8364) "enabled is default true \n\00")
(data (i32.const 8390) "Local$hi3ld10\00stoll\00")
(data (i32.const 8410) "call apply\n\00")
(data (i32.const 8422) "transfer\00")
(data (i32.const 8431) "eosio.token\00")
(data (i32.const 8443) "code: \00")
(data (i32.const 8450) "actoin: \00%d\00")
(data (i32.const 8462) "\n\00")
(data (i32.const 8465) "R1\00")
(data (i32.const 8468) "R2\00")
(data (i32.const 8471) "R3\00%llu\00")
(data (i32.const 8479) "Q2\00")
(data (i32.const 8482) "playid:\00")
(data (i32.const 8490) " gameid:\00")
(data (i32.const 8499) " player:\00")
(data (i32.const 8508) " playtype:\00")
(data (i32.const 8519) " winner!\00")
(data (i32.const 8528) "transfer: \n\00")
(data (i32.const 8540) "cannot transfer to self\00")
(data (i32.const 8564) "transfer2: \n\00")
(data (i32.const 8577) "EOS\00")
(data (i32.const 8581) "accept EOS only\00: no conversion\00")
(data (i32.const 8613) "transfer invalid quantity\00: out of range\00")
(data (i32.const 8654) "DApp isn\'t enabled\00")
(data (i32.const 8673) "DApp isn\'t enable\00")
(data (i32.const 8691) "call deferaction\00")
(data (i32.const 8708) "deferaction in \n\00")
(data (i32.const 8725) "result is % \n\00")
(data (i32.const 8739) "sorry, % is not welcome\n\00")
(data (i32.const 8764) "getresult error\n\00")
(data (i32.const 8781) ":\00")
(data (i32.const 8783) "gameid cannot be empty!\00")
(data (i32.const 8807) "game type cannot be empty!\00")
(data (i32.const 8834) "play type cannot be empty!\00")
(data (i32.const 8861) "price cannot be empty!\00")
(data (i32.const 8884) "guess info cannot be empty!\00")
(data (i32.const 8912) "transfer3: \n\00")
(data (i32.const 8925) "parse transfer memo, gameid: \00")
(data (i32.const 8955) ", playtype: \00")
(data (i32.const 8968) ", guessinfo: \00")
(data (i32.const 8982) ", priceint: \00")
(data (i32.const 8995) ", refer: \00")
(data (i32.const 9005) "price is overflow \00")
(data (i32.const 9024) " \00")
(data (i32.const 9026) "size: \00")
(data (i32.const 9033) "price = \00")
(data (i32.const 9042) "income = \00")
(data (i32.const 9052) "quantity = \00")
(data (i32.const 9064) "quantity error!\00")
(data (i32.const 9080) ", playid: \00")
(data (i32.const 9091) ", price: \00")
(data (i32.const 9101) "input gameid: \00")
(data (i32.const 9116) " iter gameid\00")
(data (i32.const 9129) "gameid \00")
(data (i32.const 9137) " is closed\00")
(data (i32.const 9148) "pay\00")
(data (i32.const 9152) "reveal info, current gameid: \00")
(data (i32.const 9182) ", new gameid: \00")
(data (i32.const 9197) ", gametype: \00")
(data (i32.const 9210) "server_seed: \00")
(data (i32.const 9224) ", winner is : \00")
(data (i32.const 9239) "reveal info, modify gameid: \00")
(data (i32.const 9268) ", result is : \00")
(data (i32.const 9283) "reveal info, updateticketinfo end \00")
(data (i32.const 9318) "reveal end \00")
(data (i32.const 9330) "updateticketinfo, current game info *** gameid: \00")
(data (i32.const 9379) ", result: \00")
(data (i32.const 9390) "updateticketinfo, current player info *** gameid: \00")
(data (i32.const 9441) ", player: \00")
(data (i32.const 9452) ", ammount: \00")
(data (i32.const 9464) "referer: \00")
(data (i32.const 9474) "updateticketinfo, payout modify3 playid:\00")
(data (i32.const 9515) "updateticketinfo, current gameid: \00")
(data (i32.const 9550) "payout info, gameid: \00")
(data (i32.const 9572) "payout info, current playerid info *** gameid: \00")
(data (i32.const 9620) "payout info, current gameid info *** gameid: \00")
(data (i32.const 9666) "payout info, payout modify playid:\00")
(data (i32.const 9701) "payout info, payout modify2 playid:\00")
(data (i32.const 9737) "write\00")
(data (i32.const 9743) "unexpected error in fixed_key constructor\00")
(data (i32.const 9785) "string is too long to be a valid name\00")
(data (i32.const 9823) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9890) "character is not in allowed character set for names\00")
(data (i32.const 9942) "reset _currentplayers db \n\00")
(data (i32.const 9969) "del  _currentplayers info\00")
(data (i32.const 9995) "error reading iterator\00")
(data (i32.const 10018) "read\00")
(data (i32.const 10023) "get\00")
(data (i32.const 10027) "cannot pass end iterator to erase\00")
(data (i32.const 10061) "cannot increment end iterator\00")
(data (i32.const 10091) "object passed to erase is not in multi_index\00")
(data (i32.const 10136) "cannot erase objects in table of another contract\00")
(data (i32.const 10186) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10239) "reset _gameresults db \n\00")
(data (i32.const 10263) "del  _gameresults info\00")
(data (i32.const 10286) "delete _currentplayers db  by gameid: \00")
(data (i32.const 10325) "del2  _currentplayers info\00")
(data (i32.const 10352) "t(\00\00")
(data (i32.const 10356) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10389) "string is too long to be a valid symbol_code\00")
(data (i32.const 10434) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 10487) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10536) "invalid symbol name\00")
(data (i32.const 10556) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10615) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10666) "true\00")
(data (i32.const 10671) "false\00")
(data (i32.const 10680) "\t\00\00\00\n\00\00\00")
(data (i32.const 10688) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> > >::n() [T = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]\00")
(data (i32.const 10910) "T = \00")
(data (i32.const 10915) "-%lld.%s %s\00")
(data (i32.const 10927) "%lld.%s %s\00")
(data (i32.const 10938) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10990) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 11044) "cannot decrement iterator at beginning of table\00")
(data (i32.const 11092) "cannot create objects in table of another contract\00")
(data (i32.const 11143) "cannot pass end iterator to modify\00")
(data (i32.const 11178) "object passed to modify is not in multi_index\00")
(data (i32.const 11224) "cannot modify objects in table of another contract\00")
(data (i32.const 11275) "updater cannot change primary key when modifying an object\00")
(data (i32.const 19760) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19840) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "transaction_size" (func $fimport$0 (result i32)))
(import "env" "read_transaction" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$2 (param i32 i32 i32)))
(import "env" "prints" (func $fimport$3 (param i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$5 (param i32 i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "printui" (func $fimport$10 (param i64)))
(import "env" "eosio_exit" (func $fimport$11 (param i32)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$14 (param i64)))
(import "env" "printi" (func $fimport$15 (param i64)))
(import "env" "current_receiver" (func $fimport$16 (result i64)))
(import "env" "prints_l" (func $fimport$17 (param i32 i32)))
(import "env" "printn" (func $fimport$18 (param i64)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$20 (result i64)))
(import "env" "tapos_block_num" (func $fimport$21 (result i32)))
(import "env" "send_deferred" (func $fimport$22 (param i32 i64 i32 i32 i32)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$24 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$25 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$26 (param i32)))
(import "env" "db_idx64_next" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$28 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$30 (param i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$31 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$32 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$33 (param i32 i64 i32 i32)))
(import "env" "db_idx64_update" (func $fimport$34 (param i32 i64 i32)))
(import "env" "__lttf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$36))
(import "env" "memset" (func $fimport$37 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$41 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$44 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$45 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$46 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$47 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$48 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$49 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$50 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$51 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$52 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$53 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$54 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$55 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$56 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$57 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$58 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$59 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$60 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$61 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$62 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$63 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$64 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$65 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$66 (param i32 i32 i32 i32 i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $9))
(export "_ZdlPv" (func $101))
(export "_Znwj" (func $99))
(export "_Znaj" (func $100))
(export "_ZdaPv" (func $102))
(export "_ZnwjSt11align_val_t" (func $103))
(export "_ZnajSt11align_val_t" (func $104))
(export "_ZdlPvSt11align_val_t" (func $105))
(export "_ZdaPvSt11align_val_t" (func $106))
(table $0 13 13 anyfunc)
(elem (i32.const 1) $11 $13 $15 $17 $19 $21 $23 $24 $90 $92 $131 $133)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20097))
(global $global$2 i32 (i32.const 20097))


int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = [1]
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$20 }
	goto $label$2 
	
.LABEL $label$21
	$5 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$2 }
	*($0) = $2
	*($4) = $5
	return [1]
	
.LABEL $label$20
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$16 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$13 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$12 
	
.LABEL $label$19
	$5 = ($1 + [-1])
	$4 = *($5)
	$6 = *($0)
	$2 = *($0 + [1])
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$8 }
	*($0) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$18
	CALL $97($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	return [1]
	
.LABEL $label$17
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$14 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$7 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$6 
	
.LABEL $label$16
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$10 }
	*(($0 + [2])) = $4
	*(($6 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$11 }
	*($0) = $2
	*($6) = $5
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	$3 = [1]
	*(($6 = ($0 + [1]))) = $4
	*($5) = $2
	$2 = *($0)
	$4 = *($6)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$14
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$4 }
	*(($0 + [2])) = $4
	*(($7 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$5 }
	*($0) = $2
	*($7) = $5
	$5 = *($6)
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$13
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$10 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$12
	$4 = $5
	
.LABEL $label$11
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$10
	$4 = $2
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$9
	$8 = [0]
	$9 = [0]
	
.LOOP $label$22:
	$5 = *($7)
	if ( ((int_32)$5 >= (int_32)int_32(($4 << [24]) >> [24])) ){ goto $label$23 }
	$3 = $8
	
.LOOP $label$25:
	*((($2 = ($0 + $3)) + $6)) = $4
	if ( ((int_32)$3 == (int_32)[-2]) ){ goto $label$24 }
	$3 = ($3 + [-1])
	$4 = *(($2 + [1]))
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$25 }
	*((($0 + $3) + $6)) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[8]) ){ goto $label$23 }
	goto $label$1 
	
.LABEL $label$24
	*($0) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 == (int_32)[8]) ){ goto $label$1 }
	
.LABEL $label$23
	$3 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	$8 = ($8 + [1])
	$4 = *($7)
	$7 = $2
	goto $label$22 
	
.LABEL $label$8
	*($0) = $2
	$3 = [1]
	*(($0 + [1])) = $6
	$4 = *($5)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$2 }
	*(($0 + [1])) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$7
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$4 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	$5 = *($6)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$4 = $2
	$5 = *($6)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	*(($2 = ($0 + [2]))) = $5
	*($6) = $4
	$3 = [1]
	$5 = *(($0 + [1]))
	$4 = *($2)
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$2 }
	*($2) = $5
	$3 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$2
	return $3
	
.LABEL $label$1
	$4
	return ((int_32)($7 + [1]) == (int_32)$1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $152($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11336])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $152($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [16])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [4])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [52])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$3 = *($0)
	$0 = *($0 + [40])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$8 }
	*($2) = ($0 + $1)
	
.LABEL $label$8
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $77(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9737])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $77(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9737])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $77(*($1), *($0 + [36]))
	CALL $77(*($1), *($0 + [40]))
	$global$0 = ($2 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$5 = ($1 + [-2])
	$6 = ($1 + [-1])
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	
.LOOP $label$7:
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$19 }
	$7 = ($4 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$20 }
	$0 = uint_32($0 >> [2])
	$8 = CALL $97($4, ($4 + $0), $7, ($7 + $0), $6, $2)
	goto $label$18 
	
.LABEL $label$20
	$0 = *($6)
	$9 = *($4)
	$10 = *($7)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$23 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$22 }
	*($4) = $0
	*($6) = $9
	$8 = [1]
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$23
	$8 = [0]
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$18 }
	*($7) = $0
	*($6) = $10
	$8 = [1]
	$10 = *($4)
	$0 = *($7)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$18 }
	*($4) = $0
	*($7) = $10
	goto $label$21 
	
.LABEL $label$22
	*($4) = $10
	*($7) = $9
	$8 = [1]
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$18 }
	*($7) = $0
	*($6) = $9
	
.LABEL $label$21
	$8 = [2]
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$0 = *($4 + [2])
	$9 = *($4)
	$10 = *($4 + [1])
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$29 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$28 }
	*($4) = $0
	*(($4 + [2])) = $9
	goto $label$27 
	
.LABEL $label$29
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$25 }
	*(($4 + [2])) = $10
	*(($11 = ($4 + [1]))) = $0
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$26 }
	*($4) = $0
	*($11) = $9
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$28
	*($4) = $10
	*(($10 = ($4 + [1]))) = $9
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$25 }
	*(($4 + [2])) = $9
	*($10) = $0
	
.LABEL $label$27
	$10 = $9
	
.LABEL $label$26
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$25
	$10 = $0
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$24
	$7 = [0]
	
.LOOP $label$30:
	$11 = *($6)
	if ( ((int_32)$11 >= (int_32)int_32(($10 << [24]) >> [24])) ){ goto $label$31 }
	$0 = $7
	
.LOOP $label$34:
	*((($9 = ($4 + $0)) + $12)) = $10
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$33 }
	$0 = ($0 + [-1])
	$10 = *(($9 + [1]))
	if ( ((int_32)$11 < (int_32)$10) ){ goto $label$34 }
	$0 = (($4 + $0) + $12)
	goto $label$32 
	
.LABEL $label$33
	$0 = $4
	
.LABEL $label$32
	*($0) = $11
	
.LABEL $label$31
	$0 = ($6 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	$7 = ($7 + [1])
	$10 = *($6)
	$6 = $0
	goto $label$30 
	
.LABEL $label$18
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 >= (int_32)$9) ){ goto $label$16 }
	
.LABEL $label$17
	$10 = $6
	$3 = ($4 + [1])
	if ( ($3 <= $10) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$0 = $5
	
.LOOP $label$35:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$14 }
	$10 = *($0)
	$11 = ($0 + [-1])
	$0 = $11
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$35 }
	*($4) = $10
	*(($10 = ($11 + [1]))) = $3
	$8 = ($8 + [1])
	$3 = ($4 + [1])
	if ( ((uint_32)$3 >= (uint_32)$10) ){ goto $label$13 }
	
.LABEL $label$15
	
.LOOP $label$36:
	$0 = ($3 + [-1])
	$9 = *($7)
	
.LOOP $label$37:
	$0 = ($0 + [1])
	$11 = *($0)
	if ( ((int_32)$11 < (int_32)$9) ){ goto $label$37 }
	$3 = ($0 + [1])
	
.LOOP $label$38:
	$10 = ($10 + [-1])
	$12 = *($10)
	if ( ((int_32)$12 >= (int_32)$9) ){ goto $label$38 }
	if ( ((uint_32)$0 > (uint_32)$10) ){ goto $label$39 }
	*($0) = $12
	*($10) = $11
	$7 = ( $10 ? $7 : ((int_32)$7 == (int_32)$0) )
	$8 = ($8 + [1])
	goto $label$36 
	
.LABEL $label$39
	$3 = $0
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$12 = ($4 + [1])
	$9 = *($6)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$40 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$3 }
	$12 = ($4 + [2])
	
.LOOP $label$42:
	$0 = ($12 + [-1])
	$10 = *($0)
	if ( ((int_32)$3 < (int_32)$10) ){ goto $label$41 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$42 }
	goto $label$3 
	
.LABEL $label$41
	*($0) = $9
	*($6) = $10
	
.LABEL $label$40
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$43:
	$0 = ($12 + [-1])
	$10 = *($4)
	
.LOOP $label$44:
	$0 = ($0 + [1])
	$9 = *($0)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$44 }
	$12 = ($0 + [1])
	
.LOOP $label$45:
	$6 = ($6 + [-1])
	$11 = *($6)
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$45 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$46 }
	*($0) = $11
	*($6) = $9
	goto $label$43 
	
.LABEL $label$46
	$10 = ([4] & [7])
	if ( ((uint_32)$10 > (uint_32)[4]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$13
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = *($3)
	$0 = *($7)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$11 }
	*($3) = $0
	*($7) = $10
	if ( ($8 + [1]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( $8 ){ goto $label$9 }
	
.LABEL $label$10
	$10 = CALL $98($4, $3, $2)
	$0 = ($3 + [1])
	if ( CALL $98($0, $1, $2) ){ goto $label$6 }
	if ( $10 ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $96($4, $3, $2)
	$0 = ($3 + [1])
	
.LABEL $label$8
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	goto $label$7 
	
.LABEL $label$6
	$1 = ( $1 ? $3 : $10 )
	$0 = $4
	$10 = (( [1] ? [2] : $10 ) & [7])
	if ( ((uint_32)$10 <= (uint_32)[4]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	goto $label$3 
	
.LABEL $label$59
	$9 = *($4)
	$0 = ($1 + [-1])
	$10 = *($0)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$3 }
	*($4) = $10
	*($0) = $9
	return 
	
.LABEL $label$58
	$9 = ($1 + [-1])
	$0 = *($9)
	$11 = *($4)
	$10 = *($4 + [1])
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$55 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$53 }
	*($4) = $0
	*($9) = $11
	return 
	
.LABEL $label$57
	CALL $97($4, ($4 + [1]), ($4 + [2]), ($4 + [3]), ($1 + [-1]), $2)
	return 
	
.LABEL $label$56
	$11 = ($1 + [-1])
	$10 = *($4 + [2])
	$9 = *($4)
	$0 = *($4 + [1])
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$54 }
	if ( ((int_32)$10 >= (int_32)$0) ){ goto $label$52 }
	*($4) = $10
	*(($4 + [2])) = $9
	goto $label$51 
	
.LABEL $label$55
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*(($11 = ($4 + [1]))) = $0
	*($9) = $10
	$10 = *($4)
	$0 = *($11)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*($4) = $0
	*($11) = $10
	return 
	
.LABEL $label$54
	if ( ((int_32)$10 >= (int_32)$0) ){ goto $label$50 }
	*(($4 + [2])) = $0
	*(($12 = ($4 + [1]))) = $10
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$48 }
	*($4) = $10
	*($12) = $9
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$53
	*($4) = $10
	*(($0 = ($4 + [1]))) = $11
	$10 = *($9)
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$3 }
	*($0) = $10
	*($9) = $11
	return 
	
.LABEL $label$52
	*($4) = $0
	*(($0 = ($4 + [1]))) = $9
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$49 }
	*(($4 + [2])) = $9
	*($0) = $10
	
.LABEL $label$51
	$0 = $9
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$50
	$0 = $10
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$49
	$0 = $10
	
.LABEL $label$48
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$47
	*(($10 = ($4 + [2]))) = $12
	*($11) = $0
	$9 = ($4 + [1])
	$11 = *($9)
	$0 = *($10)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$3 }
	*($10) = $11
	*($9) = $0
	$10 = *($4)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*($4) = $0
	*(($4 + [1])) = $10
	return 
	
.LABEL $label$4
	if ( (([1] << $10) & [21]) ){ goto $label$1 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	CALL $96(($3 + [1]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$5 }
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$4 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$2 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((int_32)$6 >= (int_32)$8) ){ goto $label$1 }
	*($0) = $6
	*($1) = $8
	$7 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$1 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$3
	$7 = $8
	goto $label$1 
	
.LABEL $label$2
	$7 = $6
	
.LABEL $label$1
	$6 = *($3)
	if ( ((int_32)$6 >= (int_32)int_32(($7 << [24]) >> [24])) ){ goto $label$10 }
	*($2) = $6
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$9 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$8 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	
.LABEL $label$10
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$7
	return $9
	
.LABEL $label$6
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$13 }
	*($2) = $7
	*($3) = $6
	$3 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$3) ){ goto $label$12 }
	*($1) = $7
	*($2) = $3
	$7 = *($0)
	$2 = *($1)
	if ( ((int_32)$2 >= (int_32)$7) ){ goto $label$11 }
	*($0) = $2
	*($1) = $7
	return ($9 + [4])
	
.LABEL $label$13
	return ($9 + [1])
	
.LABEL $label$12
	return ($9 + [2])
	
.LABEL $label$11
	return ($9 + [3])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$5:
	$2 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*((($0 + $2) + [10727])) != (int_32)*(($2 + [10910]))) ){ goto $label$6 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)($0 + $2) != (int_32)[183]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	CALL $91($0, $1, $2)
	return 
	
.LABEL $label$3
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$1 }
	
.LABEL $label$2
	*($1) = [10727]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$1
	*($1) = ($0 + [10731])
	*($1 + [4]) = [0]
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$15
	$3 = *($0)
	$2 = CALL _Znwj([16])
	$4 = *($3 + [8])
	*($2) = [0]
	*($2 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$10 }
	$0 = $3
	$5 = $2
	goto $label$9 
	
.LABEL $label$14
	$4 = [0]
	
.LOOP $label$16:
	$2 = [0]
	
.LOOP $label$18:
	if ( ((int_32)*((($4 + $2) + [10727])) != (int_32)*(($2 + [10910]))) ){ goto $label$17 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)($4 + $2) != (int_32)[183]) ){ goto $label$18 }
	goto $label$7 
	
.LABEL $label$17
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$16 }
	goto $label$7 
	
.LABEL $label$13
	*($1) = *($0)
	*($0) = [0]
	return 
	
.LABEL $label$12
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$19 }
	if ( (*($2 + [8]) <= [9]) ){ goto $label$20 }
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdaPv($4)
	
.LABEL $label$20
	CALL _ZdlPv($2)
	
.LABEL $label$19
	*($1) = [0]
	return 
	
.LABEL $label$11
	$3 = *($1)
	$4 = [0]
	
.LOOP $label$21:
	$2 = [0]
	
.LOOP $label$23:
	if ( ((int_32)*((($4 + $2) + [10727])) != (int_32)*(($2 + [10910]))) ){ goto $label$22 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)($4 + $2) != (int_32)[183]) ){ goto $label$23 }
	goto $label$5 
	
.LABEL $label$22
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$21 }
	goto $label$5 
	
.LABEL $label$10
	$5 = CALL _Znaj($4)
	*($2) = $5
	$4 = *(($2 + [8]))
	$0 = *($3)
	
.LABEL $label$9
	CALL memcpy($5, $0, $4)
	$4 = *($3 + [12])
	*($1) = $2
	*($2 + [12]) = $4
	return 
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$4 }
	
.LABEL $label$7
	*($1) = [10727]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = [10727]
	$5 = [0]
	$4 = *($3)
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($1) = ($4 + [10731])
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$3
	$2 = ($4 + [10731])
	$5 = [0]
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($3 + [1])
	
.LOOP $label$25:
	if ( ((int_32)($4 & [255]) != (int_32)*($2)) ){ goto $label$24 }
	$2 = ($2 + [1])
	$4 = *($3)
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$25 }
	goto $label$1 
	
.LABEL $label$24
	$5 = $4
	
.LABEL $label$1
	if ( ((int_32)($5 & [255]) != (int_32)*($2)) ){ goto $label$26 }
	*($1) = *($0)
	return 
	
.LABEL $label$26
	*($1) = [0]
	$2
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $93($0, *($1), $2, $3)
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4) = [0]
	$5 = *($1 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	$7 = $1
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$7 = *($1)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	$8 = *(($4 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$10 }
	if ( ((uint_32)$8 >= (uint_32)[9]) ){ goto $label$12 }
	$9 = ($4 + $8)
	if ( ($8 == 0) ){ goto $label$9 }
	
.LOOP $label$13:
	$10 = *($2)
	$5 = $4
	$6 = $8
	
.LOOP $label$14:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$14 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$15 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = *($4)
	$12 = ($9 + $8)
	
.LOOP $label$16:
	$10 = *($2)
	$5 = $9
	$6 = $8
	
.LOOP $label$17:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$17 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$18 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$18
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$11
	$2 = $3
	
.LABEL $label$10
	if ( ($8 <= [9]) ){ goto $label$8 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$7 }
	$5 = *($4)
	
.LOOP $label$19:
	if ( ((int_32)$5 <= (int_32)*($2)) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$19 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	if ( (*($1 + [12]) == 0) ){ goto $label$20 }
	$8 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$20
	$9 = *(($1 + [8]))
	if ( ((uint_32)$9 >= (uint_32)[9]) ){ goto $label$6 }
	$12 = ($1 + $9)
	if ( ($9 == 0) ){ goto $label$5 }
	$8 = $2
	
.LOOP $label$21:
	$10 = *($8)
	$5 = $1
	$6 = $9
	
.LOOP $label$22:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$22 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$21 }
	goto $label$4 
	
.LABEL $label$7
	$2 = $3
	goto $label$4 
	
.LABEL $label$6
	$12 = *($1)
	$1 = ($12 + $9)
	$8 = $2
	
.LOOP $label$23:
	$10 = *($8)
	$5 = $12
	$6 = $9
	
.LOOP $label$24:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$24 }
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$23 }
	goto $label$4 
	
.LABEL $label$5
	$6 = ((int_32)$12 == (int_32)$1)
	if ( $6 ){ goto $label$25 }
	$7 = ($3 + [-1])
	$5 = *($1)
	$8 = $2
	
.LOOP $label$26:
	if ( ((int_32)$5 > (int_32)*($8)) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ($6 == 0) ){ goto $label$26 }
	goto $label$3 
	
.LABEL $label$25
	$8 = $2
	goto $label$3 
	
.LABEL $label$4
	$8 = $3
	
.LABEL $label$3
	*($0 + [4]) = $8
	*($0) = $2
	$global$0 = ($4 + [16])
}

void .FUNC $138 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $123 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $113(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $134(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8474], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $113(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $113(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $147($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $110($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $113(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $134(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8459], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $113(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $113(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [11] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19760]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $130([12], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_64 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $147([8404])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8404], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $128())
	*(CALL $128()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $141($4, ($3 + [12]), $2)
	$0 = CALL $128()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $118($3)
	
.LABEL $label$1
	CALL $119($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $137 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $136($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $147([8359])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8359], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $128())
	*(CALL $128()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $142($4, ($3 + [12]), $2)
	$5 = CALL $128()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $118($3)
	
.LABEL $label$1
	CALL $119($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $147([8482])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [8482], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	CALL $123(($3 + [48]), *($2))
	$5 = *($3 + [48])
	$6 = ($5 & [1])
	$4 = (($3 + [48]) | [1])
	CALL $116($0, ( *($3 + [56]) ? $4 : $6 ), ( *($3 + [52]) ? uint_32($5 >> [1]) : $6 ))
	CALL $115($0, [8490])
	CALL $123(($3 + [64]), *($2 + [8]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$7 }
	*($3 + [48]) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($3 + [56]))) = [0]
	*($3 + [52]) = [0]
	
.LABEL $label$6
	$5 = [0]
	CALL $111(($3 + [48]), [0])
	$6 = *((($3 + [64]) + [8]))
	*((($3 + [48]) + [8])) = $6
	*($3 + [48]) = *($3 + [64])
	$7 = *($3 + [48])
	$8 = ($7 & [1])
	CALL $116($0, ( $6 ? $4 : $8 ), ( *($3 + [52]) ? uint_32($7 >> [1]) : $8 ))
	CALL $115($0, [8499])
	$4 = *($2 + [16])
	$6 = ($4 & [1])
	*($3 + [16]) = ( *(($2 + [24])) ? ($2 + [17]) : $6 )
	*($3 + [20]) = ( *(($2 + [20])) ? uint_32($4 >> [1]) : $6 )
	*($3 + [8]) = *($3 + [16])
	$9 = *(CALL $10(($3 + [24]), ($3 + [8])))
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$11 }
	$6 = *([0] + [10352])
	
.LOOP $label$13:
	*((($3 + [64]) + ($4 = $5))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$12 }
	$9 = ((int_64)$9 << (int_64)5)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$10 }
	*($3 + [32]) = ($5 << [1])
	$6 = (($3 + [32]) | [1])
	goto $label$9 
	
.LABEL $label$11
	*((($3 + [32]) + [8])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [32]) = [0]
	$4 = (($3 + [32]) | [1])
	$5 = $4
	goto $label$8 
	
.LABEL $label$10
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3 + [32]) = ($7 | [1])
	*($3 + [40]) = $6
	*($3 + [36]) = $5
	
.LABEL $label$9
	$7 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$14:
	*(($6 + $4)) = *((($3 + [64]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$14 }
	$5 = ($6 + $5)
	$4 = (($3 + [32]) | [1])
	
.LABEL $label$8
	*($5) = [0]
	$5 = *($3 + [32])
	$6 = ($5 & [1])
	CALL $116($0, ( *($3 + [40]) ? $4 : $6 ), ( *($3 + [36]) ? uint_32($5 >> [1]) : $6 ))
	CALL $115($0, [8508])
	$4 = *($2 + [32])
	$5 = ($4 & [1])
	CALL $116($0, ( *(($2 + [40])) ? ($2 + [33]) : $5 ), ( *(($2 + [36])) ? uint_32($4 >> [1]) : $5 ))
	CALL $115($0, [8519])
	if ( (*($3 + [32]) & [1]) ){ goto $label$16 }
	if ( (*($3 + [48]) & [1]) ){ goto $label$15 }
	goto $label$1 
	
.LABEL $label$16
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [56])))
	$global$0 = ($3 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

void .FUNC $126 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4) = [0]
	$5 = *($2 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $2, $5)
	*($4 + [32]) = [0]
	$2 = *(($4 + [8]))
	*($4 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $4
	$6 = ($4 + [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($2)
	*($4 + [32]) = $6
	$5 = *($4)
	
.LABEL $label$3
	CALL memcpy($6, $5, $2)
	*($4 + [16]) = [0]
	$2 = *((($4 + [32]) + [8]))
	*($4 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$5 = ($4 + [16])
	$6 = ($4 + [32])
	goto $label$5 
	
.LABEL $label$6
	$5 = CALL _Znaj($2)
	*($4 + [16]) = $5
	$2 = *((($4 + [16]) + [8]))
	$6 = *($4 + [32])
	
.LABEL $label$5
	CALL memcpy($5, $6, $2)
	*($4 + [28]) = $3
	if ( (*((($4 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdaPv($2)
	
.LABEL $label$7
	$2 = CALL $63($0, $1, ($4 + [16]))
	if ( (*((($4 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	
.LABEL $label$8
	if ( (*(($4 + [8])) <= [9]) ){ goto $label$9 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdaPv($5)
	
.LABEL $label$9
	$global$0 = ($4 + [48])
	return $2
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9995])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $152($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10018])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [10018])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $83(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $155($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $125 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $108(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $108(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10018])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $70(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [11178])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [11224])
	$6 = ($1 + [8])
	*(($5 = $4) + [16]) = *($6)
	$7 = *($1)
	$8 = ($1 + [16])
	CALL $109($8, $8)
	$9 = ($1 + [32])
	CALL $109($9, $9)
	*($1 + [80]) = *(*($3))
	$3 = *($3 + [4])
	*(($1 + [96])) = *(($3 + [8]))
	*($1 + [88]) = *($3)
	$10 = ($1 + [104])
	CALL $109($10, $10)
	$11 = ($1 + [116])
	CALL $109($11, $11)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [11275])
	*($5 + [24]) = [0]
	*($5) = ($5 + [24])
	*($5 + [36]) = $6
	*($5 + [32]) = $1
	*($5 + [40]) = $8
	$12 = ($1 + [28])
	*($5 + [44]) = $12
	*($5 + [48]) = $9
	$13 = ($1 + [48])
	*($5 + [52]) = $13
	$14 = ($1 + [64])
	*($5 + [56]) = $14
	$15 = ($1 + [80])
	*($5 + [60]) = $15
	$16 = ($1 + [88])
	*($5 + [64]) = $16
	*($5 + [68]) = $10
	*($5 + [72]) = $11
	CALL $94(($5 + [32]), $5)
	$17 = *($5 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$3 = CALL $152($17)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $17)
	*($5 + [24]) = $5
	*($5 + [36]) = $6
	*($5 + [40]) = $8
	*($5 + [44]) = $12
	*($5 + [48]) = $9
	*($5 + [52]) = $13
	*($5 + [56]) = $14
	*($5 + [60]) = $15
	*($5 + [64]) = $16
	*($5 + [68]) = $10
	*($5 + [72]) = $11
	*($5 + [32]) = $1
	CALL $95(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $3, $17)
	if ( ($17 <= [513]) ){ goto $label$3 }
	CALL $155($3)
	
.LABEL $label$3
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [32]) = *($6)
	if ( (CALL $143(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3778232677491212288, ($5 + [24]), $7)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($5 + [32]))
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
	int_32 $10
	int_64 $11
	$10 = ($global$0 - [192])
	$global$0 = $10
	$11 = *($0)
	*($10 + [16]) = $2
	*($10 + [8]) = $1
	CALL $108((($10 + [8]) + [16]), $3)
	*(($10 + [48])) = *(($4 + [8]))
	*(($10 + [64])) = *(($5 + [8]))
	*(($10 + [88])) = *(($7 + [8]))
	*($10 + [72]) = $6
	*($10 + [40]) = *($4)
	*($10 + [56]) = *($5)
	*($10 + [80]) = *($7)
	CALL $108(($10 + [96]), $8)
	CALL $108(($10 + [108]), $9)
	*($10 + [128]) = (int_64)-8279457654029533184
	*($10 + [120]) = $11
	*(($7 = CALL _Znwj([16]))) = $11
	*($7 + [8]) = (int_64)3617214756542218240
	$5 = [0]
	*(($10 + [156])) = [0]
	$4 = ($7 + [16])
	*(($10 + [144])) = $4
	*(($10 + [140])) = $4
	*($10 + [136]) = $7
	*($10 + [148 align=4]) = (int_64)0
	*($10 + [160]) = [0]
	*($10 + [168]) = ($10 + [160])
	*($10 + [176]) = ($10 + [8])
	CALL $65(($10 + [176]), ($10 + [168]))
	$7 = *($10 + [160])
	if ( ($7 == 0) ){ goto $label$2 }
	$4 = ($10 + [148])
	CALL $5($4, $7)
	$5 = *(($10 + [152]))
	$7 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	*($10 + [180]) = $7
	*($10 + [176]) = $7
	*($10 + [184]) = $5
	*($10 + [160]) = ($10 + [176])
	*($10 + [168]) = ($10 + [8])
	CALL $66(($10 + [168]), ($10 + [160]))
	CALL $6(($10 + [176]), ($10 + [120]))
	$7 = *($10 + [176])
	CALL send_inline($7, (*($10 + [180]) - $7))
	$7 = *($10 + [176])
	if ( ($7 == 0) ){ goto $label$3 }
	*($10 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$7 = *($10 + [148])
	if ( ($7 == 0) ){ goto $label$4 }
	*(($10 + [152])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($10 + [136])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($10 + [140])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	if ( (*($10 + [108]) & [1]) ){ goto $label$10 }
	if ( (*($10 + [96]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($10 + [116])))
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($10 + [104])))
	if ( ((*($10 + [24]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($10 + [24]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($10 + [192])
	return 
	
.LABEL $label$6
	CALL _ZdlPv(*(($10 + [32])))
	$global$0 = ($10 + [192])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [224])
	$global$0 = $2
	*(($3 = (($2 + [96]) + [8]))) = *(($1 + [24]))
	*($2 + [96]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $108(($2 + [80]), ($1 + [32]))
	*(($7 = (($2 + [48]) + [24]))) = *(($1 + [72]))
	*(($8 = (($2 + [48]) + [16]))) = *(($1 + [64]))
	*($2 + [56]) = *(($1 + [56]))
	*($2 + [48]) = *($1 + [48])
	$9 = *($1 + [80])
	$10 = *($1 + [84])
	*((($2 + [128]) + [24])) = *($7)
	*((($2 + [128]) + [16])) = *($8)
	*((($2 + [112]) + [8])) = *($3)
	*($2 + [136]) = *($2 + [56])
	*($2 + [128]) = *($2 + [48])
	*($2 + [112]) = *($2 + [96])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($7 = (($2 + [208]) + [8]))) = *((($2 + [112]) + [8]))
	*($2 + [208]) = *($2 + [112])
	$3 = CALL $108(($2 + [192]), $6)
	$11 = *((($2 + [128]) + [24]))
	*((($2 + [160]) + [24])) = $11
	$12 = *((($2 + [128]) + [16]))
	*((($2 + [160]) + [16])) = $12
	*((($2 + [32]) + [8])) = *($7)
	*(($2 + [16])) = $12
	*(($2 + [24])) = $11
	$11 = *($2 + [136])
	*($2 + [168]) = $11
	$12 = *($2 + [128])
	*($2 + [160]) = $12
	*($2 + [32]) = *($2 + [208])
	*($2) = $12
	*($2 + [8]) = $11
	CALL void $0((int_32 $5), (int_64 $4), (int_64 ($2 + [32])), (int_32 $3), (int_32 $2), (int_32 $9), (int_32 $10), (int_32 $1))
	if ( (*($2 + [192]) & [1]) ){ goto $label$4 }
	if ( (*($6) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [224])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10018])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $70(*($1), ($0 + [32]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [10018])
	CALL memcpy(($0 + [48]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10018])
	CALL memcpy(($0 + [80]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10018])
	CALL memcpy(($0 + [84]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [10091])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [10136])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10186])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [116]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [124])))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [112])))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [40])))
	if ( (*($4 + [16]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($6 + [124])))
	if ( ((*($6 + [104]) & [1]) == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((*($6 + [104]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($6 + [112])))
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($6 + [40])))
	if ( (*($6 + [16]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$19
	CALL _ZdlPv($6)
	
.LABEL $label$18
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$17 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [132]))
	$6 = *(($1 + [136]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$27 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3778232677491212288, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$26 }
	
.LABEL $label$27
	CALL db_idx64_remove($6)
	
.LABEL $label$26
	$global$0 = ($2 + [16])
}

void .FUNC $44 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [288])
	$global$0 = $5
	if ( (CALL $2() == 0) ){ goto $label$1 }
	CALL $1(($5 + [256]))
	$6 = (($5 + [256]) + [16])
	$7 = *($6)
	*((($5 + [224]) + [16])) = $7
	$8 = (($5 + [256]) + [24])
	$9 = *($8)
	*((($5 + [224]) + [24])) = $9
	$10 = *($0)
	*(($5 + [16])) = $7
	*(($5 + [24])) = $9
	$7 = *($5 + [256])
	*($5 + [224]) = $7
	$9 = *($5 + [264])
	*($5 + [232]) = $9
	*($5) = $7
	*($5 + [8]) = $9
	CALL $4($10, $1, $5)
	$7 = CALL current_time()
	*(($5 + [188])) = (int_64)0
	*(($5 + [204])) = (int_64)0
	*(($5 + [212])) = (int_64)0
	*($5 + [172]) = [0]
	*($5 + [176]) = [0]
	*($5 + [196 align=4]) = (int_64)0
	*($5 + [180 align=4]) = (int_64)1
	*($5 + [160]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($5 + [152]) = (int_64)3617214756542218240
	*($5 + [144]) = *($0)
	*($5 + [136]) = (int_64)5374671879358719488
	$11 = CALL tapos_block_num()
	*((($5 + [32]) + [24])) = *(($3 + [8]))
	*($5 + [40]) = $2
	*($5 + [32]) = $1
	*($5 + [48]) = *($3)
	CALL $108(($5 + [64]), $4)
	*(($5 + [104])) = *($8)
	*(($5 + [96])) = *($6)
	*(($5 + [88])) = *($5 + [264])
	*($5 + [112]) = $11
	*($5 + [80]) = *($5 + [256])
	*($5 + [116]) = [1]
	CALL $60(($5 + [196]), ($5 + [144]), $0, ($5 + [136]), ($5 + [32]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$2
	$1 = CALL current_time()
	*($5 + [40]) = (int_64)0
	*($5 + [32]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$1 = *($0)
	CALL $61(($5 + [144]), ($5 + [160]))
	$0 = *($5 + [144])
	CALL send_deferred(($5 + [32]), $1, $0, (*($5 + [148]) - $0), [0])
	$0 = *($5 + [144])
	if ( ($0 == 0) ){ goto $label$3 }
	*($5 + [148]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	CALL prints([8691])
	CALL $62(($5 + [160]))
	$global$0 = ($5 + [288])
	return 
	
.LABEL $label$1
	CALL prints([8654])
	CALL eosio_assert([0], [8673])
	$global$0 = ($5 + [288])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $147($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $110($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $128 ()
{
	return [11340]
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9995])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $152($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [112]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [64])
	*($3 + [56]) = ($5 + [96])
	CALL $80(($3 + [40]), ($3 + [32]))
	*($5 + [116]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $81(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $155($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL memory()
	CALL prints([8410])
	if ( (CALL $2() == 0) ){ goto $label$1 }
	$4 = [0]
	[0]
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$4 }
	*($3 + [192]) = [8422]
	*($3 + [196]) = CALL $147([8422])
	*($3 + [88]) = *($3 + [192])
	CALL $10(($3 + [200]), ($3 + [88]))
	[1]
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$3 }
	
.LABEL $label$4
	*($3 + [176]) = [8431]
	*($3 + [180]) = CALL $147([8431])
	*($3 + [80]) = *($3 + [176])
	CALL $10(($3 + [184]), ($3 + [80]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$5 }
	*($3 + [160]) = [8422]
	*($3 + [164]) = CALL $147([8422])
	*($3 + [72]) = *($3 + [160])
	$4 = ((int_64)$2 == (int_64)-3617168760277827584)
	CALL $10(($3 + [168]), ($3 + [72]))
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL prints([8443])
	CALL printui($1)
	CALL prints([8450])
	CALL printui($2)
	CALL prints([8462])
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)-4994301883842383361) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-6215726818809348096) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-4994301920075812352) ){ goto $label$2 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [1]
	*($3 + [40]) = *($3 + [120])
	CALL $12($0, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$12
	if ( ((int_64)$2 > (int_64)5378271449444777983) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)5374671879358719488) ){ goto $label$2 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [2]
	*($3 + [48]) = *($3 + [112])
	CALL $14($0, $1, ($3 + [48]))
	goto $label$2 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4994301883842383360) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$2 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [8]) = *($3 + [152])
	CALL $16($0, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)5378271449444777984) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)5378308552476065792) ){ goto $label$2 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [4]
	*($3 + [56]) = *($3 + [104])
	CALL $18($0, $1, ($3 + [56]))
	goto $label$2 
	
.LABEL $label$9
	*($3 + [148]) = [0]
	*($3 + [144]) = [5]
	*($3 + [16]) = *($3 + [144])
	CALL $20($0, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [140]) = [0]
	*($3 + [136]) = [6]
	*($3 + [24]) = *($3 + [136])
	CALL $22($0, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [132]) = [0]
	*($3 + [128]) = [7]
	*($3 + [32]) = *($3 + [128])
	CALL $12($0, $1, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [100]) = [0]
	*($3 + [96]) = [8]
	*($3 + [64]) = *($3 + [96])
	CALL $18($0, $1, ($3 + [64]))
	
.LABEL $label$2
	CALL $129([0])
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$1
	CALL eosio_exit([0])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $5($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9737])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9737])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $68(CALL $67($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $7 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	$3 = ($global$0 - [96])
	$global$0 = $3
	if ( ((int_64)$0 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [10352])
	
.LOOP $label$6:
	*((($3 + [8]) + ($6 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$0 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$4 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$0 = ((int_64)$0 << (int_64)5)
	if ( ((int_64)$0 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [48]) = ($4 << [1])
	$5 = (($3 + [48]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [48]) = [0]
	$6 = (($3 + [48]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$7 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($3 + [48]) = ($7 | [1])
	*($3 + [56]) = $5
	*($3 + [52]) = $4
	
.LABEL $label$2
	$7 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($5 + $6)) = *((($3 + [8]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$7 }
	$6 = ($5 + $4)
	
.LABEL $label$1
	*($6) = [0]
	$6 = CALL $115(($3 + [48]), [8390])
	$4 = ($6 + [8])
	*((($3 + [8]) + [8])) = *($4)
	*($3 + [8]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [56]))
	
.LABEL $label$8
	$6 = *($3 + [8])
	$4 = ($6 & [1])
	CALL sha256(( *($3 + [16]) ? (($3 + [8]) | [1]) : $4 ), ( *($3 + [12]) ? uint_32($6 >> [1]) : $4 ), ($3 + [48]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$9
	$7 = [0]
	*((($3 + [8]) + [32])) = [0]
	*($3 + [16]) = (int_64)5308437971887354384
	*($3 + [8]) = (int_64)5308437971887354384
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$6 = CALL db_lowerbound_i64((int_64)5308437971887354384, (int_64)5308437971887354384, (int_64)-4994024814571159552, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$6 = CALL $8(($3 + [8]), $6)
	$8 = *($1 + [16])
	$9 = *($1 + [24])
	$10 = *($1)
	$11 = *($1 + [8])
	$4 = ($3 + [64])
	
.LOOP $label$14:
	$12 = *(($6 + [40]))
	$13 = *(($6 + [32]))
	$0 = *(($6 + [24]))
	$14 = *($6 + [16])
	CALL eosio_assert([1], [9743])
	CALL eosio_assert([1], [9743])
	$15 = *((($3 + [48]) + [24]))
	$16 = *($4)
	$17 = *($3 + [56])
	$18 = *($3 + [48])
	CALL eosio_assert([1], [9743])
	CALL eosio_assert([1], [9743])
	if ( ((int_64)((int_64)((int_64)$0 ^ (int_64)$17) | (int_64)((int_64)$14 ^ (int_64)$18)) != (int_64)0) ){ goto $label$15 }
	if ( ((int_64)((int_64)((int_64)$12 ^ (int_64)$15) | (int_64)((int_64)$13 ^ (int_64)$16)) != (int_64)0) ){ goto $label$15 }
	$17 = *(($6 + [88]))
	$18 = *(($6 + [80]))
	$0 = *(($6 + [72]))
	$14 = *($6 + [64])
	CALL eosio_assert([1], [9743])
	CALL eosio_assert([1], [9743])
	CALL eosio_assert([1], [9743])
	CALL eosio_assert([1], [9743])
	if ( ((int_64)((int_64)((int_64)$0 ^ (int_64)$11) | (int_64)((int_64)$14 ^ (int_64)$10)) != (int_64)0) ){ goto $label$15 }
	if ( ((int_64)((int_64)((int_64)$17 ^ (int_64)$9) | (int_64)((int_64)$18 ^ (int_64)$8)) != (int_64)0) ){ goto $label$15 }
	if ( ((int_32)*($6 + [48]) == (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$15
	CALL eosio_assert([1], [10061])
	$6 = CALL db_next_i64(*($6 + [116]), ($3 + [88]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	$6 = CALL $8(($3 + [8]), $6)
	goto $label$14 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$13
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$7 = *($6 + [96])
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = ($3 + [36])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$19 }
	$6 = *(($3 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$6 = $5
	
.LABEL $label$17
	*($2) = $5
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return $7
}

void .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [112])
	$global$0 = $3
	*(($3 + [24])) = *(($2 + [8]))
	*(($3 + [32])) = *(($2 + [16]))
	*(($3 + [40])) = *(($2 + [24]))
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [56]) = (int_64)5308437971887354384
	*($3 + [64]) = (int_64)4851652232166244352
	*($3 + [16]) = *($2)
	*(($2 = CALL _Znwj([16]))) = $0
	*($2 + [8]) = (int_64)3617214756542218240
	*(($3 + [92])) = [0]
	$4 = ($2 + [16])
	*((($3 + [56]) + [24])) = $4
	*(($3 + [76])) = $4
	*($3 + [72]) = $2
	*($3 + [84 align=4]) = (int_64)0
	CALL $5(($3 + [84]), [48])
	$2 = *($3 + [84])
	$4 = (*((($3 + [56]) + [32])) - $2)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9737])
	CALL memcpy($2, $3, [8])
	CALL eosio_assert(((int_32)($4 + [-8]) > (int_32)[7]), [9737])
	CALL memcpy(($2 + [8]), ($3 | [8]), [8])
	CALL eosio_assert(((int_32)($4 + [-16]) > (int_32)[31]), [9737])
	CALL memcpy(($2 + [16]), ($3 + [16]), [32])
	CALL $6(($3 + [96]), ($3 + [56]))
	$2 = *($3 + [96])
	CALL send_inline($2, (*($3 + [100]) - $2))
	$2 = *($3 + [96])
	if ( ($2 == 0) ){ goto $label$1 }
	*($3 + [100]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$2 = *($3 + [84])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($3 + [88])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$2 = *($3 + [72])
	if ( ($2 == 0) ){ goto $label$3 }
	*(($3 + [76])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$global$0 = ($3 + [112])
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $2 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$0 = ($global$0 - [48])
	$global$0 = $0
	CALL prints([8192])
	*(($0 + [40])) = [0]
	*($0 + [16]) = (int_64)5308437971887354384
	*($0 + [8]) = (int_64)5308437971887354384
	*($0 + [24]) = (int_64)-1
	*($0 + [32]) = (int_64)0
	$1 = CALL db_find_i64((int_64)5308437971887354384, (int_64)5308437971887354384, (int_64)-4098957134778073088, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$4 }
	$1 = CALL $3(($0 + [8]), $1)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)($0 + [8])), [10615])
	CALL prints([8258])
	CALL prints(( [10666] ? [10671] : *($1 + [8]) ))
	CALL prints([8356])
	$2 = ((int_32)*($1 + [8]) != (int_32)[0])
	$3 = *($0 + [32])
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = ($0 + [36])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$6 }
	CALL _ZdlPv($5)
	
.LABEL $label$6
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($0 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL prints([8364])
	$2 = [1]
	
.LABEL $label$3
	$global$0 = ($0 + [48])
	return $2
	
.LABEL $label$2
	$1 = $3
	
.LABEL $label$1
	*($4) = $3
	CALL _ZdlPv($1)
	$global$0 = ($0 + [48])
	return $2
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9995])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $152($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10018])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [10018])
	CALL memcpy(($3 + [16]), ($2 + [8]), [1])
	*($5 + [8]) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $79(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $155($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = CALL transaction_size()
	$1 = $global$0
	$3 = ($1 - (($2 + [15]) & [-16]))
	$global$0 = $3
	CALL sha256($3, CALL $fimport$1($3, $2), $0)
	$global$0 = $1
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [304])
	$global$0 = $3
	*(($4 = $3) + [248]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [144]) + [24])) = (int_64)0
	*((($4 + [144]) + [40])) = [0]
	*(($4 + [216])) = (int_64)0
	*((($4 + [144]) + [64])) = (int_64)0
	*((($4 + [144]) + [56])) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $5)
	*($4 + [288]) = ($4 + [128])
	*($4 + [16]) = ($4 + [144])
	CALL $46(($4 + [16]), ($4 + [288]))
	*(($3 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$3 = *($3)
	*((($4 + [256]) + [8])) = $3
	*(($6 = (($4 + [272]) + [8]))) = $3
	$7 = *($4)
	*($4 + [272]) = $7
	*($4 + [256]) = $7
	$3 = *($6)
	*((($4 + [288]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [272])
	*($4 + [32]) = $1
	*($4 + [288]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($3 = (($4 + [16]) + [56]))) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($6 = ($4 + [112]))) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [292]) = ($4 + [248])
	*($4 + [288]) = ($4 + [16])
	CALL $47(($4 + [288]), ($4 + [144]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $155($2)
	
.LABEL $label$4
	CALL $26($6)
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [72]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$11
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [128])
	$global$0 = $5
	*($5 + [96]) = $2
	*($5 + [104]) = $1
	*($5 + [92]) = $3
	CALL require_auth(*($0))
	CALL prints([9152])
	CALL printui($1)
	CALL prints([9182])
	CALL printui($2)
	CALL prints([9197])
	CALL printui((CASTING uint_64)(uint_32 $3))
	CALL prints([9210])
	CALL printui($4)
	CALL prints([8462])
	*(($5 + [80])) = [0]
	*($5 + [72]) = (int_64)0
	*($5 + [64]) = (int_64)0
	$6 = ($0 + [32])
	$8 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$3 = ($8 + [-24])
	$9 = *($3)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$4 }
	$8 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [36]) == (int_32)$6), [10615])
	if ( ($9 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($6), *(($0 + [40])), (int_64)-3778232672803445872, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $27($6, $3)
	CALL eosio_assert(((int_32)*($9 + [36]) == (int_32)$6), [10615])
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	*($5 + [56]) = $4
	CALL prints([9210])
	CALL printui($4)
	CALL prints([8462])
	CALL $156(($5 + [16]), ($5 + [56]), [4])
	CALL $28($5, *($5 + [16]), ($5 + [64]))
	CALL prints([9152])
	CALL printui($1)
	CALL prints([9224])
	$3 = *($5 + [64])
	CALL printi((CASTING int_64)(int_32 $3))
	CALL prints([9024])
	$8 = *($5 + [68])
	CALL printi((CASTING int_64)(int_32 $8))
	CALL prints([9024])
	$7 = *($5 + [72])
	CALL printi((CASTING int_64)(int_32 $7))
	CALL prints([9024])
	$10 = *($5 + [76])
	CALL printi((CASTING int_64)(int_32 $10))
	CALL prints([9024])
	$11 = *($5 + [80])
	CALL printi((CASTING int_64)(int_32 $11))
	CALL prints([8462])
	CALL $122(($5 + [16]), $3)
	CALL $115(($5 + [16]), [9024])
	CALL $122($5, $8)
	$8 = *($5)
	$12 = ($8 & [1])
	$3 = ($5 | [1])
	CALL $116(($5 + [16]), ( *($5 + [8]) ? $3 : $12 ), ( *($5 + [4]) ? uint_32($8 >> [1]) : $12 ))
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$6
	CALL $115(($5 + [16]), [9024])
	CALL $122($5, $7)
	$8 = *($5)
	$7 = ($8 & [1])
	CALL $116(($5 + [16]), ( *($5 + [8]) ? $3 : $7 ), ( *($5 + [4]) ? uint_32($8 >> [1]) : $7 ))
	if ( ((*($5) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$7
	CALL $115(($5 + [16]), [9024])
	CALL $122($5, $10)
	$8 = *($5)
	$7 = ($8 & [1])
	$3 = ($5 | [1])
	CALL $116(($5 + [16]), ( *($5 + [8]) ? $3 : $7 ), ( *($5 + [4]) ? uint_32($8 >> [1]) : $7 ))
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$8
	CALL $115(($5 + [16]), [9024])
	CALL $122($5, $11)
	$8 = *($5)
	$7 = ($8 & [1])
	CALL $116(($5 + [16]), ( *($5 + [8]) ? $3 : $7 ), ( *($5 + [4]) ? uint_32($8 >> [1]) : $7 ))
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$9
	$3 = *($5 + [24])
	$8 = *($5 + [16])
	CALL prints([9239])
	CALL printui(*($5 + [104]))
	CALL prints([9268])
	CALL prints(( $3 ? (($5 + [16]) | [1]) : ($8 & [1]) ))
	CALL prints([8462])
	$1 = *($0)
	*($5 + [4]) = ($5 + [92])
	*($5) = ($5 + [104])
	*($5 + [8]) = ($5 + [16])
	CALL eosio_assert([1], [11143])
	CALL $29($6, $9, $1, $5)
	CALL $30($0, *($5 + [104]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$10
	$2 = *($5 + [96])
	
.LABEL $label$1
	CALL prints([9283])
	CALL prints([8462])
	if ( (int_64)($2 == 0) ){ goto $label$11 }
	$8 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$16:
	$3 = ($8 + [-24])
	$9 = *($3)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$15 }
	$8 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($9 + [36]) == (int_32)$6), [10615])
	if ( $9 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$3 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-3778232672803445872, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$12 }
	$9 = CALL $27($6, $3)
	CALL eosio_assert(((int_32)*($9 + [36]) == (int_32)$6), [10615])
	
.LABEL $label$13
	CALL eosio_assert([1], [10027])
	CALL eosio_assert([1], [10061])
	$3 = CALL db_next_i64(*($9 + [40]), ($5 + [16]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$17 }
	CALL $27($6, $3)
	
.LABEL $label$17
	CALL $31($6, $9)
	
.LABEL $label$12
	$1 = *($0)
	*($5 + [60]) = ($5 + [92])
	*($5 + [56]) = ($5 + [96])
	*($5) = $1
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$16()), [11092])
	*($5 + [16]) = $6
	*($5 + [20]) = ($5 + [56])
	*($5 + [24]) = $5
	*(($3 = CALL _Znwj([48])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [36]) = $6
	CALL $32(($5 + [16]), $3)
	*($5 + [120]) = $3
	$1 = *($3)
	*($5 + [16]) = $1
	$9 = *($3 + [40])
	*($5 + [116]) = $9
	$7 = ($0 + [60])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [64]))) ){ goto $label$19 }
	*($8 + [8]) = $1
	*($8 + [16]) = $9
	*($5 + [120]) = [0]
	*($8) = $3
	*($7) = ($8 + [24])
	$3 = *($5 + [120])
	*($5 + [120]) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	goto $label$18 
	
.LABEL $label$19
	CALL $33(($0 + [56]), ($5 + [120]), ($5 + [16]), ($5 + [116]))
	$3 = *($5 + [120])
	*($5 + [120]) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	
.LABEL $label$18
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$20
	CALL _ZdlPv($3)
	
.LABEL $label$11
	CALL prints([9318])
	CALL prints([8462])
	$global$0 = ($5 + [128])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = [0]
	*($4 + [168]) = (int_64)0
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $7)
	*($4 + [208]) = ($4 + [128])
	*($4 + [16]) = ($4 + [144])
	CALL $25(($4 + [16]), ($4 + [208]))
	*(($3 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$3 = *($3)
	*((($4 + [176]) + [8])) = $3
	*(($8 = (($4 + [192]) + [8]))) = $3
	$9 = *($4)
	*($4 + [192]) = $9
	*($4 + [176]) = $9
	$3 = *($8)
	*((($4 + [208]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [192])
	*($4 + [32]) = $1
	*($4 + [208]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [168])
	$8 = *($4 + [160])
	$1 = *($4 + [152])
	$9 = *($4 + [144])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $8), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $155($2)
	
.LABEL $label$5
	CALL $26(($4 + [112]))
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	if ( ((*($7 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($7 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $1
	CALL prints([10286])
	CALL printui($1)
	CALL prints([8462])
	CALL require_auth(*($0))
	*($3 + [8]) = ($0 + [72])
	CALL $57(($3 + [24]), ($3 + [8]), ($3 + [16]))
	$0 = *($3 + [28])
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((int_64)*($3 + [16]) != (int_64)*($0 + [8])) ){ goto $label$1 }
	$4 = *($3 + [24])
	
.LOOP $label$2:
	if ( ((int_64)*($0 + [8]) != (int_64)*($3 + [16])) ){ goto $label$1 }
	if ( ((int_64)*($0 + [28]) != (int_64)$2) ){ goto $label$1 }
	CALL prints([9969])
	CALL printui(*($0))
	*($3 + [24]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $4))
	CALL eosio_assert([1], [10027])
	CALL $58(($3 + [24]))
	CALL $45(*($3 + [8]), $0)
	CALL $57(($3 + [24]), ($3 + [8]), ($3 + [16]))
	$1 = (int_64)0
	$4 = ($3 + [8])
	$0 = *($3 + [28])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((int_64)*($3 + [16]) != (int_64)*($0 + [8])) ){ goto $label$3 }
	$5 = *($3 + [24])
	$1 = (uint_64)$5 >> (uint_64)(int_64)32)
	$4 = (CASTING uint_32)(uint_64 $5)
	
.LABEL $label$3
	CALL prints([10325])
	$0 = (CASTING uint_32)(uint_64 $1)
	CALL printui(*($0))
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9785])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9890])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9823])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9890])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL prints([10239])
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-3778232672803445872, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [32])
	$0 = CALL $27($3, $2)
	
.LOOP $label$2:
	CALL prints([10263])
	CALL printui(*($0))
	CALL eosio_assert([1], [10027])
	CALL eosio_assert([1], [10061])
	$2 = [0]
	$4 = CALL db_next_i64(*($0 + [40]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $27($3, $4)
	
.LABEL $label$3
	CALL $31($3, $0)
	$0 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $155($2)
	
.LABEL $label$5
	CALL $26(($4 + [96]))
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	if ( ((*($7 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($7 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [56]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [112])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$8 = ($global$0 - [624])
	$global$0 = $8
	*($8 + [600]) = $1
	CALL prints([8708])
	$9 = *(($5 + [24]))
	*((($8 + [560]) + [24])) = $9
	$10 = *(($5 + [16]))
	*((($8 + [560]) + [16])) = $10
	$11 = *(($5 + [8]))
	$12 = *($5)
	*(($8 + [16])) = $10
	*(($8 + [24])) = $9
	*($8 + [568]) = $11
	*($8) = $12
	*($8 + [560]) = $12
	*($8 + [8]) = $11
	$5 = CALL $7($1, $8, $6)
	CALL prints([8725])
	CALL printui((CASTING uint_64)(uint_32 $5))
	if ( ($5 == 0) ){ goto $label$6 }
	$5 = [8739]
	$6 = *([8739])
	if ( ($6 == 0) ){ goto $label$4 }
	
.LOOP $label$7:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$5 }
	CALL prints_l($5, [1])
	$5 = ($5 + [1])
	$6 = *($5)
	if ( $6 ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	*(($8 + [552])) = [0]
	*($8 + [528]) = (int_64)5308437971887349056
	*($8 + [520]) = (int_64)5308437971887349056
	*($8 + [536]) = (int_64)-1
	*($8 + [544]) = (int_64)0
	$5 = CALL db_find_i64((int_64)5308437971887349056, (int_64)5308437971887349056, (int_64)-5920905891866591232, (CASTING uint_64)(uint_32 $7))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $48(($8 + [520]), $5) + [16]) == (int_32)($8 + [520])), [10615])
	
.LABEL $label$8
	*($8 + [512]) = [0]
	*($8 + [504]) = (int_64)0
	$5 = CALL $147([8781])
	*($8 + [496]) = $5
	*($8 + [488]) = [0]
	if ( ((uint_32)$5 >= (uint_32)[9]) ){ goto $label$3 }
	$6 = ($8 + [488])
	if ( $5 ){ goto $label$2 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$5
	CALL printn($1)
	CALL prints(($5 + [1]))
	
.LABEL $label$4
	CALL eosio_assert([0], [8764])
	$global$0 = ($8 + [624])
	return (unreachable)
	
.LABEL $label$3
	$6 = CALL _Znaj($5)
	*($8 + [488]) = $6
	
.LABEL $label$2
	CALL memmove($6, [8781], $5)
	$5 = *(($8 + [496]))
	
.LABEL $label$1
	CALL $96($6, ($6 + $5), ($8 + [160]))
	CALL $49(($8 + [504]), $4, ($8 + [488]), [1])
	if ( (*(($8 + [496])) <= [9]) ){ goto $label$9 }
	$5 = *($8 + [488])
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdaPv($5)
	
.LABEL $label$9
	$5 = *($8 + [504])
	$6 = *($5)
	if ( ($6 & [1]) ){ goto $label$11 }
	$5 = uint_32($6 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$5 = *($5 + [4])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8783])
	$5 = *($8 + [504])
	$6 = *($5 + [12])
	if ( ($6 & [1]) ){ goto $label$13 }
	$5 = uint_32($6 >> [1])
	goto $label$12 
	
.LABEL $label$13
	$5 = *(($5 + [16]))
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8807])
	$5 = *($8 + [504])
	$6 = *($5 + [24])
	if ( ($6 & [1]) ){ goto $label$15 }
	$5 = uint_32($6 >> [1])
	goto $label$14 
	
.LABEL $label$15
	$5 = *(($5 + [28]))
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8834])
	$5 = *($8 + [504])
	$6 = *($5 + [36])
	if ( ($6 & [1]) ){ goto $label$17 }
	$5 = uint_32($6 >> [1])
	goto $label$16 
	
.LABEL $label$17
	$5 = *(($5 + [40]))
	
.LABEL $label$16
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8861])
	$5 = *($8 + [504])
	$6 = *($5 + [48])
	if ( ($6 & [1]) ){ goto $label$19 }
	$5 = uint_32($6 >> [1])
	goto $label$18 
	
.LABEL $label$19
	$5 = *(($5 + [52]))
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8884])
	CALL prints([8912])
	*($8 + [480]) = CALL $121(*($8 + [504]), [0], [10])
	*($8 + [476]) = CALL $120((*($8 + [504]) + [12]), [0], [10])
	$13 = CALL $108(($8 + [464]), (*($8 + [504]) + [24]))
	$5 = *($8 + [504])
	if ( (*($5 + [36]) & [1]) ){ goto $label$21 }
	$4 = (($5 + [36]) + [1])
	goto $label$20 
	
.LABEL $label$21
	$4 = *(($5 + [44]))
	
.LABEL $label$20
	*(($8 + [168])) = [0]
	*($8 + [160]) = (int_64)0
	$5 = CALL $147($4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$26 }
	*($8 + [160]) = ($5 << [1])
	$6 = (($8 + [160]) | [1])
	if ( $5 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($8 + [160]) = ($7 | [1])
	*($8 + [168]) = $6
	*($8 + [164]) = $5
	
.LABEL $label$25
	CALL memcpy($6, $4, $5)
	
.LABEL $label$24
	*(($6 + $5)) = [0]
	$11 = CALL $121(($8 + [160]), [0], [10])
	if ( ((*($8 + [160]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($8 + [168]))
	
.LABEL $label$27
	$14 = CALL $108(($8 + [448]), (*($8 + [504]) + [48]))
	$15 = CALL $108(($8 + [432]), (*($8 + [504]) + [60]))
	$5 = *($15 + [8])
	$6 = *($14 + [8])
	$4 = *($13 + [8])
	$7 = *($8 + [432])
	$16 = *($8 + [448])
	$17 = *($8 + [464])
	CALL prints([8925])
	CALL printui(*($8 + [480]))
	CALL prints([8955])
	$18 = ($13 + [1])
	CALL prints(( $4 ? $18 : ($17 & [1]) ))
	CALL prints([8968])
	$17 = ($14 + [1])
	CALL prints(( $6 ? $17 : ($16 & [1]) ))
	CALL prints([8982])
	CALL printi($11)
	CALL prints([8995])
	$19 = ($15 + [1])
	CALL prints(( $5 ? $19 : ($7 & [1]) ))
	CALL prints([8462])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9005])
	*($8 + [424]) = [0]
	*($8 + [416]) = (int_64)0
	$5 = CALL $147([9024])
	*($8 + [408]) = $5
	*($8 + [400]) = [0]
	if ( ((uint_32)$5 >= (uint_32)[9]) ){ goto $label$30 }
	$6 = ($8 + [400])
	if ( $5 ){ goto $label$29 }
	$5 = [0]
	goto $label$28 
	
.LABEL $label$30
	$6 = CALL _Znaj($5)
	*($8 + [400]) = $6
	
.LABEL $label$29
	CALL memmove($6, [9024], $5)
	$5 = *(($8 + [408]))
	
.LABEL $label$28
	CALL $96($6, ($6 + $5), ($8 + [160]))
	CALL $49(($8 + [416]), $14, ($8 + [400]), [1])
	if ( (*((($8 + [400]) + [8])) <= [9]) ){ goto $label$31 }
	$5 = *($8 + [400])
	if ( ($5 == 0) ){ goto $label$31 }
	CALL _ZdaPv($5)
	
.LABEL $label$31
	CALL prints(( *(($14 + [8])) ? $17 : (*($8 + [448]) & [1]) ))
	CALL prints([8462])
	$5 = *($8 + [416])
	$6 = *($8 + [420])
	CALL prints([9026])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($6 - $5) / (int_32)[12])))
	$6 = *($8 + [416])
	if ( ((int_32)*($8 + [420]) == (int_32)$6) ){ goto $label$32 }
	$5 = [0]
	$4 = [0]
	
.LOOP $label$33:
	$6 = ($6 + $5)
	if ( (*($6) & [1]) ){ goto $label$35 }
	$6 = ($6 + [1])
	goto $label$34 
	
.LABEL $label$35
	$6 = *(($6 + [8]))
	
.LABEL $label$34
	CALL prints($6)
	CALL prints([8462])
	$5 = ($5 + [12])
	$6 = *($8 + [416])
	$4 = ($4 + [1])
	if ( ($4 <= ((int_32)(*($8 + [420]) - $6) / (int_32)[12])) ){ goto $label$33 }
	
.LABEL $label$32
	$5 = CALL $147([8577])
	if ( ($5 <= [8]) ){ goto $label$38 }
	CALL eosio_assert([0], [10389])
	goto $label$37 
	
.LABEL $label$38
	if ( ($5 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	$1 = (int_64)0
	
.LOOP $label$39:
	$6 = *(($5 + [8576]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$40 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$40
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$39 }
	$1 = ((int_64)$1 << (int_64)8)
	goto $label$22 
	
.LABEL $label$36
	$1 = (int_64)0
	goto $label$22 
	
.LABEL $label$23
	CALL $107(($8 + [160]))
	
.LABEL $label$22
	*($8 + [392]) = ((int_64)$1 | (int_64)4)
	*($8 + [384]) = $11
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10487])
	$1 = (uint_64)*($8 + [392]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$11 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$1 = $11
	$6 = [1]
	$4 = $5
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$1 = $11
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$4 = ($5 + [1])
	$5 = $4
	if ( $6 ){ goto $label$45 }
	$6 = [1]
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$6 = [0]
	
.LABEL $label$41
	CALL eosio_assert($6, [10536])
	$5 = CALL $147([8577])
	if ( ($5 <= [8]) ){ goto $label$49 }
	CALL eosio_assert([0], [10389])
	goto $label$48 
	
.LABEL $label$49
	if ( ($5 == 0) ){ goto $label$47 }
	
.LABEL $label$48
	$1 = (int_64)0
	
.LOOP $label$50:
	$6 = *(($5 + [8576]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$51 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$51
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$50 }
	$1 = ((int_64)$1 << (int_64)8)
	goto $label$46 
	
.LABEL $label$47
	$1 = (int_64)0
	
.LABEL $label$46
	*($8 + [368]) = (int_64)0
	*($8 + [376]) = ((int_64)$1 | (int_64)4)
	CALL eosio_assert([1], [10487])
	$1 = (uint_64)*($8 + [376]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$11 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$1 = $11
	$6 = [1]
	$4 = $5
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$55
	$1 = $11
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$53 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$4 = ($5 + [1])
	$5 = $4
	if ( $6 ){ goto $label$56 }
	$6 = [1]
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$6 = [0]
	
.LABEL $label$52
	CALL eosio_assert($6, [10536])
	$5 = ( *(($13 + [8])) ? $18 : (*($8 + [464]) & [1]) )
	if ( (CALL $144($5, [8465]) == 0) ){ goto $label$77 }
	if ( (CALL $144($5, [8468]) == 0) ){ goto $label$76 }
	if ( (CALL $144($5, [8471]) == 0) ){ goto $label$73 }
	if ( CALL $144($5, [8479]) ){ goto $label$57 }
	$5 = ( *(($14 + [8])) ? $17 : (*($8 + [448]) & [1]) )
	$4 = CALL $147($5)
	CALL $146(($8 + [160]), [8464])
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$66 }
	$6 = $5
	$16 = [0]
	$7 = [0]
	
.LOOP $label$79:
	$20 = *($6)
	if ( ((int_32)$20 != (int_32)[44]) ){ goto $label$80 }
	if ( $7 ){ goto $label$81 }
	*((($8 + [160]) + $16)) = [0]
	
.LABEL $label$81
	$7 = ($7 + [1])
	$16 = [0]
	$6 = ($6 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	if ( ($7 == 0) ){ goto $label$82 }
	$16 = ($16 + [1])
	$6 = ($6 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$82
	*((($8 + [160]) + $16)) = $20
	$16 = ($16 + [1])
	$6 = ($6 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$79 }
	
.LABEL $label$78
	if ( $7 ){ goto $label$64 }
	$6 = (($8 + [160]) + $16)
	goto $label$65 
	
.LABEL $label$77
	$12 = ((int_64)*($8 + [384]) * (int_64)(CASTING uint_64)(uint_32 ((int_32)(*($8 + [420]) - *($8 + [416])) / (int_32)[12])))
	$5 = CALL $147([8577])
	if ( ($5 <= [8]) ){ goto $label$75 }
	CALL eosio_assert([0], [10389])
	goto $label$74 
	
.LABEL $label$76
	$16 = (*($8 + [420]) - *($8 + [416]))
	$4 = ((int_32)$16 / (int_32)[12])
	$6 = [1]
	$7 = [1]
	if ( ((int_32)$16 < (int_32)[12]) ){ goto $label$83 }
	$5 = [0]
	$6 = [1]
	
.LOOP $label$84:
	$5 = ($5 + [1])
	$6 = ((int_32)$6 * (int_32)$5)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$84 }
	$7 = [1]
	if ( ((int_32)$16 <= (int_32)[24]) ){ goto $label$83 }
	$5 = [2]
	$7 = [1]
	
.LOOP $label$85:
	$7 = ((int_32)$7 * (int_32)($5 + [-1]))
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$85 }
	
.LABEL $label$83
	$12 = ((int_64)*($8 + [384]) * (int_64)(CASTING int_64)(int_32 ((uint_32)$6 / (uint_32)($7 << [1]))))
	$5 = CALL $147([8577])
	if ( ($5 <= [8]) ){ goto $label$72 }
	CALL eosio_assert([0], [10389])
	goto $label$71 
	
.LABEL $label$75
	if ( ($5 == 0) ){ goto $label$68 }
	
.LABEL $label$74
	$1 = (int_64)0
	
.LOOP $label$86:
	$6 = *(($5 + [8576]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$87 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$87
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$86 }
	$11 = ((int_64)$1 << (int_64)8)
	goto $label$58 
	
.LABEL $label$73
	$16 = (*($8 + [420]) - *($8 + [416]))
	$4 = ((int_32)$16 / (int_32)[12])
	$6 = [1]
	$7 = [1]
	if ( ((int_32)$16 < (int_32)[12]) ){ goto $label$88 }
	$5 = [0]
	$6 = [1]
	
.LOOP $label$89:
	$5 = ($5 + [1])
	$6 = ((int_32)$6 * (int_32)$5)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$89 }
	$7 = [1]
	if ( ((int_32)$16 <= (int_32)[36]) ){ goto $label$88 }
	$5 = [3]
	$7 = [1]
	
.LOOP $label$90:
	$7 = ((int_32)$7 * (int_32)($5 + [-2]))
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$90 }
	
.LABEL $label$88
	$12 = ((int_64)*($8 + [384]) * (int_64)(CASTING int_64)(int_32 ((uint_32)$6 / (uint_32)((int_32)$7 * (int_32)[6]))))
	$5 = CALL $147([8577])
	if ( ($5 <= [8]) ){ goto $label$70 }
	CALL eosio_assert([0], [10389])
	goto $label$69 
	
.LABEL $label$72
	if ( ($5 == 0) ){ goto $label$67 }
	
.LABEL $label$71
	$1 = (int_64)0
	
.LOOP $label$91:
	$6 = *(($5 + [8576]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$92 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$92
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$91 }
	$11 = ((int_64)$1 << (int_64)8)
	goto $label$59 
	
.LABEL $label$70
	if ( ($5 == 0) ){ goto $label$63 }
	
.LABEL $label$69
	$1 = (int_64)0
	
.LOOP $label$93:
	$6 = *(($5 + [8576]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$94 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$94
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$93 }
	$11 = ((int_64)$1 << (int_64)8)
	goto $label$60 
	
.LABEL $label$68
	$11 = (int_64)0
	goto $label$58 
	
.LABEL $label$67
	$11 = (int_64)0
	goto $label$59 
	
.LABEL $label$66
	$6 = ($8 + [160])
	
.LABEL $label$65
	*($6) = [0]
	
.LABEL $label$64
	$6 = CALL $147($5)
	CALL $146(($8 + [48]), [8464])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$95 }
	$7 = [0]
	$4 = [0]
	
.LOOP $label$97:
	$16 = *($5)
	if ( ((int_32)$16 != (int_32)[44]) ){ goto $label$98 }
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$99 }
	*((($8 + [48]) + $7)) = [0]
	
.LABEL $label$99
	$4 = ($4 + [1])
	$7 = [0]
	$5 = ($5 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$98
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$100 }
	*((($8 + [48]) + $7)) = $16
	
.LABEL $label$100
	$7 = ($7 + [1])
	$5 = ($5 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$97 }
	
.LABEL $label$96
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$95 }
	*((($8 + [48]) + $7)) = [0]
	
.LABEL $label$95
	CALL $36($8, ($8 + [160]), ($8 + [320]), ($8 + [40]))
	CALL $36($8, ($8 + [48]), ($8 + [272]), ($8 + [616]))
	$12 = ((int_64)((int_64)*($8 + [384]) * (int_64)*($8 + [40])) * (int_64)*($8 + [616]))
	$5 = CALL $147([8577])
	if ( ($5 <= [8]) ){ goto $label$102 }
	CALL eosio_assert([0], [10389])
	goto $label$101 
	
.LABEL $label$102
	if ( ($5 == 0) ){ goto $label$62 }
	
.LABEL $label$101
	$1 = (int_64)0
	
.LOOP $label$103:
	$6 = *(($5 + [8576]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$104 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$104
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$103 }
	$11 = ((int_64)$1 << (int_64)8)
	goto $label$61 
	
.LABEL $label$63
	$11 = (int_64)0
	goto $label$60 
	
.LABEL $label$62
	$11 = (int_64)0
	
.LABEL $label$61
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10487])
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	$9 = ((int_64)$11 | (int_64)4)
	$5 = [0]
	
.LOOP $label$107:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$106 }
	$11 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$108 }
	$1 = $11
	$6 = [1]
	$4 = $5
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$107 }
	goto $label$105 
	
.LABEL $label$108
	$1 = $11
	
.LOOP $label$109:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$106 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$4 = ($5 + [1])
	$5 = $4
	if ( $6 ){ goto $label$109 }
	$6 = [1]
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$107 }
	goto $label$105 
	
.LABEL $label$106
	$6 = [0]
	
.LABEL $label$105
	CALL eosio_assert($6, [10536])
	*(($8 + [376])) = $9
	*($8 + [368]) = $12
	goto $label$57 
	
.LABEL $label$60
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10487])
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	$9 = ((int_64)$11 | (int_64)4)
	$5 = [0]
	
.LOOP $label$112:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$111 }
	$11 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$113 }
	$1 = $11
	$6 = [1]
	$4 = $5
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$112 }
	goto $label$110 
	
.LABEL $label$113
	$1 = $11
	
.LOOP $label$114:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$111 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$4 = ($5 + [1])
	$5 = $4
	if ( $6 ){ goto $label$114 }
	$6 = [1]
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$112 }
	goto $label$110 
	
.LABEL $label$111
	$6 = [0]
	
.LABEL $label$110
	CALL eosio_assert($6, [10536])
	*(($8 + [376])) = $9
	*($8 + [368]) = $12
	goto $label$57 
	
.LABEL $label$59
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10487])
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	$9 = ((int_64)$11 | (int_64)4)
	$5 = [0]
	
.LOOP $label$117:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$116 }
	$11 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$118 }
	$1 = $11
	$6 = [1]
	$4 = $5
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$117 }
	goto $label$115 
	
.LABEL $label$118
	$1 = $11
	
.LOOP $label$119:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$116 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$4 = ($5 + [1])
	$5 = $4
	if ( $6 ){ goto $label$119 }
	$6 = [1]
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$117 }
	goto $label$115 
	
.LABEL $label$116
	$6 = [0]
	
.LABEL $label$115
	CALL eosio_assert($6, [10536])
	*(($8 + [376])) = $9
	*($8 + [368]) = $12
	goto $label$57 
	
.LABEL $label$58
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10487])
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	$9 = ((int_64)$11 | (int_64)4)
	$5 = [0]
	
.LOOP $label$122:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$121 }
	$11 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$123 }
	$1 = $11
	$6 = [1]
	$4 = $5
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$122 }
	goto $label$120 
	
.LABEL $label$123
	$1 = $11
	
.LOOP $label$124:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$121 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$4 = ($5 + [1])
	$5 = $4
	if ( $6 ){ goto $label$124 }
	$6 = [1]
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$122 }
	goto $label$120 
	
.LABEL $label$121
	$6 = [0]
	
.LABEL $label$120
	CALL eosio_assert($6, [10536])
	*(($8 + [376])) = $9
	*($8 + [368]) = $12
	
.LABEL $label$57
	CALL prints([9033])
	CALL $50(($8 + [160]), ($8 + [384]))
	$5 = *($8 + [160])
	$6 = ($5 & [1])
	CALL prints_l(( *($8 + [168]) ? (($8 + [160]) | [1]) : $6 ), ( *($8 + [164]) ? uint_32($5 >> [1]) : $6 ))
	if ( ((*($8 + [160]) & [1]) == 0) ){ goto $label$125 }
	CALL _ZdlPv(*(($8 + [168])))
	
.LABEL $label$125
	CALL prints([9042])
	CALL $51(($8 + [368]), [9052], $3, [8462])
	CALL eosio_assert(((int_64)*((($8 + [368]) + [8])) == (int_64)*($3 + [8])), [10556])
	CALL eosio_assert(((int_64)*($8 + [368]) == (int_64)*($3)), [9064])
	$16 = ($0 + [72])
	$5 = ($0 + [88])
	$1 = *($5)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$126 }
	$1 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($16), *(($0 + [80])), (int_64)-3778232677491212288, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$127 }
	CALL $34($16, $6)
	*($8 + [164]) = [0]
	*($8 + [160]) = $16
	$1 = *(*(CALL $52(($8 + [160])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$127
	*(($0 + [88])) = $1
	
.LABEL $label$126
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [10938])
	*($8 + [40]) = *($5)
	$5 = *(($15 + [8]))
	$6 = *(($14 + [8]))
	$4 = *(($13 + [8]))
	$7 = *($8 + [432])
	$20 = *($8 + [448])
	$21 = *($8 + [464])
	CALL prints([8925])
	CALL printui(*($8 + [480]))
	CALL prints([8955])
	CALL prints(( $4 ? $18 : ($21 & [1]) ))
	CALL prints([8968])
	CALL prints(( $6 ? $17 : ($20 & [1]) ))
	CALL prints([9080])
	CALL printui(*($8 + [40]))
	CALL prints([9091])
	CALL $50(($8 + [160]), ($8 + [384]))
	$6 = *($8 + [160])
	$4 = ($6 & [1])
	CALL prints_l(( *($8 + [168]) ? (($8 + [160]) | [1]) : $4 ), ( *($8 + [164]) ? uint_32($6 >> [1]) : $4 ))
	$5 = ( $5 ? $19 : ($7 & [1]) )
	if ( ((*($8 + [160]) & [1]) == 0) ){ goto $label$128 }
	CALL _ZdlPv(*(($8 + [168])))
	
.LABEL $label$128
	CALL prints([8995])
	CALL prints($5)
	CALL prints([8462])
	$17 = ($0 + [32])
	$1 = *($8 + [480])
	$6 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$141 }
	
.LOOP $label$143:
	$5 = ($6 + [-24])
	$4 = *($5)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$142 }
	$6 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$143 }
	goto $label$141 
	
.LABEL $label$142
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$141 }
	CALL eosio_assert(((int_32)*($4 + [36]) == (int_32)$17), [10615])
	if ( ($4 == 0) ){ goto $label$139 }
	goto $label$140 
	
.LABEL $label$141
	$5 = CALL db_find_i64(*($17), *(($0 + [40])), (int_64)-3778232672803445872, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$139 }
	$4 = CALL $27($17, $5)
	CALL eosio_assert(((int_32)*($4 + [36]) == (int_32)$17), [10615])
	if ( ($4 == 0) ){ goto $label$139 }
	
.LABEL $label$140
	if ( (int_64)(*($8 + [480]) == 0) ){ goto $label$139 }
	CALL prints([9101])
	CALL printui(*($8 + [480]))
	CALL prints([9116])
	CALL printui(*($4))
	CALL prints([8462])
	if ( (*($4 + [8]) == 0) ){ goto $label$139 }
	CALL prints([9129])
	CALL printui(*($8 + [480]))
	CALL prints([9137])
	CALL prints([8462])
	$4 = *($8 + [416])
	if ( ($4 == 0) ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$139
	$1 = *($0)
	*($8 + [176]) = $13
	*($8 + [180]) = $3
	*($8 + [188]) = $14
	*($8 + [192]) = $15
	*($8 + [164]) = ($8 + [480])
	*($8 + [160]) = ($8 + [40])
	*($8 + [168]) = ($8 + [600])
	*($8 + [172]) = ($8 + [476])
	*($8 + [184]) = ($8 + [384])
	*($8 + [320]) = $1
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$16()), [11092])
	*($8 + [48]) = $16
	*($8 + [52]) = ($8 + [160])
	*($8 + [56]) = ($8 + [320])
	$5 = CALL _Znwj([144])
	CALL $53($5)
	*($5 + [128]) = $16
	CALL $54(($8 + [48]), $5)
	*($8 + [272]) = $5
	$1 = *($5)
	*($8 + [48]) = $1
	$4 = *($5 + [132])
	*($8 + [616]) = $4
	$7 = ($0 + [100])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$146 }
	*($6 + [8]) = $1
	*($6 + [16]) = $4
	*($8 + [272]) = [0]
	*($6) = $5
	*($7) = ($6 + [24])
	$5 = *($8 + [272])
	$6 = [0]
	*($8 + [272]) = [0]
	if ( ($5 == 0) ){ goto $label$144 }
	goto $label$145 
	
.LABEL $label$146
	CALL $55(($0 + [96]), ($8 + [272]), ($8 + [48]), ($8 + [616]))
	$5 = *($8 + [272])
	$6 = [0]
	*($8 + [272]) = [0]
	if ( ($5 == 0) ){ goto $label$144 }
	
.LABEL $label$145
	if ( (*($5 + [116]) & [1]) ){ goto $label$153 }
	if ( (*($5 + [104]) & [1]) ){ goto $label$152 }
	goto $label$151 
	
.LABEL $label$153
	CALL _ZdlPv(*(($5 + [124])))
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$151 }
	
.LABEL $label$152
	CALL _ZdlPv(*(($5 + [112])))
	$4 = [1]
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$150 }
	goto $label$149 
	
.LABEL $label$151
	$4 = [1]
	if ( (*($5 + [32]) & [1]) ){ goto $label$149 }
	
.LABEL $label$150
	if ( ((*($5 + [16]) & $4) == 0) ){ goto $label$147 }
	goto $label$148 
	
.LABEL $label$149
	CALL _ZdlPv(*(($5 + [40])))
	if ( ((*($5 + [16]) & $4) == 0) ){ goto $label$147 }
	
.LABEL $label$148
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$147
	CALL _ZdlPv($5)
	
.LABEL $label$144
	$1 = *($0)
	*(($8 + [280])) = $6
	*($8 + [272]) = (int_64)0
	$5 = CALL $147([9148])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$155 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$158 }
	*($8 + [272]) = ($5 << [1])
	$6 = (($8 + [272]) | [1])
	if ( $5 ){ goto $label$157 }
	goto $label$156 
	
.LABEL $label$158
	$4 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($4)
	*($8 + [272]) = ($4 | [1])
	*($8 + [280]) = $6
	*($8 + [276]) = $5
	
.LABEL $label$157
	CALL memcpy($6, [9148], $5)
	
.LABEL $label$156
	*(($6 + $5)) = [0]
	*(($6 = (($8 + [48]) + [24]))) = [0]
	*((($8 + [160]) + [24])) = *(($3 + [8]))
	$5 = (($8 + [272]) + [8])
	*(($8 + [200])) = *($5)
	*($5) = [0]
	*($8 + [168]) = (int_64)6463111774306807520
	*($8 + [48]) = (int_64)6138663591592764928
	*($8 + [56]) = (int_64)-3617168760277827584
	*($8 + [64]) = (int_64)0
	*($8 + [160]) = *($0)
	*($8 + [176]) = *($3)
	*($8 + [192]) = *($8 + [272])
	*($8 + [272]) = (int_64)0
	*(($5 = CALL _Znwj([16]))) = $1
	*($5 + [8]) = (int_64)3617214756542218240
	*((($8 + [48]) + [36])) = [0]
	$4 = ($5 + [16])
	*($6) = $4
	*(($8 + [68])) = $4
	*($8 + [64]) = $5
	*($8 + [76 align=4]) = (int_64)0
	$5 = *($8 + [192])
	$6 = ( *((($8 + [160]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [32])
	$1 = (CASTING uint_64)(uint_32 $6)
	$6 = ($8 + [76])
	
.LOOP $label$159:
	$5 = ($5 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$159 }
	if ( ($5 == 0) ){ goto $label$161 }
	CALL $5($6, $5)
	$6 = *(($8 + [80]))
	$5 = *(($8 + [76]))
	goto $label$160 
	
.LABEL $label$161
	$6 = [0]
	$5 = [0]
	
.LABEL $label$160
	*($8 + [324]) = $5
	*($8 + [320]) = $5
	*($8 + [328]) = $6
	*($8 + [608]) = ($8 + [320])
	*($8 + [616]) = ($8 + [160])
	CALL $56(($8 + [616]), ($8 + [608]))
	CALL $6(($8 + [320]), ($8 + [48]))
	$5 = *($8 + [320])
	CALL send_inline($5, (*($8 + [324]) - $5))
	$5 = *($8 + [320])
	if ( ($5 == 0) ){ goto $label$162 }
	*($8 + [324]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$162
	$5 = *($8 + [76])
	if ( ($5 == 0) ){ goto $label$163 }
	*(($8 + [80])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$163
	$5 = *($8 + [64])
	if ( ($5 == 0) ){ goto $label$164 }
	*(($8 + [68])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$164
	if ( (*(($8 + [192])) & [1]) ){ goto $label$166 }
	if ( (*($8 + [272]) & [1]) ){ goto $label$165 }
	goto $label$154 
	
.LABEL $label$166
	CALL _ZdlPv(*(($8 + [200])))
	if ( ((*($8 + [272]) & [1]) == 0) ){ goto $label$154 }
	
.LABEL $label$165
	CALL _ZdlPv(*(($8 + [280])))
	$4 = *($8 + [416])
	if ( $4 ){ goto $label$137 }
	goto $label$138 
	
.LABEL $label$155
	CALL $107(($8 + [272]))
	
.LABEL $label$154
	$4 = *($8 + [416])
	if ( $4 ){ goto $label$137 }
	
.LABEL $label$138
	$5 = [1]
	if ( (*($8 + [432]) & [1]) ){ goto $label$136 }
	goto $label$135 
	
.LABEL $label$137
	$6 = *($8 + [420])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$168 }
	
.LOOP $label$169:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$170 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$170
	$6 = $5
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$169 }
	$5 = *($8 + [416])
	goto $label$167 
	
.LABEL $label$168
	$5 = $4
	
.LABEL $label$167
	*($8 + [420]) = $4
	CALL _ZdlPv($5)
	$5 = [1]
	if ( ((*($8 + [432]) & [1]) == 0) ){ goto $label$135 }
	
.LABEL $label$136
	CALL _ZdlPv(*(($15 + [8])))
	if ( ((*($8 + [448]) & $5) == 0) ){ goto $label$134 }
	goto $label$133 
	
.LABEL $label$135
	if ( (*($8 + [448]) & $5) ){ goto $label$133 }
	
.LABEL $label$134
	if ( (*($8 + [464]) & [1]) ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$133
	CALL _ZdlPv(*(($14 + [8])))
	if ( ((*($8 + [464]) & [1]) == 0) ){ goto $label$131 }
	
.LABEL $label$132
	CALL _ZdlPv(*(($13 + [8])))
	$4 = *($8 + [504])
	if ( $4 ){ goto $label$130 }
	goto $label$129 
	
.LABEL $label$131
	$4 = *($8 + [504])
	if ( ($4 == 0) ){ goto $label$129 }
	
.LABEL $label$130
	$6 = *($8 + [508])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$172 }
	
.LOOP $label$173:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$174 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$174
	$6 = $5
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$173 }
	$5 = *($8 + [504])
	goto $label$171 
	
.LABEL $label$172
	$5 = $4
	
.LABEL $label$171
	*($8 + [508]) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$129
	$4 = *($8 + [544])
	if ( ($4 == 0) ){ goto $label$175 }
	$0 = ($8 + [548])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$177 }
	
.LOOP $label$178:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$179 }
	CALL _ZdlPv($6)
	
.LABEL $label$179
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$178 }
	$5 = *(($8 + [544]))
	goto $label$176 
	
.LABEL $label$177
	$5 = $4
	
.LABEL $label$176
	*($0) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$175
	$global$0 = ($8 + [624])
	(unreachable)
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9737])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9737])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9737])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $68(CALL $67($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10018])
	CALL memcpy(($4 + [112]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10018])
	CALL memcpy((($4 + [112]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [120])
	$1 = *($4 + [112])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $155($2)
	
.LABEL $label$5
	CALL $26(($4 + [96]))
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	if ( ((*($7 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($7 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [56]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	float_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	$4 = ($global$0 - [336])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL prints([9550])
	CALL printui($1)
	CALL prints([9080])
	CALL printui($3)
	CALL prints([8462])
	$5 = ($0 + [72])
	$7 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$5), [10615])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)-3778232677491212288, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $34($5, $8)
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$5), [10615])
	
.LABEL $label$1
	$10 = ($0 + [32])
	$7 = *(($0 + [60]))
	$11 = *(($0 + [56]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$13:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$12 }
	$7 = $8
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($6 + [36]) == (int_32)$10), [10615])
	if ( ($9 == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$8 = CALL db_find_i64(*($10), *(($0 + [40])), (int_64)-3778232672803445872, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $27($10, $8)
	CALL eosio_assert(((int_32)*($6 + [36]) == (int_32)$10), [10615])
	if ( ($9 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	if ( ($6 == 0) ){ goto $label$9 }
	if ( ((int_32)*($9 + [28]) != (int_32)$2) ){ goto $label$9 }
	CALL prints([9572])
	CALL printui(*($9 + [8]))
	CALL prints([9080])
	CALL printui(*($9))
	CALL prints([9441])
	$8 = *($9 + [16])
	$11 = ($8 & [1])
	$7 = ($9 + [17])
	CALL prints_l(( *(($9 + [24])) ? $7 : $11 ), ( *(($9 + [20])) ? uint_32($8 >> [1]) : $11 ))
	$12 = ($9 + [116])
	$10 = ($9 + [104])
	$2 = ($9 + [48])
	CALL $35([9452], $2, [8968], $10, [9464], $12, [8462])
	CALL prints([9620])
	CALL printui(*($6))
	CALL prints([9197])
	CALL printui(*($6 + [16]))
	CALL prints([9379])
	$11 = *($6 + [24])
	$14 = ($11 & [1])
	$8 = ($6 + [25])
	$13 = ($6 + [32])
	CALL prints_l(( *($13) ? $8 : $14 ), ( *(($6 + [28])) ? uint_32($11 >> [1]) : $14 ))
	CALL prints([8462])
	*((($4 + [272]) + [16])) = [0]
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [268]) = [0]
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$14 }
	$8 = *($13)
	
.LABEL $label$14
	CALL $36($8, $8, ($4 + [272]), ($4 + [268]))
	*($4 + [264]) = [0]
	$14 = ($9 + [32])
	if ( (*($9 + [32]) & [1]) ){ goto $label$8 }
	$8 = ($14 + [1])
	$6 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($4 + [336])
	return 
	
.LABEL $label$8
	$8 = *(($9 + [40]))
	$6 = [1]
	if ( (*($10) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = ($10 + $6)
	goto $label$5 
	
.LABEL $label$6
	$6 = *(($9 + [112]))
	
.LABEL $label$5
	$15 = ((float_32)CALL $37($8, $8, $6, ($4 + [272])) * (float_32)(CASTING float_32)(int_64 *($9 + [64])))
	if ( ((float_32)(float_32)|$15| < (float_32)(float_32)9223372036854775808) ){ goto $label$16 }
	$16 = (int_64)-9223372036854775808
	goto $label$15 
	
.LABEL $label$16
	$16 = (Rounds 0)($15)
	
.LABEL $label$15
	$8 = CALL $147([8577])
	if ( ($8 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [10389])
	goto $label$19 
	
.LABEL $label$20
	if ( ($8 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$1 = (int_64)0
	
.LOOP $label$21:
	$6 = *(($8 + [8576]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$22
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$21 }
	$1 = ((int_64)$1 << (int_64)8)
	goto $label$17 
	
.LABEL $label$18
	$1 = (int_64)0
	
.LABEL $label$17
	$13 = ($9 + [16])
	*($4 + [256]) = ((int_64)$1 | (int_64)4)
	*($4 + [248]) = $16
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10487])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$17 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$1 = $17
	$6 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$1 = $17
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $6 ){ goto $label$27 }
	$6 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$6 = [0]
	
.LABEL $label$23
	CALL eosio_assert($6, [10536])
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$28 }
	if ( ((*($13) & [1]) == 0) ){ goto $label$29 }
	$7 = *(($9 + [24]))
	
.LABEL $label$29
	$8 = [0]
	
.LOOP $label$30:
	$6 = ($7 + $8)
	$11 = ($8 + [1])
	$8 = $11
	if ( *($6) ){ goto $label$30 }
	$18 = (CASTING uint_64)(uint_32 ($11 + [-1]))
	$1 = (int_64)0
	$17 = (int_64)59
	$19 = (int_64)0
	
.LOOP $label$31:
	$16 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$18) ){ goto $label$32 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$8 = ($8 + [-91])
	goto $label$33 
	
.LABEL $label$34
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$36 }
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	goto $label$35 
	
.LABEL $label$36
	$16 = ((int_64)$16 & (int_64)15)
	
.LABEL $label$35
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$16 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)4294967291)
	if ( ((int_64)$17 != (int_64)55834574842) ){ goto $label$31 }
	CALL $38(($4 + [144]), $8, $9)
	*((($4 + [160]) + [24])) = *((($4 + [248]) + [8]))
	$8 = (($4 + [144]) + [8])
	*(($4 + [200])) = *($8)
	*($8) = [0]
	*($4 + [168]) = $19
	*($4 + [160]) = (int_64)6463111774306807520
	*($4 + [208]) = (int_64)6138663591592764928
	*($4 + [216]) = (int_64)-3617168760277827584
	*($4 + [176]) = *($4 + [248])
	*($4 + [192]) = *($4 + [144])
	*($4 + [144]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = (int_64)6463111774306807520
	*($8 + [8]) = (int_64)3617214756542218240
	*((($4 + [208]) + [36])) = [0]
	$7 = ($8 + [16])
	*((($4 + [208]) + [24])) = $7
	*(($4 + [228])) = $7
	*($4 + [224]) = $8
	*($4 + [236 align=4]) = (int_64)0
	$8 = *($4 + [192])
	$7 = ( *((($4 + [160]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($7 + [32])
	$1 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [236])
	
.LOOP $label$37:
	$8 = ($8 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$37 }
	if ( ($8 == 0) ){ goto $label$39 }
	CALL $5($7, $8)
	$7 = *(($4 + [240]))
	$8 = *(($4 + [236]))
	goto $label$38 
	
.LABEL $label$39
	$7 = [0]
	$8 = [0]
	
.LABEL $label$38
	*($4 + [324]) = $8
	*($4 + [320]) = $8
	*($4 + [328]) = $7
	*($4 + [304]) = ($4 + [320])
	*($4 + [312]) = ($4 + [160])
	CALL $39(($4 + [312]), ($4 + [304]))
	CALL $6(($4 + [320]), ($4 + [208]))
	$8 = *($4 + [320])
	CALL send_inline($8, (*($4 + [324]) - $8))
	$8 = *($4 + [320])
	if ( ($8 == 0) ){ goto $label$40 }
	*($4 + [324]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$40
	$8 = *($4 + [236])
	if ( ($8 == 0) ){ goto $label$41 }
	*(($4 + [240])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$41
	$8 = *($4 + [224])
	if ( ($8 == 0) ){ goto $label$42 }
	*(($4 + [228])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$42
	if ( ((*(($4 + [192])) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($4 + [200])))
	
.LABEL $label$43
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($4 + [152])))
	
.LABEL $label$44
	*($4 + [264]) = [1]
	
.LABEL $label$28
	$1 = *(($9 + [8]))
	$17 = *($9)
	$8 = CALL $108(($4 + [128]), $14)
	*(($11 = (($4 + [112]) + [8]))) = *(($2 + [8]))
	*(($14 = (($4 + [96]) + [8]))) = *(($9 + [72]))
	*(($13 = (($4 + [80]) + [8]))) = *((($4 + [248]) + [8]))
	*($4 + [112]) = *($2)
	*($4 + [96]) = *($9 + [64])
	*($4 + [80]) = *($4 + [248])
	$2 = *($9 + [80])
	$7 = CALL $108(($4 + [64]), $10)
	$6 = CALL $108(($4 + [48]), $12)
	*((($4 + [32]) + [8])) = *($11)
	*((($4 + [16]) + [8])) = *($14)
	*(($4 + [8])) = *($13)
	*($4 + [32]) = *($4 + [112])
	*($4 + [16]) = *($4 + [96])
	*($4) = *($4 + [80])
	CALL $40($0, $1, $17, $8, ($4 + [32]), ($4 + [16]), $2, $4, $7, $6)
	if ( (*($6) & [1]) ){ goto $label$49 }
	if ( (*($7) & [1]) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$47 }
	
.LABEL $label$48
	CALL _ZdlPv(*($7 + [8]))
	$7 = [1]
	if ( (*($8) & [1]) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$7 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$45 }
	
.LABEL $label$46
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$45
	CALL prints([9666])
	CALL printui($3)
	CALL prints([8462])
	$1 = *($0)
	*($4 + [164]) = ($4 + [248])
	*($4 + [160]) = ($4 + [264])
	CALL eosio_assert($7, [11143])
	CALL $41($5, $9, $1, ($4 + [160]))
	CALL prints([9701])
	CALL printui($3)
	CALL prints([8462])
	$global$0 = ($4 + [336])
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10061])
	$2 = *($0 + [4])
	$3 = *($2 + [136])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3778232677491212288, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [136]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$6), [10615])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $34($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-3778232677491212288, $5))
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$6), [10615])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [136])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [320])
	$global$0 = $3
	$4 = CALL $147($1)
	CALL $146(($3 + [112]), [8464])
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	$5 = $1
	$6 = [0]
	$7 = [0]
	
.LOOP $label$5:
	$8 = *($5)
	if ( ((int_32)$8 != (int_32)[44]) ){ goto $label$6 }
	if ( $7 ){ goto $label$7 }
	*((($3 + [112]) + $6)) = [0]
	
.LABEL $label$7
	$7 = ($7 + [1])
	$6 = [0]
	$5 = ($5 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$8 }
	$6 = ($6 + [1])
	$5 = ($5 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*((($3 + [112]) + $6)) = $8
	$6 = ($6 + [1])
	$5 = ($5 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$4
	if ( $7 ){ goto $label$1 }
	$5 = (($3 + [112]) + $6)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($3 + [112])
	
.LABEL $label$2
	*($5) = [0]
	
.LABEL $label$1
	$5 = CALL $147($1)
	CALL $146($3, [8464])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$9 }
	$7 = [0]
	$4 = [0]
	
.LOOP $label$11:
	$6 = *($1)
	if ( ((int_32)$6 != (int_32)[44]) ){ goto $label$12 }
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$13 }
	*(($3 + $7)) = [0]
	
.LABEL $label$13
	$4 = ($4 + [1])
	$7 = [0]
	$1 = ($1 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$14 }
	*(($3 + $7)) = $6
	
.LABEL $label$14
	$7 = ($7 + [1])
	$1 = ($1 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$9 }
	*(($3 + $7)) = [0]
	
.LABEL $label$9
	CALL $36($1, ($3 + [112]), ($3 + [272]), ($3 + [220]))
	CALL $36($1, $3, ($3 + [224]), ($3 + [216]))
	$7 = *($3 + [220])
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$17 }
	$6 = *($2)
	$5 = [0]
	$1 = ($3 + [272])
	
.LOOP $label$19:
	$4 = [1]
	if ( ((int_32)*($1) == (int_32)$6) ){ goto $label$18 }
	$1 = ($1 + [4])
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$7) ){ goto $label$19 }
	$4 = [0]
	
.LABEL $label$18
	$7 = [1]
	$6 = *($3 + [216])
	if ( ((int_32)$6 >= (int_32)[1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$4 = [0]
	$7 = [1]
	$6 = *($3 + [216])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$15 }
	
.LABEL $label$16
	$8 = *($2 + [4])
	$5 = [0]
	$1 = ($3 + [224])
	
.LOOP $label$21:
	if ( ((int_32)*($1) == (int_32)$8) ){ goto $label$20 }
	$1 = ($1 + [4])
	$5 = ($5 + $7)
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$21 }
	goto $label$15 
	
.LABEL $label$20
	$4 = ($4 + [1])
	
.LABEL $label$15
	$global$0 = ($3 + [320])
	return ( (float_32)111 ? (float_32)0 : ((int_32)$4 == (int_32)[2]) )
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [10915] ? [10927] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $134($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $147($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $107($0)
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL $50($4, $0)
	$5 = *($4)
	$6 = ($5 & [1])
	$0 = ($4 | [1])
	CALL prints_l(( *($4 + [8]) ? $0 : $6 ), ( *($4 + [4]) ? uint_32($5 >> [1]) : $6 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$1
	CALL prints($1)
	CALL $50($4, $2)
	$1 = *($4)
	$2 = ($1 & [1])
	CALL prints_l(( *($4 + [8]) ? $0 : $2 ), ( *($4 + [4]) ? uint_32($1 >> [1]) : $2 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$2
	CALL prints($3)
	$global$0 = ($4 + [16])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [132]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11044])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3778232677491212288)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10990])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10990])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $34(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [80]) = [0]
	*(($0 + [24])) = (int_64)0
	*(($0 + [40])) = [0]
	*(($0 + [56])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	$1 = CALL $147([8577])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10389])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($1 + [8576]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [88]) = (int_64)0
	*(($1 = ($0 + [96]))) = $2
	CALL eosio_assert([1], [10487])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$11 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [10536])
	*($0 + [104 align=4]) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = (int_64)0
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = *(*($4 + [8]))
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$4 }
	$7 = [0]
	$8 = *([0] + [10352])
	
.LOOP $label$6:
	*((($3 + [32]) + ($9 = $7))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$7 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$5 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [8]) = ($7 << [1])
	$8 = (($3 + [8]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*((($3 + [8]) + [8])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [8]) = [0]
	$9 = (($3 + [8]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$10 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($3 + [8]) = ($10 | [1])
	*($3 + [16]) = $8
	*($3 + [12]) = $7
	
.LABEL $label$2
	$10 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$7:
	*(($8 + $9)) = *((($3 + [32]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$7 }
	$9 = ($8 + $7)
	
.LABEL $label$1
	*($9) = [0]
	$10 = ($1 + [16])
	if ( (*($1 + [16]) & [1]) ){ goto $label$9 }
	*($10) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($1 + [24]))) = [0]
	*(($1 + [20])) = [0]
	
.LABEL $label$8
	CALL $111($10, [0])
	*(($10 + [8])) = *((($3 + [8]) + [8]))
	*($10) = *($3 + [8])
	$9 = *($4 + [16])
	*($1 + [28]) = *(*($4 + [12]))
	$11 = ($1 + [32])
	CALL $109($11, $9)
	$9 = *($4 + [20])
	*($1 + [48]) = *($9)
	*(($1 + [56])) = *(($9 + [8]))
	$9 = *($4 + [24])
	*($1 + [64]) = *($9)
	*(($1 + [72])) = *(($9 + [8]))
	*($1 + [80]) = [0]
	$9 = CALL $147([8577])
	if ( ($9 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [10389])
	goto $label$12 
	
.LABEL $label$13
	if ( ($9 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$6 = (int_64)0
	
.LOOP $label$14:
	$7 = *(($9 + [8576]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$15
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$14 }
	$12 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$10 
	
.LABEL $label$11
	$12 = (int_64)4
	
.LABEL $label$10
	$13 = ($1 + [8])
	$14 = ($1 + [80])
	$15 = ($1 + [64])
	$16 = ($1 + [48])
	$17 = ($1 + [28])
	CALL eosio_assert([1], [10487])
	$6 = (uint_64)$12 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$18 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$6 = $18
	$7 = [1]
	$8 = $9
	$9 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$6 = $18
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$9 < (int_32)[6])
	$8 = ($9 + [1])
	$9 = $8
	if ( $7 ){ goto $label$20 }
	$7 = [1]
	$9 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$7 = [0]
	
.LABEL $label$16
	CALL eosio_assert($7, [10536])
	*(($1 + [96])) = $12
	*($1 + [88]) = (int_64)0
	$8 = ($1 + [104])
	CALL $109($8, *($4 + [28]))
	$19 = ($1 + [116])
	CALL $109($19, *($4 + [32]))
	*($3 + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $13
	*($3 + [32]) = $1
	*($3 + [40]) = $10
	*($3 + [44]) = $17
	*($3 + [48]) = $11
	*($3 + [52]) = $16
	*($3 + [56]) = $15
	*($3 + [60]) = $14
	$4 = ($1 + [88])
	*($3 + [64]) = $4
	*($3 + [68]) = $8
	*($3 + [72]) = $19
	CALL $94(($3 + [32]), ($3 + [8]))
	$7 = *($3 + [24])
	if ( ($7 <= [513]) ){ goto $label$22 }
	$9 = CALL $152($7)
	goto $label$21 
	
.LABEL $label$22
	$9 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$21
	*($3 + [12]) = $9
	*($3 + [8]) = $9
	*($3 + [16]) = ($9 + $7)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $13
	*($3 + [32]) = $1
	*($3 + [40]) = $10
	*($3 + [44]) = $17
	*($3 + [48]) = $11
	*($3 + [52]) = $16
	*($3 + [56]) = $15
	*($3 + [60]) = $14
	*($3 + [64]) = $4
	*($3 + [68]) = $8
	*($3 + [72]) = $19
	CALL $95(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($5 + [8]), (int_64)-3778232677491212288, *(*($0 + [8])), $6, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$23 }
	CALL $155($9)
	
.LABEL $label$23
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$24 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	$6 = *(($5 + [8]))
	$18 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [136]) = CALL db_idx64_store($6, (int_64)-3778232677491212288, $18, $12, ($3 + [32]))
	$global$0 = ($3 + [80])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9995])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $152($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([144])
	CALL $53($5)
	*($5 + [128]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [28])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [80])
	*($3 + [64]) = ($5 + [88])
	*($3 + [68]) = ($5 + [104])
	*($3 + [72]) = ($5 + [116])
	CALL $69(($3 + [32]), ($3 + [24]))
	*($5 + [136]) = [-1]
	*($5 + [132]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $55(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $155($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [116]) & [1]) ){ goto $label$16 }
	if ( (*($1 + [104]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($1 + [124])))
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [112])))
	$4 = [1]
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = [1]
	if ( (*($1 + [32]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($1 + [16]) & $4) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [16]) & $4) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $77(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3778232677491212288, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [128]) == (int_32)$7), [10615])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $34($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-3778232677491212288, $6))
	CALL eosio_assert(((int_32)*($4 + [128]) == (int_32)$7), [10615])
	
.LABEL $label$2
	*(($4 + [136])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $110($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $143(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	$7 = ($global$0 - [16])
	$global$0 = $7
	CALL prints($0)
	CALL $50($7, $1)
	$1 = *($7)
	$0 = ($1 & [1])
	CALL prints_l(( *($7 + [8]) ? ($7 | [1]) : $0 ), ( *($7 + [4]) ? uint_32($1 >> [1]) : $0 ))
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($7 + [8])))
	
.LABEL $label$1
	CALL prints($2)
	$2 = *($3)
	$1 = ($2 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 + [1]) : $1 ), ( *($3 + [4]) ? uint_32($2 >> [1]) : $1 ))
	CALL prints($4)
	$3 = *($5)
	$2 = ($3 & [1])
	CALL prints_l(( *($5 + [8]) ? ($5 + [1]) : $2 ), ( *($5 + [4]) ? uint_32($3 >> [1]) : $2 ))
	CALL prints($6)
	$global$0 = ($7 + [16])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $147($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $110($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $110($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $114($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $139 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $137($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $118 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $124($1, $0, [8639])
	CALL $125()
	(unreachable)
}

void .FUNC $119 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $124($1, $0, [8597])
	CALL $126()
	(unreachable)
}

int_32 .FUNC $152 (int_32 $0)
{
	return CALL $153([11356], $0)
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $154($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8270])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $128())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $151($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $152($1)
	
.LABEL $label$2
	*(CALL $128()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $152(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $155($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 == (int_32)[1]), [8214])
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$4 }
	if ( ($1 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$5
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $154 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11348]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11352])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11348]) = [1]
	$2 = ($2 << [16])
	*([0] + [11352]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11352])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11352]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11348]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11348]) = [1]
	$3 = ($3 << [16])
	*([0] + [11352]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11352])
	
.LABEL $label$10
	*([0] + [11352]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $155 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19740])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19548]
	$3 = (((int_32)$1 * (int_32)[12]) + [19548])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [11178])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [11224])
	$6 = *($1)
	*($1) = *(*($3))
	*($1 + [16]) = *(*(($3 + [4])))
	*($1 + [8]) = [1]
	$7 = ($1 + [24])
	CALL $109($7, *(($3 + [8])))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [11275])
	$3 = *($1 + [24])
	$8 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [20])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	$10 = ($1 + [16])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $152($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9737])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[3]), [9737])
	CALL memcpy(($4 + [8]), $8, [4])
	CALL eosio_assert(((int_32)($3 + [-12]) > (int_32)[7]), [9737])
	CALL memcpy(($4 + [12]), $10, [8])
	*($5 + [4]) = ($4 + [20])
	CALL $77($5, $7)
	CALL db_update_i64(*($1 + [40]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $155($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	*(($3 = ($global$0 - [16])) + [5 align=1]) = (int_64)72340172838076673
	*($3 + [13 align=1]) = [257]
	*($3 + [15]) = [1]
	$4 = ($3 + [7])
	$5 = ($3 + [8])
	$6 = (($3 + [5]) + [4])
	$7 = ($3 + [10])
	$8 = (($3 + [5]) + [6])
	$9 = ($3 + [12])
	$10 = ($3 + [13])
	$11 = ($3 + [14])
	$12 = [11]
	
.LOOP $label$1:
	$13 = *($3 + [5])
	$1 = ((uint_32)$14 / (uint_32)$12)
	$14 = $1
	$15 = ($14 - ((int_32)$1 * (int_32)$12))
	if ( $15 ){ goto $label$3 }
	$14 = ($13 & [255])
	$13 = [0]
	if ( ($14 == 0) ){ goto $label$3 }
	$14 = [0]
	goto $label$2 
	
.LABEL $label$3
	$16 = *((($3 + [5]) + [1]))
	if ( ((int_32)$15 != (int_32)($13 & [255])) ){ goto $label$4 }
	$14 = [1]
	if ( ($16 & [255]) ){ goto $label$2 }
	$16 = [0]
	
.LABEL $label$4
	$17 = *($4)
	$13 = ($13 + $16)
	if ( ((int_32)$15 != (int_32)($13 & [255])) ){ goto $label$5 }
	$14 = [2]
	if ( ($17 & [255]) ){ goto $label$2 }
	$17 = [0]
	
.LABEL $label$5
	$16 = *($5)
	$13 = ($13 + $17)
	if ( ((int_32)$15 != (int_32)($13 & [255])) ){ goto $label$6 }
	$14 = [3]
	if ( ($16 & [255]) ){ goto $label$2 }
	$16 = [0]
	
.LABEL $label$6
	$17 = *($6)
	$13 = ($13 + $16)
	if ( ((int_32)$15 != (int_32)($13 & [255])) ){ goto $label$7 }
	$14 = [4]
	if ( ($17 & [255]) ){ goto $label$2 }
	$17 = [0]
	
.LABEL $label$7
	$16 = *($7)
	$13 = ($13 + $17)
	if ( ((int_32)$15 != (int_32)($13 & [255])) ){ goto $label$8 }
	$14 = [5]
	if ( ($16 & [255]) ){ goto $label$2 }
	$16 = [0]
	
.LABEL $label$8
	$17 = *($8)
	$13 = (($13 + $16) & [255])
	if ( ((int_32)$15 != (int_32)$13) ){ goto $label$9 }
	$14 = [6]
	if ( ($17 & [255]) ){ goto $label$2 }
	$17 = [0]
	
.LABEL $label$9
	$16 = *($9)
	$13 = ($13 + ($17 & [255]))
	if ( ((int_32)$15 != (int_32)$13) ){ goto $label$10 }
	$14 = [7]
	if ( ($16 & [255]) ){ goto $label$2 }
	$16 = [0]
	
.LABEL $label$10
	$17 = *($10)
	$13 = ($13 + ($16 & [255]))
	if ( ((int_32)$15 != (int_32)$13) ){ goto $label$11 }
	$14 = [8]
	if ( ($17 & [255]) ){ goto $label$2 }
	$17 = [0]
	
.LABEL $label$11
	$16 = *($11)
	$13 = ($13 + ($17 & [255]))
	if ( ((int_32)$15 != (int_32)$13) ){ goto $label$12 }
	$14 = [9]
	if ( ($16 & [255]) ){ goto $label$2 }
	$16 = [0]
	
.LABEL $label$12
	$14 = ( [11] ? ( [10] ? [11] : *((($3 + [5]) + [10])) ) : ((int_32)$15 != (int_32)($13 + ($16 & [255]))) )
	
.LABEL $label$2
	*((($3 + [5]) + $14)) = [0]
	*($2) = ($14 + [1])
	$2 = ($2 + [4])
	$12 = ($12 + [-1])
	if ( ((int_32)$12 != (int_32)[6]) ){ goto $label$1 }
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $72(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $107 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$5 = ($global$0 - [48])
	$global$0 = $5
	CALL prints([8528])
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8540])
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$3 }
	if ( uint_32($7 >> [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($4 + [4]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = *($4)
	$8 = CALL $147([8464])
	if ( ((int_32)$8 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$4 }
	if ( (CALL $117($4, [0], [-1], [8464], $8) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL prints([8564])
	$7 = CALL $147([8577])
	if ( ($7 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [10389])
	goto $label$7 
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = (int_64)0
	
.LOOP $label$9:
	$8 = *(($7 + [8576]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$10
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$5 
	
.LABEL $label$6
	$6 = (int_64)4
	
.LABEL $label$5
	$9 = *($3 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)$6), [8581])
	$8 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$6 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$6 = $9
	$8 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$6 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $8 ){ goto $label$15 }
	$8 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$8 = [0]
	
.LABEL $label$11
	CALL eosio_assert($8, [8613])
	*(($8 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*($5 + [32]) = *($3)
	$7 = CALL $108(($5 + [16]), $4)
	*(($5 + [8])) = *($8)
	*($5) = *($5 + [32])
	CALL $44($0, $1, $2, $5, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [128]) = [0]
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10018])
	CALL memcpy(($4 + [120]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[8]), [10018])
	CALL memcpy((($4 + [120]) + [8]), ($2 + [8]), [4])
	CALL eosio_assert(((uint_32)($7 + [-12]) > (uint_32)[7]), [10018])
	CALL memcpy(($4 + [136]), ($2 + [12]), [8])
	*((($4 + [8]) + [20])) = ($2 + [20])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [136])
	$8 = *($4 + [128])
	$1 = *($4 + [120])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $8), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $155($2)
	
.LABEL $label$5
	CALL $26(($4 + [104]))
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [68])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	if ( ((*($7 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($7 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [64]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL prints([9942])
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)-3778232677491212288, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [72])
	$0 = CALL $34($3, $2)
	
.LOOP $label$2:
	CALL prints([9969])
	CALL printui(*($0))
	CALL eosio_assert([1], [10027])
	CALL eosio_assert([1], [10061])
	$2 = [0]
	$4 = CALL db_next_i64(*($0 + [132]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $34($3, $4)
	
.LABEL $label$3
	CALL $45($3, $0)
	$0 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [200]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [152]) + [24])) = (int_64)0
	*((($4 + [152]) + [40])) = [0]
	*($4 + [160]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [140]) = $2
	*($4 + [136]) = $2
	*($4 + [144]) = ($2 + $5)
	*($4 + [240]) = ($4 + [136])
	*($4 + [24]) = ($4 + [152])
	CALL $42(($4 + [24]), ($4 + [240]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [144])
	*($4 + [8]) = *($4 + [136])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($6 = (($4 + [224]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [224]) = $7
	*($4 + [208]) = $7
	$3 = *($6)
	*((($4 + [240]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [224])
	*($4 + [40]) = $1
	*($4 + [240]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($3 = ($4 + [80]))) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($6 = ($4 + [120]))) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [244]) = ($4 + [200])
	*($4 + [240]) = ($4 + [24])
	CALL $43(($4 + [240]), ($4 + [152]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $155($2)
	
.LABEL $label$4
	CALL $26($6)
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($4 + [184]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [192])))
	
.LABEL $label$11
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10018])
	CALL memcpy(($0 + [16]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL prints([10239])
	CALL require_auth(*($0))
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-3778232672803445872, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = ($0 + [32])
	$0 = CALL $27($6, $5)
	
.LOOP $label$2:
	if ( ((uint_64)(CASTING int_64)(int_32 $4) >= (uint_64)$1) ){ goto $label$3 }
	if ( ((int_64)*($0 + [16]) != (int_64)$2) ){ goto $label$3 }
	CALL prints([10263])
	CALL printui(*($0))
	CALL eosio_assert([1], [10027])
	CALL eosio_assert([1], [10061])
	$5 = [0]
	$7 = CALL db_next_i64(*($0 + [40]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $27($6, $7)
	
.LABEL $label$4
	CALL $31($6, $0)
	$4 = ($4 + [1])
	$0 = $5
	
.LABEL $label$3
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9995])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $152($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [32]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [36]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10018])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [10018])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	CALL eosio_assert(((uint_32)($4 + [-12]) > (uint_32)[7]), [10018])
	CALL memcpy(($5 + [16]), ($2 + [12]), [8])
	*($3 + [36]) = ($2 + [20])
	CALL $70(($3 + [32]), ($5 + [24]))
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $33(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $155($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [124])))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [112])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [40])))
	if ( (*($3 + [16]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $110($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $70(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10018])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $70(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10018])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10018])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [10018])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10018])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $70(*($1), *($0 + [36]))
	CALL $70(*($1), *($0 + [40]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9737])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9737])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = (*($2) + [16])
	*(($2 = *($1))) = $1
	$3 = *($0 + [16])
	$0 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($0 + [16]))
	$3 = ( *(($0 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [52])
	*($2) = $1
	$3 = *($0 + [88])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [92])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *(($0 + [88]))
	$3 = ( *(($0 + [92])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0 + [100])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [104])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [100]))
	$0 = ( *(($0 + [104])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [11178])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [11224])
	$6 = ($1 + [8])
	*(($5 = $4) + [16]) = *($6)
	$7 = *($1)
	$8 = ($1 + [16])
	CALL $109($8, $8)
	$9 = ($1 + [32])
	CALL $109($9, $9)
	*($1 + [80]) = *(*($3))
	$3 = *($3 + [4])
	*(($1 + [96])) = *(($3 + [8]))
	*($1 + [88]) = *($3)
	$10 = ($1 + [104])
	CALL $109($10, $10)
	$11 = ($1 + [116])
	CALL $109($11, $11)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [11275])
	*($5 + [24]) = [0]
	*($5) = ($5 + [24])
	*($5 + [36]) = $6
	*($5 + [32]) = $1
	*($5 + [40]) = $8
	$12 = ($1 + [28])
	*($5 + [44]) = $12
	*($5 + [48]) = $9
	$13 = ($1 + [48])
	*($5 + [52]) = $13
	$14 = ($1 + [64])
	*($5 + [56]) = $14
	$15 = ($1 + [80])
	*($5 + [60]) = $15
	$16 = ($1 + [88])
	*($5 + [64]) = $16
	*($5 + [68]) = $10
	*($5 + [72]) = $11
	CALL $94(($5 + [32]), $5)
	$17 = *($5 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$3 = CALL $152($17)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $17)
	*($5 + [24]) = $5
	*($5 + [36]) = $6
	*($5 + [40]) = $8
	*($5 + [44]) = $12
	*($5 + [48]) = $9
	*($5 + [52]) = $13
	*($5 + [56]) = $14
	*($5 + [60]) = $15
	*($5 + [64]) = $16
	*($5 + [68]) = $10
	*($5 + [72]) = $11
	*($5 + [32]) = $1
	CALL $95(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $3, $17)
	if ( ($17 <= [513]) ){ goto $label$3 }
	CALL $155($3)
	
.LABEL $label$3
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [32]) = *($6)
	if ( (CALL $143(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3778232677491212288, ($5 + [24]), $7)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($5 + [32]))
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9737])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9737])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9737])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $77(*($1), ($0 + [16]))
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2) = $0
	CALL $78($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $73($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $5($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $74($2, $1)
	CALL $76(CALL $75(CALL $75($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [72])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $5($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $82(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [272])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1 + [4])
	$6 = *($1)
	*($3 + [176]) = [0]
	$7 = *($2 + [8])
	*($3 + [184]) = $7
	$1 = ($6 & [1])
	$4 = ( $4 ? ($1 + [1]) : $1 )
	$1 = ($4 + ( $5 ? uint_32($6 >> [1]) : $1 ))
	if ( ((uint_32)$7 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($3 + [176])
	$5 = $2
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($7)
	*($3 + [176]) = $6
	$5 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $5, $7)
	*($3 + [188]) = *($2 + [12])
	$1 = CALL $84(($3 + [192]), $4, $1, ($3 + [176]))
	$2 = [0]
	*($3 + [232]) = [0]
	$7 = *($1)
	if ( ($7 == 0) ){ goto $label$3 }
	*($3 + [232]) = $7
	if ( ($7 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($3 + [232]) | [4])), (int_32 [0]), (int_32 *(($7 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($3 + [232]) + [12])) = *(($1 + [12]))
	*($3 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $7
	
.LABEL $label$3
	*($3 + [248]) = *($1 + [16 align=4])
	*($3 + [256]) = *($1 + [24 align=4])
	*($3 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$7 = ($1 + [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($3 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($3 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdaPv($1)
	
.LABEL $label$7
	*(($3 + [116])) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [96]) = [0]
	*($3 + [124]) = [0]
	*($3 + [128]) = [1]
	*($3 + [136]) = [0]
	*($3 + [160]) = (int_64)0
	*($3 + [168]) = [1]
	*($3 + [152]) = *($3 + [112])
	*($3 + [40]) = [0]
	$1 = [0]
	$2 = *($3 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($3 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($3 + [232]) | [4])((int_32 (($3 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($3 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($3 + [40]) + [12])) = *((($3 + [232]) + [12]))
	*($3 + [44 align=4]) = *($3 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($3) = [0]
	*($3 + [56]) = *((($3 + [232]) + [16]))
	*($3 + [64]) = *((($3 + [232]) + [24]))
	*($3 + [72]) = *((($3 + [232]) + [32]))
	if ( ($1 == 0) ){ goto $label$10 }
	*($3) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($3 + [136]) | [4])((int_32 ($3 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($3 + [12])) = *((($3 + [136]) + [12]))
	*($3 + [4 align=4]) = *($3 + [140 align=4])
	
.LABEL $label$10
	*($3 + [16]) = *((($3 + [136]) + [16]))
	*($3 + [24]) = *((($3 + [136]) + [24]))
	*($3 + [32]) = *((($3 + [136]) + [32]))
	$6 = CALL $85(($3 + [80]), ($3 + [40]), $3)
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($3 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($3) = [0]
	
.LABEL $label$12
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($3 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($3 + [40]) = [0]
	
.LABEL $label$14
	$7 = *($0)
	*($0) = *($6)
	*($6) = $7
	$8 = *($6 + [4 align=4])
	$2 = *($0 + [4])
	*($6 + [4]) = $2
	$1 = *($0 + [8])
	*($0 + [4 align=4]) = $8
	*($6 + [8]) = $1
	if ( ($7 == 0) ){ goto $label$16 }
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$1 = ($2 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$20
	$2 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	$1 = *($6)
	goto $label$17 
	
.LABEL $label$18
	$1 = $7
	
.LABEL $label$17
	*(($6 + [4])) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($3 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($3 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($3 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($3 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($3 + [232]) = [0]
	
.LABEL $label$23
	$global$0 = ($3 + [272])
	return $0
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $155($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $150(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11336])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $150(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $155($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*(($1 = CALL _Znwj([16]))) = [0]
	$4 = *(($3 + [8]))
	*($1 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $3
	$6 = $1
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($4)
	*($1) = $6
	$4 = *(($1 + [8]))
	$5 = *($3)
	
.LABEL $label$3
	CALL memcpy($6, $5, $4)
	*($2) = $1
	*($1 + [12]) = *(($3 + [12]))
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = [0]
	$3 = *($1 + [8])
	*($2 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $2
	$5 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL _Znaj($3)
	*($2) = $4
	$5 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $5, $3)
	*($2 + [12]) = *($1 + [12])
	*($2 + [16]) = [0]
	$1 = *(($2 + [8]))
	*($2 + [24]) = $1
	$3 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $2
	$5 = ($2 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($2 + [16]) = $5
	$4 = *($2)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($2 + [28]) = *(($2 + [12]))
	$1 = CALL $89([10680], ($2 + [16]), $3)
	if ( (*((($2 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdaPv($3)
	
.LABEL $label$5
	if ( (*(($2 + [8])) <= [9]) ){ goto $label$6 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdaPv($3)
	
.LABEL $label$6
	*($0) = ( [10680] ? [0] : $1 )
	$global$0 = ($2 + [32])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*($0) = [0]
	*($3 + [16]) = [0]
	$1 = *(($3 + [8]))
	*($3 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $3
	$5 = ($3 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($3 + [16]) = $5
	$4 = *($3)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($3 + [28]) = *(($3 + [12]))
	CALL $88($0, ($3 + [16]))
	if ( (*((($3 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdaPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$5 = ($3 | [1])
	$6 = ($1 + [16])
	$7 = ($1 + [20])
	$8 = ($3 + [8])
	$9 = ($1 + [28])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = [1]
	if ( *($1) ){ goto $label$2 }
	$14 = [1]
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$64 
	
.LABEL $label$65
	*($7) = $13
	*($6) = *($11)
	*($11) = $12
	$12 = [1]
	if ( (*($1) == 0) ){ goto $label$31 }
	$14 = [0]
	goto $label$3 
	
.LABEL $label$64
	$12 = ((int_32)*($10) != (int_32)[0])
	$14 = [1]
	goto $label$3 
	
.LABEL $label$63
	if ( (*($2) == 0) ){ goto $label$30 }
	$14 = [2]
	goto $label$3 
	
.LABEL $label$62
	$13 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($12 | $13) == (int_32)[1]) ){ goto $label$29 }
	$14 = [3]
	goto $label$3 
	
.LABEL $label$61
	$13 = *(($2 + [16]))
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	if ( ((int_32)$16 != (int_32)(*(($2 + [20])) - $13)) ){ goto $label$27 }
	$14 = [24]
	goto $label$3 
	
.LABEL $label$60
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$8 }
	$14 = [25]
	goto $label$3 
	
.LABEL $label$59
	$17 = $12
	$14 = [26]
	goto $label$3 
	
.LABEL $label$58
	if ( ((int_32)*($17) != (int_32)*($13)) ){ goto $label$26 }
	$14 = [27]
	goto $label$3 
	
.LABEL $label$57
	$13 = ($13 + [1])
	$17 = ($17 + [1])
	if ( ((int_32)$15 != (int_32)$17) ){ goto $label$7 }
	$14 = [28]
	goto $label$3 
	
.LABEL $label$56
	if ( ((int_32)*($11) != (int_32)*(($2 + [24]))) ){ goto $label$28 }
	$14 = [29]
	goto $label$3 
	
.LABEL $label$55
	if ( ((int_32)*($9) != (int_32)*(($2 + [28]))) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$54
	$13 = [1]
	$14 = [32]
	goto $label$3 
	
.LABEL $label$53
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$4 }
	$14 = [30]
	goto $label$3 
	
.LABEL $label$52
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	$14 = [4]
	goto $label$3 
	
.LABEL $label$51
	*($8) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$25 }
	$14 = [5]
	goto $label$3 
	
.LABEL $label$50
	if ( ((uint_32)$16 > (uint_32)[10]) ){ goto $label$24 }
	$14 = [22]
	goto $label$3 
	
.LABEL $label$49
	*($3) = ($16 << [1])
	$17 = $5
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$48
	$13 = (($16 + [16]) & [-16])
	$17 = CALL _Znwj($13)
	*($8) = $17
	*($3) = ($13 | [1])
	*($3 + [4]) = $16
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$23 }
	$14 = [7]
	goto $label$3 
	
.LABEL $label$47
	$13 = $17
	$14 = [8]
	goto $label$3 
	
.LABEL $label$46
	*($13) = *($12)
	$13 = ($13 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$20 }
	$14 = [9]
	goto $label$3 
	
.LABEL $label$45
	$17 = ($17 + $16)
	$14 = [10]
	goto $label$3 
	
.LABEL $label$44
	*($17) = [0]
	$12 = ($0 + [4])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [8]))) ){ goto $label$19 }
	$14 = [21]
	goto $label$3 
	
.LABEL $label$43
	*($13) = *($3)
	*(($13 + [8])) = *($8)
	*($8) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	$12 = *($9)
	$13 = *($1)
	if ( $13 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$42
	CALL $87($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	$14 = [12]
	goto $label$3 
	
.LABEL $label$41
	CALL _ZdlPv(*($8))
	$14 = [13]
	goto $label$3 
	
.LABEL $label$40
	$12 = *($9)
	$13 = *($1)
	if ( ($13 == 0) ){ goto $label$17 }
	$14 = [14]
	goto $label$3 
	
.LABEL $label$39
	CALL void $3((int_32 $4), (int_32 *($11)), (int_32 $12), (int_32 *(($13 & [-2]) + [4])))
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)*($9)) ){ goto $label$14 }
	$14 = [15]
	goto $label$3 
	
.LABEL $label$38
	$12 = *($3 + [4])
	goto $label$13 
	
.LABEL $label$37
	*($3 + [4]) = $12
	*($3) = $12
	$13 = $12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$36
	if ( ((int_32)*($7) != (int_32)$13) ){ goto $label$9 }
	$14 = [19]
	goto $label$3 
	
.LABEL $label$35
	*($10) = [1]
	goto $label$10 
	
.LABEL $label$34
	$12 = *($3 + [4])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$33
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$32
	CALL $107($3)
	
.LABEL $label$31
	$14 = [1]
	goto $label$3 
	
.LABEL $label$30
	$14 = [33]
	goto $label$3 
	
.LABEL $label$29
	$14 = [32]
	goto $label$3 
	
.LABEL $label$28
	$14 = [4]
	goto $label$3 
	
.LABEL $label$27
	$14 = [4]
	goto $label$3 
	
.LABEL $label$26
	$14 = [4]
	goto $label$3 
	
.LABEL $label$25
	$14 = [23]
	goto $label$3 
	
.LABEL $label$24
	$14 = [6]
	goto $label$3 
	
.LABEL $label$23
	$14 = [10]
	goto $label$3 
	
.LABEL $label$22
	$14 = [10]
	goto $label$3 
	
.LABEL $label$21
	$14 = [7]
	goto $label$3 
	
.LABEL $label$20
	$14 = [8]
	goto $label$3 
	
.LABEL $label$19
	$14 = [11]
	goto $label$3 
	
.LABEL $label$18
	$14 = [13]
	goto $label$3 
	
.LABEL $label$17
	$14 = [20]
	goto $label$3 
	
.LABEL $label$16
	$14 = [20]
	goto $label$3 
	
.LABEL $label$15
	$14 = [14]
	goto $label$3 
	
.LABEL $label$14
	$14 = [17]
	goto $label$3 
	
.LABEL $label$13
	$14 = [16]
	goto $label$3 
	
.LABEL $label$12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$11
	$14 = [16]
	goto $label$3 
	
.LABEL $label$10
	$14 = [16]
	goto $label$3 
	
.LABEL $label$9
	$14 = [16]
	goto $label$3 
	
.LABEL $label$8
	$14 = [28]
	goto $label$3 
	
.LABEL $label$7
	$14 = [26]
	goto $label$3 
	
.LABEL $label$6
	$14 = [31]
	goto $label$3 
	
.LABEL $label$5
	$14 = [30]
	goto $label$3 
	
.LABEL $label$4
	$14 = [31]
	goto $label$3 
	$14
	return (unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [8]) = [0]
	$5 = *($3 + [8])
	*($4 + [16]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($4 + [8])
	$7 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4 + [8]) = $6
	$7 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	*($4 + [20]) = *($3 + [12])
	CALL $86($0, ($4 + [8]), [0])
	if ( (*(($4 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdaPv($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($4 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$2 = *($4 + [24])
	if ( ((int_32)$2 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$1 = *($4 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$1 = *($4 + [28])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$1) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $2
	$2 = ($0 + [24])
	*(($0 + [16])) = *($2)
	*($2) = $1
	
.LABEL $label$4
	$global$0 = ($4 + [32])
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $77(*($1), ($0 + [32]))
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [48]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [80]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [84]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10018])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [10018])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10018])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [10018])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10018])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $148($0, $1, $2)
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ((((int_32)$1 ^ (int_32)$0) & [3]) == 0) ){ goto $label$3 }
	$3 = $2
	goto $label$2 
	
.LABEL $label$3
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($1 & [3]) == 0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = *($1)
	*($0) = $3
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ((int_32)$2 != (int_32)[1])
	$0 = ($0 + [1])
	$3 = ($2 + [-1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$8 }
	$2 = $3
	if ( ($1 & [3]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = $2
	if ( $4 ){ goto $label$4 }
	
.LABEL $label$5
	CALL memset($0, [0], [0])
	return $0
	
.LABEL $label$4
	if ( (*($1) == 0) ){ goto $label$9 }
	if ( ($3 <= [4]) ){ goto $label$2 }
	
.LOOP $label$10:
	$2 = *($1)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$2 }
	*($0) = $2
	$0 = ($0 + [4])
	$1 = ($1 + [4])
	$3 = ($3 + [-4])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$10 }
	goto $label$2 
	
.LABEL $label$9
	CALL memset($0, [0], $3)
	return $0
	
.LABEL $label$2
	$2 = [0]
	if ( ($3 == 0) ){ goto $label$1 }
	
.LOOP $label$12:
	$4 = *($1)
	*($0) = $4
	if ( ($4 == 0) ){ goto $label$11 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$11
	$2 = $3
	
.LABEL $label$1
	CALL memset($0, [0], $2)
	return $0
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( (((int_32)$1 ^ (int_32)$0) & [3]) ){ goto $label$2 }
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ($1 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$2 = *($1)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$2 }
	
.LOOP $label$5:
	*($0) = $2
	$2 = *($1 + [4])
	$0 = ($0 + [4])
	$1 = ($1 + [4])
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	
.LABEL $label$2
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	$1 = ($1 + [1])
	
.LOOP $label$6:
	$2 = *($1)
	*($0 + [1]) = $2
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((int_32)$3 != (int_32)($2 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$2 = *($1)
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$3 == (int_32)($2 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - ($2 & [255]))
}

int_32 .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	CALL $145($0, $1)
	return $0
}

int_64 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $138($3, (int_64)0)
	$4 = CALL $140($3, $2, [1], (int_64)-9223372036854775808)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_64 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $139($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $128()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $139($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19841]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $138($0, (int_64)0)
	*(CALL $128()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $139($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $139($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $139($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $139($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19841])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19841]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19841]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $139($0)
	$5 = *(($6 + [19841]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $139($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19841]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8205]))
	$8 = (int_64)0
	$5 = *(($6 + [19841]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19841]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $139($0)
	$5 = *(($6 + [19841]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $139($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19841]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $138($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19841]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19841]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $139($0) + [19841]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $128()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $128()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $128()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $138($3, (int_64)0)
	$4 = CALL $140($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [116]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [124])))
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [112])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [40])))
	if ( (*($1 + [16]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $71($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $111($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $111($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $107($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10023])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $5($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10018])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9737])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9737])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $68($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9737])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9737])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9737])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9737])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9737])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9737])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9737])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9737])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $77(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL $146(($4 + [112]), $1)
	$5 = CALL $147(($4 + [112]))
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	$1 = [0]
	$6 = [0]
	$7 = [0]
	
.LOOP $label$5:
	$8 = (($4 + [112]) + $1)
	$9 = *($8)
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$6 }
	if ( ($1 == 0) ){ goto $label$7 }
	if ( ((int_32)*(($8 + [-1])) == (int_32)[32]) ){ goto $label$7 }
	$9 = ($4 + $6)
	$6 = [0]
	*($9) = [0]
	if ( (CALL $147($4) == 0) ){ goto $label$7 }
	*(($2 + ($7 << [2]))) = CALL $135($4)
	$6 = [0]
	*($4) = [0]
	$7 = ($7 + [1])
	
.LABEL $label$7
	$1 = ($1 + [1])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*(($4 + $6)) = $9
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$4
	*(($4 + $6)) = [0]
	if ( (CALL $147($4) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	*($4) = [0]
	if ( (CALL $147($4) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($2 + ($7 << [2]))) = CALL $135($4)
	$7 = ($7 + [1])
	
.LABEL $label$1
	*($3) = $7
	$global$0 = ($4 + [224])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	float_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL $149(($4 + [108]), $1, [2])
	CALL $146($4, $2)
	*($4 + [110]) = [0]
	if ( (CALL $144(($4 + [108]), [8465]) == 0) ){ goto $label$5 }
	if ( (CALL $144(($4 + [108]), [8468]) == 0) ){ goto $label$4 }
	if ( (CALL $144(($4 + [108]), [8471]) == 0) ){ goto $label$3 }
	$5 = (float_32)0
	if ( CALL $144(($4 + [108]), [8479]) ){ goto $label$2 }
	$5 = CALL $59($2, $4, $3)
	$global$0 = ($4 + [160])
	return $5
	
.LABEL $label$5
	*($4 + [156]) = [0]
	CALL $36($2, $4, ($4 + [112]), ($4 + [156]))
	$5 = (float_32)0
	$6 = *($4 + [156])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$2 }
	$7 = *($3)
	$1 = [0]
	$2 = ($4 + [112])
	
.LOOP $label$6:
	if ( ((int_32)*($2) == (int_32)$7) ){ goto $label$1 }
	$2 = ($2 + [4])
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)$6) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	*($4 + [156]) = [0]
	CALL $36($2, $4, ($4 + [112]), ($4 + [156]))
	$5 = (float_32)0
	$6 = *($4 + [156])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$2 }
	$8 = *($3)
	$2 = ($4 + [112])
	$9 = ($3 + [8])
	$10 = ($3 + [12])
	$11 = ($3 + [16])
	
.LOOP $label$7:
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$9 }
	if ( ((int_32)$7 == (int_32)*(($3 + [4]))) ){ goto $label$9 }
	if ( ((int_32)$7 == (int_32)*($9)) ){ goto $label$9 }
	if ( ((int_32)$7 == (int_32)*($10)) ){ goto $label$9 }
	if ( ((int_32)$7 != (int_32)*($11)) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = ($1 + [1])
	
.LABEL $label$8
	$2 = ($2 + [4])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	if ( ((int_32)$1 < (int_32)[2]) ){ goto $label$2 }
	$2 = [0]
	$6 = [1]
	
.LOOP $label$10:
	$2 = ($2 + [1])
	$6 = ((int_32)$2 * (int_32)$6)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$10 }
	$global$0 = ($4 + [160])
	return (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(int_32 uint_32($6 >> [1])) * (float_64)(float_64)5.1))
	
.LABEL $label$3
	$1 = [0]
	*($4 + [156]) = [0]
	CALL $36($2, $4, ($4 + [112]), ($4 + [156]))
	$5 = (float_32)0
	$6 = *($4 + [156])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$2 }
	$8 = *($3)
	$2 = ($4 + [112])
	$9 = ($3 + [8])
	$10 = ($3 + [12])
	$11 = ($3 + [16])
	
.LOOP $label$11:
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$13 }
	if ( ((int_32)$7 == (int_32)*(($3 + [4]))) ){ goto $label$13 }
	if ( ((int_32)$7 == (int_32)*($9)) ){ goto $label$13 }
	if ( ((int_32)$7 == (int_32)*($10)) ){ goto $label$13 }
	if ( ((int_32)$7 != (int_32)*($11)) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = ($1 + [1])
	
.LABEL $label$12
	$2 = ($2 + [4])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$11 }
	if ( ((int_32)$1 < (int_32)[3]) ){ goto $label$2 }
	$2 = [0]
	$6 = [1]
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$6 = ((int_32)$2 * (int_32)$6)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$14 }
	$5 = (CASTING float_32)(int_32 ((int_32)((uint_32)$6 / (uint_32)[6]) * (int_32)[15]))
	
.LABEL $label$2
	$global$0 = ($4 + [160])
	return $5
	
.LABEL $label$1
	$global$0 = ($4 + [160])
	return (float_32)10.5
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($3 + [48]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *(($3 + [56]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [64]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($0 + [72]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [80]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9737])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $77(*($1), ($0 + [88]))
	CALL $77(*($1), ($0 + [100]))
	$global$0 = ($2 + [16])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [16]) = *(*(($4 + [4])))
	*($1 + [8]) = [0]
	$5 = *($0)
	$6 = ($1 + [24])
	CALL $112($6, [8464])
	$4 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [20])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	$9 = ($1 + [16])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9737])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($4 + [-8]) > (int_32)[3]), [9737])
	CALL memcpy(($2 + [8]), $7, [4])
	CALL eosio_assert(((int_32)($4 + [-12]) > (int_32)[7]), [9737])
	CALL memcpy(($2 + [12]), $9, [8])
	*($3 + [4]) = ($2 + [20])
	CALL $77($3, $6)
	$8 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($5 + [8]), (int_64)-3778232672803445872, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $155($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_32 $8
	int_64 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [72]) = $1
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($7 + [36]) == (int_32)$3), [10615])
	if ( ($7 == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)-3778232672803445872, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $27($3, $6)
	CALL eosio_assert(((int_32)*($7 + [36]) == (int_32)$3), [10615])
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (int_64)($1 == 0) ){ goto $label$3 }
	*(($2 + [64])) = [0]
	*($2 + [56]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [44]) = [0]
	$6 = ($7 + [24])
	if ( (*($7 + [24]) & [1]) ){ goto $label$2 }
	$5 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$3
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$2
	$5 = *(($7 + [32]))
	
.LABEL $label$1
	CALL $36($6, $5, ($2 + [48]), ($2 + [44]))
	if ( (*(($7 + [24])) & [1]) ){ goto $label$9 }
	$6 = ($6 + [1])
	goto $label$8 
	
.LABEL $label$9
	$6 = *(($7 + [32]))
	
.LABEL $label$8
	CALL prints([9330])
	CALL printui(*($7))
	CALL prints([9197])
	CALL printui(*(($7 + [16])))
	CALL prints([9379])
	CALL prints($6)
	CALL prints([8462])
	*($2 + [40]) = ($0 + [72])
	CALL $57(($2 + [8]), ($2 + [40]), ($2 + [72]))
	$6 = *($2 + [12])
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((int_64)*($2 + [72]) != (int_64)*($6 + [8])) ){ goto $label$11 }
	$1 = *($2 + [8])
	*($2 + [32]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$10 }
	
.LOOP $label$12:
	*($2 + [28]) = [0]
	CALL prints([9390])
	CALL printui(*($6 + [8]))
	CALL prints([9080])
	CALL printui(*($6))
	CALL prints([9441])
	$5 = *($6 + [16])
	$7 = ($5 & [1])
	CALL prints_l(( *(($6 + [24])) ? ($6 + [17]) : $7 ), ( *(($6 + [20])) ? uint_32($5 >> [1]) : $7 ))
	CALL $35([9452], ($6 + [48]), [8968], ($6 + [104]), [9464], ($6 + [116]), [8462])
	$6 = *($2 + [36])
	if ( (*($6 + [32]) & [1]) ){ goto $label$16 }
	$5 = (($6 + [32]) + [1])
	if ( ((*($6 + [104]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$5 = *(($6 + [40]))
	if ( (*($6 + [104]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	$6 = (($6 + [104]) + [1])
	goto $label$13 
	
.LABEL $label$14
	$6 = *(($6 + [112]))
	
.LABEL $label$13
	$8 = ((float_32)CALL $37($6, $5, $6, ($2 + [48])) * (float_32)(CASTING float_32)(int_64 *(*($2 + [36]) + [64])))
	if ( ((float_32)(float_32)|$8| < (float_32)(float_32)9223372036854775808) ){ goto $label$21 }
	$9 = (int_64)-9223372036854775808
	$6 = CALL $147([8577])
	if ( ((uint_32)$6 >= (uint_32)[8]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$9 = (Rounds 0)($8)
	$6 = CALL $147([8577])
	if ( ($6 <= [8]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL eosio_assert([0], [10389])
	goto $label$18 
	
.LABEL $label$19
	if ( $6 ){ goto $label$18 }
	$1 = (int_64)0
	goto $label$17 
	
.LABEL $label$18
	$1 = (int_64)0
	
.LOOP $label$22:
	$5 = *(($6 + [8576]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [10434])
	
.LABEL $label$23
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$22 }
	$1 = ((int_64)$1 << (int_64)8)
	
.LABEL $label$17
	*(($6 = (($2 + [8]) + [8]))) = ((int_64)$1 | (int_64)4)
	*($2 + [8]) = $9
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10487])
	$1 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$1 = $9
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$1 = $9
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$28 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$5 = [0]
	
.LABEL $label$24
	CALL eosio_assert($5, [10536])
	*($2 + [28]) = ( [1] ? [2] : ((int_64)*($2 + [8]) > (int_64)0) )
	$6 = *($2 + [36])
	CALL prints([9474])
	CALL printui(*($6))
	CALL prints([8462])
	$6 = *($2 + [36])
	$1 = *($0)
	*($2 + [4]) = ($2 + [8])
	*($2) = ($2 + [28])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [11143])
	CALL $64(*($2 + [40]), $6, $1, $2)
	CALL $58(($2 + [32]))
	$6 = *($2 + [36])
	if ( $6 ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	*($2 + [36]) = [0]
	*($2 + [32]) = ($2 + [40])
	
.LABEL $label$10
	CALL prints([9515])
	CALL printui(*($2 + [72]))
	CALL prints([9224])
	CALL printi(*($2 + [48]))
	CALL prints([9024])
	CALL printi(*($2 + [52]))
	CALL prints([9024])
	CALL printi(*($2 + [56]))
	CALL prints([9024])
	CALL printi(*($2 + [60]))
	CALL prints([9024])
	CALL printi(*($2 + [64]))
	CALL prints([8462])
	$global$0 = ($2 + [80])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [10091])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$16()), [10136])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10186])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
}

void .FUNC $129 (int_32 $0)
{
}

void .FUNC $127 (int_32 $0)
{
	CALL abort()
	(unreachable)
}