(data (i32.const 8192) "match kickoff time must after now\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8235) "qiu3d game already initialized\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8352) "qiu3d not initialize\00")
(data (i32.const 8373) "new match must after lastest match\00")
(data (i32.const 8408) "history match can\'t update\00")
(data (i32.const 8435) "match not found\00stoull\00")
(data (i32.const 8458) "match already ended\00")
(data (i32.const 8478) "invalid player name\00")
(data (i32.const 8498) "invalid quantity\00")
(data (i32.const 8515) "only positive quantity allowed\00")
(data (i32.const 8546) "EOS\00")
(data (i32.const 8550) "must buy ticket with EOS\00")
(data (i32.const 8575) "invalid option\00")
(data (i32.const 8590) "player does not exist\00")
(data (i32.const 8612) "your vault is 0\00")
(data (i32.const 8628) "no remain EOS in your account\00")
(data (i32.const 8658) "player withdraw\00")
(data (i32.const 8674) "game not exist\00")
(data (i32.const 8689) "game locked\00")
(data (i32.const 8701) "game can\'t accept bet\00")
(data (i32.const 8723) "ticket records can\'t found\00")
(data (i32.const 8750) "not enough to sell\00")
(data (i32.const 8769) "invalid odds\00")
(data (i32.const 8782) "odds already changed\00")
(data (i32.const 8803) "ticket options not exist\00")
(data (i32.const 8828) "no enough eos in vault\00: no conversion\00")
(data (i32.const 8867) "please set next match first\00: out of range\00")
(data (i32.const 8910) "transfer EOS dividend to tokenpool\00")
(data (i32.const 8945) "unable to find key\00")
(data (i32.const 8964) "sub error\00")
(data (i32.const 8974) "add error\00")
(data (i32.const 8985) "contract is not involved in this transfer\00")
(data (i32.const 9027) "-\00")
(data (i32.const 9029) "invalid pay type\00")
(data (i32.const 9046) "string is too long to be a valid symbol_code\00")
(data (i32.const 9091) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9144) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9193) "invalid symbol name\00")
(data (i32.const 9213) "active")
(data (i32.const 9219) "eosio.token")
(data (i32.const 9230) "transfer")
(data (i32.const 9238) "write\00")
(data (i32.const 9244) "mine")
(data (i32.const 9248) "string is too long to be a valid name\00")
(data (i32.const 9286) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9353) "character is not in allowed character set for names\00")
(data (i32.const 9405) "error reading iterator\00")
(data (i32.const 9428) "read\00")
(data (i32.const 9433) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9485) "get\00")
(data (i32.const 9489) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9543) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9591) "cannot create objects in table of another contract\00")
(data (i32.const 9642) "cannot pass end iterator to modify\00")
(data (i32.const 9677) "object passed to modify is not in multi_index\00")
(data (i32.const 9723) "cannot modify objects in table of another contract\00")
(data (i32.const 9774) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9833) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10152) "cannot increment end iterator\00")
(data (i32.const 18608) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "current_time" (func $fimport$1 (result i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "is_account" (func $fimport$10 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$11 (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$15 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$16 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$19 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$20 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$23 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $59))
(export "_Znwj" (func $101))
(export "_ZdlPv" (func $103))
(export "_Znaj" (func $102))
(export "_ZdaPv" (func $104))
(export "_ZnwjSt11align_val_t" (func $105))
(export "_ZnajSt11align_val_t" (func $106))
(export "_ZdlPvSt11align_val_t" (func $107))
(export "_ZdaPvSt11align_val_t" (func $108))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $58 $42 $15 $1 $19 $17 $31 $47)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18865))
(global $global$2 i32 (i32.const 18865))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = ($global$0 - [64])
	$global$0 = $6
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	$4 = CALL $110($6, $4)
	$3 = CALL $110(($6 + [16]), $3)
	$2 = CALL $110(($6 + [32]), $2)
	$1 = CALL $110(($6 + [48]), $1)
	CALL void $8((int_32 $1), (int_32 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_64 $0))
	if ( (*($4) & [1]) ){ goto $label$8 }
	if ( (*($3) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	$0 = [1]
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($2) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($1) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($2 + [8]))
	if ( ((*($1) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($6 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($6 + [64])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = (*($0) + [8])
	*($0) = $2
	$4 = *($1 + [8])
	$3 = *(($1 + [12]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$2 = (($5 & [-8]) + $2)
	
.LABEL $label$2
	*($0) = $2
	$4 = *($1 + [20])
	$3 = *(($1 + [24]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	$2 = (($5 & [-8]) + $2)
	
.LABEL $label$4
	*($0) = $2
	$4 = *($1 + [32])
	$3 = *(($1 + [36]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$6 }
	$2 = (($5 & [-8]) + $2)
	
.LABEL $label$6
	*($0) = $2
	$4 = *($1 + [44])
	$3 = *(($1 + [48]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$8 }
	$2 = (($5 & [-8]) + $2)
	
.LABEL $label$8
	*($0) = $2
	$1 = *($1 + [56])
	$3 = *(($1 + [60]))
	$4 = ($3 - $1)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$10 }
	$2 = (($4 & [-8]) + $2)
	
.LABEL $label$10
	*($0) = $2
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9238])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [9238])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [3])
	if ( ((uint_32)$3 <= (uint_32)int_32(($4 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($4 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $3
	$4 = int_32($4 >> [2])
	if ( ($4 <= $3) ){ goto $label$6 }
	$5 = $4
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$3 = (($2 + [-8]) - $1)
	$4 = $5
	
.LOOP $label$7:
	*($4) = *($1)
	$4 = ($4 + [8])
	$1 = ($1 + [8])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	*(($0 + [4])) = (($5 + ($3 & [-8])) + [8])
	goto $label$3 
	
.LABEL $label$4
	$7 = int_32($6 >> [3])
	$6 = (*($0 + [4]) - $5)
	$4 = ($1 + $6)
	$8 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($8 - $1)
	if ( ($6 == 0) ){ goto $label$8 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$3 }
	$5 = (($2 + [-8]) - $8)
	$3 = *(($0 + [4]))
	$1 = $3
	
.LOOP $label$9:
	*($1) = *($4)
	$1 = ($1 + [8])
	$4 = ($4 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	*(($0 + [4])) = (($3 + ($5 & [-8])) + [8])
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + (int_32($6 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $122($0)
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [56])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [60])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($1 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9405])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	*($5) = (int_64)0
	CALL $94(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($5 + [64 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $45(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9543])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229443000054317056)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9489])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9489])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $91(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10196]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10200])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10196]) = [1]
	$2 = ($2 << [16])
	*([0] + [10200]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10200])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10200]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10196]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10196]) = [1]
	$3 = ($3 << [16])
	*([0] + [10200]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10200])
	
.LABEL $label$10
	*([0] + [10200]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $123 ()
{
	return [10188]
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $132(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $122 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $127($3, (int_64)0)
	$4 = CALL $129($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $133 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $123())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $135($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $121 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0)
{
	return CALL $137([10204], $0)
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $138($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8266])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $120 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9677])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9723])
	$6 = *(*($3))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)1)
	*($1 + [24]) = ((int_64)$6 + (int_64)*($1 + [24]))
	$7 = *($1 + [16])
	$6 = *($1)
	$3 = *(($3 + [8]))
	$8 = *($3)
	if ( ((uint_64)$8 > (uint_64)(int_64)99999999) ){ goto $label$2 }
	$7 = ((int_64)$7 + (int_64)1)
	goto $label$1 
	
.LABEL $label$2
	$7 = ((int_64)((int_64)$7 + (int_64)((uint_64)$8 / (uint_64)(int_64)100000000)) + (int_64)1)
	
.LABEL $label$1
	*(($1 + [16])) = $7
	*($1 + [56]) = ((int_64)*($3) + (int_64)*($1 + [56]))
	CALL eosio_assert([1], [9774])
	$4 = $4
	$3 = ($4 + [-128])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-14])
	CALL $10($5, $1)
	CALL db_update_i64(*($1 + [120]), $2, $3, [114])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

int_32 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $125($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $49 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$0), [9833])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035937269232844800, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $52($0, $4)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$0), [9833])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3778232685332267008, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4 + [8]) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [9833])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $84($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-3778232685332267008, $6))
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [9833])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $43 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [304])
	$global$0 = $5
	*($5 + [216]) = $1
	*($5 + [200]) = $4
	*($5 + [208]) = $2
	CALL eosio_assert((uint_64)($2 <= (int_64)3), [8575])
	$6 = [0]
	*((($5 + [160]) + [32])) = [0]
	*($5 + [176]) = (int_64)-1
	$2 = *($0)
	*($5 + [160]) = $2
	*($5 + [168]) = $2
	*($5 + [184]) = (int_64)0
	$7 = [0]
	$8 = CALL db_lowerbound_i64($2, $2, (int_64)7035937819507087360, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $2(($5 + [160]), $8)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8352])
	*((($5 + [120]) + [32])) = [0]
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	$2 = *($0)
	*($5 + [120]) = $2
	*($5 + [128]) = $2
	$8 = CALL db_find_i64($2, $2, (int_64)7035924439720001536, *($7 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $21(($5 + [120]), $8)
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)($5 + [120])), [9833])
	
.LABEL $label$2
	$8 = [0]
	$9 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($9, [8674])
	$10 = [0]
	if ( *($6 + [113]) ){ goto $label$3 }
	$10 = [0]
	if ( ((uint_64)*($6 + [8]) <= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$3 }
	$10 = *($6 + [112])
	
.LABEL $label$3
	CALL eosio_assert($10, [8701])
	*((($5 + [80]) + [32])) = [0]
	$2 = *($0)
	*($5 + [80]) = $2
	*($5 + [96]) = (int_64)-1
	*($5 + [104]) = (int_64)0
	*($5 + [88]) = $2
	$10 = ($7 + [8])
	$11 = CALL db_find_i64($2, $2, (int_64)-3778232674229180112, *($10))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $23(($5 + [80]), $11)
	CALL eosio_assert(((int_32)*($8 + [68]) == (int_32)($5 + [80])), [9833])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8723])
	$2 = *($10)
	*((($5 + [224]) + [32])) = [0]
	*($5 + [240]) = (int_64)-1
	*($5 + [248]) = (int_64)0
	$4 = *($0)
	*($5 + [224]) = $4
	*($5 + [232]) = $4
	$8 = CALL $24(($5 + [224]), $2, [8945])
	$2 = ((uint_64)((int_64)*($8 + [24]) * (int_64)27) / (uint_64)(int_64)100)
	$4 = ((uint_64)((int_64)*($8 + [32]) * (int_64)90) / (uint_64)(int_64)100)
	$11 = *($5 + [248])
	if ( ($11 == 0) ){ goto $label$5 }
	$12 = ($5 + [252])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$9 }
	CALL _ZdlPv($10)
	
.LABEL $label$9
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$8 }
	$8 = *(($5 + [248]))
	goto $label$6 
	
.LABEL $label$7
	$8 = $11
	
.LABEL $label$6
	*($12) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$5
	$2 = ((int_64)$4 + (int_64)$2)
	*($5 + [72]) = (int_64)0
	$4 = *($5 + [208])
	if ( ((int_64)$4 == (int_64)1) ){ goto $label$12 }
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$11 }
	$4 = *($6 + [64])
	*($5 + [72]) = $4
	$8 = ($6 + [88])
	goto $label$10 
	
.LABEL $label$12
	$4 = *($6 + [72])
	*($5 + [72]) = $4
	$8 = ($6 + [96])
	goto $label$10 
	
.LABEL $label$11
	$4 = *($6 + [80])
	*($5 + [72]) = $4
	$8 = ($6 + [104])
	
.LABEL $label$10
	CALL eosio_assert(((uint_64)*($5 + [200]) <= (uint_64)((uint_64)((int_64))($2 - *($8)) * (int_64)100) / (uint_64)$4)), [8750])
	CALL eosio_assert(((uint_64)*($5 + [72]) >= (uint_64)$3), [8769])
	$2 = *($5 + [72])
	if ( ((uint_64)$2 <= (uint_64)$3) ){ goto $label$13 }
	CALL eosio_assert((uint_64)(((uint_64)((int_64))($2 - $3) * (int_64)100) / (uint_64)$2) <= (int_64)6), [8782])
	
.LABEL $label$13
	*(($11 = ($5 + [256]))) = [0]
	*($5 + [240]) = (int_64)-1
	*($5 + [248]) = (int_64)0
	*($5 + [260]) = [0]
	$2 = *($0)
	*($5 + [224]) = $2
	*($5 + [232]) = $2
	*($5 + [56]) = $7
	*($5 + [52]) = ($5 + [224])
	*($5 + [48]) = ($5 + [216])
	*($5 + [60]) = ($5 + [208])
	*($5 + [64]) = ($5 + [72])
	*($5 + [68]) = ($5 + [200])
	*($5 + [296]) = $2
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$4()), [9591])
	*($5 + [276]) = ($5 + [48])
	*($5 + [272]) = ($5 + [224])
	*($5 + [280]) = ($5 + [296])
	*(($8 = CALL _Znwj([72]))) = (int_64)0
	*($8 + [56]) = ($5 + [224])
	CALL $44(($5 + [272]), $8)
	*($5 + [288]) = $8
	$2 = *($8 + [8])
	*($5 + [272]) = $2
	$12 = *($8 + [60])
	*($5 + [268]) = $12
	$13 = ($5 + [252])
	$10 = *($13)
	if ( ((uint_32)$10 >= (uint_32)*($11)) ){ goto $label$16 }
	*($10 + [8]) = $2
	*($10 + [16]) = $12
	*($5 + [288]) = [0]
	*($10) = $8
	*($13) = ($10 + [24])
	$8 = *($5 + [288])
	$10 = [0]
	*($5 + [288]) = [0]
	if ( $8 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $45(($5 + [248]), ($5 + [288]), ($5 + [272]), ($5 + [268]))
	$8 = *($5 + [288])
	$10 = [0]
	*($5 + [288]) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$2 = *($0)
	*($5 + [52]) = ($5 + [208])
	*($5 + [48]) = ($5 + [200])
	*($5 + [56]) = ($5 + [72])
	CALL eosio_assert($9, [9642])
	CALL $46(($5 + [120]), $6, $2, ($5 + [48]))
	CALL $39($0, *($5 + [216]), *(($7 + [8])))
	$4 = *($5 + [216])
	*($5 + [276]) = $10
	*($5 + [272]) = [9244]
	*($5 + [24]) = *($5 + [272])
	$1 = *(CALL $27(($5 + [48]), ($5 + [24])))
	$3 = *($5 + [200])
	$8 = CALL $133([8546])
	if ( ($8 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [9046])
	goto $label$19 
	
.LABEL $label$20
	if ( ($8 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$2 = (int_64)0
	
.LOOP $label$21:
	$10 = *(($8 + [8545]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [9091])
	
.LABEL $label$22
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$21 }
	goto $label$17 
	
.LABEL $label$18
	$2 = (int_64)0
	
.LABEL $label$17
	*($5 + [40]) = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	*($5 + [32]) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9144])
	$2 = ((int_64)$2 & (int_64)72057594037927935)
	$8 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$2 = $3
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$2 = $3
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$27 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$10 = [0]
	
.LABEL $label$23
	CALL eosio_assert($10, [9193])
	*((($5 + [8]) + [8])) = *((($5 + [32]) + [8]))
	*($5 + [8]) = *($5 + [32])
	CALL $41($0, $4, $1, ($5 + [8]))
	$11 = *($5 + [248])
	if ( ($11 == 0) ){ goto $label$28 }
	$0 = ($5 + [252])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$30 }
	
.LOOP $label$31:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$32 }
	CALL _ZdlPv($10)
	
.LABEL $label$32
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$31 }
	$8 = *(($5 + [248]))
	goto $label$29 
	
.LABEL $label$30
	$8 = $11
	
.LABEL $label$29
	*($0) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$28
	CALL $14(($5 + [104]))
	$11 = *($5 + [144])
	if ( ($11 == 0) ){ goto $label$33 }
	$0 = ($5 + [148])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$35 }
	
.LOOP $label$36:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$37 }
	CALL _ZdlPv($10)
	
.LABEL $label$37
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$36 }
	$8 = *(($5 + [144]))
	goto $label$34 
	
.LABEL $label$35
	$8 = $11
	
.LABEL $label$34
	*($0) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$33
	$11 = *($5 + [184])
	if ( ($11 == 0) ){ goto $label$38 }
	$0 = ($5 + [188])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$40 }
	
.LOOP $label$41:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$42 }
	CALL _ZdlPv($10)
	
.LABEL $label$42
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$41 }
	$8 = *(($5 + [184]))
	goto $label$39 
	
.LABEL $label$40
	$8 = $11
	
.LABEL $label$39
	*($0) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$38
	$global$0 = ($5 + [304])
}

void .FUNC $42 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	CALL eosio_assert(CALL $fimport$10($1), [8478])
	CALL eosio_assert((uint_64)($3 <= (int_64)3), [8575])
	CALL require_auth($1)
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8498])
	$7 = (int_64)0
	$8 = *($2)
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8515])
	$5 = CALL $133([8546])
	if ( ($5 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9046])
	goto $label$7 
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$7 = (int_64)0
	
.LOOP $label$9:
	$9 = *(($5 + [8545]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [9091])
	
.LABEL $label$10
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$9 }
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [8550])
	CALL $32($0, $1, $8)
	CALL $43($0, $1, $3, $4, $8)
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *($0)
	*($4 + [44]) = [6]
	*($4 + [40]) = [9213]
	*($4 + [32]) = *($4 + [40])
	$6 = *(CALL $27(($4 + [72]), ($4 + [32])))
	*($4 + [44]) = [4]
	*($4 + [40]) = [9244]
	*($4 + [24]) = *($4 + [40])
	$7 = *(CALL $27(($4 + [72]), ($4 + [24])))
	*((($4 + [40]) + [16])) = *(($3 + [8]))
	*($4 + [40]) = $1
	*($4 + [72]) = (int_64)7035937925206713216
	*($4 + [80]) = $7
	*($4 + [48]) = *($3)
	*($4 + [64]) = *($0)
	*(($8 = CALL _Znwj([16]))) = $5
	*($8 + [8]) = $6
	*(($4 + [108])) = [0]
	$9 = ($8 + [16])
	*(($4 + [96])) = $9
	*(($4 + [92])) = $9
	*($4 + [88]) = $8
	*($4 + [100 align=4]) = (int_64)0
	CALL $28(($4 + [100]), [32])
	$8 = *((($4 + [72]) + [32]))
	$9 = *($4 + [100])
	*($4 + [132]) = $9
	*($4 + [128]) = $9
	*($4 + [136]) = $8
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [40])
	CALL $57(($4 + [120]), ($4 + [112]))
	CALL $30(($4 + [128]), ($4 + [72]))
	$8 = *($4 + [128])
	CALL send_inline($8, (*($4 + [132]) - $8))
	$8 = *($4 + [128])
	if ( ($8 == 0) ){ goto $label$1 }
	*($4 + [132]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$8 = *($4 + [100])
	if ( ($8 == 0) ){ goto $label$2 }
	*(($4 + [104])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$2
	$8 = *($4 + [88])
	if ( ($8 == 0) ){ goto $label$3 }
	*(($4 + [92])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$3
	*($4 + [44]) = [0]
	*($4 + [40]) = [9244]
	*($4 + [16]) = *($4 + [40])
	if ( ((int_64)*(CALL $27(($4 + [72]), ($4 + [16]))) == (int_64)$2) ){ goto $label$4 }
	$6 = *($0)
	*($4 + [44]) = [6]
	*($4 + [40]) = [9213]
	*($4 + [8]) = *($4 + [40])
	$7 = *(CALL $27(($4 + [72]), ($4 + [8])))
	*($4 + [44]) = [4]
	*($4 + [40]) = [9244]
	*($4) = *($4 + [40])
	$10 = *(CALL $27(($4 + [72]), $4))
	$11 = ((uint_64)((int_64)*($3) * (int_64)50) / (uint_64)(int_64)100)
	$8 = CALL $133([8546])
	if ( ($8 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9046])
	goto $label$7 
	
.LABEL $label$8
	if ( ($8 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = (int_64)0
	
.LOOP $label$9:
	$3 = *(($8 + [8545]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [9091])
	
.LABEL $label$10
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$6
	$5 = (int_64)0
	
.LABEL $label$5
	CALL eosio_assert([1], [9144])
	$1 = ((int_64)$5 & (int_64)72057594037927935)
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	$8 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$1 = $5
	$3 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$1 = $5
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $3 ){ goto $label$15 }
	$3 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [9193])
	*((($4 + [40]) + [16])) = $12
	*($4 + [48]) = $11
	*($4 + [40]) = $2
	*($4 + [72]) = (int_64)7035937925206713216
	*($4 + [80]) = $10
	*($4 + [64]) = *($0)
	*(($8 = CALL _Znwj([16]))) = $6
	*($8 + [8]) = $7
	*(($4 + [108])) = [0]
	$3 = ($8 + [16])
	*(($4 + [96])) = $3
	*(($4 + [92])) = $3
	*($4 + [88]) = $8
	*($4 + [100 align=4]) = (int_64)0
	CALL $28(($4 + [100]), [32])
	$8 = *((($4 + [72]) + [32]))
	$3 = *($4 + [100])
	*($4 + [132]) = $3
	*($4 + [128]) = $3
	*($4 + [136]) = $8
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [40])
	CALL $57(($4 + [120]), ($4 + [112]))
	CALL $30(($4 + [128]), ($4 + [72]))
	$8 = *($4 + [128])
	CALL send_inline($8, (*($4 + [132]) - $8))
	$8 = *($4 + [128])
	if ( ($8 == 0) ){ goto $label$16 }
	*($4 + [132]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	$8 = *($4 + [100])
	if ( ($8 == 0) ){ goto $label$17 }
	*(($4 + [104])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$17
	$8 = *($4 + [88])
	if ( ($8 == 0) ){ goto $label$4 }
	*(($4 + [92])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [304])
	$global$0 = $4
	$5 = ((uint_64)$2 / (uint_64)(int_64)10000000)
	*($4 + [152]) = $5
	$6 = ((uint_64)$2 % (uint_64)(int_64)10)
	*($4 + [144]) = ((int_64)$6 != (int_64)0)
	$7 = ((uint_64)$2 % (uint_64)(int_64)1000000)
	*($4 + [147]) = ((uint_64)$7 > (uint_64)(int_64)99999)
	$8 = ((uint_64)$2 % (uint_64)(int_64)1000)
	*($4 + [145]) = ((uint_64)((int_64)$8 + (int_64)-880) > (uint_64)(int_64)9)
	$9 = ((uint_64)$2 % (uint_64)(int_64)100000)
	*($4 + [146]) = ((uint_64)((int_64)$9 + (int_64)-88000) > (uint_64)(int_64)999)
	$2 = (int_64)
	*($4 + [148]) = ((uint_64)$2($2 - ((int_64)$5 * (int_64)10000000))) > (uint_64)(int_64)999999)
	*($4 + [104]) = ((uint_64)$8 / (uint_64)(int_64)10)
	*($4 + [96]) = $6
	*($4 + [112]) = ((uint_64)$9 / (uint_64)(int_64)1000)
	*($4 + [120]) = ((uint_64)$7 / (uint_64)(int_64)100000)
	*($4 + [128]) = ((uint_64)$2 / (uint_64)(int_64)1000000)
	*($4 + [136]) = $5
	*($4 + [88]) = ((uint_64)$3 / (uint_64)$5)
	$10 = [0]
	*((($4 + [48]) + [32])) = [0]
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	$2 = *($0)
	*($4 + [48]) = $2
	*($4 + [56]) = $2
	$11 = [0]
	$12 = CALL db_find_i64($2, $2, (int_64)-3778232674229180112, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $23(($4 + [48]), $12)
	CALL eosio_assert(((int_32)*($11 + [68]) == (int_32)($4 + [48])), [9833])
	
.LABEL $label$1
	$12 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($12, [8803])
	$2 = *($0)
	*($4 + [164]) = ($4 + [96])
	*($4 + [160]) = ($4 + [144])
	*($4 + [168]) = ($4 + [88])
	CALL eosio_assert($12, [9642])
	CALL $55(($4 + [48]), $11, $2, ($4 + [160]))
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$2 = *($0)
	*($4 + [8]) = $2
	*($4 + [16]) = $2
	$12 = CALL db_find_i64($2, $2, (int_64)7035924439720001536, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $21(($4 + [8]), $12)
	CALL eosio_assert(((int_32)*($10 + [116]) == (int_32)($4 + [8])), [9833])
	
.LABEL $label$2
	$13 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($13, [8674])
	$12 = *($11 + [8])
	$2 = *($12)
	if ( (*($10 + [112]) == 0) ){ goto $label$6 }
	$5 = *($0)
	$1 = *($12 + [16])
	$3 = *($12 + [8])
	CALL eosio_assert($13, [9642])
	CALL eosio_assert(((int_32)*($10 + [116]) == (int_32)($4 + [8])), [9677])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$4()), [9723])
	$11 = *(($11 + [8]))
	$2 = ((int_64)((int_64)$1 + (int_64)((int_64)$3 + (int_64)$2)) * (int_64)100)
	$1 = ((uint_64)$2 / (uint_64)*($11))
	*($10 + [64]) = (int_64))($1 - ((uint_64)$1 / (uint_64)(int_64)10))
	$1 = ((uint_64)$2 / (uint_64)*($11 + [8]))
	*($10 + [72]) = (int_64))($1 - ((uint_64)$1 / (uint_64)(int_64)10))
	$2 = ((uint_64)$2 / (uint_64)*($11 + [16]))
	*($10 + [80]) = (int_64))($2 - ((uint_64)$2 / (uint_64)(int_64)10))
	$2 = *($10)
	CALL eosio_assert([1], [9774])
	*($4 + [296]) = (($4 + [160]) + [114])
	*($4 + [292]) = ($4 + [160])
	*($4 + [288]) = ($4 + [160])
	CALL $10(($4 + [288]), $10)
	CALL db_update_i64(*($10 + [120]), $5, ($4 + [160]), [114])
	$10 = ($4 + [24])
	if ( (uint_64)($2 <= *($10)) ){ goto $label$5 }
	*($10) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$0 = *($4 + [32])
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	if ( (int_64)($2 == 0) ){ goto $label$5 }
	$5 = *($12 + [8])
	if ( (int_64)($5 == 0) ){ goto $label$5 }
	$3 = *($12 + [16])
	if ( (int_64)($3 == 0) ){ goto $label$5 }
	$2 = ((int_64)((int_64)((int_64)$5 + (int_64)$2) + (int_64)$3) * (int_64)100)
	if ( (uint_64)(((uint_64)$2 / (uint_64)CALL $56($0, $1)) <= (int_64)31) ){ goto $label$5 }
	$5 = *($0)
	CALL eosio_assert($13, [9642])
	CALL eosio_assert(((int_32)*($10 + [116]) == (int_32)($4 + [8])), [9677])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$4()), [9723])
	$11 = *(($11 + [8]))
	$1 = ((uint_64)$2 / (uint_64)*($11))
	*($10 + [64]) = (int_64))($1 - ((uint_64)$1 / (uint_64)(int_64)10))
	$1 = ((uint_64)$2 / (uint_64)*($11 + [8]))
	*($10 + [72]) = (int_64))($1 - ((uint_64)$1 / (uint_64)(int_64)10))
	*($10 + [112]) = [1]
	$2 = ((uint_64)$2 / (uint_64)*($11 + [16]))
	*($10 + [80]) = (int_64))($2 - ((uint_64)$2 / (uint_64)(int_64)10))
	$2 = *($10)
	CALL eosio_assert([1], [9774])
	*($4 + [296]) = (($4 + [160]) + [114])
	*($4 + [292]) = ($4 + [160])
	*($4 + [288]) = ($4 + [160])
	CALL $10(($4 + [288]), $10)
	CALL db_update_i64(*($10 + [120]), $5, ($4 + [160]), [114])
	$10 = ($4 + [24])
	if ( (uint_64)($2 <= *($10)) ){ goto $label$5 }
	*($10) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$0 = *($4 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$12 = ($4 + [36])
	$10 = *($12)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$10 = ($10 + [-24])
	$11 = *($10)
	*($10) = [0]
	if ( ($11 == 0) ){ goto $label$10 }
	CALL _ZdlPv($11)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$9 }
	$10 = *(($4 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$10 = $0
	
.LABEL $label$7
	*($12) = $0
	CALL _ZdlPv($10)
	
.LABEL $label$3
	CALL $14(($4 + [72]))
	$global$0 = ($4 + [304])
}

void .FUNC $47 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [256])
	$global$0 = $2
	CALL eosio_assert(CALL $fimport$10($1), [8478])
	CALL require_auth($1)
	$3 = [0]
	*((($2 + [184]) + [32])) = [0]
	*($2 + [200]) = (int_64)-1
	$4 = *($0)
	*($2 + [184]) = $4
	*($2 + [192]) = $4
	*($2 + [208]) = (int_64)0
	$5 = [0]
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)7035937819507087360, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $2(($2 + [184]), $6)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8352])
	*((($2 + [144]) + [32])) = [0]
	*($2 + [160]) = (int_64)-1
	*($2 + [168]) = (int_64)0
	$4 = *($0)
	*($2 + [144]) = $4
	*($2 + [152]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-6030912134838419456, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $34(($2 + [144]), $5)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($2 + [144])), [9833])
	
.LABEL $label$2
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [8590])
	$4 = CALL $35($0, $1)
	CALL eosio_assert(((int_64)$4 != (int_64)0), [8612])
	$7 = *($3 + [8])
	CALL eosio_assert(((uint_64)$4 >= (uint_64)$7), [8964])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($4 - $7)) != (int_64)0), [8628])
	$7 = *($0)
	CALL eosio_assert($5, [9642])
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($2 + [144])), [9677])
	CALL eosio_assert(((int_64)*($2 + [144]) == (int_64)CALL $fimport$4()), [9723])
	*($3 + [8]) = $4
	$4 = *($3)
	CALL eosio_assert([1], [9774])
	CALL eosio_assert([1], [9238])
	CALL memcpy(($2 + [48]), $3, [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($2 + [48]) | [8]), ($3 + [8]), [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($2 + [48]) + [16]), ($3 + [16]), [8])
	CALL db_update_i64(*($3 + [28]), $7, ($2 + [48]), [24])
	$3 = (($2 + [144]) + [16])
	if ( (uint_64)($4 <= *($3)) ){ goto $label$3 }
	*($3) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$3 = CALL $133([8546])
	if ( ($3 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [9046])
	goto $label$6 
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = (int_64)0
	
.LOOP $label$8:
	$5 = *(($3 + [8545]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [9091])
	
.LABEL $label$9
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$5
	$7 = (int_64)0
	
.LABEL $label$4
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9144])
	$4 = ((int_64)$7 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$4 = $7
	$5 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$4 = $7
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $5 ){ goto $label$14 }
	$5 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$5 = [0]
	
.LABEL $label$10
	CALL eosio_assert($5, [9193])
	$4 = *($0)
	*($2 + [108]) = [6]
	*($2 + [104]) = [9213]
	*($2 + [24]) = *($2 + [104])
	$7 = *(CALL $27(($2 + [48]), ($2 + [24])))
	*($2 + [108]) = [11]
	*($2 + [104]) = [9219]
	*($2 + [16]) = *($2 + [104])
	$10 = *(CALL $27(($2 + [48]), ($2 + [16])))
	*($2 + [104]) = [9230]
	*($2 + [108]) = [8]
	*($2 + [8]) = *($2 + [104])
	$11 = *(CALL $27(($2 + [48]), ($2 + [8])))
	*((($2 + [32]) + [8])) = [0]
	*($2 + [32]) = (int_64)0
	$3 = CALL $133([8658])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$24 }
	*($2 + [32]) = ($3 << [1])
	$5 = (($2 + [32]) | [1])
	if ( $3 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [32]) = ($6 | [1])
	*($2 + [40]) = $5
	*($2 + [36]) = $3
	
.LABEL $label$23
	CALL memcpy($5, [8658], $3)
	
.LABEL $label$22
	*(($5 + $3)) = [0]
	*((($2 + [48]) + [24])) = $9
	$3 = ($2 + [40])
	*(($2 + [88])) = *($3)
	*($3) = [0]
	*($2 + [56]) = $1
	*($2 + [64]) = $8
	*($2 + [104]) = $10
	*($2 + [112]) = $11
	*($2 + [48]) = *($0)
	*($2 + [80]) = *($2 + [32])
	*($2 + [32]) = (int_64)0
	*(($3 = CALL _Znwj([16]))) = $4
	*($3 + [8]) = $7
	*((($2 + [104]) + [36])) = [0]
	$5 = ($3 + [16])
	*((($2 + [104]) + [24])) = $5
	*(($2 + [124])) = $5
	*($2 + [120]) = $3
	*($2 + [132 align=4]) = (int_64)0
	$3 = *($2 + [80])
	$5 = ( *((($2 + [48]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [32])
	$4 = (CASTING uint_64)(uint_32 $5)
	$5 = ($2 + [132])
	
.LOOP $label$25:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$25 }
	if ( ($3 == 0) ){ goto $label$27 }
	CALL $28($5, $3)
	$5 = *(($2 + [136]))
	$3 = *(($2 + [132]))
	goto $label$26 
	
.LABEL $label$27
	$5 = [0]
	$3 = [0]
	
.LABEL $label$26
	*($2 + [244]) = $3
	*($2 + [240]) = $3
	*($2 + [248]) = $5
	*($2 + [224]) = ($2 + [240])
	*($2 + [232]) = ($2 + [48])
	CALL $29(($2 + [232]), ($2 + [224]))
	CALL $30(($2 + [240]), ($2 + [104]))
	$3 = *($2 + [240])
	CALL send_inline($3, (*($2 + [244]) - $3))
	$3 = *($2 + [240])
	if ( ($3 == 0) ){ goto $label$28 }
	*($2 + [244]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$3 = *($2 + [132])
	if ( ($3 == 0) ){ goto $label$29 }
	*(($2 + [136])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$29
	$3 = *($2 + [120])
	if ( ($3 == 0) ){ goto $label$30 }
	*(($2 + [124])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$30
	if ( (*(($2 + [80])) & [1]) ){ goto $label$32 }
	if ( (*($2 + [32]) & [1]) ){ goto $label$31 }
	goto $label$20 
	
.LABEL $label$32
	CALL _ZdlPv(*(($2 + [88])))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$31
	CALL _ZdlPv(*(($2 + [40])))
	$6 = *($2 + [168])
	if ( $6 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	CALL $109(($2 + [32]))
	
.LABEL $label$20
	$6 = *($2 + [168])
	if ( ($6 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$0 = ($2 + [172])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$33:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$34 }
	CALL _ZdlPv($5)
	
.LABEL $label$34
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$33 }
	$3 = *(($2 + [168]))
	*($0) = $6
	CALL _ZdlPv($3)
	$6 = *($2 + [208])
	if ( $6 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$6 = *($2 + [208])
	if ( ($6 == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	*($0) = $6
	CALL _ZdlPv($6)
	$6 = *($2 + [208])
	if ( ($6 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$0 = ($2 + [212])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$36 }
	
.LOOP $label$37:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$38 }
	CALL _ZdlPv($5)
	
.LABEL $label$38
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$37 }
	$3 = *(($2 + [208]))
	goto $label$35 
	
.LABEL $label$36
	$3 = $6
	
.LABEL $label$35
	*($0) = $6
	CALL _ZdlPv($3)
	$global$0 = ($2 + [256])
	return 
	
.LABEL $label$15
	$global$0 = ($2 + [256])
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9677])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9723])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	$6 = *($3)
	*($1 + [32]) = ((int_64)*($6) + (int_64)*($1 + [32]))
	$7 = *(($3 + [8]))
	$8 = *($1)
	$9 = *(*(($3 + [4])))
	if ( ((int_64)$9 == (int_64)1) ){ goto $label$3 }
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$2 }
	$3 = ($1 + [88])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [96])
	goto $label$1 
	
.LABEL $label$2
	$3 = ($1 + [104])
	
.LABEL $label$1
	*($3) = ((int_64)((uint_64)((int_64)*($7) * (int_64)*($6)) / (uint_64)(int_64)100) + (int_64)*($3))
	CALL eosio_assert([1], [9774])
	$4 = $4
	$3 = ($4 + [-128])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-14])
	CALL $10($5, $1)
	CALL db_update_i64(*($1 + [120]), $2, $3, [114])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $91($6, $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = $6
	$7 = *(*(CALL $92(($3 + [8])) + [4]) + [8])
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9433])
	*($1 + [8]) = *(($6 + [16]))
	*($1 + [16]) = *(*($4 + [8]) + [8])
	*($1 + [24]) = *(*($4 + [12]))
	*($1 + [32]) = *(*($4 + [16]))
	*($1 + [40]) = *(*($4 + [20]))
	*($1 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = $2
	$4 = ($6 + [-64])
	$global$0 = $4
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($6 + [-8])
	CALL $93(($3 + [8]), $1)
	$7 = *($1 + [8])
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)4229443000054317056, *(*($0 + [8])), $7, $4, [56])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$3 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = ($1 + [8])
	$7 = *($4)
	$5 = ($5 + [8])
	$9 = *($5)
	$0 = *(($0 + [8]))
	$10 = *($0)
	*($3 + [24]) = *($1)
	*($1 + [64]) = CALL db_idx64_store($9, (int_64)4229443000054317056, $10, $7, ($3 + [24]))
	$7 = *($4)
	$9 = *($0)
	$10 = *($5)
	*($3 + [24]) = *(($1 + [16]))
	*(($1 + [68])) = CALL db_idx64_store($10, (int_64)4229443000054317057, $9, $7, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $124 (int_32 $0)
{
}

int_32 .FUNC $128 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $126($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [256])
	$global$0 = $2
	*(($2 + [88])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$3 = *($0)
	*($2 + [56]) = $3
	*($2 + [64]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-7948142508041568256, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $3(($2 + [56]), $5)
	CALL eosio_assert(((int_32)*($4 + [100]) == (int_32)($2 + [56])), [9833])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8867])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$2 }
	*(($2 + [128])) = [0]
	*($2 + [112]) = (int_64)-1
	$3 = *($0)
	*($2 + [96]) = $3
	*($2 + [104]) = $3
	*($2 + [120]) = (int_64)0
	$5 = [0]
	$6 = CALL db_lowerbound_i64($3, $3, (int_64)7035937819507087360, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $2(($2 + [96]), $6)
	
.LABEL $label$3
	$1 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9642])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($2 + [96])), [9677])
	CALL eosio_assert(((int_64)*($2 + [96]) == (int_64)CALL $fimport$4()), [9723])
	*($5 + [8]) = *($4)
	$3 = *($5)
	CALL eosio_assert([1], [9774])
	CALL eosio_assert([1], [9238])
	CALL memcpy(($2 + [16]), $5, [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($2 + [16]) | [8]), ($5 + [8]), [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($2 + [16]) + [16]), ($5 + [16]), [8])
	CALL db_update_i64(*($5 + [28]), $1, ($2 + [16]), [24])
	$5 = (($2 + [96]) + [16])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$4 }
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$7 = *($2 + [120])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($2 + [124])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	CALL _ZdlPv($6)
	
.LABEL $label$8
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($2 + [120]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $7
	
.LABEL $label$5
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$2
	*(($8 = ($2 + [48]))) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$4()), [9591])
	*(($5 = CALL _Znwj([128])) + [112]) = [0]
	*($5 + [116]) = ($2 + [16])
	*($5 + [16]) = (int_64)1000
	*($5) = *($4)
	*($5 + [8]) = *(($4 + [56]))
	*($2 + [232]) = (($2 + [96]) + [114])
	*($2 + [228]) = ($2 + [96])
	*($2 + [224]) = ($2 + [96])
	CALL $10(($2 + [224]), $5)
	$1 = *($5)
	$7 = CALL db_store_i64(*($2 + [24]), (int_64)7035924439720001536, $3, $1, ($2 + [96]), [114])
	*($5 + [120]) = $7
	if ( (uint_64)($1 <= *($2 + [32])) ){ goto $label$9 }
	*(($2 + [32])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($2 + [224]) = $5
	$3 = *($5)
	*($2 + [96]) = $3
	*($2 + [248]) = $7
	$9 = ($2 + [44])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*($8)) ){ goto $label$12 }
	*($6 + [8]) = $3
	*($6 + [16]) = $7
	*($2 + [224]) = [0]
	*($6) = $5
	*($9) = ($6 + [24])
	$5 = *($2 + [224])
	$6 = [0]
	*($2 + [224]) = [0]
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $11(($2 + [40]), ($2 + [224]), ($2 + [96]), ($2 + [248]))
	$5 = *($2 + [224])
	$6 = [0]
	*($2 + [224]) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($5)
	
.LABEL $label$10
	*(($7 = ($2 + [128]))) = $6
	*($2 + [112]) = (int_64)-1
	*($2 + [120]) = (int_64)0
	$3 = *($0)
	*($2 + [96]) = $3
	*($2 + [104]) = $3
	*($2 + [8]) = $4
	*($2 + [248]) = $3
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$4()), [9591])
	*($2 + [228]) = ($2 + [8])
	*($2 + [224]) = ($2 + [96])
	*($2 + [232]) = ($2 + [248])
	*(($5 = CALL _Znwj([80])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = $6
	*($5 + [68]) = ($2 + [96])
	CALL $12(($2 + [224]), $5)
	*($2 + [240]) = $5
	$3 = *($5)
	*($2 + [224]) = $3
	$4 = *($5 + [72])
	*($2 + [220]) = $4
	$0 = ($2 + [124])
	$6 = *($0)
	if ( ((uint_32)$6 >= (uint_32)*($7)) ){ goto $label$15 }
	*($6 + [8]) = $3
	*($6 + [16]) = $4
	*($2 + [240]) = [0]
	*($6) = $5
	*($0) = ($6 + [24])
	$5 = *($2 + [240])
	*($2 + [240]) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	CALL $13(($2 + [120]), ($2 + [240]), ($2 + [224]), ($2 + [220]))
	$5 = *($2 + [240])
	*($2 + [240]) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = *($5 + [56])
	if ( ($6 == 0) ){ goto $label$16 }
	*(($5 + [60])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$6 = *($5 + [44])
	if ( ($6 == 0) ){ goto $label$17 }
	*(($5 + [48])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$6 = *($5 + [32])
	if ( ($6 == 0) ){ goto $label$18 }
	*(($5 + [36])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$6 = *($5 + [20])
	if ( ($6 == 0) ){ goto $label$19 }
	*(($5 + [24])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$6 = *($5 + [8])
	if ( ($6 == 0) ){ goto $label$20 }
	*(($5 + [12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$20
	CALL _ZdlPv($5)
	
.LABEL $label$13
	CALL $14((($2 + [96]) + [24]))
	$7 = *($2 + [40])
	if ( ($7 == 0) ){ goto $label$21 }
	$4 = ($2 + [44])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$25 }
	CALL _ZdlPv($6)
	
.LABEL $label$25
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($2 + [40]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $7
	
.LABEL $label$22
	*($4) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$21
	CALL $9((($2 + [56]) + [24]))
	$global$0 = ($2 + [256])
}

int_32 .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $79(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [104]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9543])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-7948142508041568256)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9489])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9489])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $3(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	CALL $112(($1 + [8]), *($3 + [4]))
	CALL $112(($1 + [20]), *($3 + [8]))
	CALL $112(($1 + [32]), *($3 + [12]))
	CALL $112(($1 + [44]), *($3 + [16]))
	*($1 + [56]) = *(*($3 + [20]))
	*(($3 = $2)) = [0]
	CALL $80($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $136($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $81($3, $1)
	$6 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($4 + [8]), (int_64)-7948142508041568256, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $139($2)
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9405])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9428])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9428])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9428])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9405])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [96]) = [0]
	*($5 + [100]) = $0
	CALL $77(($3 + [32]), $5)
	*($5 + [104]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [44]) & [1]) ){ goto $label$16 }
	if ( (*($1 + [32]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [40])))
	$4 = [1]
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = [1]
	if ( (*($1 + [20]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($1 + [8]) & $4) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [28])))
	if ( ((*($1 + [8]) & $4) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [176])
	$global$0 = $6
	*($6 + [96]) = $5
	CALL require_auth(*($0))
	CALL eosio_assert((uint_64)(((int_64)((uint_64)CALL $fimport$1() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= $5), [8192])
	*((($6 + [56]) + [32])) = [0]
	*($6 + [72]) = (int_64)-1
	$5 = *($0)
	*($6 + [56]) = $5
	*($6 + [64]) = $5
	$7 = (int_64)0
	*($6 + [80]) = (int_64)0
	$8 = [1]
	$9 = [1]
	$10 = CALL db_lowerbound_i64($5, $5, (int_64)7035937819507087360, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	CALL $2(($6 + [56]), $10)
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8235])
	*((($6 + [16]) + [32])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$5 = *($0)
	*($6 + [16]) = $5
	*($6 + [24]) = $5
	$9 = CALL db_lowerbound_i64($5, $5, (int_64)-7948142508041568256, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	CALL $3(($6 + [16]), $9)
	*($6 + [148]) = [0]
	*($6 + [144]) = ($6 + [16])
	$5 = *(*(CALL $4(($6 + [144])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$8 = (uint_64)($7 <= (int_64)-2)
	
.LABEL $label$2
	*(($9 = ($6 + [32]))) = $7
	CALL eosio_assert($8, [9433])
	*($6 + [8]) = *($9)
	$5 = *($0)
	*($6 + [148]) = $1
	*($6 + [152]) = $2
	*($6 + [156]) = $3
	*($6 + [160]) = $4
	*($6 + [144]) = ($6 + [8])
	*($6 + [164]) = ($6 + [96])
	*($6 + [136]) = $5
	CALL eosio_assert(((int_64)*($6 + [16]) == (int_64)CALL $fimport$4()), [9591])
	*($6 + [116]) = ($6 + [144])
	*($6 + [112]) = ($6 + [16])
	*($6 + [120]) = ($6 + [136])
	*(($8 = CALL _Znwj([112])) + [8 align=4]) = (int_64)0
	*($8 + [16 align=4]) = (int_64)0
	*($8 + [24 align=4]) = (int_64)0
	*($8 + [32 align=4]) = (int_64)0
	*($8 + [40 align=4]) = (int_64)0
	*($8 + [48 align=4]) = (int_64)0
	*($8 + [96]) = [0]
	*($8 + [100]) = ($6 + [16])
	CALL $5(($6 + [112]), $8)
	*($6 + [128]) = $8
	$5 = *($8)
	*($6 + [112]) = $5
	$1 = *($8 + [104])
	*($6 + [108]) = $1
	$2 = ($6 + [44])
	$9 = *($2)
	if ( ((uint_32)$9 >= (uint_32)*(($6 + [48]))) ){ goto $label$5 }
	*($9 + [8]) = $5
	*($9 + [16]) = $1
	*($6 + [128]) = [0]
	*($9) = $8
	*($2) = ($9 + [24])
	$8 = *($6 + [128])
	*($6 + [128]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL $6(($6 + [40]), ($6 + [128]), ($6 + [112]), ($6 + [108]))
	$8 = *($6 + [128])
	*($6 + [128]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($8 + [44]) & [1]) ){ goto $label$12 }
	if ( (*($8 + [32]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($8 + [52])))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($8 + [40])))
	$9 = [1]
	if ( ((*($8 + [20]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$9 = [1]
	if ( (*($8 + [20]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((*($8 + [8]) & $9) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL _ZdlPv(*(($8 + [28])))
	if ( ((*($8 + [8]) & $9) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($8 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($8)
	
.LABEL $label$3
	$7 = *($0)
	CALL eosio_assert(((int_64)*($6 + [56]) == (int_64)CALL $fimport$4()), [9591])
	*(($8 = CALL _Znwj([40])) + [24]) = ($6 + [56])
	*($8) = (int_64)0
	*($8 + [8]) = *($6 + [8])
	*($8 + [16]) = *($6 + [96])
	CALL eosio_assert([1], [9238])
	CALL memcpy(($6 + [144]), $8, [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($6 + [144]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($6 + [144]) + [16]), ($8 + [16]), [8])
	$5 = *($8)
	$1 = CALL db_store_i64(*((($6 + [56]) + [8])), (int_64)7035937819507087360, $7, $5, ($6 + [144]), [24])
	*($8 + [28]) = $1
	$9 = (($6 + [56]) + [16])
	if ( (uint_64)($5 <= *($9)) ){ goto $label$13 }
	*($9) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($6 + [112]) = $8
	$5 = *($8)
	*($6 + [144]) = $5
	*($6 + [136]) = $1
	$2 = ($6 + [84])
	$9 = *($2)
	if ( ((uint_32)$9 >= (uint_32)*(($6 + [88]))) ){ goto $label$16 }
	*($9 + [8]) = $5
	*($9 + [16]) = $1
	*($6 + [112]) = [0]
	*($9) = $8
	*($2) = ($9 + [24])
	$8 = *($6 + [112])
	*($6 + [112]) = [0]
	if ( $8 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $7(($6 + [80]), ($6 + [112]), ($6 + [144]), ($6 + [136]))
	$8 = *($6 + [112])
	*($6 + [112]) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($8)
	
.LABEL $label$14
	CALL $8($0, *($6 + [8]))
	CALL $9(($6 + [40]))
	$9 = *($6 + [80])
	if ( ($9 == 0) ){ goto $label$17 }
	$1 = ($6 + [84])
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$19 }
	
.LOOP $label$20:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$21 }
	CALL _ZdlPv($0)
	
.LABEL $label$21
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$20 }
	$8 = *(($6 + [80]))
	goto $label$18 
	
.LABEL $label$19
	$8 = $9
	
.LABEL $label$18
	*($1) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$17
	$global$0 = ($6 + [176])
}

int_32 .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [56])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [60])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($3 + [44])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($3 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$4 = *($3 + [20])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($3 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [160])
	$global$0 = $6
	*($6 + [88]) = $5
	CALL require_auth(*($0))
	*((($6 + [48]) + [32])) = [0]
	*($6 + [64]) = (int_64)-1
	$7 = *($0)
	*($6 + [48]) = $7
	*($6 + [56]) = $7
	*($6 + [72]) = (int_64)0
	$8 = [0]
	$9 = CALL db_lowerbound_i64($7, $7, (int_64)7035937819507087360, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $2(($6 + [48]), $9)
	$5 = *($6 + [88])
	
.LABEL $label$1
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [8352])
	CALL eosio_assert(((uint_64)$5 > (uint_64)*($8 + [16])), [8373])
	*(($10 = (($6 + [8]) + [32]))) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$7 = *($0)
	*($6 + [8]) = $7
	*($6 + [16]) = $7
	*($6 + [100]) = $1
	*($6 + [104]) = $2
	*($6 + [108]) = $3
	*($6 + [112]) = $4
	*($6 + [96]) = ($6 + [8])
	*($6 + [116]) = ($6 + [88])
	*($6 + [152]) = $7
	CALL eosio_assert(((int_64)$7 == (int_64)CALL $fimport$4()), [9591])
	*($6 + [132]) = ($6 + [96])
	*($6 + [128]) = ($6 + [8])
	*($6 + [136]) = ($6 + [152])
	*(($1 = CALL _Znwj([112])) + [8 align=4]) = (int_64)0
	*($1 + [16 align=4]) = (int_64)0
	*($1 + [24 align=4]) = (int_64)0
	*($1 + [32 align=4]) = (int_64)0
	*($1 + [40 align=4]) = (int_64)0
	*($1 + [48 align=4]) = (int_64)0
	*($1 + [96]) = [0]
	*($1 + [100]) = ($6 + [8])
	CALL $16(($6 + [128]), $1)
	*($6 + [144]) = $1
	$7 = *($1)
	*($6 + [128]) = $7
	$3 = *($1 + [104])
	*($6 + [124]) = $3
	$4 = ($6 + [36])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)*($10)) ){ goto $label$3 }
	*($2 + [8]) = $7
	*($2 + [16]) = $3
	*($6 + [144]) = [0]
	*($2) = $1
	*($4) = ($2 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $6(($6 + [32]), ($6 + [144]), ($6 + [128]), ($6 + [124]))
	
.LABEL $label$2
	$2 = ($8 + [16])
	$1 = *($6 + [144])
	*($6 + [144]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	if ( (*($1 + [44]) & [1]) ){ goto $label$11 }
	if ( (*($1 + [32]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($1 + [40])))
	$3 = [1]
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = [1]
	if ( (*($1 + [20]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($1 + [8]) & $3) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [28])))
	if ( ((*($1 + [8]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert($9, [9642])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($6 + [48])), [9677])
	CALL eosio_assert(((int_64)*($6 + [48]) == (int_64)CALL $fimport$4()), [9723])
	*(($8 + [16])) = *($6 + [88])
	$7 = *($8)
	CALL eosio_assert([1], [9774])
	CALL eosio_assert([1], [9238])
	CALL memcpy(($6 + [96]), $8, [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($6 + [96]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($6 + [96]) + [16]), $2, [8])
	CALL db_update_i64(*($8 + [28]), $5, ($6 + [96]), [24])
	$1 = (($6 + [48]) + [16])
	if ( (uint_64)($7 <= *($1)) ){ goto $label$12 }
	*($1) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	CALL $9((($6 + [8]) + [24]))
	$0 = *($6 + [72])
	if ( ($0 == 0) ){ goto $label$13 }
	$2 = ($6 + [76])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($1 + [-24])
	$8 = *($1)
	*($1) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	CALL _ZdlPv($8)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$16 }
	$1 = *(($6 + [72]))
	goto $label$14 
	
.LABEL $label$15
	$1 = $0
	
.LABEL $label$14
	*($2) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$global$0 = ($6 + [160])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-7948142508041568256, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $3($6, $8)
	*($3 + [4]) = [0]
	*($3) = $6
	$7 = *(*(CALL $4($3) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9433])
	*($1) = *(($6 + [16]))
	CALL $112(($1 + [8]), *($5 + [4]))
	CALL $112(($1 + [20]), *($5 + [8]))
	CALL $112(($1 + [32]), *($5 + [12]))
	CALL $112(($1 + [44]), *($5 + [16]))
	*($1 + [56]) = *(*($5 + [20]))
	*($3) = [0]
	CALL $80($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$5 = CALL $136($6)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $6)
	CALL $81($3, $1)
	$7 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($4 + [8]), (int_64)-7948142508041568256, *(*($0 + [8])), $7, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $139($5)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$7 = ($global$0 - [112])
	$global$0 = $7
	*($7 + [104]) = $6
	CALL require_auth(*($0))
	$8 = [0]
	*((($7 + [64]) + [32])) = [0]
	*($7 + [80]) = (int_64)-1
	$6 = *($0)
	*($7 + [64]) = $6
	*($7 + [72]) = $6
	*($7 + [88]) = (int_64)0
	$9 = [0]
	$10 = CALL db_lowerbound_i64($6, $6, (int_64)7035937819507087360, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $2(($7 + [64]), $10)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8352])
	CALL eosio_assert(((uint_64)*($9 + [8]) <= (uint_64)$1), [8408])
	*((($7 + [24]) + [32])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$6 = *($0)
	*($7 + [24]) = $6
	*($7 + [32]) = $6
	$9 = CALL db_find_i64($6, $6, (int_64)-7948142508041568256, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $3(($7 + [24]), $9)
	CALL eosio_assert(((int_32)*($8 + [100]) == (int_32)($7 + [24])), [9833])
	
.LABEL $label$2
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [8435])
	$6 = *($0)
	*($7 + [4]) = $3
	*($7) = $2
	*($7 + [8]) = $4
	*($7 + [12]) = $5
	*($7 + [16]) = ($7 + [104])
	CALL eosio_assert($9, [9642])
	CALL $18(($7 + [24]), $8, $6, $7)
	CALL $9(($7 + [48]))
	$9 = *($7 + [88])
	if ( ($9 == 0) ){ goto $label$3 }
	$2 = ($7 + [92])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$7 }
	CALL _ZdlPv($8)
	
.LABEL $label$7
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [88]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $9
	
.LABEL $label$4
	*($2) = $9
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($7 + [112])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [14]) = *($1 + [112])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9238])
	CALL memcpy(*($0 + [4]), ($2 + [14]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [113])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9238])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($1) = *(*(*($0 + [4])))
	$3 = *($0)
	*(($5 = (($4 = $2) + [24]))) = *([0] + [9904])
	*((($4 + [8]) + [8])) = *([0] + [9896])
	*($4 + [8]) = *([0] + [9888])
	$6 = ($1 + [8])
	CALL $97($6, ($4 + [8]), ($4 + [32]))
	CALL memcpy(($4 + [8]), [9912], [80])
	$7 = ($1 + [20])
	CALL $97($7, ($4 + [8]), (($4 + [8]) + [80]))
	CALL memcpy(($4 + [8]), [9992], [88])
	$8 = ($1 + [32])
	CALL $97($8, ($4 + [8]), (($4 + [8]) + [88]))
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = (int_64)0
	$9 = ($1 + [44])
	CALL $97($9, ($4 + [8]), $5)
	CALL memcpy(($4 + [8]), [10080], [72])
	$10 = ($1 + [56])
	CALL $97($10, ($4 + [8]), (($4 + [8]) + [72]))
	*($4 + [8]) = [0]
	CALL $95(($4 + [8]), $1)
	$5 = *($4 + [8])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $136($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [9238])
	CALL memcpy($2, $1, [8])
	*($4 + [12]) = ($2 + [8])
	CALL $96(CALL $96(CALL $96(CALL $96(CALL $96(($4 + [8]), $6), $7), $8), $9), $10)
	$11 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($3 + [8]), (int_64)-3778232674229180112, *(*($0 + [8])), $11, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$11 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $139($2)
	if ( (uint_64)($11 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [96])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [96])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $90(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9238])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9238])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9238])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [100])) == (int_32)$0), [9677])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9723])
	$5 = *($1)
	CALL $112(($1 + [8]), *($3))
	CALL $112(($1 + [20]), *($3 + [4]))
	CALL $112(($1 + [32]), *($3 + [8]))
	CALL $112(($1 + [44]), *($3 + [12]))
	*($1 + [56]) = *(*($3 + [16]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9774])
	*(($3 = $4)) = [0]
	CALL $80($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $136($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $81($3, $1)
	CALL db_update_i64(*($1 + [104]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $139($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [304])
	$global$0 = $6
	*($6 + [144]) = $3
	*($6 + [152]) = $2
	*($6 + [136]) = $4
	*($6 + [128]) = $5
	CALL require_auth(*($0))
	$7 = [0]
	*((($6 + [88]) + [32])) = [0]
	*($6 + [104]) = (int_64)-1
	$5 = *($0)
	*($6 + [88]) = $5
	*($6 + [96]) = $5
	*($6 + [112]) = (int_64)0
	$8 = [0]
	$9 = CALL db_lowerbound_i64($5, $5, (int_64)7035937819507087360, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	CALL $2(($6 + [88]), $9)
	$8 = [1]
	
.LABEL $label$1
	CALL eosio_assert($8, [8352])
	*((($6 + [48]) + [32])) = [0]
	*($6 + [64]) = (int_64)-1
	*($6 + [72]) = (int_64)0
	$5 = *($0)
	*($6 + [48]) = $5
	*($6 + [56]) = $5
	$8 = CALL db_find_i64($5, $5, (int_64)-7948142508041568256, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $3(($6 + [48]), $8)
	CALL eosio_assert(((int_32)*($7 + [100]) == (int_32)($6 + [48])), [9833])
	
.LABEL $label$2
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8435])
	CALL eosio_assert(((int_32)*($7 + [96]) ^ (int_32)[1]), [8458])
	$5 = *($0)
	*($6 + [164]) = ($6 + [144])
	*($6 + [160]) = ($6 + [152])
	*($6 + [168]) = ($6 + [136])
	*($6 + [172]) = ($6 + [128])
	CALL eosio_assert($8, [9642])
	CALL $20(($6 + [48]), $7, $5, ($6 + [160]))
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$5 = *($0)
	*($6 + [8]) = $5
	*($6 + [16]) = $5
	$7 = [0]
	$8 = CALL db_find_i64($5, $5, (int_64)7035924439720001536, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $21(($6 + [8]), $8)
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)($6 + [8])), [9833])
	
.LABEL $label$3
	$4 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9642])
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)($6 + [8])), [9677])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$4()), [9723])
	*($7 + [113]) = [1]
	$5 = *($7)
	CALL eosio_assert([1], [9774])
	*($6 + [296]) = (($6 + [160]) + [114])
	*($6 + [292]) = ($6 + [160])
	*($6 + [288]) = ($6 + [160])
	CALL $10(($6 + [288]), $7)
	CALL db_update_i64(*($7 + [120]), $4, ($6 + [160]), [114])
	$7 = ($6 + [24])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$4 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	CALL $22($0, $1, *($6 + [152]), *($6 + [144]), *($6 + [136]), *($6 + [128]))
	CALL $8($0, ((int_64)$1 + (int_64)1))
	$8 = *($6 + [32])
	if ( ($8 == 0) ){ goto $label$5 }
	$9 = ($6 + [36])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	CALL _ZdlPv($7)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($6 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $8
	
.LABEL $label$6
	*($9) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$5
	CALL $9(($6 + [72]))
	$8 = *($6 + [112])
	if ( ($8 == 0) ){ goto $label$10 }
	$9 = ($6 + [116])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($6 + [112]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $8
	
.LABEL $label$11
	*($9) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$global$0 = ($6 + [304])
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$5 = ($global$0 - [80])
	$global$0 = $5
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	$7 = *($4)
	$6 = CALL $133([8984])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	if ( (CALL $115($4, [0], [-1], [8984], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert(CALL $fimport$10($1), [8478])
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [8985])
	$8 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$7 = CALL $133([8546])
	if ( ($7 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9046])
	goto $label$5 
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$2 = (int_64)0
	
.LOOP $label$7:
	$6 = *(($7 + [8545]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9091])
	
.LABEL $label$8
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$2 = (int_64)0
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$8 == (int_64)$2), [8550])
	*($5 + [52]) = [0]
	*($5 + [48]) = [9244]
	*($5 + [16]) = *($5 + [48])
	$9 = *(CALL $27(($5 + [64]), ($5 + [16])))
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$10 }
	$6 = uint_32($7 >> [1])
	$10 = ($4 + [1])
	goto $label$9 
	
.LABEL $label$10
	$6 = *(($4 + [4]))
	$10 = *($4 + [8])
	
.LABEL $label$9
	$11 = [0]
	$7 = CALL $133([9027])
	if ( ($7 == 0) ){ goto $label$11 }
	if ( ((int_32)$6 < (int_32)$7) ){ goto $label$12 }
	$12 = ($10 + $6)
	$11 = $10
	
.LOOP $label$13:
	$6 = (($6 - $7) + [1])
	if ( ($6 == 0) ){ goto $label$12 }
	$6 = CALL $131($11, [45], $6)
	if ( ($6 == 0) ){ goto $label$12 }
	if ( (CALL $132($6, [9027], $7) == 0) ){ goto $label$14 }
	$11 = ($6 + [1])
	$6 = ($12 - $11)
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$12 }
	$11 = ($6 - $10)
	goto $label$11 
	
.LABEL $label$12
	$11 = [-1]
	
.LABEL $label$11
	$6 = CALL $111(($5 + [64]), $4, [0], $11, $4)
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$15 }
	$4 = *($5 + [48])
	$11 = ($4 & [1])
	$12 = ($7 + [1])
	$7 = CALL $111(($5 + [48]), $4, ($11 + [1]), [-1], $4)
	*($5 + [32]) = ( *($7 + [8]) ? $12 : $11 )
	*($5 + [36]) = ( *($7 + [4]) ? uint_32($4 >> [1]) : $11 )
	*($5 + [8]) = *($5 + [32])
	if ( ((int_64)*(CALL $27(($5 + [40]), ($5 + [8]))) == (int_64)$1) ){ goto $label$16 }
	$4 = *($5 + [48])
	$11 = ($4 & [1])
	*($5 + [24]) = ( *(($7 + [8])) ? $12 : $11 )
	*($5 + [28]) = ( *(($7 + [4])) ? uint_32($4 >> [1]) : $11 )
	*($5) = *($5 + [24])
	$9 = *(CALL $27(($5 + [40]), $5))
	
.LABEL $label$16
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($7 + [8])))
	
.LABEL $label$15
	$2 = CALL $118($6, [0], [10])
	$8 = ((int_64)$2 + (int_64)-10000000)
	CALL eosio_assert(((uint_64)($8 <= (int_64)10000000) | (uint_64)(((int_64)$2 + (int_64)-20000000) <= (int_64)10000000)), [9029])
	$13 = ((uint_64)$2 % (uint_64)(int_64)10000000)
	if ( ((uint_64)$8 > (uint_64)(int_64)9999999) ){ goto $label$18 }
	CALL $33($0, $1, *($3), $13, $9)
	if ( (*($5 + [64]) & [1]) ){ goto $label$17 }
	goto $label$1 
	
.LABEL $label$18
	CALL $43($0, $1, ((uint_64)$13 / (uint_64)(int_64)100000), ((uint_64)$2 % (uint_64)(int_64)100000), *($3))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$17
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL memory()
	*($3 + [148]) = [11]
	*($3 + [144]) = [9219]
	*($3 + [72]) = *($3 + [144])
	CALL $27(($3 + [152]), ($3 + [72]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [148]) = [8]
	*($3 + [144]) = [9230]
	*($3 + [64]) = *($3 + [144])
	CALL $27(($3 + [152]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [1]
	*($3) = *($3 + [136])
	CALL $60($0, (int_64)6138663591592764928, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)6112268036188667903) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)6301349797961924607) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)6112268036188667904) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)6291155395238952960) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3 + [48]) = *($3 + [88])
	CALL $61($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-3075276116952737280) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)3626281041880154112) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [3]
	*($3 + [16]) = *($3 + [120])
	CALL $62($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)6301349797961924608) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)8421051917907525632) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [4]
	*($3 + [8]) = *($3 + [128])
	CALL $62($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [32]) = *($3 + [104])
	CALL $63($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [116]) = [0]
	*($3 + [112]) = [6]
	*($3 + [24]) = *($3 + [112])
	CALL $64($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [100]) = [0]
	*($3 + [96]) = [7]
	*($3 + [40]) = *($3 + [96])
	CALL $65($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [84]) = [0]
	*($3 + [80]) = [8]
	*($3 + [56]) = *($3 + [80])
	CALL $66($1, $1, ($3 + [56]))
	
.LABEL $label$1
	CALL $124([0])
	$global$0 = ($3 + [160])
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10152])
	$2 = *($0 + [4])
	$3 = *($2 + [64])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3778232685332267008, ($1 + [8]), *($2 + [8]))
	*(*(($0 + [4])) + [64]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8 + [8]) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$6), [9833])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $84($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)-3778232685332267008, $5))
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$6), [9833])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [64])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229443000054317056, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4 + [8]) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [9833])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $91($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)4229443000054317056, $6))
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [9833])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9405])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [72]) = $0
	CALL $98(($3 + [32]), $5)
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10152])
	$2 = *($0 + [4])
	$3 = *($2 + [64])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)4229443000054317056, ($1 + [8]), *($2 + [8]))
	*(*(($0 + [4])) + [64]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8 + [8]) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$6), [9833])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $91($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)4229443000054317056, $5))
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$6), [9833])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [64])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9405])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9428])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9428])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9428])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $54(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_64 .FUNC $56 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	$5 = [0]
	$0 = CALL db_find_i64($4, $4, (int_64)-3778232674229180112, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $23(($2 + [8]), $0)
	CALL eosio_assert(((int_32)*($5 + [68]) == (int_32)($2 + [8])), [9833])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8723])
	$0 = *($5 + [8])
	$6 = *(($5 + [12]))
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$2 }
	$7 = int_32(($6 - $0) >> [3])
	$3 = (int_64)0
	$6 = [0]
	
.LOOP $label$3:
	$3 = ((int_64)*($0) + (int_64)$3)
	$0 = ($0 + [8])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$3 }
	
.LABEL $label$2
	$0 = *($5 + [20])
	$6 = *(($5 + [24]))
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$4 }
	$7 = int_32(($6 - $0) >> [3])
	$6 = [0]
	
.LOOP $label$5:
	$3 = ((int_64)*($0) + (int_64)$3)
	$0 = ($0 + [8])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$5 }
	
.LABEL $label$4
	$0 = *($5 + [32])
	$6 = *(($5 + [36]))
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$6 }
	$7 = int_32(($6 - $0) >> [3])
	$6 = [0]
	
.LOOP $label$7:
	$3 = ((int_64)*($0) + (int_64)$3)
	$0 = ($0 + [8])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$7 }
	
.LABEL $label$6
	$0 = *($5 + [44])
	$6 = *(($5 + [48]))
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$8 }
	$7 = int_32(($6 - $0) >> [3])
	$6 = [0]
	
.LOOP $label$9:
	$3 = ((int_64)*($0) + (int_64)$3)
	$0 = ($0 + [8])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$9 }
	
.LABEL $label$8
	$0 = *($5 + [56])
	$6 = *(($5 + [60]))
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$10 }
	$7 = int_32(($6 - $0) >> [3])
	$6 = [0]
	
.LOOP $label$11:
	$3 = ((int_64)*($0) + (int_64)$3)
	$0 = ($0 + [8])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$11 }
	
.LABEL $label$10
	CALL $14(($2 + [32]))
	$global$0 = ($2 + [48])
	return $3
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $116 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $119($1, $0, [8895])
	CALL $120()
	(unreachable)
}

void .FUNC $117 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $119($1, $0, [8851])
	CALL $121()
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_64 .FUNC $35 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$2 = ($global$0 - [208])
	$global$0 = $2
	*($2 + [192]) = $1
	*((($2 + [152]) + [32])) = [0]
	*($2 + [168]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [176]) = (int_64)0
	$1 = *($0)
	*($2 + [152]) = $1
	*($2 + [160]) = $1
	*((($2 + [112]) + [32])) = [0]
	*($2 + [120]) = $1
	*($2 + [112]) = $1
	*($2 + [128]) = (int_64)-1
	*($2 + [136]) = (int_64)0
	*((($2 + [72]) + [32])) = [0]
	*($2 + [80]) = $1
	*($2 + [72]) = $1
	*($2 + [88]) = (int_64)-1
	*($2 + [96]) = (int_64)0
	*($2 + [108]) = [0]
	*($2 + [64]) = ($2 + [72])
	CALL $48(($2 + [16]), ($2 + [64]), ($2 + [192]))
	$4 = *($2 + [20])
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_64)*($2 + [192]) != (int_64)*($4)) ){ goto $label$4 }
	$1 = *($2 + [16])
	*($2 + [56]) = $1
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($4) == 0) ){ goto $label$3 }
	$5 = (int_64)0
	$3 = (int_64)0
	
.LOOP $label$5:
	if ( ((int_64)*($4) != (int_64)*($2 + [192])) ){ goto $label$1 }
	$6 = CALL $24(($2 + [152]), *($4 + [16]), [8945])
	if ( (*($6 + [113]) & [1]) ){ goto $label$7 }
	$1 = *($6 + [56])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	$3 = ((int_64)((uint_64)((int_64)*($4 + [24]) * (int_64)((uint_64)((int_64)((uint_64)((int_64)((uint_64)((int_64)*($6 + [24]) * (int_64)10) / (uint_64)(int_64)100) * (int_64)80) / (uint_64)(int_64)100) * (int_64)100000) / (uint_64)$1)) / (uint_64)(int_64)100000) + (int_64)$3)
	goto $label$6 
	
.LABEL $label$7
	$6 = CALL $49(($2 + [112]), *(($4 + [16])), [8945])
	$1 = *($4 + [40])
	$8 = ((uint_64)$1 / (uint_64)(int_64)10000000)
	$7 = *($4 + [24])
	$9 = ((uint_64)$7 / (uint_64)$8)
	$10 = *($6 + [8])
	$11 = ((uint_64)((uint_64)$10 % (uint_64)(int_64)10000000) / (uint_64)(int_64)1000000)
	$12 = ((uint_64)((uint_64)$10 % (uint_64)(int_64)1000000) / (uint_64)(int_64)100000)
	$13 = ((uint_64)((uint_64)$1 % (uint_64)(int_64)1000000) / (uint_64)(int_64)100000)
	$14 = ((uint_64)$10 % (uint_64)(int_64)100000)
	$15 = ((uint_64)$14 / (uint_64)(int_64)1000)
	$16 = ((uint_64)((uint_64)$1 % (uint_64)(int_64)100000) / (uint_64)(int_64)1000)
	$17 = ((uint_64)$10 % (uint_64)(int_64)1000)
	$18 = ((int_64)$17 + (int_64)-880)
	$19 = ((uint_64)$17 / (uint_64)(int_64)10)
	$20 = ((uint_64)((uint_64)$1 % (uint_64)(int_64)1000) / (uint_64)(int_64)10)
	$8 = ((uint_64)(int_64))($1 - ((int_64)$8 * (int_64)10000000)) / (uint_64)(int_64)1000000)
	$21 = *($6 + [64])
	$22 = *($6 + [56])
	$23 = *($6 + [48])
	$24 = *($6 + [40])
	$17 = *($6 + [24])
	if ( ((int_64)((uint_64)$1 % (uint_64)(int_64)10) != (int_64)((uint_64)$10 % (uint_64)(int_64)10)) ){ goto $label$8 }
	$5 = ((int_64)((uint_64)((int_64)*($6 + [32]) * (int_64)$9) / (uint_64)(int_64)100000) + (int_64)$5)
	
.LABEL $label$8
	$1 = ((int_64)$14 + (int_64)-88000)
	if ( (uint_64)($18 <= (int_64)10) ){ goto $label$9 }
	if ( ((int_64)$20 != (int_64)$19) ){ goto $label$9 }
	$5 = ((int_64)$5 + (int_64)((uint_64)((int_64)$9 * (int_64)$24) / (uint_64)(int_64)100000))
	
.LABEL $label$9
	if ( (uint_64)($1 <= (int_64)1000) ){ goto $label$10 }
	if ( ((int_64)$16 != (int_64)$15) ){ goto $label$10 }
	$5 = ((int_64)$5 + (int_64)((uint_64)((int_64)$9 * (int_64)$23) / (uint_64)(int_64)100000))
	
.LABEL $label$10
	if ( ((int_64)$13 != (int_64)$12) ){ goto $label$11 }
	$5 = ((int_64)$5 + (int_64)((uint_64)((int_64)$9 * (int_64)$22) / (uint_64)(int_64)100000))
	
.LABEL $label$11
	if ( ((int_64)$8 != (int_64)$11) ){ goto $label$12 }
	$5 = ((int_64)$5 + (int_64)((uint_64)((int_64)$9 * (int_64)$21) / (uint_64)(int_64)100000))
	
.LABEL $label$12
	$3 = ((int_64)((uint_64)((int_64)$7 * (int_64)$17) / (uint_64)(int_64)100000) + (int_64)$3)
	
.LABEL $label$6
	CALL $50(($2 + [56]))
	$4 = *($2 + [60])
	if ( $4 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	*($2 + [60]) = [0]
	*($2 + [56]) = ($2 + [64])
	goto $label$2 
	
.LABEL $label$3
	$3 = (int_64)0
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	$10 = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [52]) = [0]
	$1 = *($0)
	*($2 + [16]) = $1
	*($2 + [24]) = $1
	*($2 + [8]) = ($2 + [16])
	CALL $51(($2 + [200]), ($2 + [8]), ($2 + [192]))
	$4 = *($2 + [204])
	if ( ($4 == 0) ){ goto $label$14 }
	if ( ((int_64)*($2 + [192]) != (int_64)*($4)) ){ goto $label$14 }
	$1 = *($2 + [200])
	*($2) = $1
	$10 = (int_64)0
	$25 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($25) == 0) ){ goto $label$13 }
	$26 = ($2 + [140])
	$27 = ($2 + [136])
	$28 = ($2 + [120])
	
.LOOP $label$15:
	if ( ((int_64)*($25) != (int_64)*($2 + [192])) ){ goto $label$13 }
	$1 = *($25 + [16])
	$6 = *($26)
	$29 = *($27)
	if ( ((int_32)$29 == (int_32)$6) ){ goto $label$18 }
	
.LOOP $label$20:
	$4 = ($6 + [-24])
	$0 = *($4)
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$19 }
	$6 = $4
	if ( ((int_32)$29 != (int_32)$4) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$29 == (int_32)$6) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($0 + [72]) == (int_32)($2 + [112])), [9833])
	if ( $0 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$4 = CALL db_find_i64(*($2 + [112]), *($28), (int_64)7035937269232844800, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$16 }
	$0 = CALL $52(($2 + [112]), $4)
	CALL eosio_assert(((int_32)*($0 + [72]) == (int_32)($2 + [112])), [9833])
	
.LABEL $label$17
	if ( ((int_64)((uint_64)*($0 + [8]) % (uint_64)(int_64)10) != (int_64)((int_64)*($25 + [24]) + (int_64)1)) ){ goto $label$16 }
	$10 = ((int_64)((uint_64)((int_64)*($25 + [40]) * (int_64)*($25 + [32])) / (uint_64)(int_64)100) + (int_64)$10)
	
.LABEL $label$16
	CALL $53($2)
	$25 = *($2 + [4])
	if ( $25 ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	*($2 + [4]) = [0]
	*($2) = ($2 + [8])
	
.LABEL $label$13
	$0 = *($2 + [40])
	if ( ($0 == 0) ){ goto $label$21 }
	$29 = ($2 + [44])
	$4 = *($29)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$25 }
	CALL _ZdlPv($6)
	
.LABEL $label$25
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($2 + [40]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $0
	
.LABEL $label$22
	*($29) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$21
	$0 = *($2 + [96])
	if ( ($0 == 0) ){ goto $label$26 }
	$29 = ($2 + [100])
	$4 = *($29)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$28 }
	
.LOOP $label$29:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$30 }
	CALL _ZdlPv($6)
	
.LABEL $label$30
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$29 }
	$4 = *(($2 + [96]))
	goto $label$27 
	
.LABEL $label$28
	$4 = $0
	
.LABEL $label$27
	*($29) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$26
	$1 = ((int_64)$5 + (int_64)$3)
	$0 = *($2 + [136])
	if ( ($0 == 0) ){ goto $label$31 }
	$29 = ($2 + [140])
	$4 = *($29)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$33 }
	
.LOOP $label$34:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$35 }
	CALL _ZdlPv($6)
	
.LABEL $label$35
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$34 }
	$4 = *(($2 + [136]))
	goto $label$32 
	
.LABEL $label$33
	$4 = $0
	
.LABEL $label$32
	*($29) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$31
	$1 = ((int_64)$1 + (int_64)$10)
	$0 = *($2 + [176])
	if ( ($0 == 0) ){ goto $label$36 }
	$29 = ($2 + [180])
	$4 = *($29)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$38 }
	
.LOOP $label$39:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$40 }
	CALL _ZdlPv($6)
	
.LABEL $label$40
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$39 }
	$4 = *(($2 + [176]))
	goto $label$37 
	
.LABEL $label$38
	$4 = $0
	
.LABEL $label$37
	*($29) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$36
	$global$0 = ($2 + [208])
	return $1
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $113($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18588])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18396]
	$3 = (((int_32)$1 * (int_32)[12]) + [18396])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_64 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $133([8451])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8451], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $123())
	*(CALL $123()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $130($4, ($3 + [12]), $2)
	$0 = CALL $123()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $116($3)
	
.LABEL $label$1
	CALL $117($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $133($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $113($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $82(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $122($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [9677])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9723])
	$6 = *(($3 + [8]))
	$7 = *(($3 + [4]))
	$8 = *($1)
	$3 = *($3)
	if ( (*($3) == 0) ){ goto $label$1 }
	*(($9 = ((*($1 + [8]) + (*($7) << [3])) + [-8]))) = ((int_64)*($9) + (int_64)*($6))
	
.LABEL $label$1
	if ( (*($3 + [1]) == 0) ){ goto $label$2 }
	*(($9 = (*($1 + [20]) + (*($7 + [8]) << [3])))) = ((int_64)*($9) + (int_64)*($6))
	
.LABEL $label$2
	if ( (*($3 + [2]) == 0) ){ goto $label$3 }
	*(($9 = (*($1 + [32]) + (*($7 + [16]) << [3])))) = ((int_64)*($9) + (int_64)*($6))
	
.LABEL $label$3
	if ( (*($3 + [3]) == 0) ){ goto $label$4 }
	*(($9 = ((*($1 + [44]) + (*($7 + [24]) << [3])) + [-8]))) = ((int_64)*($9) + (int_64)*($6))
	
.LABEL $label$4
	if ( (*($3 + [4]) == 0) ){ goto $label$5 }
	*(($3 = ((*($1 + [56]) + (*($7 + [32]) << [3])) + [-8]))) = ((int_64)*($3) + (int_64)*($6))
	
.LABEL $label$5
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9774])
	*($5) = [0]
	CALL $95($5, $1)
	$6 = *($5)
	if ( ($6 <= [513]) ){ goto $label$7 }
	$3 = CALL $136($6)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [9238])
	CALL memcpy($3, $1, [8])
	*($5 + [4]) = ($3 + [8])
	CALL $96(CALL $96(CALL $96(CALL $96(CALL $96($5, ($1 + [8])), ($1 + [20])), ($1 + [32])), ($1 + [44])), ($1 + [56]))
	CALL db_update_i64(*($1 + [72]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $139($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $139($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9405])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [116]) = $0
	*($5 + [112]) = [0]
	CALL $83(($3 + [32]), $5)
	*($5 + [120]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $11(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [100])) == (int_32)$0), [9677])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9723])
	*($1 + [64]) = *(*($3))
	*($1 + [72]) = *(*($3 + [4]))
	*($1 + [80]) = *(*($3 + [8]))
	*($1 + [96]) = [1]
	*($1 + [88]) = *(*($3 + [12]))
	$5 = *($1)
	CALL eosio_assert([1], [9774])
	*(($3 = $4)) = [0]
	CALL $80($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $136($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $81($3, $1)
	CALL db_update_i64(*($1 + [104]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $139($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9405])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([80])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [68]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9428])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $88(CALL $88(CALL $88(CALL $88(CALL $88(($3 + [32]), ($5 + [8])), ($5 + [20])), ($5 + [32])), ($5 + [44])), ($5 + [56]))
	*($5 + [72]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $13(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [56])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [60])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$13 }
	*(($1 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$14 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$6 = ($global$0 - [352])
	$global$0 = $6
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$2 }
	$8 = ((uint_64)$7 > (uint_64)(int_64)5)
	$7 = (int_64)
	$9 = ( (int_64)88 ? (int_64))((int_64)5 - $7($5 - $4))) : $8 )
	goto $label$1 
	
.LABEL $label$2
	$8 = ((uint_64)$7 > (uint_64)(int_64)10)
	$7 = ((int_64))($4 - $5) + (int_64)5
	$9 = ( (int_64)88 ? $7) : $8 )
	
.LABEL $label$1
	$10 = ( (int_64)4 ? (int_64)5 : $8 )
	$8 = ((uint_64)$4 <= (uint_64)$5)
	if ( $8 ){ goto $label$4 }
	$7 = (int_64)1000000
	$11 = (int_64)1
	if ( ((uint_64)$2 > (uint_64)$3) ){ goto $label$3 }
	$7 = ( (int_64)4000000 ? (int_64)7000000 : ((int_64)$2 == (int_64)$3) )
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_64)$4 != (int_64)$5) ){ goto $label$5 }
	$7 = (int_64)2000000
	$11 = (int_64)2
	if ( ((uint_64)$2 > (uint_64)$3) ){ goto $label$3 }
	$7 = ( (int_64)5000000 ? (int_64)8000000 : ((int_64)$2 == (int_64)$3) )
	goto $label$3 
	
.LABEL $label$5
	$7 = (int_64)3000000
	$11 = (int_64)3
	if ( ((uint_64)$2 > (uint_64)$3) ){ goto $label$3 }
	$7 = ( (int_64)6000000 ? (int_64)9000000 : ((int_64)$2 == (int_64)$3) )
	
.LABEL $label$3
	*(($6 + [232])) = [0]
	*($6 + [216]) = (int_64)-1
	*($6 + [224]) = (int_64)0
	$2 = *($0)
	*($6 + [200]) = $2
	*($6 + [208]) = $2
	$12 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = ((int_64)$5 + (int_64)$4)
	$3 = ((int_64)((int_64)((int_64)((int_64)( (int_64)200000 ? ( (int_64)200000 ? (int_64)100000 : (int_64)($5 == 0) ) : (int_64)($4 == 0) ) + (int_64)( (int_64)880 ? ((int_64)$3 * (int_64)10) : $12 )) + (int_64)((int_64)$9 * (int_64)1000)) + (int_64)((int_64))($10 - (CASTING uint_64)(uint_32 $12)) * (int_64)10000000)) + (int_64)$11)
	$13 = [0]
	$12 = CALL db_find_i64($2, $2, (int_64)7035924439720001536, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$6 }
	$13 = CALL $21(($6 + [200]), $12)
	CALL eosio_assert(((int_32)*($13 + [116]) == (int_32)($6 + [200])), [9833])
	
.LABEL $label$6
	$2 = ((int_64)$3 + (int_64)$7)
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [8674])
	if ( $8 ){ goto $label$8 }
	$8 = ($13 + [88])
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$9 }
	$8 = ($13 + [104])
	goto $label$7 
	
.LABEL $label$9
	$8 = ($13 + [96])
	
.LABEL $label$7
	$10 = *($8)
	*(($6 + [192])) = [0]
	*($6 + [176]) = (int_64)-1
	$11 = (int_64)0
	*($6 + [184]) = (int_64)0
	$4 = *($0)
	*($6 + [160]) = $4
	*($6 + [168]) = $4
	$5 = ((uint_64)$2 % (uint_64)(int_64)10)
	$3 = ((uint_64)((uint_64)$2 % (uint_64)(int_64)10000000) / (uint_64)(int_64)1000000)
	$7 = ((uint_64)((uint_64)$2 % (uint_64)(int_64)1000000) / (uint_64)(int_64)100000)
	$9 = ((uint_64)$2 % (uint_64)(int_64)100000)
	$14 = ((uint_64)$9 / (uint_64)(int_64)1000)
	$15 = ((uint_64)$2 % (uint_64)(int_64)1000)
	$16 = ((uint_64)$15 / (uint_64)(int_64)10)
	$8 = [0]
	$12 = CALL db_find_i64($4, $4, (int_64)-3778232674229180112, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $23(($6 + [160]), $12)
	CALL eosio_assert(((int_32)*($8 + [68]) == (int_32)($6 + [160])), [9833])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8723])
	$17 = *(((*($8 + [8]) + ((CASTING uint_32)(uint_64 $5) << [3])) + [-8]))
	$4 = (CASTING uint_64)(uint_32 ((int_64)$17 != (int_64)0))
	if ( (uint_64)(((int_64)$15 + (int_64)-880) <= (int_64)10) ){ goto $label$11 }
	$11 = *((*($8 + [20]) + ((CASTING uint_32)(uint_64 $16) << [3])))
	$4 = ( $4 ? ( (int_64)2 ? (int_64)1 : ((int_64)$17 != (int_64)0) ) : (int_64)($11 == 0) )
	
.LABEL $label$11
	if ( ((uint_64)((int_64)$9 + (int_64)-88000) >= (uint_64)(int_64)1000) ){ goto $label$13 }
	$14 = (int_64)0
	goto $label$12 
	
.LABEL $label$13
	$14 = *((*($8 + [32]) + ((CASTING uint_32)(uint_64 $14) << [3])))
	$4 = ((int_64)$4 + (int_64)(CASTING uint_64)(uint_32 ((int_64)$14 != (int_64)0)))
	
.LABEL $label$12
	$3 = *(((*($8 + [56]) + ((CASTING uint_32)(uint_64 $3) << [3])) + [-8]))
	$7 = *(((*($8 + [44]) + ((CASTING uint_32)(uint_64 $7) << [3])) + [-8]))
	*(($18 = ($6 + [272]))) = [0]
	*($6 + [256]) = (int_64)-1
	$5 = *($0)
	*($6 + [240]) = $5
	*($6 + [248]) = $5
	*($6 + [264]) = (int_64)0
	$4 = ((int_64)$4 + (int_64)(CASTING uint_64)(uint_32 ((int_64)$7 != (int_64)0)))
	$5 = (CASTING uint_64)(uint_32 ((int_64)$3 != (int_64)0))
	$8 = CALL $24(($6 + [240]), $1, [8945])
	$15 = ((uint_64)((int_64)*($8 + [32]) * (int_64)90) / (uint_64)(int_64)100)
	$16 = ((uint_64)((int_64)*($8 + [24]) * (int_64)27) / (uint_64)(int_64)100)
	$19 = *($6 + [264])
	if ( ($19 == 0) ){ goto $label$14 }
	$20 = ($6 + [268])
	$8 = *($20)
	if ( ((int_32)$8 == (int_32)$19) ){ goto $label$16 }
	
.LOOP $label$17:
	$8 = ($8 + [-24])
	$12 = *($8)
	*($8) = [0]
	if ( ($12 == 0) ){ goto $label$18 }
	CALL _ZdlPv($12)
	
.LABEL $label$18
	if ( ((int_32)$19 != (int_32)$8) ){ goto $label$17 }
	$8 = *(($6 + [264]))
	goto $label$15 
	
.LABEL $label$16
	$8 = $19
	
.LABEL $label$15
	*($20) = $19
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$4 = ((int_64)$4 + (int_64)$5)
	*($18) = [0]
	*($6 + [256]) = (int_64)-1
	$9 = (int_64)0
	*($6 + [264]) = (int_64)0
	$5 = *($0)
	*($6 + [240]) = $5
	*($6 + [248]) = $5
	$5 = ((int_64))($16 - $10) + (int_64)$15)
	$15 = ((uint_64)((int_64)*(CALL $24(($6 + [240]), $1, [8945]) + [24]) * (int_64)63) / (uint_64)(int_64)100)
	$19 = *($6 + [264])
	if ( ($19 == 0) ){ goto $label$19 }
	$18 = ($6 + [268])
	$8 = *($18)
	if ( ((int_32)$8 == (int_32)$19) ){ goto $label$21 }
	
.LOOP $label$22:
	$8 = ($8 + [-24])
	$12 = *($8)
	*($8) = [0]
	if ( ($12 == 0) ){ goto $label$23 }
	CALL _ZdlPv($12)
	
.LABEL $label$23
	if ( ((int_32)$19 != (int_32)$8) ){ goto $label$22 }
	$8 = *(($6 + [264]))
	goto $label$20 
	
.LABEL $label$21
	$8 = $19
	
.LABEL $label$20
	*($18) = $19
	CALL _ZdlPv($8)
	
.LABEL $label$19
	$5 = ((int_64)$5 + (int_64)$15)
	if ( (int_64)($4 == 0) ){ goto $label$26 }
	$4 = ((uint_64)$5 / (uint_64)$4)
	$15 = (int_64)0
	$9 = (int_64)0
	if ( (int_64)($17 == 0) ){ goto $label$27 }
	$9 = ((uint_64)((int_64)$4 * (int_64)100000) / (uint_64)$17)
	
.LABEL $label$27
	if ( (int_64)($11 == 0) ){ goto $label$28 }
	$15 = ((uint_64)((int_64)$4 * (int_64)100000) / (uint_64)$11)
	
.LABEL $label$28
	$11 = (int_64)0
	$17 = (int_64)0
	if ( (int_64)($14 == 0) ){ goto $label$29 }
	$17 = ((uint_64)((int_64)$4 * (int_64)100000) / (uint_64)$14)
	
.LABEL $label$29
	if ( (int_64)($7 == 0) ){ goto $label$30 }
	$11 = ((uint_64)((int_64)$4 * (int_64)100000) / (uint_64)$7)
	
.LABEL $label$30
	$5 = (int_64)0
	if ( (int_64)($3 == 0) ){ goto $label$25 }
	$7 = ((uint_64)((int_64)$4 * (int_64)100000) / (uint_64)$3)
	goto $label$24 
	
.LABEL $label$26
	$15 = (int_64)0
	$17 = (int_64)0
	$11 = (int_64)0
	
.LABEL $label$25
	$7 = (int_64)0
	
.LABEL $label$24
	$3 = (int_64)0
	if ( (int_64)(*($13 + [56]) == 0) ){ goto $label$31 }
	*(($6 + [272])) = [0]
	*($6 + [256]) = (int_64)-1
	*($6 + [264]) = (int_64)0
	$4 = *($0)
	*($6 + [240]) = $4
	*($6 + [248]) = $4
	$8 = CALL $24(($6 + [240]), $1, [8945])
	$4 = ((uint_64)((int_64)((int_64)((int_64)((uint_64)((int_64)*($8 + [24]) * (int_64)10) / (uint_64)(int_64)100) + (int_64)$5) + (int_64)((uint_64)((int_64)*($8 + [32]) * (int_64)10) / (uint_64)(int_64)100)) * (int_64)80) / (uint_64)(int_64)100)
	$19 = *($6 + [264])
	if ( ($19 == 0) ){ goto $label$32 }
	$18 = ($6 + [268])
	$8 = *($18)
	if ( ((int_32)$8 == (int_32)$19) ){ goto $label$34 }
	
.LOOP $label$35:
	$8 = ($8 + [-24])
	$12 = *($8)
	*($8) = [0]
	if ( ($12 == 0) ){ goto $label$36 }
	CALL _ZdlPv($12)
	
.LABEL $label$36
	if ( ((int_32)$19 != (int_32)$8) ){ goto $label$35 }
	$8 = *(($6 + [264]))
	goto $label$33 
	
.LABEL $label$34
	$8 = $19
	
.LABEL $label$33
	*($18) = $19
	CALL _ZdlPv($8)
	
.LABEL $label$32
	$3 = ((uint_64)((int_64)$4 * (int_64)100000) / (uint_64)*(($13 + [56])))
	
.LABEL $label$31
	*(($13 = ($6 + [152]))) = [0]
	*($6 + [136]) = (int_64)-1
	*($6 + [144]) = (int_64)0
	$4 = *($0)
	*($6 + [120]) = $4
	*($6 + [128]) = $4
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$4()), [9591])
	*(($8 = CALL _Znwj([88])) + [72]) = ($6 + [120])
	*($8) = $1
	*($8 + [8]) = $2
	*($8 + [16]) = $10
	*($8 + [32]) = $9
	*($8 + [40]) = $15
	*($8 + [48]) = $17
	*($8 + [56]) = $11
	*($8 + [64]) = $7
	*($8 + [24]) = $3
	*($6 + [88]) = (($6 + [240]) + [72])
	*($6 + [84]) = ($6 + [240])
	*($6 + [80]) = ($6 + [240])
	CALL $25(($6 + [80]), $8)
	$2 = *($8)
	$19 = CALL db_store_i64(*($6 + [128]), (int_64)7035937269232844800, $4, $2, ($6 + [240]), [72])
	*($8 + [76]) = $19
	if ( (uint_64)($2 <= *($6 + [136])) ){ goto $label$37 }
	*(($6 + [136])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$37
	*($6 + [80]) = $8
	$4 = *($8)
	*($6 + [240]) = $4
	*($6 + [40]) = $19
	$18 = ($6 + [148])
	$12 = *($18)
	if ( ((uint_32)$12 >= (uint_32)*($13)) ){ goto $label$40 }
	*($12 + [8]) = $4
	*($12 + [16]) = $19
	*($6 + [80]) = [0]
	*($12) = $8
	*($18) = ($12 + [24])
	$12 = *($6 + [80])
	$8 = [0]
	*($6 + [80]) = [0]
	if ( $12 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	CALL $26(($6 + [144]), ($6 + [80]), ($6 + [240]), ($6 + [40]))
	$12 = *($6 + [80])
	$8 = [0]
	*($6 + [80]) = [0]
	if ( ($12 == 0) ){ goto $label$38 }
	
.LABEL $label$39
	CALL _ZdlPv($12)
	
.LABEL $label$38
	*((($6 + [80]) + [32])) = $8
	*($6 + [96]) = (int_64)-1
	$4 = *($0)
	*($6 + [80]) = $4
	*($6 + [88]) = $4
	*($6 + [104]) = (int_64)0
	$12 = CALL db_lowerbound_i64($4, $4, (int_64)7035937819507087360, (int_64)0)
	if ( ((int_32)$12 < (int_32)$8) ){ goto $label$41 }
	$8 = CALL $2(($6 + [80]), $12)
	
.LABEL $label$41
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8352])
	*((($6 + [240]) + [32])) = [0]
	*($6 + [256]) = (int_64)-1
	*($6 + [264]) = (int_64)0
	$4 = *($0)
	*($6 + [240]) = $4
	*($6 + [248]) = $4
	$8 = CALL $24(($6 + [240]), $1, [8945])
	$1 = ((int_64)((int_64)((int_64)((uint_64)((int_64)*($8 + [24]) * (int_64)10) / (uint_64)(int_64)100) + (int_64)$5) + (int_64)((uint_64)((int_64)*($8 + [32]) * (int_64)10) / (uint_64)(int_64)100)) * (int_64)20)
	$5 = ((uint_64)$1 / (uint_64)(int_64)100)
	$19 = *($6 + [264])
	if ( ($19 == 0) ){ goto $label$42 }
	$13 = ($6 + [268])
	$8 = *($13)
	if ( ((int_32)$8 == (int_32)$19) ){ goto $label$44 }
	
.LOOP $label$45:
	$8 = ($8 + [-24])
	$12 = *($8)
	*($8) = [0]
	if ( ($12 == 0) ){ goto $label$46 }
	CALL _ZdlPv($12)
	
.LABEL $label$46
	if ( ((int_32)$19 != (int_32)$8) ){ goto $label$45 }
	$8 = *(($6 + [264]))
	goto $label$43 
	
.LABEL $label$44
	$8 = $19
	
.LABEL $label$43
	*($13) = $19
	CALL _ZdlPv($8)
	
.LABEL $label$42
	if ( (uint_64)($1 <= (int_64)100) ){ goto $label$48 }
	$2 = *($0)
	*($6 + [44]) = [6]
	*($6 + [40]) = [9213]
	*($6 + [16]) = *($6 + [40])
	$3 = *(CALL $27(($6 + [240]), ($6 + [16])))
	*($6 + [44]) = [11]
	*($6 + [40]) = [9219]
	*($6 + [8]) = *($6 + [40])
	$7 = *(CALL $27(($6 + [240]), ($6 + [8])))
	*($6 + [40]) = [9230]
	*($6 + [44]) = [8]
	*($6) = *($6 + [40])
	$9 = *(CALL $27(($6 + [240]), $6))
	$8 = CALL $133([8546])
	if ( ($8 <= [8]) ){ goto $label$52 }
	CALL eosio_assert([0], [9046])
	goto $label$51 
	
.LABEL $label$52
	if ( ($8 == 0) ){ goto $label$50 }
	
.LABEL $label$51
	$4 = (int_64)0
	
.LOOP $label$53:
	$12 = *(($8 + [8545]))
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$54 }
	CALL eosio_assert([0], [9091])
	
.LABEL $label$54
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$53 }
	goto $label$49 
	
.LABEL $label$50
	$4 = (int_64)0
	
.LABEL $label$49
	CALL eosio_assert([1], [9144])
	$1 = ((int_64)$4 & (int_64)72057594037927935)
	$10 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	$8 = [0]
	
.LOOP $label$57:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$56 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$58 }
	$1 = $4
	$12 = [1]
	$19 = $8
	$8 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$58
	$1 = $4
	
.LOOP $label$59:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$56 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$12 = ((int_32)$8 < (int_32)[6])
	$19 = ($8 + [1])
	$8 = $19
	if ( $12 ){ goto $label$59 }
	$12 = [1]
	$8 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$56
	$12 = [0]
	
.LABEL $label$55
	CALL eosio_assert($12, [9193])
	*(($6 + [32])) = [0]
	*($6 + [24]) = (int_64)0
	$8 = CALL $133([8910])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$47 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$62 }
	*($6 + [24]) = ($8 << [1])
	$12 = (($6 + [24]) | [1])
	if ( $8 ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$19 = (($8 + [16]) & [-16])
	$12 = CALL _Znwj($19)
	*($6 + [24]) = ($19 | [1])
	*($6 + [32]) = $12
	*($6 + [28]) = $8
	
.LABEL $label$61
	CALL memcpy($12, [8910], $8)
	
.LABEL $label$60
	*(($12 + $8)) = [0]
	*((($6 + [240]) + [24])) = $10
	*(($12 = (($6 + [40]) + [24]))) = [0]
	$8 = ($6 + [32])
	*(($6 + [280])) = *($8)
	*($8) = [0]
	*($6 + [248]) = (int_64)7035937925206713216
	*($6 + [256]) = $5
	*($6 + [40]) = $7
	*($6 + [48]) = $9
	*($6 + [56]) = (int_64)0
	*($6 + [240]) = *($0)
	*($6 + [272]) = *($6 + [24])
	*($6 + [24]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $2
	*($8 + [8]) = $3
	*((($6 + [40]) + [36])) = [0]
	$19 = ($8 + [16])
	*($12) = $19
	*(($6 + [60])) = $19
	*($6 + [56]) = $8
	*($6 + [68 align=4]) = (int_64)0
	$8 = *($6 + [272])
	$12 = ( *((($6 + [240]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($12 + [32])
	$1 = (CASTING uint_64)(uint_32 $12)
	$12 = ($6 + [68])
	
.LOOP $label$63:
	$8 = ($8 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$63 }
	if ( ($8 == 0) ){ goto $label$65 }
	CALL $28($12, $8)
	$12 = *(($6 + [72]))
	$8 = *(($6 + [68]))
	goto $label$64 
	
.LABEL $label$65
	$12 = [0]
	$8 = [0]
	
.LABEL $label$64
	*($6 + [340]) = $8
	*($6 + [336]) = $8
	*($6 + [344]) = $12
	*($6 + [320]) = ($6 + [336])
	*($6 + [328]) = ($6 + [240])
	CALL $29(($6 + [328]), ($6 + [320]))
	CALL $30(($6 + [336]), ($6 + [40]))
	$8 = *($6 + [336])
	CALL send_inline($8, (*($6 + [340]) - $8))
	$8 = *($6 + [336])
	if ( ($8 == 0) ){ goto $label$66 }
	*($6 + [340]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$66
	$8 = *($6 + [68])
	if ( ($8 == 0) ){ goto $label$67 }
	*(($6 + [72])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$67
	$8 = *($6 + [56])
	if ( ($8 == 0) ){ goto $label$68 }
	*(($6 + [60])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$68
	if ( ((*(($6 + [272])) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*(($6 + [280])))
	
.LABEL $label$69
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$48
	$19 = *($6 + [104])
	if ( ($19 == 0) ){ goto $label$70 }
	$0 = ($6 + [108])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$19) ){ goto $label$72 }
	
.LOOP $label$73:
	$8 = ($8 + [-24])
	$12 = *($8)
	*($8) = [0]
	if ( ($12 == 0) ){ goto $label$74 }
	CALL _ZdlPv($12)
	
.LABEL $label$74
	if ( ((int_32)$19 != (int_32)$8) ){ goto $label$73 }
	$8 = *(($6 + [104]))
	goto $label$71 
	
.LABEL $label$72
	$8 = $19
	
.LABEL $label$71
	*($0) = $19
	CALL _ZdlPv($8)
	
.LABEL $label$70
	$19 = *($6 + [144])
	if ( ($19 == 0) ){ goto $label$75 }
	$0 = ($6 + [148])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$19) ){ goto $label$77 }
	
.LOOP $label$78:
	$8 = ($8 + [-24])
	$12 = *($8)
	*($8) = [0]
	if ( ($12 == 0) ){ goto $label$79 }
	CALL _ZdlPv($12)
	
.LABEL $label$79
	if ( ((int_32)$19 != (int_32)$8) ){ goto $label$78 }
	$8 = *(($6 + [144]))
	goto $label$76 
	
.LABEL $label$77
	$8 = $19
	
.LABEL $label$76
	*($0) = $19
	CALL _ZdlPv($8)
	
.LABEL $label$75
	CALL $14(($6 + [184]))
	$19 = *($6 + [224])
	if ( ($19 == 0) ){ goto $label$80 }
	$0 = ($6 + [228])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$19) ){ goto $label$82 }
	
.LOOP $label$83:
	$8 = ($8 + [-24])
	$12 = *($8)
	*($8) = [0]
	if ( ($12 == 0) ){ goto $label$84 }
	CALL _ZdlPv($12)
	
.LABEL $label$84
	if ( ((int_32)$19 != (int_32)$8) ){ goto $label$83 }
	$8 = *(($6 + [224]))
	goto $label$81 
	
.LABEL $label$82
	$8 = $19
	
.LABEL $label$81
	*($0) = $19
	CALL _ZdlPv($8)
	
.LABEL $label$80
	$global$0 = ($6 + [352])
	return (unreachable)
	
.LABEL $label$47
	CALL $109(($6 + [24]))
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(($6 + [116])) == (int_32)$0), [9833])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035924439720001536, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $21($0, $4)
	CALL eosio_assert(((int_32)*($5 + [116]) == (int_32)$0), [9833])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9248])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9353])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9286])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9353])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $109 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $136($1)
	
.LABEL $label$2
	*(CALL $123()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $136(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $139($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $78($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $114($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $114($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $109($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $110(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $110(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $65 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [104]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [160]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $73(($4 + [40]), ($4 + [160]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	*(($3 = (($4 + [144]) + [8]))) = *($9)
	*($4 + [144]) = *($4 + [24])
	$9 = *($3)
	*((($4 + [160]) + [8])) = $9
	*(($4 + [64])) = $9
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [144])
	*($4 + [56]) = $0
	*($4 + [160]) = $0
	*(($9 = (($4 + [128]) + [8]))) = *($8)
	*($4 + [128]) = *($4 + [96])
	$0 = *($4 + [88])
	$1 = *($4 + [112])
	$10 = *($4 + [120])
	*($3) = *($9)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $11
	*((($4 + [8]) + [8])) = $11
	$11 = *($4 + [144])
	*($4 + [8]) = $11
	*($4 + [160]) = $11
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $1), (int_64 $10), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $139($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $136($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [64]) = ($3 + $2)
	*($4 + [56]) = $3
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9428])
	CALL memcpy(($4 + [72]), $3, [8])
	*($4 + [60]) = ($3 + [8])
	CALL $69(($4 + [56]), (($4 + [72]) + [8]))
	CALL $69(($4 + [56]), ($4 + [92]))
	CALL $69(($4 + [56]), ($4 + [104]))
	CALL $69(($4 + [56]), ($4 + [116]))
	CALL eosio_assert(((uint_32)(*($4 + [64]) - *($4 + [60])) > (uint_32)[7]), [9428])
	CALL memcpy(($4 + [128]), *($4 + [60]), [8])
	*($4 + [60]) = (*($4 + [60]) + [8])
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [144]) + [8]))) = *($5)
	*($4 + [144]) = *($4 + [8])
	$5 = *($6)
	*((($4 + [160]) + [8])) = $5
	*((($4 + [24]) + [24])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [136])
	*($4 + [160]) = ($4 + [24])
	CALL $71(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$13 }
	$3 = [1]
	if ( (*($4 + [116]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $139($3)
	$3 = [1]
	if ( ((*($4 + [116]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [124])))
	if ( ((*($4 + [104]) & $3) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( (*($4 + [104]) & $3) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = [1]
	if ( (*($4 + [92]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [112])))
	$3 = [1]
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [100])))
	if ( (*($4 + [80]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [80]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $69(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $66 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9428])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $139($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [104]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [160]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $74(($4 + [40]), ($4 + [160]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	*(($3 = (($4 + [144]) + [8]))) = *($9)
	*($4 + [144]) = *($4 + [24])
	$9 = *($3)
	*((($4 + [160]) + [8])) = $9
	*(($4 + [64])) = $9
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [144])
	*($4 + [56]) = $0
	*($4 + [160]) = $0
	*(($9 = (($4 + [128]) + [8]))) = *($8)
	*($4 + [128]) = *($4 + [96])
	$0 = *($4 + [88])
	$1 = *($4 + [112])
	$10 = *($4 + [120])
	*($3) = *($9)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $11
	*((($4 + [8]) + [8])) = $11
	$11 = *($4 + [144])
	*($4 + [8]) = $11
	*($4 + [160]) = $11
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $1), (int_64 $10), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $139($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $67(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $68(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $139($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $63 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $72(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	$9 = *($4 + [88])
	$10 = *($4 + [80])
	$11 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $11), (int_64 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $139($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $136($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [52]) = $3
	*($4 + [48]) = $3
	*($4 + [56]) = ($3 + $2)
	CALL $69(($4 + [48]), ($4 + [64]))
	CALL $69(($4 + [48]), ($4 + [76]))
	CALL $69(($4 + [48]), (($4 + [64]) + [24]))
	CALL $69(($4 + [48]), ($4 + [100]))
	CALL eosio_assert(((uint_32)(*($4 + [56]) - *($4 + [52])) > (uint_32)[7]), [9428])
	CALL memcpy(($4 + [112]), *($4 + [52]), [8])
	*($4 + [52]) = (*($4 + [52]) + [8])
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [128]) + [8]))) = *($5)
	*($4 + [128]) = *($4)
	$5 = *($6)
	*((($4 + [144]) + [8])) = $5
	*((($4 + [16]) + [24])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $70(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$13 }
	$3 = [1]
	if ( (*($4 + [100]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $139($3)
	$3 = [1]
	if ( ((*($4 + [100]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [108])))
	if ( ((*($4 + [88]) & $3) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( (*($4 + [88]) & $3) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = [1]
	if ( (*($4 + [76]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [96])))
	$3 = [1]
	if ( ((*($4 + [76]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [84])))
	if ( (*($4 + [64]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [64]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $136($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10184])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $136($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $100 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = ($global$0 - [64])
	$global$0 = $7
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$9 = (*($0) + int_32($8 >> [1]))
	$0 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	$5 = CALL $110($7, $5)
	$4 = CALL $110(($7 + [16]), $4)
	$3 = CALL $110(($7 + [32]), $3)
	$2 = CALL $110(($7 + [48]), $2)
	CALL void $9((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_64 $0))
	if ( (*($5) & [1]) ){ goto $label$8 }
	if ( (*($4) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($3) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($2) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($7 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($7 + [64])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $139($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $134(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10184])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $134(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $122($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9485])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $89($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [9428])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9543])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3778232685332267008)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9489])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9489])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $84(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9405])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	*($5) = (int_64)0
	CALL $87(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($5 + [64 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $37(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9428])
	CALL memcpy(($2 + [14]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [112]) = ((int_32)*($2 + [14]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9428])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [113]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9238])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9238])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $82(CALL $82(CALL $82(CALL $82($0, ($1 + [8])), ($1 + [20])), ($1 + [32])), ($1 + [44]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9238])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [96])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9238])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [8])
	*($0) = $2
	$3 = *($1 + [8])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [8]))
	$3 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [20])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [24])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [20]))
	$3 = ( *(($1 + [24])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [32])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$3 = *(($1 + [32]))
	$3 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$6
	$3 = *($1 + [44])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	*($0) = $2
	$1 = *(($1 + [44]))
	$1 = ( *(($1 + [48])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$8 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$8
	*($0) = ($2 + [41])
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	$6 = CALL $110($2, ($1 + [36]))
	$5 = CALL $110(($2 + [16]), ($1 + [24]))
	$4 = CALL $110(($2 + [32]), ($1 + [12]))
	$3 = CALL $110(($2 + [48]), $1)
	CALL $99($0, $3, $4, $5, $6, *($1 + [48]))
	if ( (*($6) & [1]) ){ goto $label$7 }
	if ( (*($5) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	$6 = CALL $110($2, ($1 + [44]))
	$5 = CALL $110(($2 + [16]), ($1 + [32]))
	$4 = CALL $110(($2 + [32]), ($1 + [20]))
	$3 = CALL $110(($2 + [48]), ($1 + [8]))
	CALL $100($0, *($1), $3, $4, $5, $6, *($1 + [56]))
	if ( (*($6) & [1]) ){ goto $label$7 }
	if ( (*($5) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9238])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9238])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $69(CALL $69(CALL $69(CALL $69($0, ($1 + [8])), ($1 + [20])), ($1 + [32])), ($1 + [44]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9428])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [96]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9428])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9428])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-6030912134838419456, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $34(($3 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [8])), [9833])
	$1 = *($0)
	CALL eosio_assert([1], [9642])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [8])), [9677])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$4()), [9723])
	*($5 + [16]) = $2
	$4 = *($5)
	CALL eosio_assert([1], [9774])
	CALL eosio_assert([1], [9238])
	CALL memcpy(($3 + [64]), $5, [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($3 + [64]) | [8]), ($5 + [8]), [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($3 + [64]) + [16]), ($5 + [16]), [8])
	CALL db_update_i64(*($5 + [28]), $1, ($3 + [64]), [24])
	$5 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$3 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$6 = *($3 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$7 = *($0)
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$4()), [9591])
	*(($5 = CALL _Znwj([40])) + [24]) = ($3 + [8])
	*($5 + [16]) = $2
	*($5) = $1
	CALL eosio_assert([1], [9238])
	CALL memcpy(($3 + [64]), $5, [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($3 + [64]) | [8]), ($5 + [8]), [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($3 + [64]) + [16]), ($5 + [16]), [8])
	$4 = *($5)
	$6 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-6030912134838419456, $7, $4, ($3 + [64]), [24])
	*($5 + [28]) = $6
	$0 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($3 + [56]) = $5
	$4 = *($5)
	*($3 + [64]) = $4
	*($3 + [52]) = $6
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*(($3 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $4
	*($0 + [16]) = $6
	*($3 + [56]) = [0]
	*($0) = $5
	*($8) = ($0 + [24])
	$5 = *($3 + [56])
	*($3 + [56]) = [0]
	if ( $5 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $54(($3 + [32]), ($3 + [56]), ($3 + [64]), ($3 + [52]))
	$5 = *($3 + [56])
	*($3 + [56]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($3 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($3 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $6
	
.LABEL $label$8
	*($8) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($3 + [96])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-3778232685332267008, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $84($6, $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = $6
	$7 = *(*(CALL $85(($3 + [8])) + [4]) + [8])
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9433])
	*($1 + [8]) = *(($6 + [16]))
	*($1 + [16]) = *(*($4 + [8]) + [8])
	*($1 + [24]) = *(*($4 + [12]))
	*($1 + [32]) = *(*($4 + [16]))
	*($1 + [40]) = *(*($4 + [20]))
	*($1 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = $2
	$4 = ($6 + [-64])
	$global$0 = $4
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($6 + [-8])
	CALL $86(($3 + [8]), $1)
	$7 = *($1 + [8])
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)-3778232685332267008, *(*($0 + [8])), $7, $4, [56])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$3 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = ($1 + [8])
	$7 = *($4)
	$5 = ($5 + [8])
	$9 = *($5)
	$0 = *(($0 + [8]))
	$10 = *($0)
	*($3 + [24]) = *($1)
	*($1 + [64]) = CALL db_idx64_store($9, (int_64)-3778232685332267008, $10, $7, ($3 + [24]))
	$7 = *($4)
	$9 = *($0)
	$10 = *($5)
	*($3 + [24]) = *(($1 + [16]))
	*(($1 + [68])) = CALL db_idx64_store($10, (int_64)-3778232685332267007, $9, $7, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9485])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $28($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9428])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-6030912134838419456, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $34(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [8])), [9833])
	
.LABEL $label$1
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [8590])
	$4 = CALL $35($0, $1)
	$1 = *($5 + [8])
	$7 = ((int_64)$1 + (int_64)$2)
	CALL eosio_assert(((uint_64)$7 >= (uint_64)$1), [8974])
	CALL eosio_assert(((uint_64)$4 > (uint_64)$7), [8828])
	$1 = *($0)
	CALL eosio_assert($6, [9642])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [8])), [9677])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$4()), [9723])
	$4 = *($5)
	$7 = *($5 + [8])
	$2 = ((int_64)$7 + (int_64)$2)
	CALL eosio_assert(((uint_64)$2 >= (uint_64)$7), [8974])
	*($5 + [8]) = $2
	CALL eosio_assert(((int_64)$4 == (int_64)*($5)), [9774])
	CALL eosio_assert([1], [9238])
	CALL memcpy(($3 + [48]), $5, [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($3 + [48]) | [8]), ($5 + [8]), [8])
	CALL eosio_assert([1], [9238])
	CALL memcpy((($3 + [48]) + [16]), ($5 + [16]), [8])
	CALL db_update_i64(*($5 + [28]), $1, ($3 + [48]), [24])
	$5 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$2 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$3 }
	$8 = ($3 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	$5 = *(($3 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$5 = $6
	
.LABEL $label$4
	*($8) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$5 = ($global$0 - [256])
	$global$0 = $5
	*($5 + [200]) = $2
	*($5 + [208]) = $1
	$6 = [0]
	*((($5 + [160]) + [32])) = [0]
	*($5 + [176]) = (int_64)-1
	$1 = *($0)
	*($5 + [160]) = $1
	*($5 + [168]) = $1
	*($5 + [184]) = (int_64)0
	$7 = [0]
	$8 = CALL db_lowerbound_i64($1, $1, (int_64)7035937819507087360, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $2(($5 + [160]), $8)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8352])
	*((($5 + [120]) + [32])) = [0]
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	$1 = *($0)
	*($5 + [120]) = $1
	*($5 + [128]) = $1
	$8 = CALL db_find_i64($1, $1, (int_64)7035924439720001536, *($7 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $21(($5 + [120]), $8)
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)($5 + [120])), [9833])
	
.LABEL $label$2
	$8 = [0]
	$9 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($9, [8674])
	if ( *($6 + [113]) ){ goto $label$3 }
	$8 = ((uint_64)*($6 + [8]) > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295))
	
.LABEL $label$3
	CALL eosio_assert($8, [8689])
	*($5 + [112]) = ((uint_64)((int_64)*($5 + [200]) * (int_64)100000) / (uint_64)*($6 + [16]))
	$10 = ((uint_64)$3 % (uint_64)(int_64)10)
	$8 = (uint_64)(((int_64)$10 + (int_64)-1) <= (int_64)3)
	$2 = ((uint_64)$3 % (uint_64)(int_64)10000000)
	$1 = ((uint_64)$3 % (uint_64)(int_64)1000000)
	$11 = ((uint_64)$3 % (uint_64)(int_64)100000)
	$12 = ((uint_64)$3 % (uint_64)(int_64)1000)
	if ( ((uint_64)$12 > (uint_64)(int_64)99) ){ goto $label$6 }
	$3 = ( (int_64)2 ? (int_64)1 : $8 )
	$13 = (int_64))($12 - (CASTING uint_64)(uint_32 ((uint_32)((CASTING uint_32)(uint_64 $12) & [255]) % (uint_32)[10])))
	$12 = (int_64)88000
	if ( ((uint_64)$11 <= (uint_64)(int_64)10999) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = (CASTING uint_64)(uint_32 $8)
	$13 = (int_64)880
	$12 = (int_64)88000
	if ( ((uint_64)$11 > (uint_64)(int_64)10999) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ((int_64)$3 + (int_64)1)
	$12 = (int_64))($11 - (CASTING uint_64)(uint_32 ((uint_32)((CASTING uint_32)(uint_64 $11) & [65535]) % (uint_32)[1000])))
	
.LABEL $label$4
	if ( (uint_64)(((int_64)$1 + (int_64)-100000) <= (int_64)100000) ){ goto $label$8 }
	$11 = (int_64)0
	if ( ((uint_64)((int_64)$1 + (int_64)-200000) > (uint_64)(int_64)99999) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = ((int_64)$3 + (int_64)1)
	$11 = (int_64))($1 - ((uint_64)$1 % (uint_64)(int_64)100000))
	
.LABEL $label$7
	$1 = ( $10 ? (int_64)0 : $8 )
	if ( (uint_64)($2 <= (int_64)1000000) ){ goto $label$10 }
	$3 = ((int_64)$3 + (int_64)1)
	$2 = (int_64))($2 - ((uint_64)$2 % (uint_64)(int_64)1000000))
	goto $label$9 
	
.LABEL $label$10
	$2 = (int_64)0
	
.LABEL $label$9
	$8 = (int_64)($3 == 0)
	*($5 + [104]) = ((int_64)((int_64)((int_64)((int_64)((int_64)$12 + (int_64)$13) + (int_64)$11) + (int_64)$2) + (int_64)( (int_64)2 ? $1 : $8 )) + (int_64)( (int_64)10000000 ? ((int_64)$3 * (int_64)10000000) : $8 ))
	*(($14 = ($5 + [96]))) = [0]
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	*($5 + [100]) = [0]
	$3 = *($0)
	*($5 + [64]) = $3
	*($5 + [72]) = $3
	*($5 + [48]) = $7
	*($5 + [44]) = ($5 + [64])
	*($5 + [40]) = ($5 + [208])
	*($5 + [52]) = ($5 + [112])
	*($5 + [56]) = ($5 + [200])
	*($5 + [60]) = ($5 + [104])
	*($5 + [248]) = $3
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$4()), [9591])
	*($5 + [228]) = ($5 + [40])
	*($5 + [224]) = ($5 + [64])
	*($5 + [232]) = ($5 + [248])
	*(($8 = CALL _Znwj([72]))) = (int_64)0
	*($8 + [56]) = ($5 + [64])
	CALL $36(($5 + [224]), $8)
	*($5 + [240]) = $8
	$3 = *($8 + [8])
	*($5 + [224]) = $3
	$15 = *($8 + [60])
	*($5 + [220]) = $15
	$16 = ($5 + [92])
	$17 = *($16)
	if ( ((uint_32)$17 >= (uint_32)*($14)) ){ goto $label$13 }
	*($17 + [8]) = $3
	*($17 + [16]) = $15
	*($5 + [240]) = [0]
	*($17) = $8
	*($16) = ($17 + [24])
	$8 = *($5 + [240])
	*($5 + [240]) = [0]
	if ( $8 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $37(($5 + [88]), ($5 + [240]), ($5 + [224]), ($5 + [220]))
	$8 = *($5 + [240])
	*($5 + [240]) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$3 = *($0)
	*($5 + [44]) = $0
	*($5 + [40]) = ($5 + [200])
	*($5 + [48]) = ($5 + [112])
	CALL eosio_assert($9, [9642])
	CALL $38(($5 + [120]), $6, $3, ($5 + [40]))
	$8 = ($7 + [8])
	CALL $39($0, *($5 + [208]), *($8))
	CALL $40($0, *($8), *($5 + [104]), *($5 + [112]))
	$1 = *($5 + [200])
	$2 = *($5 + [208])
	$8 = CALL $133([8546])
	if ( ($8 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [9046])
	goto $label$16 
	
.LABEL $label$17
	if ( ($8 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$3 = (int_64)0
	
.LOOP $label$18:
	$6 = *(($8 + [8545]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$19 }
	CALL eosio_assert([0], [9091])
	
.LABEL $label$19
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$15
	$3 = (int_64)0
	
.LABEL $label$14
	*($5 + [32]) = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	*($5 + [24]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9144])
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	$8 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$3 = $1
	$6 = [1]
	$7 = $8
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$3 = $1
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$7 = ($8 + [1])
	$8 = $7
	if ( $6 ){ goto $label$24 }
	$6 = [1]
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$6 = [0]
	
.LABEL $label$20
	CALL eosio_assert($6, [9193])
	*((($5 + [8]) + [8])) = *((($5 + [24]) + [8]))
	*($5 + [8]) = *($5 + [24])
	CALL $41($0, $2, $4, ($5 + [8]))
	$7 = *($5 + [88])
	if ( ($7 == 0) ){ goto $label$25 }
	$0 = ($5 + [92])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$27 }
	
.LOOP $label$28:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$29 }
	CALL _ZdlPv($6)
	
.LABEL $label$29
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$28 }
	$8 = *(($5 + [88]))
	goto $label$26 
	
.LABEL $label$27
	$8 = $7
	
.LABEL $label$26
	*($0) = $7
	CALL _ZdlPv($8)
	
.LABEL $label$25
	$7 = *($5 + [144])
	if ( ($7 == 0) ){ goto $label$30 }
	$0 = ($5 + [148])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$32 }
	
.LOOP $label$33:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$34 }
	CALL _ZdlPv($6)
	
.LABEL $label$34
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$33 }
	$8 = *(($5 + [144]))
	goto $label$31 
	
.LABEL $label$32
	$8 = $7
	
.LABEL $label$31
	*($0) = $7
	CALL _ZdlPv($8)
	
.LABEL $label$30
	$7 = *($5 + [184])
	if ( ($7 == 0) ){ goto $label$35 }
	$0 = ($5 + [188])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$37 }
	
.LOOP $label$38:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$39 }
	CALL _ZdlPv($6)
	
.LABEL $label$39
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$38 }
	$8 = *(($5 + [184]))
	goto $label$36 
	
.LABEL $label$37
	$8 = $7
	
.LABEL $label$36
	*($0) = $7
	CALL _ZdlPv($8)
	
.LABEL $label$35
	$global$0 = ($5 + [256])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $28($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9238])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9238])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $76(CALL $75($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	CALL eosio_assert(CALL $fimport$10($1), [8478])
	CALL require_auth($1)
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8498])
	$7 = (int_64)0
	$8 = *($2)
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8515])
	$5 = CALL $133([8546])
	if ( ($5 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9046])
	goto $label$7 
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$7 = (int_64)0
	
.LOOP $label$9:
	$9 = *(($5 + [8545]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [9091])
	
.LABEL $label$10
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$9 }
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [8550])
	CALL $32($0, $1, $8)
	CALL $33($0, $1, $8, $3, $4)
}

int_64 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $128($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $123()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $128($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18609]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $127($0, (int_64)0)
	*(CALL $123()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $128($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $128($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $128($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $128($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18609])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18609]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18609]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $128($0)
	$5 = *(($6 + [18609]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $128($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18609]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8226]))
	$8 = (int_64)0
	$5 = *(($6 + [18609]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18609]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $128($0)
	$5 = *(($6 + [18609]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $128($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18609]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $127($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18609]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18609]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $128($0) + [18609]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $123()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $123()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $123()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $127 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}