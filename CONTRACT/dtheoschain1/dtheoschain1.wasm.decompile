(data (i32.const 8192) ";\00")
(data (i32.const 8194) "rent\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8285) "sitdown\00")
(data (i32.const 8293) "impawn\00")
(data (i32.const 8300) "fightagain\00")
(data (i32.const 8311) "renew\00")
(data (i32.const 8317) "sitdown2\00")
(data (i32.const 8326) ",\00")
(data (i32.const 8328) "rent room params error!\00")
(data (i32.const 8352) "cannot find room setting\00")
(data (i32.const 8377) "rent room id error!\00")
(data (i32.const 8397) "need more EOS\00")
(data (i32.const 8411) "EOS\00")
(data (i32.const 8415) "asset must be EOS\00")
(data (i32.const 8433) "invalid quantity\00")
(data (i32.const 8450) "string is too long to be a valid symbol_code\00")
(data (i32.const 8495) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8548) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8599) "error reading iterator\00")
(data (i32.const 8622) "read\00")
(data (i32.const 8627) "get\00")
(data (i32.const 8631) "cannot create objects in table of another contract\00")
(data (i32.const 8682) "write\00")
(data (i32.const 8688) "cannot pass end iterator to modify\00")
(data (i32.const 8723) "object passed to modify is not in multi_index\00")
(data (i32.const 8769) "cannot modify objects in table of another contract\00")
(data (i32.const 8820) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8879) "room is use!\00")
(data (i32.const 8892) "sit down params error!\00")
(data (i32.const 8915) "can not find this room\00")
(data (i32.const 8938) "unable to find user!\00")
(data (i32.const 8959) "not enough impawned EOS\00")
(data (i32.const 8983) "quantity error\00")
(data (i32.const 8998) "user in other room\00")
(data (i32.const 9017) "exist this user!\00")
(data (i32.const 9034) "fight again params error!\00")
(data (i32.const 9060) "not exist this user!\00")
(data (i32.const 9081) "renew params error!\00")
(data (i32.const 9101) "renew room id error!\00")
(data (i32.const 9122) "cannot find the room!\00")
(data (i32.const 9144) "sitdown2 params error!\00")
(data (i32.const 9167) "negative num or quantity error!\00")
(data (i32.const 9199) "need admin account!\00")
(data (i32.const 9219) "cannot find the room\00")
(data (i32.const 9240) "cannot find the user!\00")
(data (i32.const 9262) "give back\00")
(data (i32.const 9272) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9321) "invalid symbol name\00")
(data (i32.const 9341) "room\00")
(data (i32.const 9346) "cannot find room\00")
(data (i32.const 9363) "string is too long to be a valid name\00")
(data (i32.const 9401) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9468) "character is not in allowed character set for names\00")
(data (i32.const 9520) "cannot find the game!\00")
(data (i32.const 9542) "end game again!\00")
(data (i32.const 9558) "spend chip error!\00")
(data (i32.const 9576) "cannot find the game\00")
(data (i32.const 9597) "have no right to do action!\00")
(data (i32.const 9625) "account error!\00")
(data (i32.const 9640) "cannot pass end iterator to erase\00")
(data (i32.const 9674) "cannot increment end iterator\00")
(data (i32.const 9704) "object passed to erase is not in multi_index\00")
(data (i32.const 9749) "cannot erase objects in table of another contract\00")
(data (i32.const 9799) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9852) "cannot find the settle\00")
(data (i32.const 9875) "cannot find the user\00")
(data (i32.const 9896) "msg: impawned < amount\00")
(data (i32.const 9919) "cannot find user!\00")
(data (i32.const 9937) "invalid value\00")
(data (i32.const 9951) "invalid amount value\00")
(data (i32.const 9972) "cannot find this room\00")
(data (i32.const 9994) "has not right to erase\00")
(data (i32.const 10017) "do not have enough chip!\00")
(data (i32.const 10042) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10094) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10148) "cannot decrement iterator at beginning of table\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "has_auth" (func $fimport$4 (param i64) (result i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "send_deferred" (func $fimport$10 (param i32 i64 i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$11 (result i64)))
(import "env" "db_get_i64" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$14 (param i32 i64 i32 i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$17 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$18 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$19 (param i32 i64 i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$20 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$21 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$22 (param i32 i64 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$23 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$25 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$26 (param i32)))
(import "env" "db_idx128_remove" (func $fimport$27 (param i32)))
(import "env" "db_lowerbound_i64" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$30 (param i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$31 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$32 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$41 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$42 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$43 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$44 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$45 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$47 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$48 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$49 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$50 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$51 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $3))
(export "_ZdlPv" (func $176))
(export "_Znwj" (func $174))
(export "_Znaj" (func $175))
(export "_ZdaPv" (func $177))
(export "_ZnwjSt11align_val_t" (func $178))
(export "_ZnajSt11align_val_t" (func $179))
(export "_ZdlPvSt11align_val_t" (func $180))
(export "_ZdaPvSt11align_val_t" (func $181))
(table $0 22 22 anyfunc)
(elem (i32.const 1) $4 $6 $8 $10 $12 $14 $16 $18 $20 $21 $22 $23 $24 $25 $27 $29 $30 $31 $33 $34 $35)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18612))
(global $global$2 i32 (i32.const 18612))


int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $202($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10196])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $202($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [144])
	$global$0 = $6
	*($6 + [136]) = $2
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*(($6 + [128])) = [0]
	*($6 + [104]) = (int_64)7235159537265672192
	*($6 + [112]) = (int_64)-1
	*($6 + [120]) = (int_64)0
	*($6 + [96]) = *($0)
	*($6 + [32]) = [0]
	*($6 + [24]) = (int_64)0
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	CALL $189(($6 + [24]), int_32((((CASTING uint_32)(uint_64 $2) << [24]) + [1627389952]) >> [24]))
	CALL $189(($6 + [24]), int_32((((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$2 * (int_64)10))) << [24]) + [1627389952]) >> [24]))
	$8 = CALL $191(($6 + [24]), [0], [9341])
	$9 = ($8 + [8])
	*(($7 = (($6 + [64]) + [8]))) = *($9)
	*($6 + [64]) = *($8)
	*($8) = (int_64)0
	*($9) = [0]
	$8 = *($6 + [64])
	$9 = ($8 & [1])
	*($6 + [80]) = ( *($7) ? (($6 + [64]) | [1]) : $9 )
	*($6 + [84]) = ( *($6 + [68]) ? uint_32($8 >> [1]) : $9 )
	*($6 + [8]) = *($6 + [80])
	$2 = *(CALL $48(($6 + [88]), ($6 + [8])))
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$2
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$3
	$7 = *(($6 + [124]))
	$10 = *(($6 + [120]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$7:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$6 }
	$7 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($9 + [104]) == (int_32)($6 + [96])), [8548])
	goto $label$4 
	
.LABEL $label$5
	$9 = [0]
	$8 = CALL db_find_i64(*($6 + [96]), *(($6 + [104])), (int_64)-4816269947984412672, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $49(($6 + [96]), $8)
	CALL eosio_assert(((int_32)*($9 + [104]) == (int_32)($6 + [96])), [8548])
	
.LABEL $label$4
	$1 = *($0)
	*($6 + [24]) = ($6 + [136])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8688])
	CALL $50(($6 + [96]), $9, $1, ($6 + [24]))
	$8 = [0]
	if ( ($9 == 0) ){ goto $label$8 }
	$8 = ((int_32)*($9 + [76]) ^ (int_32)[1])
	
.LABEL $label$8
	CALL eosio_assert($8, [9346])
	*(($6 + [56])) = [0]
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$1 = *($0)
	*($6 + [24]) = $1
	*($6 + [32]) = $2
	$8 = CALL db_find_i64($1, $2, (int_64)7035937633859534848, *($6 + [136]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$11 }
	$8 = CALL $51(($6 + [24]), $8)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($6 + [24])), [8548])
	$1 = *($0)
	*($6 + [88]) = $3
	CALL eosio_assert([1], [8688])
	CALL $52(($6 + [24]), $8, $1, ($6 + [88]))
	$10 = *($6 + [48])
	if ( $10 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = *($0)
	*($6 + [92]) = $3
	*($6 + [88]) = ($6 + [136])
	CALL $53(($6 + [16]), ($6 + [24]), $1, ($6 + [88]))
	$10 = *($6 + [48])
	if ( ($10 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$0 = ($6 + [52])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$13 }
	
.LOOP $label$14:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	$9 = *($7 + [16])
	if ( ($9 == 0) ){ goto $label$16 }
	*(($7 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$16
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$14 }
	$8 = *(($6 + [48]))
	goto $label$12 
	
.LABEL $label$13
	$8 = $10
	
.LABEL $label$12
	*($0) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$9 = *($6 + [120])
	if ( ($9 == 0) ){ goto $label$17 }
	$10 = ($6 + [124])
	$7 = *($10)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$19 }
	
.LOOP $label$20:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	CALL $54(($8 + [92]), *(($8 + [96])))
	CALL $55(($8 + [80]), *(($8 + [84])))
	CALL _ZdlPv($8)
	
.LABEL $label$21
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$20 }
	$8 = *(($6 + [120]))
	goto $label$18 
	
.LABEL $label$19
	$8 = $9
	
.LABEL $label$18
	*($10) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$17
	$global$0 = ($6 + [144])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $205($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $170 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [48])
	$global$0 = $6
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$9 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$9 = *((*($8) + $9))
	
.LABEL $label$1
	*($6 + [40]) = [0]
	*($6 + [32]) = (int_64)0
	$0 = (*($3 + [4]) - *($3))
	if ( ($0 == 0) ){ goto $label$5 }
	$7 = int_32($0 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$4 }
	$0 = CALL _Znwj($0)
	*(($6 + [40])) = ($0 + ($7 << [3]))
	*($6 + [32]) = $0
	*($6 + [36]) = $0
	$7 = *($3)
	$3 = (*(($3 + [4])) - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($0, $7, $3)
	*($6 + [36]) = ($0 + $3)
	
.LABEL $label$5
	*($6 + [24]) = [0]
	*($6 + [16]) = (int_64)0
	$3 = (*($4 + [4]) - *($4))
	$0 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$0 >= (uint_32)[357913942]) ){ goto $label$3 }
	$3 = CALL _Znwj($3)
	*(($6 + [24])) = ($3 + ((int_32)$0 * (int_32)[12]))
	*($6 + [16]) = $3
	*($6 + [20]) = $3
	$4 = *(($4 + [4]))
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = CALL $183($3, $0)
	$3 = ($3 + [12])
	$0 = ($0 + [12])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	*($6 + [20]) = ($7 + [12])
	
.LABEL $label$6
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	$3 = (*($5 + [4]) - *($5))
	$0 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((uint_32)$0 >= (uint_32)[357913942]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($6 + [8])) = ($3 + ((int_32)$0 * (int_32)[12]))
	*($6) = $3
	*($6 + [4]) = $3
	$4 = *(($5 + [4]))
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = CALL $183($3, $0)
	$3 = ($3 + [12])
	$0 = ($0 + [12])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$9 }
	*($6 + [4]) = ($7 + [12])
	
.LABEL $label$8
	CALL void $8((int_32 $1), (int_64 $2), (int_64 ($6 + [32])), (int_32 ($6 + [16])), (int_32 $6), (int_32 $9))
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$10 }
	$0 = *($6 + [4])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($0 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($0 + [-4])))
	
.LABEL $label$14
	$0 = $3
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$13 }
	$3 = *($6)
	goto $label$11 
	
.LABEL $label$12
	$3 = $4
	
.LABEL $label$11
	*($6 + [4]) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$10
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$15 }
	$0 = *($6 + [20])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($0 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($0 + [-4])))
	
.LABEL $label$19
	$0 = $3
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$18 }
	$3 = *($6 + [16])
	goto $label$16 
	
.LABEL $label$17
	$3 = $4
	
.LABEL $label$16
	*($6 + [20]) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$15
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$20 }
	*($6 + [36]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$global$0 = ($6 + [48])
	return (unreachable)
	
.LABEL $label$4
	CALL $193(($6 + [32]))
	
.LABEL $label$3
	CALL $193(($6 + [16]))
	
.LABEL $label$2
	CALL $193($6)
	(unreachable)
	(unreachable)
}

void .FUNC $171 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	$5 = ($global$0 - [32])
	$global$0 = $5
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$8 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$8 = *((*($7) + $8))
	
.LABEL $label$1
	*($5 + [20 align=4]) = (int_64)0
	$9 = (($5 + [16]) | [4])
	*($5 + [16]) = $9
	$11 = ($3 + [4])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$3 }
	$12 = [0]
	$13 = ($10 + [16])
	if ( ((int_32)$9 != (int_32)$9) ){ goto $label$4 }
	$14 = [28]
	goto $label$2 
	
.LABEL $label$4
	$14 = [3]
	goto $label$2 
	
.LABEL $label$3
	$14 = [29]
	
.LABEL $label$2
	
.LOOP $label$5:
	goto $label$105 
	
.LABEL $label$132
	$12 = *($5 + [20])
	$10 = $0
	$13 = ($10 + [16])
	if ( ((int_32)*($5 + [16]) == (int_32)$9) ){ goto $label$60 }
	$14 = [3]
	goto $label$5 
	
.LABEL $label$131
	$0 = $12
	$6 = $9
	if ( ($12 == 0) ){ goto $label$43 }
	$14 = [4]
	goto $label$5 
	
.LABEL $label$130
	$3 = $0
	$0 = *($3 + [4])
	if ( $0 ){ goto $label$44 }
	goto $label$45 
	
.LABEL $label$129
	$3 = *($6 + [8])
	$0 = ((int_32)*($3) == (int_32)$6)
	$6 = $3
	if ( $0 ){ goto $label$42 }
	$14 = [5]
	goto $label$5 
	
.LABEL $label$128
	$15 = *($13)
	if ( (uint_64)(*($3 + [16]) <= $15) ){ goto $label$59 }
	$14 = [6]
	goto $label$5 
	
.LABEL $label$127
	if ( ($12 == 0) ){ goto $label$41 }
	$14 = [7]
	goto $label$5 
	
.LABEL $label$126
	$0 = $9
	$16 = *($12 + [16])
	if ( ((uint_64)$15 >= (uint_64)$16) ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$125
	$0 = $12
	$12 = $3
	$16 = *($12 + [16])
	if ( ((uint_64)$15 >= (uint_64)$16) ){ goto $label$56 }
	$14 = [20]
	goto $label$5 
	
.LABEL $label$124
	$3 = *($12)
	if ( $3 ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$123
	if ( ((uint_64)$16 >= (uint_64)$15) ){ goto $label$38 }
	$14 = [17]
	goto $label$5 
	
.LABEL $label$122
	$0 = ($12 + [4])
	$3 = *($12 + [4])
	if ( ($3 == 0) ){ goto $label$33 }
	$14 = [18]
	goto $label$5 
	
.LABEL $label$121
	$12 = $0
	goto $label$55 
	
.LABEL $label$120
	$3 = $9
	$14 = [24]
	goto $label$5 
	
.LABEL $label$119
	if ( ($12 == 0) ){ goto $label$30 }
	$14 = [25]
	goto $label$5 
	
.LABEL $label$118
	$12 = ($3 + [4])
	if ( (*($12) == 0) ){ goto $label$35 }
	$14 = [10]
	goto $label$5 
	
.LABEL $label$117
	$3 = *($10 + [4])
	if ( $3 ){ goto $label$52 }
	$14 = [11]
	goto $label$5 
	
.LABEL $label$116
	$0 = *($10 + [8])
	if ( ((int_32)*($0) == (int_32)$10) ){ goto $label$49 }
	$14 = [12]
	goto $label$5 
	
.LABEL $label$115
	$6 = ($10 + [8])
	$14 = [13]
	goto $label$5 
	
.LABEL $label$114
	$3 = *($6)
	$6 = ($3 + [8])
	$0 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($0)) ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$113
	$3 = $9
	$12 = $9
	if ( *($12) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$112
	$12 = $9
	$3 = $9
	goto $label$58 
	
.LABEL $label$111
	$3 = $12
	goto $label$57 
	
.LABEL $label$110
	$3 = $12
	$12 = $0
	if ( *($12) ){ goto $label$53 }
	goto $label$54 
	
.LABEL $label$109
	$3 = $12
	$12 = $0
	$14 = [14]
	goto $label$5 
	
.LABEL $label$108
	*((($0 = CALL _Znwj([32])) + [24])) = *(($13 + [8]))
	*($0 + [16]) = *($13)
	*($0) = (int_64)0
	*($0 + [8]) = $3
	*($12) = $0
	$3 = *(*($5 + [16]))
	if ( ($3 == 0) ){ goto $label$34 }
	$14 = [15]
	goto $label$5 
	
.LABEL $label$107
	*($5 + [16]) = $3
	$0 = *($12)
	$14 = [16]
	goto $label$5 
	
.LABEL $label$106
	CALL $111(*($5 + [20]), $0)
	*(($3 = (($5 + [16]) + [8]))) = (*($3) + [1])
	$3 = *($10 + [4])
	if ( ($3 == 0) ){ goto $label$50 }
	$14 = [0]
	goto $label$5 
	
.LABEL $label$105
	$0 = $3
	$3 = *($0)
	if ( $3 ){ goto $label$51 }
	$14 = [1]
	goto $label$5 
	
.LABEL $label$104
	if ( ((int_32)$0 != (int_32)$11) ){ goto $label$46 }
	$14 = [29]
	goto $label$5 
	
.LABEL $label$103
	*($5 + [4 align=4]) = (int_64)0
	$9 = ($5 | [4])
	*($5) = $9
	$13 = ($4 + [4])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$29 }
	$14 = [30]
	goto $label$5 
	
.LABEL $label$102
	$12 = [0]
	$11 = ($5 + [8])
	if ( ((int_32)$9 != (int_32)$9) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$101
	$12 = *($5 + [4])
	$10 = $0
	if ( ((int_32)*($5) == (int_32)$9) ){ goto $label$70 }
	$14 = [31]
	goto $label$5 
	
.LABEL $label$100
	$0 = $12
	$6 = $9
	if ( ($12 == 0) ){ goto $label$24 }
	$14 = [32]
	goto $label$5 
	
.LABEL $label$99
	$3 = $0
	$0 = *($3 + [4])
	if ( $0 ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$98
	$3 = *($6 + [8])
	$0 = ((int_32)*($3) == (int_32)$6)
	$6 = $3
	if ( $0 ){ goto $label$23 }
	$14 = [33]
	goto $label$5 
	
.LABEL $label$97
	$15 = *(($10 + [16]))
	if ( (uint_64)(*($3 + [16]) <= $15) ){ goto $label$69 }
	$14 = [34]
	goto $label$5 
	
.LABEL $label$96
	if ( ($12 == 0) ){ goto $label$22 }
	$14 = [35]
	goto $label$5 
	
.LABEL $label$95
	$0 = $9
	$16 = *($12 + [16])
	if ( ((uint_64)$15 >= (uint_64)$16) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$94
	$0 = $12
	$12 = $3
	$16 = *($12 + [16])
	if ( ((uint_64)$15 >= (uint_64)$16) ){ goto $label$66 }
	$14 = [57]
	goto $label$5 
	
.LABEL $label$93
	$3 = *($12)
	if ( $3 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$92
	if ( ((uint_64)$16 >= (uint_64)$15) ){ goto $label$19 }
	$14 = [54]
	goto $label$5 
	
.LABEL $label$91
	$0 = ($12 + [4])
	$3 = *($12 + [4])
	if ( ($3 == 0) ){ goto $label$8 }
	$14 = [55]
	goto $label$5 
	
.LABEL $label$90
	$12 = $0
	goto $label$65 
	
.LABEL $label$89
	$3 = $9
	$14 = [43]
	goto $label$5 
	
.LABEL $label$88
	if ( ($12 == 0) ){ goto $label$11 }
	$14 = [44]
	goto $label$5 
	
.LABEL $label$87
	$0 = ($3 + [4])
	if ( (*($0) == 0) ){ goto $label$17 }
	$14 = [38]
	goto $label$5 
	
.LABEL $label$86
	$3 = *($10 + [4])
	if ( $3 ){ goto $label$62 }
	$14 = [49]
	goto $label$5 
	
.LABEL $label$85
	$0 = *($10 + [8])
	if ( ((int_32)*($0) == (int_32)$10) ){ goto $label$15 }
	$14 = [50]
	goto $label$5 
	
.LABEL $label$84
	$6 = ($10 + [8])
	$14 = [51]
	goto $label$5 
	
.LABEL $label$83
	$3 = *($6)
	$6 = ($3 + [8])
	$0 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($0)) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$82
	$3 = $9
	$0 = $9
	if ( *($0) ){ goto $label$18 }
	$14 = [45]
	goto $label$5 
	
.LABEL $label$81
	$12 = $0
	goto $label$10 
	
.LABEL $label$80
	$12 = $9
	$3 = $9
	goto $label$68 
	
.LABEL $label$79
	$3 = $12
	goto $label$67 
	
.LABEL $label$78
	$3 = $12
	if ( *($0) ){ goto $label$63 }
	goto $label$64 
	
.LABEL $label$77
	$3 = $12
	$12 = $0
	$14 = [46]
	goto $label$5 
	
.LABEL $label$76
	*(($0 = CALL _Znwj([40])) + [16]) = *(($10 + [16]))
	CALL $183(($0 + [24]), ($10 + [24]))
	*($0 + [8]) = $3
	*($0) = (int_64)0
	*($12) = $0
	$3 = *(*($5))
	if ( ($3 == 0) ){ goto $label$9 }
	$14 = [47]
	goto $label$5 
	
.LABEL $label$75
	*($5) = $3
	$0 = *($12)
	$14 = [48]
	goto $label$5 
	
.LABEL $label$74
	CALL $111(*($5 + [4]), $0)
	*($11) = (*($11) + [1])
	$3 = *($10 + [4])
	if ( ($3 == 0) ){ goto $label$16 }
	$14 = [39]
	goto $label$5 
	
.LABEL $label$73
	$0 = $3
	$3 = *($0)
	if ( $3 ){ goto $label$61 }
	$14 = [40]
	goto $label$5 
	
.LABEL $label$72
	if ( ((int_32)$0 != (int_32)$13) ){ goto $label$12 }
	$14 = [53]
	goto $label$5 
	
.LABEL $label$71
	CALL void $7((int_32 $1), (int_64 $2), (int_64 ($5 + [16])), (int_32 $5), (int_32 $8))
	CALL $54($5, *($5 + [4]))
	CALL $55(($5 + [16]), *($5 + [20]))
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$70
	$14 = [42]
	goto $label$5 
	
.LABEL $label$69
	$14 = [43]
	goto $label$5 
	
.LABEL $label$68
	$14 = [46]
	goto $label$5 
	
.LABEL $label$67
	$14 = [46]
	goto $label$5 
	
.LABEL $label$66
	$14 = [36]
	goto $label$5 
	
.LABEL $label$65
	$14 = [56]
	goto $label$5 
	
.LABEL $label$64
	$14 = [45]
	goto $label$5 
	
.LABEL $label$63
	$14 = [38]
	goto $label$5 
	
.LABEL $label$62
	$14 = [39]
	goto $label$5 
	
.LABEL $label$61
	$14 = [39]
	goto $label$5 
	
.LABEL $label$60
	$14 = [28]
	goto $label$5 
	
.LABEL $label$59
	$14 = [24]
	goto $label$5 
	
.LABEL $label$58
	$14 = [14]
	goto $label$5 
	
.LABEL $label$57
	$14 = [14]
	goto $label$5 
	
.LABEL $label$56
	$14 = [8]
	goto $label$5 
	
.LABEL $label$55
	$14 = [19]
	goto $label$5 
	
.LABEL $label$54
	$14 = [14]
	goto $label$5 
	
.LABEL $label$53
	$14 = [10]
	goto $label$5 
	
.LABEL $label$52
	$14 = [0]
	goto $label$5 
	
.LABEL $label$51
	$14 = [0]
	goto $label$5 
	
.LABEL $label$50
	$14 = [11]
	goto $label$5 
	
.LABEL $label$49
	$14 = [1]
	goto $label$5 
	
.LABEL $label$48
	$14 = [1]
	goto $label$5 
	
.LABEL $label$47
	$14 = [13]
	goto $label$5 
	
.LABEL $label$46
	$14 = [2]
	goto $label$5 
	
.LABEL $label$45
	$14 = [5]
	goto $label$5 
	
.LABEL $label$44
	$14 = [4]
	goto $label$5 
	
.LABEL $label$43
	$14 = [27]
	goto $label$5 
	
.LABEL $label$42
	$14 = [27]
	goto $label$5 
	
.LABEL $label$41
	$14 = [23]
	goto $label$5 
	
.LABEL $label$40
	$14 = [20]
	goto $label$5 
	
.LABEL $label$39
	$14 = [8]
	goto $label$5 
	
.LABEL $label$38
	$14 = [9]
	goto $label$5 
	
.LABEL $label$37
	$14 = [14]
	goto $label$5 
	
.LABEL $label$36
	$14 = [10]
	goto $label$5 
	
.LABEL $label$35
	$14 = [14]
	goto $label$5 
	
.LABEL $label$34
	$14 = [16]
	goto $label$5 
	
.LABEL $label$33
	$14 = [22]
	goto $label$5 
	
.LABEL $label$32
	$14 = [21]
	goto $label$5 
	
.LABEL $label$31
	$14 = [19]
	goto $label$5 
	
.LABEL $label$30
	$14 = [26]
	goto $label$5 
	
.LABEL $label$29
	$14 = [53]
	goto $label$5 
	
.LABEL $label$28
	$14 = [42]
	goto $label$5 
	
.LABEL $label$27
	$14 = [31]
	goto $label$5 
	
.LABEL $label$26
	$14 = [33]
	goto $label$5 
	
.LABEL $label$25
	$14 = [32]
	goto $label$5 
	
.LABEL $label$24
	$14 = [61]
	goto $label$5 
	
.LABEL $label$23
	$14 = [61]
	goto $label$5 
	
.LABEL $label$22
	$14 = [60]
	goto $label$5 
	
.LABEL $label$21
	$14 = [57]
	goto $label$5 
	
.LABEL $label$20
	$14 = [36]
	goto $label$5 
	
.LABEL $label$19
	$14 = [37]
	goto $label$5 
	
.LABEL $label$18
	$14 = [38]
	goto $label$5 
	
.LABEL $label$17
	$14 = [45]
	goto $label$5 
	
.LABEL $label$16
	$14 = [49]
	goto $label$5 
	
.LABEL $label$15
	$14 = [40]
	goto $label$5 
	
.LABEL $label$14
	$14 = [40]
	goto $label$5 
	
.LABEL $label$13
	$14 = [51]
	goto $label$5 
	
.LABEL $label$12
	$14 = [41]
	goto $label$5 
	
.LABEL $label$11
	$14 = [52]
	goto $label$5 
	
.LABEL $label$10
	$14 = [46]
	goto $label$5 
	
.LABEL $label$9
	$14 = [48]
	goto $label$5 
	
.LABEL $label$8
	$14 = [59]
	goto $label$5 
	
.LABEL $label$7
	$14 = [58]
	goto $label$5 
	
.LABEL $label$6
	$14 = [56]
	goto $label$5 
	$14
}

void .FUNC $172 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$4 = ($global$0 - [16])
	$global$0 = $4
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$7 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$7 = *((*($6) + $7))
	
.LABEL $label$1
	*($4 + [4 align=4]) = (int_64)0
	$8 = ($4 | [4])
	*($4) = $8
	$10 = ($3 + [4])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$3 }
	$11 = [0]
	$12 = ($4 + [8])
	if ( ((int_32)$8 != (int_32)$8) ){ goto $label$4 }
	$13 = [29]
	goto $label$2 
	
.LABEL $label$4
	$13 = [3]
	goto $label$2 
	
.LABEL $label$3
	$13 = [30]
	
.LABEL $label$2
	
.LOOP $label$5:
	goto $label$39 
	
.LABEL $label$67
	$11 = *($4 + [4])
	$9 = $0
	if ( ((int_32)*($4) == (int_32)$8) ){ goto $label$36 }
	$13 = [3]
	goto $label$5 
	
.LABEL $label$66
	$0 = $11
	$5 = $8
	if ( ($11 == 0) ){ goto $label$19 }
	$13 = [4]
	goto $label$5 
	
.LABEL $label$65
	$3 = $0
	$0 = *($3 + [4])
	if ( $0 ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$64
	$3 = *($5 + [8])
	$0 = ((int_32)*($3) == (int_32)$5)
	$5 = $3
	if ( $0 ){ goto $label$18 }
	$13 = [5]
	goto $label$5 
	
.LABEL $label$63
	$14 = *(($9 + [16]))
	if ( (uint_64)(*($3 + [16]) <= $14) ){ goto $label$35 }
	$13 = [6]
	goto $label$5 
	
.LABEL $label$62
	if ( ($11 == 0) ){ goto $label$17 }
	$13 = [7]
	goto $label$5 
	
.LABEL $label$61
	$0 = $8
	$15 = *($11 + [16])
	if ( ((uint_64)$14 >= (uint_64)$15) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$60
	$0 = $11
	$11 = $3
	$15 = *($11 + [16])
	if ( ((uint_64)$14 >= (uint_64)$15) ){ goto $label$32 }
	$13 = [21]
	goto $label$5 
	
.LABEL $label$59
	$3 = *($11)
	if ( $3 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$58
	if ( ((uint_64)$15 >= (uint_64)$14) ){ goto $label$14 }
	$13 = [18]
	goto $label$5 
	
.LABEL $label$57
	$0 = ($11 + [4])
	$3 = *($11 + [4])
	if ( ($3 == 0) ){ goto $label$9 }
	$13 = [19]
	goto $label$5 
	
.LABEL $label$56
	$11 = $0
	goto $label$31 
	
.LABEL $label$55
	$3 = $8
	$13 = [25]
	goto $label$5 
	
.LABEL $label$54
	if ( ($11 == 0) ){ goto $label$6 }
	$13 = [26]
	goto $label$5 
	
.LABEL $label$53
	$0 = ($3 + [4])
	if ( (*($0) == 0) ){ goto $label$12 }
	$13 = [10]
	goto $label$5 
	
.LABEL $label$52
	$3 = *($9 + [4])
	if ( $3 ){ goto $label$28 }
	$13 = [11]
	goto $label$5 
	
.LABEL $label$51
	$0 = *($9 + [8])
	if ( ((int_32)*($0) == (int_32)$9) ){ goto $label$25 }
	$13 = [12]
	goto $label$5 
	
.LABEL $label$50
	$5 = ($9 + [8])
	$13 = [13]
	goto $label$5 
	
.LABEL $label$49
	$3 = *($5)
	$5 = ($3 + [8])
	$0 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($0)) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$48
	$3 = $8
	$0 = $8
	if ( *($0) ){ goto $label$13 }
	$13 = [14]
	goto $label$5 
	
.LABEL $label$47
	$11 = $0
	goto $label$11 
	
.LABEL $label$46
	$11 = $8
	$3 = $8
	goto $label$34 
	
.LABEL $label$45
	$3 = $11
	goto $label$33 
	
.LABEL $label$44
	$3 = $11
	if ( *($0) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$43
	$3 = $11
	$11 = $0
	$13 = [15]
	goto $label$5 
	
.LABEL $label$42
	*(($0 = CALL _Znwj([40])) + [16]) = *(($9 + [16]))
	CALL $183(($0 + [24]), ($9 + [24]))
	*($0 + [8]) = $3
	*($0) = (int_64)0
	*($11) = $0
	$3 = *(*($4))
	if ( ($3 == 0) ){ goto $label$10 }
	$13 = [16]
	goto $label$5 
	
.LABEL $label$41
	*($4) = $3
	$0 = *($11)
	$13 = [17]
	goto $label$5 
	
.LABEL $label$40
	CALL $111(*($4 + [4]), $0)
	*($12) = (*($12) + [1])
	$3 = *($9 + [4])
	if ( ($3 == 0) ){ goto $label$26 }
	$13 = [0]
	goto $label$5 
	
.LABEL $label$39
	$0 = $3
	$3 = *($0)
	if ( $3 ){ goto $label$27 }
	$13 = [1]
	goto $label$5 
	
.LABEL $label$38
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$22 }
	$13 = [30]
	goto $label$5 
	
.LABEL $label$37
	CALL void $6((int_32 $1), (int_64 $2), (int_64 $4), (int_32 $7))
	CALL $54($4, *($4 + [4]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$36
	$13 = [29]
	goto $label$5 
	
.LABEL $label$35
	$13 = [25]
	goto $label$5 
	
.LABEL $label$34
	$13 = [15]
	goto $label$5 
	
.LABEL $label$33
	$13 = [15]
	goto $label$5 
	
.LABEL $label$32
	$13 = [8]
	goto $label$5 
	
.LABEL $label$31
	$13 = [20]
	goto $label$5 
	
.LABEL $label$30
	$13 = [14]
	goto $label$5 
	
.LABEL $label$29
	$13 = [10]
	goto $label$5 
	
.LABEL $label$28
	$13 = [0]
	goto $label$5 
	
.LABEL $label$27
	$13 = [0]
	goto $label$5 
	
.LABEL $label$26
	$13 = [11]
	goto $label$5 
	
.LABEL $label$25
	$13 = [1]
	goto $label$5 
	
.LABEL $label$24
	$13 = [1]
	goto $label$5 
	
.LABEL $label$23
	$13 = [13]
	goto $label$5 
	
.LABEL $label$22
	$13 = [2]
	goto $label$5 
	
.LABEL $label$21
	$13 = [5]
	goto $label$5 
	
.LABEL $label$20
	$13 = [4]
	goto $label$5 
	
.LABEL $label$19
	$13 = [28]
	goto $label$5 
	
.LABEL $label$18
	$13 = [28]
	goto $label$5 
	
.LABEL $label$17
	$13 = [24]
	goto $label$5 
	
.LABEL $label$16
	$13 = [21]
	goto $label$5 
	
.LABEL $label$15
	$13 = [8]
	goto $label$5 
	
.LABEL $label$14
	$13 = [9]
	goto $label$5 
	
.LABEL $label$13
	$13 = [10]
	goto $label$5 
	
.LABEL $label$12
	$13 = [14]
	goto $label$5 
	
.LABEL $label$11
	$13 = [15]
	goto $label$5 
	
.LABEL $label$10
	$13 = [17]
	goto $label$5 
	
.LABEL $label$9
	$13 = [23]
	goto $label$5 
	
.LABEL $label$8
	$13 = [22]
	goto $label$5 
	
.LABEL $label$7
	$13 = [20]
	goto $label$5 
	
.LABEL $label$6
	$13 = [27]
	goto $label$5 
	$13
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [80]) + [24])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [72]) = ($2 + $5)
	*($4 + [64]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8622])
	CALL memcpy(($4 + [80]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8622])
	CALL memcpy((($4 + [80]) + [8]), ($2 + [8]), [8])
	*($4 + [68]) = ($2 + [16])
	CALL $45(($4 + [64]), (($4 + [80]) + [16]))
	CALL $46(($4 + [64]), ($4 + [108]))
	CALL $46(($4 + [64]), ($4 + [120]))
	*(($3 = ($4 + [8]))) = *($4 + [72])
	*($4) = *($4 + [64])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($6 = (($4 + [160]) + [8]))) = $3
	$7 = *($4)
	*($4 + [160]) = $7
	*($4 + [144]) = $7
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [160])
	*($4 + [32]) = $0
	*($4 + [176]) = $0
	*($4 + [56]) = [0]
	*($4 + [48]) = (int_64)5646012425221100912
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [16])
	CALL $47(($4 + [176]), ($4 + [80]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $205($2)
	
.LABEL $label$4
	$3 = *($4 + [120])
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [124])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$9
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [120]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$3 = *($4 + [108])
	if ( ($3 == 0) ){ goto $label$10 }
	$6 = ($4 + [112])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$14
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [108]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $3
	
.LABEL $label$11
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = *(($4 + [96]))
	if ( ($2 == 0) ){ goto $label$15 }
	*(($4 + [100])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$15
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $200(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10196])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $200(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [304])
	$global$0 = $5
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$5 }
	$6 = uint_32($6 >> [1])
	$7 = ($4 + [1])
	$8 = CALL $199([8192])
	if ( ($8 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = *($4 + [4])
	$7 = *($4 + [8])
	$8 = CALL $199([8192])
	if ( $8 ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [-7]
	goto $label$2 
	
.LABEL $label$3
	$9 = ($7 + $6)
	if ( ((int_32)$6 < (int_32)$8) ){ goto $label$7 }
	$10 = $7
	
.LOOP $label$8:
	$6 = (($6 - $8) + [1])
	if ( ($6 == 0) ){ goto $label$7 }
	$6 = CALL $197($10, [59], $6)
	if ( ($6 == 0) ){ goto $label$7 }
	if ( (CALL $198($6, [8192], $8) == 0) ){ goto $label$6 }
	$10 = ($6 + [1])
	$6 = ($9 - $10)
	if ( ((int_32)$6 >= (int_32)$8) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = $9
	
.LABEL $label$6
	$6 = ( [-8] ? (([-7] - $7) + $6) : ((int_32)$6 == (int_32)$9) )
	
.LABEL $label$2
	$6 = CALL $184(($5 + [288]), $4, [7], $6, $4)
	$8 = *($5 + [288])
	$10 = CALL $199([8194])
	if ( ((int_32)$10 != (int_32)( *($6 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$16 }
	if ( (CALL $192($6, [0], [-1], [8194], $10) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$8 = *($5 + [288])
	$10 = ($6 + [4])
	$9 = CALL $199([8285])
	if ( ((int_32)$9 != (int_32)( *($10) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$17 }
	if ( (CALL $192($6, [0], [-1], [8285], $9) == 0) ){ goto $label$14 }
	
.LABEL $label$17
	$8 = *($5 + [288])
	$9 = CALL $199([8293])
	if ( ((int_32)$9 != (int_32)( *($10) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$18 }
	if ( (CALL $192($6, [0], [-1], [8293], $9) == 0) ){ goto $label$13 }
	
.LABEL $label$18
	$8 = *($5 + [288])
	$10 = ($6 + [4])
	$9 = CALL $199([8300])
	if ( ((int_32)$9 != (int_32)( *($10) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$19 }
	if ( (CALL $192($6, [0], [-1], [8300], $9) == 0) ){ goto $label$12 }
	
.LABEL $label$19
	$8 = *($5 + [288])
	$9 = CALL $199([8311])
	if ( ((int_32)$9 != (int_32)( *($10) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$20 }
	if ( (CALL $192($6, [0], [-1], [8311], $9) == 0) ){ goto $label$11 }
	
.LABEL $label$20
	$8 = *($5 + [288])
	$10 = CALL $199([8317])
	if ( ((int_32)$10 != (int_32)( *(($6 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$10 }
	if ( CALL $192($6, [0], [-1], [8317], $10) ){ goto $label$10 }
	*(($10 = (($5 + [112]) + [8]))) = *(($3 + [8]))
	*($5 + [112]) = *($3)
	$8 = CALL $183(($5 + [96]), $4)
	*((($5 + [80]) + [8])) = *($10)
	*($5 + [80]) = *($5 + [112])
	CALL $38($0, $1, $2, ($5 + [80]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($8 + [8]))
	if ( (*($5 + [288]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$15
	*(($10 = (($5 + [272]) + [8]))) = *(($3 + [8]))
	*($5 + [272]) = *($3)
	$8 = CALL $183(($5 + [256]), $4)
	*(($5 + [8])) = *($10)
	*($5) = *($5 + [272])
	CALL $39($0, $1, $2, $5, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($8 + [8]))
	if ( (*($5 + [288]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$14
	*(($10 = (($5 + [240]) + [8]))) = *(($3 + [8]))
	*($5 + [240]) = *($3)
	$8 = CALL $183(($5 + [224]), $4)
	*((($5 + [16]) + [8])) = *($10)
	*($5 + [16]) = *($5 + [240])
	CALL $40($0, $1, $2, ($5 + [16]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($8 + [8]))
	if ( (*($5 + [288]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$13
	*(($10 = (($5 + [208]) + [8]))) = *(($3 + [8]))
	*($5 + [208]) = *($3)
	$8 = CALL $183(($5 + [192]), $4)
	*((($5 + [32]) + [8])) = *($10)
	*($5 + [32]) = *($5 + [208])
	CALL $41($0, $1, $2, ($5 + [32]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($8 + [8]))
	if ( (*($5 + [288]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$12
	*(($10 = (($5 + [176]) + [8]))) = *(($3 + [8]))
	*($5 + [176]) = *($3)
	$8 = CALL $183(($5 + [160]), $4)
	*((($5 + [48]) + [8])) = *($10)
	*($5 + [48]) = *($5 + [176])
	CALL $42($0, $1, $2, ($5 + [48]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($8 + [8]))
	if ( (*($5 + [288]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$11
	*(($10 = (($5 + [144]) + [8]))) = *(($3 + [8]))
	*($5 + [144]) = *($3)
	$8 = CALL $183(($5 + [128]), $4)
	*((($5 + [64]) + [8])) = *($10)
	*($5 + [64]) = *($5 + [144])
	CALL $43($0, $1, $2, ($5 + [64]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$10
	if ( ((*($5 + [288]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$9
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [304])
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [88]) + [24])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $5)
	*($4 + [176]) = ($4 + [72])
	*($4 + [24]) = ($4 + [88])
	CALL $36(($4 + [24]), ($4 + [176]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [80])
	*($4 + [8]) = *($4 + [72])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($6 = (($4 + [160]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [160]) = $7
	*($4 + [144]) = $7
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [160])
	*($4 + [40]) = $0
	*($4 + [176]) = $0
	*($4 + [64]) = [0]
	*($4 + [56]) = (int_64)5646012425221100912
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [24])
	CALL $37(($4 + [176]), ($4 + [88]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [120]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $205($2)
	$2 = [1]
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [128])))
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return $2
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *(*($3 + [4]))
	*($1 + [8]) = $4
	$5 = *($0)
	CALL eosio_assert(((uint_64)((int_64)*(*(*($3 + [8]) + [4]) + [24]) * (int_64)100) <= (uint_64)$4), [8959])
	$4 = *(*(*($3 + [8]) + [4]) + [24])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)((int_64)$4 * (int_64)-100))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)((int_64)$4 * (int_64)100))
	CALL eosio_assert([1], [8682])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($5 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $4, $2, [24])
	if ( (uint_64)($4 <= *($5 + [16])) ){ goto $label$1 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [336])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [332]) = [0]
	*($3 + [328]) = [1]
	*($3 + [160]) = *($3 + [328])
	CALL $5($0, (int_64)6138663591592764928, ($3 + [160]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	if ( ((int_64)$2 > (int_64)4849591932240265215) ){ goto $label$21 }
	if ( ((int_64)$2 > (int_64)-3109888186206126081) ){ goto $label$20 }
	if ( ((int_64)$2 <= (int_64)-5002754507398971393) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-5002754507398971392) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-4157608698681753600) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-4157529782108553216) ){ goto $label$2 }
	*($3 + [316]) = [0]
	*($3 + [312]) = [2]
	*($3 + [8]) = *($3 + [312])
	CALL $7($1, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$21
	if ( ((int_64)$2 > (int_64)6182744206297343871) ){ goto $label$19 }
	if ( ((int_64)$2 <= (int_64)4929617908399603711) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)4929617908399603712) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)5551967173599035392) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)6112162363668955136) ){ goto $label$2 }
	*($3 + [308]) = [0]
	*($3 + [304]) = [3]
	*($3 + [16]) = *($3 + [304])
	CALL $9($1, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$20
	if ( ((int_64)$2 <= (int_64)-2039331483126071297) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)-2039331483126071296) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)3626388803173416960) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)3631284043333838336) ){ goto $label$2 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [4]
	*($3 + [96]) = *($3 + [224])
	CALL $11($1, $1, ($3 + [96]))
	goto $label$2 
	
.LABEL $label$19
	if ( ((int_64)$2 <= (int_64)6182744308182941695) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)6182744308182941696) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)6182744314670481408) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)6182744516614444032) ){ goto $label$2 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [5]
	*($3 + [64]) = *($3 + [256])
	CALL $13($1, $1, ($3 + [64]))
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-8279611178955571200) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-5861738156893667328) ){ goto $label$2 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [6]
	*($3 + [104]) = *($3 + [216])
	CALL $15($1, $1, ($3 + [104]))
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)4849591932240265216) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4923678896342171648) ){ goto $label$2 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [7]
	*($3 + [112]) = *($3 + [208])
	CALL $17($1, $1, ($3 + [112]))
	goto $label$2 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)-3109888186206126080) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-3070536685861071488) ){ goto $label$2 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [8]
	*($3 + [40]) = *($3 + [280])
	CALL $19($1, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)6182744206297343872) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)6182744210987286528) ){ goto $label$2 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [9]
	*($3 + [120]) = *($3 + [200])
	CALL $13($1, $1, ($3 + [120]))
	goto $label$2 
	
.LABEL $label$14
	*($3 + [244]) = [0]
	*($3 + [240]) = [10]
	*($3 + [80]) = *($3 + [240])
	CALL $15($1, $1, ($3 + [80]))
	goto $label$2 
	
.LABEL $label$13
	*($3 + [324]) = [0]
	*($3 + [320]) = [11]
	*($3) = *($3 + [320])
	CALL $15($1, $1, $3)
	goto $label$2 
	
.LABEL $label$12
	*($3 + [292]) = [0]
	*($3 + [288]) = [12]
	*($3 + [32]) = *($3 + [288])
	CALL $17($1, $1, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$11
	*($3 + [300]) = [0]
	*($3 + [296]) = [13]
	*($3 + [24]) = *($3 + [296])
	CALL $11($1, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$10
	*($3 + [196]) = [0]
	*($3 + [192]) = [14]
	*($3 + [128]) = *($3 + [192])
	CALL $26($1, $1, ($3 + [128]))
	goto $label$2 
	
.LABEL $label$9
	*($3 + [180]) = [0]
	*($3 + [176]) = [15]
	*($3 + [144]) = *($3 + [176])
	CALL $28($1, $1, ($3 + [144]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [252]) = [0]
	*($3 + [248]) = [16]
	*($3 + [72]) = *($3 + [248])
	CALL $13($1, $1, ($3 + [72]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [268]) = [0]
	*($3 + [264]) = [17]
	*($3 + [56]) = *($3 + [264])
	CALL $13($1, $1, ($3 + [56]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [172]) = [0]
	*($3 + [168]) = [18]
	*($3 + [152]) = *($3 + [168])
	CALL $32($1, $1, ($3 + [152]))
	goto $label$2 
	
.LABEL $label$5
	*($3 + [188]) = [0]
	*($3 + [184]) = [19]
	*($3 + [136]) = *($3 + [184])
	CALL $13($1, $1, ($3 + [136]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [236]) = [0]
	*($3 + [232]) = [20]
	*($3 + [88]) = *($3 + [232])
	CALL $15($1, $1, ($3 + [88]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [276]) = [0]
	*($3 + [272]) = [21]
	*($3 + [48]) = *($3 + [272])
	CALL $13($1, $1, ($3 + [48]))
	
.LABEL $label$2
	CALL $195([0])
	$global$0 = ($3 + [336])
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $188($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8599])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $202($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([120])) + [64]) = (int_64)0
	*($5 + [84 align=4]) = (int_64)0
	*($5 + [96 align=4]) = (int_64)0
	*($5 + [104]) = $0
	*($5 + [80]) = ($5 + [84])
	*($5 + [92]) = ($5 + [96])
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	*($3 + [80]) = ($5 + [76])
	*($3 + [84]) = ($5 + [80])
	*($3 + [88]) = ($5 + [92])
	CALL $110(($3 + [40]), ($3 + [32]))
	*($5 + [108]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $107(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $205($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $54(($1 + [92]), *(($1 + [96])))
	CALL $55(($1 + [80]), *(($1 + [84])))
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9363])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9468])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9401])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9468])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [96])
	$global$0 = $5
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	$6 = *($3)
	$7 = *($3 + [8])
	*(($5 + [8])) = $7
	*($5 + [32]) = $7
	*($5) = $6
	*($5 + [24]) = $6
	CALL $94($0, $5)
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8397])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$3 }
	$8 = uint_32($8 >> [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($4 + [4])
	
.LABEL $label$2
	$8 = CALL $184(($5 + [24]), $4, [20], ($8 + [-20]), $4)
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$9 = ( *($8 + [8]) ? ($8 + [1]) : (*($5 + [24]) & [1]) )
	$4 = CALL $199($9)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$8 }
	*($5 + [80]) = ($4 << [1])
	$10 = (($5 + [80]) | [1])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$11 = (($4 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [80]) = ($11 | [1])
	*($5 + [88]) = $10
	*($5 + [84]) = $4
	
.LABEL $label$7
	CALL memcpy($10, $9, $4)
	
.LABEL $label$6
	*(($10 + $4)) = [0]
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($8 + [8])))
	
.LABEL $label$9
	*(($5 + [32])) = [0]
	*($5 + [24]) = (int_64)0
	$4 = CALL $199([8326])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$12 }
	*($5 + [24]) = ($4 << [1])
	$8 = (($5 + [24]) | [1])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$10 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($5 + [24]) = ($10 | [1])
	*($5 + [32]) = $8
	*($5 + [28]) = $4
	
.LABEL $label$11
	CALL memcpy($8, [8326], $4)
	
.LABEL $label$10
	*(($8 + $4)) = [0]
	CALL $1(($5 + [64]), ($5 + [80]), ($5 + [24]))
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($5 + [32]))
	
.LABEL $label$13
	CALL eosio_assert(((int_32)(*($5 + [68]) - *($5 + [64])) == (int_32)[12]), [9081])
	$4 = *($5 + [64])
	if ( (*($4) & [1]) ){ goto $label$15 }
	$4 = ($4 + [1])
	goto $label$14 
	
.LABEL $label$15
	$4 = *($4 + [8])
	
.LABEL $label$14
	$8 = CALL $196($4)
	CALL eosio_assert((($8 + [-1]) <= [99]), [9101])
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$6 = *($0)
	*($5 + [24]) = $6
	*($5 + [32]) = (int_64)7235159537265672192
	$4 = [0]
	$8 = CALL db_find_i64($6, (int_64)7235159537265672192, (int_64)-4816269947984412672, (CASTING int_64)(int_32 $8))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$16 }
	$4 = CALL $49(($5 + [24]), $8)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($5 + [24])), [8548])
	
.LABEL $label$16
	$8 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($8, [9122])
	$6 = *($0)
	*($5 + [16]) = $3
	CALL eosio_assert($8, [8688])
	CALL $102(($5 + [24]), $4, $6, ($5 + [16]))
	$3 = *($5 + [48])
	if ( ($3 == 0) ){ goto $label$17 }
	$8 = ($5 + [52])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL $54(($4 + [92]), *(($4 + [96])))
	CALL $55(($4 + [80]), *(($4 + [84])))
	CALL _ZdlPv($4)
	
.LABEL $label$21
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$20 }
	$4 = *(($5 + [48]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $3
	
.LABEL $label$18
	*($8) = $3
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$3 = *($5 + [64])
	if ( ($3 == 0) ){ goto $label$22 }
	$0 = *($5 + [68])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = ($0 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($0 + [-4])))
	
.LABEL $label$26
	$0 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$25 }
	$4 = *($5 + [64])
	goto $label$23 
	
.LABEL $label$24
	$4 = $3
	
.LABEL $label$23
	*($5 + [68]) = $3
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($5 + [88]))
	
.LABEL $label$27
	$global$0 = ($5 + [96])
	return (unreachable)
	
.LABEL $label$5
	CALL $182(($5 + [80]))
	
.LABEL $label$4
	CALL $182(($5 + [24]))
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [192])
	$global$0 = $5
	$6 = *(($3 + [8]))
	*((($5 + [168]) + [8])) = $6
	$7 = *($3)
	*(($5 + [8])) = $6
	*($5 + [184]) = $1
	*($5 + [168]) = $7
	*($5) = $7
	CALL $94($0, $5)
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$2 }
	$8 = uint_32($8 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$8 = *($4 + [4])
	
.LABEL $label$1
	$8 = CALL $184(($5 + [80]), $4, [25], ($8 + [-25]), $4)
	*(($5 + [160])) = [0]
	*($5 + [152]) = (int_64)0
	$9 = ( *($8 + [8]) ? ($8 + [1]) : (*($5 + [80]) & [1]) )
	$4 = CALL $199($9)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*($5 + [152]) = ($4 << [1])
	$10 = (($5 + [152]) | [1])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = (($4 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [152]) = ($11 | [1])
	*($5 + [160]) = $10
	*($5 + [156]) = $4
	
.LABEL $label$6
	CALL memcpy($10, $9, $4)
	
.LABEL $label$5
	*(($10 + $4)) = [0]
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($8 + [8])))
	
.LABEL $label$8
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$4 = CALL $199([8326])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [80]) = ($4 << [1])
	$8 = (($5 + [80]) | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$10 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($5 + [80]) = ($10 | [1])
	*($5 + [88]) = $8
	*($5 + [84]) = $4
	
.LABEL $label$10
	CALL memcpy($8, [8326], $4)
	
.LABEL $label$9
	*(($8 + $4)) = [0]
	CALL $1(($5 + [136]), ($5 + [152]), ($5 + [80]))
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($5 + [88]))
	
.LABEL $label$12
	CALL eosio_assert(((int_32)(*($5 + [140]) - *($5 + [136])) == (int_32)[12]), [9034])
	$4 = *($5 + [136])
	if ( (*($4) & [1]) ){ goto $label$14 }
	$4 = ($4 + [1])
	goto $label$13 
	
.LABEL $label$14
	$4 = *($4 + [8])
	
.LABEL $label$13
	$8 = CALL $196($4)
	$11 = CALL $183(($5 + [120]), (*($5 + [136]) + [12]))
	$4 = [0]
	*((($5 + [80]) + [32])) = [0]
	*($5 + [88]) = (int_64)7235159537265672192
	*($5 + [96]) = (int_64)-1
	*($5 + [104]) = (int_64)0
	$7 = *($0)
	*($5 + [80]) = $7
	*((($5 + [40]) + [32])) = [0]
	*($5 + [48]) = (int_64)7235159537265672192
	*($5 + [40]) = $7
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	$8 = CALL db_find_i64($7, (int_64)7235159537265672192, (int_64)-4816269947984412672, (CASTING int_64)(int_32 $8))
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$16 }
	$4 = CALL $49(($5 + [80]), $8)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($5 + [80])), [8548])
	*($5 + [36]) = $4
	$4 = ((int_32)*($4 + [76]) ^ (int_32)[1])
	*($5 + [32]) = ($5 + [80])
	goto $label$15 
	
.LABEL $label$16
	*($5 + [36]) = [0]
	*($5 + [32]) = ($5 + [80])
	
.LABEL $label$15
	CALL eosio_assert($4, [8915])
	$7 = *($5 + [184])
	$8 = *(($5 + [68]))
	$9 = *(($5 + [64]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$18 }
	
.LOOP $label$20:
	$4 = ($8 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$7) ){ goto $label$19 }
	$8 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($5 + [40])), [8548])
	goto $label$17 
	
.LABEL $label$18
	$10 = [0]
	$4 = CALL db_find_i64(*($5 + [40]), *(($5 + [48])), (int_64)3607749779137757184, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$17 }
	$10 = CALL $77(($5 + [40]), $4)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($5 + [40])), [8548])
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8938])
	$7 = *($0)
	$4 = *($5 + [36])
	*($5 + [20]) = $11
	*($5 + [24]) = $3
	*($5 + [16]) = ($5 + [184])
	*($5 + [28]) = ($5 + [32])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8688])
	CALL $101(($5 + [80]), $4, $7, ($5 + [16]))
	$10 = *($5 + [64])
	if ( ($10 == 0) ){ goto $label$21 }
	$9 = ($5 + [68])
	$4 = *($9)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	CALL _ZdlPv($8)
	
.LABEL $label$25
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($5 + [64]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $10
	
.LABEL $label$22
	*($9) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$21
	$10 = *($5 + [104])
	if ( ($10 == 0) ){ goto $label$26 }
	$9 = ($5 + [108])
	$8 = *($9)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$28 }
	
.LOOP $label$29:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL $54(($4 + [92]), *(($4 + [96])))
	CALL $55(($4 + [80]), *(($4 + [84])))
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$29 }
	$4 = *(($5 + [104]))
	goto $label$27 
	
.LABEL $label$28
	$4 = $10
	
.LABEL $label$27
	*($9) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$26
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($11 + [8]))
	
.LABEL $label$31
	$10 = *($5 + [136])
	if ( ($10 == 0) ){ goto $label$32 }
	$8 = *($5 + [140])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$34 }
	
.LOOP $label$35:
	$4 = ($8 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$36
	$8 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$35 }
	$4 = *($5 + [136])
	goto $label$33 
	
.LABEL $label$34
	$4 = $10
	
.LABEL $label$33
	*($5 + [140]) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$32
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($5 + [160]))
	
.LABEL $label$37
	$global$0 = ($5 + [192])
	return (unreachable)
	
.LABEL $label$4
	CALL $182(($5 + [152]))
	
.LABEL $label$3
	CALL $182(($5 + [80]))
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = *(($3 + [8]))
	*((($5 + [72]) + [8])) = $6
	$7 = *($3)
	*(($5 + [8])) = $6
	*($5 + [72]) = $7
	*($5) = $7
	*($5 + [88]) = $1
	CALL $94($0, $5)
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	$7 = *($0)
	*($5 + [32]) = $7
	*($5 + [40]) = (int_64)7235159537265672192
	$8 = CALL db_find_i64($7, (int_64)7235159537265672192, (int_64)3607749779137757184, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $77(($5 + [32]), $8)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($5 + [32])), [8548])
	$1 = *($0)
	*($5 + [24]) = $3
	CALL eosio_assert([1], [8688])
	CALL $99(($5 + [32]), $8, $1, ($5 + [24]))
	$8 = *($5 + [56])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($5 + [28]) = $3
	*($5 + [24]) = ($5 + [88])
	CALL $100(($5 + [16]), ($5 + [32]), $1, ($5 + [24]))
	$8 = *($5 + [56])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = ($5 + [60])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $8
	
.LABEL $label$4
	*($9) = $8
	CALL _ZdlPv($0)
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [192])
	$global$0 = $5
	$6 = *(($3 + [8]))
	*((($5 + [168]) + [8])) = $6
	$7 = *($3)
	*(($5 + [8])) = $6
	*($5 + [184]) = $1
	*($5 + [168]) = $7
	*($5) = $7
	CALL $94($0, $5)
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$2 }
	$8 = uint_32($8 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$8 = *($4 + [4])
	
.LABEL $label$1
	$8 = CALL $184(($5 + [80]), $4, [22], ($8 + [-22]), $4)
	*(($5 + [160])) = [0]
	*($5 + [152]) = (int_64)0
	$9 = ( *($8 + [8]) ? ($8 + [1]) : (*($5 + [80]) & [1]) )
	$4 = CALL $199($9)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*($5 + [152]) = ($4 << [1])
	$10 = (($5 + [152]) | [1])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = (($4 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [152]) = ($11 | [1])
	*($5 + [160]) = $10
	*($5 + [156]) = $4
	
.LABEL $label$6
	CALL memcpy($10, $9, $4)
	
.LABEL $label$5
	*(($10 + $4)) = [0]
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($8 + [8])))
	
.LABEL $label$8
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$4 = CALL $199([8326])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [80]) = ($4 << [1])
	$8 = (($5 + [80]) | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$10 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($5 + [80]) = ($10 | [1])
	*($5 + [88]) = $8
	*($5 + [84]) = $4
	
.LABEL $label$10
	CALL memcpy($8, [8326], $4)
	
.LABEL $label$9
	*(($8 + $4)) = [0]
	CALL $1(($5 + [136]), ($5 + [152]), ($5 + [80]))
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($5 + [88]))
	
.LABEL $label$12
	CALL eosio_assert(((int_32)(*($5 + [140]) - *($5 + [136])) == (int_32)[24]), [8892])
	$4 = *($5 + [136])
	if ( (*($4) & [1]) ){ goto $label$14 }
	$4 = ($4 + [1])
	goto $label$13 
	
.LABEL $label$14
	$4 = *($4 + [8])
	
.LABEL $label$13
	$8 = CALL $196($4)
	$12 = CALL $183(($5 + [120]), (*($5 + [136]) + [12]))
	$4 = [0]
	*((($5 + [80]) + [32])) = [0]
	*($5 + [88]) = (int_64)7235159537265672192
	*($5 + [96]) = (int_64)-1
	*($5 + [104]) = (int_64)0
	$7 = *($0)
	*($5 + [80]) = $7
	*((($5 + [40]) + [32])) = [0]
	*($5 + [48]) = (int_64)7235159537265672192
	*($5 + [40]) = $7
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	$8 = CALL db_find_i64($7, (int_64)7235159537265672192, (int_64)-4816269947984412672, (CASTING int_64)(int_32 $8))
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$16 }
	$4 = CALL $49(($5 + [80]), $8)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($5 + [80])), [8548])
	*($5 + [36]) = $4
	$4 = ((int_32)*($4 + [76]) ^ (int_32)[1])
	*($5 + [32]) = ($5 + [80])
	$11 = (($5 + [32]) | [4])
	goto $label$15 
	
.LABEL $label$16
	*($5 + [36]) = [0]
	*($5 + [32]) = ($5 + [80])
	$11 = (($5 + [32]) | [4])
	
.LABEL $label$15
	CALL eosio_assert($4, [8915])
	$7 = *($5 + [184])
	$8 = *(($5 + [68]))
	$9 = *(($5 + [64]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$18 }
	
.LOOP $label$20:
	$4 = ($8 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$7) ){ goto $label$19 }
	$8 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($5 + [40])), [8548])
	goto $label$17 
	
.LABEL $label$18
	$10 = [0]
	$4 = CALL db_find_i64(*($5 + [40]), *(($5 + [48])), (int_64)3607749779137757184, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$17 }
	$10 = CALL $77(($5 + [40]), $4)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($5 + [40])), [8548])
	
.LABEL $label$17
	$4 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($4, [8938])
	CALL eosio_assert(((uint_64)*($10 + [8]) >= (uint_64)((int_64)*(*($11) + [24]) * (int_64)100)), [8959])
	$7 = *($0)
	*($5 + [16]) = ($5 + [32])
	CALL eosio_assert($4, [8688])
	CALL $97(($5 + [40]), $10, $7, ($5 + [16]))
	$4 = [0]
	$7 = *($3)
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$21 }
	$4 = [0]
	$8 = *($11)
	if ( (uint_64)($7 <= *($8 + [8])) ){ goto $label$21 }
	$4 = ((uint_64)$7 <= (uint_64)*($8 + [16]))
	
.LABEL $label$21
	CALL eosio_assert($4, [8983])
	$7 = *($0)
	$4 = *($5 + [36])
	*($5 + [20]) = $12
	*($5 + [24]) = $3
	*($5 + [16]) = ($5 + [184])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8688])
	CALL $98(($5 + [80]), $4, $7, ($5 + [16]))
	$10 = *($5 + [64])
	if ( ($10 == 0) ){ goto $label$22 }
	$9 = ($5 + [68])
	$4 = *($9)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$26 }
	CALL _ZdlPv($8)
	
.LABEL $label$26
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$25 }
	$4 = *(($5 + [64]))
	goto $label$23 
	
.LABEL $label$24
	$4 = $10
	
.LABEL $label$23
	*($9) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$10 = *($5 + [104])
	if ( ($10 == 0) ){ goto $label$27 }
	$9 = ($5 + [108])
	$8 = *($9)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$29 }
	
.LOOP $label$30:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$31 }
	CALL $54(($4 + [92]), *(($4 + [96])))
	CALL $55(($4 + [80]), *(($4 + [84])))
	CALL _ZdlPv($4)
	
.LABEL $label$31
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$30 }
	$4 = *(($5 + [104]))
	goto $label$28 
	
.LABEL $label$29
	$4 = $10
	
.LABEL $label$28
	*($9) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$27
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($12 + [8]))
	
.LABEL $label$32
	$10 = *($5 + [136])
	if ( ($10 == 0) ){ goto $label$33 }
	$8 = *($5 + [140])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$35 }
	
.LOOP $label$36:
	$4 = ($8 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$37
	$8 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$36 }
	$4 = *($5 + [136])
	goto $label$34 
	
.LABEL $label$35
	$4 = $10
	
.LABEL $label$34
	*($5 + [140]) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$33
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($5 + [160]))
	
.LABEL $label$38
	$global$0 = ($5 + [192])
	return (unreachable)
	
.LABEL $label$4
	CALL $182(($5 + [152]))
	
.LABEL $label$3
	CALL $182(($5 + [80]))
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = [0]
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$3 }
	$5 = CALL _Znwj($5)
	*(($2 + [40])) = ($5 + ($6 << [3]))
	*($2 + [32]) = $5
	*($2 + [36]) = $5
	$7 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $7)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($5, $7, $6)
	*($2 + [36]) = ($5 + $6)
	
.LABEL $label$4
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$5 = (*(($1 + [32])) - *($1 + [28]))
	$6 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = CALL _Znwj($5)
	*(($2 + [24])) = ($5 + ((int_32)$6 * (int_32)[12]))
	*($2 + [16]) = $5
	*($2 + [20]) = $5
	$7 = *(($1 + [32]))
	$6 = *(($1 + [28]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = CALL $183($5, $6)
	$5 = ($5 + [12])
	$6 = ($6 + [12])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$6 }
	*($2 + [20]) = ($8 + [12])
	
.LABEL $label$5
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$5 = (*(($1 + [44])) - *($1 + [40]))
	$6 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($2 + [8])) = ($5 + ((int_32)$6 * (int_32)[12]))
	*($2) = $5
	*($2 + [4]) = $5
	$7 = *(($1 + [44]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = CALL $183($5, $6)
	$5 = ($5 + [12])
	$6 = ($6 + [12])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$8 }
	*($2 + [4]) = ($8 + [12])
	
.LABEL $label$7
	CALL $170($0, $4, $3, ($2 + [32]), ($2 + [16]), $2)
	$7 = *($2)
	if ( ($7 == 0) ){ goto $label$9 }
	$6 = *($2 + [4])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$13
	$6 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$12 }
	$5 = *($2)
	goto $label$10 
	
.LABEL $label$11
	$5 = $7
	
.LABEL $label$10
	*($2 + [4]) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$7 = *($2 + [16])
	if ( ($7 == 0) ){ goto $label$14 }
	$6 = *($2 + [20])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$18
	$6 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	$5 = *($2 + [16])
	goto $label$15 
	
.LABEL $label$16
	$5 = $7
	
.LABEL $label$15
	*($2 + [20]) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$19 }
	*($2 + [36]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $193(($2 + [32]))
	
.LABEL $label$2
	CALL $193(($2 + [16]))
	
.LABEL $label$1
	CALL $193($2)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8627])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $169($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $112($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8627])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $142($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [8622])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $44 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [200]) = $1
	*(($3 + [192])) = [0]
	*($3 + [176]) = (int_64)-1
	*($3 + [184]) = (int_64)0
	$1 = *($0)
	*($3 + [160]) = $1
	*($3 + [168]) = (int_64)7235159537265672192
	$4 = [0]
	$5 = CALL db_find_i64($1, (int_64)7235159537265672192, (int_64)-4816269947984412672, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $49(($3 + [160]), $5)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($3 + [160])), [8548])
	
.LABEL $label$1
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [9219])
	$7 = ($4 + [84])
	$5 = *($7)
	if ( ($5 == 0) ){ goto $label$3 }
	$2 = *($3 + [200])
	$8 = $7
	
.LOOP $label$4:
	$9 = (uint_64)(*($5 + [16]) <= $2)
	$8 = ( $8 ? $5 : $9 )
	$5 = *(($5 + ($9 << [2])))
	if ( $5 ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$3 }
	if ( ((uint_64)$2 >= (uint_64)*($8 + [16])) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = $7
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$8 != (int_32)$7), [9240])
	$10 = *($8 + [24])
	$2 = *($0)
	*($3 + [16]) = ($3 + [200])
	CALL eosio_assert($6, [8688])
	CALL $129(($3 + [160]), $4, $2, ($3 + [16]))
	if ( (int_64)($10 == 0) ){ goto $label$6 }
	$5 = CALL $199([8411])
	if ( ($5 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8450])
	goto $label$9 
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = (int_64)0
	
.LOOP $label$11:
	$8 = *(($5 + [8410]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8495])
	
.LABEL $label$12
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$11 }
	$1 = ((int_64)$2 << (int_64)8)
	goto $label$7 
	
.LABEL $label$8
	$1 = (int_64)0
	
.LABEL $label$7
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9272])
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	$11 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$2 = $1
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$2 = $1
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$17 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$8 = [0]
	
.LABEL $label$13
	CALL eosio_assert($8, [9321])
	*($3 + [104]) = (int_64)3617214756542218240
	*($3 + [96]) = *($0)
	*(($3 + [88])) = [0]
	*($3 + [80]) = (int_64)0
	$5 = CALL $199([9262])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$20 }
	*($3 + [80]) = ($5 << [1])
	$8 = (($3 + [80]) | [1])
	if ( $5 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($3 + [80]) = ($9 | [1])
	*($3 + [88]) = $8
	*($3 + [84]) = $5
	
.LABEL $label$19
	CALL memcpy($8, [9262], $5)
	
.LABEL $label$18
	*(($8 + $5)) = [0]
	*(($3 + [40])) = $11
	$5 = ($3 + [88])
	*(($3 + [56])) = *($5)
	*($5) = [0]
	*($3 + [32]) = $10
	*($3 + [16]) = *($0)
	*($3 + [24]) = *($3 + [200])
	*($3 + [48]) = *($3 + [80])
	*($3 + [80]) = (int_64)0
	$5 = CALL $79(($3 + [120]), ($3 + [96]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [16]))
	CALL $80($3, $5)
	$8 = *($3)
	CALL send_inline($8, (*($3 + [4]) - $8))
	$8 = *($3)
	if ( ($8 == 0) ){ goto $label$21 }
	*($3 + [4]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$21
	$8 = *($5 + [28])
	if ( ($8 == 0) ){ goto $label$22 }
	*(($5 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$22
	$8 = *($5 + [16])
	if ( ($8 == 0) ){ goto $label$23 }
	*(($5 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$23
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$24
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$6
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	$2 = *($0)
	*($3 + [120]) = $2
	*($3 + [128]) = (int_64)7235159537265672192
	$5 = CALL $77(($3 + [120]), CALL $fimport$6($2, (int_64)7235159537265672192, (int_64)3607749779137757184, *($3 + [200])))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [120])), [8548])
	if ( (int_64)(*($5 + [16]) == 0) ){ goto $label$25 }
	$2 = CALL current_time()
	*(($3 + [44])) = (int_64)0
	*(($3 + [60])) = (int_64)0
	*(($3 + [68])) = (int_64)0
	*($3 + [28]) = [0]
	*($3 + [32]) = [0]
	*($3 + [36 align=4]) = (int_64)0
	*($3 + [52 align=4]) = (int_64)0
	*($3 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($3 + [104]) = (int_64)3617214756542218240
	*($3 + [96]) = *($0)
	*($3 + [80]) = (int_64)-3109888186206126080
	*($3) = *($3 + [200])
	*($3 + [8]) = *(($5 + [16]))
	CALL $84(($3 + [52]), ($3 + [96]), $0, ($3 + [80]), $3)
	$2 = *($0)
	$1 = *($3 + [200])
	*($3 + [36]) = [1]
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = $1
	CALL $85($3, ($3 + [16]))
	$5 = *($3)
	CALL send_deferred(($3 + [96]), $2, $5, (*($3 + [4]) - $5), [0])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$26 }
	*($3 + [4]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$26
	CALL $87(($3 + [16]))
	
.LABEL $label$25
	$9 = *($3 + [144])
	if ( ($9 == 0) ){ goto $label$27 }
	$0 = ($3 + [148])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$29 }
	
.LOOP $label$30:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$31 }
	CALL _ZdlPv($8)
	
.LABEL $label$31
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$30 }
	$5 = *(($3 + [144]))
	goto $label$28 
	
.LABEL $label$29
	$5 = $9
	
.LABEL $label$28
	*($0) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$27
	$9 = *($3 + [184])
	if ( ($9 == 0) ){ goto $label$32 }
	$0 = ($3 + [188])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$34 }
	
.LOOP $label$35:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$36 }
	CALL $54(($5 + [92]), *(($5 + [96])))
	CALL $55(($5 + [80]), *(($5 + [84])))
	CALL _ZdlPv($5)
	
.LABEL $label$36
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$35 }
	$5 = *(($3 + [184]))
	goto $label$33 
	
.LABEL $label$34
	$5 = $9
	
.LABEL $label$33
	*($0) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$32
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$5
	CALL $182(($3 + [80]))
}

int_32 .FUNC $167 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10148])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4816269762336859776)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10094])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10094])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $91(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4816269762336859776, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $91($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $167(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [10042])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [12]))
	$6 = $2
	$5 = ($6 + [-32])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [24])
	CALL $168(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-4816269762336859776, *(*($0 + [8])), $7, $5, [32])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	$2 = *($0)
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)($2 + [4])) ){ goto $label$1 }
	$4 = ($1 + [84])
	$5 = ($1 + [80])
	$6 = ($1 + [88])
	
.LOOP $label$2:
	$7 = $3
	$8 = *($4)
	if ( ($8 == 0) ){ goto $label$6 }
	$9 = *($7 + [16])
	$3 = $4
	$2 = $8
	
.LOOP $label$7:
	$10 = (uint_64)(*($2 + [16]) <= $9)
	$3 = ( $3 ? $2 : $10 )
	$2 = *(($2 + ($10 << [2])))
	if ( $2 ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$5 }
	if ( (uint_64)($9 <= *($3 + [16])) ){ goto $label$4 }
	$3 = $4
	$11 = *($8 + [16])
	if ( ((uint_64)$9 >= (uint_64)$11) ){ goto $label$8 }
	$12 = [27]
	goto $label$3 
	
.LABEL $label$8
	$12 = [2]
	goto $label$3 
	
.LABEL $label$6
	$12 = [9]
	goto $label$3 
	
.LABEL $label$5
	$12 = [9]
	goto $label$3 
	
.LABEL $label$4
	$12 = [9]
	
.LABEL $label$3
	
.LOOP $label$9:
	goto $label$59 
	
.LABEL $label$62
	$8 = $2
	$11 = *($8 + [16])
	if ( ((uint_64)$9 >= (uint_64)$11) ){ goto $label$32 }
	$12 = [27]
	goto $label$9 
	
.LABEL $label$61
	$3 = $8
	$2 = *($8)
	if ( $2 ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$60
	if ( ((uint_64)$11 >= (uint_64)$9) ){ goto $label$30 }
	$12 = [0]
	goto $label$9 
	
.LABEL $label$59
	$3 = ($8 + [4])
	$2 = *($8 + [4])
	if ( $2 ){ goto $label$31 }
	$12 = [3]
	goto $label$9 
	
.LABEL $label$58
	$2 = *($3)
	if ( $2 ){ goto $label$27 }
	$12 = [24]
	goto $label$9 
	
.LABEL $label$57
	*(($2 = CALL _Znwj([32]))) = (int_64)0
	*($2 + [8]) = $8
	*($3) = $2
	$9 = *(($7 + [16]))
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = $9
	$10 = $2
	$8 = *(*($5))
	if ( ($8 == 0) ){ goto $label$10 }
	$12 = [25]
	goto $label$9 
	
.LABEL $label$56
	*($5) = $8
	$10 = *($3)
	$12 = [26]
	goto $label$9 
	
.LABEL $label$55
	CALL $111(*(($1 + [84])), $10)
	*($6) = (*($6) + [1])
	$12 = [4]
	goto $label$9 
	
.LABEL $label$54
	CALL eosio_assert(((uint_64)*(($2 + [24])) >= (uint_64)*($7 + [24])), [10017])
	$13 = *($7 + [24])
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$26 }
	$12 = [5]
	goto $label$9 
	
.LABEL $label$53
	$3 = $4
	$11 = *($2 + [16])
	$9 = *(($7 + [16]))
	if ( ((uint_64)$9 >= (uint_64)$11) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$52
	$3 = $2
	$2 = $10
	$11 = *($2 + [16])
	if ( ((uint_64)$9 >= (uint_64)$11) ){ goto $label$34 }
	$12 = [21]
	goto $label$9 
	
.LABEL $label$51
	$10 = *($2)
	if ( $10 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$50
	if ( ((uint_64)$11 >= (uint_64)$9) ){ goto $label$22 }
	$12 = [18]
	goto $label$9 
	
.LABEL $label$49
	$3 = ($2 + [4])
	$10 = *($2 + [4])
	if ( ($10 == 0) ){ goto $label$23 }
	$12 = [19]
	goto $label$9 
	
.LABEL $label$48
	$2 = $3
	goto $label$33 
	
.LABEL $label$47
	$2 = $4
	$3 = $4
	$12 = [7]
	goto $label$9 
	
.LABEL $label$46
	$10 = *($3)
	if ( $10 ){ goto $label$21 }
	$12 = [15]
	goto $label$9 
	
.LABEL $label$45
	*(($10 = CALL _Znwj([32]))) = (int_64)0
	*($10 + [8]) = $2
	*($3) = $10
	$9 = *(($7 + [16]))
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = $9
	$2 = $10
	$8 = *(*($5))
	if ( ($8 == 0) ){ goto $label$13 }
	$12 = [16]
	goto $label$9 
	
.LABEL $label$44
	*($5) = $8
	$2 = *($3)
	$12 = [17]
	goto $label$9 
	
.LABEL $label$43
	CALL $111(*(($1 + [84])), $2)
	*($6) = (*($6) + [1])
	goto $label$20 
	
.LABEL $label$42
	$3 = $2
	$10 = *($3)
	if ( ($10 == 0) ){ goto $label$19 }
	$12 = [8]
	goto $label$9 
	
.LABEL $label$41
	*(($2 = ($10 + [24]))) = (int_64))(*($2) - $13)
	*(($2 = *(($0 + [4])))) = ((int_64)*($2) + (int_64)*(($7 + [24])))
	$12 = [9]
	goto $label$9 
	
.LABEL $label$40
	$2 = *($7 + [4])
	if ( ($2 == 0) ){ goto $label$16 }
	$12 = [10]
	goto $label$9 
	
.LABEL $label$39
	$3 = $2
	$2 = *($3)
	if ( $2 ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$38
	$3 = *($7 + [8])
	if ( ((int_32)*($3) == (int_32)$7) ){ goto $label$15 }
	$12 = [13]
	goto $label$9 
	
.LABEL $label$37
	$10 = ($7 + [8])
	$12 = [14]
	goto $label$9 
	
.LABEL $label$36
	$2 = *($10)
	$10 = ($2 + [8])
	$3 = *($2 + [8])
	if ( ((int_32)$2 != (int_32)*($3)) ){ goto $label$14 }
	$12 = [11]
	goto $label$9 
	
.LABEL $label$35
	if ( ((int_32)$3 != (int_32)(*($0) + [4])) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$34
	$12 = [6]
	goto $label$9 
	
.LABEL $label$33
	$12 = [20]
	goto $label$9 
	
.LABEL $label$32
	$12 = [2]
	goto $label$9 
	
.LABEL $label$31
	$12 = [1]
	goto $label$9 
	
.LABEL $label$30
	$12 = [3]
	goto $label$9 
	
.LABEL $label$29
	$12 = [3]
	goto $label$9 
	
.LABEL $label$28
	$12 = [1]
	goto $label$9 
	
.LABEL $label$27
	$12 = [4]
	goto $label$9 
	
.LABEL $label$26
	$12 = [23]
	goto $label$9 
	
.LABEL $label$25
	$12 = [21]
	goto $label$9 
	
.LABEL $label$24
	$12 = [6]
	goto $label$9 
	
.LABEL $label$23
	$12 = [7]
	goto $label$9 
	
.LABEL $label$22
	$12 = [7]
	goto $label$9 
	
.LABEL $label$21
	$12 = [8]
	goto $label$9 
	
.LABEL $label$20
	$12 = [8]
	goto $label$9 
	
.LABEL $label$19
	$12 = [15]
	goto $label$9 
	
.LABEL $label$18
	$12 = [11]
	goto $label$9 
	
.LABEL $label$17
	$12 = [10]
	goto $label$9 
	
.LABEL $label$16
	$12 = [12]
	goto $label$9 
	
.LABEL $label$15
	$12 = [11]
	goto $label$9 
	
.LABEL $label$14
	$12 = [14]
	goto $label$9 
	
.LABEL $label$13
	$12 = [17]
	goto $label$9 
	
.LABEL $label$12
	$12 = [22]
	goto $label$9 
	
.LABEL $label$11
	$12 = [20]
	goto $label$9 
	
.LABEL $label$10
	$12 = [26]
	goto $label$9 
	
.LABEL $label$1
	$12
}

void .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $193($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $55(($1 + [8]), *(($1 + [12])))
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [80])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7035936280380030976, $4, *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [84]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7035936280380030977, $4, *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [88]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035936280380030978, $4, *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx128_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5)
	*($4 + [16]) = *(*($5 + [4]) + [8])
	if ( (CALL $198(*($5 + [8]), ($4 + [16]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [80])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7035936280380030976, $4, *(*($5 + [16])))
	*(*(($5 + [12])) + [80]) = $7
	
.LABEL $label$2
	CALL db_idx64_update($7, *(*($5 + [20])), ($4 + [16]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($4 + [16]) = *(*($5 + [4]) + [16])
	if ( (CALL $198((*($5 + [8]) + [8]), ($4 + [16]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [84]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7035936280380030977, $4, *(*($5 + [16])))
	*((*(($5 + [12])) + [84])) = $7
	
.LABEL $label$4
	CALL db_idx64_update($7, *(*($5 + [20])), ($4 + [16]))
	
.LABEL $label$3
	$5 = *($0)
	$7 = *($5)
	$0 = *($5 + [4])
	*($4 + [24]) = *($0 + [8])
	*($4 + [16]) = *($0 + [16])
	if ( (CALL $198((*($5 + [8]) + [16]), ($4 + [16]), [16]) == 0) ){ goto $label$5 }
	$0 = *((*($5 + [12]) + [88]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = CALL db_idx128_find_primary(*($7), *($7 + [8]), (int_64)7035936280380030978, $4, *(*($5 + [16])))
	*((*(($5 + [12])) + [88])) = $0
	
.LABEL $label$6
	CALL db_idx128_update($0, *(*($5 + [20])), ($4 + [16]))
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $121(*($1), *($0 + [12]))
	CALL $121(*($1), *($0 + [16]))
	CALL $121(*($1), *($0 + [20]))
	CALL $121(*($1), *($0 + [24]))
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [24])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$3 = *($0)
	$0 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$8 }
	*($2) = ($0 + $1)
	
.LABEL $label$8
}

void .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $193($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [20 align=4]) = (int_64)0
	$3 = (($2 + [16]) | [4])
	*($2 + [16]) = $3
	$4 = *($1 + [8])
	$5 = *($1)
	$7 = ($1 + [20])
	$6 = *($1 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$8 = [0]
	$9 = ($6 + [16])
	if ( ((int_32)$3 != (int_32)$3) ){ goto $label$3 }
	$11 = [28]
	goto $label$1 
	
.LABEL $label$3
	$11 = [3]
	goto $label$1 
	
.LABEL $label$2
	$11 = [29]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$105 
	
.LABEL $label$132
	$8 = *($2 + [20])
	$6 = $10
	$9 = ($6 + [16])
	if ( ((int_32)*($2 + [16]) == (int_32)$3) ){ goto $label$60 }
	$11 = [3]
	goto $label$4 
	
.LABEL $label$131
	$10 = $8
	$12 = $3
	if ( ($8 == 0) ){ goto $label$43 }
	$11 = [4]
	goto $label$4 
	
.LABEL $label$130
	$13 = $10
	$10 = *($13 + [4])
	if ( $10 ){ goto $label$44 }
	goto $label$45 
	
.LABEL $label$129
	$13 = *($12 + [8])
	$10 = ((int_32)*($13) == (int_32)$12)
	$12 = $13
	if ( $10 ){ goto $label$42 }
	$11 = [5]
	goto $label$4 
	
.LABEL $label$128
	$14 = *($9)
	if ( (uint_64)(*($13 + [16]) <= $14) ){ goto $label$59 }
	$11 = [6]
	goto $label$4 
	
.LABEL $label$127
	if ( ($8 == 0) ){ goto $label$41 }
	$11 = [7]
	goto $label$4 
	
.LABEL $label$126
	$10 = $3
	$15 = *($8 + [16])
	if ( ((uint_64)$14 >= (uint_64)$15) ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$125
	$10 = $8
	$8 = $13
	$15 = *($8 + [16])
	if ( ((uint_64)$14 >= (uint_64)$15) ){ goto $label$56 }
	$11 = [20]
	goto $label$4 
	
.LABEL $label$124
	$13 = *($8)
	if ( $13 ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$123
	if ( ((uint_64)$15 >= (uint_64)$14) ){ goto $label$38 }
	$11 = [17]
	goto $label$4 
	
.LABEL $label$122
	$10 = ($8 + [4])
	$13 = *($8 + [4])
	if ( ($13 == 0) ){ goto $label$33 }
	$11 = [18]
	goto $label$4 
	
.LABEL $label$121
	$8 = $10
	goto $label$55 
	
.LABEL $label$120
	$13 = $3
	$11 = [24]
	goto $label$4 
	
.LABEL $label$119
	if ( ($8 == 0) ){ goto $label$30 }
	$11 = [25]
	goto $label$4 
	
.LABEL $label$118
	$8 = ($13 + [4])
	if ( (*($8) == 0) ){ goto $label$35 }
	$11 = [10]
	goto $label$4 
	
.LABEL $label$117
	$13 = *($6 + [4])
	if ( $13 ){ goto $label$52 }
	$11 = [11]
	goto $label$4 
	
.LABEL $label$116
	$10 = *($6 + [8])
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$49 }
	$11 = [12]
	goto $label$4 
	
.LABEL $label$115
	$12 = ($6 + [8])
	$11 = [13]
	goto $label$4 
	
.LABEL $label$114
	$13 = *($12)
	$12 = ($13 + [8])
	$10 = *($13 + [8])
	if ( ((int_32)$13 != (int_32)*($10)) ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$113
	$13 = $3
	$8 = $3
	if ( *($8) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$112
	$8 = $3
	$13 = $3
	goto $label$58 
	
.LABEL $label$111
	$13 = $8
	goto $label$57 
	
.LABEL $label$110
	$13 = $8
	$8 = $10
	if ( *($8) ){ goto $label$53 }
	goto $label$54 
	
.LABEL $label$109
	$13 = $8
	$8 = $10
	$11 = [14]
	goto $label$4 
	
.LABEL $label$108
	*((($10 = CALL _Znwj([32])) + [24])) = *(($9 + [8]))
	*($10 + [16]) = *($9)
	*($10) = (int_64)0
	*($10 + [8]) = $13
	*($8) = $10
	$13 = *(*($2 + [16]))
	if ( ($13 == 0) ){ goto $label$34 }
	$11 = [15]
	goto $label$4 
	
.LABEL $label$107
	*($2 + [16]) = $13
	$10 = *($8)
	$11 = [16]
	goto $label$4 
	
.LABEL $label$106
	CALL $111(*($2 + [20]), $10)
	*(($13 = (($2 + [16]) + [8]))) = (*($13) + [1])
	$13 = *($6 + [4])
	if ( ($13 == 0) ){ goto $label$50 }
	$11 = [0]
	goto $label$4 
	
.LABEL $label$105
	$10 = $13
	$13 = *($10)
	if ( $13 ){ goto $label$51 }
	$11 = [1]
	goto $label$4 
	
.LABEL $label$104
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$46 }
	$11 = [29]
	goto $label$4 
	
.LABEL $label$103
	*($2 + [4 align=4]) = (int_64)0
	$3 = ($2 | [4])
	*($2) = $3
	$9 = ($1 + [32])
	$6 = *($1 + [28])
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$29 }
	$11 = [30]
	goto $label$4 
	
.LABEL $label$102
	$8 = [0]
	$7 = ($2 + [8])
	if ( ((int_32)$3 != (int_32)$3) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$101
	$8 = *($2 + [4])
	$6 = $10
	if ( ((int_32)*($2) == (int_32)$3) ){ goto $label$70 }
	$11 = [31]
	goto $label$4 
	
.LABEL $label$100
	$10 = $8
	$12 = $3
	if ( ($8 == 0) ){ goto $label$24 }
	$11 = [32]
	goto $label$4 
	
.LABEL $label$99
	$13 = $10
	$10 = *($13 + [4])
	if ( $10 ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$98
	$13 = *($12 + [8])
	$10 = ((int_32)*($13) == (int_32)$12)
	$12 = $13
	if ( $10 ){ goto $label$23 }
	$11 = [33]
	goto $label$4 
	
.LABEL $label$97
	$14 = *(($6 + [16]))
	if ( (uint_64)(*($13 + [16]) <= $14) ){ goto $label$69 }
	$11 = [34]
	goto $label$4 
	
.LABEL $label$96
	if ( ($8 == 0) ){ goto $label$22 }
	$11 = [35]
	goto $label$4 
	
.LABEL $label$95
	$10 = $3
	$15 = *($8 + [16])
	if ( ((uint_64)$14 >= (uint_64)$15) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$94
	$10 = $8
	$8 = $13
	$15 = *($8 + [16])
	if ( ((uint_64)$14 >= (uint_64)$15) ){ goto $label$66 }
	$11 = [57]
	goto $label$4 
	
.LABEL $label$93
	$13 = *($8)
	if ( $13 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$92
	if ( ((uint_64)$15 >= (uint_64)$14) ){ goto $label$19 }
	$11 = [54]
	goto $label$4 
	
.LABEL $label$91
	$10 = ($8 + [4])
	$13 = *($8 + [4])
	if ( ($13 == 0) ){ goto $label$7 }
	$11 = [55]
	goto $label$4 
	
.LABEL $label$90
	$8 = $10
	goto $label$64 
	
.LABEL $label$89
	$13 = $3
	$11 = [43]
	goto $label$4 
	
.LABEL $label$88
	if ( ($8 == 0) ){ goto $label$9 }
	$11 = [44]
	goto $label$4 
	
.LABEL $label$87
	$10 = ($13 + [4])
	if ( (*($10) == 0) ){ goto $label$16 }
	$11 = [38]
	goto $label$4 
	
.LABEL $label$86
	$13 = *($6 + [4])
	if ( $13 ){ goto $label$62 }
	$11 = [49]
	goto $label$4 
	
.LABEL $label$85
	$10 = *($6 + [8])
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$14 }
	$11 = [50]
	goto $label$4 
	
.LABEL $label$84
	$12 = ($6 + [8])
	$11 = [51]
	goto $label$4 
	
.LABEL $label$83
	$13 = *($12)
	$12 = ($13 + [8])
	$10 = *($13 + [8])
	if ( ((int_32)$13 != (int_32)*($10)) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$82
	$13 = $3
	$10 = $3
	if ( *($10) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$81
	$8 = $3
	$13 = $3
	goto $label$68 
	
.LABEL $label$80
	$13 = $8
	goto $label$67 
	
.LABEL $label$79
	$13 = $8
	if ( *($10) ){ goto $label$63 }
	$11 = [45]
	goto $label$4 
	
.LABEL $label$78
	$8 = $10
	$11 = [46]
	goto $label$4 
	
.LABEL $label$77
	*(($10 = CALL _Znwj([40])) + [16]) = *(($6 + [16]))
	CALL $183(($10 + [24]), ($6 + [24]))
	*($10 + [8]) = $13
	*($10) = (int_64)0
	*($8) = $10
	$13 = *(*($2))
	if ( ($13 == 0) ){ goto $label$8 }
	$11 = [47]
	goto $label$4 
	
.LABEL $label$76
	*($2) = $13
	$10 = *($8)
	$11 = [48]
	goto $label$4 
	
.LABEL $label$75
	CALL $111(*($2 + [4]), $10)
	*($7) = (*($7) + [1])
	$13 = *($6 + [4])
	if ( ($13 == 0) ){ goto $label$15 }
	$11 = [39]
	goto $label$4 
	
.LABEL $label$74
	$10 = $13
	$13 = *($10)
	if ( $13 ){ goto $label$61 }
	$11 = [40]
	goto $label$4 
	
.LABEL $label$73
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$72
	$13 = $8
	$8 = $10
	goto $label$65 
	
.LABEL $label$71
	CALL $171($0, $5, $4, ($2 + [16]), $2)
	CALL $54($2, *($2 + [4]))
	CALL $55(($2 + [16]), *($2 + [20]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$70
	$11 = [42]
	goto $label$4 
	
.LABEL $label$69
	$11 = [43]
	goto $label$4 
	
.LABEL $label$68
	$11 = [46]
	goto $label$4 
	
.LABEL $label$67
	$11 = [46]
	goto $label$4 
	
.LABEL $label$66
	$11 = [36]
	goto $label$4 
	
.LABEL $label$65
	$11 = [46]
	goto $label$4 
	
.LABEL $label$64
	$11 = [56]
	goto $label$4 
	
.LABEL $label$63
	$11 = [38]
	goto $label$4 
	
.LABEL $label$62
	$11 = [39]
	goto $label$4 
	
.LABEL $label$61
	$11 = [39]
	goto $label$4 
	
.LABEL $label$60
	$11 = [28]
	goto $label$4 
	
.LABEL $label$59
	$11 = [24]
	goto $label$4 
	
.LABEL $label$58
	$11 = [14]
	goto $label$4 
	
.LABEL $label$57
	$11 = [14]
	goto $label$4 
	
.LABEL $label$56
	$11 = [8]
	goto $label$4 
	
.LABEL $label$55
	$11 = [19]
	goto $label$4 
	
.LABEL $label$54
	$11 = [14]
	goto $label$4 
	
.LABEL $label$53
	$11 = [10]
	goto $label$4 
	
.LABEL $label$52
	$11 = [0]
	goto $label$4 
	
.LABEL $label$51
	$11 = [0]
	goto $label$4 
	
.LABEL $label$50
	$11 = [11]
	goto $label$4 
	
.LABEL $label$49
	$11 = [1]
	goto $label$4 
	
.LABEL $label$48
	$11 = [1]
	goto $label$4 
	
.LABEL $label$47
	$11 = [13]
	goto $label$4 
	
.LABEL $label$46
	$11 = [2]
	goto $label$4 
	
.LABEL $label$45
	$11 = [5]
	goto $label$4 
	
.LABEL $label$44
	$11 = [4]
	goto $label$4 
	
.LABEL $label$43
	$11 = [27]
	goto $label$4 
	
.LABEL $label$42
	$11 = [27]
	goto $label$4 
	
.LABEL $label$41
	$11 = [23]
	goto $label$4 
	
.LABEL $label$40
	$11 = [20]
	goto $label$4 
	
.LABEL $label$39
	$11 = [8]
	goto $label$4 
	
.LABEL $label$38
	$11 = [9]
	goto $label$4 
	
.LABEL $label$37
	$11 = [14]
	goto $label$4 
	
.LABEL $label$36
	$11 = [10]
	goto $label$4 
	
.LABEL $label$35
	$11 = [14]
	goto $label$4 
	
.LABEL $label$34
	$11 = [16]
	goto $label$4 
	
.LABEL $label$33
	$11 = [22]
	goto $label$4 
	
.LABEL $label$32
	$11 = [21]
	goto $label$4 
	
.LABEL $label$31
	$11 = [19]
	goto $label$4 
	
.LABEL $label$30
	$11 = [26]
	goto $label$4 
	
.LABEL $label$29
	$11 = [53]
	goto $label$4 
	
.LABEL $label$28
	$11 = [42]
	goto $label$4 
	
.LABEL $label$27
	$11 = [31]
	goto $label$4 
	
.LABEL $label$26
	$11 = [33]
	goto $label$4 
	
.LABEL $label$25
	$11 = [32]
	goto $label$4 
	
.LABEL $label$24
	$11 = [61]
	goto $label$4 
	
.LABEL $label$23
	$11 = [61]
	goto $label$4 
	
.LABEL $label$22
	$11 = [60]
	goto $label$4 
	
.LABEL $label$21
	$11 = [57]
	goto $label$4 
	
.LABEL $label$20
	$11 = [36]
	goto $label$4 
	
.LABEL $label$19
	$11 = [37]
	goto $label$4 
	
.LABEL $label$18
	$11 = [45]
	goto $label$4 
	
.LABEL $label$17
	$11 = [38]
	goto $label$4 
	
.LABEL $label$16
	$11 = [45]
	goto $label$4 
	
.LABEL $label$15
	$11 = [49]
	goto $label$4 
	
.LABEL $label$14
	$11 = [40]
	goto $label$4 
	
.LABEL $label$13
	$11 = [40]
	goto $label$4 
	
.LABEL $label$12
	$11 = [51]
	goto $label$4 
	
.LABEL $label$11
	$11 = [53]
	goto $label$4 
	
.LABEL $label$10
	$11 = [41]
	goto $label$4 
	
.LABEL $label$9
	$11 = [52]
	goto $label$4 
	
.LABEL $label$8
	$11 = [48]
	goto $label$4 
	
.LABEL $label$7
	$11 = [59]
	goto $label$4 
	
.LABEL $label$6
	$11 = [58]
	goto $label$4 
	
.LABEL $label$5
	$11 = [56]
	goto $label$4 
	$11
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$6 = *($1)
	CALL eosio_assert(*($1 + [28]), [9542])
	*($1 + [28]) = [0]
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8820])
	$7 = [16]
	$8 = ($1 + [16])
	$9 = ($1 + [28])
	$11 = *($1 + [16])
	$10 = *(($1 + [20]))
	$12 = ($10 - $11)
	$13 = (CASTING uint_64)(uint_32 int_32($12 >> [3]))
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$7 = (($12 & [-8]) + $7)
	
.LABEL $label$2
	$10 = ($7 + [1])
	if ( ($10 <= [513]) ){ goto $label$4 }
	$7 = CALL $202($10)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$3
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = ($7 + $10)
	*($5 + [24]) = ($5 + [8])
	*($5 + [40]) = $8
	*($5 + [44]) = $9
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	CALL $144(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [36]), $2, $7, $10)
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $205($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	*($1 + [32]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8820])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [76])
	*($3 + [64]) = $15
	$16 = ($1 + [80])
	*($3 + [68]) = $16
	$17 = ($1 + [92])
	*($3 + [72]) = $17
	CALL $115(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$4 = CALL $202($18)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($18 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [24]) = $1
	CALL $116(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $4, $18)
	if ( ((uint_32)$18 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $205($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8599])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $202($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [28])
	CALL $141(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $140(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $205($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [16])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$6 = [16]
	$7 = *($1)
	$8 = $7
	$3 = *($3)
	$9 = ($1 + [16])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$1 }
	CALL $143($9, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	*($1 + [28]) = [1]
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [8820])
	$10 = ($1 + [28])
	$11 = *($1 + [16])
	$3 = *(($1 + [20]))
	$12 = ($3 - $11)
	$8 = (CASTING uint_64)(uint_32 int_32($12 >> [3]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$3 }
	$6 = (($12 & [-8]) + $6)
	
.LABEL $label$3
	$3 = ($6 + [1])
	if ( ($3 <= [513]) ){ goto $label$5 }
	$6 = CALL $202($3)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($5 + [12]) = $6
	*($5 + [8]) = $6
	*($5 + [16]) = ($6 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [40]) = $9
	*($5 + [44]) = $10
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	CALL $144(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [36]), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $205($6)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8631])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $139(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $140(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $54($0, *($1))
	CALL $54($0, *($1 + [4]))
	if ( ((*(($1 + [24])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$2
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $55($0, *($1))
	CALL $55($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $55($1, *($1 + [4]))
	$3 = ($1 + [4])
	*($1) = $3
	$4 = (int_64)0
	*($1 + [4 align=4]) = (int_64)0
	$5 = *($0 + [4])
	$6 = [0]
	$7 = ($0 + [8])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($7)), [8627])
	$8 = ($0 + [4])
	$5 = *($8)
	$9 = *($5)
	$5 = ($5 + [1])
	*($8) = $5
	$6 = ($6 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($9 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($9 & [128]) ){ goto $label$1 }
	$10 = (CASTING uint_32)(uint_64 $4)
	if ( ($10 == 0) ){ goto $label$2 }
	$11 = ($1 + [4])
	$7 = [0]
	
.LOOP $label$3:
	*($2 + [8]) = (int_64)0
	$9 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($9) - $5) > (uint_32)[7]), [8622])
	$8 = ($0 + [4])
	CALL memcpy(($2 + [8]), *($8), [8])
	$5 = (*($8) + [8])
	*($8) = $5
	CALL eosio_assert(((uint_32)(*($9) - $5) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($8), [8])
	*($8) = (*($8) + [8])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$7 }
	$9 = $11
	$12 = *($5 + [16])
	$4 = *($2 + [8])
	if ( ((uint_64)$4 >= (uint_64)$12) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = $3
	$9 = $3
	$13 = [3]
	goto $label$4 
	
.LABEL $label$6
	$13 = [10]
	goto $label$4 
	
.LABEL $label$5
	$13 = [2]
	
.LABEL $label$4
	
.LOOP $label$9:
	goto $label$27 
	
.LABEL $label$31
	$9 = $5
	$5 = $6
	$12 = *($5 + [16])
	if ( ((uint_64)$4 >= (uint_64)$12) ){ goto $label$20 }
	$13 = [10]
	goto $label$9 
	
.LABEL $label$30
	$6 = *($5)
	if ( $6 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$29
	if ( ((uint_64)$12 >= (uint_64)$4) ){ goto $label$15 }
	$13 = [9]
	goto $label$9 
	
.LABEL $label$28
	$9 = ($5 + [4])
	$6 = *($5 + [4])
	if ( ($6 == 0) ){ goto $label$18 }
	$13 = [0]
	goto $label$9 
	
.LABEL $label$27
	$5 = $9
	goto $label$19 
	
.LABEL $label$26
	if ( (*($9) == 0) ){ goto $label$14 }
	$13 = [4]
	goto $label$9 
	
.LABEL $label$25
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$24
	$9 = $5
	if ( *($9) ){ goto $label$13 }
	$13 = [6]
	goto $label$9 
	
.LABEL $label$23
	*(($6 = CALL _Znwj([32]))) = (int_64)0
	*($6 + [8]) = $5
	*($9) = $6
	*($6 + [16]) = *($2 + [8])
	*($6 + [24]) = *($2)
	$5 = *(*($1))
	if ( ($5 == 0) ){ goto $label$10 }
	$13 = [7]
	goto $label$9 
	
.LABEL $label$22
	*($1) = $5
	$6 = *($9)
	$13 = [8]
	goto $label$9 
	
.LABEL $label$21
	CALL $111(*(($1 + [4])), $6)
	*(($5 = ($1 + [8]))) = (*($5) + [1])
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$11 }
	goto $label$2 
	
.LABEL $label$20
	$13 = [2]
	goto $label$9 
	
.LABEL $label$19
	$13 = [1]
	goto $label$9 
	
.LABEL $label$18
	$13 = [3]
	goto $label$9 
	
.LABEL $label$17
	$13 = [11]
	goto $label$9 
	
.LABEL $label$16
	$13 = [1]
	goto $label$9 
	
.LABEL $label$15
	$13 = [3]
	goto $label$9 
	
.LABEL $label$14
	$13 = [6]
	goto $label$9 
	
.LABEL $label$13
	$13 = [4]
	goto $label$9 
	
.LABEL $label$12
	$13 = [5]
	goto $label$9 
	
.LABEL $label$11
	$13 = [5]
	goto $label$9 
	
.LABEL $label$10
	$13 = [8]
	goto $label$9 
	
.LABEL $label$8
	$5 = *($8)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	$13
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL $54($1, *($1 + [4]))
	$3 = ($1 + [4])
	*($1) = $3
	$4 = (int_64)0
	*($1 + [4 align=4]) = (int_64)0
	$5 = *($0 + [4])
	$6 = [0]
	$7 = ($0 + [8])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($7)), [8627])
	$8 = ($0 + [4])
	$5 = *($8)
	$9 = *($5)
	$5 = ($5 + [1])
	*($8) = $5
	$6 = ($6 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($9 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($9 & [128]) ){ goto $label$1 }
	$10 = (CASTING uint_32)(uint_64 $4)
	if ( ($10 == 0) ){ goto $label$2 }
	$11 = ($1 + [4])
	$12 = [0]
	
.LOOP $label$3:
	*($2 + [24]) = (int_64)0
	*(($7 = (($2 + [8]) + [8]))) = [0]
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) > (uint_32)[7]), [8622])
	$8 = ($0 + [4])
	CALL memcpy(($2 + [24]), *($8), [8])
	*($8) = (*($8) + [8])
	CALL $112($0, ($2 + [8]))
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$7 }
	$9 = $11
	$13 = *($5 + [16])
	$4 = *($2 + [24])
	if ( ((uint_64)$4 >= (uint_64)$13) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = $3
	$9 = $3
	$14 = [3]
	goto $label$4 
	
.LABEL $label$6
	$14 = [12]
	goto $label$4 
	
.LABEL $label$5
	$14 = [2]
	
.LABEL $label$4
	
.LOOP $label$9:
	goto $label$31 
	
.LABEL $label$35
	$9 = $5
	$5 = $6
	$13 = *($5 + [16])
	if ( ((uint_64)$4 >= (uint_64)$13) ){ goto $label$22 }
	$14 = [12]
	goto $label$9 
	
.LABEL $label$34
	$6 = *($5)
	if ( $6 ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$33
	if ( ((uint_64)$13 >= (uint_64)$4) ){ goto $label$17 }
	$14 = [11]
	goto $label$9 
	
.LABEL $label$32
	$9 = ($5 + [4])
	$6 = *($5 + [4])
	if ( ($6 == 0) ){ goto $label$20 }
	$14 = [0]
	goto $label$9 
	
.LABEL $label$31
	$5 = $9
	goto $label$21 
	
.LABEL $label$30
	if ( (*($9) == 0) ){ goto $label$16 }
	$14 = [4]
	goto $label$9 
	
.LABEL $label$29
	if ( (*($2 + [8]) & [1]) ){ goto $label$14 }
	$14 = [7]
	goto $label$9 
	
.LABEL $label$28
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$27
	$9 = $5
	if ( *($9) ){ goto $label$15 }
	$14 = [8]
	goto $label$9 
	
.LABEL $label$26
	*(($6 = CALL _Znwj([40]))) = (int_64)0
	*($6 + [8]) = $5
	*($6 + [24 align=4]) = *($2 + [8])
	*(($6 + [32])) = *($7)
	*($9) = $6
	*($6 + [16]) = *($2 + [24])
	*($7) = [0]
	*($2 + [8]) = (int_64)0
	$5 = *(*($1))
	if ( ($5 == 0) ){ goto $label$10 }
	$14 = [9]
	goto $label$9 
	
.LABEL $label$25
	*($1) = $5
	$6 = *($9)
	$14 = [10]
	goto $label$9 
	
.LABEL $label$24
	CALL $111(*(($1 + [4])), $6)
	*(($5 = ($1 + [8]))) = (*($5) + [1])
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$13 }
	$14 = [5]
	goto $label$9 
	
.LABEL $label$23
	CALL _ZdlPv(*($7))
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$11 }
	goto $label$2 
	
.LABEL $label$22
	$14 = [2]
	goto $label$9 
	
.LABEL $label$21
	$14 = [1]
	goto $label$9 
	
.LABEL $label$20
	$14 = [3]
	goto $label$9 
	
.LABEL $label$19
	$14 = [13]
	goto $label$9 
	
.LABEL $label$18
	$14 = [1]
	goto $label$9 
	
.LABEL $label$17
	$14 = [3]
	goto $label$9 
	
.LABEL $label$16
	$14 = [8]
	goto $label$9 
	
.LABEL $label$15
	$14 = [4]
	goto $label$9 
	
.LABEL $label$14
	$14 = [5]
	goto $label$9 
	
.LABEL $label$13
	$14 = [7]
	goto $label$9 
	
.LABEL $label$12
	$14 = [6]
	goto $label$9 
	
.LABEL $label$11
	$14 = [6]
	goto $label$9 
	
.LABEL $label$10
	$14 = [10]
	goto $label$9 
	
.LABEL $label$8
	$5 = *($8)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	$14
	return $0
}

void .FUNC $173 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$4 = ($global$0 - [16])
	$global$0 = $4
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$7 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$7 = *((*($6) + $7))
	
.LABEL $label$1
	*($4 + [4 align=4]) = (int_64)0
	$8 = ($4 | [4])
	*($4) = $8
	$10 = ($3 + [4])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$3 }
	$11 = [0]
	$12 = ($9 + [16])
	if ( ((int_32)$8 != (int_32)$8) ){ goto $label$4 }
	$13 = [28]
	goto $label$2 
	
.LABEL $label$4
	$13 = [3]
	goto $label$2 
	
.LABEL $label$3
	$13 = [29]
	
.LABEL $label$2
	
.LOOP $label$5:
	goto $label$39 
	
.LABEL $label$66
	$11 = *($4 + [4])
	$9 = $0
	$12 = ($9 + [16])
	if ( ((int_32)*($4) == (int_32)$8) ){ goto $label$36 }
	$13 = [3]
	goto $label$5 
	
.LABEL $label$65
	$0 = $11
	$5 = $8
	if ( ($11 == 0) ){ goto $label$19 }
	$13 = [4]
	goto $label$5 
	
.LABEL $label$64
	$3 = $0
	$0 = *($3 + [4])
	if ( $0 ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$63
	$3 = *($5 + [8])
	$0 = ((int_32)*($3) == (int_32)$5)
	$5 = $3
	if ( $0 ){ goto $label$18 }
	$13 = [5]
	goto $label$5 
	
.LABEL $label$62
	$14 = *($12)
	if ( (uint_64)(*($3 + [16]) <= $14) ){ goto $label$35 }
	$13 = [6]
	goto $label$5 
	
.LABEL $label$61
	if ( ($11 == 0) ){ goto $label$17 }
	$13 = [7]
	goto $label$5 
	
.LABEL $label$60
	$0 = $8
	$15 = *($11 + [16])
	if ( ((uint_64)$14 >= (uint_64)$15) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$59
	$0 = $11
	$11 = $3
	$15 = *($11 + [16])
	if ( ((uint_64)$14 >= (uint_64)$15) ){ goto $label$32 }
	$13 = [20]
	goto $label$5 
	
.LABEL $label$58
	$3 = *($11)
	if ( $3 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$57
	if ( ((uint_64)$15 >= (uint_64)$14) ){ goto $label$14 }
	$13 = [17]
	goto $label$5 
	
.LABEL $label$56
	$0 = ($11 + [4])
	$3 = *($11 + [4])
	if ( ($3 == 0) ){ goto $label$9 }
	$13 = [18]
	goto $label$5 
	
.LABEL $label$55
	$11 = $0
	goto $label$31 
	
.LABEL $label$54
	$3 = $8
	$13 = [24]
	goto $label$5 
	
.LABEL $label$53
	if ( ($11 == 0) ){ goto $label$6 }
	$13 = [25]
	goto $label$5 
	
.LABEL $label$52
	$11 = ($3 + [4])
	if ( (*($11) == 0) ){ goto $label$11 }
	$13 = [10]
	goto $label$5 
	
.LABEL $label$51
	$3 = *($9 + [4])
	if ( $3 ){ goto $label$28 }
	$13 = [11]
	goto $label$5 
	
.LABEL $label$50
	$0 = *($9 + [8])
	if ( ((int_32)*($0) == (int_32)$9) ){ goto $label$25 }
	$13 = [12]
	goto $label$5 
	
.LABEL $label$49
	$5 = ($9 + [8])
	$13 = [13]
	goto $label$5 
	
.LABEL $label$48
	$3 = *($5)
	$5 = ($3 + [8])
	$0 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($0)) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$47
	$3 = $8
	$11 = $8
	if ( *($11) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$46
	$11 = $8
	$3 = $8
	goto $label$34 
	
.LABEL $label$45
	$3 = $11
	goto $label$33 
	
.LABEL $label$44
	$3 = $11
	$11 = $0
	if ( *($11) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$43
	$3 = $11
	$11 = $0
	$13 = [14]
	goto $label$5 
	
.LABEL $label$42
	*((($0 = CALL _Znwj([32])) + [24])) = *(($12 + [8]))
	*($0 + [16]) = *($12)
	*($0) = (int_64)0
	*($0 + [8]) = $3
	*($11) = $0
	$3 = *(*($4))
	if ( ($3 == 0) ){ goto $label$10 }
	$13 = [15]
	goto $label$5 
	
.LABEL $label$41
	*($4) = $3
	$0 = *($11)
	$13 = [16]
	goto $label$5 
	
.LABEL $label$40
	CALL $111(*($4 + [4]), $0)
	*(($3 = ($4 + [8]))) = (*($3) + [1])
	$3 = *($9 + [4])
	if ( ($3 == 0) ){ goto $label$26 }
	$13 = [0]
	goto $label$5 
	
.LABEL $label$39
	$0 = $3
	$3 = *($0)
	if ( $3 ){ goto $label$27 }
	$13 = [1]
	goto $label$5 
	
.LABEL $label$38
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$22 }
	$13 = [29]
	goto $label$5 
	
.LABEL $label$37
	CALL void $6((int_32 $1), (int_64 $2), (int_64 $4), (int_32 $7))
	CALL $55($4, *($4 + [4]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$36
	$13 = [28]
	goto $label$5 
	
.LABEL $label$35
	$13 = [24]
	goto $label$5 
	
.LABEL $label$34
	$13 = [14]
	goto $label$5 
	
.LABEL $label$33
	$13 = [14]
	goto $label$5 
	
.LABEL $label$32
	$13 = [8]
	goto $label$5 
	
.LABEL $label$31
	$13 = [19]
	goto $label$5 
	
.LABEL $label$30
	$13 = [14]
	goto $label$5 
	
.LABEL $label$29
	$13 = [10]
	goto $label$5 
	
.LABEL $label$28
	$13 = [0]
	goto $label$5 
	
.LABEL $label$27
	$13 = [0]
	goto $label$5 
	
.LABEL $label$26
	$13 = [11]
	goto $label$5 
	
.LABEL $label$25
	$13 = [1]
	goto $label$5 
	
.LABEL $label$24
	$13 = [1]
	goto $label$5 
	
.LABEL $label$23
	$13 = [13]
	goto $label$5 
	
.LABEL $label$22
	$13 = [2]
	goto $label$5 
	
.LABEL $label$21
	$13 = [5]
	goto $label$5 
	
.LABEL $label$20
	$13 = [4]
	goto $label$5 
	
.LABEL $label$19
	$13 = [27]
	goto $label$5 
	
.LABEL $label$18
	$13 = [27]
	goto $label$5 
	
.LABEL $label$17
	$13 = [23]
	goto $label$5 
	
.LABEL $label$16
	$13 = [20]
	goto $label$5 
	
.LABEL $label$15
	$13 = [8]
	goto $label$5 
	
.LABEL $label$14
	$13 = [9]
	goto $label$5 
	
.LABEL $label$13
	$13 = [14]
	goto $label$5 
	
.LABEL $label$12
	$13 = [10]
	goto $label$5 
	
.LABEL $label$11
	$13 = [14]
	goto $label$5 
	
.LABEL $label$10
	$13 = [16]
	goto $label$5 
	
.LABEL $label$9
	$13 = [22]
	goto $label$5 
	
.LABEL $label$8
	$13 = [21]
	goto $label$5 
	
.LABEL $label$7
	$13 = [19]
	goto $label$5 
	
.LABEL $label$6
	$13 = [26]
	goto $label$5 
	$13
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$4 = *(*($3 + [12]))
	*($1 + [24]) = *(*($3 + [16]))
	*($1 + [17]) = $4
	$3 = *($0)
	*($1 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($2 + [40]) = ($2 + [30])
	*($2 + [36]) = $2
	*($2 + [32]) = $2
	*($2 + [48]) = ($2 + [32])
	$4 = ($1 + [8])
	*($2 + [60]) = $4
	*($2 + [56]) = $1
	*($2 + [64]) = ($1 + [16])
	*($2 + [68]) = ($1 + [17])
	*($2 + [72]) = ($1 + [24])
	*($2 + [76]) = ($1 + [32])
	CALL $155(($2 + [56]), ($2 + [48]))
	$5 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($3 + [8]), (int_64)3617211075755245568, *(*($0 + [8])), $5, $2, [30])
	if ( (uint_64)($5 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($3 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($2 + [56]) = *($4)
	*($1 + [48]) = CALL db_idx64_store($5, (int_64)3617211075755245568, $6, $7, ($2 + [56]))
	$global$0 = ($2 + [80])
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $193($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $150 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	*($4 + [56]) = *($1 + [8])
	*($1 + [8]) = *(*($3))
	*($1 + [16]) = *(*($3 + [4]))
	$5 = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	*($1 + [17]) = $5
	$6 = *($1)
	*($1 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8820])
	*($4 + [48]) = ($4 + [30])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [64]) = ($4 + [40])
	$3 = ($1 + [8])
	*($4 + [76]) = $3
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [17])
	*($4 + [88]) = ($1 + [24])
	*($4 + [92]) = ($1 + [32])
	CALL $155(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [30])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [72]) = *($3)
	if ( (CALL $198(($4 + [56]), ($4 + [72]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [48])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3617211075755245568, ($4 + [64]), $6)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [72]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

void .FUNC $151 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8631])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [40]) = $1
	CALL $152(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $153(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8599])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $202($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [36])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [60])
	CALL $157(($3 + [32]), ($3 + [24]))
	*($5 + [76]) = $1
	*($5 + [80 align=4]) = (int_64)-1
	*($5 + [88]) = [-1]
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $158(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $205($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [60]) & [1]) ){ goto $label$16 }
	if ( (*($1 + [48]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($1 + [68])))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [56])))
	$4 = [1]
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = [1]
	if ( (*($1 + [36]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($1 + [24]) & $4) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [44])))
	if ( ((*($1 + [24]) & $4) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $112(*($1), *($0 + [12]))
	CALL $112(*($1), *($0 + [16]))
	CALL $112(*($1), *($0 + [20]))
	CALL $112(*($1), *($0 + [24]))
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8622])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8622])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8622])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8682])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [8682])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8682])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $193($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $159(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $159 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [68])))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [56])))
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [44])))
	if ( (*($1 + [24]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9674])
	$2 = *($0 + [4])
	$3 = *($2 + [48])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)3617211075755245568, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [48]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [8548])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $149($6, CALL $fimport$6(*($6), *($6 + [8]), (int_64)3617211075755245568, $5))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [8548])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [48])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)3617211075755245568, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [8548])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $149($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)3617211075755245568, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [8548])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)7035936280380030978, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [8548])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $156($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)7035936280380030976, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [8548])
	
.LABEL $label$2
	*(($4 + [88])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [4 align=4]) = (int_64)0
	$3 = ($2 | [4])
	*($2) = $3
	$4 = *($1 + [8])
	$5 = *($1)
	$7 = ($1 + [20])
	$6 = *($1 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$8 = [0]
	$9 = ($2 + [8])
	if ( ((int_32)$3 != (int_32)$3) ){ goto $label$3 }
	$11 = [29]
	goto $label$1 
	
.LABEL $label$3
	$11 = [3]
	goto $label$1 
	
.LABEL $label$2
	$11 = [30]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$40 
	
.LABEL $label$67
	$8 = *($2 + [4])
	$6 = $10
	if ( ((int_32)*($2) == (int_32)$3) ){ goto $label$36 }
	$11 = [3]
	goto $label$4 
	
.LABEL $label$66
	$10 = $8
	$12 = $3
	if ( ($8 == 0) ){ goto $label$18 }
	$11 = [4]
	goto $label$4 
	
.LABEL $label$65
	$1 = $10
	$10 = *($1 + [4])
	if ( $10 ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$64
	$1 = *($12 + [8])
	$10 = ((int_32)*($1) == (int_32)$12)
	$12 = $1
	if ( $10 ){ goto $label$17 }
	$11 = [5]
	goto $label$4 
	
.LABEL $label$63
	$13 = *(($6 + [16]))
	if ( (uint_64)(*($1 + [16]) <= $13) ){ goto $label$35 }
	$11 = [6]
	goto $label$4 
	
.LABEL $label$62
	if ( ($8 == 0) ){ goto $label$16 }
	$11 = [7]
	goto $label$4 
	
.LABEL $label$61
	$10 = $3
	$14 = *($8 + [16])
	if ( ((uint_64)$13 >= (uint_64)$14) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$60
	$10 = $8
	$8 = $1
	$14 = *($8 + [16])
	if ( ((uint_64)$13 >= (uint_64)$14) ){ goto $label$32 }
	$11 = [21]
	goto $label$4 
	
.LABEL $label$59
	$1 = *($8)
	if ( $1 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$58
	if ( ((uint_64)$14 >= (uint_64)$13) ){ goto $label$13 }
	$11 = [18]
	goto $label$4 
	
.LABEL $label$57
	$10 = ($8 + [4])
	$1 = *($8 + [4])
	if ( ($1 == 0) ){ goto $label$8 }
	$11 = [19]
	goto $label$4 
	
.LABEL $label$56
	$8 = $10
	goto $label$30 
	
.LABEL $label$55
	$1 = $3
	$11 = [25]
	goto $label$4 
	
.LABEL $label$54
	if ( ($8 == 0) ){ goto $label$5 }
	$11 = [26]
	goto $label$4 
	
.LABEL $label$53
	$10 = ($1 + [4])
	if ( (*($10) == 0) ){ goto $label$10 }
	$11 = [10]
	goto $label$4 
	
.LABEL $label$52
	$1 = *($6 + [4])
	if ( $1 ){ goto $label$28 }
	$11 = [11]
	goto $label$4 
	
.LABEL $label$51
	$10 = *($6 + [8])
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$25 }
	$11 = [12]
	goto $label$4 
	
.LABEL $label$50
	$12 = ($6 + [8])
	$11 = [13]
	goto $label$4 
	
.LABEL $label$49
	$1 = *($12)
	$12 = ($1 + [8])
	$10 = *($1 + [8])
	if ( ((int_32)$1 != (int_32)*($10)) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$48
	$1 = $3
	$10 = $3
	if ( *($10) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$47
	$8 = $3
	$1 = $3
	goto $label$34 
	
.LABEL $label$46
	$1 = $8
	goto $label$33 
	
.LABEL $label$45
	$1 = $8
	if ( *($10) ){ goto $label$29 }
	$11 = [14]
	goto $label$4 
	
.LABEL $label$44
	$8 = $10
	$11 = [15]
	goto $label$4 
	
.LABEL $label$43
	*(($10 = CALL _Znwj([40])) + [16]) = *(($6 + [16]))
	CALL $183(($10 + [24]), ($6 + [24]))
	*($10 + [8]) = $1
	*($10) = (int_64)0
	*($8) = $10
	$1 = *(*($2))
	if ( ($1 == 0) ){ goto $label$9 }
	$11 = [16]
	goto $label$4 
	
.LABEL $label$42
	*($2) = $1
	$10 = *($8)
	$11 = [17]
	goto $label$4 
	
.LABEL $label$41
	CALL $111(*($2 + [4]), $10)
	*($9) = (*($9) + [1])
	$1 = *($6 + [4])
	if ( ($1 == 0) ){ goto $label$26 }
	$11 = [0]
	goto $label$4 
	
.LABEL $label$40
	$10 = $1
	$1 = *($10)
	if ( $1 ){ goto $label$27 }
	$11 = [1]
	goto $label$4 
	
.LABEL $label$39
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$38
	$1 = $8
	$8 = $10
	goto $label$31 
	
.LABEL $label$37
	CALL $172($0, $5, $4, $2)
	CALL $54($2, *($2 + [4]))
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$36
	$11 = [29]
	goto $label$4 
	
.LABEL $label$35
	$11 = [25]
	goto $label$4 
	
.LABEL $label$34
	$11 = [15]
	goto $label$4 
	
.LABEL $label$33
	$11 = [15]
	goto $label$4 
	
.LABEL $label$32
	$11 = [8]
	goto $label$4 
	
.LABEL $label$31
	$11 = [15]
	goto $label$4 
	
.LABEL $label$30
	$11 = [20]
	goto $label$4 
	
.LABEL $label$29
	$11 = [10]
	goto $label$4 
	
.LABEL $label$28
	$11 = [0]
	goto $label$4 
	
.LABEL $label$27
	$11 = [0]
	goto $label$4 
	
.LABEL $label$26
	$11 = [11]
	goto $label$4 
	
.LABEL $label$25
	$11 = [1]
	goto $label$4 
	
.LABEL $label$24
	$11 = [1]
	goto $label$4 
	
.LABEL $label$23
	$11 = [13]
	goto $label$4 
	
.LABEL $label$22
	$11 = [30]
	goto $label$4 
	
.LABEL $label$21
	$11 = [2]
	goto $label$4 
	
.LABEL $label$20
	$11 = [5]
	goto $label$4 
	
.LABEL $label$19
	$11 = [4]
	goto $label$4 
	
.LABEL $label$18
	$11 = [28]
	goto $label$4 
	
.LABEL $label$17
	$11 = [28]
	goto $label$4 
	
.LABEL $label$16
	$11 = [24]
	goto $label$4 
	
.LABEL $label$15
	$11 = [21]
	goto $label$4 
	
.LABEL $label$14
	$11 = [8]
	goto $label$4 
	
.LABEL $label$13
	$11 = [9]
	goto $label$4 
	
.LABEL $label$12
	$11 = [14]
	goto $label$4 
	
.LABEL $label$11
	$11 = [10]
	goto $label$4 
	
.LABEL $label$10
	$11 = [14]
	goto $label$4 
	
.LABEL $label$9
	$11 = [17]
	goto $label$4 
	
.LABEL $label$8
	$11 = [23]
	goto $label$4 
	
.LABEL $label$7
	$11 = [22]
	goto $label$4 
	
.LABEL $label$6
	$11 = [20]
	goto $label$4 
	
.LABEL $label$5
	$11 = [27]
	goto $label$4 
	$11
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [60]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [68])))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [56])))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [44])))
	if ( (*($3 + [24]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [64]) = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$6 = *($1 + [8])
	*((($5 + [32]) + [24])) = $6
	$7 = *($1 + [16])
	*($5 + [48]) = $7
	*($5 + [32]) = $6
	*($5 + [40]) = $7
	$6 = *($1)
	*($5 + [24]) = $6
	$8 = ($1 + [60])
	CALL $185($8, (*(*($3)) + [24]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8820])
	*($5 + [72]) = [0]
	*($5 + [8]) = ($5 + [72])
	$9 = ($1 + [8])
	*($5 + [84]) = $9
	*($5 + [80]) = $1
	$10 = ($1 + [16])
	*($5 + [88]) = $10
	$11 = ($1 + [24])
	*($5 + [92]) = $11
	$12 = ($1 + [36])
	*($5 + [96]) = $12
	$13 = ($1 + [48])
	*($5 + [100]) = $13
	*($5 + [104]) = $8
	CALL $160(($5 + [80]), ($5 + [8]))
	$3 = *($5 + [72])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $202($3)
	$2 = *($5 + [64])
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [72]) = ($5 + [8])
	*($5 + [84]) = $9
	*($5 + [88]) = $10
	*($5 + [92]) = $11
	*($5 + [96]) = $12
	*($5 + [100]) = $13
	*($5 + [104]) = $8
	*($5 + [80]) = $1
	CALL $161(($5 + [80]), ($5 + [72]))
	CALL db_update_i64(*($1 + [76]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $205($4)
	
.LABEL $label$3
	$4 = ($0 + [36])
	$2 = *($5 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [84]) = $1
	*($5 + [80]) = $0
	*($5 + [92]) = $1
	*($5 + [88]) = ($5 + [32])
	*($5 + [96]) = ($5 + [24])
	*($5 + [100]) = ($5 + [64])
	*($5 + [72]) = ($5 + [80])
	CALL $162(($5 + [72]), $4, ($4 + [1]), ($4 + [2]))
	$global$0 = ($5 + [112])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8622])
	CALL memcpy(($3 + [16]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8622])
	CALL memcpy(($3 + [17]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy(($3 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *($1)
	CALL $146($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8820])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [76])
	*($3 + [64]) = $15
	$16 = ($1 + [80])
	*($3 + [68]) = $16
	$17 = ($1 + [92])
	*($3 + [72]) = $17
	CALL $115(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$4 = CALL $202($18)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($18 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [24]) = $1
	CALL $116(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $4, $18)
	if ( ((uint_32)$18 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $205($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *($1)
	$7 = (($6 + [8]) | [4])
	*(($6 = $4) + [8]) = $7
	*($6 + [12 align=4]) = (int_64)0
	$8 = (($6 + [64]) | [4])
	*($6 + [64]) = $8
	*($6 + [68 align=4]) = (int_64)0
	$9 = ($1 + [80])
	if ( ((int_32)$9 == (int_32)($6 + [8])) ){ goto $label$1 }
	CALL $117($9, $7, $7)
	
.LABEL $label$1
	$10 = ($1 + [92])
	if ( ((int_32)$10 == (int_32)($6 + [64])) ){ goto $label$2 }
	CALL $118($10, *($6 + [64]), $8)
	
.LABEL $label$2
	*($1 + [76]) = [1]
	CALL $54(($6 + [64]), *($6 + [68]))
	CALL $55(($6 + [8]), *($6 + [12]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8820])
	*($6) = [0]
	*($6 + [64]) = $6
	$8 = ($1 + [8])
	*($6 + [12]) = $8
	*($6 + [8]) = $1
	$11 = ($1 + [16])
	*($6 + [16]) = $11
	$12 = ($1 + [24])
	*($6 + [20]) = $12
	$13 = ($1 + [32])
	*($6 + [24]) = $13
	$14 = ($1 + [40])
	*($6 + [28]) = $14
	$15 = ($1 + [48])
	*($6 + [32]) = $15
	$16 = ($1 + [56])
	*($6 + [36]) = $16
	$17 = ($1 + [64])
	*($6 + [40]) = $17
	$18 = ($1 + [72])
	*($6 + [44]) = $18
	$19 = ($1 + [76])
	*($6 + [48]) = $19
	*($6 + [52]) = $9
	*($6 + [56]) = $10
	CALL $115(($6 + [8]), ($6 + [64]))
	$7 = *($6)
	if ( ($7 <= [513]) ){ goto $label$4 }
	$4 = CALL $202($7)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($6 + [68]) = $4
	*($6 + [64]) = $4
	*($6 + [72]) = ($4 + $7)
	*($6) = ($6 + [64])
	*($6 + [12]) = $8
	*($6 + [16]) = $11
	*($6 + [20]) = $12
	*($6 + [24]) = $13
	*($6 + [28]) = $14
	*($6 + [32]) = $15
	*($6 + [36]) = $16
	*($6 + [40]) = $17
	*($6 + [44]) = $18
	*($6 + [48]) = $19
	*($6 + [52]) = $9
	*($6 + [56]) = $10
	*($6 + [8]) = $1
	CALL $116(($6 + [8]), $6)
	CALL db_update_i64(*($1 + [108]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $205($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($6 + [80])
}

void .FUNC $62 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_64 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = ($global$0 - [240])
	$global$0 = $7
	*($7 + [224]) = $3
	*($7 + [232]) = $2
	*($7 + [223]) = $4
	*($7 + [208]) = $5
	*(($7 + [200])) = [0]
	*($7 + [176]) = (int_64)7235159537265672192
	*($7 + [184]) = (int_64)-1
	*($7 + [192]) = (int_64)0
	*($7 + [168]) = *($0)
	*($7 + [112]) = [0]
	*($7 + [104]) = (int_64)0
	$5 = ((uint_64)$1 / (uint_64)(int_64)10)
	CALL $189(($7 + [104]), int_32((((CASTING uint_32)(uint_64 $5) << [24]) + [1627389952]) >> [24]))
	CALL $189(($7 + [104]), int_32((((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$5 * (int_64)10))) << [24]) + [1627389952]) >> [24]))
	$4 = CALL $191(($7 + [104]), [0], [9341])
	$9 = ($4 + [8])
	*(($8 = (($7 + [144]) + [8]))) = *($9)
	*($7 + [144]) = *($4)
	*($4) = (int_64)0
	*($9) = [0]
	$4 = *($7 + [144])
	$9 = ($4 & [1])
	*($7 + [160]) = ( *($8) ? (($7 + [144]) | [1]) : $9 )
	*($7 + [164]) = ( *($7 + [148]) ? uint_32($4 >> [1]) : $9 )
	*($7 + [8]) = *($7 + [160])
	$5 = *(CALL $48(($7 + [64]), ($7 + [8])))
	if ( ((*($7 + [144]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$1
	if ( ((*($7 + [104]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($7 + [112])))
	
.LABEL $label$2
	$10 = [0]
	*((($7 + [104]) + [32])) = [0]
	*($7 + [112]) = $5
	*($7 + [120]) = (int_64)-1
	*($7 + [128]) = (int_64)0
	*($7 + [140]) = [0]
	$2 = *($0)
	*($7 + [104]) = $2
	*((($7 + [64]) + [32])) = [0]
	*($7 + [72]) = $5
	*($7 + [64]) = $2
	*($7 + [80]) = (int_64)-1
	*($7 + [88]) = (int_64)0
	$4 = [0]
	$8 = CALL db_find_i64($2, $5, (int_64)7035937633859534848, *($7 + [232]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $51(($7 + [64]), $8)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($7 + [64])), [8548])
	$4 = *($10 + [28])
	
.LABEL $label$3
	CALL eosio_assert($4, [9576])
	$5 = *((*($10 + [16]) + (*($7 + [224]) << [3])))
	*($7 + [56]) = $5
	if ( ($6 == 0) ){ goto $label$4 }
	if ( *($0 + [40]) ){ goto $label$4 }
	$4 = [1]
	if ( CALL has_auth($5) ){ goto $label$5 }
	$4 = CALL has_auth(*($0 + [32]))
	
.LABEL $label$5
	CALL eosio_assert($4, [9597])
	
.LABEL $label$4
	$8 = *(($7 + [196]))
	$6 = *(($7 + [192]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$10:
	$4 = ($8 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$9 }
	$8 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($9 + [104]) == (int_32)($7 + [168])), [8548])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$4 = [0]
	$8 = CALL db_find_i64(*($7 + [168]), *(($7 + [176])), (int_64)-4816269947984412672, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$9 = CALL $49(($7 + [168]), $8)
	CALL eosio_assert(((int_32)*($9 + [104]) == (int_32)($7 + [168])), [8548])
	
.LABEL $label$7
	$4 = ((int_32)*($9 + [76]) ^ (int_32)[1])
	
.LABEL $label$6
	CALL eosio_assert($4, [9219])
	$6 = [0]
	$11 = ($9 + [84])
	$4 = *($11)
	if ( ($4 == 0) ){ goto $label$11 }
	$1 = *($7 + [56])
	$8 = $11
	
.LOOP $label$12:
	$6 = (uint_64)(*($4 + [16]) <= $1)
	$8 = ( $8 ? $4 : $6 )
	$4 = *(($4 + ($6 << [2])))
	if ( $4 ){ goto $label$12 }
	$6 = [0]
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$11 }
	$6 = [0]
	if ( (uint_64)($1 <= *($8 + [16])) ){ goto $label$11 }
	$6 = ((uint_64)*($8 + [24]) >= (uint_64)*($7 + [208]))
	
.LABEL $label$11
	CALL eosio_assert($6, [9625])
	$1 = *($9 + [40])
	*($7 + [48]) = $1
	$5 = *($0)
	*($7 + [28]) = ($7 + [208])
	*($7 + [24]) = ($7 + [56])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8688])
	CALL $147(($7 + [168]), $9, $5, ($7 + [24]))
	$5 = *($0)
	*($7 + [24]) = ($7 + [208])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8688])
	CALL $148(($7 + [64]), $10, $5, ($7 + [24]))
	$8 = *(($7 + [132]))
	$9 = *(($7 + [128]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$23:
	$4 = ($8 + [-24])
	$6 = *($4)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$22 }
	$8 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($7 + [104])), [8548])
	goto $label$20 
	
.LABEL $label$21
	$4 = CALL db_find_i64(*($7 + [104]), *(($7 + [112])), (int_64)3617211075755245568, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$19 }
	$6 = CALL $149(($7 + [104]), $4)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($7 + [104])), [8548])
	
.LABEL $label$20
	$1 = *($0)
	*($7 + [28]) = ($7 + [224])
	*($7 + [24]) = ($7 + [232])
	*($7 + [32]) = ($7 + [223])
	*($7 + [36]) = ($7 + [208])
	CALL eosio_assert([1], [8688])
	CALL $150(($7 + [104]), $6, $1, ($7 + [24]))
	$9 = *($7 + [88])
	if ( $9 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$1 = *($0)
	*($7 + [28]) = ($7 + [232])
	*($7 + [24]) = ($7 + [48])
	*($7 + [32]) = ($7 + [224])
	*($7 + [36]) = ($7 + [223])
	*($7 + [40]) = ($7 + [208])
	CALL $151(($7 + [16]), ($7 + [104]), $1, ($7 + [24]))
	$9 = *($7 + [88])
	if ( ($9 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$0 = ($7 + [92])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$26 }
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$27 }
	*(($8 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$27
	CALL _ZdlPv($8)
	
.LABEL $label$26
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$25 }
	$4 = *(($7 + [88]))
	*($0) = $9
	CALL _ZdlPv($4)
	$6 = *($7 + [128])
	if ( $6 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$24
	*($0) = $9
	CALL _ZdlPv($9)
	$6 = *($7 + [128])
	if ( ($6 == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$6 = *($7 + [128])
	if ( $6 ){ goto $label$15 }
	
.LABEL $label$16
	$6 = *($7 + [192])
	if ( $6 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$9 = ($7 + [132])
	$4 = *($9)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$28 }
	
.LOOP $label$29:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$30 }
	CALL _ZdlPv($8)
	
.LABEL $label$30
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$29 }
	$4 = *(($7 + [128]))
	*($9) = $6
	CALL _ZdlPv($4)
	$6 = *($7 + [192])
	if ( $6 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$28
	*($9) = $6
	CALL _ZdlPv($6)
	$6 = *($7 + [192])
	if ( ($6 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$9 = ($7 + [196])
	$8 = *($9)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$32 }
	
.LOOP $label$33:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$34 }
	CALL $54(($4 + [92]), *(($4 + [96])))
	CALL $55(($4 + [80]), *(($4 + [84])))
	CALL _ZdlPv($4)
	
.LABEL $label$34
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$33 }
	$4 = *(($7 + [192]))
	goto $label$31 
	
.LABEL $label$32
	$4 = $6
	
.LABEL $label$31
	*($9) = $6
	CALL _ZdlPv($4)
	$global$0 = ($7 + [240])
	return 
	
.LABEL $label$13
	$global$0 = ($7 + [240])
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($2 + [1])
	$5 = ($1 + [1])
	$7 = ($6 & [1])
	$6 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($6 >> [1]) : $7 )
	$9 = [0]
	$10 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($2 + [4]) ? uint_32($6 >> [1]) : $10 )
	if ( ($6 == 0) ){ goto $label$2 }
	$11 = [0]
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$1 }
	$12 = ( *($1 + [8]) ? $5 : $7 )
	$13 = ($12 + $8)
	$14 = ( *($2 + [8]) ? $4 : $10 )
	$10 = *($14)
	$9 = $8
	$7 = $12
	
.LOOP $label$3:
	$9 = (($9 - $6) + [1])
	if ( ($9 == 0) ){ goto $label$1 }
	$9 = CALL $197($7, $10, $9)
	if ( ($9 == 0) ){ goto $label$1 }
	if ( (CALL $198($9, $14, $6) == 0) ){ goto $label$4 }
	$7 = ($9 + [1])
	$9 = ($13 - $7)
	if ( ((int_32)$9 >= (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$1 }
	$9 = ($9 - $12)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$15 = ($0 + [8])
	$12 = ($0 + [4])
	$11 = [0]
	
.LOOP $label$5:
	$7 = CALL $184($3, $1, $11, ($9 - $11), $1)
	$6 = *($12)
	if ( ((uint_32)$6 >= (uint_32)*($15)) ){ goto $label$7 }
	*($6) = *($3)
	$6 = ($3 + [8])
	*(($6 + [8])) = *($6)
	*($6) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	CALL $2($0, $7)
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$6
	$13 = ($6 & [1])
	$6 = *($2)
	$6 = ( *(($2 + [4])) ? uint_32($6 >> [1]) : $13 )
	$11 = ($6 + $9)
	$7 = ($6 & [1])
	$6 = *($1)
	$10 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($10 <= $11) ){ goto $label$1 }
	$9 = $11
	if ( ($6 == 0) ){ goto $label$8 }
	$7 = ($16 + $11)
	$16 = ( *(($1 + [8])) ? $5 : $7 )
	$14 = ($16 + $10)
	$9 = ($14 - $7)
	if ( ((int_32)$9 < (int_32)$6) ){ goto $label$1 }
	$13 = ( *(($2 + [8])) ? $4 : $13 )
	$10 = *($13)
	
.LOOP $label$9:
	$9 = (($9 - $6) + [1])
	if ( ($9 == 0) ){ goto $label$1 }
	$9 = CALL $197($7, $10, $9)
	if ( ($9 == 0) ){ goto $label$1 }
	if ( (CALL $198($9, $13, $6) == 0) ){ goto $label$10 }
	$7 = ($9 + [1])
	$9 = ($14 - $7)
	if ( ((int_32)$9 >= (int_32)$6) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$1 }
	$9 = ($9 - $16)
	
.LABEL $label$8
	if ( ((int_32)$9 != (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$1
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$11 }
	$6 = CALL $184($3, $1, $11, [-1], $1)
	$9 = ($0 + [4])
	$1 = *($9)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [8]))) ){ goto $label$12 }
	*($1) = *($3)
	*(($1 + [8])) = *(($3 + [8]))
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	*($9) = (*($9) + [12])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	CALL $2($0, $6)
	if ( ((*($3) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$11
	$global$0 = ($3 + [16])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *($1)
	CALL $165($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8820])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [76])
	*($3 + [64]) = $15
	$16 = ($1 + [80])
	*($3 + [68]) = $16
	$17 = ($1 + [92])
	*($3 + [72]) = $17
	CALL $115(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$4 = CALL $202($18)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($18 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [24]) = $1
	CALL $116(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $4, $18)
	if ( ((uint_32)$18 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $205($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [4 align=4]) = (int_64)0
	$3 = ($2 | [4])
	*($2) = $3
	$4 = *($1 + [8])
	$5 = *($1)
	$7 = ($1 + [20])
	$6 = *($1 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$8 = [0]
	$9 = ($6 + [16])
	if ( ((int_32)$3 != (int_32)$3) ){ goto $label$3 }
	$11 = [28]
	goto $label$1 
	
.LABEL $label$3
	$11 = [3]
	goto $label$1 
	
.LABEL $label$2
	$11 = [29]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$38 
	
.LABEL $label$65
	$8 = *($2 + [4])
	$6 = $10
	$9 = ($6 + [16])
	if ( ((int_32)*($2) == (int_32)$3) ){ goto $label$35 }
	$11 = [3]
	goto $label$4 
	
.LABEL $label$64
	$10 = $8
	$12 = $3
	if ( ($8 == 0) ){ goto $label$18 }
	$11 = [4]
	goto $label$4 
	
.LABEL $label$63
	$1 = $10
	$10 = *($1 + [4])
	if ( $10 ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$62
	$1 = *($12 + [8])
	$10 = ((int_32)*($1) == (int_32)$12)
	$12 = $1
	if ( $10 ){ goto $label$17 }
	$11 = [5]
	goto $label$4 
	
.LABEL $label$61
	$13 = *($9)
	if ( (uint_64)(*($1 + [16]) <= $13) ){ goto $label$34 }
	$11 = [6]
	goto $label$4 
	
.LABEL $label$60
	if ( ($8 == 0) ){ goto $label$16 }
	$11 = [7]
	goto $label$4 
	
.LABEL $label$59
	$10 = $3
	$14 = *($8 + [16])
	if ( ((uint_64)$13 >= (uint_64)$14) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$58
	$10 = $8
	$8 = $1
	$14 = *($8 + [16])
	if ( ((uint_64)$13 >= (uint_64)$14) ){ goto $label$31 }
	$11 = [20]
	goto $label$4 
	
.LABEL $label$57
	$1 = *($8)
	if ( $1 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$56
	if ( ((uint_64)$14 >= (uint_64)$13) ){ goto $label$13 }
	$11 = [17]
	goto $label$4 
	
.LABEL $label$55
	$10 = ($8 + [4])
	$1 = *($8 + [4])
	if ( ($1 == 0) ){ goto $label$8 }
	$11 = [18]
	goto $label$4 
	
.LABEL $label$54
	$8 = $10
	goto $label$30 
	
.LABEL $label$53
	$1 = $3
	$11 = [24]
	goto $label$4 
	
.LABEL $label$52
	if ( ($8 == 0) ){ goto $label$5 }
	$11 = [25]
	goto $label$4 
	
.LABEL $label$51
	$8 = ($1 + [4])
	if ( (*($8) == 0) ){ goto $label$10 }
	$11 = [10]
	goto $label$4 
	
.LABEL $label$50
	$1 = *($6 + [4])
	if ( $1 ){ goto $label$27 }
	$11 = [11]
	goto $label$4 
	
.LABEL $label$49
	$10 = *($6 + [8])
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$24 }
	$11 = [12]
	goto $label$4 
	
.LABEL $label$48
	$12 = ($6 + [8])
	$11 = [13]
	goto $label$4 
	
.LABEL $label$47
	$1 = *($12)
	$12 = ($1 + [8])
	$10 = *($1 + [8])
	if ( ((int_32)$1 != (int_32)*($10)) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$46
	$1 = $3
	$8 = $3
	if ( *($8) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$45
	$8 = $3
	$1 = $3
	goto $label$33 
	
.LABEL $label$44
	$1 = $8
	goto $label$32 
	
.LABEL $label$43
	$1 = $8
	$8 = $10
	if ( *($8) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$42
	$1 = $8
	$8 = $10
	$11 = [14]
	goto $label$4 
	
.LABEL $label$41
	*((($10 = CALL _Znwj([32])) + [24])) = *(($9 + [8]))
	*($10 + [16]) = *($9)
	*($10) = (int_64)0
	*($10 + [8]) = $1
	*($8) = $10
	$1 = *(*($2))
	if ( ($1 == 0) ){ goto $label$9 }
	$11 = [15]
	goto $label$4 
	
.LABEL $label$40
	*($2) = $1
	$10 = *($8)
	$11 = [16]
	goto $label$4 
	
.LABEL $label$39
	CALL $111(*($2 + [4]), $10)
	*(($1 = ($2 + [8]))) = (*($1) + [1])
	$1 = *($6 + [4])
	if ( ($1 == 0) ){ goto $label$25 }
	$11 = [0]
	goto $label$4 
	
.LABEL $label$38
	$10 = $1
	$1 = *($10)
	if ( $1 ){ goto $label$26 }
	$11 = [1]
	goto $label$4 
	
.LABEL $label$37
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$21 }
	$11 = [29]
	goto $label$4 
	
.LABEL $label$36
	CALL $173($0, $5, $4, $2)
	CALL $55($2, *($2 + [4]))
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$35
	$11 = [28]
	goto $label$4 
	
.LABEL $label$34
	$11 = [24]
	goto $label$4 
	
.LABEL $label$33
	$11 = [14]
	goto $label$4 
	
.LABEL $label$32
	$11 = [14]
	goto $label$4 
	
.LABEL $label$31
	$11 = [8]
	goto $label$4 
	
.LABEL $label$30
	$11 = [19]
	goto $label$4 
	
.LABEL $label$29
	$11 = [14]
	goto $label$4 
	
.LABEL $label$28
	$11 = [10]
	goto $label$4 
	
.LABEL $label$27
	$11 = [0]
	goto $label$4 
	
.LABEL $label$26
	$11 = [0]
	goto $label$4 
	
.LABEL $label$25
	$11 = [11]
	goto $label$4 
	
.LABEL $label$24
	$11 = [1]
	goto $label$4 
	
.LABEL $label$23
	$11 = [1]
	goto $label$4 
	
.LABEL $label$22
	$11 = [13]
	goto $label$4 
	
.LABEL $label$21
	$11 = [2]
	goto $label$4 
	
.LABEL $label$20
	$11 = [5]
	goto $label$4 
	
.LABEL $label$19
	$11 = [4]
	goto $label$4 
	
.LABEL $label$18
	$11 = [27]
	goto $label$4 
	
.LABEL $label$17
	$11 = [27]
	goto $label$4 
	
.LABEL $label$16
	$11 = [23]
	goto $label$4 
	
.LABEL $label$15
	$11 = [20]
	goto $label$4 
	
.LABEL $label$14
	$11 = [8]
	goto $label$4 
	
.LABEL $label$13
	$11 = [9]
	goto $label$4 
	
.LABEL $label$12
	$11 = [14]
	goto $label$4 
	
.LABEL $label$11
	$11 = [10]
	goto $label$4 
	
.LABEL $label$10
	$11 = [14]
	goto $label$4 
	
.LABEL $label$9
	$11 = [16]
	goto $label$4 
	
.LABEL $label$8
	$11 = [22]
	goto $label$4 
	
.LABEL $label$7
	$11 = [21]
	goto $label$4 
	
.LABEL $label$6
	$11 = [19]
	goto $label$4 
	
.LABEL $label$5
	$11 = [26]
	goto $label$4 
	$11
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *($1)
	$7 = (($6 + [8]) | [4])
	*(($6 = $4) + [8]) = $7
	*($6 + [12 align=4]) = (int_64)0
	$8 = (($6 + [64]) | [4])
	*($6 + [64]) = $8
	*($6 + [68 align=4]) = (int_64)0
	$9 = ($1 + [80])
	if ( ((int_32)$9 == (int_32)($6 + [8])) ){ goto $label$1 }
	CALL $117($9, $7, $7)
	
.LABEL $label$1
	$10 = ($1 + [92])
	if ( ((int_32)$10 == (int_32)($6 + [64])) ){ goto $label$2 }
	CALL $118($10, *($6 + [64]), $8)
	
.LABEL $label$2
	CALL $54(($6 + [64]), *($6 + [68]))
	CALL $55(($6 + [8]), *($6 + [12]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8820])
	*($6) = [0]
	*($6 + [64]) = $6
	$8 = ($1 + [8])
	*($6 + [12]) = $8
	*($6 + [8]) = $1
	$11 = ($1 + [16])
	*($6 + [16]) = $11
	$12 = ($1 + [24])
	*($6 + [20]) = $12
	$13 = ($1 + [32])
	*($6 + [24]) = $13
	$14 = ($1 + [40])
	*($6 + [28]) = $14
	$15 = ($1 + [48])
	*($6 + [32]) = $15
	$16 = ($1 + [56])
	*($6 + [36]) = $16
	$17 = ($1 + [64])
	*($6 + [40]) = $17
	$18 = ($1 + [72])
	*($6 + [44]) = $18
	$19 = ($1 + [76])
	*($6 + [48]) = $19
	*($6 + [52]) = $9
	*($6 + [56]) = $10
	CALL $115(($6 + [8]), ($6 + [64]))
	$7 = *($6)
	if ( ($7 <= [513]) ){ goto $label$4 }
	$4 = CALL $202($7)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($6 + [68]) = $4
	*($6 + [64]) = $4
	*($6 + [72]) = ($4 + $7)
	*($6) = ($6 + [64])
	*($6 + [12]) = $8
	*($6 + [16]) = $11
	*($6 + [20]) = $12
	*($6 + [24]) = $13
	*($6 + [28]) = $14
	*($6 + [32]) = $15
	*($6 + [36]) = $16
	*($6 + [40]) = $17
	*($6 + [44]) = $18
	*($6 + [48]) = $19
	*($6 + [52]) = $9
	*($6 + [56]) = $10
	*($6 + [8]) = $1
	CALL $116(($6 + [8]), $6)
	CALL db_update_i64(*($1 + [108]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $205($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($6 + [80])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $135($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $83($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $136($2, $1)
	CALL $138(CALL $137(CALL $137($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $193($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $83(($6 + [28]), [16])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [8682])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [8682])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $193($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	*($1 + [16]) = (int_64))(*($1 + [16]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8820])
	CALL eosio_assert([1], [8682])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$3 = *($3)
	*($1 + [16]) = (int_64))(*($1 + [16]) - *($3))
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8820])
	CALL eosio_assert([1], [8682])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $83($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8682])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8682])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $134(CALL $133($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $182 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8599])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $202($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [17])
	*($3 + [56]) = ($5 + [24])
	*($3 + [60]) = ($5 + [32])
	CALL $154(($3 + [40]), ($3 + [32]))
	*($5 + [48]) = [-1]
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $153(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $205($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $148 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$6 = *($1)
	CALL eosio_assert([1], [8820])
	$3 = [16]
	$7 = ($1 + [16])
	$8 = ($1 + [8])
	$10 = *($1 + [16])
	$9 = *(($1 + [20]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$3 = (($11 & [-8]) + $3)
	
.LABEL $label$2
	$9 = ($3 + [1])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$3 = CALL $202($9)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $8
	*($5 + [40]) = $7
	*($5 + [32]) = $1
	*($5 + [44]) = ($1 + [28])
	CALL $144(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [36]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $205($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8682])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [8682])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $145(*($1), *($0 + [8]))
	$1 = *($1)
	*($2 + [15]) = *(*($0 + [12]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [8682])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$6 = *($3)
	$7 = *($1)
	$8 = *(*($3 + [4]))
	$9 = ($1 + [84])
	$3 = *($9)
	if ( ($3 == 0) ){ goto $label$4 }
	$9 = ($1 + [84])
	$11 = *($3 + [16])
	$10 = *($6)
	if ( ((uint_64)$10 >= (uint_64)$11) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = $9
	$13 = [3]
	goto $label$1 
	
.LABEL $label$3
	$13 = [16]
	goto $label$1 
	
.LABEL $label$2
	$13 = [2]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$34 
	
.LABEL $label$38
	$9 = $3
	$3 = $12
	$11 = *($3 + [16])
	if ( ((uint_64)$10 >= (uint_64)$11) ){ goto $label$20 }
	$13 = [16]
	goto $label$5 
	
.LABEL $label$37
	$12 = *($3)
	if ( $12 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$36
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$15 }
	$13 = [15]
	goto $label$5 
	
.LABEL $label$35
	$9 = ($3 + [4])
	$12 = *($3 + [4])
	if ( ($12 == 0) ){ goto $label$18 }
	$13 = [0]
	goto $label$5 
	
.LABEL $label$34
	$3 = $9
	goto $label$19 
	
.LABEL $label$33
	$14 = ($1 + [80])
	$12 = *($9)
	if ( $12 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$32
	$14 = ($1 + [80])
	$9 = $3
	$12 = *($9)
	if ( $12 ){ goto $label$12 }
	$13 = [12]
	goto $label$5 
	
.LABEL $label$31
	*(($12 = CALL _Znwj([32]))) = (int_64)0
	*($12 + [8]) = $3
	*($9) = $12
	$10 = *($6)
	*($12 + [24]) = (int_64)0
	*($12 + [16]) = $10
	$3 = $12
	$6 = *(*($14))
	if ( ($6 == 0) ){ goto $label$6 }
	$13 = [13]
	goto $label$5 
	
.LABEL $label$30
	*($14) = $6
	$3 = *($9)
	$13 = [14]
	goto $label$5 
	
.LABEL $label$29
	CALL $111(*(($1 + [84])), $3)
	*(($3 = ($1 + [88]))) = (*($3) + [1])
	$13 = [4]
	goto $label$5 
	
.LABEL $label$28
	*(($3 = ($12 + [24]))) = (int_64))(*($3) - $8)
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)1)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [8820])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$12 = ($1 + [8])
	*($5 + [28]) = $12
	*($5 + [24]) = $1
	$6 = ($1 + [16])
	*($5 + [32]) = $6
	$15 = ($1 + [24])
	*($5 + [36]) = $15
	$16 = ($1 + [32])
	*($5 + [40]) = $16
	$17 = ($1 + [40])
	*($5 + [44]) = $17
	$18 = ($1 + [48])
	*($5 + [48]) = $18
	$19 = ($1 + [56])
	*($5 + [52]) = $19
	$20 = ($1 + [64])
	*($5 + [56]) = $20
	$21 = ($1 + [72])
	*($5 + [60]) = $21
	$22 = ($1 + [76])
	*($5 + [64]) = $22
	*($5 + [68]) = $14
	$23 = ($1 + [92])
	*($5 + [72]) = $23
	CALL $115(($5 + [24]), $5)
	$9 = *($5 + [16])
	if ( ($9 <= [513]) ){ goto $label$11 }
	$13 = [11]
	goto $label$5 
	
.LABEL $label$27
	$3 = CALL $202($9)
	goto $label$10 
	
.LABEL $label$26
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	$13 = [6]
	goto $label$5 
	
.LABEL $label$25
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $9)
	*($5 + [16]) = $5
	*($5 + [28]) = $12
	*($5 + [32]) = $6
	*($5 + [36]) = $15
	*($5 + [40]) = $16
	*($5 + [44]) = $17
	*($5 + [48]) = $18
	*($5 + [52]) = $19
	*($5 + [56]) = $20
	*($5 + [60]) = $21
	*($5 + [64]) = $22
	*($5 + [68]) = $14
	*($5 + [72]) = $23
	*($5 + [24]) = $1
	CALL $116(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$9 }
	$13 = [7]
	goto $label$5 
	
.LABEL $label$24
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	$13 = [9]
	goto $label$5 
	
.LABEL $label$23
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$22
	CALL $205($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	$13 = [8]
	goto $label$5 
	
.LABEL $label$21
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$20
	$13 = [2]
	goto $label$5 
	
.LABEL $label$19
	$13 = [1]
	goto $label$5 
	
.LABEL $label$18
	$13 = [3]
	goto $label$5 
	
.LABEL $label$17
	$13 = [17]
	goto $label$5 
	
.LABEL $label$16
	$13 = [1]
	goto $label$5 
	
.LABEL $label$15
	$13 = [3]
	goto $label$5 
	
.LABEL $label$14
	$13 = [12]
	goto $label$5 
	
.LABEL $label$13
	$13 = [4]
	goto $label$5 
	
.LABEL $label$12
	$13 = [4]
	goto $label$5 
	
.LABEL $label$11
	$13 = [5]
	goto $label$5 
	
.LABEL $label$10
	$13 = [6]
	goto $label$5 
	
.LABEL $label$9
	$13 = [10]
	goto $label$5 
	
.LABEL $label$8
	$13 = [8]
	goto $label$5 
	
.LABEL $label$7
	$13 = [9]
	goto $label$5 
	
.LABEL $label$6
	$13 = [14]
	goto $label$5 
	$13
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$2 = *($0)
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)($2 + [4])) ){ goto $label$2 }
	$4 = ($1 + [84])
	$5 = ($1 + [80])
	$6 = ($1 + [88])
	$7 = (int_64)0
	
.LOOP $label$3:
	$8 = $3
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$7 }
	$10 = *($8 + [16])
	$3 = $4
	$2 = $9
	
.LOOP $label$8:
	$11 = (uint_64)(*($2 + [16]) <= $10)
	$3 = ( $3 ? $2 : $11 )
	$2 = *(($2 + ($11 << [2])))
	if ( $2 ){ goto $label$8 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	if ( (uint_64)($10 <= *($3 + [16])) ){ goto $label$5 }
	$12 = *($8 + [24])
	$3 = $4
	$13 = *($9 + [16])
	if ( ((uint_64)$10 >= (uint_64)$13) ){ goto $label$9 }
	$14 = [14]
	goto $label$4 
	
.LABEL $label$9
	$14 = [2]
	goto $label$4 
	
.LABEL $label$7
	$14 = [5]
	goto $label$4 
	
.LABEL $label$6
	$14 = [5]
	goto $label$4 
	
.LABEL $label$5
	$14 = [5]
	
.LABEL $label$4
	
.LOOP $label$10:
	goto $label$34 
	
.LABEL $label$37
	$9 = $2
	$13 = *($9 + [16])
	if ( ((uint_64)$10 >= (uint_64)$13) ){ goto $label$22 }
	$14 = [14]
	goto $label$10 
	
.LABEL $label$36
	$3 = $9
	$2 = *($9)
	if ( $2 ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$35
	if ( ((uint_64)$13 >= (uint_64)$10) ){ goto $label$20 }
	$14 = [0]
	goto $label$10 
	
.LABEL $label$34
	$3 = ($9 + [4])
	$2 = *($9 + [4])
	if ( $2 ){ goto $label$21 }
	$14 = [3]
	goto $label$10 
	
.LABEL $label$33
	$2 = *($3)
	if ( $2 ){ goto $label$17 }
	$14 = [11]
	goto $label$10 
	
.LABEL $label$32
	*(($2 = CALL _Znwj([32]))) = (int_64)0
	*($2 + [8]) = $9
	*($3) = $2
	$10 = *(($8 + [16]))
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = $10
	$11 = $2
	$9 = *(*($5))
	if ( ($9 == 0) ){ goto $label$11 }
	$14 = [12]
	goto $label$10 
	
.LABEL $label$31
	*($5) = $9
	$11 = *($3)
	$14 = [13]
	goto $label$10 
	
.LABEL $label$30
	CALL $111(*(($1 + [84])), $11)
	*($6) = (*($6) + [1])
	$14 = [4]
	goto $label$10 
	
.LABEL $label$29
	*(($2 = ($2 + [24]))) = ((int_64)*($2) + (int_64)$12)
	$14 = [5]
	goto $label$10 
	
.LABEL $label$28
	$10 = *($8 + [24])
	$2 = *($8 + [4])
	if ( ($2 == 0) ){ goto $label$14 }
	$14 = [6]
	goto $label$10 
	
.LABEL $label$27
	$3 = $2
	$2 = *($3)
	if ( $2 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$26
	$3 = *($8 + [8])
	if ( ((int_32)*($3) == (int_32)$8) ){ goto $label$13 }
	$14 = [9]
	goto $label$10 
	
.LABEL $label$25
	$11 = ($8 + [8])
	$14 = [10]
	goto $label$10 
	
.LABEL $label$24
	$2 = *($11)
	$11 = ($2 + [8])
	$3 = *($2 + [8])
	if ( ((int_32)$2 != (int_32)*($3)) ){ goto $label$12 }
	$14 = [7]
	goto $label$10 
	
.LABEL $label$23
	$7 = ((int_64)$10 + (int_64)$7)
	if ( ((int_32)$3 != (int_32)(*($0) + [4])) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$22
	$14 = [2]
	goto $label$10 
	
.LABEL $label$21
	$14 = [1]
	goto $label$10 
	
.LABEL $label$20
	$14 = [3]
	goto $label$10 
	
.LABEL $label$19
	$14 = [3]
	goto $label$10 
	
.LABEL $label$18
	$14 = [1]
	goto $label$10 
	
.LABEL $label$17
	$14 = [4]
	goto $label$10 
	
.LABEL $label$16
	$14 = [7]
	goto $label$10 
	
.LABEL $label$15
	$14 = [6]
	goto $label$10 
	
.LABEL $label$14
	$14 = [8]
	goto $label$10 
	
.LABEL $label$13
	$14 = [7]
	goto $label$10 
	
.LABEL $label$12
	$14 = [10]
	goto $label$10 
	
.LABEL $label$11
	$14 = [13]
	goto $label$10 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((uint_64)$7 <= (uint_64)*(*(*($0 + [4]) + [4]) + [8])), [9558])
	$14
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $45(*($1), *($0 + [8]))
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8622])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $193($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $193($0)
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $193($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9674])
	$2 = *($0 + [4])
	$3 = *($2 + [80])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)7035936280380030976, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [80]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [8548])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $156($6, CALL $fimport$6(*($6), *($6 + [8]), (int_64)7035936280380030976, $5))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [8548])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [80])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [9704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [9749])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9799])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [60]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [68])))
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [56])))
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [44])))
	if ( (*($4 + [24]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	if ( ((*($6 + [60]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($6 + [68])))
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($6 + [56])))
	if ( ((*($6 + [36]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($6 + [36]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($6 + [44])))
	if ( (*($6 + [24]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$19
	CALL _ZdlPv($6)
	
.LABEL $label$18
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$17 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [76]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $163(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [9749])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9799])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [44]))
	$6 = *(($1 + [48]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3617211075755245568, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)7035936280380030976, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [8548])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $156($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)7035936280380030976, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [8548])
	
.LABEL $label$2
	*(($4 + [80])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [9749])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9799])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [16])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [16])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8599])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $202($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8622])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8622])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8622])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $123(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $205($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8599])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $202($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [12 align=4]) = (int_64)0
	*($5 + [20]) = $0
	*($5 + [8]) = ($5 + [12])
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8622])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $56(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $164(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $205($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $55(($1 + [8]), *(($1 + [12])))
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [9749])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9799])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL $55(($3 + [8]), *(($3 + [12])))
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $55(($5 + [8]), *(($5 + [12])))
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8820])
	CALL eosio_assert([1], [8682])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $83($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $130(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *($1)
	CALL $124($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8820])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [76])
	*($3 + [64]) = $15
	$16 = ($1 + [80])
	*($3 + [68]) = $16
	$17 = ($1 + [92])
	*($3 + [72]) = $17
	CALL $115(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$4 = CALL $202($18)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($18 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [24]) = $1
	CALL $116(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $4, $18)
	if ( ((uint_32)$18 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $205($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8820])
	CALL eosio_assert([1], [8682])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	$2 = CALL $199([8411])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8450])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8410]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8495])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)4
	
.LABEL $label$1
	$5 = *($1 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$3), [8415])
	$4 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$3 = $5
	$4 = [1]
	$1 = $2
	$2 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = $5
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$1 = ($2 + [1])
	$2 = $1
	if ( $4 ){ goto $label$12 }
	$4 = [1]
	$2 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$10 }
	
.LABEL $label$9
	CALL eosio_assert($4, [8433])
	return 
	
.LABEL $label$8
	CALL eosio_assert([0], [8433])
	return 
	
.LABEL $label$7
	CALL eosio_assert([0], [8433])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *($1)
	CALL $122($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8820])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [76])
	*($3 + [64]) = $15
	$16 = ($1 + [80])
	*($3 + [68]) = $16
	$17 = ($1 + [92])
	*($3 + [72]) = $17
	CALL $115(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$4 = CALL $202($18)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($18 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [24]) = $1
	CALL $116(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $4, $18)
	if ( ((uint_32)$18 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $205($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8631])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([120])) + [64]) = (int_64)0
	*($3 + [84 align=4]) = (int_64)0
	*($3 + [96 align=4]) = (int_64)0
	*($3 + [104]) = $1
	*($3 + [80]) = ($3 + [84])
	*($3 + [92]) = ($3 + [96])
	CALL $106(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [108])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $107(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $54(($3 + [92]), *(($3 + [96])))
	CALL $55(($3 + [80]), *(($3 + [84])))
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *($1)
	CALL eosio_assert((int_64)(*($1 + [16]) == 0), [8998])
	$6 = *(*(*($3) + [4]) + [24])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)((int_64)$6 * (int_64)-100))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)((int_64)$6 * (int_64)100))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8820])
	CALL eosio_assert([1], [8682])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$6 = *($1)
	CALL eosio_assert([1], [8820])
	$3 = [16]
	$7 = ($1 + [16])
	$8 = ($1 + [8])
	$10 = *($1 + [16])
	$9 = *(($1 + [20]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$3 = (($11 & [-8]) + $3)
	
.LABEL $label$2
	$9 = ($3 + [1])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$3 = CALL $202($9)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $8
	*($5 + [40]) = $7
	*($5 + [32]) = $1
	*($5 + [44]) = ($1 + [28])
	CALL $144(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [36]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $205($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8599])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $202($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $108(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $109(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $205($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *(*($3) + [4])
	*($1 + [16]) = *($5 + [16])
	*($1 + [8]) = *($5 + [8])
	*($1 + [24]) = *($5 + [24])
	*($1 + [56]) = *(*($3 + [4]))
	$6 = *($1)
	CALL eosio_assert([1], [8820])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$7 = ($1 + [8])
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	$8 = ($1 + [16])
	*($3 + [32]) = $8
	$9 = ($1 + [24])
	*($3 + [36]) = $9
	$10 = ($1 + [32])
	*($3 + [40]) = $10
	$11 = ($1 + [40])
	*($3 + [44]) = $11
	$12 = ($1 + [48])
	*($3 + [48]) = $12
	$13 = ($1 + [56])
	*($3 + [52]) = $13
	$14 = ($1 + [64])
	*($3 + [56]) = $14
	$15 = ($1 + [72])
	*($3 + [60]) = $15
	$16 = ($1 + [76])
	*($3 + [64]) = $16
	$17 = ($1 + [80])
	*($3 + [68]) = $17
	$18 = ($1 + [92])
	*($3 + [72]) = $18
	CALL $115(($3 + [24]), $3)
	$19 = *($3 + [16])
	if ( ($19 <= [513]) ){ goto $label$2 }
	$5 = CALL $202($19)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($4 - (($19 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$1
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $19)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [32]) = $8
	*($3 + [36]) = $9
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	*($3 + [52]) = $13
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $17
	*($3 + [72]) = $18
	*($3 + [24]) = $1
	CALL $116(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $5, $19)
	if ( ((uint_32)$19 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $205($5)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8631])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [32]) = $1
	CALL $166(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $109(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8682])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8682])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $134($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = [16]
	$6 = *($0)
	$4 = *($4 + [4])
	$7 = ($1 + [16])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	CALL $143($7, *($4), *($4 + [4]))
	
.LABEL $label$1
	*($1 + [28]) = [1]
	$8 = ($1 + [28])
	$9 = *($1 + [16])
	$4 = *(($1 + [20]))
	$10 = ($4 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$3 }
	$5 = (($10 & [-8]) + $5)
	
.LABEL $label$3
	$4 = ($5 + [1])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$5 = CALL $202($4)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	CALL $144(($3 + [32]), ($3 + [24]))
	$11 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($6 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $11, $5, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$11 >= (uint_64)*($6 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $205($5)
	if ( (uint_64)($11 <= *($6 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $121(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = $1
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = $4
	$4 = *($2)
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$4
	$3 = *($2 + [4])
	if ( $3 ){ goto $label$2 }
	$5 = ($2 + [8])
	$6 = [0]
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($3 + [8]) = *($2 + [8])
	$5 = ($2 + [8])
	$6 = [1]
	
.LABEL $label$1
	$7 = *(($2 + [8]))
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	*($7 + [4]) = $3
	$7 = *($2 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($7) = $3
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$11 }
	$4 = *($7 + [4])
	$7 = *($2 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = [0]
	$0 = $3
	$7 = *($2 + [12])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$8 }
	
.LABEL $label$9
	$8 = *($1 + [8])
	*($5) = $8
	*(($8 + ( [0] ? [4] : ((int_32)*(*($1 + [8])) == (int_32)$1) ))) = $2
	*(($5 = *($1)) + [8]) = $2
	*($2) = $5
	$5 = *($1 + [4])
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*(($2 + [12])) = *($1 + [12])
	$0 = ( $2 ? $0 : ((int_32)$0 == (int_32)$1) )
	if ( ($7 & [255]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (($7 & [255]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$13 }
	*($3 + [12]) = [1]
	return 
	
.LABEL $label$13
	
.LOOP $label$21:
	$1 = *($4 + [12])
	$2 = *($4 + [8])
	if ( ((int_32)*($2) == (int_32)$4) ){ goto $label$33 }
	if ( (($1 & [255]) == 0) ){ goto $label$32 }
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$33
	if ( (($1 & [255]) == 0) ){ goto $label$31 }
	$1 = $4
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$32
	*(($4 + [12])) = [1]
	*($2 + [12]) = [0]
	$1 = *($2 + [4])
	$3 = *($1)
	*($2 + [4]) = $3
	if ( ($3 == 0) ){ goto $label$34 }
	*($3 + [8]) = $2
	
.LABEL $label$34
	*($1 + [8]) = *($2 + [8])
	*((($3 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($3) == (int_32)$2) ))) = $1
	*($1) = $2
	*($2 + [8]) = $1
	$2 = *($4)
	$0 = ( $4 ? $0 : ((int_32)$0 == (int_32)$2) )
	$4 = *($2 + [4])
	$2 = *($4)
	if ( $2 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$31
	*(($4 + [12])) = [1]
	$1 = *($4 + [4])
	*($2) = $1
	*($2 + [12]) = [0]
	if ( ($1 == 0) ){ goto $label$35 }
	*($1 + [8]) = $2
	
.LABEL $label$35
	*(($4 + [8])) = *($2 + [8])
	$3 = *($2 + [8])
	if ( ((int_32)*($3) == (int_32)$2) ){ goto $label$37 }
	*($3 + [4]) = $4
	goto $label$36 
	
.LABEL $label$37
	*($3) = $4
	$1 = *($2)
	
.LABEL $label$36
	*(($2 + [8])) = $4
	*(($4 + [4])) = $2
	$0 = ( $4 ? $0 : ((int_32)$0 == (int_32)$2) )
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	if ( (*($2 + [12]) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$38 }
	if ( (*($4 + [12]) == 0) ){ goto $label$27 }
	
.LABEL $label$38
	*($1 + [12]) = [0]
	$4 = *($1 + [8])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$39 }
	if ( (*($4 + [12]) & [255]) ){ goto $label$22 }
	
.LABEL $label$39
	*($4 + [12]) = [1]
	return 
	
.LABEL $label$28
	$3 = ($2 + [12])
	goto $label$26 
	
.LABEL $label$27
	if ( ($2 == 0) ){ goto $label$41 }
	if ( (*($2 + [12]) == 0) ){ goto $label$40 }
	$4 = *($1 + [4])
	
.LABEL $label$41
	*($4 + [12]) = [1]
	*($1 + [12]) = [0]
	$2 = *($4)
	*(($1 + [4])) = $2
	if ( ($2 == 0) ){ goto $label$42 }
	*($2 + [8]) = $1
	
.LABEL $label$42
	$3 = ($1 + [12])
	$2 = ($4 + [12])
	*($4 + [8]) = *($1 + [8])
	*((($0 = *($1 + [8])) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$1) ))) = $4
	*($1 + [8]) = $4
	*($4) = $1
	$4 = ($4 + [8])
	goto $label$25 
	
.LABEL $label$40
	$3 = ($2 + [12])
	
.LABEL $label$26
	$2 = ($1 + [12])
	$4 = ($1 + [8])
	
.LABEL $label$25
	$4 = *($4)
	*($2) = *($4 + [12])
	*($4 + [12]) = [1]
	$2 = *($4)
	$0 = *($2 + [4])
	*($4) = $0
	*($3) = [1]
	if ( ($0 == 0) ){ goto $label$43 }
	*($0 + [8]) = $4
	
.LABEL $label$43
	*($2 + [8]) = *($4 + [8])
	*((($0 = *($4 + [8])) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$4) ))) = $2
	*($4 + [8]) = $2
	*(($2 + [4])) = $4
	return 
	
.LABEL $label$24
	if ( (*($2 + [12]) == 0) ){ goto $label$18 }
	
.LABEL $label$23
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$44 }
	if ( (*($1 + [12]) == 0) ){ goto $label$17 }
	
.LABEL $label$44
	*($4 + [12]) = [0]
	$4 = *($4 + [8])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$20 }
	if ( (*($4 + [12]) == 0) ){ goto $label$19 }
	
.LABEL $label$22
	$2 = *($4 + [8])
	$4 = *(($2 + (((int_32)*($2) == (int_32)$4) << [2])))
	goto $label$21 
	
.LABEL $label$20
	$4 = $0
	
.LABEL $label$19
	*($4 + [12]) = [1]
	return 
	
.LABEL $label$18
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($1 + [12]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	*($2 + [12]) = [1]
	*($4 + [12]) = [0]
	$0 = *($2 + [4])
	*($4) = $0
	if ( ($0 == 0) ){ goto $label$45 }
	*($0 + [8]) = $4
	
.LABEL $label$45
	$1 = ($4 + [12])
	$0 = ($2 + [12])
	*($2 + [8]) = *($4 + [8])
	*((($3 = *($4 + [8])) + ( [0] ? [4] : ((int_32)*($3) == (int_32)$4) ))) = $2
	*($4 + [8]) = $2
	*(($2 + [4])) = $4
	$4 = ($2 + [8])
	goto $label$14 
	
.LABEL $label$15
	$1 = ($1 + [12])
	$0 = ($4 + [12])
	$4 = ($4 + [8])
	
.LABEL $label$14
	$4 = *($4)
	*($0) = *($4 + [12])
	*($4 + [12]) = [1]
	$2 = *($4 + [4])
	$0 = *($2)
	*($4 + [4]) = $0
	*($1) = [1]
	if ( ($0 == 0) ){ goto $label$46 }
	*($0 + [8]) = $4
	
.LABEL $label$46
	*($2 + [8]) = *($4 + [8])
	*((($0 = *($4 + [8])) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$4) ))) = $2
	*($4 + [8]) = $2
	*($2) = $4
	return 
	
.LABEL $label$6
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = *($0 + [4])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = *($1)
	$5 = ($0 + [4])
	$6 = $5
	$1 = $3
	
.LOOP $label$2:
	$7 = (uint_64)(*($1 + [16]) <= $4)
	$6 = ( $6 ? $1 : $7 )
	$1 = *(($1 + ($7 << [2])))
	if ( $1 ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$1 }
	if ( (uint_64)($4 <= *($6 + [16])) ){ goto $label$1 }
	$1 = *($6 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = $1
	$1 = *($7)
	if ( $1 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = *($6 + [8])
	if ( ((int_32)*($7) == (int_32)$6) ){ goto $label$3 }
	$2 = ($6 + [8])
	
.LOOP $label$6:
	$1 = *($2)
	$2 = ($1 + [8])
	$7 = *($1 + [8])
	if ( ((int_32)$1 != (int_32)*($7)) ){ goto $label$6 }
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)$6) ){ goto $label$7 }
	*($0) = $7
	
.LABEL $label$7
	*($0 + [8]) = (*($0 + [8]) + [-1])
	CALL $131($3, $6)
	$2 = [1]
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6 + [32]))
	
.LABEL $label$8
	CALL _ZdlPv($6)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8682])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8682])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8682])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8682])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8682])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8682])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8682])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8682])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8682])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8682])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8682])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8682])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8682])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8682])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $134(CALL $133($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $202 (int_32 $0)
{
	return CALL $203([10216], $0)
}

int_32 .FUNC $203 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $204($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8199])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $200 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $194())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $201($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $202($1)
	
.LABEL $label$2
	*(CALL $194()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $202(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $205($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $204 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10208]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10212])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10208]) = [1]
	$2 = ($2 << [16])
	*([0] + [10212]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10212])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10212]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10208]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10208]) = [1]
	$3 = ($3 << [16])
	*([0] + [10212]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10212])
	
.LABEL $label$10
	*([0] + [10212]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $205 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18600])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18408]
	$3 = (((int_32)$1 * (int_32)[12]) + [18408])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $129 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$6 = ($1 + [80])
	$7 = *($1)
	$8 = ($1 + [84])
	$9 = *($8)
	if ( ($9 == 0) ){ goto $label$1 }
	$10 = *(*($3))
	$11 = $8
	$12 = $9
	
.LOOP $label$2:
	$13 = (uint_64)(*($12 + [16]) <= $10)
	$11 = ( $11 ? $12 : $13 )
	$12 = *(($12 + ($13 << [2])))
	if ( $12 ){ goto $label$2 }
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$1 }
	if ( (uint_64)($10 <= *($11 + [16])) ){ goto $label$1 }
	$12 = *($11 + [4])
	if ( ($12 == 0) ){ goto $label$4 }
	
.LOOP $label$5:
	$13 = $12
	$12 = *($13)
	if ( $12 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$13 = *($11 + [8])
	if ( ((int_32)*($13) == (int_32)$11) ){ goto $label$3 }
	$8 = ($11 + [8])
	
.LOOP $label$6:
	$12 = *($8)
	$8 = ($12 + [8])
	$13 = *($12 + [8])
	if ( ((int_32)$12 != (int_32)*($13)) ){ goto $label$6 }
	
.LABEL $label$3
	if ( ((int_32)*($6) != (int_32)$11) ){ goto $label$7 }
	*($6) = $13
	
.LABEL $label$7
	*(($12 = ($1 + [88]))) = (*($12) + [-1])
	CALL $131($9, $11)
	CALL _ZdlPv($11)
	
.LABEL $label$1
	$13 = ($1 + [92])
	CALL $132($13, *($3))
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [8820])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$8 = ($1 + [8])
	*($5 + [28]) = $8
	*($5 + [24]) = $1
	$3 = ($1 + [16])
	*($5 + [32]) = $3
	$9 = ($1 + [24])
	*($5 + [36]) = $9
	$14 = ($1 + [32])
	*($5 + [40]) = $14
	$15 = ($1 + [40])
	*($5 + [44]) = $15
	$16 = ($1 + [48])
	*($5 + [48]) = $16
	$17 = ($1 + [56])
	*($5 + [52]) = $17
	$18 = ($1 + [64])
	*($5 + [56]) = $18
	$19 = ($1 + [72])
	*($5 + [60]) = $19
	$20 = ($1 + [76])
	*($5 + [64]) = $20
	*($5 + [68]) = $6
	*($5 + [72]) = $13
	CALL $115(($5 + [24]), $5)
	$11 = *($5 + [16])
	if ( ($11 <= [513]) ){ goto $label$9 }
	$12 = CALL $202($11)
	goto $label$8 
	
.LABEL $label$9
	$12 = ($4 - (($11 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$8
	*($5 + [4]) = $12
	*($5) = $12
	*($5 + [8]) = ($12 + $11)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [32]) = $3
	*($5 + [36]) = $9
	*($5 + [40]) = $14
	*($5 + [44]) = $15
	*($5 + [48]) = $16
	*($5 + [52]) = $17
	*($5 + [56]) = $18
	*($5 + [60]) = $19
	*($5 + [64]) = $20
	*($5 + [68]) = $6
	*($5 + [72]) = $13
	*($5 + [24]) = $1
	CALL $116(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $12, $11)
	if ( ((uint_32)$11 >= (uint_32)[513]) ){ goto $label$12 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $205($12)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$10
	$global$0 = ($5 + [80])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = ($1 + [96])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($1 + [96])
	$7 = *($5 + [16])
	$6 = *($2)
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$5 = $4
	$9 = [3]
	goto $label$1 
	
.LABEL $label$3
	$9 = [28]
	goto $label$1 
	
.LABEL $label$2
	$9 = [2]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$57 
	
.LABEL $label$61
	$4 = $5
	$5 = $8
	$7 = *($5 + [16])
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$29 }
	$9 = [28]
	goto $label$5 
	
.LABEL $label$60
	$8 = *($5)
	if ( $8 ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$59
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$24 }
	$9 = [27]
	goto $label$5 
	
.LABEL $label$58
	$4 = ($5 + [4])
	$8 = *($5 + [4])
	if ( ($8 == 0) ){ goto $label$27 }
	$9 = [0]
	goto $label$5 
	
.LABEL $label$57
	$5 = $4
	goto $label$28 
	
.LABEL $label$56
	$8 = *($4)
	if ( $8 ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$55
	$4 = $5
	$8 = *($4)
	if ( $8 ){ goto $label$21 }
	$9 = [24]
	goto $label$5 
	
.LABEL $label$54
	*(($8 = CALL _Znwj([40])) + [24 align=4]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [8]) = $5
	*($4) = $8
	*($8 + [32]) = [0]
	*($8 + [16]) = *($2)
	$5 = $8
	$2 = ($1 + [92])
	$10 = *(*($2))
	if ( ($10 == 0) ){ goto $label$6 }
	$9 = [25]
	goto $label$5 
	
.LABEL $label$53
	*($2) = $10
	$5 = *($4)
	$9 = [26]
	goto $label$5 
	
.LABEL $label$52
	CALL $111(*(($1 + [96])), $5)
	*(($5 = ($1 + [100]))) = (*($5) + [1])
	$9 = [4]
	goto $label$5 
	
.LABEL $label$51
	CALL $185(($8 + [24]), $3)
	$3 = ($1 + [84])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$20 }
	$9 = [5]
	goto $label$5 
	
.LABEL $label$50
	$6 = *(*($0))
	$4 = $3
	$9 = [6]
	goto $label$5 
	
.LABEL $label$49
	$8 = (uint_64)(*($5 + [16]) <= $6)
	$4 = ( $4 ? $5 : $8 )
	$5 = *(($5 + ($8 << [2])))
	if ( $5 ){ goto $label$19 }
	$9 = [7]
	goto $label$5 
	
.LABEL $label$48
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$18 }
	$9 = [8]
	goto $label$5 
	
.LABEL $label$47
	if ( ((uint_64)$6 >= (uint_64)*($4 + [16])) ){ goto $label$17 }
	$9 = [23]
	goto $label$5 
	
.LABEL $label$46
	$4 = $3
	$9 = [9]
	goto $label$5 
	
.LABEL $label$45
	CALL eosio_assert(((int_32)$4 == (int_32)$3), [9017])
	$8 = *($0)
	$11 = *(*($0 + [8]))
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$16 }
	$9 = [10]
	goto $label$5 
	
.LABEL $label$44
	$3 = ($1 + [84])
	$7 = *($5 + [16])
	$6 = *($8)
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$43
	$3 = $5
	$5 = $4
	$7 = *($5 + [16])
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$31 }
	$9 = [20]
	goto $label$5 
	
.LABEL $label$42
	$4 = *($5)
	if ( $4 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$41
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$12 }
	$9 = [17]
	goto $label$5 
	
.LABEL $label$40
	$3 = ($5 + [4])
	$4 = *($5 + [4])
	if ( ($4 == 0) ){ goto $label$13 }
	$9 = [18]
	goto $label$5 
	
.LABEL $label$39
	$5 = $3
	goto $label$30 
	
.LABEL $label$38
	$5 = $3
	$9 = [12]
	goto $label$5 
	
.LABEL $label$37
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$11 }
	$9 = [13]
	goto $label$5 
	
.LABEL $label$36
	*(($4 + [24])) = $11
	return 
	
.LABEL $label$35
	$3 = $5
	$4 = *($3)
	if ( $4 ){ goto $label$10 }
	$9 = [14]
	goto $label$5 
	
.LABEL $label$34
	*(($4 = CALL _Znwj([32]))) = (int_64)0
	*($4 + [8]) = $5
	*($3) = $4
	$6 = *($8)
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $6
	$5 = $4
	$8 = ($1 + [80])
	$0 = *(*($8))
	if ( ($0 == 0) ){ goto $label$9 }
	$9 = [15]
	goto $label$5 
	
.LABEL $label$33
	*($8) = $0
	$5 = *($3)
	$9 = [16]
	goto $label$5 
	
.LABEL $label$32
	CALL $111(*(($1 + [84])), $5)
	*(($5 = ($1 + [88]))) = (*($5) + [1])
	*(($4 + [24])) = $11
	return 
	
.LABEL $label$31
	$9 = [11]
	goto $label$5 
	
.LABEL $label$30
	$9 = [19]
	goto $label$5 
	
.LABEL $label$29
	$9 = [2]
	goto $label$5 
	
.LABEL $label$28
	$9 = [1]
	goto $label$5 
	
.LABEL $label$27
	$9 = [3]
	goto $label$5 
	
.LABEL $label$26
	$9 = [29]
	goto $label$5 
	
.LABEL $label$25
	$9 = [1]
	goto $label$5 
	
.LABEL $label$24
	$9 = [3]
	goto $label$5 
	
.LABEL $label$23
	$9 = [24]
	goto $label$5 
	
.LABEL $label$22
	$9 = [4]
	goto $label$5 
	
.LABEL $label$21
	$9 = [4]
	goto $label$5 
	
.LABEL $label$20
	$9 = [23]
	goto $label$5 
	
.LABEL $label$19
	$9 = [6]
	goto $label$5 
	
.LABEL $label$18
	$9 = [23]
	goto $label$5 
	
.LABEL $label$17
	$9 = [9]
	goto $label$5 
	
.LABEL $label$16
	$9 = [22]
	goto $label$5 
	
.LABEL $label$15
	$9 = [20]
	goto $label$5 
	
.LABEL $label$14
	$9 = [11]
	goto $label$5 
	
.LABEL $label$13
	$9 = [12]
	goto $label$5 
	
.LABEL $label$12
	$9 = [12]
	goto $label$5 
	
.LABEL $label$11
	$9 = [14]
	goto $label$5 
	
.LABEL $label$10
	$9 = [13]
	goto $label$5 
	
.LABEL $label$9
	$9 = [16]
	goto $label$5 
	
.LABEL $label$8
	$9 = [21]
	goto $label$5 
	
.LABEL $label$7
	$9 = [19]
	goto $label$5 
	
.LABEL $label$6
	$9 = [26]
	goto $label$5 
	$9
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [128])
	$global$0 = $5
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*($5 + [72]) = [0]
	*($5 + [64]) = (int_64)0
	$6 = ((uint_64)$1 / (uint_64)(int_64)10)
	CALL $189(($5 + [64]), int_32((((CASTING uint_32)(uint_64 $6) << [24]) + [1627389952]) >> [24]))
	CALL $189(($5 + [64]), int_32((((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$6 * (int_64)10))) << [24]) + [1627389952]) >> [24]))
	$8 = CALL $191(($5 + [64]), [0], [9341])
	$9 = ($8 + [8])
	*(($7 = (($5 + [104]) + [8]))) = *($9)
	*($5 + [104]) = *($8)
	*($8) = (int_64)0
	*($9) = [0]
	$8 = *($5 + [104])
	$9 = ($8 & [1])
	*($5 + [120]) = ( *($7) ? (($5 + [104]) | [1]) : $9 )
	*($5 + [124]) = ( *($5 + [108]) ? uint_32($8 >> [1]) : $9 )
	*($5) = *($5 + [120])
	$6 = *(CALL $48(($5 + [24]), $5))
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$2
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$3
	$8 = [0]
	*((($5 + [64]) + [32])) = [0]
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	$10 = *($0)
	*($5 + [64]) = $10
	*($5 + [72]) = (int_64)7235159537265672192
	$7 = [0]
	$9 = CALL db_find_i64($10, (int_64)7235159537265672192, (int_64)-4816269947984412672, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $49(($5 + [64]), $9)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)($5 + [64])), [8548])
	
.LABEL $label$4
	$9 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($9, [9122])
	*((($5 + [24]) + [32])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$1 = *($0)
	*($5 + [24]) = $1
	*($5 + [32]) = $6
	$11 = CALL db_find_i64($1, $6, (int_64)7035937633859534848, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $51(($5 + [24]), $11)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($5 + [24])), [8548])
	
.LABEL $label$5
	*($5 + [20]) = $8
	*($5 + [16]) = ($5 + [24])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9520])
	$1 = *($0)
	$8 = *($5 + [20])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8688])
	CALL $59(($5 + [24]), $8, $1, ($5 + [8]))
	$1 = *($0)
	*($5 + [8]) = $3
	*($5 + [12]) = ($5 + [16])
	CALL eosio_assert($9, [8688])
	CALL $60(($5 + [64]), $7, $1, ($5 + [8]))
	$3 = *($5 + [48])
	if ( ($3 == 0) ){ goto $label$6 }
	$9 = ($5 + [52])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$10 }
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$11
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($5 + [48]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $3
	
.LABEL $label$7
	*($9) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$7 = *($5 + [88])
	if ( ($7 == 0) ){ goto $label$12 }
	$3 = ($5 + [92])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	CALL $54(($0 + [92]), *(($0 + [96])))
	CALL $55(($0 + [80]), *(($0 + [84])))
	CALL _ZdlPv($0)
	
.LABEL $label$16
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$15 }
	$0 = *(($5 + [88]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $7
	
.LABEL $label$13
	*($3) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$global$0 = ($5 + [128])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = ($4 + [100]))) = (int_64)0
	*(($6 = ($4 + [112]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = $3
	*($4 + [108]) = $6
	*($4 + [72]) = ($2 + $5)
	*($4 + [64]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8622])
	CALL memcpy(($4 + [80]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8622])
	CALL memcpy((($4 + [80]) + [8]), ($2 + [8]), [8])
	*($4 + [68]) = ($2 + [16])
	$7 = (($4 + [80]) + [16])
	CALL $56(($4 + [64]), $7)
	$8 = ($4 + [108])
	CALL $57(($4 + [64]), $8)
	*(($9 = ($4 + [8]))) = *($4 + [72])
	*($4) = *($4 + [64])
	$9 = *($9)
	*((($4 + [128]) + [8])) = $9
	*(($10 = (($4 + [144]) + [8]))) = $9
	$11 = *($4)
	*($4 + [144]) = $11
	*($4 + [128]) = $11
	$9 = *($10)
	*((($4 + [160]) + [8])) = $9
	*(($4 + [40])) = $9
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [144])
	*($4 + [32]) = $0
	*($4 + [160]) = $0
	*($4 + [56]) = [0]
	*($4 + [48]) = (int_64)5646012425221100912
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [16])
	CALL $58(($4 + [160]), ($4 + [80]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $205($2)
	
.LABEL $label$4
	CALL $54($8, *($6))
	CALL $55($7, *($3))
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $193($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL eosio_assert(*($1 + [76]), [8879])
	*($1 + [76]) = [0]
	*($1) = *(*($0))
	*($1 + [56]) = *(*($0 + [4]))
	$3 = *(*($0 + [8]) + [4])
	*($1 + [8]) = *($3 + [8])
	*($1 + [16]) = *($3 + [16])
	*($1 + [24]) = *($3 + [24])
	$4 = CALL current_time()
	$4 = ((uint_64)$4 / (uint_64)(int_64)1000000)
	*($1 + [48]) = ((int_64)*(*($0 + [12])) + (int_64)((int_64)$4 & (int_64)4294967295))
	*($1 + [72]) = $4
	*($1 + [64]) = *(*($0 + [16]))
	$0 = (($2 + [16]) | [4])
	*($2 + [16]) = $0
	*($2 + [20 align=4]) = (int_64)0
	$3 = ($2 | [4])
	*($2) = $3
	*($2 + [4 align=4]) = (int_64)0
	$5 = ($1 + [80])
	if ( ((int_32)$5 == (int_32)($2 + [16])) ){ goto $label$1 }
	CALL $117($5, $0, $0)
	
.LABEL $label$1
	$1 = ($1 + [92])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	CALL $118($1, *($2), $3)
	
.LABEL $label$2
	CALL $54($2, *($2 + [4]))
	CALL $55(($2 + [16]), *($2 + [20]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8682])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8682])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [8])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [8682])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$5 = ($1 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$8 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $3) > (int_32)[7]), [8682])
	CALL memcpy(*($8), ($7 + [16]), [8])
	*($8) = (*($8) + [8])
	CALL $121($0, ($7 + [24]))
	$3 = *($7 + [4])
	if ( ($3 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = $3
	$3 = *($6)
	if ( $3 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = *($7 + [8])
	if ( ((int_32)*($6) == (int_32)$7) ){ goto $label$4 }
	$7 = ($7 + [8])
	
.LOOP $label$7:
	$3 = *($7)
	$7 = ($3 + [8])
	$6 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($6)) ){ goto $label$7 }
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = *($8)
	$7 = $6
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $193($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($1 + [84])
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$2 }
	$4 = *(*($0))
	$5 = $2
	
.LOOP $label$3:
	$6 = (uint_64)(*($3 + [16]) <= $4)
	$5 = ( $5 ? $3 : $6 )
	$3 = *(($3 + ($6 << [2])))
	if ( $3 ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	if ( ((uint_64)$4 >= (uint_64)*($5 + [16])) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)$2), [9060])
	$7 = *($0)
	$8 = *($0 + [4])
	$5 = ($1 + [96])
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$7 }
	$5 = ($1 + [96])
	$9 = *($3 + [16])
	$4 = *($7)
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$3 = $5
	$10 = [3]
	goto $label$4 
	
.LABEL $label$6
	$10 = [51]
	goto $label$4 
	
.LABEL $label$5
	$10 = [2]
	
.LABEL $label$4
	
.LOOP $label$8:
	goto $label$108 
	
.LABEL $label$112
	$5 = $3
	$3 = $6
	$9 = *($3 + [16])
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$53 }
	$10 = [51]
	goto $label$8 
	
.LABEL $label$111
	$6 = *($3)
	if ( $6 ){ goto $label$49 }
	goto $label$50 
	
.LABEL $label$110
	if ( ((uint_64)$9 >= (uint_64)$4) ){ goto $label$48 }
	$10 = [50]
	goto $label$8 
	
.LABEL $label$109
	$5 = ($3 + [4])
	$6 = *($3 + [4])
	if ( ($6 == 0) ){ goto $label$51 }
	$10 = [0]
	goto $label$8 
	
.LABEL $label$108
	$3 = $5
	goto $label$52 
	
.LABEL $label$107
	$6 = *($5)
	if ( $6 ){ goto $label$47 }
	$10 = [47]
	goto $label$8 
	
.LABEL $label$106
	*(($6 = CALL _Znwj([40])) + [24 align=4]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [8]) = $3
	*($5) = $6
	*($6 + [32]) = [0]
	*($6 + [16]) = *($7)
	$3 = $6
	$7 = ($1 + [92])
	$11 = *(*($7))
	if ( ($11 == 0) ){ goto $label$9 }
	$10 = [48]
	goto $label$8 
	
.LABEL $label$105
	*($7) = $11
	$3 = *($5)
	$10 = [49]
	goto $label$8 
	
.LABEL $label$104
	CALL $111(*(($1 + [96])), $3)
	*(($3 = ($1 + [100]))) = (*($3) + [1])
	goto $label$46 
	
.LABEL $label$103
	$5 = $3
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$45 }
	$10 = [4]
	goto $label$8 
	
.LABEL $label$102
	CALL $185(($6 + [24]), $8)
	$8 = *($0)
	$7 = *($0 + [8])
	$12 = *($7)
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$44 }
	$10 = [5]
	goto $label$8 
	
.LABEL $label$101
	$5 = ($1 + [84])
	$9 = *($3 + [16])
	$4 = *($8)
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$42 }
	goto $label$43 
	
.LABEL $label$100
	$5 = $3
	$3 = $6
	$9 = *($3 + [16])
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$55 }
	$10 = [44]
	goto $label$8 
	
.LABEL $label$99
	$6 = *($3)
	if ( $6 ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$98
	if ( ((uint_64)$9 >= (uint_64)$4) ){ goto $label$40 }
	$10 = [41]
	goto $label$8 
	
.LABEL $label$97
	$5 = ($3 + [4])
	$6 = *($3 + [4])
	if ( ($6 == 0) ){ goto $label$41 }
	$10 = [42]
	goto $label$8 
	
.LABEL $label$96
	$3 = $5
	goto $label$54 
	
.LABEL $label$95
	$3 = $2
	$5 = $2
	$10 = [7]
	goto $label$8 
	
.LABEL $label$94
	$6 = *($5)
	if ( $6 ){ goto $label$39 }
	$10 = [38]
	goto $label$8 
	
.LABEL $label$93
	*(($6 = CALL _Znwj([32]))) = (int_64)0
	*($6 + [8]) = $3
	*($5) = $6
	$4 = *($8)
	*($6 + [24]) = (int_64)0
	*($6 + [16]) = $4
	$3 = $6
	$7 = ($1 + [80])
	$8 = *(*($7))
	if ( ($8 == 0) ){ goto $label$12 }
	$10 = [39]
	goto $label$8 
	
.LABEL $label$92
	*($7) = $8
	$3 = *($5)
	$10 = [40]
	goto $label$8 
	
.LABEL $label$91
	CALL $111(*(($1 + [84])), $3)
	*(($3 = ($1 + [88]))) = (*($3) + [1])
	$7 = *(($0 + [8]))
	goto $label$38 
	
.LABEL $label$90
	$5 = $3
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$37 }
	$10 = [8]
	goto $label$8 
	
.LABEL $label$89
	*(($3 = ($6 + [24]))) = ((int_64)*($3) + (int_64)$12)
	$8 = [0]
	if ( ((int_64)*($7) < (int_64)1) ){ goto $label$35 }
	$10 = [10]
	goto $label$8 
	
.LABEL $label$88
	$7 = *($0)
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$34 }
	$10 = [11]
	goto $label$8 
	
.LABEL $label$87
	$5 = ($1 + [84])
	$9 = *($3 + [16])
	$4 = *($7)
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$86
	$5 = $3
	$3 = $6
	$9 = *($3 + [16])
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$57 }
	$10 = [35]
	goto $label$8 
	
.LABEL $label$85
	$6 = *($3)
	if ( $6 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$84
	if ( ((uint_64)$9 >= (uint_64)$4) ){ goto $label$30 }
	$10 = [32]
	goto $label$8 
	
.LABEL $label$83
	$5 = ($3 + [4])
	$6 = *($3 + [4])
	if ( ($6 == 0) ){ goto $label$31 }
	$10 = [33]
	goto $label$8 
	
.LABEL $label$82
	$3 = $5
	goto $label$56 
	
.LABEL $label$81
	$3 = $2
	$5 = $2
	$10 = [13]
	goto $label$8 
	
.LABEL $label$80
	$6 = *($5)
	if ( $6 ){ goto $label$29 }
	$10 = [29]
	goto $label$8 
	
.LABEL $label$79
	*(($6 = CALL _Znwj([32]))) = (int_64)0
	*($6 + [8]) = $3
	*($5) = $6
	$4 = *($7)
	*($6 + [24]) = (int_64)0
	*($6 + [16]) = $4
	$3 = $6
	$7 = ($1 + [80])
	$11 = *(*($7))
	if ( ($11 == 0) ){ goto $label$15 }
	$10 = [30]
	goto $label$8 
	
.LABEL $label$78
	*($7) = $11
	$3 = *($5)
	$10 = [31]
	goto $label$8 
	
.LABEL $label$77
	CALL $111(*(($1 + [84])), $3)
	*(($3 = ($1 + [88]))) = (*($3) + [1])
	goto $label$28 
	
.LABEL $label$76
	$5 = $3
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$27 }
	$10 = [14]
	goto $label$8 
	
.LABEL $label$75
	$6 = *(*($0 + [12]) + [4])
	if ( (uint_64)(*(($6 + [24])) <= *($6 + [8])) ){ goto $label$36 }
	$10 = [15]
	goto $label$8 
	
.LABEL $label$74
	$7 = *($0)
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$26 }
	$10 = [16]
	goto $label$8 
	
.LABEL $label$73
	$2 = ($1 + [84])
	$9 = *($3 + [16])
	$4 = *($7)
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$72
	$2 = $3
	$3 = $5
	$9 = *($3 + [16])
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$59 }
	$10 = [26]
	goto $label$8 
	
.LABEL $label$71
	$5 = *($3)
	if ( $5 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$70
	if ( ((uint_64)$9 >= (uint_64)$4) ){ goto $label$22 }
	$10 = [23]
	goto $label$8 
	
.LABEL $label$69
	$2 = ($3 + [4])
	$5 = *($3 + [4])
	if ( ($5 == 0) ){ goto $label$23 }
	$10 = [24]
	goto $label$8 
	
.LABEL $label$68
	$3 = $2
	goto $label$58 
	
.LABEL $label$67
	$3 = $2
	$10 = [18]
	goto $label$8 
	
.LABEL $label$66
	$5 = *($2)
	if ( $5 ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$65
	$2 = $3
	$5 = *($2)
	if ( $5 ){ goto $label$19 }
	$10 = [20]
	goto $label$8 
	
.LABEL $label$64
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [8]) = $3
	*($2) = $5
	$4 = *($7)
	*($5 + [24]) = (int_64)0
	*($5 + [16]) = $4
	$3 = $5
	$6 = ($1 + [80])
	$7 = *(*($6))
	if ( ($7 == 0) ){ goto $label$18 }
	$10 = [21]
	goto $label$8 
	
.LABEL $label$63
	*($6) = $7
	$3 = *($2)
	$10 = [22]
	goto $label$8 
	
.LABEL $label$62
	CALL $111(*(($1 + [84])), $3)
	*(($3 = ($1 + [88]))) = (*($3) + [1])
	$6 = *(*(($0 + [12])) + [4])
	$10 = [19]
	goto $label$8 
	
.LABEL $label$61
	$8 = ((uint_64)*(($5 + [24])) <= (uint_64)*($6 + [16]))
	$10 = [9]
	goto $label$8 
	
.LABEL $label$60
	CALL eosio_assert($8, [8983])
	return 
	
.LABEL $label$59
	$10 = [17]
	goto $label$8 
	
.LABEL $label$58
	$10 = [25]
	goto $label$8 
	
.LABEL $label$57
	$10 = [12]
	goto $label$8 
	
.LABEL $label$56
	$10 = [34]
	goto $label$8 
	
.LABEL $label$55
	$10 = [6]
	goto $label$8 
	
.LABEL $label$54
	$10 = [43]
	goto $label$8 
	
.LABEL $label$53
	$10 = [2]
	goto $label$8 
	
.LABEL $label$52
	$10 = [1]
	goto $label$8 
	
.LABEL $label$51
	$10 = [3]
	goto $label$8 
	
.LABEL $label$50
	$10 = [52]
	goto $label$8 
	
.LABEL $label$49
	$10 = [1]
	goto $label$8 
	
.LABEL $label$48
	$10 = [3]
	goto $label$8 
	
.LABEL $label$47
	$10 = [4]
	goto $label$8 
	
.LABEL $label$46
	$10 = [4]
	goto $label$8 
	
.LABEL $label$45
	$10 = [47]
	goto $label$8 
	
.LABEL $label$44
	$10 = [46]
	goto $label$8 
	
.LABEL $label$43
	$10 = [44]
	goto $label$8 
	
.LABEL $label$42
	$10 = [6]
	goto $label$8 
	
.LABEL $label$41
	$10 = [7]
	goto $label$8 
	
.LABEL $label$40
	$10 = [7]
	goto $label$8 
	
.LABEL $label$39
	$10 = [8]
	goto $label$8 
	
.LABEL $label$38
	$10 = [8]
	goto $label$8 
	
.LABEL $label$37
	$10 = [38]
	goto $label$8 
	
.LABEL $label$36
	$10 = [9]
	goto $label$8 
	
.LABEL $label$35
	$10 = [9]
	goto $label$8 
	
.LABEL $label$34
	$10 = [37]
	goto $label$8 
	
.LABEL $label$33
	$10 = [35]
	goto $label$8 
	
.LABEL $label$32
	$10 = [12]
	goto $label$8 
	
.LABEL $label$31
	$10 = [13]
	goto $label$8 
	
.LABEL $label$30
	$10 = [13]
	goto $label$8 
	
.LABEL $label$29
	$10 = [14]
	goto $label$8 
	
.LABEL $label$28
	$10 = [14]
	goto $label$8 
	
.LABEL $label$27
	$10 = [29]
	goto $label$8 
	
.LABEL $label$26
	$10 = [28]
	goto $label$8 
	
.LABEL $label$25
	$10 = [26]
	goto $label$8 
	
.LABEL $label$24
	$10 = [17]
	goto $label$8 
	
.LABEL $label$23
	$10 = [18]
	goto $label$8 
	
.LABEL $label$22
	$10 = [18]
	goto $label$8 
	
.LABEL $label$21
	$10 = [20]
	goto $label$8 
	
.LABEL $label$20
	$10 = [19]
	goto $label$8 
	
.LABEL $label$19
	$10 = [19]
	goto $label$8 
	
.LABEL $label$18
	$10 = [22]
	goto $label$8 
	
.LABEL $label$17
	$10 = [27]
	goto $label$8 
	
.LABEL $label$16
	$10 = [25]
	goto $label$8 
	
.LABEL $label$15
	$10 = [31]
	goto $label$8 
	
.LABEL $label$14
	$10 = [36]
	goto $label$8 
	
.LABEL $label$13
	$10 = [34]
	goto $label$8 
	
.LABEL $label$12
	$10 = [40]
	goto $label$8 
	
.LABEL $label$11
	$10 = [45]
	goto $label$8 
	
.LABEL $label$10
	$10 = [43]
	goto $label$8 
	
.LABEL $label$9
	$10 = [49]
	goto $label$8 
	$10
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$3 = *($0)
	CALL eosio_assert([1], [8682])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $4, $2, [24])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = ($1 + [96])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($1 + [96])
	$7 = *($5 + [16])
	$6 = *($2)
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$5 = $4
	$9 = [3]
	goto $label$1 
	
.LABEL $label$3
	$9 = [28]
	goto $label$1 
	
.LABEL $label$2
	$9 = [2]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$57 
	
.LABEL $label$61
	$4 = $5
	$5 = $8
	$7 = *($5 + [16])
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$29 }
	$9 = [28]
	goto $label$5 
	
.LABEL $label$60
	$8 = *($5)
	if ( $8 ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$59
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$24 }
	$9 = [27]
	goto $label$5 
	
.LABEL $label$58
	$4 = ($5 + [4])
	$8 = *($5 + [4])
	if ( ($8 == 0) ){ goto $label$27 }
	$9 = [0]
	goto $label$5 
	
.LABEL $label$57
	$5 = $4
	goto $label$28 
	
.LABEL $label$56
	$8 = *($4)
	if ( $8 ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$55
	$4 = $5
	$8 = *($4)
	if ( $8 ){ goto $label$21 }
	$9 = [24]
	goto $label$5 
	
.LABEL $label$54
	*(($8 = CALL _Znwj([40])) + [24 align=4]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [8]) = $5
	*($4) = $8
	*($8 + [32]) = [0]
	*($8 + [16]) = *($2)
	$5 = $8
	$2 = ($1 + [92])
	$10 = *(*($2))
	if ( ($10 == 0) ){ goto $label$6 }
	$9 = [25]
	goto $label$5 
	
.LABEL $label$53
	*($2) = $10
	$5 = *($4)
	$9 = [26]
	goto $label$5 
	
.LABEL $label$52
	CALL $111(*(($1 + [96])), $5)
	*(($5 = ($1 + [100]))) = (*($5) + [1])
	$9 = [4]
	goto $label$5 
	
.LABEL $label$51
	CALL $185(($8 + [24]), $3)
	$3 = ($1 + [84])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$20 }
	$9 = [5]
	goto $label$5 
	
.LABEL $label$50
	$6 = *(*($0))
	$4 = $3
	$9 = [6]
	goto $label$5 
	
.LABEL $label$49
	$8 = (uint_64)(*($5 + [16]) <= $6)
	$4 = ( $4 ? $5 : $8 )
	$5 = *(($5 + ($8 << [2])))
	if ( $5 ){ goto $label$19 }
	$9 = [7]
	goto $label$5 
	
.LABEL $label$48
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$18 }
	$9 = [8]
	goto $label$5 
	
.LABEL $label$47
	if ( ((uint_64)$6 >= (uint_64)*($4 + [16])) ){ goto $label$17 }
	$9 = [23]
	goto $label$5 
	
.LABEL $label$46
	$4 = $3
	$9 = [9]
	goto $label$5 
	
.LABEL $label$45
	CALL eosio_assert(((int_32)$4 == (int_32)$3), [9017])
	$8 = *($0)
	$11 = *(*($0 + [8]))
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$16 }
	$9 = [10]
	goto $label$5 
	
.LABEL $label$44
	$3 = ($1 + [84])
	$7 = *($5 + [16])
	$6 = *($8)
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$43
	$3 = $5
	$5 = $4
	$7 = *($5 + [16])
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$31 }
	$9 = [20]
	goto $label$5 
	
.LABEL $label$42
	$4 = *($5)
	if ( $4 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$41
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$12 }
	$9 = [17]
	goto $label$5 
	
.LABEL $label$40
	$3 = ($5 + [4])
	$4 = *($5 + [4])
	if ( ($4 == 0) ){ goto $label$13 }
	$9 = [18]
	goto $label$5 
	
.LABEL $label$39
	$5 = $3
	goto $label$30 
	
.LABEL $label$38
	$5 = $3
	$9 = [12]
	goto $label$5 
	
.LABEL $label$37
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$11 }
	$9 = [13]
	goto $label$5 
	
.LABEL $label$36
	*(($4 + [24])) = $11
	return 
	
.LABEL $label$35
	$3 = $5
	$4 = *($3)
	if ( $4 ){ goto $label$10 }
	$9 = [14]
	goto $label$5 
	
.LABEL $label$34
	*(($4 = CALL _Znwj([32]))) = (int_64)0
	*($4 + [8]) = $5
	*($3) = $4
	$6 = *($8)
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $6
	$5 = $4
	$8 = ($1 + [80])
	$0 = *(*($8))
	if ( ($0 == 0) ){ goto $label$9 }
	$9 = [15]
	goto $label$5 
	
.LABEL $label$33
	*($8) = $0
	$5 = *($3)
	$9 = [16]
	goto $label$5 
	
.LABEL $label$32
	CALL $111(*(($1 + [84])), $5)
	*(($5 = ($1 + [88]))) = (*($5) + [1])
	*(($4 + [24])) = $11
	return 
	
.LABEL $label$31
	$9 = [11]
	goto $label$5 
	
.LABEL $label$30
	$9 = [19]
	goto $label$5 
	
.LABEL $label$29
	$9 = [2]
	goto $label$5 
	
.LABEL $label$28
	$9 = [1]
	goto $label$5 
	
.LABEL $label$27
	$9 = [3]
	goto $label$5 
	
.LABEL $label$26
	$9 = [29]
	goto $label$5 
	
.LABEL $label$25
	$9 = [1]
	goto $label$5 
	
.LABEL $label$24
	$9 = [3]
	goto $label$5 
	
.LABEL $label$23
	$9 = [24]
	goto $label$5 
	
.LABEL $label$22
	$9 = [4]
	goto $label$5 
	
.LABEL $label$21
	$9 = [4]
	goto $label$5 
	
.LABEL $label$20
	$9 = [23]
	goto $label$5 
	
.LABEL $label$19
	$9 = [6]
	goto $label$5 
	
.LABEL $label$18
	$9 = [23]
	goto $label$5 
	
.LABEL $label$17
	$9 = [9]
	goto $label$5 
	
.LABEL $label$16
	$9 = [22]
	goto $label$5 
	
.LABEL $label$15
	$9 = [20]
	goto $label$5 
	
.LABEL $label$14
	$9 = [11]
	goto $label$5 
	
.LABEL $label$13
	$9 = [12]
	goto $label$5 
	
.LABEL $label$12
	$9 = [12]
	goto $label$5 
	
.LABEL $label$11
	$9 = [14]
	goto $label$5 
	
.LABEL $label$10
	$9 = [13]
	goto $label$5 
	
.LABEL $label$9
	$9 = [16]
	goto $label$5 
	
.LABEL $label$8
	$9 = [21]
	goto $label$5 
	
.LABEL $label$7
	$9 = [19]
	goto $label$5 
	
.LABEL $label$6
	$9 = [26]
	goto $label$5 
	$9
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = (int_64)7235159537265672192
	$5 = [0]
	$6 = CALL db_find_i64($4, (int_64)7235159537265672192, (int_64)3607749779137757184, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $77(($3 + [16]), $6)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [16])), [8548])
	$2 = *($3 + [56])
	
.LABEL $label$2
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [9919])
	CALL eosio_assert(((uint_64)*($5 + [16]) >= (uint_64)$2), [9951])
	$2 = *($0)
	*($3 + [8]) = ($3 + [56])
	CALL eosio_assert($6, [8688])
	CALL $82(($3 + [16]), $5, $2, ($3 + [8]))
	$6 = *($3 + [40])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($3 + [44])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	$5 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$5 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8622])
	CALL memcpy(($4 + [48]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8622])
	CALL memcpy((($4 + [48]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = (int_64)5646012425221100912
	*($4 + [40]) = [0]
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $205($2)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$2 = ($global$0 - [240])
	$global$0 = $2
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*(($2 + [216])) = [0]
	*($2 + [200]) = (int_64)-1
	*($2 + [208]) = (int_64)0
	$3 = *($0)
	*($2 + [184]) = $3
	*($2 + [192]) = (int_64)7235159537265672192
	$4 = [0]
	$5 = CALL db_find_i64($3, (int_64)7235159537265672192, (int_64)-4816269947984412672, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $49(($2 + [184]), $5)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($2 + [184])), [8548])
	
.LABEL $label$2
	$6 = *($4 + [80])
	$7 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($7, [9972])
	$1 = CALL current_time()
	*((($2 + [120]) + [28])) = (int_64)0
	*(($8 = ($2 + [164]))) = (int_64)0
	*(($2 + [172])) = (int_64)0
	*($2 + [132]) = [0]
	*($2 + [136]) = [0]
	*($2 + [140 align=4]) = (int_64)0
	*($2 + [156 align=4]) = (int_64)0
	*($2 + [120]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	$9 = ($4 + [84])
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$3 }
	$10 = (($2 + [16]) + [32])
	$11 = ($2 | [1])
	$12 = (($2 + [120]) + [36])
	$13 = (($2 + [80]) + [8])
	$14 = ($4 + [24])
	$15 = (($2 + [120]) + [40])
	
.LOOP $label$4:
	$16 = $6
	$17 = *($16 + [16])
	$18 = *($16 + [24])
	if ( (int_64)($18 == 0) ){ goto $label$8 }
	$5 = CALL $199([8411])
	if ( ($5 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [8450])
	goto $label$10 
	
.LABEL $label$11
	if ( $5 ){ goto $label$10 }
	$3 = (int_64)0
	goto $label$9 
	
.LABEL $label$10
	$1 = (int_64)0
	
.LOOP $label$12:
	$6 = *(($5 + [8410]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [8495])
	
.LABEL $label$13
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	$3 = ((int_64)$1 << (int_64)8)
	
.LABEL $label$9
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9272])
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	$19 = ((int_64)$3 | (int_64)4)
	$5 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$1 = $3
	$6 = [1]
	$20 = $5
	$5 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$1 = $3
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$20 = ($5 + [1])
	$5 = $20
	if ( $6 ){ goto $label$18 }
	$6 = [1]
	$5 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	
.LABEL $label$14
	CALL eosio_assert($6, [9321])
	*((($2 + [64]) + [8])) = (int_64)3617214756542218240
	*($2 + [64]) = *($0)
	*(($6 = ($2 + [8]))) = [0]
	*($2) = (int_64)0
	$5 = CALL $199([9262])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$21 }
	*($2) = ($5 << [1])
	$20 = $11
	if ( $5 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$21 = (($5 + [16]) & [-16])
	$20 = CALL _Znwj($21)
	*($6) = $20
	*($2) = ($21 | [1])
	*($2 + [4]) = $5
	
.LABEL $label$20
	CALL memcpy($20, [9262], $5)
	
.LABEL $label$19
	*(($20 + $5)) = [0]
	*((($2 + [16]) + [8])) = $17
	*((($2 + [16]) + [16])) = $18
	*((($2 + [16]) + [24])) = $19
	*($10) = *($2)
	*(($10 + [8])) = *($6)
	*($6) = [0]
	*($2 + [16]) = *($0)
	*($2) = (int_64)0
	CALL $80(($2 + [224]), CALL $79(($2 + [80]), ($2 + [64]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [16])))
	$5 = *($2 + [224])
	CALL send_inline($5, (*($2 + [228]) - $5))
	$5 = *($2 + [224])
	if ( ($5 == 0) ){ goto $label$22 }
	*($2 + [228]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$22
	$5 = *((($2 + [80]) + [28]))
	if ( ($5 == 0) ){ goto $label$23 }
	*((($2 + [80]) + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$23
	$5 = *((($2 + [80]) + [16]))
	if ( ($5 == 0) ){ goto $label$24 }
	*((($2 + [80]) + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$24
	if ( ((*($10) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*((($2 + [16]) + [40])))
	
.LABEL $label$25
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$8
	*(($20 = (($2 + [16]) + [8]))) = (int_64)3617214756542218240
	$1 = *($0)
	*($2 + [16]) = $1
	*($2 + [64]) = (int_64)-3109888186206126080
	*($13) = ((int_64)*($14) * (int_64)100)
	*($2 + [80]) = $17
	$5 = *($15)
	if ( ((uint_32)$5 >= (uint_32)*($8)) ){ goto $label$27 }
	*($5 + [8]) = (int_64)-3109888186206126080
	*($5) = $1
	*($5 + [16 align=4]) = (int_64)0
	*(($21 = ($5 + [24]))) = [0]
	$6 = CALL _Znwj([16])
	*($5 + [16]) = $6
	$22 = ($6 + [16])
	*($21) = $22
	*(($6 + [8])) = *($20)
	*($6) = *($2 + [16])
	*(($5 + [20])) = $22
	*($5 + [28 align=4]) = (int_64)0
	*(($5 + [36])) = [0]
	CALL $83(($5 + [28]), [16])
	$5 = *($5 + [28])
	$6 = (*(($5 + [32])) - $5)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [8682])
	CALL memcpy($5, ($2 + [80]), [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [8682])
	CALL memcpy(($5 + [8]), $13, [8])
	*($15) = (*($15) + [40])
	$5 = *($16 + [4])
	if ( $5 ){ goto $label$26 }
	goto $label$6 
	
.LABEL $label$27
	CALL $84($12, ($2 + [16]), $0, ($2 + [64]), ($2 + [80]))
	$5 = *($16 + [4])
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$26
	
.LOOP $label$28:
	$6 = $5
	$5 = *($6)
	if ( $5 ){ goto $label$28 }
	goto $label$5 
	
.LABEL $label$7
	CALL $182($2)
	
.LABEL $label$6
	$6 = *($16 + [8])
	if ( ((int_32)*($6) == (int_32)$16) ){ goto $label$5 }
	$20 = ($16 + [8])
	
.LOOP $label$29:
	$5 = *($20)
	$20 = ($5 + [8])
	$6 = *($5 + [8])
	if ( ((int_32)$5 != (int_32)*($6)) ){ goto $label$29 }
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$4 }
	
.LABEL $label$3
	*(($2 + [140])) = [1]
	$1 = CALL current_time()
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$1 = *($0)
	CALL $85(($2 + [80]), ($2 + [120]))
	$5 = *($2 + [80])
	CALL send_deferred(($2 + [16]), $1, $5, (*($2 + [84]) - $5), [0])
	$5 = *($2 + [80])
	if ( ($5 == 0) ){ goto $label$30 }
	*($2 + [84]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$30
	$1 = *($0)
	CALL eosio_assert($7, [8688])
	CALL $86(($2 + [184]), $4, $1, ($2 + [16]))
	CALL $87(($2 + [120]))
	$20 = *($2 + [208])
	if ( ($20 == 0) ){ goto $label$31 }
	$16 = ($2 + [212])
	$6 = *($16)
	if ( ((int_32)$6 == (int_32)$20) ){ goto $label$33 }
	
.LOOP $label$34:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$35 }
	CALL $54(($5 + [92]), *(($5 + [96])))
	CALL $55(($5 + [80]), *(($5 + [84])))
	CALL _ZdlPv($5)
	
.LABEL $label$35
	if ( ((int_32)$20 != (int_32)$6) ){ goto $label$34 }
	$5 = *(($2 + [208]))
	goto $label$32 
	
.LABEL $label$33
	$5 = $20
	
.LABEL $label$32
	*($16) = $20
	CALL _ZdlPv($5)
	
.LABEL $label$31
	$global$0 = ($2 + [240])
	(unreachable)
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8622])
	CALL memcpy(($4 + [56]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = (int_64)5646012425221100912
	*($4 + [48]) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $205($2)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	CALL $62($0, $1, $2, (CASTING uint_64)(uint_32 $3), $4, $5, [1])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = [0]
	*($4 + [104]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [144]) = ($4 + [64])
	*($4 + [16]) = ($4 + [80])
	CALL $61(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [72])
	*($4) = *($4 + [64])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($8 = (($4 + [128]) + [8]))) = $3
	$9 = *($4)
	*($4 + [128]) = $9
	*($4 + [112]) = $9
	$3 = *($8)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [56]) = [0]
	*($4 + [48]) = (int_64)5646012425221100912
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [104])
	$8 = *($4 + [97])
	$10 = *($4 + [96])
	$1 = *($4 + [88])
	$9 = *($4 + [80])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $9), (int_64 $1), (int_64 ($10 & [255])), (int_32 ($8 & [255])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $205($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$global$0 = $3
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	$4 = ((uint_64)$1 / (uint_64)(int_64)10)
	CALL $189(($3 + [8]), int_32((((CASTING uint_32)(uint_64 $4) << [24]) + [1627389952]) >> [24]))
	CALL $189(($3 + [8]), int_32((((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$4 * (int_64)10))) << [24]) + [1627389952]) >> [24]))
	$6 = CALL $191(($3 + [8]), [0], [9341])
	$7 = ($6 + [8])
	*(($5 = (($3 + [48]) + [8]))) = *($7)
	*($3 + [48]) = *($6)
	*($6) = (int_64)0
	*($7) = [0]
	$6 = *($3 + [48])
	$7 = ($6 & [1])
	*($3 + [64]) = ( *($5) ? (($3 + [48]) | [1]) : $7 )
	*($3 + [68]) = ( *($3 + [52]) ? uint_32($6 >> [1]) : $7 )
	*($3) = *($3 + [64])
	$1 = *(CALL $48(($3 + [72]), $3))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$2
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $1
	$0 = [0]
	$6 = CALL db_find_i64($4, $1, (int_64)-4417018949313495040, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $74(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)($3 + [8])), [8548])
	
.LABEL $label$4
	$6 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($6, [9852])
	CALL eosio_assert($6, [9640])
	CALL eosio_assert($6, [9674])
	$6 = CALL db_next_i64(*($0 + [24]), ($3 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $74(($3 + [8]), $6)
	
.LABEL $label$5
	CALL $75(($3 + [8]), $0)
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$6 }
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $55(($6 + [8]), *(($6 + [12])))
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($3 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($7) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8622])
	CALL memcpy(($4 + [48]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8622])
	CALL memcpy((($4 + [48]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = (int_64)5646012425221100912
	*($4 + [40]) = [0]
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $205($2)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $186($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [128])
	$global$0 = $4
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*($4 + [64]) = [0]
	*($4 + [56]) = (int_64)0
	$5 = ((uint_64)$1 / (uint_64)(int_64)10)
	CALL $189(($4 + [56]), int_32((((CASTING uint_32)(uint_64 $5) << [24]) + [1627389952]) >> [24]))
	CALL $189(($4 + [56]), int_32((((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$5 * (int_64)10))) << [24]) + [1627389952]) >> [24]))
	$7 = CALL $191(($4 + [56]), [0], [9341])
	$8 = ($7 + [8])
	*(($6 = (($4 + [96]) + [8]))) = *($8)
	*($4 + [96]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	$7 = *($4 + [96])
	$8 = ($7 & [1])
	*($4 + [112]) = ( *($6) ? (($4 + [96]) | [1]) : $8 )
	*($4 + [116]) = ( *($4 + [100]) ? uint_32($7 >> [1]) : $8 )
	*($4 + [8]) = *($4 + [112])
	$1 = *(CALL $48(($4 + [16]), ($4 + [8])))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$2
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$3
	*(($4 + [88])) = [0]
	*(($4 + [94])) = [0]
	*($4 + [64]) = $1
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [92]) = [0]
	*($4 + [56]) = *($0)
	*($4 + [48]) = ($4 + [56])
	$7 = *($3)
	*($4 + [40]) = $7
	$8 = ($3 + [4])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$5:
	*($4 + [24]) = $2
	*($4 + [16]) = *($7 + [16])
	CALL $65(($4 + [120]), ($4 + [48]), ($4 + [16]))
	$3 = *($4 + [124])
	if ( ($3 == 0) ){ goto $label$7 }
	$3 = ( $3 ? [0] : (int_64)(((int_64)((int_64)*($4 + [16]) ^ (int_64)*($3 + [16])) | (int_64)((int_64)*($4 + [24]) ^ (int_64)*($3 + [8]))) == 0) )
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	$7 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($7, [9240])
	$1 = *($0)
	*($4 + [16]) = ($4 + [40])
	CALL eosio_assert($7, [8688])
	CALL $66(*($4 + [48]), $3, $1, ($4 + [16]))
	$6 = *($4 + [40])
	$3 = *($6 + [4])
	if ( ($3 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = $3
	$3 = *($7)
	if ( $3 ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = *($6 + [8])
	if ( ((int_32)*($7) == (int_32)$6) ){ goto $label$8 }
	$6 = ($6 + [8])
	
.LOOP $label$11:
	$3 = *($6)
	$6 = ($3 + [8])
	$7 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($7)) ){ goto $label$11 }
	
.LABEL $label$8
	*($4 + [40]) = $7
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$5 }
	
.LABEL $label$4
	CALL $67(($4 + [80]))
	$global$0 = ($4 + [128])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = ($4 + [108]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = $3
	*($4 + [80]) = ($2 + $5)
	*($4 + [72]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8622])
	CALL memcpy(($4 + [88]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8622])
	CALL memcpy((($4 + [88]) + [8]), ($2 + [8]), [8])
	*($4 + [76]) = ($2 + [16])
	$6 = (($4 + [88]) + [16])
	CALL $57(($4 + [72]), $6)
	*(($7 = (($4 + [8]) + [8]))) = *($4 + [80])
	*($4 + [8]) = *($4 + [72])
	$7 = *($7)
	*((($4 + [128]) + [8])) = $7
	*(($8 = (($4 + [144]) + [8]))) = $7
	$9 = *($4 + [8])
	*($4 + [144]) = $9
	*($4 + [128]) = $9
	$7 = *($8)
	*((($4 + [160]) + [8])) = $7
	*(($4 + [48])) = $7
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [64]) = [0]
	*($4 + [56]) = (int_64)5646012425221100912
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $64(($4 + [160]), ($4 + [88]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $205($2)
	
.LABEL $label$4
	CALL $54($6, *($3))
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $184 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $186 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $205($0)
	
.LABEL $label$1
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8682])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8682])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [8682])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $119(*($1), *($0 + [44]))
	CALL $120(*($1), *($0 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	if ( (*($0 + [8]) == 0) ){ goto $label$3 }
	$3 = *($0)
	$4 = ($0 + [4])
	*($0) = $4
	$5 = *($0 + [4])
	*($0 + [4]) = [0]
	*(($6 = ($0 + [8]))) = [0]
	*($5 + [8]) = [0]
	$5 = *($3 + [4])
	$3 = ( $5 ? $3 : $5 )
	if ( ($3 == 0) ){ goto $label$3 }
	$7 = ($0 + [4])
	
.LOOP $label$4:
	$8 = $3
	$9 = $1
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$2 }
	$10 = *($9 + [16])
	*($8 + [16]) = $10
	*(($8 + [24])) = *($9 + [24])
	$3 = *($8 + [8])
	if ( ($3 == 0) ){ goto $label$10 }
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$9 }
	*($3 + [4]) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	
.LOOP $label$11:
	$3 = $1
	$1 = *($3)
	if ( $1 ){ goto $label$11 }
	$1 = *($3 + [4])
	if ( $1 ){ goto $label$11 }
	goto $label$8 
	
.LABEL $label$10
	$3 = [0]
	$1 = *($4)
	if ( $1 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$9
	*($3) = [0]
	
.LOOP $label$12:
	$1 = *($3 + [4])
	if ( ($1 == 0) ){ goto $label$8 }
	
.LOOP $label$13:
	$3 = $1
	$1 = *($3)
	if ( $1 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$8
	$1 = *($4)
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$7
	$1 = $4
	$5 = $4
	goto $label$5 
	
.LABEL $label$6
	
.LOOP $label$16:
	if ( ((uint_64)$10 >= (uint_64)*($1 + [16])) ){ goto $label$18 }
	$5 = *($1)
	if ( $5 ){ goto $label$17 }
	goto $label$14 
	
.LABEL $label$18
	$5 = *($1 + [4])
	if ( ($5 == 0) ){ goto $label$15 }
	
.LABEL $label$17
	$1 = $5
	goto $label$16 
	
.LABEL $label$15
	$5 = ($1 + [4])
	goto $label$5 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$5
	*($8) = (int_64)0
	*(($8 + [8])) = $1
	*($5) = $8
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$19 }
	*($0) = $1
	$8 = *($5)
	
.LABEL $label$19
	CALL $111(*($7), $8)
	*($6) = (*($6) + [1])
	$5 = *($9 + [4])
	if ( ($5 == 0) ){ goto $label$21 }
	
.LOOP $label$22:
	$1 = $5
	$5 = *($1)
	if ( $5 ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$1 = *($9 + [8])
	if ( ((int_32)*($1) == (int_32)$9) ){ goto $label$20 }
	$8 = ($9 + [8])
	
.LOOP $label$23:
	$5 = *($8)
	$8 = ($5 + [8])
	$1 = *($5 + [8])
	if ( ((int_32)$5 != (int_32)*($1)) ){ goto $label$23 }
	
.LABEL $label$20
	if ( $3 ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$6 = ($0 + [4])
	$9 = ($0 + [8])
	
.LOOP $label$24:
	$8 = $1
	*((($5 = CALL _Znwj([32])) + [24])) = *(($8 + [24]))
	*($5 + [16]) = *($8 + [16])
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$29 }
	$10 = *(($5 + [16]))
	if ( ((uint_64)$10 >= (uint_64)*($1 + [16])) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$29
	$1 = $6
	$3 = $6
	goto $label$26 
	
.LABEL $label$28
	$11 = [2]
	goto $label$25 
	
.LABEL $label$27
	$11 = [0]
	goto $label$25 
	
.LABEL $label$26
	$11 = [4]
	
.LABEL $label$25
	
.LOOP $label$30:
	goto $label$52 
	
.LABEL $label$54
	$1 = $3
	if ( ((uint_64)$10 >= (uint_64)*($1 + [16])) ){ goto $label$41 }
	$11 = [2]
	goto $label$30 
	
.LABEL $label$53
	$3 = *($1)
	if ( $3 ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$52
	$3 = *($1 + [4])
	if ( $3 ){ goto $label$40 }
	$11 = [12]
	goto $label$30 
	
.LABEL $label$51
	$3 = ($1 + [4])
	goto $label$37 
	
.LABEL $label$50
	$3 = $1
	$11 = [4]
	goto $label$30 
	
.LABEL $label$49
	*($5 + [8]) = $1
	*($5) = (int_64)0
	*($3) = $5
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$36 }
	$11 = [5]
	goto $label$30 
	
.LABEL $label$48
	*($0) = $1
	$5 = *($3)
	$11 = [6]
	goto $label$30 
	
.LABEL $label$47
	CALL $111(*(($0 + [4])), $5)
	*($9) = (*($9) + [1])
	$3 = *($8 + [4])
	if ( ($3 == 0) ){ goto $label$33 }
	$11 = [7]
	goto $label$30 
	
.LABEL $label$46
	$1 = $3
	$3 = *($1)
	if ( $3 ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$45
	$1 = *($8 + [8])
	if ( ((int_32)*($1) == (int_32)$8) ){ goto $label$32 }
	$11 = [10]
	goto $label$30 
	
.LABEL $label$44
	$5 = ($8 + [8])
	$11 = [11]
	goto $label$30 
	
.LABEL $label$43
	$3 = *($5)
	$5 = ($3 + [8])
	$1 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($1)) ){ goto $label$31 }
	$11 = [8]
	goto $label$30 
	
.LABEL $label$42
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$24 }
	goto $label$1 
	
.LABEL $label$41
	$11 = [0]
	goto $label$30 
	
.LABEL $label$40
	$11 = [1]
	goto $label$30 
	
.LABEL $label$39
	$11 = [3]
	goto $label$30 
	
.LABEL $label$38
	$11 = [1]
	goto $label$30 
	
.LABEL $label$37
	$11 = [4]
	goto $label$30 
	
.LABEL $label$36
	$11 = [6]
	goto $label$30 
	
.LABEL $label$35
	$11 = [8]
	goto $label$30 
	
.LABEL $label$34
	$11 = [7]
	goto $label$30 
	
.LABEL $label$33
	$11 = [9]
	goto $label$30 
	
.LABEL $label$32
	$11 = [8]
	goto $label$30 
	
.LABEL $label$31
	$11 = [11]
	goto $label$30 
	
.LABEL $label$2
	
.LOOP $label$56:
	$1 = *($8 + [8])
	if ( ($1 == 0) ){ goto $label$55 }
	$8 = $1
	goto $label$56 
	
.LABEL $label$55
	CALL $55($0, $8)
	return 
	
.LABEL $label$1
	$11
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1 + [76]) = [0]
	*($1 + [32]) = (int_64)0
	*($1) = *(*($0))
	*($1 + [56]) = *(*($0 + [8]))
	$3 = *(*($0 + [4]) + [4])
	*($1 + [8]) = *($3 + [8])
	*($1 + [16]) = *($3 + [16])
	*($1 + [24]) = *($3 + [24])
	$4 = CALL current_time()
	$4 = ((uint_64)$4 / (uint_64)(int_64)1000000)
	*($1 + [48]) = ((int_64)*(*($0 + [12])) + (int_64)((int_64)$4 & (int_64)4294967295))
	*($1 + [72]) = $4
	$4 = *(*($0 + [16]))
	*($1 + [40]) = (int_64)0
	*($1 + [64]) = $4
	$0 = (($2 + [16]) | [4])
	*($2 + [16]) = $0
	*($2 + [20 align=4]) = (int_64)0
	$3 = ($2 | [4])
	*($2) = $3
	*($2 + [4 align=4]) = (int_64)0
	$5 = ($1 + [80])
	if ( ((int_32)$5 == (int_32)($2 + [16])) ){ goto $label$1 }
	CALL $117($5, $0, $0)
	
.LABEL $label$1
	$1 = ($1 + [92])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	CALL $118($1, *($2), $3)
	
.LABEL $label$2
	CALL $54($2, *($2 + [4]))
	CALL $55(($2 + [16]), *($2 + [20]))
	$global$0 = ($2 + [32])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = (*($2) + [77])
	*(($2 = *($1))) = $1
	$3 = *($0 + [44])
	$4 = *($3 + [8])
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$6 = ($3 + [4])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	$7 = $5
	$3 = *($7 + [4])
	if ( ($3 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = $3
	$3 = *($5)
	if ( $3 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = *($7 + [8])
	if ( ((int_32)*($5) == (int_32)$7) ){ goto $label$4 }
	$7 = ($7 + [8])
	
.LOOP $label$7:
	$3 = *($7)
	$7 = ($3 + [8])
	$5 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($5)) ){ goto $label$7 }
	
.LABEL $label$4
	$1 = ($1 + [16])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$3 }
	*($2) = $1
	
.LABEL $label$2
	$3 = *($0 + [48])
	$4 = *($3 + [8])
	
.LOOP $label$8:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$8 }
	*($2) = $1
	$6 = ($3 + [4])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($1 + [8])
	*($2) = $1
	$3 = *($7 + [24])
	$7 = $5
	$4 = (CASTING uint_64)(uint_32 ( *($7 + [28]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$11:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$11 }
	*($2) = $1
	$3 = *(($7 + [24]))
	$3 = ( *(($7 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$12 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$12
	$3 = *($7 + [4])
	if ( ($3 == 0) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = $3
	$3 = *($5)
	if ( $3 ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$5 = *($7 + [8])
	if ( ((int_32)*($5) == (int_32)$7) ){ goto $label$13 }
	$7 = ($7 + [8])
	
.LOOP $label$16:
	$3 = *($7)
	$7 = ($3 + [8])
	$5 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($5)) ){ goto $label$16 }
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$10 }
	
.LABEL $label$9
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $113($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $187($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $187($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $182($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8627])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $83($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8622])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8622])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8622])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL $56(*($1), *($0 + [44]))
	CALL $57(*($1), *($0 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	if ( (*($0 + [8]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = ($0 + [4])
	*($0) = $4
	$5 = *($0 + [4])
	*($0 + [4]) = [0]
	*(($6 = ($0 + [8]))) = [0]
	*($5 + [8]) = [0]
	$5 = *($3 + [4])
	$3 = ( $5 ? $3 : $5 )
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($0 + [4])
	
.LOOP $label$2:
	$8 = $3
	$9 = $1
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$7 }
	*($8 + [16]) = *($9 + [16])
	CALL $185(($8 + [24]), ($9 + [24]))
	$3 = *($8 + [8])
	if ( ($3 == 0) ){ goto $label$12 }
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$11 }
	*($3 + [4]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	
.LOOP $label$13:
	$3 = $1
	$1 = *($3)
	if ( $1 ){ goto $label$13 }
	$1 = *($3 + [4])
	if ( $1 ){ goto $label$13 }
	goto $label$10 
	
.LABEL $label$12
	$3 = [0]
	$1 = *($4)
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	*($3) = [0]
	
.LOOP $label$14:
	$1 = *($3 + [4])
	if ( ($1 == 0) ){ goto $label$10 }
	
.LOOP $label$15:
	$3 = $1
	$1 = *($3)
	if ( $1 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$10
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$10 = *(($8 + [16]))
	if ( ((uint_64)$10 >= (uint_64)*($1 + [16])) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$8
	$1 = $4
	$5 = $4
	goto $label$4 
	
.LABEL $label$7
	
.LOOP $label$17:
	$1 = *($8 + [8])
	if ( ($1 == 0) ){ goto $label$16 }
	$8 = $1
	goto $label$17 
	
.LABEL $label$16
	CALL $54($0, $8)
	return $11
	
.LABEL $label$6
	$11 = [2]
	goto $label$3 
	
.LABEL $label$5
	$11 = [0]
	goto $label$3 
	
.LABEL $label$4
	$11 = [4]
	
.LABEL $label$3
	
.LOOP $label$18:
	goto $label$40 
	
.LABEL $label$42
	$1 = $5
	if ( ((uint_64)$10 >= (uint_64)*($1 + [16])) ){ goto $label$29 }
	$11 = [2]
	goto $label$18 
	
.LABEL $label$41
	$5 = *($1)
	if ( $5 ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$40
	$5 = *($1 + [4])
	if ( $5 ){ goto $label$28 }
	$11 = [12]
	goto $label$18 
	
.LABEL $label$39
	$5 = ($1 + [4])
	goto $label$25 
	
.LABEL $label$38
	$5 = $1
	$11 = [4]
	goto $label$18 
	
.LABEL $label$37
	*($8) = (int_64)0
	*(($8 + [8])) = $1
	*($5) = $8
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$24 }
	$11 = [5]
	goto $label$18 
	
.LABEL $label$36
	*($0) = $1
	$8 = *($5)
	$11 = [6]
	goto $label$18 
	
.LABEL $label$35
	CALL $111(*($7), $8)
	*($6) = (*($6) + [1])
	$5 = *($9 + [4])
	if ( ($5 == 0) ){ goto $label$21 }
	$11 = [7]
	goto $label$18 
	
.LABEL $label$34
	$1 = $5
	$5 = *($1)
	if ( $5 ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$33
	$1 = *($9 + [8])
	if ( ((int_32)*($1) == (int_32)$9) ){ goto $label$20 }
	$11 = [10]
	goto $label$18 
	
.LABEL $label$32
	$8 = ($9 + [8])
	$11 = [11]
	goto $label$18 
	
.LABEL $label$31
	$5 = *($8)
	$8 = ($5 + [8])
	$1 = *($5 + [8])
	if ( ((int_32)$5 != (int_32)*($1)) ){ goto $label$19 }
	$11 = [8]
	goto $label$18 
	
.LABEL $label$30
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$29
	$11 = [0]
	goto $label$18 
	
.LABEL $label$28
	$11 = [1]
	goto $label$18 
	
.LABEL $label$27
	$11 = [3]
	goto $label$18 
	
.LABEL $label$26
	$11 = [1]
	goto $label$18 
	
.LABEL $label$25
	$11 = [4]
	goto $label$18 
	
.LABEL $label$24
	$11 = [6]
	goto $label$18 
	
.LABEL $label$23
	$11 = [8]
	goto $label$18 
	
.LABEL $label$22
	$11 = [7]
	goto $label$18 
	
.LABEL $label$21
	$11 = [9]
	goto $label$18 
	
.LABEL $label$20
	$11 = [8]
	goto $label$18 
	
.LABEL $label$19
	$11 = [11]
	goto $label$18 
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$43 }
	$6 = ($0 + [4])
	$9 = ($0 + [8])
	
.LOOP $label$44:
	$8 = $1
	*(($5 = CALL _Znwj([40])) + [16]) = *($8 + [16])
	CALL $183(($5 + [24]), ($8 + [24]))
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$49 }
	$10 = *(($5 + [16]))
	if ( ((uint_64)$10 >= (uint_64)*($1 + [16])) ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$49
	$1 = $6
	$3 = $6
	goto $label$46 
	
.LABEL $label$48
	$12 = [2]
	goto $label$45 
	
.LABEL $label$47
	$12 = [0]
	goto $label$45 
	
.LABEL $label$46
	$12 = [4]
	
.LABEL $label$45
	
.LOOP $label$50:
	goto $label$72 
	
.LABEL $label$74
	$1 = $3
	if ( ((uint_64)$10 >= (uint_64)*($1 + [16])) ){ goto $label$61 }
	$12 = [2]
	goto $label$50 
	
.LABEL $label$73
	$3 = *($1)
	if ( $3 ){ goto $label$58 }
	goto $label$59 
	
.LABEL $label$72
	$3 = *($1 + [4])
	if ( $3 ){ goto $label$60 }
	$12 = [12]
	goto $label$50 
	
.LABEL $label$71
	$3 = ($1 + [4])
	goto $label$57 
	
.LABEL $label$70
	$3 = $1
	$12 = [4]
	goto $label$50 
	
.LABEL $label$69
	*($5 + [8]) = $1
	*($5) = (int_64)0
	*($3) = $5
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$56 }
	$12 = [5]
	goto $label$50 
	
.LABEL $label$68
	*($0) = $1
	$5 = *($3)
	$12 = [6]
	goto $label$50 
	
.LABEL $label$67
	CALL $111(*(($0 + [4])), $5)
	*($9) = (*($9) + [1])
	$3 = *($8 + [4])
	if ( ($3 == 0) ){ goto $label$53 }
	$12 = [7]
	goto $label$50 
	
.LABEL $label$66
	$1 = $3
	$3 = *($1)
	if ( $3 ){ goto $label$54 }
	goto $label$55 
	
.LABEL $label$65
	$1 = *($8 + [8])
	if ( ((int_32)*($1) == (int_32)$8) ){ goto $label$52 }
	$12 = [10]
	goto $label$50 
	
.LABEL $label$64
	$5 = ($8 + [8])
	$12 = [11]
	goto $label$50 
	
.LABEL $label$63
	$3 = *($5)
	$5 = ($3 + [8])
	$1 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($1)) ){ goto $label$51 }
	$12 = [8]
	goto $label$50 
	
.LABEL $label$62
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$61
	$12 = [0]
	goto $label$50 
	
.LABEL $label$60
	$12 = [1]
	goto $label$50 
	
.LABEL $label$59
	$12 = [3]
	goto $label$50 
	
.LABEL $label$58
	$12 = [1]
	goto $label$50 
	
.LABEL $label$57
	$12 = [4]
	goto $label$50 
	
.LABEL $label$56
	$12 = [6]
	goto $label$50 
	
.LABEL $label$55
	$12 = [8]
	goto $label$50 
	
.LABEL $label$54
	$12 = [7]
	goto $label$50 
	
.LABEL $label$53
	$12 = [9]
	goto $label$50 
	
.LABEL $label$52
	$12 = [8]
	goto $label$50 
	
.LABEL $label$51
	$12 = [11]
	goto $label$50 
	
.LABEL $label$43
	$12
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [8])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [8682])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$1 = ($1 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$5 = ($0 + [4])
	
.LOOP $label$3:
	$6 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($6) - $3) > (int_32)[7]), [8682])
	$8 = $7
	CALL memcpy(*($5), ($8 + [16]), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	CALL eosio_assert(((int_32)(*($6) - $7) > (int_32)[7]), [8682])
	CALL memcpy(*($5), ($8 + [24]), [8])
	$3 = (*($5) + [8])
	*($5) = $3
	$6 = *($8 + [4])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = $6
	$6 = *($7)
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = *($8 + [8])
	if ( ((int_32)*($7) == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [8])
	
.LOOP $label$7:
	$6 = *($8)
	$8 = ($6 + [8])
	$7 = *($6 + [8])
	if ( ((int_32)$6 != (int_32)*($7)) ){ goto $label$7 }
	
.LABEL $label$4
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	$4 = ((uint_64)$1 / (uint_64)(int_64)10)
	CALL $189(($3 + [8]), int_32((((CASTING uint_32)(uint_64 $4) << [24]) + [1627389952]) >> [24]))
	CALL $189(($3 + [8]), int_32((((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$4 * (int_64)10))) << [24]) + [1627389952]) >> [24]))
	$6 = CALL $191(($3 + [8]), [0], [9341])
	$7 = ($6 + [8])
	*(($5 = (($3 + [48]) + [8]))) = *($7)
	*($3 + [48]) = *($6)
	*($6) = (int_64)0
	*($7) = [0]
	$6 = *($3 + [48])
	$7 = ($6 & [1])
	*($3 + [64]) = ( *($5) ? (($3 + [48]) | [1]) : $7 )
	*($3 + [68]) = ( *($3 + [52]) ? uint_32($6 >> [1]) : $7 )
	*($3) = *($3 + [64])
	$1 = *(CALL $48(($3 + [72]), $3))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$2
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $1
	$0 = [0]
	$6 = CALL db_find_i64($4, $1, (int_64)7035937633859534848, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $51(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($3 + [8])), [8548])
	
.LABEL $label$4
	$6 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($6, [9576])
	CALL eosio_assert($6, [9640])
	CALL eosio_assert($6, [9674])
	$6 = CALL db_next_i64(*($0 + [36]), ($3 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $51(($3 + [8]), $6)
	
.LABEL $label$5
	CALL $76(($3 + [8]), $0)
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$6 }
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	$5 = *($6 + [16])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($6 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($3 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $7
	
.LABEL $label$7
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

int_32 .FUNC $28 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [72]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8622])
	CALL memcpy(($4 + [56]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8622])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8622])
	CALL memcpy((($4 + [56]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = (int_64)5646012425221100912
	*($4 + [48]) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = *($4 + [56])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $205($2)
	
.LABEL $label$5
	$global$0 = ($4 + [80])
	return [1]
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [192])
	$global$0 = $3
	*($3 + [168]) = $2
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth($1)
	
.LABEL $label$1
	*(($3 + [160])) = [0]
	*($3 + [144]) = (int_64)-1
	*($3 + [152]) = (int_64)0
	$2 = *($0)
	*($3 + [128]) = $2
	*($3 + [136]) = (int_64)7235159537265672192
	$4 = [0]
	$5 = CALL db_find_i64($2, (int_64)7235159537265672192, (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $77(($3 + [128]), $5)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [128])), [8548])
	
.LABEL $label$2
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [9875])
	CALL eosio_assert(((uint_64)*($4 + [8]) >= (uint_64)*($3 + [168])), [9896])
	$2 = *($0)
	*($3 + [24]) = ($3 + [168])
	CALL eosio_assert($5, [8688])
	CALL $78(($3 + [128]), $4, $2, ($3 + [24]))
	$6 = *($3 + [168])
	$4 = CALL $199([8411])
	if ( ($4 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8450])
	goto $label$5 
	
.LABEL $label$6
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$2 = (int_64)0
	
.LOOP $label$7:
	$5 = *(($4 + [8410]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [8495])
	
.LABEL $label$8
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$7 }
	$7 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$4
	$7 = (int_64)4
	
.LABEL $label$3
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9272])
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$2 = $8
	$5 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$2 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $5 ){ goto $label$13 }
	$5 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$5 = [0]
	
.LABEL $label$9
	CALL eosio_assert($5, [9321])
	*($3 + [80]) = (int_64)3617214756542218240
	*($3 + [72]) = *($0)
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$4 = CALL $199([9262])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$22 }
	*($3 + [8]) = ($4 << [1])
	$5 = (($3 + [8]) | [1])
	if ( $4 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$9 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3 + [8]) = ($9 | [1])
	*($3 + [16]) = $5
	*($3 + [12]) = $4
	
.LABEL $label$21
	CALL memcpy($5, [9262], $4)
	
.LABEL $label$20
	*(($5 + $4)) = [0]
	*(($3 + [48])) = $7
	$4 = ($3 + [16])
	*(($3 + [64])) = *($4)
	*($4) = [0]
	*($3 + [32]) = $1
	*($3 + [40]) = $6
	*($3 + [24]) = *($0)
	*($3 + [56]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$4 = CALL $79(($3 + [88]), ($3 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [24]))
	CALL $80(($3 + [176]), $4)
	$5 = *($3 + [176])
	CALL send_inline($5, (*($3 + [180]) - $5))
	$5 = *($3 + [176])
	if ( ($5 == 0) ){ goto $label$23 }
	*($3 + [180]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$23
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$24 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$24
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$25 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$25
	if ( (*(($3 + [56])) & [1]) ){ goto $label$27 }
	if ( (*($3 + [8]) & [1]) ){ goto $label$26 }
	goto $label$18 
	
.LABEL $label$27
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$26
	CALL _ZdlPv(*(($3 + [16])))
	$9 = *($3 + [152])
	if ( $9 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	CALL $182(($3 + [8]))
	
.LABEL $label$18
	$9 = *($3 + [152])
	if ( ($9 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$0 = ($3 + [156])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$15 }
	
.LOOP $label$28:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$29 }
	CALL _ZdlPv($5)
	
.LABEL $label$29
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$28 }
	$4 = *(($3 + [152]))
	goto $label$14 
	
.LABEL $label$16
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$15
	$4 = $9
	
.LABEL $label$14
	*($0) = $9
	CALL _ZdlPv($4)
	$global$0 = ($3 + [192])
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*($3 + [208]) = $2
	if ( *($0 + [40]) ){ goto $label$1 }
	$4 = [1]
	if ( CALL has_auth(*($0 + [32])) ){ goto $label$2 }
	$4 = CALL has_auth(*($0))
	
.LABEL $label$2
	CALL eosio_assert($4, [9994])
	
.LABEL $label$1
	*($3 + [152]) = [0]
	*($3 + [144]) = (int_64)0
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	CALL $189(($3 + [144]), int_32((((CASTING uint_32)(uint_64 $2) << [24]) + [1627389952]) >> [24]))
	CALL $189(($3 + [144]), int_32((((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$2 * (int_64)10))) << [24]) + [1627389952]) >> [24]))
	$4 = CALL $191(($3 + [144]), [0], [9341])
	$6 = ($4 + [8])
	*(($5 = (($3 + [184]) + [8]))) = *($6)
	*($3 + [184]) = *($4)
	*($4) = (int_64)0
	*($6) = [0]
	$4 = *($3 + [184])
	$6 = ($4 & [1])
	*($3 + [200]) = ( *($5) ? (($3 + [184]) | [1]) : $6 )
	*($3 + [204]) = ( *($3 + [188]) ? uint_32($4 >> [1]) : $6 )
	*($3) = *($3 + [200])
	$1 = *(CALL $48(($3 + [104]), $3))
	if ( ((*($3 + [184]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$3
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [152])))
	
.LABEL $label$4
	*((($3 + [144]) + [32])) = [0]
	*($3 + [160]) = (int_64)-1
	*($3 + [168]) = (int_64)0
	$2 = *($0)
	*($3 + [144]) = $2
	*($3 + [152]) = $1
	$4 = CALL db_find_i64($2, $1, (int_64)7035937633859534848, *($3 + [208]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $51(($3 + [144]), $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($3 + [144])), [8548])
	CALL eosio_assert([1], [9640])
	CALL eosio_assert([1], [9674])
	$5 = CALL db_next_i64(*($4 + [36]), ($3 + [104]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $51(($3 + [144]), $5)
	
.LABEL $label$6
	CALL $76(($3 + [144]), $4)
	
.LABEL $label$5
	*((($3 + [104]) + [32])) = [0]
	*($3 + [112]) = $1
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	*($3 + [140]) = [0]
	*($3 + [104]) = *($0)
	*($3 + [96]) = ($3 + [104])
	CALL $68(($3 + [56]), ($3 + [96]), ($3 + [208]))
	$4 = *($3 + [60])
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ((int_64)*($3 + [208]) != (int_64)*($4 + [8])) ){ goto $label$7 }
	$5 = *($3 + [56])
	
.LOOP $label$8:
	*($3 + [56]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $5))
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9640])
	CALL $69(($3 + [56]))
	CALL $70(*($3 + [96]), $4)
	CALL $68(($3 + [56]), ($3 + [96]), ($3 + [208]))
	$4 = *($3 + [60])
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ((int_64)*($3 + [208]) != (int_64)*($4 + [8])) ){ goto $label$7 }
	$2 = *($3 + [56])
	$5 = (CASTING uint_32)(uint_64 $2)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( $4) ){ goto $label$8 }
	
.LABEL $label$7
	*((($3 + [56]) + [32])) = [0]
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	$2 = *($0)
	*($3 + [56]) = $2
	*($3 + [64]) = $1
	$4 = CALL db_find_i64($2, $1, (int_64)-4417018949313495040, *($3 + [208]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $74(($3 + [56]), $4)
	CALL eosio_assert(((int_32)*($4 + [20]) == (int_32)($3 + [56])), [8548])
	CALL eosio_assert([1], [9640])
	CALL eosio_assert([1], [9674])
	$5 = CALL db_next_i64(*($4 + [24]), ($3 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	CALL $74(($3 + [56]), $5)
	
.LABEL $label$10
	CALL $75(($3 + [56]), $4)
	
.LABEL $label$9
	*((($3 + [16]) + [32])) = [0]
	*(($3 + [54])) = [0]
	*($3 + [24]) = $1
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	*($3 + [16]) = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL $71(($3 + [216]), ($3 + [8]), ($3 + [208]))
	$4 = *($3 + [220])
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_64)*($3 + [208]) != (int_64)*($4 + [8])) ){ goto $label$11 }
	$5 = *($3 + [216])
	
.LOOP $label$12:
	*($3 + [216]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $5))
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9640])
	CALL $72(($3 + [216]))
	CALL $73(*($3 + [8]), $4)
	CALL $71(($3 + [216]), ($3 + [8]), ($3 + [208]))
	$4 = *($3 + [220])
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_64)*($3 + [208]) != (int_64)*($4 + [8])) ){ goto $label$11 }
	$1 = *($3 + [216])
	$5 = (CASTING uint_32)(uint_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $4) ){ goto $label$12 }
	
.LABEL $label$11
	CALL $67(($3 + [40]))
	$0 = *($3 + [80])
	if ( ($0 == 0) ){ goto $label$13 }
	$6 = ($3 + [84])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	CALL $55(($5 + [8]), *(($5 + [12])))
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$16 }
	$4 = *(($3 + [80]))
	goto $label$14 
	
.LABEL $label$15
	$4 = $0
	
.LABEL $label$14
	*($6) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$0 = *($3 + [128])
	if ( ($0 == 0) ){ goto $label$18 }
	$6 = ($3 + [132])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	CALL _ZdlPv($5)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$21 }
	$4 = *(($3 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$4 = $0
	
.LABEL $label$19
	*($6) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$18
	$6 = *($3 + [168])
	if ( ($6 == 0) ){ goto $label$23 }
	$7 = ($3 + [172])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$25 }
	
.LOOP $label$26:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$27 }
	$0 = *($5 + [16])
	if ( ($0 == 0) ){ goto $label$28 }
	*(($5 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$28
	CALL _ZdlPv($5)
	
.LABEL $label$27
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$26 }
	$4 = *(($3 + [168]))
	goto $label$24 
	
.LABEL $label$25
	$4 = $6
	
.LABEL $label$24
	*($7) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$global$0 = ($3 + [224])
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = (int_64)7235159537265672192
	$4 = [0]
	$5 = CALL db_find_i64($3, (int_64)7235159537265672192, (int_64)-4816269947984412672, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $49(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($2 + [8])), [8548])
	
.LABEL $label$2
	$1 = *($0)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8688])
	CALL $63(($2 + [8]), $4, $1, $2)
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $54(($0 + [92]), *(($0 + [96])))
	CALL $55(($0 + [80]), *(($0 + [84])))
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	$0 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2)
{
	if ( CALL has_auth($1) ){ goto $label$2 }
	if ( CALL has_auth(*($0 + [32])) ){ goto $label$2 }
	if ( (*($0 + [40]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $44($0, $1, $2)
	return 
	
.LABEL $label$1
	CALL eosio_assert([0], [9199])
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [128])
	$global$0 = $4
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	$5 = ((uint_64)$1 / (uint_64)(int_64)10)
	CALL $189(($4 + [64]), int_32((((CASTING uint_32)(uint_64 $5) << [24]) + [1627389952]) >> [24]))
	CALL $189(($4 + [64]), int_32((((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$5 * (int_64)10))) << [24]) + [1627389952]) >> [24]))
	$7 = CALL $191(($4 + [64]), [0], [9341])
	$8 = ($7 + [8])
	*(($6 = (($4 + [104]) + [8]))) = *($8)
	*($4 + [104]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	$7 = *($4 + [104])
	$8 = ($7 & [1])
	*($4 + [120]) = ( *($6) ? (($4 + [104]) | [1]) : $8 )
	*($4 + [124]) = ( *($4 + [108]) ? uint_32($7 >> [1]) : $8 )
	*($4) = *($4 + [120])
	$5 = *(CALL $48(($4 + [16]), $4))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$2
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$3
	$7 = [0]
	*((($4 + [64]) + [32])) = [0]
	*($4 + [80]) = (int_64)-1
	*($4 + [88]) = (int_64)0
	$9 = *($0)
	*($4 + [64]) = $9
	*($4 + [72]) = (int_64)7235159537265672192
	$6 = [0]
	$8 = CALL db_find_i64($9, (int_64)7235159537265672192, (int_64)-4816269947984412672, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $49(($4 + [64]), $8)
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)($4 + [64])), [8548])
	
.LABEL $label$4
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [9122])
	*($4 + [56]) = (int_64)0
	$1 = *($0)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [56])
	CALL eosio_assert($8, [8688])
	CALL $89(($4 + [64]), $6, $1, ($4 + [16]))
	*((($4 + [16]) + [32])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$1 = *($0)
	*($4 + [16]) = $1
	*($4 + [24]) = $5
	$6 = CALL db_find_i64($1, $5, (int_64)7035937633859534848, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $51(($4 + [16]), $6)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($4 + [16])), [8548])
	
.LABEL $label$5
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9520])
	$1 = *($0)
	*($4 + [8]) = ($4 + [56])
	CALL eosio_assert($6, [8688])
	CALL $90(($4 + [16]), $7, $1, ($4 + [8]))
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$6 }
	$8 = ($4 + [44])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($4 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $3
	
.LABEL $label$7
	*($8) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$6 = *($4 + [88])
	if ( ($6 == 0) ){ goto $label$12 }
	$3 = ($4 + [92])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$14 }
	
.LOOP $label$15:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	CALL $54(($0 + [92]), *(($0 + [96])))
	CALL $55(($0 + [80]), *(($0 + [84])))
	CALL _ZdlPv($0)
	
.LABEL $label$16
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$15 }
	$0 = *(($4 + [88]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $6
	
.LABEL $label$13
	*($3) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$global$0 = ($4 + [128])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	CALL $62($0, $1, $2, (CASTING uint_64)(uint_32 $3), $4, $5, [1])
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [80]) = $2
	*($4 + [88]) = $1
	*($4 + [72]) = $3
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*(($4 + [64])) = [0]
	*($4 + [40]) = (int_64)7235159537265672192
	*($4 + [48]) = (int_64)-1
	*($4 + [56]) = (int_64)0
	$3 = *($0)
	*($4 + [32]) = $3
	*($4 + [20]) = ($4 + [88])
	*($4 + [16]) = ($4 + [32])
	*($4 + [24]) = ($4 + [80])
	*($4 + [28]) = ($4 + [72])
	CALL $93(($4 + [8]), ($4 + [32]), $3, ($4 + [16]))
	$5 = *($4 + [56])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($4 + [60])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	CALL _ZdlPv($7)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($4 + [56]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = ($4 + [108]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = $3
	*($4 + [80]) = ($2 + $5)
	*($4 + [72]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8622])
	CALL memcpy(($4 + [88]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8622])
	CALL memcpy((($4 + [88]) + [8]), ($2 + [8]), [8])
	*($4 + [76]) = ($2 + [16])
	$6 = (($4 + [88]) + [16])
	CALL $56(($4 + [72]), $6)
	*(($7 = (($4 + [8]) + [8]))) = *($4 + [80])
	*($4 + [8]) = *($4 + [72])
	$7 = *($7)
	*((($4 + [128]) + [8])) = $7
	*(($8 = (($4 + [144]) + [8]))) = $7
	$9 = *($4 + [8])
	*($4 + [144]) = $9
	*($4 + [128]) = $9
	$7 = *($8)
	*((($4 + [160]) + [8])) = $7
	*(($4 + [48])) = $7
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [64]) = [0]
	*($4 + [56]) = (int_64)5646012425221100912
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $88(($4 + [160]), ($4 + [88]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $205($2)
	
.LABEL $label$4
	CALL $55($6, *($3))
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *($1)
	CALL $126($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8820])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [76])
	*($3 + [64]) = $15
	$16 = ($1 + [80])
	*($3 + [68]) = $16
	$17 = ($1 + [92])
	*($3 + [72]) = $17
	CALL $115(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$4 = CALL $202($18)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($18 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [24]) = $1
	CALL $116(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $4, $18)
	if ( ((uint_32)$18 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $205($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8631])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	*($3) = (int_64)0
	CALL $125(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $123(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *($1)
	CALL eosio_assert((int_64)(*($1 + [16]) == 0), [8998])
	$6 = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	*($1 + [8]) = $6
	CALL eosio_assert(((uint_64)$6 >= (uint_64)((int_64)*(*(*($3 + [4]) + [4]) + [24]) * (int_64)100)), [8959])
	$6 = *(*(*($3 + [4]) + [4]) + [24])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)((int_64)$6 * (int_64)-100))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)((int_64)$6 * (int_64)100))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8820])
	CALL eosio_assert([1], [8682])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8682])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8820])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [76])
	*($3 + [64]) = $15
	$16 = ($1 + [80])
	*($3 + [68]) = $16
	$17 = ($1 + [92])
	*($3 + [72]) = $17
	CALL $115(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$4 = CALL $202($18)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($18 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [24]) = $1
	CALL $116(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $4, $18)
	if ( ((uint_32)$18 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $205($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8723])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8769])
	$5 = *($1)
	CALL $128($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8820])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [76])
	*($3 + [64]) = $15
	$16 = ($1 + [80])
	*($3 + [68]) = $16
	$17 = ($1 + [92])
	*($3 + [72]) = $17
	CALL $115(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$4 = CALL $202($18)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($18 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [24]) = $1
	CALL $116(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [108]), $2, $4, $18)
	if ( ((uint_32)$18 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $205($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8631])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	*($3) = (int_64)0
	CALL $127(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $123(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $193($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $54(($1 + [92]), *(($1 + [96])))
	CALL $55(($1 + [80]), *(($1 + [84])))
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	CALL $114(*($0 + [4]), $1)
	*(($4 = $2) + [16]) = [0]
	*($4) = ($4 + [16])
	$5 = ($1 + [8])
	*($4 + [28]) = $5
	*($4 + [24]) = $1
	$6 = ($1 + [16])
	*($4 + [32]) = $6
	$7 = ($1 + [24])
	*($4 + [36]) = $7
	$8 = ($1 + [32])
	*($4 + [40]) = $8
	$9 = ($1 + [40])
	*($4 + [44]) = $9
	$10 = ($1 + [48])
	*($4 + [48]) = $10
	$11 = ($1 + [56])
	*($4 + [52]) = $11
	$12 = ($1 + [64])
	*($4 + [56]) = $12
	$13 = ($1 + [72])
	*($4 + [60]) = $13
	$14 = ($1 + [76])
	*($4 + [64]) = $14
	$15 = ($1 + [80])
	*($4 + [68]) = $15
	$16 = ($1 + [92])
	*($4 + [72]) = $16
	CALL $115(($4 + [24]), $4)
	$17 = *($4 + [16])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$2 = CALL $202($17)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($17 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $17)
	*($4 + [16]) = $4
	*($4 + [28]) = $5
	*($4 + [24]) = $1
	*($4 + [32]) = $6
	*($4 + [36]) = $7
	*($4 + [40]) = $8
	*($4 + [44]) = $9
	*($4 + [48]) = $10
	*($4 + [52]) = $11
	*($4 + [56]) = $12
	*($4 + [60]) = $13
	*($4 + [64]) = $14
	*($4 + [68]) = $15
	*($4 + [72]) = $16
	CALL $116(($4 + [24]), ($4 + [16]))
	$18 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($3 + [8]), (int_64)-4816269947984412672, *(*($0 + [8])), $18, $2, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$18 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $205($2)
	if ( (uint_64)($18 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [80])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $193($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [208])
	$global$0 = $5
	$6 = *(($3 + [8]))
	*((($5 + [184]) + [8])) = $6
	$7 = *($3)
	*(($5 + [8])) = $6
	*($5 + [200]) = $1
	*($5 + [184]) = $7
	*($5) = $7
	CALL $94($0, $5)
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$2 }
	$8 = uint_32($8 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$8 = *($4 + [4])
	
.LABEL $label$1
	$8 = CALL $184(($5 + [88]), $4, [23], ($8 + [-23]), $4)
	*(($5 + [176])) = [0]
	*($5 + [168]) = (int_64)0
	$9 = ( *($8 + [8]) ? ($8 + [1]) : (*($5 + [88]) & [1]) )
	$4 = CALL $199($9)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*($5 + [168]) = ($4 << [1])
	$10 = (($5 + [168]) | [1])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = (($4 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($5 + [168]) = ($11 | [1])
	*($5 + [176]) = $10
	*($5 + [172]) = $4
	
.LABEL $label$6
	CALL memcpy($10, $9, $4)
	
.LABEL $label$5
	*(($10 + $4)) = [0]
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($8 + [8])))
	
.LABEL $label$8
	*(($5 + [96])) = [0]
	*($5 + [88]) = (int_64)0
	$4 = CALL $199([8326])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [88]) = ($4 << [1])
	$8 = (($5 + [88]) | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$10 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($5 + [88]) = ($10 | [1])
	*($5 + [96]) = $8
	*($5 + [92]) = $4
	
.LABEL $label$10
	CALL memcpy($8, [8326], $4)
	
.LABEL $label$9
	*(($8 + $4)) = [0]
	CALL $1(($5 + [152]), ($5 + [168]), ($5 + [88]))
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($5 + [96]))
	
.LABEL $label$12
	CALL eosio_assert(((int_32)(*($5 + [156]) - *($5 + [152])) == (int_32)[48]), [9144])
	$4 = *($5 + [152])
	if ( (*($4) & [1]) ){ goto $label$14 }
	$4 = ($4 + [1])
	goto $label$13 
	
.LABEL $label$14
	$4 = *($4 + [8])
	
.LABEL $label$13
	$8 = CALL $196($4)
	$4 = *($5 + [152])
	if ( (*($4 + [12]) & [1]) ){ goto $label$16 }
	$4 = (($4 + [12]) + [1])
	goto $label$15 
	
.LABEL $label$16
	$4 = *(($4 + [20]))
	
.LABEL $label$15
	*($5 + [148]) = CALL $196($4)
	$4 = *($5 + [152])
	if ( (*($4 + [24]) & [1]) ){ goto $label$18 }
	$4 = (($4 + [24]) + [1])
	goto $label$17 
	
.LABEL $label$18
	$4 = *(($4 + [32]))
	
.LABEL $label$17
	*($5 + [144]) = CALL $196($4)
	$9 = CALL $183(($5 + [128]), (*($5 + [152]) + [36]))
	$4 = [0]
	*((($5 + [88]) + [32])) = [0]
	*($5 + [96]) = (int_64)7235159537265672192
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	$7 = *($0)
	*($5 + [88]) = $7
	*((($5 + [48]) + [32])) = [0]
	*($5 + [56]) = (int_64)7235159537265672192
	*($5 + [48]) = $7
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	$8 = CALL db_find_i64($7, (int_64)7235159537265672192, (int_64)-4816269947984412672, (CASTING int_64)(int_32 $8))
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$20 }
	$4 = CALL $49(($5 + [88]), $8)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($5 + [88])), [8548])
	*($5 + [44]) = $4
	$4 = ((int_32)*($4 + [76]) ^ (int_32)[1])
	*($5 + [40]) = ($5 + [88])
	$11 = (($5 + [40]) | [4])
	goto $label$19 
	
.LABEL $label$20
	*($5 + [44]) = [0]
	*($5 + [40]) = ($5 + [88])
	$11 = (($5 + [40]) | [4])
	
.LABEL $label$19
	CALL eosio_assert($4, [8915])
	$4 = [0]
	$8 = *($5 + [148])
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$21 }
	$10 = *($5 + [144])
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$21 }
	$4 = ((int_64)*($3) >= (int_64)(CASTING int_64)(int_32 ($10 + $8)))
	
.LABEL $label$21
	CALL eosio_assert($4, [9167])
	$7 = *($5 + [200])
	$3 = *(($5 + [76]))
	$10 = *(($5 + [72]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$25 }
	
.LOOP $label$27:
	$4 = ($3 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8) == (int_64)$7) ){ goto $label$26 }
	$3 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$25 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($5 + [48])), [8548])
	goto $label$24 
	
.LABEL $label$25
	$4 = CALL db_find_i64(*($5 + [48]), *(($5 + [56])), (int_64)3607749779137757184, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$23 }
	$8 = CALL $77(($5 + [48]), $4)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($5 + [48])), [8548])
	
.LABEL $label$24
	$7 = *($0)
	*($5 + [28]) = ($5 + [40])
	*($5 + [24]) = ($5 + [148])
	CALL eosio_assert([1], [8688])
	CALL $103(($5 + [48]), $8, $7, ($5 + [24]))
	goto $label$22 
	
.LABEL $label$23
	$7 = *($0)
	*($5 + [28]) = ($5 + [148])
	*($5 + [24]) = ($5 + [200])
	*($5 + [32]) = ($5 + [40])
	CALL $104(($5 + [16]), ($5 + [48]), $7, ($5 + [24]))
	
.LABEL $label$22
	$4 = [0]
	$7 = *($5 + [144])
	$3 = *($11)
	if ( ((uint_64)*($3 + [8]) > (uint_64)$7) ){ goto $label$28 }
	$4 = ((uint_64)*($3 + [16]) >= (uint_64)$7)
	
.LABEL $label$28
	CALL eosio_assert($4, [8983])
	$7 = *($0)
	$4 = *($5 + [44])
	*($5 + [28]) = $9
	*($5 + [24]) = ($5 + [200])
	*($5 + [32]) = ($5 + [144])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8688])
	CALL $105(($5 + [88]), $4, $7, ($5 + [24]))
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$29 }
	$10 = ($5 + [76])
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$31 }
	
.LOOP $label$32:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$33 }
	CALL _ZdlPv($3)
	
.LABEL $label$33
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$32 }
	$4 = *(($5 + [72]))
	goto $label$30 
	
.LABEL $label$31
	$4 = $8
	
.LABEL $label$30
	*($10) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$29
	$8 = *($5 + [112])
	if ( ($8 == 0) ){ goto $label$34 }
	$10 = ($5 + [116])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$36 }
	
.LOOP $label$37:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$38 }
	CALL $54(($4 + [92]), *(($4 + [96])))
	CALL $55(($4 + [80]), *(($4 + [84])))
	CALL _ZdlPv($4)
	
.LABEL $label$38
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$37 }
	$4 = *(($5 + [112]))
	goto $label$35 
	
.LABEL $label$36
	$4 = $8
	
.LABEL $label$35
	*($10) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$34
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$39
	$8 = *($5 + [152])
	if ( ($8 == 0) ){ goto $label$40 }
	$3 = *($5 + [156])
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$42 }
	
.LOOP $label$43:
	$4 = ($3 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$44
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$43 }
	$4 = *($5 + [152])
	goto $label$41 
	
.LABEL $label$42
	$4 = $8
	
.LABEL $label$41
	*($5 + [156]) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$40
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*($5 + [176]))
	
.LABEL $label$45
	$global$0 = ($5 + [208])
	return (unreachable)
	
.LABEL $label$4
	CALL $182(($5 + [168]))
	
.LABEL $label$3
	CALL $182(($5 + [88]))
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [192])
	$global$0 = $5
	*($5 + [184]) = $1
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	$1 = *($3)
	$6 = *($3 + [8])
	*(($5 + [8])) = $6
	*($5 + [152]) = $6
	*($5) = $1
	*($5 + [144]) = $1
	CALL $94($0, $5)
	CALL eosio_assert(((int_64)$1 > (int_64)0), [8397])
	*(($5 + [176])) = [0]
	*($5 + [152]) = (int_64)7235159537265672192
	*($5 + [160]) = (int_64)-1
	*($5 + [168]) = (int_64)0
	*($5 + [144]) = *($0)
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$3 }
	$7 = uint_32($7 >> [1])
	goto $label$2 
	
.LABEL $label$3
	$7 = *($4 + [4])
	
.LABEL $label$2
	$7 = CALL $184(($5 + [64]), $4, [19], ($7 + [-19]), $4)
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$8 = ( *($7 + [8]) ? ($7 + [1]) : (*($5 + [64]) & [1]) )
	$4 = CALL $199($8)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [128]) = ($4 << [1])
	$9 = (($5 + [128]) | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$10 = (($4 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [128]) = ($10 | [1])
	*($5 + [136]) = $9
	*($5 + [132]) = $4
	
.LABEL $label$10
	CALL memcpy($9, $8, $4)
	
.LABEL $label$9
	*(($9 + $4)) = [0]
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($7 + [8])))
	
.LABEL $label$12
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$4 = CALL $199([8326])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$15 }
	*($5 + [64]) = ($4 << [1])
	$7 = (($5 + [64]) | [1])
	if ( $4 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$9 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($5 + [64]) = ($9 | [1])
	*($5 + [72]) = $7
	*($5 + [68]) = $4
	
.LABEL $label$14
	CALL memcpy($7, [8326], $4)
	
.LABEL $label$13
	*(($7 + $4)) = [0]
	CALL $1(($5 + [112]), ($5 + [128]), ($5 + [64]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($5 + [72]))
	
.LABEL $label$16
	CALL eosio_assert(((int_32)(*($5 + [116]) - *($5 + [112])) == (int_32)[24]), [8328])
	$4 = *($5 + [112])
	if ( (*($4) & [1]) ){ goto $label$18 }
	$4 = ($4 + [1])
	goto $label$17 
	
.LABEL $label$18
	$4 = *($4 + [8])
	
.LABEL $label$17
	*($5 + [108]) = CALL $196($4)
	*(($5 + [96])) = [0]
	*($5 + [72]) = (int_64)7235159537265672192
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	*($5 + [64]) = *($0)
	$4 = *($5 + [112])
	if ( (*($4 + [12]) & [1]) ){ goto $label$20 }
	$4 = (($4 + [12]) + [1])
	goto $label$19 
	
.LABEL $label$20
	$4 = *(($4 + [20]))
	
.LABEL $label$19
	$4 = CALL $196($4)
	*($5 + [60]) = $4
	$1 = (CASTING int_64)(int_32 $4)
	$7 = *(($5 + [92]))
	$8 = *(($5 + [88]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$22 }
	
.LOOP $label$24:
	$4 = ($7 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$23 }
	$7 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$22 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)($5 + [64])), [8548])
	*($5 + [52]) = $9
	*($5 + [48]) = ($5 + [64])
	goto $label$21 
	
.LABEL $label$22
	$4 = CALL db_find_i64(*($5 + [64]), *(($5 + [72])), (int_64)-4816269762336859776, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$25 }
	$9 = CALL $91(($5 + [64]), $4)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)($5 + [64])), [8548])
	*($5 + [52]) = $9
	*($5 + [48]) = ($5 + [64])
	goto $label$21 
	
.LABEL $label$25
	$9 = [0]
	*($5 + [52]) = [0]
	*($5 + [48]) = ($5 + [64])
	
.LABEL $label$21
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8352])
	$4 = *($5 + [108])
	CALL eosio_assert((($4 + [-1]) <= [99]), [8377])
	$1 = (CASTING int_64)(int_32 $4)
	$7 = *(($5 + [172]))
	$8 = *(($5 + [168]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$29 }
	
.LOOP $label$31:
	$4 = ($7 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$30 }
	$7 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$29 }
	CALL eosio_assert(((int_32)*($9 + [104]) == (int_32)($5 + [144])), [8548])
	goto $label$28 
	
.LABEL $label$29
	$4 = CALL db_find_i64(*($5 + [144]), *(($5 + [152])), (int_64)-4816269947984412672, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$27 }
	$9 = CALL $49(($5 + [144]), $4)
	CALL eosio_assert(((int_32)*($9 + [104]) == (int_32)($5 + [144])), [8548])
	
.LABEL $label$28
	$1 = *($0)
	*($5 + [36]) = $3
	*($5 + [28]) = ($5 + [60])
	*($5 + [24]) = ($5 + [108])
	*($5 + [32]) = ($5 + [48])
	*($5 + [40]) = ($5 + [184])
	CALL eosio_assert([1], [8688])
	CALL $95(($5 + [144]), $9, $1, ($5 + [24]))
	$9 = *($5 + [88])
	if ( $9 ){ goto $label$26 }
	goto $label$6 
	
.LABEL $label$27
	$1 = *($0)
	*($5 + [36]) = $3
	*($5 + [28]) = ($5 + [48])
	*($5 + [24]) = ($5 + [108])
	*($5 + [32]) = ($5 + [60])
	*($5 + [40]) = ($5 + [184])
	CALL $96(($5 + [16]), ($5 + [144]), $1, ($5 + [24]))
	$9 = *($5 + [88])
	if ( ($9 == 0) ){ goto $label$6 }
	
.LABEL $label$26
	$8 = ($5 + [92])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$32 }
	
.LOOP $label$33:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$34 }
	CALL _ZdlPv($7)
	
.LABEL $label$34
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$33 }
	$4 = *(($5 + [88]))
	*($8) = $9
	CALL _ZdlPv($4)
	$9 = *($5 + [112])
	if ( $9 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$32
	*($8) = $9
	CALL _ZdlPv($9)
	$9 = *($5 + [112])
	if ( $9 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	CALL $182(($5 + [128]))
	
.LABEL $label$7
	CALL $182(($5 + [64]))
	
.LABEL $label$6
	$9 = *($5 + [112])
	if ( ($9 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = *($5 + [116])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$36 }
	
.LOOP $label$37:
	$4 = ($7 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$38
	$7 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$37 }
	$4 = *($5 + [112])
	goto $label$35 
	
.LABEL $label$36
	$4 = $9
	
.LABEL $label$35
	*($5 + [116]) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$4
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*($5 + [136]))
	
.LABEL $label$39
	$9 = *($5 + [168])
	if ( ($9 == 0) ){ goto $label$40 }
	$8 = ($5 + [172])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$42 }
	
.LOOP $label$43:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$44 }
	CALL $54(($4 + [92]), *(($4 + [96])))
	CALL $55(($4 + [80]), *(($4 + [84])))
	CALL _ZdlPv($4)
	
.LABEL $label$44
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$43 }
	$4 = *(($5 + [168]))
	goto $label$41 
	
.LABEL $label$42
	$4 = $9
	
.LABEL $label$41
	*($8) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$global$0 = ($5 + [192])
	(unreachable)
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8622])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8622])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $112(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $183(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $183(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	CALL require_auth(*($0))
	$4 = [0]
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$5 = *($0)
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)7235159537265672192
	$6 = [0]
	$7 = CALL db_find_i64($5, (int_64)7235159537265672192, (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $77(($3 + [16]), $7)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($3 + [16])), [8548])
	$2 = *($3 + [56])
	
.LABEL $label$1
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [9919])
	if ( (uint_64)(*($6 + [16]) <= $2) ){ goto $label$2 }
	$1 = *($6 + [8])
	$4 = ((uint_64)((int_64)$1 + (int_64)$2) > (uint_64)$1)
	
.LABEL $label$2
	CALL eosio_assert($4, [9937])
	$2 = *($0)
	*($3 + [8]) = ($3 + [56])
	CALL eosio_assert($7, [8688])
	CALL $81(($3 + [16]), $6, $2, ($3 + [8]))
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = ($3 + [44])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	$6 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$6 = $4
	
.LABEL $label$4
	*($7) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $35 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [80]) = $2
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	CALL $189(($3 + [16]), int_32((((CASTING uint_32)(uint_64 $2) << [24]) + [1627389952]) >> [24]))
	CALL $189(($3 + [16]), int_32((((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$2 * (int_64)10))) << [24]) + [1627389952]) >> [24]))
	$5 = CALL $191(($3 + [16]), [0], [9341])
	$6 = ($5 + [8])
	*(($4 = (($3 + [56]) + [8]))) = *($6)
	*($3 + [56]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = *($3 + [56])
	$6 = ($5 & [1])
	*($3 + [72]) = ( *($4) ? (($3 + [56]) | [1]) : $6 )
	*($3 + [76]) = ( *($3 + [60]) ? uint_32($5 >> [1]) : $6 )
	*($3) = *($3 + [72])
	$1 = *(CALL $48(($3 + [88]), $3))
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$2
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$3
	*(($3 + [48])) = [0]
	*($3 + [24]) = $1
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	*($3 + [16]) = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL $68(($3 + [88]), ($3 + [8]), ($3 + [80]))
	$0 = *($3 + [92])
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((int_64)*($3 + [80]) != (int_64)*($0 + [8])) ){ goto $label$4 }
	$5 = *($3 + [88])
	
.LOOP $label$5:
	*($3 + [88]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $5))
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9640])
	CALL $69(($3 + [88]))
	CALL $70(*($3 + [8]), $0)
	CALL $68(($3 + [88]), ($3 + [8]), ($3 + [80]))
	$0 = *($3 + [92])
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((int_64)*($3 + [80]) != (int_64)*($0 + [8])) ){ goto $label$4 }
	$1 = *($3 + [88])
	$5 = (CASTING uint_32)(uint_64 $1)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $0) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($3 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $4
	
.LABEL $label$7
	*($6) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($3 + [96])
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $202($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8622])
	CALL memcpy(($4 + [56]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = (int_64)5646012425221100912
	*($4 + [48]) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $205($2)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($3 + [104]) = $2
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	$4 = [0]
	*(($3 + [96])) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$5 = *($0)
	*($3 + [64]) = $5
	*($3 + [72]) = (int_64)7235159537265672192
	$6 = CALL db_find_i64($5, (int_64)7235159537265672192, (int_64)-4816269762336859776, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL $91(($3 + [64]), $6)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($3 + [64])), [8548])
	*($3 + [60]) = $4
	$4 = [1]
	goto $label$2 
	
.LABEL $label$3
	*($3 + [60]) = [0]
	
.LABEL $label$2
	*($3 + [56]) = ($3 + [64])
	CALL eosio_assert($4, [8352])
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$2 = *($0)
	*($3 + [16]) = $2
	*($3 + [24]) = (int_64)7235159537265672192
	$4 = [0]
	$6 = CALL db_find_i64($2, (int_64)7235159537265672192, (int_64)-4816269947984412672, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $49(($3 + [16]), $6)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($3 + [16])), [8548])
	
.LABEL $label$4
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [9346])
	$2 = *($0)
	*($3 + [12]) = ($3 + [104])
	*($3 + [8]) = ($3 + [56])
	CALL eosio_assert($6, [8688])
	CALL $92(($3 + [16]), $4, $2, ($3 + [8]))
	$6 = *($3 + [40])
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($3 + [44])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL $54(($0 + [92]), *(($0 + [96])))
	CALL $55(($0 + [80]), *(($0 + [84])))
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	$0 = *(($3 + [40]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$6 = *($3 + [88])
	if ( ($6 == 0) ){ goto $label$10 }
	$7 = ($3 + [92])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($3 + [88]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $6
	
.LABEL $label$11
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$global$0 = ($3 + [112])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [80]) = $2
	if ( *($0 + [40]) ){ goto $label$1 }
	CALL require_auth(*($0 + [32]))
	
.LABEL $label$1
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	CALL $189(($3 + [16]), int_32((((CASTING uint_32)(uint_64 $2) << [24]) + [1627389952]) >> [24]))
	CALL $189(($3 + [16]), int_32((((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$2 * (int_64)10))) << [24]) + [1627389952]) >> [24]))
	$5 = CALL $191(($3 + [16]), [0], [9341])
	$6 = ($5 + [8])
	*(($4 = (($3 + [56]) + [8]))) = *($6)
	*($3 + [56]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = *($3 + [56])
	$6 = ($5 & [1])
	*($3 + [72]) = ( *($4) ? (($3 + [56]) | [1]) : $6 )
	*($3 + [76]) = ( *($3 + [60]) ? uint_32($5 >> [1]) : $6 )
	*($3) = *($3 + [72])
	$1 = *(CALL $48(($3 + [88]), $3))
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$2
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$3
	*(($3 + [48])) = [0]
	*(($3 + [54])) = [0]
	*($3 + [24]) = $1
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	*($3 + [16]) = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL $71(($3 + [88]), ($3 + [8]), ($3 + [80]))
	$0 = *($3 + [92])
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((int_64)*($3 + [80]) != (int_64)*($0 + [8])) ){ goto $label$4 }
	$5 = *($3 + [88])
	
.LOOP $label$5:
	*($3 + [88]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $5))
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9640])
	CALL $72(($3 + [88]))
	CALL $73(*($3 + [8]), $0)
	CALL $71(($3 + [88]), ($3 + [8]), ($3 + [80]))
	$0 = *($3 + [92])
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((int_64)*($3 + [80]) != (int_64)*($0 + [8])) ){ goto $label$4 }
	$1 = *($3 + [88])
	$5 = (CASTING uint_32)(uint_64 $1)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $0) ){ goto $label$5 }
	
.LABEL $label$4
	CALL $67(($3 + [40]))
	$global$0 = ($3 + [96])
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
}

int_32 .FUNC $198 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $199 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $196 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $197 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $194 ()
{
	return [10200]
}

void .FUNC $195 (int_32 $0)
{
}

int_32 .FUNC $192 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $198(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $193 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $190 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $186($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $191 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $190($0, $1, $2, CALL $199($2))
}