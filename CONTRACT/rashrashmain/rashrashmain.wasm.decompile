(data (i32.const 4) "\d0f\00\00")
(data (i32.const 16) "\00\00\00\00\00\00\00\00")
(data (i32.const 32) "game is not initialised\00")
(data (i32.const 64) "game stopped\00")
(data (i32.const 80) "cannot pass end iterator to modify\00")
(data (i32.const 128) "object passed to modify is not in multi_index\00")
(data (i32.const 176) "cannot modify objects in table of another contract\00")
(data (i32.const 240) "updater cannot change primary key when modifying an object\00")
(data (i32.const 304) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 368) "previous round is not found\00")
(data (i32.const 400) "cannot create objects in table of another contract\00")
(data (i32.const 464) "write\00")
(data (i32.const 480) "error reading iterator\00")
(data (i32.const 512) "read\00")
(data (i32.const 528) "get\00")
(data (i32.const 544) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 608) "invalid symbol name\00")
(data (i32.const 640) "attempt to add asset with different symbol\00")
(data (i32.const 688) "addition underflow\00")
(data (i32.const 720) "addition overflow\00")
(data (i32.const 752) "round is not found\00")
(data (i32.const 784) "round is not active\00")
(data (i32.const 816) "round does not accept bets any more\00")
(data (i32.const 864) "player already joined the round\00")
(data (i32.const 896) "cannot pass end iterator to erase\00")
(data (i32.const 944) "cannot increment end iterator\00")
(data (i32.const 976) "object passed to erase is not in multi_index\00")
(data (i32.const 1024) "cannot erase objects in table of another contract\00")
(data (i32.const 1088) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1152) "cannot transfer to self\00")
(data (i32.const 1184) " invalid quantity\00")
(data (i32.const 1216) " must transfer positive quantity\00")
(data (i32.const 1264) " memo has more than 256 bytes\00")
(data (i32.const 1296) "eosio.token\00")
(data (i32.const 1312) "onerror\00")
(data (i32.const 1328) "eosio\00")
(data (i32.const 1344) "onerror actions are only valid from the eosio system account\00")
(data (i32.const 1408) "transfer\00")
(data (i32.const 1424) "rashrashmain\00")
(data (i32.const 9840) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$17 (param i64)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN12eoscrashmain6createEy" (func $5))
(export "_ZN12eoscrashmain4joinEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_" (func $25))
(export "_ZN12eoscrashmain7cashoutENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $28))
(export "_ZN12eoscrashmain8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $30))
(export "_ZN12eoscrashmain5roundEymNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5eosio5assetEy" (func $31))
(export "_ZN12eoscrashmain6betlogEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_y" (func $32))
(export "_ZN12eoscrashmain6setstsEm" (func $33))
(export "apply" (func $35))
(export "malloc" (func $50))
(export "free" (func $53))
(export "memcmp" (func $60))
(table $0 7 7 anyfunc)
(elem (i32.const 0) $61 $30 $5 $31 $32 $33 $28)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $6) >> [6]) >= (uint_32)$1) ){ goto $label$6 }
	$2 = *($0)
	$4 = int_32(($6 - $2) >> [6])
	$7 = ($4 + $1)
	if ( ((uint_32)$7 >= (uint_32)[67108864]) ){ goto $label$4 }
	$6 = [67108863]
	$8 = ($8 - $2)
	if ( ((uint_32)int_32($8 >> [6]) > (uint_32)[33554430]) ){ goto $label$7 }
	$6 = int_32($8 >> [5])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$3 }
	
.LABEL $label$7
	$8 = CALL $54(($6 << [6]))
	goto $label$2 
	
.LABEL $label$6
	$7 = ($0 + [4])
	
.LOOP $label$8:
	*(($6 = (($2 = CALL memset($6, [0], [64])) + [16]))) = (int_64)1398362884
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [544])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$8 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$9
	CALL eosio_assert($8, [608])
	*($2 + [24 align=4]) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*(($2 + [40])) = (int_64)0
	$6 = (*($7) + [64])
	*($7) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $58($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($8 + ($6 << [6]))
	$8 = ($8 + ($4 << [6]))
	$2 = $8
	
.LOOP $label$14:
	*(($6 = (($2 = CALL memset($2, [0], [64])) + [16]))) = (int_64)1398362884
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [544])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [608])
	*($2 + [24 align=4]) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*(($2 + [40])) = (int_64)0
	$2 = ($2 + [64])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$21 }
	$4 = ([0] - $6)
	$6 = ($7 + [-32])
	
.LOOP $label$22:
	*(($8 + [-48])) = *(($6 + [-16]))
	*(($8 + [-56])) = *(($6 + [-24]))
	*(($8 + [-64])) = *(($6 + [-32]))
	*(($8 + [-32])) = *($6)
	$7 = ($6 + [-8])
	*(($8 + [-40])) = *($7)
	*($7) = [0]
	*(($6 + [-4])) = [0]
	*($6) = [0]
	$7 = ($6 + [12])
	*(($8 + [-20])) = *($7)
	$1 = ($6 + [4])
	*(($8 + [-28])) = *($1)
	*($1) = [0]
	*(($6 + [8])) = [0]
	*($7) = [0]
	*(($8 + [-8])) = *(($6 + [24]))
	*(($8 + [-16])) = *(($6 + [16]))
	$8 = ($8 + [-64])
	$6 = ($6 + [-64])
	if ( ((int_32)($6 + $4) != (int_32)[-32]) ){ goto $label$22 }
	$6 = *(($0 + [4]))
	$7 = *($0)
	goto $label$20 
	
.LABEL $label$21
	$7 = $6
	
.LABEL $label$20
	*($0) = $8
	*(($0 + [4])) = $2
	*(($0 + [8])) = $3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$23 }
	$8 = ([0] - $7)
	$6 = ($6 + [-40])
	
.LOOP $label$24:
	if ( ((*(($6 + [12])) & [1]) == 0) ){ goto $label$25 }
	CALL $55(*(($6 + [20])))
	
.LABEL $label$25
	if ( ((*($6) & [1]) == 0) ){ goto $label$26 }
	CALL $55(*(($6 + [8])))
	
.LABEL $label$26
	$6 = ($6 + [-64])
	if ( ((int_32)($6 + $8) != (int_32)[-40]) ){ goto $label$24 }
	
.LABEL $label$23
	if ( ($7 == 0) ){ goto $label$1 }
	CALL $55($7)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [512])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $20(CALL $20($0, ($1 + [24])), ($1 + [36]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [16])) = (int_64)0
	*(($5 + [32])) = (int_64)1398362884
	*($5) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	
.LOOP $label$5:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($4, [608])
	*($5 + [40]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $46(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$8 }
	CALL free($0)
	
.LABEL $label$8
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $47(($5 + [64]), $5)
	if ( ((*($5 + [12]) & [1]) == 0) ){ goto $label$9 }
	CALL $55(*(($5 + [20])))
	
.LABEL $label$9
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [976])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1024])
	$4 = *($0 + [24])
	$5 = ($0 + [28])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$2 = *($1)
	$8 = ([0] - $4)
	$10 = ($9 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$1 }
	$9 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)$4), [1088])
	$8 = ($9 + [-24])
	$3 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = *($9)
	*($9) = [0]
	$4 = *($8)
	*($8) = $10
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$7 }
	$7 = ($4 + [28])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$9 }
	$6 = ([0] - $5)
	$10 = ($10 + [-40])
	
.LOOP $label$10:
	if ( ((*(($10 + [12])) & [1]) == 0) ){ goto $label$11 }
	CALL $55(*(($10 + [20])))
	
.LABEL $label$11
	if ( ((*($10) & [1]) == 0) ){ goto $label$12 }
	CALL $55(*(($10 + [8])))
	
.LABEL $label$12
	$10 = ($10 + [-64])
	if ( ((int_32)($10 + $6) != (int_32)[-40]) ){ goto $label$10 }
	$10 = *(($4 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$10 = $5
	
.LABEL $label$8
	*($7) = $5
	CALL $55($10)
	
.LABEL $label$7
	CALL $55($4)
	
.LABEL $label$6
	*($8 + [8]) = *($9 + [8])
	*(($8 + [16])) = *(($9 + [16]))
	$8 = ($8 + [24])
	$9 = ($9 + [24])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$5 }
	$9 = *(($0 + [28]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$15 }
	$3 = ($4 + [28])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$17 }
	$6 = ([0] - $5)
	$10 = ($10 + [-40])
	
.LOOP $label$18:
	if ( ((*(($10 + [12])) & [1]) == 0) ){ goto $label$19 }
	CALL $55(*(($10 + [20])))
	
.LABEL $label$19
	if ( ((*($10) & [1]) == 0) ){ goto $label$20 }
	CALL $55(*(($10 + [8])))
	
.LABEL $label$20
	$10 = ($10 + [-64])
	if ( ((int_32)($10 + $6) != (int_32)[-40]) ){ goto $label$18 }
	$10 = *(($4 + [24]))
	goto $label$16 
	
.LABEL $label$17
	$10 = $5
	
.LABEL $label$16
	*($3) = $5
	CALL $55($10)
	
.LABEL $label$15
	CALL $55($4)
	
.LABEL $label$14
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC _ZN12eoscrashmain7cashoutENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL require_auth(*($0 + [8]))
	$2 = *($0 + [8])
	$3 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [56])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$5), [304])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)5037744192915243008, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $8($5, $7)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$5), [304])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [752])
	CALL eosio_assert((*($6 + [36]) == 0), [784])
	CALL eosio_assert($7, [896])
	CALL eosio_assert($7, [944])
	$7 = CALL db_next_i64(*($6 + [52]), ($8 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	CALL $8($5, $7)
	
.LABEL $label$5
	CALL $29($5, $6)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [528])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $22($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [512])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $21($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $57($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $54($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $57($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $55($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $56($7)
	return (unreachable)
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [512])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [512])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $54($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $58($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $55($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZN12eoscrashmain4joinEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_ (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [96])
	*([0] + [4]) = $14
	*($14 + [8]) = $1
	CALL require_auth($1)
	$12 = ($0 + [16])
	$11 = [0]
	$13 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)-4161326055690338304, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $6($12, $13)
	
.LABEL $label$1
	*($14 + [4]) = $11
	*($14) = $12
	$13 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($13, [32])
	CALL eosio_assert((*($11 + [8]) == 0), [64])
	CALL eosio_assert($13, [80])
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$12), [128])
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$2()), [176])
	*($11 + [16]) = ((int_64)*($11 + [16]) + (int_64)1)
	$1 = *($11)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($11 + [56]))), [640])
	$7 = ((int_64)*($11 + [48]) + (int_64)*($2))
	*($11 + [48]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [688])
	CALL eosio_assert(((int_64)*($11 + [48]) < (int_64)4611686018427387904), [720])
	CALL eosio_assert(((int_64)$1 == (int_64)*($11)), [240])
	*($14 + [88]) = (($14 + [16]) + [60])
	*($14 + [84]) = ($14 + [16])
	*($14 + [80]) = ($14 + [16])
	CALL $7(($14 + [80]), $11)
	CALL db_update_i64(*($11 + [68]), (int_64)0, ($14 + [16]), [60])
	$11 = ($0 + [32])
	if ( (uint_64)($1 <= *($11)) ){ goto $label$2 }
	*($11) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$1 = *($0 + [8])
	$9 = *(($0 + [80]))
	$13 = *(($0 + [84]))
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$3 }
	$11 = ($13 + [-24])
	$8 = ([0] - $9)
	
.LOOP $label$4:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$3 }
	$13 = $11
	$12 = ($11 + [-24])
	$11 = $12
	if ( ((int_32)($12 + $8) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$5 = ($0 + [56])
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$6 }
	$10 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$5), [304])
	goto $label$5 
	
.LABEL $label$6
	$10 = [0]
	$11 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)5037744192915243008, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $8($5, $11)
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$5), [304])
	
.LABEL $label$5
	$11 = [0]
	$6 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($6, [752])
	CALL eosio_assert((*($10 + [36]) == 0), [784])
	CALL eosio_assert(((uint_64)((int_64)*($10 + [16]) + (int_64)*($10 + [8])) >= (uint_64)((int_64)((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [816])
	$12 = *($10 + [24])
	$8 = ($10 + [28])
	if ( ((int_32)*($8) == (int_32)$12) ){ goto $label$7 }
	$9 = ($10 + [24])
	$13 = [0]
	
.LOOP $label$8:
	CALL eosio_assert(((int_64)*(($12 + $11)) != (int_64)*($14 + [8])), [864])
	$11 = ($11 + [64])
	$12 = *($9)
	$13 = ($13 + [1])
	if ( ($13 <= int_32((*($8) - $12) >> [6])) ){ goto $label$8 }
	
.LABEL $label$7
	$1 = *(($0 + [8]))
	*($14 + [20]) = $2
	*($14 + [24]) = $3
	*($14 + [28]) = $4
	*($14 + [16]) = ($14 + [8])
	*($14 + [32]) = $14
	CALL eosio_assert($6, [80])
	CALL $26($5, $10, $1, ($14 + [16]))
	*([0] + [4]) = ($14 + [96])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $54(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $55($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $55($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [4])
	$2 = int_32(($4 - $5) >> [6])
	$7 = ($2 + [1])
	if ( ((uint_32)$7 >= (uint_32)[67108864]) ){ goto $label$3 }
	$3 = [67108863]
	$6 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($6 >> [6]) > (uint_32)[33554430]) ){ goto $label$5 }
	$3 = int_32($6 >> [5])
	$3 = ( $7 ? $3 : ($3 <= $7) )
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[67108864]) ){ goto $label$2 }
	
.LABEL $label$5
	$6 = CALL $54(($3 << [6]))
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $58($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($7 = ($6 + ($2 << [6])))) = *($1)
	*(($7 + [16])) = *(($1 + [16]))
	*(($7 + [8])) = *(($1 + [8]))
	$2 = ($1 + [32])
	*(($7 + [32])) = *($2)
	*($7 + [24 align=4]) = *($1 + [24 align=4])
	*($1 + [24]) = [0]
	*(($1 + [28])) = [0]
	*($2) = [0]
	$2 = ($1 + [44])
	*(($7 + [44])) = *($2)
	*($7 + [36 align=4]) = *($1 + [36 align=4])
	*($1 + [36]) = [0]
	*(($1 + [40])) = [0]
	*($2) = [0]
	*(($7 + [56])) = *(($1 + [56]))
	*($7 + [48]) = *($1 + [48])
	$6 = ($6 + ($3 << [6]))
	$2 = ($7 + [64])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	$3 = ([0] - $5)
	$1 = ($4 + [-32])
	
.LOOP $label$8:
	*(($7 + [-48])) = *(($1 + [-16]))
	*(($7 + [-56])) = *(($1 + [-24]))
	*(($7 + [-64])) = *(($1 + [-32]))
	*(($7 + [-32])) = *($1)
	$4 = ($1 + [-8])
	*(($7 + [-40])) = *($4)
	*($4) = [0]
	*(($1 + [-4])) = [0]
	*($1) = [0]
	$4 = ($1 + [12])
	*(($7 + [-20])) = *($4)
	$5 = ($1 + [4])
	*(($7 + [-28])) = *($5)
	*($5) = [0]
	*(($1 + [8])) = [0]
	*($4) = [0]
	*(($7 + [-8])) = *(($1 + [24]))
	*(($7 + [-16])) = *(($1 + [16]))
	$7 = ($7 + [-64])
	$1 = ($1 + [-64])
	if ( ((int_32)($1 + $3) != (int_32)[-32]) ){ goto $label$8 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$5 = $4
	
.LABEL $label$6
	*($0) = $7
	*(($0 + [4])) = $2
	*(($0 + [8])) = $6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$9 }
	$7 = ([0] - $5)
	$1 = ($4 + [-40])
	
.LOOP $label$10:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$11 }
	CALL $55(*(($1 + [20])))
	
.LABEL $label$11
	if ( ((*($1) & [1]) == 0) ){ goto $label$12 }
	CALL $55(*(($1 + [8])))
	
.LABEL $label$12
	$1 = ($1 + [-64])
	if ( ((int_32)($1 + $7) != (int_32)[-40]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$13 }
	CALL $55($5)
	
.LABEL $label$13
	(unreachable)
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [128])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [176])
	$4 = *($1)
	*(($9 = $10)) = *(*($3))
	$6 = *($3 + [4])
	*(($9 + [20])) = *(($6 + [12]))
	*(($7 = ($9 + [16]))) = *(($6 + [8]))
	*(($9 + [12])) = *(($6 + [4]))
	*($9 + [8]) = *($6)
	$5 = ($9 + [24])
	CALL $59($5, *($3 + [8]))
	$6 = ($9 + [36])
	CALL $59($6, *($3 + [12]))
	*($9 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($9 + [56]) = *(*(*($3 + [16]) + [4]) + [16])
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($3) = *($9)
	*(($3 + [16])) = *($7)
	*(($3 + [8])) = *(($9 + [8]))
	*(($3 + [32])) = *(($5 + [8]))
	*($3 + [24 align=4]) = *($5)
	*($5) = [0]
	*(($9 + [28])) = [0]
	*(($9 + [32])) = [0]
	*(($3 + [44])) = *(($6 + [8]))
	*($3 + [36 align=4]) = *($6)
	*(($9 + [40])) = [0]
	*($6) = [0]
	*(($9 + [44])) = [0]
	$6 = ($9 + [48])
	*(($3 + [56])) = *(($6 + [8]))
	*($3 + [48]) = *($6)
	*($8) = (*($8) + [64])
	goto $label$1 
	
.LABEL $label$2
	CALL $27(($1 + [24]), $9)
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL $55(*(($9 + [44])))
	
.LABEL $label$1
	if ( ((*(($9 + [24])) & [1]) == 0) ){ goto $label$3 }
	CALL $55(*(($9 + [32])))
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [240])
	*($9) = [24]
	*(($3 = CALL $12($9, ($1 + [24])))) = (*($3) + [9])
	$6 = *($9)
	if ( ($6 <= [513]) ){ goto $label$5 }
	$3 = CALL malloc($6)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$4
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($3 + $6)
	CALL $13($9, $1)
	CALL db_update_i64(*($1 + [52]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$6 }
	CALL free($3)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $59(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $59(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $55(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $55(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [512])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $20(*($1), ($0 + [32]))
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [512])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $20(*($1), ($0 + [32]))
	CALL $20(*($1), ($0 + [44]))
	CALL $20(*($1), ($0 + [56]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [72]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$6 }
	$5 = ($2 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$4 = ([0] - $3)
	$7 = ($7 + [-40])
	
.LOOP $label$9:
	if ( ((*(($7 + [12])) & [1]) == 0) ){ goto $label$10 }
	CALL $55(*(($7 + [20])))
	
.LABEL $label$10
	if ( ((*($7) & [1]) == 0) ){ goto $label$11 }
	CALL $55(*(($7 + [8])))
	
.LABEL $label$11
	$7 = ($7 + [-64])
	if ( ((int_32)($7 + $4) != (int_32)[-40]) ){ goto $label$9 }
	$7 = *(($2 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $3
	
.LABEL $label$7
	*($5) = $3
	CALL $55($7)
	
.LABEL $label$6
	CALL $55($2)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $55($7)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [128])
	*([0] + [4]) = $4
	*(($5 = $4) + [92]) = $0
	*($5 + [80]) = *($1)
	*($5 + [84]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [608])
	*(($5 + [40])) = (int_64)0
	*(($5 + [48])) = (int_64)0
	*(($5 + [64])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [100]) = $0
	*($5 + [96]) = $0
	*($5 + [104]) = ($0 + $2)
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = $5
	CALL $43(($5 + [120]), ($5 + [112]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [100]) = ($5 + [80])
	*($5 + [96]) = ($5 + [92])
	CALL $44(($5 + [96]), $5)
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL $55(*(($5 + [64])))
	
.LABEL $label$10
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL $55(*(($5 + [52])))
	
.LABEL $label$11
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $55(*(($5 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($5 + [128])
	return [1]
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [512])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $59(($7 + [32]), ($1 + [12]))
	*(($5 = (($7 + [16]) + [8]))) = *(($1 + [32]))
	*($7 + [16]) = *($1 + [24])
	$4 = *($1 + [40])
	*((($7 + [48]) + [8])) = *($5)
	*($7 + [48]) = *($7 + [16])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $59(($7 + [80]), ($7 + [32]))
	$6 = *((($7 + [48]) + [8]))
	*((($7 + [64]) + [8])) = $6
	*(($7 + [8])) = $6
	$6 = *($7 + [48])
	*($7 + [64]) = $6
	*($7) = $6
	CALL void $0((int_32 $2), (int_64 $3), (int_32 ($7 + [80])), (int_32 $7), (int_32 $4), (int_64 $1))
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$2 }
	CALL $55(*($7 + [88]))
	
.LABEL $label$2
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $55(*($7 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [512])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [512])
	CALL memcpy(($0 + [8]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $20(*($1), ($0 + [12]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [512])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$8 = (*(*($0)) + int_32($9 >> [1]))
	$0 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	*(($9 = (($10 + [64]) + [8]))) = *(($3 + [8]))
	*($10 + [64]) = *($3)
	CALL $59(($10 + [48]), $4)
	CALL $59(($10 + [32]), $5)
	CALL $59(($10 + [16]), $6)
	*(($10 + [8])) = *($9)
	*($10) = *($10 + [64])
	CALL void $8((int_32 $1), (int_64 $2), (int_64 $10), (int_32 ($10 + [48])), (int_32 ($10 + [32])), (int_32 ($10 + [16])), (int_32 $7), (int_64 $0))
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $55(*($10 + [24]))
	
.LABEL $label$2
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $55(*($10 + [40]))
	
.LABEL $label$3
	if ( ((*($10 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $55(*($10 + [56]))
	
.LABEL $label$4
	*([0] + [4]) = ($10 + [80])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*(($6 + [76])) = *(($1 + [28]))
	*(($2 = (($6 + [64]) + [8]))) = *(($1 + [24]))
	*($6 + [64]) = *($1 + [16])
	*($6 + [68]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$4 = *($1)
	CALL $59(($6 + [48]), ($1 + [32]))
	CALL $59(($6 + [32]), ($1 + [44]))
	CALL $59(($6 + [16]), ($1 + [56]))
	$5 = *($1 + [72])
	*(($6 + [8])) = *($2)
	*($6) = *($6 + [64])
	CALL $45($0, $4, $3, $6, ($6 + [48]), ($6 + [32]), ($6 + [16]), $5)
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $55(*($6 + [24]))
	
.LABEL $label$1
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $55(*($6 + [40]))
	
.LABEL $label$2
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $55(*($6 + [56]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [80])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $52($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9840])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($4 = CALL $54([64])) + [32]) = [0]
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [48]) = $0
	CALL $16(($8 + [32]), $4)
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$7 = *($4 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($8 + [24]) = [0]
	*($6) = $4
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $10(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [24])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [28])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$7 = ([0] - $3)
	$6 = ($6 + [-40])
	
.LOOP $label$13:
	if ( ((*(($6 + [12])) & [1]) == 0) ){ goto $label$14 }
	CALL $55(*(($6 + [20])))
	
.LABEL $label$14
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $55(*(($6 + [8])))
	
.LABEL $label$15
	$6 = ($6 + [-64])
	if ( ((int_32)($6 + $7) != (int_32)[-40]) ){ goto $label$13 }
	$6 = *(($1 + [24]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $55($6)
	
.LABEL $label$10
	CALL $55($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$6 = *($0 + [4])
	*($1) = *(*($6) + [8])
	$2 = *($0)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($6 + [4])
	*($1 + [36]) = [0]
	*($1 + [16]) = *($3)
	*($1 + [40]) = *(*(*($6 + [8]) + [4]) + [24])
	*(($6 = $5)) = [24]
	*(($3 = CALL $12($6, ($1 + [24])))) = (*($3) + [9])
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $13($6, $1)
	$4 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)5037744192915243008, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [480])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $54([80])) + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [544])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [608])
	*($4 + [64]) = $0
	CALL $23(($8 + [32]), $4)
	*($4 + [68]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $24($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $55($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN12eoscrashmain6createEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	*($7 + [16]) = $1
	CALL require_auth(*($0 + [8]))
	$4 = ($0 + [16])
	$5 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)-4161326055690338304, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $6($4, $6)
	
.LABEL $label$1
	*($7 + [12]) = $5
	*($7 + [8]) = $4
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [32])
	CALL eosio_assert((*($5 + [8]) == 0), [64])
	CALL eosio_assert($6, [80])
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$4), [128])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$2()), [176])
	*($5 + [24]) = ((int_64)*($5 + [24]) + (int_64)1)
	$1 = *($5)
	CALL eosio_assert([1], [240])
	*($7 + [120]) = (($7 + [48]) + [60])
	*($7 + [116]) = ($7 + [48])
	*($7 + [112]) = ($7 + [48])
	CALL $7(($7 + [112]), $5)
	CALL db_update_i64(*($5 + [68]), (int_64)0, ($7 + [48]), [60])
	$5 = ($0 + [32])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$2 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$1 = *(($0 + [8]))
	$2 = *(($0 + [80]))
	$6 = *(($0 + [84]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$3 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$4:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$3 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$4 = ($0 + [56])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$4), [304])
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)5037744192915243008, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $8($4, $6)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$4), [304])
	
.LABEL $label$5
	CALL eosio_assert(($5 == 0), [368])
	$1 = *(($0 + [8]))
	*($7 + [112]) = $0
	*($7 + [116]) = ($7 + [16])
	*($7 + [120]) = ($7 + [8])
	*($7 + [40]) = $1
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [400])
	*($7 + [48]) = $4
	*($7 + [52]) = ($7 + [112])
	*($7 + [56]) = ($7 + [40])
	*(($5 = CALL $54([64])) + [32]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [48]) = $4
	CALL $9(($7 + [48]), $5)
	*($7 + [32]) = $5
	$1 = *($5)
	*($7 + [48]) = $1
	$6 = *($5 + [52])
	*($7 + [28]) = $6
	$3 = ($0 + [84])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [88]))) ){ goto $label$8 }
	*($4 + [8]) = $1
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($3) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $10(($0 + [80]), ($7 + [32]), ($7 + [48]), ($7 + [28]))
	
.LABEL $label$7
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	$6 = *($0 + [24])
	if ( ($6 == 0) ){ goto $label$10 }
	$3 = ($0 + [28])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$12 }
	$4 = ([0] - $6)
	$5 = ($5 + [-40])
	
.LOOP $label$13:
	if ( ((*(($5 + [12])) & [1]) == 0) ){ goto $label$14 }
	CALL $55(*(($5 + [20])))
	
.LABEL $label$14
	if ( ((*($5) & [1]) == 0) ){ goto $label$15 }
	CALL $55(*(($5 + [8])))
	
.LABEL $label$15
	$5 = ($5 + [-64])
	if ( ((int_32)($5 + $4) != (int_32)[-40]) ){ goto $label$13 }
	$5 = *(($0 + [24]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $6
	
.LABEL $label$11
	*($3) = $6
	CALL $55($5)
	
.LABEL $label$10
	CALL $55($0)
	
.LABEL $label$9
	*([0] + [4]) = ($7 + [128])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $15(CALL $15($0, ($1 + [24])), ($1 + [36]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [464])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [464])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [512])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $17($0, ($1 + [24]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [512])
	CALL memcpy(($1 + [36]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [512])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [528])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = int_32(($5 - $3) >> [6])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $18($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ($4 << [6])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-40])
	
.LOOP $label$5:
	if ( ((*(($4 + [12])) & [1]) == 0) ){ goto $label$6 }
	CALL $55(*(($4 + [20])))
	
.LABEL $label$6
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL $55(*(($4 + [8])))
	
.LABEL $label$7
	$4 = ($4 + [-64])
	if ( ((int_32)($4 + $7) != (int_32)[-40]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $19($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $54(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $11(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$1 }
	$5 = ($0 + [8])
	
.LOOP $label$2:
	$7 = ($7 + [-24])
	*($5) = $7
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$4 }
	$6 = ($2 + [28])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$4 = ([0] - $3)
	$7 = ($7 + [-40])
	
.LOOP $label$7:
	if ( ((*(($7 + [12])) & [1]) == 0) ){ goto $label$8 }
	CALL $55(*(($7 + [20])))
	
.LABEL $label$8
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	CALL $55(*(($7 + [8])))
	
.LABEL $label$9
	$7 = ($7 + [-64])
	if ( ((int_32)($7 + $4) != (int_32)[-40]) ){ goto $label$7 }
	$7 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$7 = $3
	
.LABEL $label$5
	*($6) = $3
	CALL $55($7)
	
.LABEL $label$4
	CALL $55($2)
	
.LABEL $label$3
	$7 = *($5)
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$10 }
	CALL $55($7)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$5 = *($1)
	$2 = *($1 + [4])
	$6 = (CASTING uint_64)(uint_32 int_32(($2 - $5) >> [6]))
	$1 = *($0)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($0) = $1
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$1 = ($1 + [24])
	*($0) = $1
	$3 = *($5 + [24])
	$4 = ($5 + [28])
	$6 = (CASTING uint_64)(uint_32 ( *($4) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	*($0) = $1
	$4 = *(($5 + [24]))
	$4 = ( *($4) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$5 }
	$1 = ($4 + $1)
	*($0) = $1
	
.LABEL $label$5
	$3 = *($5 + [36])
	$4 = ($5 + [40])
	$6 = (CASTING uint_64)(uint_32 ( *($4) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	*($0) = $1
	$4 = *(($5 + [36]))
	$4 = ( *($4) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($4 + $1)
	*($0) = $1
	
.LABEL $label$7
	$1 = ($1 + [16])
	*($0) = $1
	$5 = ($5 + [64])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$6 = (*($0 + [4]) + [8])
	*($0 + [4]) = $6
	$5 = (CASTING uint_64)(uint_32 int_32((*(($1 + [28])) - *($1 + [24])) >> [6]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$3 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) > (int_32)[0]), [464])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *(($1 + [28]))
	$4 = *(($1 + [24]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $14($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$3 }
	$6 = *(($0 + [4]))
	
.LABEL $label$2
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[0]), [464])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [36]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [464])
	CALL memcpy(*($4), ($1 + [40]), [8])
	*($4) = (*($4) + [8])
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [512])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $20(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $59(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $59(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $55(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $55(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $55(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$4 = *($0 + [4])
	*($1) = (int_64)0
	$4 = *($4)
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = *($4)
	$2 = *($0)
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [608])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = (int_64)0
	$5 = $7
	$4 = ($5 + [-64])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($5 + [-4])
	CALL $7($6, $1)
	$3 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)-4161326055690338304, *(*($0 + [8])), $3, $4, [60])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [192])
	*([0] + [4]) = $11
	*([0] + [16]) = $1
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1312]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1328]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [1344])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1312]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1408]
	$9 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$27 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$22 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1296]
	$9 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$33 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$33
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$29
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$28 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$14 }
	
.LABEL $label$15
	*($11 + [96]) = $0
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [1424]
	$9 = (int_64)0
	
.LOOP $label$34:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$35 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$3 = ($3 + [165])
	goto $label$36 
	
.LABEL $label$37
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$35
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$34 }
	*(($11 + [120])) = $0
	*(($11 + [128])) = (int_64)-1
	*(($11 + [136])) = (int_64)0
	*(($11 + [144])) = [0]
	*($11 + [112]) = $0
	*($11 + [104]) = $9
	*($11 + [152]) = $0
	*(($11 + [160])) = $0
	*(($11 + [168])) = (int_64)-1
	*(($11 + [176])) = [0]
	*(($11 + [180])) = [0]
	*(($11 + [184])) = [0]
	if ( ((int_64)$2 > (int_64)4229753268491780095) ){ goto $label$43 }
	if ( ((int_64)$2 == (int_64)-4812882902415048704) ){ goto $label$42 }
	if ( ((int_64)$2 == (int_64)-4417031915819761664) ){ goto $label$40 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$38 }
	*($11 + [76]) = [0]
	*($11 + [72]) = [1]
	*($11 + [16 align=4]) = *($11 + [72])
	CALL $38(($11 + [96]), ($11 + [16]))
	goto $label$38 
	
.LABEL $label$43
	if ( ((int_64)$2 == (int_64)4229753268491780096) ){ goto $label$41 }
	if ( ((int_64)$2 == (int_64)4733523361999618048) ){ goto $label$39 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$38 }
	*($11 + [92]) = [0]
	*($11 + [88]) = [2]
	*($11) = *($11 + [88])
	CALL $36(($11 + [96]), $11)
	goto $label$38 
	
.LABEL $label$42
	*($11 + [68]) = [0]
	*($11 + [64]) = [3]
	*($11 + [24 align=4]) = *($11 + [64])
	CALL $39(($11 + [96]), ($11 + [24]))
	goto $label$38 
	
.LABEL $label$41
	*($11 + [52]) = [0]
	*($11 + [48]) = [4]
	*($11 + [40 align=4]) = *($11 + [48])
	CALL $41(($11 + [96]), ($11 + [40]))
	goto $label$38 
	
.LABEL $label$40
	*($11 + [60]) = [0]
	*($11 + [56]) = [5]
	*($11 + [32 align=4]) = *($11 + [56])
	CALL $40(($11 + [96]), ($11 + [32]))
	goto $label$38 
	
.LABEL $label$39
	*($11 + [84]) = [0]
	*($11 + [80]) = [6]
	*($11 + [8 align=4]) = *($11 + [80])
	CALL $37(($11 + [96]), ($11 + [8]))
	
.LABEL $label$38
	CALL $42(($11 + [176]))
	$4 = *(($11 + [136]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [140])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$45 }
	
.LOOP $label$46:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$47 }
	CALL $55($3)
	
.LABEL $label$47
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$46 }
	$6 = *(($11 + [136]))
	goto $label$44 
	
.LABEL $label$45
	$6 = $4
	
.LABEL $label$44
	*($5) = $4
	CALL $55($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [192])
}

void .FUNC _ZN12eoscrashmain6betlogEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_y (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7)
{
	CALL require_auth(*($0 + [8]))
	CALL require_recipient($2)
}

void .FUNC _ZN12eoscrashmain6setstsEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	*($8 + [16]) = $1
	CALL require_auth(*($0 + [8]))
	$2 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( (int_64)(*(*($5)) == 0) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$3), [304])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4161326055690338304, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $6($3, $5)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$3), [304])
	
.LABEL $label$5
	CALL eosio_assert([1], [80])
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$3), [128])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [176])
	*($5 + [8]) = $1
	$7 = *($5)
	CALL eosio_assert([1], [240])
	*($8 + [104]) = (($8 + [32]) + [60])
	*($8 + [100]) = ($8 + [32])
	*($8 + [96]) = ($8 + [32])
	CALL $7(($8 + [96]), $5)
	CALL db_update_i64(*($5 + [68]), (int_64)0, ($8 + [32]), [60])
	$5 = ($0 + [32])
	if ( (uint_64)($7 <= *($5)) ){ goto $label$3 }
	*($5) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$4
	$7 = *(($0 + [8]))
	*($8 + [8]) = ($8 + [16])
	*($8 + [96]) = $7
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [400])
	*($8 + [32]) = $3
	*($8 + [36]) = ($8 + [8])
	*($8 + [40]) = ($8 + [96])
	*(($4 = CALL $54([80])) + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [544])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [608])
	*($4 + [64]) = $3
	CALL $34(($8 + [32]), $4)
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [68])
	*($8 + [20]) = $6
	$3 = ($0 + [44])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [48]))) ){ goto $label$13 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($3) = ($5 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $24(($0 + [40]), ($8 + [24]), ($8 + [32]), ($8 + [20]))
	
.LABEL $label$12
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $55($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [112])
}

void .FUNC _ZN12eoscrashmain8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [1152])
	CALL require_auth($1)
	$7 = [0]
	$5 = *($3)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [1184])
	CALL eosio_assert(((int_64)$5 > (int_64)0), [1216])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$7 }
	$8 = uint_32($8 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($8 <= [257]), [1264])
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$8 }
	$6 = *([0] + [16])
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1296]
	$11 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$14 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$7 = ($7 + [165])
	goto $label$12 
	
.LABEL $label$14
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$10
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$9 }
	if ( ((int_64)$6 != (int_64)$11) ){ goto $label$8 }
	if ( ((int_64)*($0 + [8]) != (int_64)$2) ){ goto $label$8 }
	if ( ((uint_64)((int_64)$5 + (int_64)-1000) > (uint_64)(int_64)49000) ){ goto $label$8 }
	*(($8 = (($13 + [48]) + [8]))) = *(($3 + [8]))
	*($13 + [48]) = *($3)
	CALL $59(($13 + [32]), $4)
	CALL $59(($13 + [16]), $4)
	*(($13 + [8])) = *($8)
	*($13) = *($13 + [48])
	CALL _ZN12eoscrashmain4joinEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_($0, $1, $13, ($13 + [32]), ($13 + [16]))
	if ( ((*($13 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $55(*($13 + [24]))
	
.LABEL $label$15
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $55(*($13 + [40]))
	
.LABEL $label$8
	*([0] + [4]) = ($13 + [64])
}

void .FUNC _ZN12eoscrashmain5roundEymNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5eosio5assetEy (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5)
{
	CALL require_auth(*($0 + [8]))
}

void .FUNC $58 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $54($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $61 ()
{
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $51([1440], $0)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [608])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $48(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $49(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $55(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9926]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9928])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9926]) = [1]
	$7 = ($7 << [16])
	*([0] + [9928]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9928])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9928]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9926]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9926]) = [1]
	$3 = ($3 << [16])
	*([0] + [9928]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9928])
	
.LABEL $label$8
	*([0] + [9928]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9824])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9632]
	$1 = (((int_32)$2 * (int_32)[12]) + [9632])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9932])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $55 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $56 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $54(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $55($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}