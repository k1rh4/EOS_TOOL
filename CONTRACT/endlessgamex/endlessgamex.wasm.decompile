(data (i32.const 16908) "EOS6iPGxt9McG4S8gnUTgDn2foHdMexbfCb3PYqyxkJYzLqpgywe8\00")
(data (i32.const 16962) "endless.game\00")
(data (i32.const 16975) "invalid token account\00")
(data (i32.const 16997) "invalid symbol\00")
(data (i32.const 17012) "invalid min bet quantity\00")
(data (i32.const 17037) "invalid house edge\00")
(data (i32.const 17056) "invalid dividend\00")
(data (i32.const 17073) "invalid profit\00")
(data (i32.const 17088) "invalid max bonus\00")
(data (i32.const 17106) "invalid et\00")
(data (i32.const 17117) "unable to find key\00")
(data (i32.const 17136) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17187) "error reading iterator\00")
(data (i32.const 17210) "read\00")
(data (i32.const 17215) "cannot create objects in table of another contract\00")
(data (i32.const 17266) "write\00")
(data (i32.const 17272) "cannot pass end iterator to modify\00")
(data (i32.const 17307) "object passed to modify is not in multi_index\00")
(data (i32.const 17353) "cannot modify objects in table of another contract\00")
(data (i32.const 17404) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17463) "cannot pass end iterator to erase\00")
(data (i32.const 17497) "cannot increment end iterator\00")
(data (i32.const 17527) "object passed to erase is not in multi_index\00")
(data (i32.const 17572) "cannot erase objects in table of another contract\00")
(data (i32.const 17622) "attempt to remove object that was not in multi_index\00")
(data (i32.const 17675) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$4 (param i32 i32 i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "is_account" (func $fimport$6 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$10 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$11 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$13 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$19 (param i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$32 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$33 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$36 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$38 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$39 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$40 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $10))
(export "_ZdlPv" (func $18))
(export "_Znwj" (func $16))
(export "_Znaj" (func $17))
(export "_ZdaPv" (func $19))
(export "_ZnwjSt11align_val_t" (func $20))
(export "_ZnajSt11align_val_t" (func $21))
(export "_ZdlPvSt11align_val_t" (func $22))
(export "_ZdaPvSt11align_val_t" (func $23))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $3 $7 $1 $2)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17761))
(global $global$2 i32 (i32.const 17761))


int_32 .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $35 (int_32 $0)
{
	return CALL $36([8512], $0)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $31([8228])
	$3 = *([0] + [8236])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8240])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8244]
	*([0] + [8236]) = [8244]
	$4 = *([0] + [8240])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $38([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8236])
	*([0] + [8236]) = $3
	*([0] + [8240]) = [0]
	
.LABEL $label$2
	*([0] + [8240]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $32([8228])
	return [0]
	
.LABEL $label$1
	CALL $32([8228])
	return [-1]
}

void .FUNC $25 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $26())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $34($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $24 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $32 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)(uint_64)*(*($6)) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$1), [17136])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)5445041967611772928, $2)
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), $3)
	$6 = CALL $4($1, $6)
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$1), [17136])
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [17527])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [17572])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((uint_64)((int_64)*(*(($6 + [-24]))) ^ (int_64)$7) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((uint_64)((int_64)*(*($9)) ^ (int_64)$7) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [17622])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [56]))
	$6 = *($1 + [60])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5445041967611772928, ($2 + [8]), (uint_64)*($1) >> (uint_64)(int_64)8)
	if ( ((int_32)$6) < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $25($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth((int_64)6112252634446868640)
	$3 = *($1 + [8])
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	*($2 + [52]) = [0]
	$4 = *($0)
	*($2 + [16]) = $4
	*($2 + [24]) = $4
	CALL $8(($2 + [8]), ($2 + [16]), (uint_64)$3 >> (uint_64)(int_64)8), [17117])
	$3 = *($2 + [8])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$1 = ((int_32)$0) != (int_32)[0]
	CALL eosio_assert($1), [17463])
	CALL eosio_assert($1, [17497])
	$1 = CALL db_next_i64(*($0 + [56]), ($2 + [56]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL $4((CASTING uint_32)(uint_64 $3), $1)
	
.LABEL $label$1
	CALL $9(($2 + [16]), $0)
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17187])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $35($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [52]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [36])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [44])
	*($3 + [60]) = ($5 + [48])
	CALL $14(($3 + [32]), ($3 + [24]))
	*($5 + [60]) = [-1]
	*($5 + [56]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $39($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = *(*($0))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17266])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17266])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17266])
	CALL memcpy(*($3 + [4]), $4, [8])
	$5 = (*($3 + [4]) + [8])
	*($3 + [4]) = $5
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($3 + [8]) - $5) > (int_32)[7]), [17266])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17266])
	CALL memcpy(*($3 + [4]), $4, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$4 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17266])
	CALL memcpy(*($3 + [4]), $4, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$4 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17266])
	CALL memcpy(*($3 + [4]), $4, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$4 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17266])
	CALL memcpy(*($3 + [4]), $4, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [17266])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $2 (int_32 $0)
{
	if ( ((*([0] + [8204]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8212]))
	
.LABEL $label$1
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$8 = ($global$0 - [176])
	$global$0 = $8
	CALL require_auth((int_64)6112252634446868640)
	$9 = *($2 + [8])
	CALL eosio_assert(CALL $fimport$6(*($1)), [16975])
	$10 = [0]
	$11 = (uint_64)$9 >> (uint_64)(int_64)8
	$12 = $11)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$12 = $13
	$14 = [1]
	$15 = $10
	$10 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$12 = $13
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$14 = ((int_32)$10 < (int_32)[6])
	$15 = ($10 + [1])
	$10 = $15
	if ( $14 ){ goto $label$5 }
	$14 = [1]
	$10 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	CALL eosio_assert($14, [16997])
	$14 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$12 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $13
	$14 = [1]
	$15 = $10
	$10 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$12 = $13
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$14 = ((int_32)$10 < (int_32)[6])
	$15 = ($10 + [1])
	$10 = $15
	if ( $14 ){ goto $label$10 }
	$14 = [1]
	$10 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$14 = [0]
	
.LABEL $label$6
	CALL eosio_assert($14, [17012])
	CALL eosio_assert((($3 + [-1]) <= [1000]), [17037])
	CALL eosio_assert((($4 + [-1]) <= [1000]), [17056])
	CALL eosio_assert((($5 + [-1]) <= [1000]), [17073])
	CALL eosio_assert((($6 + [-1]) <= [1000]), [17088])
	CALL eosio_assert([1], [17106])
	*((($8 + [8]) + [32])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	*($8 + [44]) = [0]
	$12 = *($0)
	*($8 + [8]) = $12
	*($8 + [16]) = $12
	$10 = CALL db_find_i64($12, $12, (int_64)5445041967611772928, $11)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$14 }
	$10 = CALL $4(($8 + [8]), $10)
	CALL eosio_assert(((int_32)*($10 + [52]) == (int_32)($8 + [8])), [17136])
	$12 = *($0)
	CALL eosio_assert([1], [17272])
	CALL eosio_assert(((int_32)*($10 + [52]) == (int_32)($8 + [8])), [17307])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$8()), [17353])
	$14 = ($10 + [8])
	*($8 + [112]) = *($14)
	*($14) = *($1)
	*(($10 + [24])) = *(($2 + [8]))
	*($10 + [16]) = *($2)
	*($10 + [32]) = $3
	*($10 + [36]) = $4
	*($10 + [40]) = $5
	*($10 + [44]) = $6
	*($10 + [48]) = $7
	$13 = *($10)
	CALL eosio_assert([1], [17404])
	*($8 + [136]) = (($8 + [48]) + [52])
	*($8 + [132]) = ($8 + [48])
	*($8 + [128]) = ($8 + [48])
	*($8 + [120]) = ($8 + [128])
	*($8 + [148]) = $14
	*($8 + [144]) = $10
	*($8 + [152]) = ($10 + [16])
	*($8 + [156]) = ($10 + [32])
	*($8 + [160]) = ($10 + [36])
	*($8 + [164]) = ($10 + [40])
	*($8 + [168]) = ($10 + [44])
	*($8 + [172]) = ($10 + [48])
	CALL $5(($8 + [144]), ($8 + [120]))
	CALL db_update_i64(*($10 + [56]), $12, ($8 + [48]), [52])
	$15 = (($8 + [8]) + [16])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( (uint_64)($13) <= *($15)) ){ goto $label$15 }
	*($15) = ((int_64)$13 + (int_64)1)
	
.LABEL $label$15
	*($8 + [144]) = *($14)
	if ( (CALL $29(($8 + [112]), ($8 + [144]), [8]) == 0) ){ goto $label$13 }
	$14 = *($10 + [60])
	if ( ((int_32)$14 > (int_32)[-1]) ){ goto $label$16 }
	$14 = CALL db_idx64_find_primary(*($8 + [8]), *(($8 + [16])), (int_64)5445041967611772928, ($8 + [120]), $13)
	*(($10 + [60])) = $14
	
.LABEL $label$16
	CALL db_idx64_update($14, $12, ($8 + [144]))
	$15 = *($8 + [32])
	if ( $15 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$13 = *($0)
	CALL eosio_assert(((int_64)$12 == (int_64)CALL $fimport$8()), [17215])
	*(($10 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [52]) = ($8 + [8])
	*($10) = $9
	*($10 + [32]) = $3
	*($10 + [36]) = $4
	*($10 + [40]) = $5
	*($10 + [44]) = $6
	*($10 + [48]) = $7
	*($10 + [8]) = *($1)
	*($10 + [16]) = *($2)
	*($10 + [24]) = *(($2 + [8]))
	*($8 + [136]) = (($8 + [48]) + [52])
	*($8 + [132]) = ($8 + [48])
	*($8 + [128]) = ($8 + [48])
	*($8 + [120]) = ($8 + [128])
	$14 = ($10 + [8])
	*($8 + [148]) = $14
	*($8 + [144]) = $10
	*($8 + [152]) = ($10 + [16])
	*($8 + [156]) = ($10 + [32])
	*($8 + [160]) = ($10 + [36])
	*($8 + [164]) = ($10 + [40])
	*($8 + [168]) = ($10 + [44])
	*($8 + [172]) = ($10 + [48])
	CALL $5(($8 + [144]), ($8 + [120]))
	$12 = (uint_64)*($10) >> (uint_64)(int_64)8
	$15 = (($8 + [8]) + [8])
	*($10 + [56]) = CALL db_store_i64(*($15), (int_64)5445041967611772928, $13, $12), ($8 + [48]), [52])
	$2 = (($8 + [8]) + [16])
	if ( (uint_64)($12 <= *($2)) ){ goto $label$17 }
	*($2) = ((int_64)$12 + (int_64)1)
	
.LABEL $label$17
	$12 = *($15)
	$9 = *($10)
	*($8 + [144]) = *($14)
	*($10 + [60]) = CALL db_idx64_store($12, (int_64)5445041967611772928, $13, (uint_64)$9 >> (uint_64)(int_64)8), ($8 + [144]))
	*($8 + [144]) = $10
	$12 = (uint_64)*($10) >> (uint_64)(int_64)8
	*($8 + [48]) = $12)
	$15 = *(($10 + [56]))
	*($8 + [128]) = $15
	$2 = ($8 + [36])
	$14 = *($2)
	if ( ((uint_32)$14 >= (uint_32)*(($8 + [40]))) ){ goto $label$19 }
	*($14 + [8]) = $12
	*($14 + [16]) = $15
	*($8 + [144]) = [0]
	*($14) = $10
	*($2) = ($14 + [24])
	$10 = *($8 + [144])
	*($8 + [144]) = [0]
	if ( $10 ){ goto $label$18 }
	goto $label$13 
	
.LABEL $label$19
	CALL $6(($8 + [32]), ($8 + [144]), ($8 + [48]), ($8 + [128]))
	$10 = *($8 + [144])
	*($8 + [144]) = [0]
	if ( ($10 == 0) ){ goto $label$13 }
	
.LABEL $label$18
	CALL _ZdlPv($10)
	
.LABEL $label$13
	$15 = *($8 + [32])
	if ( ($15 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$2 = ($8 + [36])
	$10 = *($2)
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$21 }
	
.LOOP $label$22:
	$10 = ($10 + [-24])
	$14 = *($10)
	*($10) = [0]
	if ( ($14 == 0) ){ goto $label$23 }
	CALL _ZdlPv($14)
	
.LABEL $label$23
	if ( ((int_32)$15 != (int_32)$10) ){ goto $label$22 }
	$10 = *(($8 + [32]))
	goto $label$20 
	
.LABEL $label$21
	$10 = $15
	
.LABEL $label$20
	*($2) = $15
	CALL _ZdlPv($10)
	$global$0 = ($8 + [176])
	return 
	
.LABEL $label$11
	$global$0 = ($8 + [176])
}

void .FUNC memory ()
{
	CALL $15()
}

void .FUNC $1 (int_32 $0)
{
	if ( ((*([0] + [8192]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8200]))
	
.LABEL $label$1
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17210])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17210])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17210])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17210])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17210])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17210])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17210])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17210])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [28])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [17210])
	CALL memcpy($0, *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $15 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8192 align=4]) = (int_64)0
	*([0] + [8200]) = [0]
	$0 = CALL $30([16908])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$5 }
	*([0] + [8192]) = ($0 << [1])
	$1 = [8193]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8192]) = ($2 | [1])
	*([0] + [8200]) = $1
	*([0] + [8196]) = $0
	
.LABEL $label$4
	CALL memcpy($1, [16908], $0)
	
.LABEL $label$3
	*(($1 + $0)) = [0]
	CALL $28([3], [0], [8192])
	*([0] + [8204 align=4]) = (int_64)0
	*([0] + [8212]) = [0]
	$0 = CALL $30([16962])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$8 }
	*([0] + [8204]) = ($0 << [1])
	$1 = [8205]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8204]) = ($2 | [1])
	*([0] + [8212]) = $1
	*([0] + [8208]) = $0
	
.LABEL $label$7
	CALL memcpy($1, [16962], $0)
	
.LABEL $label$6
	*(($1 + $0)) = [0]
	CALL $28([4], [0], [8192])
	return (unreachable)
	
.LABEL $label$2
	CALL $24([8192])
	
.LABEL $label$1
	CALL $24([8204])
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $35($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $35($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)-4997502822476775424) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3066762345427337216) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $11($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [20]) = [0]
	*($3 + [16]) = [2]
	*($3 + [8]) = *($3 + [16])
	CALL $12($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $27([0])
	$global$0 = ($3 + [32])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $35($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [88]))) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = [0]
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [136]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $13(($4 + [24]), ($4 + [136]))
	*(($9 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($3 = (($4 + [120]) + [8]))) = *($9)
	*($4 + [120]) = *($4 + [8])
	$10 = *($3)
	*(($9 = (($4 + [136]) + [8]))) = $10
	*(($4 + [48])) = $10
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [120])
	*($4 + [40]) = $0
	*($4 + [136]) = $0
	*($3) = *($8)
	*($4 + [120]) = *($4 + [80])
	$8 = *($4 + [96])
	$10 = *($4 + [100])
	$11 = *($4 + [104])
	$12 = *($4 + [108])
	$13 = *($4 + [112])
	$0 = *($4 + [72])
	*($9) = *($3)
	*($4 + [152]) = $0
	*($4 + [136]) = *($4 + [120])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [152])), (int_32 ($4 + [136])), (int_32 $8), (int_32 $10), (int_32 $11), (int_32 $12), (int_32 $13), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $39($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $35($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17210])
	CALL memcpy(($4 + [32]), $2, [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [17210])
	CALL memcpy($4, ($2 + [8]), [8])
	*($4 + [40]) = *($4)
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*(($3 = (($4 + [48]) + [8]))) = *($4 + [40])
	*($4 + [48]) = *($4 + [32])
	*((($4 + [64]) + [8])) = *($3)
	*($4 + [64]) = *($4 + [48])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [64])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $39($2)
	
.LABEL $label$6
	$global$0 = ($4 + [80])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17210])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17210])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17210])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17210])
	CALL memcpy(($0 + [24]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17210])
	CALL memcpy(($0 + [28]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17210])
	CALL memcpy(($0 + [32]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17210])
	CALL memcpy(($0 + [36]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17210])
	CALL memcpy(($0 + [40]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $33(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $33(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $39($0)
	
.LABEL $label$1
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $39($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $27 (int_32 $0)
{
}

int_32 .FUNC $26 ()
{
	return [8220]
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $37($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [17675])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $31 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8504]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8508])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8504]) = [1]
	$2 = ($2 << [16])
	*([0] + [8508]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8508])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8508]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8504]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8504]) = [1]
	$3 = ($3 << [16])
	*([0] + [8508]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8508])
	
.LABEL $label$10
	*([0] + [8508]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $36([8512], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $35($1)
	
.LABEL $label$2
	*(CALL $26()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $35(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $39($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16896])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16704]
	$3 = (((int_32)$1 * (int_32)[12]) + [16704])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}