(data (i32.const 8220) "failed to allocate pages\00Invalid quantity\00")
(data (i32.const 8262) "#TO#\00")
(data (i32.const 8267) "memo must be empty or to in exchange\00")
(data (i32.const 8304) "Exchange\00")
(data (i32.const 8313) ",\00")
(data (i32.const 8315) "Invalid symbol1\00")
(data (i32.const 8331) "Invalid symbol2\00")
(data (i32.const 8347) "get\00")
(data (i32.const 8351) "read\00")
(data (i32.const 8356) "string is too long to be a valid name\00")
(data (i32.const 8394) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8461) "character is not in allowed character set for names\00")
(data (i32.const 8513) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8562) "invalid symbol name\00")
(data (i32.const 8582) "write\00")
(data (i32.const 0) "\90!\00\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memset" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "abort" (func $fimport$3))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$6 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$7 (param i32 i32)))
(import "env" "__multf3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$9 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$12 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$17 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$19 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$20 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "action_data_size" (func $fimport$24 (result i32)))
(import "env" "read_action_data" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$26 (param i32 i32)))
(export "apply" (func $24))
(table $0 1 1 anyfunc)

(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 8588))
(global $global$2 i32 (i32.const 8588))


int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8582])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8582])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8582])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($1 + [24]))
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8582])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, ($2 + [8]), [8])
	*($3) = (*($3) + [8])
	$0 = CALL $35($0, ($1 + [32]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8582])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8582])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $23($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [320])
	$global$0 = $3
	CALL $26(($3 + [256]))
	$4 = *($3 + [256])
	if ( ((int_64)$4 == (int_64)$1) ){ goto $label$3 }
	if ( ((int_64)$4 == (int_64)6138894238293890416) ){ goto $label$3 }
	if ( ((int_64)*($3 + [264]) != (int_64)$1) ){ goto $label$3 }
	CALL require_auth($4)
	$5 = [0]
	if ( ((uint_64)((int_64)*($3 + [272]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$6 = (uint_64)*((($3 + [256]) + [24])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $8
	$5 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $8
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$8 }
	$5 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	CALL eosio_assert($5, [8245])
	$10 = CALL $20(($3 + [240]), ($3 + [288]))
	$11 = CALL $20(($3 + [224]), $10)
	*(($3 + [216])) = [0]
	*($3 + [208]) = (int_64)0
	$7 = CALL $16([8262])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$16 }
	*($3 + [208]) = ($7 << [1])
	$12 = (($3 + [208]) | [1])
	$5 = $12
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = (($7 + [16]) & [-16])
	$5 = CALL $8($9)
	*($3 + [208]) = ($9 | [1])
	*($3 + [216]) = $5
	*($3 + [212]) = $7
	$12 = (($3 + [208]) | [1])
	
.LABEL $label$15
	CALL memcpy($5, [8262], $7)
	
.LABEL $label$14
	*(($5 + $7)) = [0]
	$9 = [1]
	$13 = ($7 & [1])
	$7 = *($3 + [208])
	$7 = ( *($3 + [212]) ? uint_32($7 >> [1]) : $13 )
	if ( ($7 == 0) ){ goto $label$17 }
	$9 = ($5 & [1])
	$5 = *($11)
	$5 = ( *($11 + [4]) ? uint_32($5 >> [1]) : $9 )
	if ( ((int_32)$5 < (int_32)$7) ){ goto $label$18 }
	$14 = ( *($11 + [8]) ? ($11 + [1]) : $9 )
	$15 = ($14 + $5)
	$13 = ( *($3 + [216]) ? $12 : $13 )
	$12 = *($13)
	$9 = $14
	
.LOOP $label$19:
	$5 = (($5 - $7) + [1])
	if ( ($5 == 0) ){ goto $label$18 }
	$5 = CALL $17($9, $12, $5)
	if ( ($5 == 0) ){ goto $label$18 }
	if ( (CALL $18($5, $13, $7) == 0) ){ goto $label$20 }
	$9 = ($5 + [1])
	$5 = ($15 - $9)
	if ( ((int_32)$5 >= (int_32)$7) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$14) ){ goto $label$18 }
	$9 = [1]
	if ( ((int_32)$5 != (int_32)$15) ){ goto $label$17 }
	
.LABEL $label$18
	$7 = *($3 + [240])
	$9 = (( *($10 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ) == 0)
	
.LABEL $label$17
	CALL eosio_assert($9, [8267])
	if ( ((*($3 + [208]) & [1]) == 0) ){ goto $label$21 }
	CALL $10(*(($3 + [216])))
	
.LABEL $label$21
	if ( ((*($11) & [1]) == 0) ){ goto $label$22 }
	CALL $10(*(($11 + [8])))
	
.LABEL $label$22
	*(($3 + [200])) = [0]
	*($3 + [192]) = (int_64)0
	$7 = CALL $16([8304])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$25 }
	*($3 + [192]) = ($7 << [1])
	$5 = (($3 + [192]) | [1])
	if ( $7 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$9 = (($7 + [16]) & [-16])
	$5 = CALL $8($9)
	*($3 + [192]) = ($9 | [1])
	*($3 + [200]) = $5
	*($3 + [196]) = $7
	
.LABEL $label$24
	CALL memcpy($5, [8304], $7)
	
.LABEL $label$23
	*(($5 + $7)) = [0]
	$11 = CALL $20(($3 + [176]), $10)
	*(($3 + [168])) = [0]
	*($3 + [160]) = (int_64)0
	$7 = CALL $16([8262])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$28 }
	*($3 + [160]) = ($7 << [1])
	$13 = (($3 + [160]) | [1])
	$5 = $13
	if ( $7 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$9 = (($7 + [16]) & [-16])
	$5 = CALL $8($9)
	*($3 + [160]) = ($9 | [1])
	*($3 + [168]) = $5
	*($3 + [164]) = $7
	$13 = (($3 + [160]) | [1])
	
.LABEL $label$27
	CALL memcpy($5, [8262], $7)
	
.LABEL $label$26
	*(($5 + $7)) = [0]
	$7 = [1]
	$9 = ($5 & [1])
	$5 = *($3 + [160])
	$5 = ( *($3 + [164]) ? uint_32($5 >> [1]) : $9 )
	if ( ($5 == 0) ){ goto $label$29 }
	$7 = ( *($11 + [4]) ? uint_32($7 >> [1]) : $12 )
	$7 = *($11)
	$12 = ($7 & [1])
	$14 = ( *($11 + [8]) ? ($11 + [1]) : $12 )
	$12 = ($14 + $7)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$31 }
	$15 = ( *($3 + [168]) ? $13 : $9 )
	$13 = *($15)
	$9 = $14
	
.LOOP $label$32:
	$7 = (($7 - $5) + [1])
	if ( ($7 == 0) ){ goto $label$31 }
	$7 = CALL $17($9, $13, $7)
	if ( ($7 == 0) ){ goto $label$31 }
	if ( (CALL $18($7, $15, $5) == 0) ){ goto $label$30 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$5) ){ goto $label$32 }
	
.LABEL $label$31
	$7 = $12
	
.LABEL $label$30
	$7 = (((int_32)$7 == (int_32)$14) & ((int_32)$7 != (int_32)$12))
	$9 = (*($3 + [160]) & [1])
	
.LABEL $label$29
	if ( ($9 == 0) ){ goto $label$33 }
	CALL $10(*(($3 + [168])))
	
.LABEL $label$33
	if ( ((*($11) & [1]) == 0) ){ goto $label$34 }
	CALL $10(*(($11 + [8])))
	
.LABEL $label$34
	if ( ($7 == 0) ){ goto $label$9 }
	$5 = *($3 + [240])
	$11 = *($10 + [8])
	$9 = *($10 + [4])
	$7 = CALL $16([8313])
	if ( ($7 == 0) ){ goto $label$37 }
	$12 = ($5 & [1])
	$5 = ( $9 ? uint_32($5 >> [1]) : $12 )
	if ( ((int_32)$5 < (int_32)$7) ){ goto $label$35 }
	$12 = ( $11 ? ($10 + [1]) : $12 )
	$11 = ($12 + $5)
	$9 = $12
	
.LOOP $label$38:
	$5 = (($5 - $7) + [1])
	if ( ($5 == 0) ){ goto $label$35 }
	$5 = CALL $17($9, [44], $5)
	if ( ($5 == 0) ){ goto $label$35 }
	if ( (CALL $18($5, [8313], $7) == 0) ){ goto $label$36 }
	$9 = ($5 + [1])
	$5 = ($11 - $9)
	if ( ((int_32)$5 >= (int_32)$7) ){ goto $label$38 }
	goto $label$35 
	
.LABEL $label$37
	$5 = [0]
	goto $label$10 
	
.LABEL $label$36
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$35 }
	$5 = ($5 - $12)
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$10 }
	
.LABEL $label$35
	$5 = *($7)
	$9 = ($5 & [1])
	$7 = CALL $21(($3 + [136]), $10, [4], [-1], $10)
	*($3 + [152]) = ( *($7 + [8]) ? ($7 + [1]) : $9 )
	*($3 + [156]) = ( *($7 + [4]) ? uint_32($5 >> [1]) : $9 )
	*($3 + [16]) = *($3 + [152])
	$4 = *(CALL $27(($3 + [24]), ($3 + [16])))
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*(($7 + [8])))
	goto $label$9 
	
.LABEL $label$13
	CALL $19(($3 + [208]))
	
.LABEL $label$12
	CALL $19(($3 + [192]))
	
.LABEL $label$11
	CALL $19(($3 + [160]))
	
.LABEL $label$10
	$9 = *($7)
	$11 = ($9 & [1])
	$7 = CALL $21(($3 + [112]), $10, [4], ($5 + [-4]), $10)
	*($3 + [128]) = ( *($7 + [8]) ? ($7 + [1]) : $11 )
	*($3 + [132]) = ( *($7 + [4]) ? uint_32($9 >> [1]) : $11 )
	*($3 + [8]) = *($3 + [128])
	$4 = *(CALL $27(($3 + [24]), ($3 + [8])))
	if ( ((*($7) & [1]) == 0) ){ goto $label$39 }
	CALL $10(*(($7 + [8])))
	
.LABEL $label$39
	CALL $21(($3 + [24]), $10, ($5 + [1]), [-1], $10)
	if ( (*($3 + [192]) & [1]) ){ goto $label$41 }
	*($3 + [192]) = [0]
	goto $label$40 
	
.LABEL $label$41
	*(*($3 + [200])) = [0]
	*($3 + [196]) = [0]
	
.LABEL $label$40
	CALL $22(($3 + [192]), [0])
	*((($3 + [192]) + [8])) = *((($3 + [24]) + [8]))
	*($3 + [192]) = *($3 + [24])
	
.LABEL $label$9
	$6 = *(($3 + [280]))
	if ( ((int_64)$2 != (int_64)6138894366021054848) ){ goto $label$53 }
	CALL eosio_assert(((int_64)$6 == (int_64)1381385476), [8315])
	$8 = *(($3 + [272]))
	if ( (uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$54 }
	CALL eosio_assert([0], [8513])
	
.LABEL $label$54
	$6 = (int_64)4478533
	$7 = [0]
	
.LOOP $label$55:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$2 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$56 }
	$6 = $2
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$55 }
	goto $label$51 
	
.LABEL $label$56
	$6 = $2
	
.LOOP $label$57:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$52 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$57 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$55 }
	goto $label$51 
	
.LABEL $label$53
	CALL eosio_assert(((int_64)$6 == (int_64)1146504452), [8331])
	$8 = *(($3 + [272]))
	if ( (uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$58 }
	CALL eosio_assert([0], [8513])
	
.LABEL $label$58
	$6 = (int_64)5396037
	$7 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$2 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$60 }
	$6 = $2
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$59 }
	goto $label$49 
	
.LABEL $label$60
	$6 = $2
	
.LOOP $label$61:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$61 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$59 }
	goto $label$49 
	
.LABEL $label$52
	CALL eosio_assert([0], [8562])
	
.LABEL $label$51
	*((($3 + [24]) + [24])) = (int_64)1146504452
	*($3 + [32]) = $4
	*($3 + [24]) = $1
	*($3 + [40]) = $8
	$5 = CALL $20((($3 + [24]) + [32]), ($3 + [192]))
	*($3 + [80]) = (int_64)-3617168760277827584
	*($3 + [72]) = (int_64)6138716500844090672
	*(($7 = CALL $8([16]))) = $1
	*($7 + [8]) = (int_64)3617214756542218240
	*((($3 + [72]) + [36])) = [0]
	$9 = ($7 + [16])
	*((($3 + [72]) + [24])) = $9
	*(($3 + [92])) = $9
	*($3 + [88]) = $7
	*($3 + [100 align=4]) = (int_64)0
	$7 = *($5)
	$9 = ( *((($3 + [24]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($9 + [32])
	$6 = (CASTING uint_64)(uint_32 $9)
	$9 = ($3 + [100])
	
.LOOP $label$62:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$62 }
	if ( ($7 == 0) ){ goto $label$48 }
	CALL $28($9, $7)
	$9 = *(($3 + [104]))
	$7 = *(($3 + [100]))
	goto $label$47 
	
.LABEL $label$50
	CALL eosio_assert([0], [8562])
	
.LABEL $label$49
	*((($3 + [24]) + [24])) = (int_64)1381385476
	*($3 + [32]) = $4
	*($3 + [24]) = $1
	*($3 + [40]) = $8
	$5 = CALL $20((($3 + [24]) + [32]), ($3 + [192]))
	*($3 + [80]) = (int_64)-3617168760277827584
	*($3 + [72]) = (int_64)6138894366021054848
	*(($7 = CALL $8([16]))) = $1
	*($7 + [8]) = (int_64)3617214756542218240
	*((($3 + [72]) + [36])) = [0]
	$9 = ($7 + [16])
	*((($3 + [72]) + [24])) = $9
	*(($3 + [92])) = $9
	*($3 + [88]) = $7
	*($3 + [100 align=4]) = (int_64)0
	$7 = *($5)
	$9 = ( *((($3 + [24]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($9 + [32])
	$6 = (CASTING uint_64)(uint_32 $9)
	$9 = ($3 + [100])
	
.LOOP $label$63:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$63 }
	if ( ($7 == 0) ){ goto $label$46 }
	CALL $28($9, $7)
	$9 = *(($3 + [104]))
	$7 = *(($3 + [100]))
	goto $label$45 
	
.LABEL $label$48
	$9 = [0]
	$7 = [0]
	
.LABEL $label$47
	*($3 + [308]) = $7
	*($3 + [304]) = $7
	*($3 + [312]) = $9
	CALL $29(($3 + [304]), ($3 + [24]))
	CALL $30(($3 + [72]))
	$7 = *($3 + [100])
	if ( ($7 == 0) ){ goto $label$64 }
	*(($3 + [104])) = $7
	CALL $10($7)
	
.LABEL $label$64
	$7 = *($3 + [88])
	if ( ($7 == 0) ){ goto $label$65 }
	*(($3 + [92])) = $7
	CALL $10($7)
	
.LABEL $label$65
	if ( ((*($5) & [1]) == 0) ){ goto $label$44 }
	CALL $10(*(($3 + [64])))
	$7 = [1]
	if ( (*($3 + [192]) & [1]) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$46
	$9 = [0]
	$7 = [0]
	
.LABEL $label$45
	*($3 + [308]) = $7
	*($3 + [304]) = $7
	*($3 + [312]) = $9
	CALL $29(($3 + [304]), ($3 + [24]))
	CALL $30(($3 + [72]))
	$7 = *($3 + [100])
	if ( ($7 == 0) ){ goto $label$66 }
	*(($3 + [104])) = $7
	CALL $10($7)
	
.LABEL $label$66
	$7 = *($3 + [88])
	if ( ($7 == 0) ){ goto $label$67 }
	*(($3 + [92])) = $7
	CALL $10($7)
	
.LABEL $label$67
	if ( ((*($5) & [1]) == 0) ){ goto $label$44 }
	CALL $10(*(($3 + [64])))
	
.LABEL $label$44
	$7 = [1]
	if ( ((*($3 + [192]) & [1]) == 0) ){ goto $label$42 }
	
.LABEL $label$43
	CALL $10(*($3 + [200]))
	
.LABEL $label$42
	if ( ((*($3 + [240]) & $7) == 0) ){ goto $label$3 }
	CALL $10(*($10 + [8]))
	if ( (*($3 + [288]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((*($3 + [288]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $10(*(($3 + [296])))
	
.LABEL $label$1
	$global$0 = ($3 + [320])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $34($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $22($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $22($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $19($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	CALL $25(($3 + [8]), $0, $1)
	
.LABEL $label$1
	CALL $4([0])
	$global$0 = ($3 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $37(CALL $36($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8582])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8582])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $28($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $32(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $10($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $4 (int_32 $0)
{
}

int_32 .FUNC $5 ()
{
	return [8208]
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $0 ()
{
	CALL $3()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $8($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $23 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $19 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8356])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [8461])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8394])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8461])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $1($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*(($0 + [24])) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	CALL $31($2, $0)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8582])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8582])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8582])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8351])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8351])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8351])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8351])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [24])) = *($2 + [8])
	*($3) = (*($3) + [8])
	$0 = CALL $33($0, ($1 + [32]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8582])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8582])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8347])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $28($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8351])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}