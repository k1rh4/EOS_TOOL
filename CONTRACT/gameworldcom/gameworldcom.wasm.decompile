(data (i32.const 4) "\a0h\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "transfer\00")
(data (i32.const 128) "eosio.token\00")
(data (i32.const 144) "read\00")
(data (i32.const 160) "invalid start time\00")
(data (i32.const 192) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 256) "singleton does not exist\00")
(data (i32.const 288) "not the time to create new round\00")
(data (i32.const 336) "cannot pass end iterator to modify\00")
(data (i32.const 384) "cannot create objects in table of another contract\00")
(data (i32.const 448) "write\00")
(data (i32.const 464) "object passed to modify is not in multi_index\00")
(data (i32.const 512) "cannot modify objects in table of another contract\00")
(data (i32.const 576) "updater cannot change primary key when modifying an object\00")
(data (i32.const 640) "error reading iterator\00")
(data (i32.const 672) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 736) "invalid symbol name\00")
(data (i32.const 768) "get\00")
(data (i32.const 784) "Invalid token transfer\00")
(data (i32.const 816) "Quantity must be positive\00")
(data (i32.const 848) "account name can only be 12 chars long\00")
(data (i32.const 896) "red\00")
(data (i32.const 912) "blue\00")
(data (i32.const 928) "team must be red or blue\00")
(data (i32.const 960) "this round is ended\00")
(data (i32.const 992) "this round is not started\00")
(data (i32.const 1024) "amount of key should be bigger than 100 and one ten thousandths of keys in this round\00")
(data (i32.const 1120) "amount of key overflow\00")
(data (i32.const 1152) "<\1e")
(data (i32.const 1168) "mask overflow\00")
(data (i32.const 1184) "final result of total profit shouldn\'t be bigger than base profit\00")
(data (i32.const 1264) "something wrong with final result of total pot\00")
(data (i32.const 1312) "pot oeverflow\00")
(data (i32.const 1328) "refer player not exist\00")
(data (i32.const 1360) "affilicate fee overflow\00")
(data (i32.const 1392) "active\00")
(data (i32.const 1424) "gameworldcom only accepts EOS\00")
(data (i32.const 1456) "round not exist\00")
(data (i32.const 1472) "invalid auth\00")
(data (i32.const 1488) "winner not exist\00")
(data (i32.const 1520) "player not exists\00")
(data (i32.const 1552) "cannot pass end iterator to erase\00")
(data (i32.const 1600) "cannot increment end iterator\00")
(data (i32.const 1632) "amount of withdraw should be less than eos of this round\00")
(data (i32.const 1696) "gameworldcom withdraw\00")
(data (i32.const 1728) "object passed to erase is not in multi_index\00")
(data (i32.const 1776) "cannot erase objects in table of another contract\00")
(data (i32.const 1840) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10304) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "has_auth" (func $fimport$11 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN12gameworldcom8withdrawEy" (func $6))
(export "_ZN12gameworldcom8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $8))
(export "_ZN12gameworldcom6createEN5eosio14time_point_secE" (func $10))
(export "malloc" (func $41))
(export "free" (func $44))
(export "isspace" (func $57))
(export "sqrt" (func $58))
(export "memchr" (func $59))
(export "memcmp" (func $60))
(export "strlen" (func $61))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $62 $6 $8 $10)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [144])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [144])
	CALL memcpy(($4 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($4 + [15]) != (int_32)[0])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [144])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [144])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $62 ()
{
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [144])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [144])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $21(*($1), ($0 + [32]))
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [448])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [448])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $31(CALL $30($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $45([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $23($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $32(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $22($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $50($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $45($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $50($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $46($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $47($7)
	return (unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $55(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $55(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $46(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $46(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $45($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $54($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $46($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [768])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $23($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [144])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($1 + [8])
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)*(($1 + [32]))) ){ goto $label$2 }
	$3 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [88]) == (int_32)$2), [192])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$4 = CALL db_find_i64(*($2), *(($1 + [16])), (int_64)-4812882902415048704, (int_64)-4812882902415048704)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $12($2, $4)
	CALL eosio_assert(((int_32)*($3 + [88]) == (int_32)$2), [192])
	
.LABEL $label$1
	$4 = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1456])
	$3 = *(($1 + [36]))
	if ( ((int_32)$3 == (int_32)*(($1 + [32]))) ){ goto $label$4 }
	$4 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$2), [192])
	goto $label$3 
	
.LABEL $label$4
	$1 = CALL db_find_i64(*(($1 + [8])), *(($1 + [16])), (int_64)-4812882902415048704, (int_64)-4812882902415048704)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $12($2, $1)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$2), [192])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [256])
	CALL memcpy($0, $4, [88])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [640])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [12]) = $4
	*($7 + [8]) = $4
	*($7 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $45([80])) + [64]) = $0
	*($7 + [24]) = ($7 + [8])
	*($7 + [36]) = ($5 + [8])
	*($7 + [32]) = $5
	*($7 + [40]) = ($5 + [16])
	*($7 + [44]) = ($5 + [24])
	*($7 + [48]) = ($5 + [32])
	*($7 + [52]) = ($5 + [40])
	*($7 + [56]) = ($5 + [48])
	*($7 + [60]) = ($5 + [56])
	CALL $39(($7 + [32]), ($7 + [24]))
	*($5 + [68]) = $1
	*($7 + [24]) = $5
	*($7 + [32]) = (int_64)-6030912142679474176
	$6 = *($5 + [68])
	*($7 + [4]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)-6030912142679474176
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $37(($0 + [24]), ($7 + [24]), ($7 + [32]), ($7 + [4]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $46($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)$0), [192])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $24($0, $3)
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)$0), [192])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [336])
	CALL $34($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $35($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$1), [192])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $24($1, $4)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$1), [192])
	
.LABEL $label$3
	CALL memcpy($0, $4, [64])
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $38($5, $1, $2, ($5 + [8]))
	CALL memcpy($0, *($5 + [4]), [64])
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $45($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $46($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $49($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10390]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10392])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10390]) = [1]
	$7 = ($7 << [16])
	*([0] + [10392]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10392])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10392]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10390]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10390]) = [1]
	$3 = ($3 << [16])
	*([0] + [10392]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10392])
	
.LABEL $label$8
	*([0] + [10392]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $43($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10304])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $42([1896], $0)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1728])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1776])
	$6 = ($0 + [28])
	$5 = *($6)
	CALL eosio_assert(((int_32)$5 != (int_32)*($0 + [24])), [1840])
	$4 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$2 = ([0] - $6)
	
.LOOP $label$4:
	$6 = ($4 + [24])
	$3 = *($6)
	*($6) = [0]
	$5 = *($4)
	*($4) = $3
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $46($5)
	
.LABEL $label$5
	*(($4 + [16])) = *(($4 + [40]))
	*(($4 + [8])) = *(($4 + [32]))
	$4 = $6
	if ( ((int_32)($6 + $2) != (int_32)[-24]) ){ goto $label$4 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = $4
	
.LABEL $label$2
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $46($4)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $47 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $46 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10396])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10280])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10088]
	$1 = (((int_32)$2 * (int_32)[12]) + [10088])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC _ZN12gameworldcom8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [448])
	*([0] + [4]) = $16
	$14 = *($0)
	if ( ((int_64)$14 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$14 != (int_64)$2) ){ goto $label$2 }
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [1424])
	$10 = [0]
	$7 = *($3)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	
.LABEL $label$3
	CALL eosio_assert($10, [784])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [816])
	$5 = *($4)
	if ( ($5 & [1]) ){ goto $label$9 }
	$11 = uint_32($5 >> [1])
	$6 = ($4 + [1])
	goto $label$8 
	
.LABEL $label$9
	$11 = *($4 + [4])
	$6 = *($4 + [8])
	
.LABEL $label$8
	$10 = ($6 + $11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$11 }
	$11 = $6
	
.LOOP $label$13:
	if ( (CALL isspace(*($11)) == 0) ){ goto $label$12 }
	$11 = ($11 + [1])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$13 }
	$11 = $10
	
.LABEL $label$12
	$5 = *($4)
	goto $label$10 
	
.LABEL $label$11
	$11 = $6
	
.LABEL $label$10
	if ( ($5 & [1]) ){ goto $label$15 }
	$10 = ($4 + [1])
	goto $label$14 
	
.LABEL $label$15
	$10 = *($4 + [8])
	
.LABEL $label$14
	CALL $51($4, ($6 - $10), ($11 - $6))
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$18 }
	$10 = ($4 + [1])
	$6 = ($10 + uint_32($11 >> [1]))
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$10 = *($4 + [8])
	$6 = ($10 + *($4 + [4]))
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$16 }
	
.LABEL $label$17
	$5 = ([0] - $10)
	$11 = ($6 + [-1])
	
.LOOP $label$20:
	if ( (CALL isspace(*($11)) == 0) ){ goto $label$19 }
	$6 = $11
	$10 = ($11 + [-1])
	$11 = $10
	if ( ((int_32)($10 + $5) != (int_32)[-1]) ){ goto $label$20 }
	
.LABEL $label$19
	$11 = *($4)
	
.LABEL $label$16
	if ( ($11 & [1]) ){ goto $label$22 }
	$10 = ($4 + [1])
	$11 = ($10 + uint_32(($11 & [254]) >> [1]))
	goto $label$21 
	
.LABEL $label$22
	$10 = *($4 + [8])
	$11 = ($10 + *($4 + [4]))
	
.LABEL $label$21
	CALL $51($4, ($6 - $10), ($11 - $6))
	$11 = CALL $52($4, [32], [0])
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$23 }
	$11 = CALL $52($4, [45], [0])
	
.LABEL $label$23
	*($16 + [336]) = [0]
	$2 = (int_64)0
	*($16 + [328]) = (int_64)0
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$27 }
	CALL $56(($16 + [360]), $4, [0], $11, $4)
	if ( (*($16 + [328]) & [1]) ){ goto $label$26 }
	*($16 + [328]) = [0]
	goto $label$25 
	
.LABEL $label$27
	CALL $48(($16 + [328]), $4)
	goto $label$24 
	
.LABEL $label$26
	*(*(($16 + [336]))) = [0]
	*($16 + [332]) = [0]
	
.LABEL $label$25
	CALL $50(($16 + [328]), [0])
	*((($16 + [328]) + [8])) = *((($16 + [360]) + [8]))
	*($16 + [328]) = *($16 + [360])
	$10 = [-1]
	CALL $56(($16 + [240]), $4, ($11 + [1]), [-1], $4)
	$11 = *($16 + [240])
	CALL eosio_assert((( *($16 + [244]) ? uint_32($11 >> [1]) : ($11 & [1]) ) <= [13]), [848])
	$11 = ( *($16 + [248]) ? (($16 + [240]) | [1]) : (*($16 + [240]) & [1]) )
	
.LOOP $label$28:
	$4 = ($11 + $10)
	$6 = ($10 + [1])
	$10 = $6
	if ( *(($4 + [1])) ){ goto $label$28 }
	$15 = (CASTING uint_64)(uint_32 $6)
	$2 = (int_64)0
	$14 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$29:
	$12 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$15) ){ goto $label$30 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$10 = ($10 + [165])
	goto $label$31 
	
.LABEL $label$32
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$34 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$33 
	
.LABEL $label$34
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$33
	$11 = ($11 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$29 }
	$6 = [0]
	*(($16 + [392])) = [0]
	*($16 + [376]) = (int_64)-1
	*($16 + [384]) = (int_64)0
	$2 = *($0)
	*($16 + [360]) = $2
	*($16 + [368]) = $13
	$11 = CALL db_find_i64($2, $13, (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$35 }
	$6 = CALL $24(($16 + [360]), $11)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($16 + [360])), [192])
	
.LABEL $label$35
	$4 = *($16 + [384])
	if ( ($4 == 0) ){ goto $label$36 }
	$5 = ($16 + [388])
	$11 = *($5)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$38 }
	
.LOOP $label$39:
	$11 = ($11 + [-24])
	$10 = *($11)
	*($11) = [0]
	if ( ($10 == 0) ){ goto $label$40 }
	CALL $46($10)
	
.LABEL $label$40
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$39 }
	$11 = *(($16 + [384]))
	goto $label$37 
	
.LABEL $label$38
	$11 = $4
	
.LABEL $label$37
	*($5) = $4
	CALL $46($11)
	
.LABEL $label$36
	if ( ((*($16 + [240]) & [1]) == 0) ){ goto $label$41 }
	CALL $46(*(($16 + [248])))
	
.LABEL $label$41
	$2 = ( $13 ? (int_64)0 : $6 )
	
.LABEL $label$24
	$11 = [1]
	$10 = *($16 + [328])
	$4 = CALL strlen([896])
	if ( ((int_32)$4 != (int_32)( *($16 + [332]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$43 }
	if ( (CALL $53(($16 + [328]), [0], [-1], [896], $4) == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$11 = *($16 + [328])
	$10 = ($11 & [1])
	$4 = uint_32($11 >> [1])
	$11 = [0]
	$6 = CALL strlen([912])
	if ( ((int_32)$6 != (int_32)( *($16 + [332]) ? $4 : $10 )) ){ goto $label$42 }
	$11 = (CALL $53(($16 + [328]), [0], [-1], [912], $6) == 0)
	
.LABEL $label$42
	CALL eosio_assert($11, [928])
	$4 = [0]
	$11 = [0]
	$10 = *($16 + [328])
	$6 = CALL strlen([896])
	if ( ((int_32)$6 != (int_32)( *($16 + [332]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$44 }
	$11 = (CALL $53(($16 + [328]), [0], [-1], [896], $6) == 0)
	
.LABEL $label$44
	CALL $25(($16 + [240]), $0)
	$10 = ((int_32)$11 ^ (int_32)[1])
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) >= (uint_32)*($16 + [252])) ){ goto $label$45 }
	$4 = ((int_32)*($16 + [249]) ^ (int_32)[1])
	
.LABEL $label$45
	CALL eosio_assert($4, [960])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) > (uint_32)*($16 + [320])), [992])
	*($16 + [184]) = (int_64)0
	*($16 + [176]) = $2
	*($16 + [192]) = (int_64)0
	*($16 + [200]) = (int_64)0
	*($16 + [208]) = (int_64)0
	*($16 + [216]) = (int_64)0
	*($16 + [224]) = (int_64)0
	*($16 + [232]) = (int_64)0
	*(($16 + [168])) = [0]
	*($16 + [144]) = $1
	*($16 + [152]) = (int_64)-1
	*($16 + [160]) = (int_64)0
	*($16 + [136]) = *($0)
	CALL $26(($16 + [72]), ($16 + [136]), $1, ($16 + [176]))
	CALL $25(($16 + [360]), $0)
	$14 = ((uint_64)*($16 + [272]) / (uint_64)(int_64)10000)
	$2 = (int_64)
	CALL eosio_assert(((uint_64)$2((Rounds 0)(((float_64)((float_64)CALL $58((CASTING float_64)(uint_64 ((int_64)((int_64)((int_64)*($16 + [400]) + (int_64)$7) * (int_64)1280000) + (int_64)230399520000))) + (float_64)(float_64)-479999) * (float_64)(float_64)100)) - (Rounds 0)(((float_64)((float_64)CALL $58((CASTING float_64)(uint_64 ((int_64)((int_64)*($16 + [400]) * (int_64)1280000) + (int_64)230399520000))) + (float_64)(float_64)-479999) * (float_64)(float_64)100)))) >= (uint_64)( $14 ? (int_64)10000 : ((uint_64)$14 > (uint_64)(int_64)10000) )), [1024])
	*($16 + [112]) = ((int_64)*($16 + [112]) + (int_64)$2)
	*($16 + [120]) = ((int_64)*($16 + [120]) + (int_64)$7)
	*($16 + [240]) = $1
	*($16 + [248]) = $10
	*($16 + [280]) = ((int_64)*($16 + [280]) + (int_64)$7)
	$14 = ((int_64)*($16 + [272]) + (int_64)$2)
	*($16 + [272]) = $14
	CALL eosio_assert(((uint_64)$14 >= (uint_64)$2), [1120])
	$4 = (*($4) + (CASTING uint_32)(uint_64 ((int_64)((uint_64)$2 / (uint_64)(int_64)10000) * (int_64)30)))
	$6 = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [86400])
	*(($4 = ($16 + [252]))) = ( $6 ? $4 : ($6 <= $4) )
	$15 = ((int_64)$7 / (int_64)50)
	$12 = ((int_64)((int_64)$7 << (int_64)3) / (int_64)100)
	if ( ($11 == 0) ){ goto $label$47 }
	*($16 + [96]) = ((int_64)*($16 + [96]) + (int_64)$2)
	$11 = ($16 + [256])
	goto $label$46 
	
.LABEL $label$47
	*($16 + [104]) = ((int_64)*($16 + [104]) + (int_64)$2)
	$11 = ($16 + [264])
	
.LABEL $label$46
	*($11) = ((int_64)*($11) + (int_64)$2)
	$11 = (($16 + [240]) + [32])
	$13 = *($3)
	$8 = *(($10 + [1152]))
	$7 = ((int_64)((int_64)$8 * (int_64)$13) / (int_64)100)
	$14 = ((uint_64)((int_64)$7 * (int_64)1000000) / (uint_64)*($11))
	$9 = ((int_64)*($16 + [296]) + (int_64)$14)
	*($16 + [296]) = $9
	CALL eosio_assert(((uint_64)$9 >= (uint_64)$14), [1168])
	*($16 + [128]) = ((int_64))(*($16 + [128]) - ((uint_64)((int_64)$14 * (int_64)$2) / (uint_64)(int_64)1000000)) + (int_64)((uint_64)((int_64)*($16 + [296]) * (int_64)$2) / (uint_64)(int_64)1000000))
	$2 = ((uint_64)((int_64)*($11) * (int_64)$14) / (uint_64)(int_64)1000000)
	CALL eosio_assert(((uint_64)$2 <= (uint_64)$7), [1184])
	$7 = ((int_64)$12 + (int_64)$15)
	$2 = (int_64)
	CALL eosio_assert(((uint_64)$2((int_64))($13 - $7) - $2)) >= (uint_64)((int_64)((int_64)$13 * (int_64))((int_64)90 - $8)) / (int_64)100)), [1264])
	$14 = ((int_64)*($16 + [288]) + (int_64)$2)
	*($16 + [288]) = $14
	CALL eosio_assert(((uint_64)$14 >= (uint_64)$2), [1312])
	CALL $27(($16 + [136]), ($16 + [72]), $1)
	CALL $13(($0 + [8]), ($16 + [240]), *($0))
	$2 = *($16 + [72])
	if ( (int_64)($2 == 0) ){ goto $label$48 }
	*((($16 + [32]) + [32])) = [0]
	*($16 + [48]) = (int_64)-1
	*($16 + [56]) = (int_64)0
	$14 = *($0)
	*($16 + [32]) = $14
	*($16 + [40]) = $2
	$11 = [0]
	$10 = CALL db_find_i64($14, $2, (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$49 }
	$11 = CALL $24(($16 + [32]), $10)
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)($16 + [32])), [192])
	
.LABEL $label$49
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [1328])
	$11 = *(($16 + [60]))
	if ( ((int_32)$11 == (int_32)*(($16 + [56]))) ){ goto $label$51 }
	$11 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)($16 + [32])), [192])
	goto $label$50 
	
.LABEL $label$51
	$11 = [0]
	$10 = CALL db_find_i64(*($16 + [32]), *(($16 + [40])), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$50 }
	$11 = CALL $24(($16 + [32]), $10)
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)($16 + [32])), [192])
	
.LABEL $label$50
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [256])
	CALL memcpy(($16 + [360]), $11, [64])
	$2 = ((int_64)*($16 + [368]) + (int_64)$12)
	*($16 + [368]) = $2
	CALL eosio_assert(((uint_64)$2 >= (uint_64)$12), [1360])
	CALL $27(($16 + [32]), ($16 + [360]), *($16 + [72]))
	$4 = *($16 + [56])
	if ( ($4 == 0) ){ goto $label$52 }
	$6 = ($16 + [60])
	$11 = *($6)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$54 }
	
.LOOP $label$55:
	$11 = ($11 + [-24])
	$10 = *($11)
	*($11) = [0]
	if ( ($10 == 0) ){ goto $label$56 }
	CALL $46($10)
	
.LABEL $label$56
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$55 }
	$11 = *(($16 + [56]))
	goto $label$53 
	
.LABEL $label$54
	$11 = $4
	
.LABEL $label$53
	*($6) = $4
	CALL $46($11)
	
.LABEL $label$52
	$7 = $15
	
.LABEL $label$48
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [672])
	$2 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$60 }
	
.LOOP $label$61:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$58 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$61 }
	
.LABEL $label$60
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$10 = [0]
	
.LABEL $label$57
	CALL eosio_assert($10, [736])
	$15 = *($0)
	$2 = (int_64)0
	$12 = (int_64)59
	$11 = [1392]
	$13 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$67 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$10 = ($10 + [165])
	goto $label$65 
	
.LABEL $label$67
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$63
	$11 = ($11 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$62 }
	*($16 + [24]) = $13
	*($16 + [16]) = $15
	$2 = (int_64)0
	$12 = (int_64)59
	$11 = [128]
	$13 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$73 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$10 = ($10 + [165])
	goto $label$71 
	
.LABEL $label$73
	$14 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$69
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$68 }
	$2 = (int_64)0
	$12 = (int_64)59
	$11 = [112]
	$15 = (int_64)0
	
.LOOP $label$74:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$79 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$78 }
	$10 = ($10 + [165])
	goto $label$77 
	
.LABEL $label$79
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$78
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$77
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$76
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$75
	$11 = ($11 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$74 }
	*(($16 + [8])) = [0]
	*($16) = (int_64)0
	$11 = CALL strlen([1408])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$82 }
	*($16) = ($11 << [1])
	$10 = ($16 | [1])
	if ( $11 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	$4 = (($11 + [16]) & [-16])
	$10 = CALL $45($4)
	*($16) = ($4 | [1])
	*($16 + [8]) = $10
	*($16 + [4]) = $11
	
.LABEL $label$81
	CALL memcpy($10, [1408], $11)
	
.LABEL $label$80
	*(($10 + $11)) = [0]
	*(($16 + [384])) = (int_64)1397703940
	*(($16 + [396])) = *($16 + [4])
	*($16 + [368]) = (int_64)7035940189118321824
	$11 = ($16 + [8])
	*(($16 + [400])) = *($11)
	*($16 + [360]) = *($0)
	*($16 + [376]) = $7
	*($16 + [392]) = *($16)
	*($16) = [0]
	*($16 + [4]) = [0]
	*($11) = [0]
	$11 = CALL $28(($16 + [32]), ($16 + [16]), $13, $15, ($16 + [360]))
	CALL $29(($16 + [344]), $11)
	$10 = *($16 + [344])
	CALL send_inline($10, (*($16 + [348]) - $10))
	$10 = *($16 + [344])
	if ( ($10 == 0) ){ goto $label$83 }
	*($16 + [348]) = $10
	CALL $46($10)
	
.LABEL $label$83
	$10 = *($11 + [28])
	if ( ($10 == 0) ){ goto $label$84 }
	*(($11 + [32])) = $10
	CALL $46($10)
	
.LABEL $label$84
	$10 = *($11 + [16])
	if ( ($10 == 0) ){ goto $label$85 }
	*(($11 + [20])) = $10
	CALL $46($10)
	
.LABEL $label$85
	if ( ((*(($16 + [392])) & [1]) == 0) ){ goto $label$86 }
	CALL $46(*(($16 + [400])))
	
.LABEL $label$86
	if ( ((*($16) & [1]) == 0) ){ goto $label$87 }
	CALL $46(*(($16 + [8])))
	
.LABEL $label$87
	$4 = *($16 + [160])
	if ( ($4 == 0) ){ goto $label$88 }
	$6 = ($16 + [164])
	$11 = *($6)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$90 }
	
.LOOP $label$91:
	$11 = ($11 + [-24])
	$10 = *($11)
	*($11) = [0]
	if ( ($10 == 0) ){ goto $label$92 }
	CALL $46($10)
	
.LABEL $label$92
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$91 }
	$11 = *(($16 + [160]))
	goto $label$89 
	
.LABEL $label$90
	$11 = $4
	
.LABEL $label$89
	*($6) = $4
	CALL $46($11)
	
.LABEL $label$88
	if ( ((*($16 + [328]) & [1]) == 0) ){ goto $label$2 }
	CALL $46(*(($16 + [336])))
	
.LABEL $label$2
	*([0] + [4]) = ($16 + [448])
	return (unreachable)
	
.LABEL $label$1
	CALL $47($16)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [672])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [736])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $19(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $20(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $46(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN12gameworldcom8withdrawEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [336])
	*([0] + [4]) = $12
	$6 = [1]
	if ( CALL has_auth($1) ){ goto $label$1 }
	$6 = CALL has_auth(*($0))
	
.LABEL $label$1
	CALL eosio_assert($6, [1472])
	CALL $25(($12 + [232]), $0)
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= (uint_32)*($12 + [244])) ){ goto $label$3 }
	if ( *($12 + [241]) ){ goto $label$3 }
	*(($12 + [241])) = [1]
	$10 = ((uint_64)((int_64)*(($6 + [1152])) * (int_64)$8) / (uint_64)(int_64)100)
	$5 = ((uint_64)((int_64)$8 * (int_64)10) / (uint_64)(int_64)100)
	$8 = *($12 + [280])
	*(($3 = ( ($12 + [304]) ? ($12 + [296]) : ($6 = *($12 + [240])) ))) = ((int_64)*($3) + (int_64)((uint_64)((int_64))((int_64))($8 - $5) - $10) * (int_64)1000000) / (uint_64)*(( (($12 + [232]) + [24]) ? ($12 + [248]) : $6 ))))
	CALL $13(($0 + [8]), ($12 + [232]), *($0))
	*($12 + [208]) = (int_64)-1
	*($12 + [216]) = [0]
	$8 = *($12 + [232])
	$7 = *($0)
	*($12 + [192]) = $7
	*($12 + [200]) = $8
	*(($3 = ($12 + [220]))) = [0]
	*(($12 + [224])) = [0]
	$6 = [0]
	$2 = CALL db_find_i64($7, $8, (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $24(($12 + [192]), $2)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($12 + [192])), [192])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1488])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)*((($12 + [192]) + [24]))) ){ goto $label$6 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($12 + [192])), [192])
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	$3 = CALL db_find_i64(*($12 + [192]), *(($12 + [200])), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $24(($12 + [192]), $3)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($12 + [192])), [192])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [256])
	CALL memcpy(($12 + [128]), $6, [64])
	*($12 + [144]) = ((int_64)*($12 + [144]) + (int_64)$10)
	CALL $27(($12 + [192]), ($12 + [128]), *($12 + [232]))
	CALL eosio_assert([1], [672])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$3 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [736])
	$11 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1392]
	$9 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$17 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$12 }
	*($12 + [80]) = $9
	*($12 + [72]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$9 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$23 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$3 = ($3 + [165])
	goto $label$21 
	
.LABEL $label$23
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$18 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [112]
	$11 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$29 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$3 = ($3 + [165])
	goto $label$27 
	
.LABEL $label$29
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$25
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$24 }
	*(($12 + [16])) = [0]
	*($12 + [8]) = (int_64)0
	$6 = CALL strlen([1408])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$32 }
	*($12 + [8]) = ($6 << [1])
	$3 = (($12 + [8]) | [1])
	if ( $6 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$2 = (($6 + [16]) & [-16])
	$3 = CALL $45($2)
	*($12 + [8]) = ($2 | [1])
	*($12 + [16]) = $3
	*($12 + [12]) = $6
	
.LABEL $label$31
	CALL memcpy($3, [1408], $6)
	
.LABEL $label$30
	*(($3 + $6)) = [0]
	*(($12 + [48])) = (int_64)1397703940
	*(($12 + [60])) = *($12 + [12])
	*($12 + [32]) = (int_64)7035940189118321824
	$6 = ($12 + [16])
	*(($12 + [64])) = *($6)
	*($12 + [24]) = *($0)
	*($12 + [40]) = $5
	*($12 + [56]) = *($12 + [8])
	*($12 + [8]) = [0]
	*($12 + [12]) = [0]
	*($6) = [0]
	$6 = CALL $28(($12 + [88]), ($12 + [72]), $9, $11, ($12 + [24]))
	CALL $29(($12 + [320]), $6)
	$3 = *($12 + [320])
	CALL send_inline($3, (*($12 + [324]) - $3))
	$3 = *($12 + [320])
	if ( ($3 == 0) ){ goto $label$33 }
	*($12 + [324]) = $3
	CALL $46($3)
	
.LABEL $label$33
	$3 = *($6 + [28])
	if ( ($3 == 0) ){ goto $label$34 }
	*(($6 + [32])) = $3
	CALL $46($3)
	
.LABEL $label$34
	$3 = *($6 + [16])
	if ( ($3 == 0) ){ goto $label$35 }
	*(($6 + [20])) = $3
	CALL $46($3)
	
.LABEL $label$35
	if ( ((*(($12 + [56])) & [1]) == 0) ){ goto $label$36 }
	CALL $46(*(($12 + [64])))
	
.LABEL $label$36
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$37 }
	CALL $46(*(($12 + [16])))
	
.LABEL $label$37
	$2 = *($12 + [216])
	if ( ($2 == 0) ){ goto $label$3 }
	$4 = ($12 + [220])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$39 }
	
.LOOP $label$40:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$41 }
	CALL $46($3)
	
.LABEL $label$41
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$40 }
	$6 = *(($12 + [216]))
	goto $label$38 
	
.LABEL $label$39
	$6 = $2
	
.LABEL $label$38
	*($4) = $2
	CALL $46($6)
	
.LABEL $label$3
	*(($12 + [224])) = [0]
	*($12 + [208]) = (int_64)-1
	*($12 + [216]) = (int_64)0
	$8 = *($0)
	*($12 + [192]) = $8
	*($12 + [200]) = $1
	$6 = [0]
	$3 = CALL db_find_i64($8, $1, (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$42 }
	$6 = CALL $24(($12 + [192]), $3)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($12 + [192])), [192])
	
.LABEL $label$42
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1520])
	$6 = *(($12 + [220]))
	if ( ((int_32)$6 == (int_32)*(($12 + [216]))) ){ goto $label$44 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($12 + [192])), [192])
	goto $label$43 
	
.LABEL $label$44
	$6 = [0]
	$3 = CALL db_find_i64(*($12 + [192]), *(($12 + [200])), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$43 }
	$6 = CALL $24(($12 + [192]), $3)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($12 + [192])), [192])
	
.LABEL $label$43
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [256])
	CALL memcpy(($12 + [128]), $6, [64])
	$10 = ((uint_64)((int_64)*($12 + [168]) * (int_64)*($12 + [288])) / (uint_64)(int_64)1000000)
	$8 = (int_64)
	if ( (int_64)($8($10 - *($12 + [184]))) == 0) ){ goto $label$45 }
	*(($12 + [184])) = $10
	
.LABEL $label$45
	$5 = ((int_64)((int_64)*($12 + [136]) + (int_64)$8) + (int_64)*($12 + [144]))
	if ( (*($12 + [241]) == 0) ){ goto $label$49 }
	$5 = ((int_64)((int_64)((uint_64)((int_64)*($12 + [296]) * (int_64)*($12 + [152])) / (uint_64)(int_64)1000000) + (int_64)$5) + (int_64)((uint_64)((int_64)*($12 + [304]) * (int_64)*($12 + [160])) / (uint_64)(int_64)1000000))
	$6 = *(($12 + [220]))
	if ( ((int_32)$6 == (int_32)*(($12 + [216]))) ){ goto $label$48 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($12 + [192])), [192])
	if ( $6 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	*(($12 + [144])) = (int_64)0
	*(($12 + [136])) = (int_64)0
	CALL $27(($12 + [192]), ($12 + [128]), $1)
	goto $label$46 
	
.LABEL $label$48
	$6 = CALL db_find_i64(*($12 + [192]), *(($12 + [200])), (int_64)-6030912142679474176, (int_64)-6030912142679474176)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$46 }
	$6 = CALL $24(($12 + [192]), $6)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($12 + [192])), [192])
	
.LABEL $label$47
	CALL eosio_assert([1], [1552])
	CALL eosio_assert([1], [1600])
	$3 = CALL db_next_i64(*($6 + [68]), ($12 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$50 }
	CALL $24(($12 + [192]), $3)
	
.LABEL $label$50
	CALL $40(($12 + [192]), $6)
	
.LABEL $label$46
	CALL eosio_assert((uint_64)($5 <= *($12 + [272])), [1632])
	if ( (int_64)($5 == 0) ){ goto $label$52 }
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [672])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$55:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$54 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$56 }
	
.LOOP $label$57:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$57 }
	
.LABEL $label$56
	$3 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$54
	$3 = [0]
	
.LABEL $label$53
	CALL eosio_assert($3, [736])
	$11 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1392]
	$9 = (int_64)0
	
.LOOP $label$58:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$63 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$3 = ($3 + [165])
	goto $label$61 
	
.LABEL $label$63
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$60
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$59
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$58 }
	*($12 + [80]) = $9
	*($12 + [72]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$9 = (int_64)0
	
.LOOP $label$64:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$69 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$68 }
	$3 = ($3 + [165])
	goto $label$67 
	
.LABEL $label$69
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$68
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$67
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$66
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$65
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$64 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [112]
	$11 = (int_64)0
	
.LOOP $label$70:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$75 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$74 }
	$3 = ($3 + [165])
	goto $label$73 
	
.LABEL $label$75
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$74
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$73
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$72
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$71
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$70 }
	*(($12 + [16])) = [0]
	*($12 + [8]) = (int_64)0
	$6 = CALL strlen([1696])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$51 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$78 }
	*($12 + [8]) = ($6 << [1])
	$3 = (($12 + [8]) | [1])
	if ( $6 ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	$2 = (($6 + [16]) & [-16])
	$3 = CALL $45($2)
	*($12 + [8]) = ($2 | [1])
	*($12 + [16]) = $3
	*($12 + [12]) = $6
	
.LABEL $label$77
	CALL memcpy($3, [1696], $6)
	
.LABEL $label$76
	*(($3 + $6)) = [0]
	*(($12 + [48])) = (int_64)1397703940
	*(($12 + [60])) = *($12 + [12])
	*($12 + [32]) = $1
	$6 = ($12 + [16])
	*(($12 + [64])) = *($6)
	*($12 + [24]) = *($0)
	*($12 + [40]) = $5
	*($12 + [56]) = *($12 + [8])
	*($12 + [8]) = [0]
	*($12 + [12]) = [0]
	*($6) = [0]
	$6 = CALL $28(($12 + [88]), ($12 + [72]), $9, $11, ($12 + [24]))
	CALL $29(($12 + [320]), $6)
	$3 = *($12 + [320])
	CALL send_inline($3, (*($12 + [324]) - $3))
	$3 = *($12 + [320])
	if ( ($3 == 0) ){ goto $label$79 }
	*($12 + [324]) = $3
	CALL $46($3)
	
.LABEL $label$79
	$3 = *($6 + [28])
	if ( ($3 == 0) ){ goto $label$80 }
	*(($6 + [32])) = $3
	CALL $46($3)
	
.LABEL $label$80
	$3 = *($6 + [16])
	if ( ($3 == 0) ){ goto $label$81 }
	*(($6 + [20])) = $3
	CALL $46($3)
	
.LABEL $label$81
	if ( ((*(($12 + [56])) & [1]) == 0) ){ goto $label$82 }
	CALL $46(*(($12 + [64])))
	
.LABEL $label$82
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$52 }
	CALL $46(*(($12 + [16])))
	
.LABEL $label$52
	$0 = *($12 + [216])
	if ( ($0 == 0) ){ goto $label$83 }
	$2 = ($12 + [220])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$85 }
	
.LOOP $label$86:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$87 }
	CALL $46($3)
	
.LABEL $label$87
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$86 }
	$6 = *(($12 + [216]))
	goto $label$84 
	
.LABEL $label$85
	$6 = $0
	
.LABEL $label$84
	*($2) = $0
	CALL $46($6)
	
.LABEL $label$83
	*([0] + [4]) = ($12 + [336])
	return (unreachable)
	
.LABEL $label$51
	CALL $47(($12 + [8]))
	
.LABEL $label$2
	CALL $47(($12 + [8]))
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [144])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [112]
	$9 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$18
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$28 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$24
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$9 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$34 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$30
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$29 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$14 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [112]
	$9 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$40 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$36
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [64])) = $0
	*(($11 + [72])) = (int_64)-1
	*(($11 + [80])) = (int_64)0
	*(($11 + [88])) = [0]
	*($11 + [56]) = $0
	*($11 + [48]) = $0
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$43 }
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$41 }
	*($11 + [44]) = [0]
	*($11 + [40]) = [1]
	*($11) = *($11 + [40])
	CALL $7(($11 + [48]), $11)
	goto $label$41 
	
.LABEL $label$43
	*($11 + [36]) = [0]
	*($11 + [32]) = [2]
	*($11 + [8 align=4]) = *($11 + [32])
	CALL $9(($11 + [48]), ($11 + [8]))
	goto $label$41 
	
.LABEL $label$42
	*($11 + [28]) = [0]
	*($11 + [24]) = [3]
	*($11 + [16 align=4]) = *($11 + [24])
	CALL $11(($11 + [48]), ($11 + [16]))
	
.LABEL $label$41
	$4 = *(($11 + [80]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [84])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$45 }
	
.LOOP $label$46:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$47 }
	CALL $46($3)
	
.LABEL $label$47
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$46 }
	$6 = *(($11 + [80]))
	goto $label$44 
	
.LABEL $label$45
	$6 = $4
	
.LABEL $label$44
	*($5) = $4
	CALL $46($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [96])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [176])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	CALL memcpy($1, *($3), [84])
	CALL eosio_assert([1], [576])
	*($4 + [104]) = ($4 + [82])
	*($4 + [100]) = $4
	*($4 + [96]) = $4
	*($4 + [112]) = ($4 + [96])
	*($4 + [124]) = ($1 + [8])
	*($4 + [120]) = $1
	*($4 + [128]) = ($1 + [9])
	*($4 + [132]) = ($1 + [12])
	*($4 + [136]) = ($1 + [16])
	*($4 + [140]) = ($1 + [24])
	*($4 + [144]) = ($1 + [32])
	*($4 + [148]) = ($1 + [40])
	*($4 + [152]) = ($1 + [48])
	*($4 + [156]) = ($1 + [56])
	*($4 + [160]) = ($1 + [64])
	*($4 + [164]) = ($1 + [72])
	*($4 + [168]) = ($1 + [80])
	CALL $16(($4 + [120]), ($4 + [112]))
	CALL db_update_i64(*($1 + [92]), $2, $4, [82])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4812882902415048704) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4812882902415048703
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [176])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [176])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [384])
	*(($4 = CALL $45([104])) + [80]) = [0]
	*($4 + [12]) = [0]
	*($4 + [88]) = $1
	CALL memcpy($4, *($3), [84])
	*($7 + [104]) = ($7 + [82])
	*($7 + [100]) = $7
	*($7 + [96]) = $7
	*($7 + [112]) = ($7 + [96])
	*($7 + [124]) = ($4 + [8])
	*($7 + [120]) = $4
	*($7 + [128]) = ($4 + [9])
	*($7 + [132]) = ($4 + [12])
	*($7 + [136]) = ($4 + [16])
	*($7 + [140]) = ($4 + [24])
	*($7 + [144]) = ($4 + [32])
	*($7 + [148]) = ($4 + [40])
	*($7 + [152]) = ($4 + [48])
	*($7 + [156]) = ($4 + [56])
	*($7 + [160]) = ($4 + [64])
	*($7 + [164]) = ($4 + [72])
	*($7 + [168]) = ($4 + [80])
	CALL $16(($7 + [120]), ($7 + [112]))
	*($4 + [92]) = CALL db_store_i64(*($1 + [8]), (int_64)-4812882902415048704, $2, (int_64)-4812882902415048704, $7, [82])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4812882902415048704) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4812882902415048703
	
.LABEL $label$1
	*($7 + [120]) = $4
	*($7) = (int_64)-4812882902415048704
	$5 = *($4 + [92])
	*($7 + [96]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4812882902415048704
	*($3 + [16]) = $5
	*($7 + [120]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $17(($1 + [24]), ($7 + [120]), $7, ($7 + [96]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [120])
	*($7 + [120]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $46($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [176])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [448])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	*($4 + [15]) = *(*($0 + [8]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [448])
	CALL memcpy(*($3 + [4]), ($4 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [448])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [448])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $45(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $54($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $46($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $46($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN12gameworldcom6createEN5eosio14time_point_secE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) <= $1), [160])
	$2 = ($0 + [8])
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)*(($0 + [32]))) ){ goto $label$6 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$2), [192])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)-4812882902415048704, (int_64)-4812882902415048704)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $12($2, $5) + [88]) == (int_32)$2), [192])
	
.LABEL $label$5
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)*(($0 + [32]))) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$2), [192])
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert([1], [288])
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$3 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4812882902415048704, (int_64)-4812882902415048704)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $12($2, $3)
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$2), [192])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [256])
	CALL eosio_assert((*($5 + [12]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000))), [288])
	
.LABEL $label$1
	*($6 + [16]) = [0]
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [20]) = ($1 + [86400])
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = $1
	CALL $13($2, ($6 + [8]), $4)
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [144])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [640])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $45([104])) + [80]) = [0]
	*($5 + [12]) = [0]
	*($5 + [88]) = $0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [8])
	*($7 + [40]) = $5
	*($7 + [48]) = ($5 + [9])
	*($7 + [52]) = ($5 + [12])
	*($7 + [56]) = ($5 + [16])
	*($7 + [60]) = ($5 + [24])
	*($7 + [64]) = ($5 + [32])
	*($7 + [68]) = ($5 + [40])
	*($7 + [72]) = ($5 + [48])
	*($7 + [76]) = ($5 + [56])
	*($7 + [80]) = ($5 + [64])
	*($7 + [84]) = ($5 + [72])
	*($7 + [88]) = ($5 + [80])
	CALL $18(($7 + [40]), ($7 + [32]))
	*($5 + [92]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)-4812882902415048704
	$6 = *($5 + [92])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)-4812882902415048704
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $17(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $46($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [96])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [88]) == (int_32)$0), [192])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4812882902415048704, (int_64)-4812882902415048704)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $12($0, $3)
	CALL eosio_assert(((int_32)*($3 + [88]) == (int_32)$0), [192])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [336])
	CALL $14($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $15($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $45(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $54($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $46($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $46($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [128])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	CALL memcpy($1, *($3), [64])
	CALL eosio_assert([1], [576])
	*($4 + [80]) = ($4 + [64])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $36(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-6030912142679474176) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-6030912142679474175
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [128])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [384])
	*(($5 = CALL $45([80])) + [64]) = $1
	$3 = CALL memcpy($5, *($3), [64])
	*($7 + [80]) = ($7 + [64])
	*($7 + [76]) = $7
	*($7 + [72]) = $7
	*($7 + [88]) = ($7 + [72])
	*($7 + [100]) = ($3 + [8])
	*($7 + [96]) = $3
	*($7 + [104]) = ($3 + [16])
	*($7 + [108]) = ($3 + [24])
	*($7 + [112]) = ($3 + [32])
	*($7 + [116]) = ($3 + [40])
	*($7 + [120]) = ($3 + [48])
	*($7 + [124]) = ($3 + [56])
	CALL $36(($7 + [96]), ($7 + [88]))
	*($3 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)-6030912142679474176, $2, (int_64)-6030912142679474176, $7, [64])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-6030912142679474176) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-6030912142679474175
	
.LABEL $label$1
	*($7 + [96]) = $3
	*($7) = (int_64)-6030912142679474176
	$4 = *($3 + [68])
	*($7 + [72]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = (int_64)-6030912142679474176
	*($5 + [16]) = $4
	*($7 + [96]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $37(($1 + [24]), ($7 + [96]), $7, ($7 + [72]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [96])
	*($7 + [96]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $46($3)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $33(*($1), ($0 + [32]))
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [448])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $45(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $46($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [384])
	*(($5 = CALL $45([80])) + [64]) = $1
	$3 = CALL memcpy($5, *($3), [64])
	*($7 + [80]) = ($7 + [64])
	*($7 + [76]) = $7
	*($7 + [72]) = $7
	*($7 + [88]) = ($7 + [72])
	*($7 + [100]) = ($3 + [8])
	*($7 + [96]) = $3
	*($7 + [104]) = ($3 + [16])
	*($7 + [108]) = ($3 + [24])
	*($7 + [112]) = ($3 + [32])
	*($7 + [116]) = ($3 + [40])
	*($7 + [120]) = ($3 + [48])
	*($7 + [124]) = ($3 + [56])
	CALL $36(($7 + [96]), ($7 + [88]))
	*($3 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)-6030912142679474176, $2, (int_64)-6030912142679474176, $7, [64])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-6030912142679474176) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-6030912142679474175
	
.LABEL $label$1
	*($7 + [96]) = $3
	*($7) = (int_64)-6030912142679474176
	$4 = *($3 + [68])
	*($7 + [72]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = (int_64)-6030912142679474176
	*($5 + [16]) = $4
	*($7 + [96]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $37(($1 + [24]), ($7 + [96]), $7, ($7 + [72]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [96])
	*($7 + [96]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $46($3)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [128])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $54 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $45($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $45($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}