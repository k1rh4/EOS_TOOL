(data (i32.const 4) "\a0l\00\00")
(data (i32.const 16) "buy overflow\00")
(data (i32.const 32) "cannot increment end iterator\00")
(data (i32.const 64) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 128) "error reading iterator\00")
(data (i32.const 160) "read\00")
(data (i32.const 168) "\12\00\00\00\00\00\00\00")
(data (i32.const 176) "user not match\00")
(data (i32.const 192) "cannot pass end iterator to modify\00")
(data (i32.const 240) "object passed to modify is not in multi_index\00")
(data (i32.const 288) "cannot modify objects in table of another contract\00")
(data (i32.const 352) "updater cannot change primary key when modifying an object\00")
(data (i32.const 416) "write\00")
(data (i32.const 432) "game id not match\00")
(data (i32.const 464) "last game is already running\00")
(data (i32.const 496) "next primary key in table is at autoincrement limit\00")
(data (i32.const 560) "cannot create objects in table of another contract\00")
(data (i32.const 624) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 688) "cannot decrement iterator at beginning of table\00")
(data (i32.const 736) "user not found\00")
(data (i32.const 752) "user in devlist\00")
(data (i32.const 768) "cant buy tree self\00")
(data (i32.const 800) "The game does not exist\00")
(data (i32.const 832) "need at least buy one\00")
(data (i32.const 864) "The game is over\00")
(data (i32.const 896) "unknow game state\00")
(data (i32.const 928) "you have no enough land\00")
(data (i32.const 960) "cannot pass end iterator to erase\00")
(data (i32.const 1008) "cant buy trees on this pos\00")
(data (i32.const 1040) "invalid symbol name\00")
(data (i32.const 1072) "active\00")
(data (i32.const 1088) "transfer\00")
(data (i32.const 1104) "dig out JUST TOKEN from eosfarm\00")
(data (i32.const 1136) "addquote\00")
(data (i32.const 1152) "airdrop pool must be positive\00")
(data (i32.const 1184) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1248) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 1312) "cannot decrement iterator at beginning of index\00")
(data (i32.const 1360) "object passed to erase is not in multi_index\00")
(data (i32.const 1408) "cannot erase objects in table of another contract\00")
(data (i32.const 1472) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1536) "tree not found\00")
(data (i32.const 1552) "tree state not match\00")
(data (i32.const 1584) "tree has dead\00")
(data (i32.const 1600) "quantity is too small\00")
(data (i32.const 1632) "tree not belong to user\00")
(data (i32.const 1664) "tree has been removed\00")
(data (i32.const 1696) "deltree - minus supply overflow\00")
(data (i32.const 1728) "chkmytree:supply_minus overflow\00")
(data (i32.const 1760) "player not found\00")
(data (i32.const 1792) "tree income overflow\00")
(data (i32.const 1824) "player income overflow\00")
(data (i32.const 1856) "award income overflow\00")
(data (i32.const 1888) "invite income overflow\00")
(data (i32.const 1920) "airdrop income overflow\00")
(data (i32.const 1952) "share income overflow\00")
(data (i32.const 1984) "withdraw all from eosfarm.Eosfarm will close soon.Please pay attention to our new game GiftCraft,thanks!\00")
(data (i32.const 2096) "tree owner not match\00")
(data (i32.const 2128) "withdraw tree\'s income from eosfarm\00")
(data (i32.const 2176) "game not found\00")
(data (i32.const 2192) "user not in devlist\00")
(data (i32.const 2224) "withdraw dev fee\00")
(data (i32.const 2256) "already\00")
(data (i32.const 2272) "cannot transfer to self\00")
(data (i32.const 2304) "from account is not valid\00")
(data (i32.const 2336) "invalid quantity\00")
(data (i32.const 2368) "must transfer positive quantity\00")
(data (i32.const 2400) "game is not start yet\00")
(data (i32.const 2432) "init\00")
(data (i32.const 2448) ":\00")
(data (i32.const 2464) "buytree\00")
(data (i32.const 2480) ";\00")
(data (i32.const 2496) "buydrug\00")
(data (i32.const 2512) "symbol precision mismatch\00")
(data (i32.const 2544) "memo has more than 256 bytes\00")
(data (i32.const 2576) "get\00")
(data (i32.const 10976) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11072) "stoull\00")
(data (i32.const 11088) ": no conversion\00")
(data (i32.const 11104) ": out of range\00")
(data (i32.const 11136) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 11408) "\00\01\02\04\07\03\06\05\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__udivti3" (func $fimport$1 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$2))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "db_end_i64" (func $fimport$6 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_end" (func $fimport$9 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$10 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$11 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_idx64_previous" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$14 (param i32)))
(import "env" "db_idx64_store" (func $fimport$15 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$16 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "db_store_i64" (func $fimport$21 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$23 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$24 (param i32)))
(import "env" "is_account" (func $fimport$25 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$28 (param i64)))
(import "env" "require_auth2" (func $fimport$29 (param i64 i64)))
(import "env" "send_inline" (func $fimport$30 (param i32 i32)))
(import "env" "tapos_block_num" (func $fimport$31 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$32 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN9justaward14get_buy_amountEyy" (func $5))
(export "_ZN9justaward12get_tree_posEy" (func $6))
(export "_Z11splitstringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_" (func $12))
(export "_ZN9justaward12chkdead_userEymy" (func $14))
(export "_ZN9justaward15chkdead_alltreeEyy" (func $23))
(export "_ZN9justaward15chkdead_alluserEyy" (func $25))
(export "_ZN9justaward14chkincome_userEyym" (func $28))
(export "_ZN9justaward9calincomeEyyym" (func $29))
(export "_ZN9justaward17chkincome_alluserEyyy" (func $31))
(export "_ZN9justaward5startEv" (func $34))
(export "_ZN9justaward10adddevlistEy" (func $44))
(export "_ZN9justaward6finishEv" (func $47))
(export "_Z10srand_nexty" (func $48))
(export "_Z8get_seedy" (func $49))
(export "_ZN9justaward7buytreeEyN5eosio5assetEyy" (func $50))
(export "_ZN9justaward7buydrugEyyN5eosio5assetE" (func $68))
(export "_ZN9justaward7buylandEyN5eosio5assetE" (func $70))
(export "_ZN9justaward7deltreeEyy" (func $71))
(export "_ZN9justaward9chkmytreeEy" (func $72))
(export "_ZN9justaward9withdraw2Ey" (func $74))
(export "_ZN9justaward8withdrawEyy" (func $76))
(export "_ZN9justaward7devwithEy" (func $78))
(export "_ZN9justaward11chkdeadtreeEy" (func $79))
(export "_ZN9justaward9chkincomeEy" (func $83))
(export "_ZN9justaward7chktreeEy" (func $84))
(export "_ZN9justaward7settingEyyyy" (func $86))
(export "_ZN9justaward2onERKN5eosio8currency8transferEy" (func $90))
(export "_ZN9justaward5applyEyy" (func $91))
(export "apply" (func $102))
(export "malloc" (func $103))
(export "free" (func $106))
(export "_ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $112))
(export "__errno_location" (func $121))
(export "strtoull" (func $122))
(export "__shlim" (func $123))
(export "__intscan" (func $124))
(export "__shgetc" (func $125))
(export "__uflow" (func $126))
(export "__toread" (func $127))
(export "memchr" (func $128))
(export "memcmp" (func $129))
(export "strlen" (func $130))
(table $0 14 14 anyfunc)
(elem (i32.const 0) $131 $71 $76 $72 $70 $47 $84 $86 $34 $79 $83 $74 $44 $78)



void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $100($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [1184])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [1040])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [160])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [160])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [160])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [160])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($1 + [4])
	$8 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [36]) = $1
	*($9 + [32]) = $1
	*($9 + [40]) = ($1 + $3)
	*($9 + [48]) = ($9 + [32])
	*($9 + [56]) = $9
	CALL $98(($9 + [56]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$7 = *(($9 + [24]))
	$6 = *(($9 + [16]))
	$5 = *(($9 + [8]))
	$4 = *($9)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 $5), (int_64 $6), (int_64 $7), (int_64 $8))
	*([0] + [4]) = ($9 + [64])
	return [1]
}

void .FUNC _ZN9justaward2onERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [160])
	*([0] + [4]) = $16
	$5 = *(($1 + [24]))
	$4 = *($1 + [16])
	$11 = *($1 + [8])
	$3 = *($1)
	CALL $119(($16 + [144]), ($1 + [32]))
	CALL eosio_assert(((int_64)$3 != (int_64)$11), [2272])
	$13 = *($0)
	if ( ((int_64)$3 == (int_64)$13) ){ goto $label$1 }
	if ( ((int_64)$11 != (int_64)$13) ){ goto $label$1 }
	CALL eosio_assert(CALL $fimport$25($3), [2304])
	CALL require_auth($3)
	$7 = [0]
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [2336])
	CALL eosio_assert(((int_64)$4 > (int_64)0), [2368])
	CALL eosio_assert(((int_64)$5 == (int_64)1397703940), [2512])
	$1 = *($16 + [144])
	CALL eosio_assert((( *($16 + [148]) ? uint_32($1 >> [1]) : ($1 & [1]) ) <= [257]), [2544])
	$10 = *(($0 + [32]))
	$12 = *(($0 + [36]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$7 }
	$1 = ($12 + [-24])
	$6 = ([0] - $10)
	
.LOOP $label$8:
	if ( (int_64)(*(*($1)) == 0) ){ goto $label$7 }
	$12 = $1
	$7 = ($1 + [-24])
	$1 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = ($0 + [8])
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$11 }
	$1 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$7), [64])
	if ( $1 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159545106726912, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$9 }
	$1 = CALL $35($7, $1)
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$7), [64])
	
.LABEL $label$10
	$11 = *($1 + [56])
	if ( ((int_64)$11 == (int_64)4) ){ goto $label$12 }
	if ( ((int_64)$11 != (int_64)2) ){ goto $label$9 }
	CALL eosio_assert([0], [2400])
	goto $label$9 
	
.LABEL $label$12
	$10 = *(($0 + [272]))
	$12 = *(($0 + [276]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$13 }
	$1 = ($12 + [-24])
	$6 = ([0] - $10)
	
.LOOP $label$14:
	if ( ((int_64)*(*($1)) == (int_64)$3) ){ goto $label$13 }
	$12 = $1
	$7 = ($1 + [-24])
	$1 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	$7 = ($0 + [248])
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$16 }
	$1 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$7), [64])
	goto $label$15 
	
.LABEL $label$16
	$1 = [0]
	$12 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)5383797594050789376, $3)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$15 }
	$1 = CALL $45($7, $12)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$7), [64])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [2400])
	
.LABEL $label$9
	$1 = *($16 + [144])
	if ( (( *($16 + [148]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == 0) ){ goto $label$34 }
	$1 = *($16 + [144])
	$7 = CALL strlen([2432])
	if ( ((int_32)$7 != (int_32)( *($16 + [148]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$35 }
	if ( (CALL $111(($16 + [144]), [0], [-1], [2432], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$35
	*($16 + [136]) = [0]
	*($16 + [128]) = (int_64)0
	*(($16 + [120])) = [0]
	*($16 + [112]) = (int_64)0
	$1 = CALL strlen([2448])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$38 }
	*($16 + [112]) = ($1 << [1])
	$7 = (($16 + [112]) | [1])
	if ( $1 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$12 = (($1 + [16]) & [-16])
	$7 = CALL $107($12)
	*($16 + [112]) = ($12 | [1])
	*($16 + [120]) = $7
	*($16 + [116]) = $1
	
.LABEL $label$37
	CALL memcpy($7, [2448], $1)
	
.LABEL $label$36
	*(($7 + $1)) = [0]
	CALL _Z11splitstringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_(($16 + [144]), ($16 + [128]), ($16 + [112]))
	if ( ((*($16 + [112]) & [1]) == 0) ){ goto $label$39 }
	CALL $108(*($16 + [120]))
	
.LABEL $label$39
	$1 = *($16 + [128])
	if ( ((int_32)(*($16 + [132]) - $1) != (int_32)[24]) ){ goto $label$40 }
	$7 = *($1)
	$12 = CALL strlen([2464])
	if ( ((int_32)$12 != (int_32)( *($1 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$40 }
	if ( (CALL $111($1, [0], [-1], [2464], $12) == 0) ){ goto $label$33 }
	
.LABEL $label$40
	$12 = *($16 + [128])
	if ( ((int_32)(*($16 + [132]) - $12) != (int_32)[24]) ){ goto $label$41 }
	$1 = *($12)
	$7 = CALL strlen([2496])
	if ( ((int_32)$7 != (int_32)( *($12 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$42 }
	if ( (CALL $111($12, [0], [-1], [2496], $7) == 0) ){ goto $label$32 }
	
.LABEL $label$42
	$12 = *($16 + [128])
	
.LABEL $label$41
	if ( ($12 == 0) ){ goto $label$34 }
	$1 = *($16 + [132])
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$44 }
	$7 = ([0] - $12)
	$1 = ($1 + [-12])
	
.LOOP $label$45:
	if ( ((*($1) & [1]) == 0) ){ goto $label$46 }
	CALL $108(*(($1 + [8])))
	
.LABEL $label$46
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$45 }
	$1 = *($16 + [128])
	goto $label$43 
	
.LABEL $label$44
	$1 = $12
	
.LABEL $label$43
	*($16 + [132]) = $12
	CALL $108($1)
	
.LABEL $label$34
	$11 = CALL _ZN9justaward12get_tree_posEy($0, $3)
	*($16 + [56]) = $5
	*(($16 + [8])) = $5
	*($16 + [48]) = $4
	*($16) = $4
	CALL _ZN9justaward7buytreeEyN5eosio5assetEyy($0, $3, $16, $11, (int_64)0)
	goto $label$1 
	
.LABEL $label$33
	*($16 + [112]) = (int_64)0
	*($16 + [120]) = [0]
	$7 = *($16 + [128])
	*(($16 + [104])) = [0]
	*($16 + [96]) = (int_64)0
	$1 = CALL strlen([2480])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$18 }
	$12 = ($7 + [12])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$31 }
	*($16 + [96]) = ($1 << [1])
	$7 = (($16 + [96]) | [1])
	if ( $1 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	*($16 + [112]) = (int_64)0
	*($16 + [120]) = [0]
	$7 = *($16 + [128])
	*(($16 + [104])) = [0]
	*($16 + [96]) = (int_64)0
	$1 = CALL strlen([2480])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$17 }
	$12 = ($7 + [12])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$28 }
	*($16 + [96]) = ($1 << [1])
	$7 = (($16 + [96]) | [1])
	if ( $1 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$31
	$6 = (($1 + [16]) & [-16])
	$7 = CALL $107($6)
	*($16 + [96]) = ($6 | [1])
	*($16 + [104]) = $7
	*($16 + [100]) = $1
	
.LABEL $label$30
	CALL memcpy($7, [2480], $1)
	
.LABEL $label$29
	*(($7 + $1)) = [0]
	CALL _Z11splitstringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_($12, ($16 + [112]), ($16 + [96]))
	if ( ((*($16 + [96]) & [1]) == 0) ){ goto $label$47 }
	CALL $108(*($16 + [104]))
	
.LABEL $label$47
	$8 = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($16 + [112]), [0], [10])
	$1 = *($16 + [112])
	if ( (*($1 + [12]) & [1]) ){ goto $label$49 }
	$1 = (($1 + [12]) + [1])
	goto $label$48 
	
.LABEL $label$49
	$1 = *(($1 + [20]))
	
.LABEL $label$48
	$7 = [-1]
	
.LOOP $label$50:
	$12 = ($1 + $7)
	$6 = ($7 + [1])
	$7 = $6
	if ( *(($12 + [1])) ){ goto $label$50 }
	$9 = (CASTING uint_64)(uint_32 $6)
	$11 = (int_64)0
	$13 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$51:
	$15 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$9) ){ goto $label$52 }
	$7 = *($1)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$7 = ($7 + [165])
	goto $label$53 
	
.LABEL $label$54
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$56 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$55 
	
.LABEL $label$56
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$55
	$1 = ($1 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$51 }
	*($16 + [88]) = $5
	*(($16 + [24])) = $5
	*($16 + [80]) = $4
	*($16 + [16]) = $4
	CALL _ZN9justaward7buytreeEyN5eosio5assetEyy($0, $3, ($16 + [16]), $8, $14)
	$12 = *($16 + [112])
	if ( ($12 == 0) ){ goto $label$23 }
	$1 = *($16 + [116])
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$25 }
	$7 = ([0] - $12)
	$1 = ($1 + [-12])
	
.LOOP $label$57:
	if ( ((*($1) & [1]) == 0) ){ goto $label$58 }
	CALL $108(*(($1 + [8])))
	
.LABEL $label$58
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$57 }
	$1 = *($16 + [112])
	goto $label$24 
	
.LABEL $label$28
	$6 = (($1 + [16]) & [-16])
	$7 = CALL $107($6)
	*($16 + [96]) = ($6 | [1])
	*($16 + [104]) = $7
	*($16 + [100]) = $1
	
.LABEL $label$27
	CALL memcpy($7, [2480], $1)
	
.LABEL $label$26
	*(($7 + $1)) = [0]
	CALL _Z11splitstringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_($12, ($16 + [112]), ($16 + [96]))
	if ( ((*($16 + [96]) & [1]) == 0) ){ goto $label$59 }
	CALL $108(*($16 + [104]))
	
.LABEL $label$59
	$11 = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(*($16 + [112]), [0], [10])
	*($16 + [72]) = $5
	*(($16 + [40])) = $5
	*($16 + [64]) = $4
	*($16 + [32]) = $4
	CALL _ZN9justaward7buydrugEyyN5eosio5assetE($0, $11, $3, ($16 + [32]))
	$12 = *($16 + [112])
	if ( ($12 == 0) ){ goto $label$20 }
	$1 = *($16 + [116])
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$22 }
	$7 = ([0] - $12)
	$1 = ($1 + [-12])
	
.LOOP $label$60:
	if ( ((*($1) & [1]) == 0) ){ goto $label$61 }
	CALL $108(*(($1 + [8])))
	
.LABEL $label$61
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$60 }
	$1 = *($16 + [112])
	goto $label$21 
	
.LABEL $label$25
	$1 = $12
	
.LABEL $label$24
	*($16 + [116]) = $12
	CALL $108($1)
	
.LABEL $label$23
	$12 = *($16 + [128])
	if ( ($12 == 0) ){ goto $label$1 }
	$1 = *($16 + [132])
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$63 }
	$7 = ([0] - $12)
	$1 = ($1 + [-12])
	
.LOOP $label$64:
	if ( ((*($1) & [1]) == 0) ){ goto $label$65 }
	CALL $108(*(($1 + [8])))
	
.LABEL $label$65
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$64 }
	$1 = *($16 + [128])
	goto $label$62 
	
.LABEL $label$63
	$1 = $12
	
.LABEL $label$62
	*($16 + [132]) = $12
	CALL $108($1)
	goto $label$1 
	
.LABEL $label$22
	$1 = $12
	
.LABEL $label$21
	*($16 + [116]) = $12
	CALL $108($1)
	
.LABEL $label$20
	$12 = *($16 + [128])
	if ( ($12 == 0) ){ goto $label$1 }
	$1 = *($16 + [132])
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$67 }
	$7 = ([0] - $12)
	$1 = ($1 + [-12])
	
.LOOP $label$68:
	if ( ((*($1) & [1]) == 0) ){ goto $label$69 }
	CALL $108(*(($1 + [8])))
	
.LABEL $label$69
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$68 }
	$1 = *($16 + [128])
	goto $label$66 
	
.LABEL $label$67
	$1 = $12
	
.LABEL $label$66
	*($16 + [132]) = $12
	CALL $108($1)
	goto $label$1 
	
.LABEL $label$19
	CALL $109(($16 + [112]))
	
.LABEL $label$18
	CALL $109(($16 + [96]))
	
.LABEL $label$17
	CALL $109(($16 + [96]))
	
.LABEL $label$1
	if ( ((*($16 + [144]) & [1]) == 0) ){ goto $label$70 }
	CALL $108(*($16 + [152]))
	
.LABEL $label$70
	*([0] + [4]) = ($16 + [160])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZN9justaward5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [256])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1088]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$8 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $92(($9 + [208]))
	CALL _ZN9justaward2onERKN5eosio8currency8transferEy($0, ($9 + [208]), $6)
	if ( ((*($9 + [240]) & [1]) == 0) ){ goto $label$7 }
	CALL $108(*(($9 + [248])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)$2 <= (int_64)4855044333880644607) ){ goto $label$20 }
	if ( ((int_64)$2 <= (int_64)4855333024507625471) ){ goto $label$19 }
	if ( ((int_64)$2 > (int_64)5383991118834696191) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)4855333024507625472) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)5378313531236024320) ){ goto $label$7 }
	*($9 + [172]) = [0]
	*($9 + [168]) = [1]
	*($9 + [32 align=4]) = *($9 + [168])
	CALL $96($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$20
	if ( ((int_64)$2 > (int_64)-2039333636195483649) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-4417020450404564992) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$7 }
	*($9 + [164]) = [0]
	*($9 + [160]) = [2]
	*($9 + [40 align=4]) = *($9 + [160])
	CALL $96($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)4855044333880644608) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)4855137282754084864) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)4855213992346386432) ){ goto $label$7 }
	*($9 + [132]) = [0]
	*($9 + [128]) = [3]
	*($9 + [72 align=4]) = *($9 + [128])
	CALL $94($0, ($9 + [72]))
	goto $label$7 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-2039333636195483648) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)3626124950450356224) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)4520790822920126464) ){ goto $label$7 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [4]
	*($9 + [24 align=4]) = *($9 + [176])
	CALL $95($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)5383991118834696192) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)6604225611667865600) ){ goto $label$7 }
	*($9 + [196]) = [0]
	*($9 + [192]) = [5]
	*($9 + [8 align=4]) = *($9 + [192])
	CALL $93($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$16
	*($9 + [116]) = [0]
	*($9 + [112]) = [6]
	*($9 + [88 align=4]) = *($9 + [112])
	CALL $94($0, ($9 + [88]))
	goto $label$7 
	
.LABEL $label$15
	*($9 + [140]) = [0]
	*($9 + [136]) = [7]
	*($9 + [64 align=4]) = *($9 + [136])
	CALL $97($0, ($9 + [64]))
	goto $label$7 
	
.LABEL $label$14
	*($9 + [204]) = [0]
	*($9 + [200]) = [8]
	*($9) = *($9 + [200])
	CALL $93($0, $9)
	goto $label$7 
	
.LABEL $label$13
	*($9 + [108]) = [0]
	*($9 + [104]) = [9]
	*($9 + [96 align=4]) = *($9 + [104])
	CALL $94($0, ($9 + [96]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [124]) = [0]
	*($9 + [120]) = [10]
	*($9 + [80 align=4]) = *($9 + [120])
	CALL $94($0, ($9 + [80]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [156]) = [0]
	*($9 + [152]) = [11]
	*($9 + [48 align=4]) = *($9 + [152])
	CALL $94($0, ($9 + [48]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [188]) = [0]
	*($9 + [184]) = [12]
	*($9 + [16 align=4]) = *($9 + [184])
	CALL $94($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [148]) = [0]
	*($9 + [144]) = [13]
	*($9 + [56 align=4]) = *($9 + [144])
	CALL $94($0, ($9 + [56]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [256])
}

void .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1184])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1040])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $99($6, $0)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $107($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $116($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_64 .FUNC strtoull (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $131 ()
{
	(unreachable)
}

int_32 .FUNC __errno_location ()
{
	return [11120]
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $107($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_64 .FUNC _Z8get_seedy (int_64 $0)
{
	return (int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$31())) + (int_64)$0) << (int_64)32) >> (int_64)32)
}

int_64 .FUNC _Z10srand_nexty (int_64 $0)
{
	return ((int_64)((int_64)((uint_64)$0 % (uint_64)(int_64)274390790648383) * (int_64)16807) + (int_64)((int_64)((uint_64)$0 / (uint_64)(int_64)274390790648383) * (int_64)-14822))
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN9justaward6finishEv (int_32 $0)
{
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [128])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $107([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [160])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $46(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC _ZN9justaward10adddevlistEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$25($1), [736])
	$2 = *(($0 + [272]))
	$7 = *(($0 + [276]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [248])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [8]) == (int_32)$4), [64])
	$7 = ($0 + [256])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = ($0 + [256])
	$3 = CALL db_find_i64(*(($0 + [248])), *($7), (int_64)5383797594050789376, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $45($4, $3)
	CALL eosio_assert(((int_32)*($6 + [8]) == (int_32)$4), [64])
	
.LABEL $label$3
	CALL eosio_assert(($6 == 0), [752])
	$5 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [248])) == (int_64)CALL $fimport$4()), [560])
	*(($6 = CALL $107([24])) + [8]) = $4
	*($6) = $1
	CALL eosio_assert([1], [416])
	CALL memcpy(($8 + [16]), $6, [8])
	$1 = *($6)
	$7 = CALL db_store_i64(*($7), (int_64)5383797594050789376, $5, $1, ($8 + [16]), [8])
	*($6 + [12]) = $7
	$4 = ($0 + [264])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [8]) = $6
	$1 = *($6)
	*($8 + [16]) = $1
	*($8 + [4]) = $7
	$3 = ($0 + [276])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [280]))) ){ goto $label$7 }
	*($4 + [8]) = $1
	*($4 + [16]) = $7
	*($8 + [8]) = [0]
	*($4) = $6
	*($3) = ($4 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $46(($0 + [272]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$6
	$6 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $108($6)
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [32])
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [11137])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [11137])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [11137]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [11137]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [11408]))
	$10 = *(($13 + [11137]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [11137]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [11137]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [11137]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [11137])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [11137])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [32])
	$6 = *($0 + [4])
	$7 = *(($6 + [132]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)6138858918308216833, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [132])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [120]) == (int_32)$2), [64])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $9($2, CALL $fimport$7(*($2), *($2 + [8]), (int_64)6138858918308216832, $3))
	CALL eosio_assert(((int_32)*($7 + [120]) == (int_32)$2), [64])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [132])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [128])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $107([136])) + [120]) = $0
	CALL $10(($8 + [32]), $6)
	*($6 + [128]) = [-1]
	*($6 + [124]) = $1
	*($6 + [132]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [124])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $11(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_64 .FUNC _ZN9justaward12get_tree_posEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*(($5 + [48])) = [0]
	*($5 + [24]) = $1
	*($5 + [32]) = (int_64)-1
	$1 = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [16]) = *($0)
	*($5 + [52]) = [0]
	*($5 + [8]) = ($5 + [16])
	*($5 + [56]) = (int_64)0
	CALL $7($5, ($5 + [8]), ($5 + [56]))
	$0 = *($5 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	$1 = (int_64)0
	
.LOOP $label$2:
	if ( ((int_64)*($0 + [48]) == (int_64)14) ){ goto $label$3 }
	if ( ((int_64)*($0 + [56]) != (int_64)$1) ){ goto $label$1 }
	$1 = ((int_64)$1 + (int_64)1)
	
.LABEL $label$3
	CALL $8($5)
	$0 = *($5 + [4])
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($5 + [40])
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $108($3)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($5 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $2
	
.LABEL $label$5
	*($4) = $2
	CALL $108($0)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [64])
	return $1
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)6138858918308216833, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$4), [64])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $9($4, CALL $fimport$7(*($4), *($4 + [8]), (int_64)6138858918308216832, $5))
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$4), [64])
	
.LABEL $label$4
	*(($2 + [132])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _ZN9justaward14get_buy_amountEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	CALL __multi3(($3 + [16]), $1, (int_64)0, (int_64)10000000000, (int_64)0)
	CALL __multi3(($3 + [32]), $2, (int_64)0, $2, (int_64)0)
	$1 = *($3 + [32])
	$2 = ((int_64)$1 + (int_64)500000000000)
	CALL __udivti3($3, *($3 + [16]), *((($3 + [16]) + [8])), $2, ((int_64)*((($3 + [32]) + [8])) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($2 <= $1)) : (uint_64)($2 <= (int_64)500000000000) )))
	CALL eosio_assert((int_64)(*(($3 + [8])) == 0), [16])
	$2 = *($3)
	*([0] + [4]) = ($3 + [48])
	return $2
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN9justaward12chkdead_userEymy (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_64 $26
	int_32 $27
	$27 = (*([0] + [4]) - [256])
	*([0] + [4]) = $27
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$6 = *(($1 + [192]))
	$11 = *(($1 + [196]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$1 }
	$25 = ($11 + [-24])
	$10 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($25)) == (int_64)$2) ){ goto $label$1 }
	$11 = $25
	$12 = ($25 + [-24])
	$25 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($1 + [168])
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$5 }
	$24 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [160]) == (int_32)$5), [64])
	if ( $24 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$25 = CALL db_find_i64(*(($1 + [168])), *(($1 + [176])), (int_64)-6030912134838419456, $2)
	if ( ((int_32)$25 < (int_32)[0]) ){ goto $label$3 }
	$24 = CALL $15($5, $25)
	CALL eosio_assert(((int_32)*($24 + [160]) == (int_32)$5), [64])
	
.LABEL $label$4
	$13 = (int_64)($4 == 0)
	if ( $13 ){ goto $label$6 }
	if ( ((uint_64)*($24 + [128]) >= (uint_64)$4) ){ goto $label$3 }
	
.LABEL $label$6
	*((($27 + [8]) + [32])) = [0]
	*($27 + [16]) = $2
	*($27 + [24]) = (int_64)-1
	$7 = (int_64)0
	*($27 + [32]) = (int_64)0
	*($27 + [8]) = *($1)
	*($27 + [44]) = [0]
	*($27) = ($27 + [8])
	CALL $16(($27 + [224]), $27, [168])
	$26 = (int_64)0
	$25 = *($27 + [228])
	if ( ($25 == 0) ){ goto $label$7 }
	$6 = ($1 + [128])
	$14 = ($1 + [152])
	$15 = ($1 + [156])
	$16 = ($1 + [136])
	$17 = ($27 + [56])
	$18 = ($27 + [64])
	$19 = ($27 + [72])
	$20 = (($27 + [48]) + [32])
	$22 = ($27 + [84])
	$23 = ($27 + [76])
	$26 = (int_64)0
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((int_64)*($25 + [48]) != (int_64)18) ){ goto $label$7 }
	if ( ((uint_32)*($25 + [44]) > (uint_32)$3) ){ goto $label$9 }
	$8 = *($25 + [8])
	$2 = *($25)
	$9 = *($14)
	$11 = *($15)
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$10 }
	$25 = ($11 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$11:
	if ( ((int_64)*(*($25)) == (int_64)$2) ){ goto $label$10 }
	$11 = $25
	$12 = ($25 + [-24])
	$25 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$13 }
	$25 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($25 + [120]) == (int_32)$6), [64])
	goto $label$12 
	
.LABEL $label$13
	$25 = [0]
	$12 = CALL db_find_i64(*($6), *($16), (int_64)6138858918308216832, $2)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$12 }
	$25 = CALL $9($6, $12)
	CALL eosio_assert(((int_32)*($25 + [120]) == (int_32)$6), [64])
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*($25 + [8]) == (int_64)$8), [176])
	*($17) = $8
	*($18) = (int_64)-1
	*($19) = (int_64)0
	$12 = [0]
	*($20) = [0]
	$21 = *($1)
	*($27 + [48]) = $21
	*($22) = [0]
	$11 = CALL db_find_i64($21, $8, (int_64)6138858918308216832, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$14 }
	$12 = CALL $9(($27 + [48]), $11)
	CALL eosio_assert(((int_32)*($12 + [120]) == (int_32)($27 + [48])), [64])
	
.LABEL $label$14
	CALL $17($6, $6, $25, *($1))
	CALL $17(($27 + [48]), ($27 + [48]), $12, *($1))
	$11 = *($19)
	if ( ($11 == 0) ){ goto $label$15 }
	$25 = *($23)
	if ( ((int_32)$25 == (int_32)$11) ){ goto $label$17 }
	
.LOOP $label$18:
	$25 = ($25 + [-24])
	$12 = *($25)
	*($25) = [0]
	if ( ($12 == 0) ){ goto $label$19 }
	CALL $108($12)
	
.LABEL $label$19
	if ( ((int_32)$11 != (int_32)$25) ){ goto $label$18 }
	$25 = *($19)
	goto $label$16 
	
.LABEL $label$17
	$25 = $11
	
.LABEL $label$16
	*($23) = $11
	CALL $108($25)
	
.LABEL $label$15
	$7 = ((int_64)*(*($27 + [228]) + [24]) + (int_64)$7)
	
.LABEL $label$9
	$26 = ((int_64)$26 + (int_64)1)
	CALL $18(($27 + [224]))
	$25 = *($27 + [228])
	if ( $25 ){ goto $label$8 }
	
.LABEL $label$7
	if ( $13 ){ goto $label$20 }
	$8 = *($1)
	CALL eosio_assert([1], [192])
	CALL eosio_assert(((int_32)*($24 + [160]) == (int_32)$5), [240])
	CALL eosio_assert(((int_64)*(($1 + [168])) == (int_64)CALL $fimport$4()), [288])
	$25 = ($24 + [128])
	$2 = *($25)
	*($25) = $4
	$25 = ($24 + [136])
	*($27 + [224]) = *($25)
	*($27 + [232]) = $2
	$2 = *($24)
	CALL eosio_assert([1], [352])
	*($27 + [216]) = (($27 + [48]) + [160])
	*($27 + [212]) = ($27 + [48])
	*($27 + [208]) = ($27 + [48])
	CALL $19(($27 + [208]), $24)
	CALL db_update_i64(*($24 + [164]), $8, ($27 + [48]), [160])
	$12 = ($1 + [184])
	if ( (uint_64)($2 <= *($12)) ){ goto $label$21 }
	*($12) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	$12 = (($27 + [224]) + [8])
	*($27 + [248]) = *($25)
	if ( (CALL memcmp(($27 + [224]), ($27 + [248]), [8]) == 0) ){ goto $label$22 }
	$11 = ($24 + [168])
	$25 = *($11)
	if ( ((int_32)$25 > (int_32)[-1]) ){ goto $label$23 }
	$25 = CALL db_idx64_find_primary(*(($1 + [168])), *(($1 + [176])), (int_64)-6030912134838419456, ($27 + [240]), $2)
	*($11) = $25
	
.LABEL $label$23
	CALL db_idx64_update($25, $8, ($27 + [248]))
	
.LABEL $label$22
	*($27 + [248]) = *(($24 + [128]))
	if ( (CALL memcmp($12, ($27 + [248]), [8]) == 0) ){ goto $label$20 }
	$12 = ($24 + [172])
	$25 = *($12)
	if ( ((int_32)$25 > (int_32)[-1]) ){ goto $label$24 }
	$25 = CALL db_idx64_find_primary(*(($1 + [168])), *(($1 + [176])), (int_64)-6030912134838419455, ($27 + [240]), $2)
	*($12) = $25
	
.LABEL $label$24
	CALL db_idx64_update($25, $8, ($27 + [248]))
	
.LABEL $label$20
	*($0) = $7
	*(($0 + [32])) = $26
	$11 = *($27 + [32])
	if ( ($11 == 0) ){ goto $label$3 }
	$10 = ($27 + [36])
	$25 = *($10)
	if ( ((int_32)$25 == (int_32)$11) ){ goto $label$26 }
	
.LOOP $label$27:
	$25 = ($25 + [-24])
	$12 = *($25)
	*($25) = [0]
	if ( ($12 == 0) ){ goto $label$28 }
	CALL $108($12)
	
.LABEL $label$28
	if ( ((int_32)$11 != (int_32)$25) ){ goto $label$27 }
	$25 = *(($27 + [32]))
	goto $label$25 
	
.LABEL $label$26
	$25 = $11
	
.LABEL $label$25
	*($10) = $11
	CALL $108($25)
	
.LABEL $label$3
	*([0] + [4]) = ($27 + [256])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [128])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $107([176])) + [160]) = $0
	CALL $21(($8 + [32]), $6)
	*($6 + [168]) = [-1]
	*($6 + [164]) = $1
	*($6 + [172]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [164])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $22(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)6138858918308216832, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$4), [64])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $9($4, CALL $fimport$7(*($4), *($4 + [8]), (int_64)6138858918308216832, $5))
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$4), [64])
	
.LABEL $label$4
	*(($2 + [128])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [176])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [288])
	$6 = ($2 + [48])
	$5 = *($6)
	*($6) = (int_64)16
	*($8 + [144]) = $5
	*($8 + [152]) = *(($2 + [56]))
	$5 = *($2)
	CALL eosio_assert([1], [352])
	*($8 + [136]) = ($8 + [120])
	*($8 + [132]) = $8
	*($8 + [128]) = $8
	CALL $20(($8 + [128]), $2)
	CALL db_update_i64(*($2 + [124]), $3, $8, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = (($8 + [144]) + [8])
	*($8 + [168]) = *($6)
	if ( (CALL memcmp(($8 + [144]), ($8 + [168]), [8]) == 0) ){ goto $label$2 }
	$7 = ($2 + [128])
	$6 = *($7)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216832, ($8 + [160]), $5)
	*($7) = $6
	
.LABEL $label$3
	CALL db_idx64_update($6, $3, ($8 + [168]))
	
.LABEL $label$2
	*($8 + [168]) = *(($2 + [56]))
	if ( (CALL memcmp($4, ($8 + [168]), [8]) == 0) ){ goto $label$4 }
	$6 = ($2 + [132])
	$2 = *($6)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216833, ($8 + [160]), $5)
	*($6) = $2
	
.LABEL $label$5
	CALL db_idx64_update($2, $3, ($8 + [168]))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [176])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [160])
	CALL memcpy(($1 + [44]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z11splitstringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [16])
	*([0] + [4]) = $14
	$4 = ($2 + [1])
	$3 = ($0 + [1])
	$13 = *($2 + [4])
	$7 = *($2)
	$11 = ($0 + [4])
	$12 = [0]
	
.LOOP $label$2:
	$9 = ($10 & [1])
	$10 = *($0)
	$8 = ( *($11) ? uint_32($10 >> [1]) : $9 )
	if ( ($8 <= $12) ){ goto $label$1 }
	$10 = $12
	$6 = ($7 & [1])
	$7 = ( $13 ? uint_32(($7 & [254]) >> [1]) : $6 )
	if ( ($7 == 0) ){ goto $label$3 }
	$13 = ($5 + $12)
	$5 = ( *(($0 + [8])) ? $3 : $9 )
	$8 = ($5 + $8)
	$10 = ($8 - $13)
	if ( ((int_32)$10 < (int_32)$7) ){ goto $label$1 }
	$6 = ( *(($2 + [8])) ? $4 : $6 )
	$9 = *($6)
	
.LOOP $label$4:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$1 }
	$10 = CALL memchr($13, $9, $10)
	if ( ($10 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($10, $6, $7) == 0) ){ goto $label$5 }
	$13 = ($10 + [1])
	$10 = ($8 - $13)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$1 }
	$10 = ($10 - $5)
	
.LABEL $label$3
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$1 }
	CALL $120($14, $0, $12, ($10 - $12), $0)
	$7 = ($1 + [4])
	$13 = *($7)
	if ( ((uint_32)$13 >= (uint_32)*(($1 + [8]))) ){ goto $label$7 }
	*($13) = *($14)
	$13 = ($14 + [8])
	*(($13 + [8])) = *($13)
	*($13) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*($7) = (*($7) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $13($1, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$6 }
	CALL $108(*(($14 + [8])))
	
.LABEL $label$6
	$7 = *($2)
	$13 = *(($2 + [4]))
	$12 = (( $13 ? uint_32($7 >> [1]) : ($7 & [1]) ) + $10)
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	if ( ((int_32)$12 == (int_32)( *(($0 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$8 }
	CALL $120($14, $0, $12, [-1], $0)
	$7 = *(($1 + [4]))
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [8]))) ){ goto $label$9 }
	*($7) = *($14)
	$7 = ($14 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*(($7 = ($1 + [4]))) = (*($7) + [12])
	goto $label$8 
	
.LABEL $label$9
	CALL $13($1, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$8 }
	CALL $108(*($14 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($14 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $108(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $108($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [176])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [288])
	$6 = ($2 + [48])
	*($8 + [144]) = *($6)
	*($8 + [152]) = *(($2 + [56]))
	$5 = *($2)
	*($2 + [112]) = *(*(*($4) + [4]) + [72])
	CALL eosio_assert([1], [352])
	*($8 + [136]) = ($8 + [120])
	*($8 + [132]) = $8
	*($8 + [128]) = $8
	CALL $20(($8 + [128]), $2)
	CALL db_update_i64(*($2 + [124]), $3, $8, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = (($8 + [144]) + [8])
	*($8 + [168]) = *($6)
	if ( (CALL memcmp(($8 + [144]), ($8 + [168]), [8]) == 0) ){ goto $label$2 }
	$7 = ($2 + [128])
	$6 = *($7)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216832, ($8 + [160]), $5)
	*($7) = $6
	
.LABEL $label$3
	CALL db_idx64_update($6, $3, ($8 + [168]))
	
.LABEL $label$2
	*($8 + [168]) = *(($2 + [56]))
	if ( (CALL memcmp($4, ($8 + [168]), [8]) == 0) ){ goto $label$4 }
	$4 = ($2 + [132])
	$2 = *($4)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216833, ($8 + [160]), $5)
	*($4) = $2
	
.LABEL $label$5
	CALL db_idx64_update($2, $3, ($8 + [168]))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [176])
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [32])
	$6 = *($0 + [4])
	$7 = *($6 + [128])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)6138858918308216832, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [128]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [120]) == (int_32)$2), [64])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $9($2, CALL $fimport$7(*($2), *($2 + [8]), (int_64)6138858918308216832, $3))
	CALL eosio_assert(((int_32)*($7 + [120]) == (int_32)$2), [64])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [128])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $62($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [416])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [416])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $64(CALL $63($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $107(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $118($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $108($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC _ZN9justaward7buytreeEyN5eosio5assetEyy (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_32 $35
	$35 = (*([0] + [4]) - [416])
	*([0] + [4]) = $35
	*($35 + [216]) = $3
	CALL eosio_assert(((int_64)*($0) != (int_64)$1), [768])
	CALL require_auth($1)
	$3 = CALL current_time()
	*((($35 + [176]) + [32])) = [0]
	*($35 + [184]) = $1
	*($35 + [192]) = (int_64)-1
	*($35 + [200]) = (int_64)0
	*($35 + [176]) = *($0)
	*($35 + [212]) = [0]
	$33 = ((uint_64)$3 / (uint_64)(int_64)1000000)
	$30 = *(($0 + [32]))
	$10 = *(($0 + [36]))
	if ( ((int_32)$10 == (int_32)$30) ){ goto $label$1 }
	$31 = ($10 + [-24])
	$29 = ([0] - $30)
	
.LOOP $label$2:
	if ( (int_64)(*(*($31)) == 0) ){ goto $label$1 }
	$10 = $31
	$25 = ($31 + [-24])
	$31 = $25
	if ( ((int_32)($25 + $29) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [8])
	if ( ((int_32)$10 == (int_32)$30) ){ goto $label$4 }
	$7 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$6), [64])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$31 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159545106726912, (int_64)0)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $35($6, $31)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$6), [64])
	
.LABEL $label$3
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [800])
	$3 = *($7 + [8])
	$30 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$30) ){ goto $label$5 }
	$31 = ($10 + [-24])
	$29 = ([0] - $30)
	
.LOOP $label$6:
	if ( ((int_64)*(*($31)) == (int_64)$3) ){ goto $label$5 }
	$10 = $31
	$25 = ($31 + [-24])
	$31 = $25
	if ( ((int_32)($25 + $29) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$9 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$30) ){ goto $label$8 }
	$10 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [96]) == (int_32)$9), [64])
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	$31 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035932468960034816, $3)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $36($9, $31)
	CALL eosio_assert(((int_32)*($10 + [96]) == (int_32)$9), [64])
	
.LABEL $label$7
	$5 = (CASTING uint_32)(uint_64 $33)
	$11 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($11, [800])
	$34 = *($2)
	CALL __multi3(($35 + [16]), $34, (int_64)0, (int_64)10000000000, (int_64)0)
	$12 = *($10 + [8])
	CALL __multi3(($35 + [32]), $12, (int_64)0, $12, (int_64)0)
	$32 = *($35 + [32])
	$3 = ((int_64)$32 + (int_64)500000000000)
	CALL __udivti3($35, *($35 + [16]), *((($35 + [16]) + [8])), $3, ((int_64)*((($35 + [32]) + [8])) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($3 <= $32)) : (uint_64)($3 <= (int_64)500000000000) )))
	$16 = *($10 + [24])
	$17 = *($10 + [36])
	$14 = *($10 + [72])
	$28 = *($10 + [88])
	$13 = *($10 + [64])
	$21 = *($10 + [56])
	CALL eosio_assert((int_64)(*(($35 + [8])) == 0), [16])
	$15 = *($35)
	CALL eosio_assert(((int_64)$15 != (int_64)0), [832])
	CALL eosio_assert((uint_64)(*($10 + [24]) <= (int_64)6), [864])
	$3 = *($10 + [24])
	if ( ((int_64)$3 == (int_64)4) ){ goto $label$11 }
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$10 }
	$17 = ($5 + [86400])
	$16 = (int_64)4
	goto $label$9 
	
.LABEL $label$11
	$31 = ($10 + [36])
	CALL eosio_assert(((uint_32)$5 <= (uint_32)*($31)), [864])
	$33 = ((int_64)((int_64)$33 & (int_64)4294967295) + (int_64)86400)
	$3 = ((int_64)*($31) + (int_64)((int_64)$15 * (int_64)5))
	$17 = (CASTING uint_32)(uint_64 ( $3 ? $33 : (uint_64)($3 <= $33) ))
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert([0], [896])
	
.LABEL $label$9
	$20 = *(($0 + [192]))
	$29 = *(($0 + [196]))
	if ( ((int_32)$29 == (int_32)$20) ){ goto $label$12 }
	$31 = ($29 + [-24])
	$30 = ([0] - $20)
	
.LOOP $label$13:
	if ( ((int_64)*(*($31)) == (int_64)$1) ){ goto $label$12 }
	$29 = $31
	$25 = ($31 + [-24])
	$31 = $25
	if ( ((int_32)($25 + $30) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$18 = ($0 + [168])
	if ( ((int_32)$29 == (int_32)$20) ){ goto $label$17 }
	$29 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($29 + [160]) == (int_32)$18), [64])
	if ( $29 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$31 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, $1)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$15 }
	$29 = CALL $15($18, $31)
	CALL eosio_assert(((int_32)*($29 + [160]) == (int_32)$18), [64])
	
.LABEL $label$16
	CALL eosio_assert((uint_64)(*($29 + [8]) <= *($29 + [48])), [928])
	$32 = *($29 + [48])
	$33 = *($0)
	$22 = *($29 + [40])
	CALL eosio_assert([1], [192])
	CALL eosio_assert(((int_32)*($29 + [160]) == (int_32)$18), [240])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [288])
	*($29 + [8]) = ((int_64)*($29 + [8]) + (int_64)1)
	$31 = ($29 + [136])
	*($35 + [128]) = *($31)
	*($35 + [136]) = *(($29 + [128]))
	$3 = *($29)
	*($29 + [32]) = ((int_64)*($29 + [32]) + (int_64)1)
	$22 = ((int_64)$22 + (int_64)$15)
	*($29 + [40]) = $22
	CALL eosio_assert([1], [352])
	*($35 + [88]) = (($35 + [224]) + [160])
	*($35 + [84]) = ($35 + [224])
	*($35 + [80]) = ($35 + [224])
	CALL $19(($35 + [80]), $29)
	CALL db_update_i64(*($29 + [164]), $33, ($35 + [224]), [160])
	$25 = ($0 + [184])
	if ( (uint_64)($3 <= *($25)) ){ goto $label$18 }
	*($25) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	$25 = (($35 + [128]) + [8])
	*($35 + [64]) = *($31)
	if ( (CALL memcmp(($35 + [128]), ($35 + [64]), [8]) == 0) ){ goto $label$19 }
	$30 = ($29 + [168])
	$31 = *($30)
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$20 }
	$31 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, ($35 + [392]), $3)
	*($30) = $31
	
.LABEL $label$20
	CALL db_idx64_update($31, $33, ($35 + [64]))
	
.LABEL $label$19
	*($35 + [64]) = *(($29 + [128]))
	if ( (CALL memcmp($25, ($35 + [64]), [8]) == 0) ){ goto $label$14 }
	$25 = ($29 + [172])
	$31 = *($25)
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$21 }
	$31 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419455, ($35 + [392]), $3)
	*($25) = $31
	
.LABEL $label$21
	CALL db_idx64_update($31, $33, ($35 + [64]))
	goto $label$14 
	
.LABEL $label$15
	$3 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [560])
	*(($31 = CALL $107([176])) + [160]) = $18
	*($31 + [8]) = (int_64)1
	*($31) = $1
	*($31 + [32]) = (int_64)1
	*($31 + [40]) = $15
	*($31 + [48]) = (int_64)16
	*($35 + [136]) = (($35 + [224]) + [160])
	*($35 + [132]) = ($35 + [224])
	*($35 + [128]) = ($35 + [224])
	CALL $19(($35 + [128]), $31)
	$33 = *($31)
	$25 = ($0 + [176])
	*($31 + [164]) = CALL db_store_i64(*($25), (int_64)-6030912134838419456, $3, $33, ($35 + [224]), [160])
	$29 = ($0 + [184])
	if ( (uint_64)($33 <= *($29)) ){ goto $label$22 }
	*($29) = ( (int_64)-2 ? ((int_64)$33 + (int_64)1) : ((uint_64)$33 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	$33 = *($25)
	$32 = *($31)
	*($35 + [80]) = *($31 + [136])
	*($31 + [168]) = CALL db_idx64_store($33, (int_64)-6030912134838419456, $3, $32, ($35 + [80]))
	$33 = *($25)
	$32 = *($31)
	*($35 + [80]) = *($31 + [128])
	*($31 + [172]) = CALL db_idx64_store($33, (int_64)-6030912134838419455, $3, $32, ($35 + [80]))
	*($35 + [128]) = $31
	$3 = *($31)
	*($35 + [224]) = $3
	$29 = *(($31 + [164]))
	*($35 + [80]) = $29
	$30 = ($0 + [196])
	$25 = *($30)
	if ( ((uint_32)$25 >= (uint_32)*(($0 + [200]))) ){ goto $label$24 }
	*($25 + [8]) = $3
	*($25 + [16]) = $29
	*($35 + [128]) = [0]
	*($25) = $31
	*($30) = ($25 + [24])
	goto $label$23 
	
.LABEL $label$24
	CALL $22(($0 + [192]), ($35 + [128]), ($35 + [224]), ($35 + [80]))
	
.LABEL $label$23
	$31 = *($35 + [128])
	*($35 + [128]) = [0]
	if ( ($31 == 0) ){ goto $label$25 }
	CALL $108($31)
	
.LABEL $label$25
	$20 = *(($0 + [192]))
	$29 = *(($0 + [196]))
	if ( ((int_32)$29 == (int_32)$20) ){ goto $label$26 }
	$31 = ($29 + [-24])
	$30 = ([0] - $20)
	
.LOOP $label$27:
	if ( ((int_64)*(*($31)) == (int_64)$1) ){ goto $label$26 }
	$29 = $31
	$25 = ($31 + [-24])
	$31 = $25
	if ( ((int_32)($25 + $30) != (int_32)[-24]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$29 == (int_32)$20) ){ goto $label$29 }
	$29 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($29 + [160]) == (int_32)$18), [64])
	$32 = (int_64)16
	goto $label$28 
	
.LABEL $label$29
	$29 = [0]
	$32 = (int_64)16
	$31 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, $1)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$28 }
	$29 = CALL $15($18, $31)
	CALL eosio_assert(((int_32)*($29 + [160]) == (int_32)$18), [64])
	
.LABEL $label$28
	$22 = $15
	
.LABEL $label$14
	$19 = *(($0 + [232]))
	$30 = *(($0 + [236]))
	if ( ((int_32)$30 == (int_32)$19) ){ goto $label$30 }
	$31 = ($30 + [-24])
	$20 = ([0] - $19)
	
.LOOP $label$31:
	if ( ((int_64)*(*($31)) == (int_64)$1) ){ goto $label$30 }
	$30 = $31
	$25 = ($31 + [-24])
	$31 = $25
	if ( ((int_32)($25 + $20) != (int_32)[-24]) ){ goto $label$31 }
	
.LABEL $label$30
	$25 = ($0 + [208])
	if ( ((int_32)$30 == (int_32)$19) ){ goto $label$36 }
	$31 = *(($30 + [-24]))
	CALL eosio_assert(((int_32)*($31 + [32]) == (int_32)$25), [64])
	*($35 + [168]) = $25
	if ( $31 ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$31 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)-6030912130220556288, $1)
	if ( ((int_32)$31 <= (int_32)[-1]) ){ goto $label$34 }
	$31 = CALL $51($25, $31)
	CALL eosio_assert(((int_32)*($31 + [32]) == (int_32)$25), [64])
	*($35 + [168]) = $25
	
.LABEL $label$35
	$33 = *($0)
	CALL eosio_assert([1], [192])
	CALL eosio_assert(((int_32)*($31 + [32]) == (int_32)$25), [240])
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$4()), [288])
	$25 = ($31 + [8])
	$3 = *($25)
	*($25) = $22
	*($31 + [16]) = *($29 + [32])
	*($35 + [64]) = $3
	$3 = *($31)
	*($31 + [24]) = *($29 + [144])
	CALL eosio_assert([1], [352])
	CALL eosio_assert([1], [416])
	CALL memcpy(($35 + [224]), $31, [8])
	CALL eosio_assert([1], [416])
	CALL memcpy((($35 + [224]) | [8]), $25, [8])
	CALL eosio_assert([1], [416])
	CALL memcpy((($35 + [224]) + [16]), ($31 + [16]), [8])
	CALL eosio_assert([1], [416])
	CALL memcpy((($35 + [224]) + [24]), ($31 + [24]), [8])
	CALL db_update_i64(*($31 + [36]), $33, ($35 + [224]), [32])
	$30 = ($0 + [224])
	if ( (uint_64)($3 <= *($30)) ){ goto $label$37 }
	*($30) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$37
	*($35 + [128]) = *($25)
	if ( (CALL memcmp(($35 + [64]), ($35 + [128]), [8]) == 0) ){ goto $label$32 }
	$25 = ($31 + [40])
	$31 = *($25)
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$38 }
	$31 = CALL db_idx64_find_primary(*(($0 + [208])), *(($0 + [216])), (int_64)-6030912130220556288, ($35 + [80]), $3)
	*($25) = $31
	
.LABEL $label$38
	CALL db_idx64_update($31, $33, ($35 + [128]))
	goto $label$32 
	
.LABEL $label$34
	*($35 + [168]) = $25
	
.LABEL $label$33
	if ( (uint_64)($21 <= (int_64)7) ){ goto $label$41 }
	*($35 + [224]) = (int_64)0
	CALL $52(($35 + [80]), ($35 + [168]), ($35 + [224]))
	$31 = *($35 + [84])
	if ( ($31 == 0) ){ goto $label$32 }
	if ( ((uint_64)*($31 + [8]) > (uint_64)$22) ){ goto $label$32 }
	$3 = *($35 + [80])
	*($35 + [224]) = $3
	$31 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$31) != (int_32)[0]), [960])
	CALL $53(($35 + [224]))
	CALL $54(*($35 + [168]), $31)
	$3 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$4()), [560])
	*(($31 = CALL $107([48])) + [32]) = $25
	*($31 + [8]) = $22
	*($31) = $1
	*($31 + [16]) = *($29 + [32])
	*($31 + [24]) = *($29 + [144])
	CALL eosio_assert([1], [416])
	CALL memcpy(($35 + [224]), $31, [8])
	CALL eosio_assert([1], [416])
	$25 = ($31 + [8])
	CALL memcpy((($35 + [224]) | [8]), $25, [8])
	CALL eosio_assert([1], [416])
	CALL memcpy((($35 + [224]) + [16]), ($31 + [16]), [8])
	CALL eosio_assert([1], [416])
	CALL memcpy((($35 + [224]) + [24]), ($31 + [24]), [8])
	$33 = *($31)
	$30 = ($0 + [216])
	*($31 + [36]) = CALL db_store_i64(*($30), (int_64)-6030912130220556288, $3, $33, ($35 + [224]), [32])
	$20 = ($0 + [224])
	if ( (uint_64)($33 <= *($20)) ){ goto $label$42 }
	*($20) = ( (int_64)-2 ? ((int_64)$33 + (int_64)1) : ((uint_64)$33 > (uint_64)(int_64)-3) )
	
.LABEL $label$42
	$33 = *($30)
	$22 = *($31)
	*($35 + [128]) = *($25)
	*($31 + [40]) = CALL db_idx64_store($33, (int_64)-6030912130220556288, $3, $22, ($35 + [128]))
	*($35 + [128]) = $31
	$3 = *($31)
	*($35 + [224]) = $3
	$30 = *(($31 + [36]))
	*($35 + [64]) = $30
	$20 = ($0 + [236])
	$25 = *($20)
	if ( ((uint_32)$25 >= (uint_32)*(($0 + [240]))) ){ goto $label$40 }
	*($25 + [8]) = $3
	*($25 + [16]) = $30
	*($35 + [128]) = [0]
	*($25) = $31
	*($20) = ($25 + [24])
	goto $label$39 
	
.LABEL $label$41
	$3 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$4()), [560])
	*(($31 = CALL $107([48])) + [32]) = $25
	*($31 + [8]) = $22
	*($31) = $1
	*($31 + [16]) = *($29 + [32])
	*($31 + [24]) = *($29 + [144])
	CALL eosio_assert([1], [416])
	CALL memcpy(($35 + [224]), $31, [8])
	CALL eosio_assert([1], [416])
	$25 = ($31 + [8])
	CALL memcpy((($35 + [224]) | [8]), $25, [8])
	CALL eosio_assert([1], [416])
	CALL memcpy((($35 + [224]) + [16]), ($31 + [16]), [8])
	CALL eosio_assert([1], [416])
	CALL memcpy((($35 + [224]) + [24]), ($31 + [24]), [8])
	$33 = *($31)
	$30 = ($0 + [216])
	*($31 + [36]) = CALL db_store_i64(*($30), (int_64)-6030912130220556288, $3, $33, ($35 + [224]), [32])
	$20 = ($0 + [224])
	if ( (uint_64)($33 <= *($20)) ){ goto $label$43 }
	*($20) = ( (int_64)-2 ? ((int_64)$33 + (int_64)1) : ((uint_64)$33 > (uint_64)(int_64)-3) )
	
.LABEL $label$43
	$33 = *($30)
	$22 = *($31)
	*($35 + [128]) = *($25)
	*($31 + [40]) = CALL db_idx64_store($33, (int_64)-6030912130220556288, $3, $22, ($35 + [128]))
	*($35 + [128]) = $31
	$3 = *($31)
	*($35 + [224]) = $3
	$30 = *(($31 + [36]))
	*($35 + [80]) = $30
	$20 = ($0 + [236])
	$25 = *($20)
	if ( ((uint_32)$25 >= (uint_32)*(($0 + [240]))) ){ goto $label$45 }
	*($25 + [8]) = $3
	*($25 + [16]) = $30
	*($35 + [128]) = [0]
	*($25) = $31
	*($20) = ($25 + [24])
	goto $label$44 
	
.LABEL $label$45
	CALL $55(($0 + [232]), ($35 + [128]), ($35 + [224]), ($35 + [80]))
	
.LABEL $label$44
	$31 = *($35 + [128])
	*($35 + [128]) = [0]
	if ( ($31 == 0) ){ goto $label$46 }
	CALL $108($31)
	
.LABEL $label$46
	$21 = ((int_64)$21 + (int_64)1)
	goto $label$32 
	
.LABEL $label$40
	CALL $55(($0 + [232]), ($35 + [128]), ($35 + [224]), ($35 + [64]))
	
.LABEL $label$39
	$31 = *($35 + [128])
	*($35 + [128]) = [0]
	if ( ($31 == 0) ){ goto $label$32 }
	CALL $108($31)
	
.LABEL $label$32
	CALL eosio_assert((uint_64)(*($35 + [216]) <= $32), [1008])
	*(($35 + [160])) = [0]
	*($35 + [136]) = $1
	*($35 + [144]) = (int_64)-1
	*($35 + [152]) = (int_64)0
	*($35 + [128]) = *($0)
	*($35 + [164]) = [0]
	*($35 + [120]) = ($35 + [128])
	CALL $7(($35 + [224]), ($35 + [120]), ($35 + [216]))
	$31 = *($35 + [228])
	if ( ($31 == 0) ){ goto $label$48 }
	if ( ((int_64)*($35 + [216]) != (int_64)*($31 + [56])) ){ goto $label$48 }
	$3 = *($35 + [224])
	*($35 + [80]) = $3
	$25 = [1]
	$31 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ($31) == 0) ){ goto $label$47 }
	
.LOOP $label$49:
	if ( ((int_64)*($31 + [56]) != (int_64)*($35 + [216])) ){ goto $label$47 }
	$25 = ($25 & ((int_64)*($31 + [48]) == (int_64)14))
	CALL $8(($35 + [80]))
	$31 = *($35 + [84])
	if ( $31 ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	*($35 + [84]) = [0]
	*($35 + [80]) = ($35 + [120])
	$25 = [1]
	
.LABEL $label$47
	CALL eosio_assert(($25 & [1]), [1008])
	$33 = ((uint_64)((int_64)$34 * (int_64)3) / (uint_64)(int_64)100)
	$24 = ((uint_64)((int_64)$34 * (int_64)9) / (uint_64)(int_64)100)
	$23 = ((uint_64)((int_64)$34 * (int_64)10) / (uint_64)(int_64)100)
	$22 = ((uint_64)((int_64)$34 * (int_64)62) / (uint_64)(int_64)100)
	$3 = $4
	if ( (CALL is_account(*($29 + [56])) == 0) ){ goto $label$50 }
	$3 = *(($29 + [56]))
	
.LABEL $label$50
	$19 = *(($0 + [192]))
	$30 = *(($0 + [196]))
	if ( ((int_32)$30 == (int_32)$19) ){ goto $label$51 }
	$31 = ($30 + [-24])
	$20 = ([0] - $19)
	
.LOOP $label$52:
	if ( ((int_64)*(*($31)) == (int_64)$3) ){ goto $label$51 }
	$30 = $31
	$25 = ($31 + [-24])
	$31 = $25
	if ( ((int_32)($25 + $20) != (int_32)[-24]) ){ goto $label$52 }
	
.LABEL $label$51
	if ( ((int_32)$30 == (int_32)$19) ){ goto $label$58 }
	$31 = *(($30 + [-24]))
	CALL eosio_assert(((int_32)*($31 + [160]) == (int_32)$18), [64])
	if ( $31 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$31 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, $3)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$56 }
	$31 = CALL $15($18, $31)
	CALL eosio_assert(((int_32)*($31 + [160]) == (int_32)$18), [64])
	
.LABEL $label$57
	if ( ((int_64)$3 != (int_64)$1) ){ goto $label$55 }
	$26 = ((uint_64)((int_64)$34 * (int_64)6) / (uint_64)(int_64)100)
	goto $label$54 
	
.LABEL $label$56
	$4 = ((uint_64)((int_64)$34 * (int_64)6) / (uint_64)(int_64)100)
	$26 = $33
	goto $label$53 
	
.LABEL $label$55
	if ( ((int_64)$3 != (int_64)$4) ){ goto $label$59 }
	if ( ((int_64)*(($29 + [56])) == (int_64)$4) ){ goto $label$59 }
	$32 = *($0)
	CALL eosio_assert(((int_32)$29 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($29 + [160]) == (int_32)$18), [240])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [288])
	*($29 + [56]) = $4
	$25 = ($29 + [136])
	*($35 + [80]) = *($25)
	*($35 + [88]) = *(($29 + [128]))
	$3 = *($29)
	CALL eosio_assert([1], [352])
	*($35 + [72]) = (($35 + [224]) + [160])
	*($35 + [68]) = ($35 + [224])
	*($35 + [64]) = ($35 + [224])
	CALL $19(($35 + [64]), $29)
	CALL db_update_i64(*($29 + [164]), $32, ($35 + [224]), [160])
	$30 = ($0 + [184])
	if ( (uint_64)($3 <= *($30)) ){ goto $label$60 }
	*($30) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$60
	$30 = (($35 + [80]) + [8])
	*($35 + [392]) = *($25)
	if ( (CALL memcmp(($35 + [80]), ($35 + [392]), [8]) == 0) ){ goto $label$61 }
	$20 = ($29 + [168])
	$25 = *($20)
	if ( ((int_32)$25 > (int_32)[-1]) ){ goto $label$62 }
	$25 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, ($35 + [48]), $3)
	*($20) = $25
	
.LABEL $label$62
	CALL db_idx64_update($25, $32, ($35 + [392]))
	
.LABEL $label$61
	*($35 + [392]) = *(($29 + [128]))
	if ( (CALL memcmp($30, ($35 + [392]), [8]) == 0) ){ goto $label$59 }
	$29 = ($29 + [172])
	$25 = *($29)
	if ( ((int_32)$25 > (int_32)[-1]) ){ goto $label$63 }
	$25 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419455, ($35 + [48]), $3)
	*($29) = $25
	
.LABEL $label$63
	CALL db_idx64_update($25, $32, ($35 + [392]))
	
.LABEL $label$59
	$4 = *($0)
	CALL eosio_assert([1], [192])
	CALL eosio_assert(((int_32)*($31 + [160]) == (int_32)$18), [240])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [288])
	*($31 + [80]) = ((int_64)*($31 + [80]) + (int_64)$33)
	$25 = ($31 + [136])
	*($35 + [80]) = *($25)
	*($35 + [88]) = *(($31 + [128]))
	$3 = *($31)
	CALL eosio_assert([1], [352])
	*($35 + [72]) = (($35 + [224]) + [160])
	*($35 + [68]) = ($35 + [224])
	*($35 + [64]) = ($35 + [224])
	CALL $19(($35 + [64]), $31)
	CALL db_update_i64(*($31 + [164]), $4, ($35 + [224]), [160])
	$29 = ($0 + [184])
	if ( (uint_64)($3 <= *($29)) ){ goto $label$64 }
	*($29) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$64
	$29 = (($35 + [80]) + [8])
	*($35 + [392]) = *($25)
	if ( (CALL memcmp(($35 + [80]), ($35 + [392]), [8]) == 0) ){ goto $label$65 }
	$30 = ($31 + [168])
	$25 = *($30)
	if ( ((int_32)$25 > (int_32)[-1]) ){ goto $label$66 }
	$25 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, ($35 + [48]), $3)
	*($30) = $25
	
.LABEL $label$66
	CALL db_idx64_update($25, $4, ($35 + [392]))
	
.LABEL $label$65
	*($35 + [392]) = *(($31 + [128]))
	if ( (CALL memcmp($29, ($35 + [392]), [8]) == 0) ){ goto $label$67 }
	$25 = ($31 + [172])
	$31 = *($25)
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$68 }
	$31 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419455, ($35 + [48]), $3)
	*($25) = $31
	
.LABEL $label$68
	CALL db_idx64_update($31, $4, ($35 + [392]))
	
.LABEL $label$67
	$26 = $33
	
.LABEL $label$54
	$4 = $33
	
.LABEL $label$53
	$3 = *($10 + [48])
	if ( CALL is_account($3) ){ goto $label$69 }
	*($35 + [224]) = (int_64)0
	CALL $52(($35 + [80]), ($35 + [168]), ($35 + [224]))
	if ( (*($35 + [84]) == 0) ){ goto $label$69 }
	*($35 + [228]) = [0]
	*($35 + [224]) = ($35 + [168])
	$3 = *(*(CALL $56(($35 + [224])) + [4]))
	
.LABEL $label$69
	if ( (CALL is_account($3) == 0) ){ goto $label$71 }
	$20 = *(($0 + [192]))
	$29 = *(($0 + [196]))
	if ( ((int_32)$29 == (int_32)$20) ){ goto $label$72 }
	$31 = ($29 + [-24])
	$30 = ([0] - $20)
	
.LOOP $label$73:
	if ( ((int_64)*(*($31)) == (int_64)$3) ){ goto $label$72 }
	$29 = $31
	$25 = ($31 + [-24])
	$31 = $25
	if ( ((int_32)($25 + $30) != (int_32)[-24]) ){ goto $label$73 }
	
.LABEL $label$72
	if ( ((int_32)$29 == (int_32)$20) ){ goto $label$75 }
	$31 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($31 + [160]) == (int_32)$18), [64])
	if ( $31 ){ goto $label$74 }
	goto $label$71 
	
.LABEL $label$75
	$31 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, $3)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$71 }
	$31 = CALL $15($18, $31)
	CALL eosio_assert(((int_32)*($31 + [160]) == (int_32)$18), [64])
	
.LABEL $label$74
	$33 = *($0)
	CALL eosio_assert([1], [192])
	CALL eosio_assert(((int_32)*($31 + [160]) == (int_32)$18), [240])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [288])
	*($31 + [112]) = ((int_64)*($31 + [112]) + (int_64)$4)
	$25 = ($31 + [136])
	*($35 + [80]) = *($25)
	*($35 + [88]) = *(($31 + [128]))
	$3 = *($31)
	CALL eosio_assert([1], [352])
	*($35 + [72]) = (($35 + [224]) + [160])
	*($35 + [68]) = ($35 + [224])
	*($35 + [64]) = ($35 + [224])
	CALL $19(($35 + [64]), $31)
	CALL db_update_i64(*($31 + [164]), $33, ($35 + [224]), [160])
	$29 = ($0 + [184])
	if ( (uint_64)($3 <= *($29)) ){ goto $label$76 }
	*($29) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$76
	$29 = (($35 + [80]) + [8])
	*($35 + [392]) = *($25)
	if ( (CALL memcmp(($35 + [80]), ($35 + [392]), [8]) == 0) ){ goto $label$77 }
	$30 = ($31 + [168])
	$25 = *($30)
	if ( ((int_32)$25 > (int_32)[-1]) ){ goto $label$78 }
	$25 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, ($35 + [48]), $3)
	*($30) = $25
	
.LABEL $label$78
	CALL db_idx64_update($25, $33, ($35 + [392]))
	
.LABEL $label$77
	*($35 + [392]) = *(($31 + [128]))
	if ( (CALL memcmp($29, ($35 + [392]), [8]) == 0) ){ goto $label$70 }
	$25 = ($31 + [172])
	$31 = *($25)
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$79 }
	$31 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419455, ($35 + [48]), $3)
	*($25) = $31
	
.LABEL $label$79
	CALL db_idx64_update($31, $33, ($35 + [392]))
	goto $label$70 
	
.LABEL $label$71
	$26 = ((int_64)$4 + (int_64)$26)
	
.LABEL $label$70
	$20 = ($0 + [128])
	$27 = ((int_64)$15 * (int_64)1000)
	CALL eosio_assert((uint_64)(((int_64)$27 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1184])
	$3 = (int_64)1414747466
	$31 = [0]
	
.LOOP $label$82:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$81 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$83 }
	
.LOOP $label$84:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$81 }
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$84 }
	
.LABEL $label$83
	$25 = [1]
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$81
	$25 = [0]
	
.LABEL $label$80
	CALL eosio_assert($25, [1040])
	$3 = (int_64)0
	$4 = (int_64)59
	$31 = [1072]
	$32 = (int_64)0
	
.LOOP $label$85:
	if ( ((uint_64)$3 > (uint_64)(int_64)5) ){ goto $label$90 }
	$25 = *($31)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$25 = ($25 + [165])
	goto $label$88 
	
.LABEL $label$90
	$33 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$33 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$87
	$33 = ((int_64)((int_64)$33 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$86
	$31 = ($31 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$32 = ((int_64)$33 | (int_64)$32)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$85 }
	*($35 + [72]) = $32
	*($35 + [64]) = (int_64)9129246395833592080
	$3 = (int_64)0
	$4 = (int_64)59
	$31 = [1088]
	$32 = (int_64)0
	
.LOOP $label$91:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$96 }
	$25 = *($31)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$25 = ($25 + [165])
	goto $label$94 
	
.LABEL $label$96
	$33 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$95
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$33 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$93
	$33 = ((int_64)((int_64)$33 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$92
	$31 = ($31 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$32 = ((int_64)$33 | (int_64)$32)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$91 }
	*(($35 + [56])) = [0]
	*($35 + [48]) = (int_64)0
	$31 = CALL strlen([1104])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$98 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$101 }
	*($35 + [48]) = ($31 << [1])
	$25 = (($35 + [48]) | [1])
	if ( $31 ){ goto $label$100 }
	goto $label$99 
	
.LABEL $label$101
	$29 = (($31 + [16]) & [-16])
	$25 = CALL $107($29)
	*($35 + [48]) = ($29 | [1])
	*($35 + [56]) = $25
	*($35 + [52]) = $31
	
.LABEL $label$100
	CALL memcpy($25, [1104], $31)
	
.LABEL $label$99
	*(($25 + $31)) = [0]
	*(($35 + [248])) = (int_64)362175351300
	*(($35 + [260])) = *($35 + [52])
	*($35 + [232]) = $1
	$31 = ($35 + [56])
	*(($35 + [264])) = *($31)
	*($35 + [224]) = (int_64)9129246395833592080
	*($35 + [240]) = $27
	*($35 + [256]) = *($35 + [48])
	*($35 + [48]) = [0]
	*($35 + [52]) = [0]
	*($31) = [0]
	$31 = CALL $57(($35 + [80]), ($35 + [64]), (int_64)6138684894716630320, $32, ($35 + [224]))
	CALL $58(($35 + [392]), $31)
	$25 = *($35 + [392])
	CALL send_inline($25, (*($35 + [396]) - $25))
	$25 = *($35 + [392])
	if ( ($25 == 0) ){ goto $label$102 }
	*($35 + [396]) = $25
	CALL $108($25)
	
.LABEL $label$102
	$25 = *($31 + [28])
	if ( ($25 == 0) ){ goto $label$103 }
	*(($31 + [32])) = $25
	CALL $108($25)
	
.LABEL $label$103
	$25 = *($31 + [16])
	if ( ($25 == 0) ){ goto $label$104 }
	*(($31 + [20])) = $25
	CALL $108($25)
	
.LABEL $label$104
	if ( ((*(($35 + [256])) & [1]) == 0) ){ goto $label$105 }
	CALL $108(*(($35 + [264])))
	
.LABEL $label$105
	if ( ((*($35 + [48]) & [1]) == 0) ){ goto $label$106 }
	CALL $108(*(($35 + [56])))
	
.LABEL $label$106
	CALL eosio_assert([1], [1184])
	$3 = (int_64)5459781
	$31 = [0]
	
.LOOP $label$109:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$108 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$110 }
	
.LOOP $label$111:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$108 }
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$111 }
	
.LABEL $label$110
	$25 = [1]
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$109 }
	goto $label$107 
	
.LABEL $label$108
	$25 = [0]
	
.LABEL $label$107
	CALL eosio_assert($25, [1040])
	$27 = *($0)
	$3 = (int_64)0
	$4 = (int_64)59
	$31 = [1072]
	$32 = (int_64)0
	
.LOOP $label$112:
	if ( ((uint_64)$3 > (uint_64)(int_64)5) ){ goto $label$117 }
	$25 = *($31)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$116 }
	$25 = ($25 + [165])
	goto $label$115 
	
.LABEL $label$117
	$33 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$116
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$115
	$33 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$114
	$33 = ((int_64)((int_64)$33 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$113
	$31 = ($31 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$32 = ((int_64)$33 | (int_64)$32)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$112 }
	*($35 + [72]) = $32
	*($35 + [64]) = $27
	$3 = (int_64)0
	$4 = (int_64)59
	$31 = [1088]
	$32 = (int_64)0
	
.LOOP $label$118:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$123 }
	$25 = *($31)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$122 }
	$25 = ($25 + [165])
	goto $label$121 
	
.LABEL $label$123
	$33 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$122
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$121
	$33 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$120
	$33 = ((int_64)((int_64)$33 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$119
	$31 = ($31 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$32 = ((int_64)$33 | (int_64)$32)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$118 }
	*(($35 + [56])) = [0]
	*($35 + [48]) = (int_64)0
	$31 = CALL strlen([1136])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$97 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$126 }
	*($35 + [48]) = ($31 << [1])
	$25 = (($35 + [48]) | [1])
	if ( $31 ){ goto $label$125 }
	goto $label$124 
	
.LABEL $label$126
	$29 = (($31 + [16]) & [-16])
	$25 = CALL $107($29)
	*($35 + [48]) = ($29 | [1])
	*($35 + [56]) = $25
	*($35 + [52]) = $31
	
.LABEL $label$125
	CALL memcpy($25, [1136], $31)
	
.LABEL $label$124
	*(($25 + $31)) = [0]
	*(($35 + [248])) = (int_64)1397703940
	*(($35 + [260])) = *($35 + [52])
	*($35 + [232]) = (int_64)6138684894531992224
	$31 = ($35 + [56])
	*(($35 + [264])) = *($31)
	*($35 + [224]) = *($0)
	*($35 + [240]) = $23
	*($35 + [256]) = *($35 + [48])
	*($35 + [48]) = [0]
	*($35 + [52]) = [0]
	*($31) = [0]
	$31 = CALL $57(($35 + [80]), ($35 + [64]), (int_64)6138663591592764928, $32, ($35 + [224]))
	CALL $58(($35 + [392]), $31)
	$25 = *($35 + [392])
	CALL send_inline($25, (*($35 + [396]) - $25))
	$25 = *($35 + [392])
	if ( ($25 == 0) ){ goto $label$127 }
	*($35 + [396]) = $25
	CALL $108($25)
	
.LABEL $label$127
	$25 = *($31 + [28])
	if ( ($25 == 0) ){ goto $label$128 }
	*(($31 + [32])) = $25
	CALL $108($25)
	
.LABEL $label$128
	$25 = *($31 + [16])
	if ( ($25 == 0) ){ goto $label$129 }
	*(($31 + [20])) = $25
	CALL $108($25)
	
.LABEL $label$129
	if ( ((*(($35 + [256])) & [1]) == 0) ){ goto $label$130 }
	CALL $108(*(($35 + [264])))
	
.LABEL $label$130
	if ( ((*($35 + [48]) & [1]) == 0) ){ goto $label$131 }
	CALL $108(*(($35 + [56])))
	
.LABEL $label$131
	$3 = ((uint_64)$28 / (uint_64)(int_64)5000000)
	$27 = ((int_64)$34 + (int_64)$28)
	$33 = ((uint_64)$27 / (uint_64)(int_64)5000000)
	if ( ((uint_64)$33 <= (uint_64)$3) ){ goto $label$136 }
	$32 = (int_64)
	if ( (int_64)($32($33 - $3)) == 0) ){ goto $label$136 }
	*($35 + [400]) = [0]
	*($35 + [392]) = (int_64)0
	$33 = ((uint_64)((int_64))((int_64)5000000 - $28) + (int_64)((int_64)$3 * (int_64)5000000)) / (uint_64)(int_64)10)
	$25 = (($35 + [392]) + [8])
	$3 = (int_64)0
	
.LOOP $label$137:
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$141 }
	*($35 + [224]) = (int_64)500000
	$31 = *($35 + [396])
	if ( ((uint_32)$31 >= (uint_32)*($25)) ){ goto $label$140 }
	*($31) = (int_64)500000
	*($35 + [396]) = ($31 + [8])
	goto $label$138 
	
.LABEL $label$141
	*($35 + [224]) = $33
	$31 = *($35 + [396])
	if ( ((int_32)$31 == (int_32)*($25)) ){ goto $label$139 }
	*($31) = $33
	*($35 + [396]) = ($31 + [8])
	goto $label$138 
	
.LABEL $label$140
	CALL $60(($35 + [392]), ($35 + [224]))
	goto $label$138 
	
.LABEL $label$139
	CALL $59(($35 + [392]), ($35 + [224]))
	
.LABEL $label$138
	$3 = ((int_64)$3 + (int_64)1)
	if ( (uint_64)($3 <= $32) ){ goto $label$137 }
	$3 = (int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$31())) + (int_64)$1) << (int_64)32) >> (int_64)32
	$3 = ((int_64)((int_64)((uint_64)$3) % (uint_64)(int_64)274390790648383) * (int_64)16807) + (int_64)((int_64)((uint_64)$3 / (uint_64)(int_64)274390790648383) * (int_64)-14822))
	$31 = *($35 + [392])
	$34 = (int_64)0
	$33 = $14
	$4 = (int_64)0
	
.LOOP $label$142:
	$3 = ((int_64)((int_64)((uint_64)$3 % (uint_64)(int_64)274390790648383) * (int_64)16807) + (int_64)((int_64)((uint_64)$3 / (uint_64)(int_64)274390790648383) * (int_64)-14822))
	$28 = ((uint_64)((int_64)$33 * (int_64)((int_64)((int_64)$3 & (int_64)3) + (int_64)3)) / (uint_64)(int_64)100)
	$28 = ( $28 ? (int_64)0 : ((uint_64)$33 > (uint_64)$28) )
	$33 = ((int_64)*($31) + (int_64)$33)
	$33 = (int_64))($33 - $28)
	$4 = ((int_64)$28 + (int_64)$4)
	$31 = ($31 + [8])
	$34 = ((int_64)$34 + (int_64)1)
	if ( (uint_64)($34 <= $32) ){ goto $label$142 }
	$3 = ((int_64)$23 + (int_64)$14)
	CALL eosio_assert(((uint_64)$3 > (uint_64)$4), [1152])
	if ( (int_64)($4 == 0) ){ goto $label$133 }
	$19 = *(($0 + [192]))
	$29 = *(($0 + [196]))
	if ( ((int_32)$29 == (int_32)$19) ){ goto $label$143 }
	$31 = ($29 + [-24])
	$30 = ([0] - $19)
	
.LOOP $label$144:
	if ( ((int_64)*(*($31)) == (int_64)$1) ){ goto $label$143 }
	$29 = $31
	$25 = ($31 + [-24])
	$31 = $25
	if ( ((int_32)($25 + $30) != (int_32)[-24]) ){ goto $label$144 }
	
.LABEL $label$143
	if ( ((int_32)$29 == (int_32)$19) ){ goto $label$135 }
	$31 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($31 + [160]) == (int_32)$18), [64])
	if ( $31 ){ goto $label$134 }
	goto $label$133 
	
.LABEL $label$136
	$32 = ((int_64)$23 + (int_64)$14)
	goto $label$132 
	
.LABEL $label$135
	$31 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, $1)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$133 }
	$31 = CALL $15($18, $31)
	CALL eosio_assert(((int_32)*($31 + [160]) == (int_32)$18), [64])
	
.LABEL $label$134
	$32 = *($0)
	CALL eosio_assert([1], [192])
	CALL eosio_assert(((int_32)*($31 + [160]) == (int_32)$18), [240])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [288])
	*($31 + [96]) = ((int_64)*($31 + [96]) + (int_64)$4)
	$25 = ($31 + [136])
	*($35 + [80]) = *($25)
	*($35 + [88]) = *(($31 + [128]))
	$33 = *($31)
	CALL eosio_assert([1], [352])
	*($35 + [72]) = (($35 + [224]) + [160])
	*($35 + [68]) = ($35 + [224])
	*($35 + [64]) = ($35 + [224])
	CALL $19(($35 + [64]), $31)
	CALL db_update_i64(*($31 + [164]), $32, ($35 + [224]), [160])
	$29 = ($0 + [184])
	if ( (uint_64)($33 <= *($29)) ){ goto $label$145 }
	*($29) = ( (int_64)-2 ? ((int_64)$33 + (int_64)1) : ((uint_64)$33 > (uint_64)(int_64)-3) )
	
.LABEL $label$145
	$29 = (($35 + [80]) + [8])
	*($35 + [48]) = *($25)
	if ( (CALL memcmp(($35 + [80]), ($35 + [48]), [8]) == 0) ){ goto $label$146 }
	$30 = ($31 + [168])
	$25 = *($30)
	if ( ((int_32)$25 > (int_32)[-1]) ){ goto $label$147 }
	$25 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, ($35 + [408]), $33)
	*($30) = $25
	
.LABEL $label$147
	CALL db_idx64_update($25, $32, ($35 + [48]))
	
.LABEL $label$146
	*($35 + [48]) = *(($31 + [128]))
	if ( (CALL memcmp($29, ($35 + [48]), [8]) == 0) ){ goto $label$133 }
	$25 = ($31 + [172])
	$31 = *($25)
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$148 }
	$31 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419455, ($35 + [408]), $33)
	*($25) = $31
	
.LABEL $label$148
	CALL db_idx64_update($31, $32, ($35 + [48]))
	
.LABEL $label$133
	$31 = *($35 + [392])
	if ( ($31 == 0) ){ goto $label$149 }
	*($35 + [396]) = $31
	CALL $108($31)
	
.LABEL $label$149
	$32 = (int_64))($3 - $4)
	
.LABEL $label$132
	$25 = ($0 + [144])
	$3 = *($25)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$150 }
	$3 = (int_64)0
	$31 = CALL db_lowerbound_i64(*(($0 + [128])), *(($0 + [136])), (int_64)6138858918308216832, (int_64)0)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$151 }
	CALL $9($20, $31)
	*($35 + [228]) = [0]
	*($35 + [224]) = $20
	$3 = *(*(CALL $61(($35 + [224])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$151
	*(($0 + [144])) = $3
	
.LABEL $label$150
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [496])
	$3 = *($25)
	$33 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$4()), [560])
	*(($31 = CALL $107([136])) + [120]) = $20
	*($31 + [8]) = $1
	*($31) = $3
	*($31 + [24]) = $15
	*($31 + [32]) = $12
	*($31 + [40]) = $5
	$34 = *($2)
	*($31 + [16]) = $34
	*($31 + [44]) = [0]
	*($31 + [56]) = *($35 + [216])
	*($31 + [48]) = (int_64)20
	*($31 + [64]) = $22
	*($31 + [72]) = (int_64)0
	*($31 + [88]) = $3
	*($31 + [96]) = $3
	*($31 + [104]) = (int_64)0
	*($31 + [112]) = (int_64)0
	$30 = (($35 + [224]) + [120])
	*($35 + [88]) = $30
	*($35 + [84]) = ($35 + [224])
	*($35 + [80]) = ($35 + [224])
	CALL $20(($35 + [80]), $31)
	$4 = *($31)
	$29 = ($0 + [136])
	*($31 + [124]) = CALL db_store_i64(*($29), (int_64)6138858918308216832, $33, $4, ($35 + [224]), [120])
	if ( (uint_64)($4 <= *($25)) ){ goto $label$152 }
	*(($0 + [144])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$152
	$4 = *($29)
	$28 = *($31)
	*($35 + [64]) = *(($31 + [48]))
	*($31 + [128]) = CALL db_idx64_store($4, (int_64)6138858918308216832, $33, $28, ($35 + [64]))
	$4 = *($29)
	$28 = *($31)
	*($35 + [64]) = *(($31 + [56]))
	*($31 + [132]) = CALL db_idx64_store($4, (int_64)6138858918308216833, $33, $28, ($35 + [64]))
	*($35 + [80]) = $31
	$33 = *($31)
	*($35 + [224]) = $33
	$29 = *(($31 + [124]))
	*($35 + [64]) = $29
	$20 = ($0 + [156])
	$25 = *($20)
	if ( ((uint_32)$25 >= (uint_32)*(($0 + [160]))) ){ goto $label$154 }
	*($25 + [8]) = $33
	*($25 + [16]) = $29
	*($35 + [80]) = [0]
	*($25) = $31
	*($20) = ($25 + [24])
	goto $label$153 
	
.LABEL $label$154
	CALL $11(($0 + [152]), ($35 + [80]), ($35 + [224]), ($35 + [64]))
	
.LABEL $label$153
	$31 = *($35 + [80])
	*($35 + [80]) = [0]
	if ( ($31 == 0) ){ goto $label$155 }
	CALL $108($31)
	
.LABEL $label$155
	$33 = *($0)
	CALL eosio_assert(((int_64)*($35 + [176]) == (int_64)CALL $fimport$4()), [560])
	*(($31 = CALL $107([136])) + [120]) = ($35 + [176])
	*($31 + [8]) = $1
	*($31) = $3
	*($31 + [16]) = $34
	*($31 + [24]) = $15
	*($31 + [32]) = $12
	*($31 + [40]) = $5
	*($31 + [44]) = [0]
	*($31 + [56]) = *($35 + [216])
	*($31 + [48]) = (int_64)20
	*($31 + [64]) = $22
	*($31 + [72]) = (int_64)0
	*($31 + [88]) = $3
	*($31 + [96]) = $3
	*($31 + [104]) = (int_64)0
	*($31 + [112]) = (int_64)0
	*($35 + [88]) = $30
	*($35 + [84]) = ($35 + [224])
	*($35 + [80]) = ($35 + [224])
	CALL $20(($35 + [80]), $31)
	$4 = *($31)
	$25 = ($35 + [184])
	*($31 + [124]) = CALL db_store_i64(*($25), (int_64)6138858918308216832, $33, $4, ($35 + [224]), [120])
	$29 = ($35 + [192])
	if ( (uint_64)($4 <= *($29)) ){ goto $label$156 }
	*($29) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$156
	$4 = *($31)
	$34 = *($25)
	*($35 + [64]) = *(($31 + [48]))
	*($31 + [128]) = CALL db_idx64_store($34, (int_64)6138858918308216832, $33, $4, ($35 + [64]))
	$4 = *($31)
	$34 = *($25)
	*($35 + [64]) = *(($31 + [56]))
	*($31 + [132]) = CALL db_idx64_store($34, (int_64)6138858918308216833, $33, $4, ($35 + [64]))
	*($35 + [80]) = $31
	$33 = *($31)
	*($35 + [224]) = $33
	$29 = *(($31 + [124]))
	*($35 + [64]) = $29
	$30 = ($35 + [204])
	$25 = *($30)
	if ( ((uint_32)$25 >= (uint_32)*(($35 + [208]))) ){ goto $label$158 }
	*($25 + [8]) = $33
	*($25 + [16]) = $29
	*($35 + [80]) = [0]
	*($25) = $31
	*($30) = ($25 + [24])
	goto $label$157 
	
.LABEL $label$158
	CALL $11(($35 + [200]), ($35 + [80]), ($35 + [224]), ($35 + [64]))
	
.LABEL $label$157
	$31 = *($35 + [80])
	*($35 + [80]) = [0]
	if ( ($31 == 0) ){ goto $label$159 }
	CALL $108($31)
	
.LABEL $label$159
	$4 = *($0)
	CALL eosio_assert($11, [192])
	CALL eosio_assert(((int_32)*($10 + [96]) == (int_32)$9), [240])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$4()), [288])
	*($10 + [8]) = ((int_64)$15 + (int_64)$12)
	*($10 + [36]) = $17
	*($10 + [24]) = $16
	*($10 + [88]) = $27
	*($10 + [56]) = $21
	*($10 + [72]) = $32
	$33 = *($10)
	*($10 + [64]) = ((int_64)$22 + (int_64)$13)
	*($10 + [80]) = ((int_64)*($10 + [80]) + (int_64)$24)
	*($10 + [40]) = $1
	*($10 + [16]) = $3
	CALL eosio_assert([1], [352])
	*($35 + [88]) = (($35 + [224]) + [96])
	*($35 + [84]) = ($35 + [224])
	*($35 + [80]) = ($35 + [224])
	CALL $38(($35 + [80]), $10)
	CALL db_update_i64(*($10 + [100]), $4, ($35 + [224]), [96])
	$31 = ($0 + [64])
	if ( (uint_64)($33 <= *($31)) ){ goto $label$160 }
	*($31) = ( (int_64)-2 ? ((int_64)$33 + (int_64)1) : ((uint_64)$33 > (uint_64)(int_64)-3) )
	
.LABEL $label$160
	$33 = *($0)
	CALL eosio_assert($8, [192])
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$6), [240])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$4()), [288])
	*($7 + [16]) = ((int_64)*($7 + [16]) + (int_64)$26)
	$3 = *($7)
	CALL eosio_assert([1], [352])
	*($35 + [88]) = (($35 + [224]) + [64])
	*($35 + [84]) = ($35 + [224])
	*($35 + [80]) = ($35 + [224])
	CALL $40(($35 + [80]), $7)
	CALL db_update_i64(*($7 + [68]), $33, ($35 + [224]), [64])
	$31 = ($0 + [24])
	if ( (uint_64)($3 <= *($31)) ){ goto $label$161 }
	*($31) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$161
	$25 = *($35 + [152])
	if ( ($25 == 0) ){ goto $label$162 }
	$10 = ($35 + [156])
	$31 = *($10)
	if ( ((int_32)$31 == (int_32)$25) ){ goto $label$164 }
	
.LOOP $label$165:
	$31 = ($31 + [-24])
	$0 = *($31)
	*($31) = [0]
	if ( ($0 == 0) ){ goto $label$166 }
	CALL $108($0)
	
.LABEL $label$166
	if ( ((int_32)$25 != (int_32)$31) ){ goto $label$165 }
	$31 = *(($35 + [152]))
	goto $label$163 
	
.LABEL $label$164
	$31 = $25
	
.LABEL $label$163
	*($10) = $25
	CALL $108($31)
	
.LABEL $label$162
	$25 = *($35 + [200])
	if ( ($25 == 0) ){ goto $label$167 }
	$10 = ($35 + [204])
	$31 = *($10)
	if ( ((int_32)$31 == (int_32)$25) ){ goto $label$169 }
	
.LOOP $label$170:
	$31 = ($31 + [-24])
	$0 = *($31)
	*($31) = [0]
	if ( ($0 == 0) ){ goto $label$171 }
	CALL $108($0)
	
.LABEL $label$171
	if ( ((int_32)$25 != (int_32)$31) ){ goto $label$170 }
	$31 = *(($35 + [200]))
	goto $label$168 
	
.LABEL $label$169
	$31 = $25
	
.LABEL $label$168
	*($10) = $25
	CALL $108($31)
	
.LABEL $label$167
	*([0] + [4]) = ($35 + [416])
	return (unreachable)
	
.LABEL $label$98
	CALL $109(($35 + [48]))
	
.LABEL $label$97
	CALL $109(($35 + [48]))
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [128])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $107([48])) + [32]) = $0
	CALL $67(($8 + [32]), $6)
	*($6 + [40]) = [-1]
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $55(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6030912130220556288, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [64])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $51($4, CALL $fimport$7(*($4), *($4 + [8]), (int_64)-6030912130220556288, $5))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [64])
	
.LABEL $label$4
	*(($2 + [40])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [32])
	$6 = *($0 + [4])
	$7 = *($6 + [40])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6030912130220556288, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [40]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$2), [64])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $51($2, CALL $fimport$7(*($2), *($2 + [8]), (int_64)-6030912130220556288, $3))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$2), [64])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [40])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1360])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [1408])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1472])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $108($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $108($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
	$7 = *(($1 + [40]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6030912130220556288, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN9justaward5startEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	CALL current_time()
	$10 = *(($0 + [32]))
	$9 = *(($0 + [36]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$2 = ([0] - $10)
	
.LOOP $label$2:
	if ( (int_64)(*(*($8)) == 0) ){ goto $label$1 }
	$9 = $8
	$3 = ($8 + [-24])
	$8 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$10 }
	$10 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$1), [64])
	if ( $10 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159545106726912, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $35($1, $8)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$1), [64])
	
.LABEL $label$9
	$4 = *($10 + [8])
	$5 = *(($0 + [72]))
	$9 = *(($0 + [76]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$2 = ([0] - $5)
	
.LOOP $label$12:
	if ( ((int_64)*(*($8)) == (int_64)$4) ){ goto $label$11 }
	$9 = $8
	$3 = ($8 + [-24])
	$8 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$2 = ($0 + [48])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$7 }
	$3 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)$2), [64])
	goto $label$6 
	
.LABEL $label$8
	$3 = ($0 + [48])
	$9 = ($0 + [64])
	$4 = *($9)
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$13 }
	$4 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($3), *(($0 + [56])), (int_64)7035932468960034816, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$14 }
	CALL $36($3, $8)
	*($11 + [4]) = [0]
	*($11) = $3
	$4 = *(*(CALL $37($11) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*(($0 + [64])) = $4
	
.LABEL $label$13
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [496])
	$4 = *($9)
	$7 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$4()), [560])
	*(($8 = CALL $107([112])) + [96]) = $3
	*($8 + [24]) = (int_64)2
	*($8) = $4
	*($8 + [72]) = (int_64)10000000
	*($8 + [8]) = (int_64)0
	*($11 + [120]) = ($11 + [96])
	*($11 + [116]) = $11
	*($11 + [112]) = $11
	CALL $38(($11 + [112]), $8)
	$6 = *($8)
	$2 = CALL db_store_i64(*(($0 + [56])), (int_64)7035932468960034816, $7, $6, $11, [96])
	*($8 + [100]) = $2
	if ( (uint_64)($6 <= *($9)) ){ goto $label$15 }
	*(($0 + [64])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($11 + [112]) = $8
	$6 = *($8)
	*($11) = $6
	*($11 + [108]) = $2
	$9 = ($0 + [76])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [80]))) ){ goto $label$5 }
	*($3 + [8]) = $6
	*($3 + [16]) = $2
	*($11 + [112]) = [0]
	*($3) = $8
	*($9) = ($3 + [24])
	goto $label$4 
	
.LABEL $label$7
	$3 = [0]
	$8 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035932468960034816, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $36($2, $8)
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)$2), [64])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [432])
	CALL eosio_assert(((uint_64)*($3 + [24]) > (uint_64)(int_64)9), [464])
	$9 = ($0 + [64])
	$4 = *($9)
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$16 }
	$4 = (int_64)0
	$8 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035932468960034816, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$17 }
	CALL $36($2, $8)
	*($11 + [4]) = [0]
	*($11) = $2
	$4 = *(*(CALL $37($11) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*(($0 + [64])) = $4
	
.LABEL $label$16
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [496])
	$4 = *($9)
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$4()), [560])
	*(($8 = CALL $107([112])) + [96]) = $2
	*($8 + [24]) = (int_64)2
	*($8) = $4
	*($8 + [8]) = (int_64)0
	*($8 + [48]) = *($3 + [48])
	*($8 + [72]) = *($3 + [72])
	*($11 + [120]) = ($11 + [96])
	*($11 + [116]) = $11
	*($11 + [112]) = $11
	CALL $38(($11 + [112]), $8)
	$6 = *($8)
	$2 = CALL db_store_i64(*(($0 + [56])), (int_64)7035932468960034816, $7, $6, $11, [96])
	*($8 + [100]) = $2
	if ( (uint_64)($6 <= *($9)) ){ goto $label$18 }
	*(($0 + [64])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*($11 + [112]) = $8
	$6 = *($8)
	*($11) = $6
	*($11 + [108]) = $2
	$9 = ($0 + [76])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [80]))) ){ goto $label$20 }
	*($3 + [8]) = $6
	*($3 + [16]) = $2
	*($11 + [112]) = [0]
	*($3) = $8
	*($9) = ($3 + [24])
	goto $label$19 
	
.LABEL $label$20
	CALL $39(($0 + [72]), ($11 + [112]), $11, ($11 + [108]))
	
.LABEL $label$19
	$8 = *($11 + [112])
	*($11 + [112]) = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	CALL $108($8)
	
.LABEL $label$21
	$6 = *($0)
	CALL eosio_assert([1], [192])
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$1), [240])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$4()), [288])
	*($10 + [8]) = $4
	$4 = *($10)
	CALL eosio_assert([1], [352])
	*($11 + [120]) = ($11 + [64])
	*($11 + [116]) = $11
	*($11 + [112]) = $11
	CALL $40(($11 + [112]), $10)
	CALL db_update_i64(*($10 + [68]), $6, $11, [64])
	$8 = ($0 + [24])
	if ( (uint_64)($4 <= *($8)) ){ goto $label$3 }
	*($8) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$5
	CALL $39(($0 + [72]), ($11 + [112]), $11, ($11 + [108]))
	
.LABEL $label$4
	$8 = *($11 + [112])
	*($11 + [112]) = [0]
	if ( ($8 == 0) ){ goto $label$22 }
	CALL $108($8)
	
.LABEL $label$22
	$6 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$4()), [560])
	*(($8 = CALL $107([80])) + [64]) = $1
	*($8 + [32]) = (int_64)20
	*($8) = (int_64)0
	*($8 + [40]) = (int_64)20
	*($8 + [56]) = (int_64)2
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [48]) = (int_64)60
	*($8 + [8]) = $4
	*($11 + [120]) = ($11 + [64])
	*($11 + [116]) = $11
	*($11 + [112]) = $11
	CALL $40(($11 + [112]), $8)
	$4 = *($8)
	$9 = CALL db_store_i64(*(($0 + [16])), (int_64)7235159545106726912, $6, $4, $11, [64])
	*($8 + [68]) = $9
	$3 = ($0 + [24])
	if ( (uint_64)($4 <= *($3)) ){ goto $label$23 }
	*($3) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*($11 + [112]) = $8
	$4 = *($8)
	*($11) = $4
	*($11 + [108]) = $9
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [40]))) ){ goto $label$25 }
	*($3 + [8]) = $4
	*($3 + [16]) = $9
	*($11 + [112]) = [0]
	*($3) = $8
	*($2) = ($3 + [24])
	goto $label$24 
	
.LABEL $label$25
	CALL $41(($0 + [32]), ($11 + [112]), $11, ($11 + [108]))
	
.LABEL $label$24
	$8 = *($11 + [112])
	*($11 + [112]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $108($8)
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [128])
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($9 + [8]) = (int_64)0
	$7 = *($0 + [4])
	if ( ($7 == 0) ){ goto $label$2 }
	$5 = *($7 + [40])
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	$5 = *(*($0))
	$5 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-6030912130220556288, $9, *($7))
	*(*(($0 + [4])) + [40]) = $5
	
.LABEL $label$3
	$6 = CALL db_idx64_previous($5, ($9 + [8]))
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1312])
	goto $label$1 
	
.LABEL $label$2
	$7 = *(*($0))
	$7 = CALL db_idx64_end(*($7), *($7 + [8]), (int_64)-6030912130220556288)
	CALL eosio_assert(((int_32)$7 != (int_32)[-1]), [1248])
	$6 = CALL db_idx64_previous($7, ($9 + [8]))
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	
.LABEL $label$1
	$2 = *($9 + [8])
	$3 = *($1 + [24])
	$1 = *(*($0))
	$8 = *(($1 + [28]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$7 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$5:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$4 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$1), [64])
	goto $label$6 
	
.LABEL $label$7
	$7 = CALL $51($1, CALL $fimport$7(*($1), *($1 + [8]), (int_64)-6030912130220556288, $2))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$1), [64])
	
.LABEL $label$6
	*(($0 + [4])) = $7
	*(($7 + [40])) = $6
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $107([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $62($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $65(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $117($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $107($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $108($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $114 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $115($1, $0, [11088])
	CALL abort()
	(unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [128])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $107([80])) + [64]) = $0
	CALL $43(($8 + [32]), $6)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $41(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_64 .FUNC _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$3 = CALL strlen([11072])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($3 << [1])
	$6 = ($7 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$6 = CALL $107($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($6, [11072], $3)
	
.LABEL $label$4
	*(($6 + $3)) = [0]
	*($7 + [12]) = [0]
	$3 = *($0 + [8])
	$6 = *($0)
	$5 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($6 & [1]) )
	$4 = CALL strtoull($3, ($7 + [12]), $2)
	$0 = CALL __errno_location()
	$6 = *($0)
	*($0) = $5
	if ( ((int_32)$6 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($7 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $108(*($7 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [16])
	return $4
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $113($7)
	
.LABEL $label$1
	CALL $114($7)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $113 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $115($1, $0, [11104])
	CALL abort()
	(unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $107(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $108($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $118 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $107($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZN9justaward9calincomeEyyym (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [48])
	*([0] + [4]) = $15
	$14 = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	$7 = ((int_64)$3 + (int_64)1)
	$11 = CALL db_lowerbound_i64(*($1 + [128]), *(($1 + [136])), (int_64)6138858918308216832, $7)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	$6 = ((int_64)$2 + (int_64)1)
	$8 = ($1 + [128])
	$1 = CALL $9($8, $11)
	$9 = ($15 + [32])
	$13 = (int_64)0
	$14 = (int_64)0
	
.LOOP $label$3:
	CALL __multi3(($15 + [24]), *($1 + [64]), (int_64)0, $4, (int_64)0)
	CALL __udivti3(($15 + [8]), *($15 + [24]), *($9), *($1 + [32]), (int_64)0)
	$10 = *($1)
	$11 = *($1 + [40])
	CALL eosio_assert([1], [32])
	$11 = ((uint_64)($10 <= $7) | ((uint_32)$11 >= (uint_32)$5))
	$3 = ( $3 ? $10 : $11 )
	$12 = *($15 + [8])
	$14 = ((int_64)( (int_64)0 ? $12 : $11 ) + (int_64)$14)
	$11 = (uint_64)($10 <= $6)
	$2 = ( $2 ? $10 : $11 )
	$13 = ((int_64)( (int_64)0 ? $12 : $11 ) + (int_64)$13)
	$1 = CALL db_next_i64(*($1 + [124]), ($15 + [40]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$1 = CALL $9($8, $1)
	goto $label$3 
	
.LABEL $label$2
	$13 = (int_64)0
	
.LABEL $label$1
	*($0) = $13
	*(($0 + [8])) = $14
	*(($0 + [16])) = $2
	*(($0 + [24])) = $3
	*([0] + [4]) = ($15 + [48])
}

void .FUNC _ZN9justaward14chkincome_userEyym (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	float_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_64 $26
	int_64 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_32 $33
	$33 = (*([0] + [4]) - [304])
	*([0] + [4]) = $33
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$25 = *(($1 + [192]))
	$11 = *(($1 + [196]))
	if ( ((int_32)$11 == (int_32)$25) ){ goto $label$1 }
	$28 = ($11 + [-24])
	$10 = ([0] - $25)
	
.LOOP $label$2:
	if ( ((int_64)*(*($28)) == (int_64)$2) ){ goto $label$1 }
	$11 = $28
	$12 = ($28 + [-24])
	$28 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($1 + [168])
	if ( ((int_32)$11 == (int_32)$25) ){ goto $label$5 }
	$25 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($25 + [160]) == (int_32)$5), [64])
	if ( $25 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$28 = CALL db_find_i64(*(($1 + [168])), *(($1 + [176])), (int_64)-6030912134838419456, $2)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$3 }
	$25 = CALL $15($5, $28)
	CALL eosio_assert(((int_32)*($25 + [160]) == (int_32)$5), [64])
	
.LABEL $label$4
	$26 = *($25 + [144])
	$6 = *($25 + [136])
	if ( ((int_64)$6 != (int_64)$3) ){ goto $label$6 }
	*(($0 + [16])) = $26
	goto $label$3 
	
.LABEL $label$6
	*((($33 + [88]) + [32])) = [0]
	*($33 + [96]) = $2
	*($33 + [104]) = (int_64)-1
	*($33 + [112]) = (int_64)0
	*($33 + [88]) = *($1)
	*($33 + [124]) = [0]
	*($33 + [80]) = ($33 + [88])
	CALL $16(($33 + [296]), ($33 + [80]), [168])
	$28 = *($33 + [300])
	if ( ($28 == 0) ){ goto $label$9 }
	$7 = ($1 + [128])
	$12 = [1]
	$13 = (($33 + [48]) + [8])
	$16 = ($33 + [12])
	$17 = ($33 + [16])
	$18 = ($1 + [152])
	$19 = ($1 + [156])
	$20 = ($1 + [136])
	$21 = ($33 + [152])
	$22 = (($33 + [128]) + [32])
	$23 = ($33 + [164])
	$24 = ($33 + [156])
	$32 = (int_64)0
	$31 = (int_64)0
	$30 = (int_64)0
	$29 = (int_64)0
	
.LOOP $label$10:
	if ( (uint_64)(*($28 + [48]) <= (int_64)18) ){ goto $label$11 }
	if ( ((int_64)*($28 + [88]) == (int_64)$3) ){ goto $label$11 }
	CALL _ZN9justaward9calincomeEyyym(($33 + [48]), $1, *($28 + [88]), *($28 + [96]), *($28 + [24]), $4)
	$28 = *($33 + [300])
	$27 = *($28 + [48])
	*($33 + [288]) = $27
	$2 = ((int_64)*($33 + [48]) + (int_64)*($28 + [72]))
	*($33 + [40]) = $2
	*($33 + [32]) = ((int_64)*($13) + (int_64)*($28 + [80]))
	*($33 + [24]) = *($28 + [44])
	if ( ((int_64)$27 != (int_64)20) ){ goto $label$12 }
	$27 = (int_64)20
	$14 = ((float_64)(CASTING float_64)(uint_64 *($28 + [16])) * (float_64)(float_64)1.3)
	$15 = (CASTING float_64)(uint_64 $2)
	if ( (((float_64)$15 <= (float_64)$14) | (((float_64)$15 != (float_64)$15) | ((float_64)$14 != (float_64)$14))) ){ goto $label$12 }
	*($33 + [288]) = (int_64)18
	*($33 + [24]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)1800)
	$28 = *($33 + [300])
	$27 = *($33 + [288])
	
.LABEL $label$12
	$8 = *($28 + [8])
	$2 = *($28)
	*(($33 + [8])) = ($33 + [32])
	*($16) = ($33 + [48])
	*($17) = ($33 + [24])
	$9 = *($18)
	$11 = *($19)
	*($33 + [4]) = ($33 + [40])
	*($33) = ($33 + [288])
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$13 }
	$28 = ($11 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$14:
	if ( ((int_64)*(*($28)) == (int_64)$2) ){ goto $label$13 }
	$11 = $28
	$12 = ($28 + [-24])
	$28 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$16 }
	$28 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($28 + [120]) == (int_32)$7), [64])
	goto $label$15 
	
.LABEL $label$16
	$28 = [0]
	$12 = CALL db_find_i64(*($7), *($20), (int_64)6138858918308216832, $2)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$15 }
	$28 = CALL $9($7, $12)
	CALL eosio_assert(((int_32)*($28 + [120]) == (int_32)$7), [64])
	
.LABEL $label$15
	$11 = ((int_64)$27 == (int_64)20)
	$10 = ((int_64)$27 == (int_64)18)
	CALL eosio_assert(((int_64)*($28 + [8]) == (int_64)$8), [176])
	*((($33 + [128]) + [8])) = $8
	*((($33 + [128]) + [16])) = (int_64)-1
	*($21) = (int_64)0
	$12 = [0]
	*($22) = [0]
	$27 = *($1)
	*($33 + [128]) = $27
	*($23) = [0]
	$9 = CALL db_find_i64($27, $8, (int_64)6138858918308216832, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	$12 = CALL $9(($33 + [128]), $9)
	CALL eosio_assert(((int_32)*($12 + [120]) == (int_32)($33 + [128])), [64])
	
.LABEL $label$17
	$2 = (CASTING uint_64)(uint_32 $11)
	$27 = (CASTING uint_64)(uint_32 $10)
	CALL $30($7, $7, $28, *($1), $33)
	CALL $30(($33 + [128]), ($33 + [128]), $12, *($1), $33)
	$11 = *($21)
	if ( ($11 == 0) ){ goto $label$18 }
	$28 = *($24)
	if ( ((int_32)$28 == (int_32)$11) ){ goto $label$20 }
	
.LOOP $label$21:
	$28 = ($28 + [-24])
	$12 = *($28)
	*($28) = [0]
	if ( ($12 == 0) ){ goto $label$22 }
	CALL $108($12)
	
.LABEL $label$22
	if ( ((int_32)$11 != (int_32)$28) ){ goto $label$21 }
	$28 = *($21)
	goto $label$19 
	
.LABEL $label$20
	$28 = $11
	
.LABEL $label$19
	*($24) = $11
	CALL $108($28)
	
.LABEL $label$18
	$30 = ((int_64)$2 + (int_64)$30)
	$29 = ((int_64)$27 + (int_64)$29)
	$31 = ((int_64)$31 + (int_64)1)
	$32 = ((int_64)*($33 + [48]) + (int_64)$32)
	$12 = [0]
	
.LABEL $label$11
	CALL $18(($33 + [296]))
	$28 = *($33 + [300])
	if ( $28 ){ goto $label$10 }
	$26 = ((int_64)$32 + (int_64)$26)
	if ( ($12 & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$32 = (int_64)0
	$31 = (int_64)0
	$30 = (int_64)0
	$29 = (int_64)0
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	$27 = *($1)
	CALL eosio_assert([1], [192])
	CALL eosio_assert(((int_32)*($25 + [160]) == (int_32)$5), [240])
	CALL eosio_assert(((int_64)*(($1 + [168])) == (int_64)CALL $fimport$4()), [288])
	*($25 + [144]) = $26
	$28 = ($25 + [136])
	$2 = *($28)
	*($28) = $6
	*($33 + [48]) = $2
	*($33 + [56]) = *(($25 + [128]))
	$2 = *($25)
	*($25 + [16]) = $29
	*($25 + [24]) = $30
	CALL eosio_assert([1], [352])
	*($33 + [8]) = (($33 + [128]) + [160])
	*($33 + [4]) = ($33 + [128])
	*($33) = ($33 + [128])
	CALL $19($33, $25)
	CALL db_update_i64(*($25 + [164]), $27, ($33 + [128]), [160])
	$12 = ($1 + [184])
	if ( (uint_64)($2 <= *($12)) ){ goto $label$23 }
	*($12) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$12 = (($33 + [48]) + [8])
	*($33 + [296]) = *($28)
	if ( (CALL memcmp(($33 + [48]), ($33 + [296]), [8]) == 0) ){ goto $label$24 }
	$11 = ($25 + [168])
	$28 = *($11)
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$25 }
	$28 = CALL db_idx64_find_primary(*(($1 + [168])), *(($1 + [176])), (int_64)-6030912134838419456, ($33 + [288]), $2)
	*($11) = $28
	
.LABEL $label$25
	CALL db_idx64_update($28, $27, ($33 + [296]))
	
.LABEL $label$24
	*($33 + [296]) = *(($25 + [128]))
	if ( (CALL memcmp($12, ($33 + [296]), [8]) == 0) ){ goto $label$26 }
	$12 = ($25 + [172])
	$28 = *($12)
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$27 }
	$28 = CALL db_idx64_find_primary(*(($1 + [168])), *(($1 + [176])), (int_64)-6030912134838419455, ($33 + [288]), $2)
	*($12) = $28
	
.LABEL $label$27
	CALL db_idx64_update($28, $27, ($33 + [296]))
	
.LABEL $label$26
	*(($0 + [8])) = $32
	*(($0 + [32])) = $31
	*(($0 + [16])) = $26
	$11 = *($33 + [112])
	if ( ($11 == 0) ){ goto $label$3 }
	$10 = ($33 + [116])
	$28 = *($10)
	if ( ((int_32)$28 == (int_32)$11) ){ goto $label$29 }
	
.LOOP $label$30:
	$28 = ($28 + [-24])
	$12 = *($28)
	*($28) = [0]
	if ( ($12 == 0) ){ goto $label$31 }
	CALL $108($12)
	
.LABEL $label$31
	if ( ((int_32)$11 != (int_32)$28) ){ goto $label$30 }
	$28 = *(($33 + [112]))
	goto $label$28 
	
.LABEL $label$29
	$28 = $11
	
.LABEL $label$28
	*($10) = $11
	CALL $108($28)
	
.LABEL $label$3
	*([0] + [4]) = ($33 + [304])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11068])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10964])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10772]
	$1 = (((int_32)$2 * (int_32)[12]) + [10772])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN9justaward15chkdead_alltreeEyy (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_32 $26
	$26 = (*([0] + [4]) - [64])
	*([0] + [4]) = $26
	$25 = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$4 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	$6 = (int_64)0
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	CALL _ZN9justaward12chkdead_userEymy(($26 + [24]), $1, $2, $4, (int_64)0)
	$25 = *($26 + [56])
	$6 = *($26 + [24])
	
.LABEL $label$1
	$5 = ($1 + [128])
	*($26 + [16]) = $5
	CALL $16(($26 + [24]), ($26 + [16]), [168])
	$24 = *($26 + [28])
	if ( ($24 == 0) ){ goto $label$3 }
	if ( ((int_64)*($24 + [48]) != (int_64)18) ){ goto $label$3 }
	$8 = *($26 + [24])
	*($26 + [8]) = $8
	$24 = (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)
	if ( ($24) == 0) ){ goto $label$2 }
	$13 = ($1 + [152])
	$14 = ($1 + [156])
	$15 = ($1 + [136])
	$16 = ($1 + [128])
	$17 = ($26 + [32])
	$18 = ($26 + [40])
	$19 = ($26 + [48])
	$20 = ($26 + [56])
	$22 = ($26 + [60])
	$23 = ($26 + [52])
	
.LOOP $label$4:
	if ( ((int_64)*($24 + [48]) != (int_64)18) ){ goto $label$2 }
	$7 = *($24 + [8])
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$5 }
	if ( ((uint_64)$25 > (uint_64)$3) ){ goto $label$2 }
	if ( ($4 <= *($24 + [44])) ){ goto $label$6 }
	$8 = *($24)
	$9 = *($13)
	$11 = *($14)
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$7 }
	$24 = ($11 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$8:
	if ( ((int_64)*(*($24)) == (int_64)$8) ){ goto $label$7 }
	$11 = $24
	$12 = ($24 + [-24])
	$24 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$10 }
	$24 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [120]) == (int_32)$5), [64])
	goto $label$9 
	
.LABEL $label$10
	$24 = [0]
	$12 = CALL db_find_i64(*($16), *($15), (int_64)6138858918308216832, $8)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$9 }
	$24 = CALL $9($5, $12)
	CALL eosio_assert(((int_32)*($24 + [120]) == (int_32)$5), [64])
	
.LABEL $label$9
	CALL eosio_assert(((int_64)*($24 + [8]) == (int_64)$7), [176])
	*($17) = $7
	*($18) = (int_64)-1
	*($19) = (int_64)0
	$12 = [0]
	*($20) = [0]
	$21 = *($1)
	*($26 + [24]) = $21
	*($22) = [0]
	$11 = CALL db_find_i64($21, $7, (int_64)6138858918308216832, $8)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$11 }
	$12 = CALL $9(($26 + [24]), $11)
	CALL eosio_assert(((int_32)*($12 + [120]) == (int_32)($26 + [24])), [64])
	
.LABEL $label$11
	CALL $24($5, $5, $24, *($1))
	CALL $24(($26 + [24]), ($26 + [24]), $12, *($1))
	$11 = *($19)
	if ( ($11 == 0) ){ goto $label$12 }
	$24 = *($23)
	if ( ((int_32)$24 == (int_32)$11) ){ goto $label$14 }
	
.LOOP $label$15:
	$24 = ($24 + [-24])
	$12 = *($24)
	*($24) = [0]
	if ( ($12 == 0) ){ goto $label$16 }
	CALL $108($12)
	
.LABEL $label$16
	if ( ((int_32)$11 != (int_32)$24) ){ goto $label$15 }
	$24 = *($19)
	goto $label$13 
	
.LABEL $label$14
	$24 = $11
	
.LABEL $label$13
	*($23) = $11
	CALL $108($24)
	
.LABEL $label$12
	$6 = ((int_64)*(*($26 + [12]) + [24]) + (int_64)$6)
	
.LABEL $label$6
	$25 = ((int_64)$25 + (int_64)1)
	
.LABEL $label$5
	CALL $18(($26 + [8]))
	$24 = *($26 + [12])
	if ( $24 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	*($26 + [12]) = [0]
	*($26 + [8]) = ($26 + [16])
	
.LABEL $label$2
	*($0) = $6
	*(($0 + [32])) = $25
	*([0] + [4]) = ($26 + [64])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN9justaward15chkdead_alluserEyy (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$7 = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$5 = CALL current_time()
	*($10 + [56]) = ($1 + [168])
	*($10 + [8]) = (int_64)0
	$9 = ((uint_64)$5 / (uint_64)(int_64)1000000)
	$5 = ((uint_64)((int_64)$9 & (int_64)4294967295) / (uint_64)$3)
	CALL $26(($10 + [48]), ($10 + [56]), ($10 + [8]))
	$6 = *($10 + [52])
	if ( ($6 == 0) ){ goto $label$4 }
	$4 = (CASTING uint_32)(uint_64 $9)
	$8 = ($10 + [40])
	$3 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)*($6 + [128]) >= (uint_64)$5) ){ goto $label$5 }
	if ( (int_64)($3 == 0) ){ goto $label$7 }
	if ( ((uint_64)((int_64)((int_64)*($6 + [16]) + (int_64)$3) + (int_64)*($6 + [24])) > (uint_64)$2) ){ goto $label$2 }
	
.LABEL $label$7
	CALL _ZN9justaward12chkdead_userEymy(($10 + [8]), $1, *($6), $4, $5)
	$7 = ((int_64)*($10 + [8]) + (int_64)$7)
	$9 = *($8)
	CALL $27(($10 + [48]))
	$3 = ((int_64)$9 + (int_64)$3)
	if ( ((uint_64)$3 > (uint_64)$2) ){ goto $label$5 }
	$6 = *($10 + [52])
	if ( $6 ){ goto $label$6 }
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [32])) = $3
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$4
	*($0) = (int_64)0
	*(($0 + [32])) = (int_64)0
	
.LABEL $label$3
	*(($0 + [24])) = (int_64)1
	goto $label$1 
	
.LABEL $label$2
	*($0) = $7
	*(($0 + [32])) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [176])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [288])
	$6 = ($2 + [48])
	$5 = *($6)
	*($6) = (int_64)16
	*($8 + [144]) = $5
	*($8 + [152]) = *(($2 + [56]))
	$5 = *($2)
	CALL eosio_assert([1], [352])
	*($8 + [136]) = ($8 + [120])
	*($8 + [132]) = $8
	*($8 + [128]) = $8
	CALL $20(($8 + [128]), $2)
	CALL db_update_i64(*($2 + [124]), $3, $8, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = (($8 + [144]) + [8])
	*($8 + [168]) = *($6)
	if ( (CALL memcmp(($8 + [144]), ($8 + [168]), [8]) == 0) ){ goto $label$2 }
	$7 = ($2 + [128])
	$6 = *($7)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216832, ($8 + [160]), $5)
	*($7) = $6
	
.LABEL $label$3
	CALL db_idx64_update($6, $3, ($8 + [168]))
	
.LABEL $label$2
	*($8 + [168]) = *(($2 + [56]))
	if ( (CALL memcmp($4, ($8 + [168]), [8]) == 0) ){ goto $label$4 }
	$6 = ($2 + [132])
	$2 = *($6)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216833, ($8 + [160]), $5)
	*($6) = $2
	
.LABEL $label$5
	CALL db_idx64_update($2, $3, ($8 + [168]))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [176])
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [32])
	$6 = *($0 + [4])
	$7 = *(($6 + [172]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6030912134838419455, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [172])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$2), [64])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $15($2, CALL $fimport$7(*($2), *($2 + [8]), (int_64)-6030912134838419456, $3))
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$2), [64])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [172])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6030912134838419455, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [160]) == (int_32)$4), [64])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $15($4, CALL $fimport$7(*($4), *($4 + [8]), (int_64)-6030912134838419456, $5))
	CALL eosio_assert(((int_32)*($2 + [160]) == (int_32)$4), [64])
	
.LABEL $label$4
	*(($2 + [172])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $109 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [176])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [288])
	*($2 + [104]) = *(*($4))
	$4 = ($2 + [48])
	*($8 + [144]) = *($4)
	*($8 + [152]) = *(($2 + [56]))
	$6 = *($2)
	*($2 + [44]) = (*($2 + [44]) + [7200])
	CALL eosio_assert([1], [352])
	*($8 + [136]) = ($8 + [120])
	*($8 + [132]) = $8
	*($8 + [128]) = $8
	CALL $20(($8 + [128]), $2)
	CALL db_update_i64(*($2 + [124]), $3, $8, [120])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = (($8 + [144]) + [8])
	*($8 + [168]) = *($4)
	if ( (CALL memcmp(($8 + [144]), ($8 + [168]), [8]) == 0) ){ goto $label$2 }
	$7 = ($2 + [128])
	$4 = *($7)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216832, ($8 + [160]), $6)
	*($7) = $4
	
.LABEL $label$3
	CALL db_idx64_update($4, $3, ($8 + [168]))
	
.LABEL $label$2
	*($8 + [168]) = *(($2 + [56]))
	if ( (CALL memcmp($5, ($8 + [168]), [8]) == 0) ){ goto $label$4 }
	$4 = ($2 + [132])
	$2 = *($4)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216833, ($8 + [160]), $6)
	*($4) = $2
	
.LABEL $label$5
	CALL db_idx64_update($2, $3, ($8 + [168]))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [176])
}

void .FUNC _ZN9justaward7buydrugEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [128])
	*([0] + [4]) = $15
	CALL require_auth($2)
	$14 = *(($0 + [32]))
	$13 = *(($0 + [36]))
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$1 }
	$12 = ($13 + [-24])
	$4 = ([0] - $14)
	
.LOOP $label$2:
	if ( (int_64)(*(*($12)) == 0) ){ goto $label$1 }
	$13 = $12
	$5 = ($12 + [-24])
	$12 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$4 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$5), [64])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$13 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159545106726912, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $35($5, $13)
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$5), [64])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [800])
	$6 = *($12 + [8])
	$14 = *(($0 + [72]))
	$13 = *(($0 + [76]))
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$5 }
	$12 = ($13 + [-24])
	$4 = ([0] - $14)
	
.LOOP $label$6:
	if ( ((int_64)*(*($12)) == (int_64)$6) ){ goto $label$5 }
	$13 = $12
	$5 = ($12 + [-24])
	$12 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$7 = ($0 + [48])
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$8 }
	$14 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [96]) == (int_32)$7), [64])
	goto $label$7 
	
.LABEL $label$8
	$14 = [0]
	$12 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035932468960034816, $6)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	$14 = CALL $36($7, $12)
	CALL eosio_assert(((int_32)*($14 + [96]) == (int_32)$7), [64])
	
.LABEL $label$7
	$8 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($8, [800])
	CALL eosio_assert((uint_64)(*($14 + [24]) <= (int_64)6), [864])
	$6 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$10 = *(($0 + [152]))
	$13 = *(($0 + [156]))
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$9 }
	$12 = ($13 + [-24])
	$4 = ([0] - $10)
	
.LOOP $label$10:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$9 }
	$13 = $12
	$5 = ($12 + [-24])
	$12 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$9 = ($0 + [128])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$12 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [120]) == (int_32)$9), [64])
	goto $label$11 
	
.LABEL $label$12
	$12 = [0]
	$13 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)6138858918308216832, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	$12 = CALL $9($9, $13)
	CALL eosio_assert(((int_32)*($12 + [120]) == (int_32)$9), [64])
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [1536])
	CALL eosio_assert(((int_64)*($12 + [48]) == (int_64)18), [1552])
	if ( ((uint_32)$5 >= (uint_32)*($12 + [44])) ){ goto $label$16 }
	$6 = ((int_64)*($12 + [104]) + (int_64)1)
	*($15 + [8]) = $6
	$6 = ((int_64)*($12 + [16]) * (int_64)$6)
	$11 = *($3)
	CALL eosio_assert(((uint_64)$11 >= (uint_64)( (int_64)1 ? ((uint_64)$6 / (uint_64)(int_64)100) : (uint_64)($6 <= (int_64)100) )), [1600])
	$10 = *(($0 + [152]))
	$13 = *(($0 + [156]))
	*($15 + [112]) = ($15 + [8])
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$17 }
	$12 = ($13 + [-24])
	$4 = ([0] - $10)
	
.LOOP $label$18:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$17 }
	$13 = $12
	$5 = ($12 + [-24])
	$12 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$18 }
	
.LABEL $label$17
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$15 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [120]) == (int_32)$9), [64])
	goto $label$14 
	
.LABEL $label$16
	CALL eosio_assert([0], [1584])
	goto $label$13 
	
.LABEL $label$15
	$12 = [0]
	$5 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)6138858918308216832, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$14 }
	$12 = CALL $9($9, $5)
	CALL eosio_assert(((int_32)*($12 + [120]) == (int_32)$9), [64])
	
.LABEL $label$14
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)$2), [176])
	$5 = [0]
	*(($15 + [48])) = [0]
	*($15 + [24]) = $2
	*($15 + [32]) = (int_64)-1
	*($15 + [40]) = (int_64)0
	$6 = *($0)
	*($15 + [16]) = $6
	*($15 + [52]) = [0]
	$13 = CALL db_find_i64($6, $2, (int_64)6138858918308216832, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$19 }
	$5 = CALL $9(($15 + [16]), $13)
	CALL eosio_assert(((int_32)*($5 + [120]) == (int_32)($15 + [16])), [64])
	
.LABEL $label$19
	CALL $69($9, $9, $12, *($0), ($15 + [112]))
	CALL $69(($15 + [16]), ($15 + [16]), $5, *($0), ($15 + [112]))
	$13 = *($15 + [40])
	if ( ($13 == 0) ){ goto $label$20 }
	$4 = ($15 + [44])
	$12 = *($4)
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$22 }
	
.LOOP $label$23:
	$12 = ($12 + [-24])
	$5 = *($12)
	*($12) = [0]
	if ( ($5 == 0) ){ goto $label$24 }
	CALL $108($5)
	
.LABEL $label$24
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$23 }
	$12 = *(($15 + [40]))
	goto $label$21 
	
.LABEL $label$22
	$12 = $13
	
.LABEL $label$21
	*($4) = $13
	CALL $108($12)
	
.LABEL $label$20
	$6 = *($0)
	CALL eosio_assert($8, [192])
	CALL eosio_assert(((int_32)*($14 + [96]) == (int_32)$7), [240])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$4()), [288])
	*($14 + [72]) = ((int_64)*($14 + [72]) + (int_64)$11)
	$1 = *($14)
	CALL eosio_assert([1], [352])
	*($15 + [120]) = (($15 + [16]) + [96])
	*($15 + [116]) = ($15 + [16])
	*($15 + [112]) = ($15 + [16])
	CALL $38(($15 + [112]), $14)
	CALL db_update_i64(*($14 + [100]), $6, ($15 + [16]), [96])
	$12 = ($0 + [64])
	if ( (uint_64)($1 <= *($12)) ){ goto $label$13 }
	*($12) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($15 + [128])
}

void .FUNC $108 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $66(*($1), ($0 + [32]))
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [416])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [416])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [416])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [416])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [124]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [688])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)6138858918308216832)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [624])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [624])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $9(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $107(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $118($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $108($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [416])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [416])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [416])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $107($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $118($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $108($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2576])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $62($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [160])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $101($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $110($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $107($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $110($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $108($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $109($7)
	return (unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $104([2580], $0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [288])
	*([0] + [4]) = $3
	*(($3 + [16])) = $0
	*(($3 + [24])) = (int_64)-1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = [0]
	*($3 + [8]) = $0
	*($3) = $0
	*($3 + [48]) = $0
	*(($3 + [56])) = $0
	*(($3 + [64])) = (int_64)-1
	*(($3 + [72])) = [0]
	*(($3 + [76])) = [0]
	*(($3 + [80])) = [0]
	*($3 + [88]) = $0
	*(($3 + [96])) = $0
	*(($3 + [104])) = (int_64)-1
	*(($3 + [112])) = [0]
	*(($3 + [116])) = [0]
	*(($3 + [120])) = [0]
	*($3 + [128]) = $0
	*(($3 + [136])) = $0
	*(($3 + [144])) = (int_64)-1
	*(($3 + [152])) = [0]
	*(($3 + [156])) = [0]
	*(($3 + [160])) = [0]
	*(($3 + [164])) = [0]
	*($3 + [168]) = $0
	*(($3 + [176])) = $0
	*(($3 + [184])) = (int_64)-1
	*(($3 + [192])) = [0]
	*(($3 + [196])) = [0]
	*(($3 + [200])) = [0]
	*(($3 + [204])) = [0]
	*($3 + [208]) = $0
	*(($3 + [216])) = $0
	*(($3 + [224])) = (int_64)-1
	*(($3 + [232])) = [0]
	*(($3 + [236])) = [0]
	*(($3 + [240])) = [0]
	*(($3 + [244])) = [0]
	*($3 + [248]) = $0
	*(($3 + [256])) = $0
	*(($3 + [264])) = (int_64)-1
	*(($3 + [272])) = [0]
	*(($3 + [276])) = [0]
	*(($3 + [280])) = [0]
	CALL _ZN9justaward5applyEyy($3, $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11062]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11064])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11062]) = [1]
	$7 = ($7 << [16])
	*([0] + [11064]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11064])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11064]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11062]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11062]) = [1]
	$3 = ($3 << [16])
	*([0] + [11064]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11064])
	
.LABEL $label$8
	*([0] + [11064]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $105($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10976])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1360])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [1408])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1472])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $108($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $108($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [416])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN9justaward7settingEyyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$5 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$1 }
	$10 = ($8 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( (int_64)(*(*($10)) == 0) ){ goto $label$1 }
	$8 = $10
	$9 = ($10 + [-24])
	$10 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	$10 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$9), [64])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159545106726912, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $35($9, $8)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$9), [64])
	
.LABEL $label$3
	$8 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($8, [800])
	$7 = *($0)
	CALL eosio_assert($8, [192])
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$9), [240])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$4()), [288])
	*($10 + [32]) = $1
	*($10 + [40]) = $2
	*($10 + [48]) = $3
	*($10 + [56]) = $4
	$1 = *($10)
	CALL eosio_assert([1], [352])
	*($11 + [88]) = ($11 + [64])
	*($11 + [84]) = $11
	*($11 + [80]) = $11
	CALL $40(($11 + [80]), $10)
	CALL db_update_i64(*($10 + [68]), $7, $11, [64])
	$10 = ($0 + [24])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$5 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$2 = *($0)
	CALL eosio_assert(((int_64)*($0 + [88]) == (int_64)CALL $fimport$4()), [560])
	*(($10 = CALL $107([56])) + [40]) = ($0 + [88])
	*($10) = (int_64)0
	*($11 + [88]) = ($11 + [40])
	*($11 + [84]) = $11
	*($11 + [80]) = $11
	CALL $87(($11 + [80]), $10)
	$1 = *($10)
	$8 = CALL db_store_i64(*(($0 + [96])), (int_64)-7876119215961276416, $2, $1, $11, [40])
	*($10 + [44]) = $8
	$9 = ($0 + [104])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$6 }
	*($9) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($11 + [80]) = $10
	$1 = *($10)
	*($11) = $1
	*($11 + [76]) = $8
	$6 = ($0 + [116])
	$9 = *($6)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [120]))) ){ goto $label$8 }
	*($9 + [8]) = $1
	*($9 + [16]) = $8
	*($11 + [80]) = [0]
	*($9) = $10
	*($6) = ($9 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $88(($0 + [112]), ($11 + [80]), $11, ($11 + [76]))
	
.LABEL $label$7
	$10 = *($11 + [80])
	*($11 + [80]) = [0]
	if ( ($10 == 0) ){ goto $label$9 }
	CALL $108($10)
	
.LABEL $label$9
	*(($11 + [32])) = [0]
	*($11 + [16]) = (int_64)-1
	$1 = *($0)
	*($11) = $1
	*($11 + [8]) = $1
	*($11 + [24]) = (int_64)0
	$10 = CALL db_lowerbound_i64($1, $1, (int_64)-3020380074831511552, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$10 }
	$9 = CALL $80($11, $10)
	
.LOOP $label$11:
	CALL eosio_assert([1], [960])
	CALL eosio_assert([1], [32])
	$10 = [0]
	$0 = CALL db_next_i64(*($9 + [68]), ($11 + [80]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$12 }
	$10 = CALL $80($11, $0)
	
.LABEL $label$12
	CALL $89($11, $9)
	$9 = $10
	if ( $10 ){ goto $label$11 }
	
.LABEL $label$10
	$0 = *($11 + [24])
	if ( ($0 == 0) ){ goto $label$13 }
	$8 = ($11 + [28])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$10 = ($10 + [-24])
	$9 = *($10)
	*($10) = [0]
	if ( ($9 == 0) ){ goto $label$17 }
	CALL $108($9)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$16 }
	$10 = *(($11 + [24]))
	goto $label$14 
	
.LABEL $label$15
	$10 = $0
	
.LABEL $label$14
	*($8) = $0
	CALL $108($10)
	
.LABEL $label$13
	*([0] + [4]) = ($11 + [96])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [176])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [288])
	$6 = ($2 + [48])
	*($8 + [144]) = *($6)
	*($8 + [152]) = *(($2 + [56]))
	*($6) = *(*($4))
	$5 = *($2)
	*($2 + [72]) = *(*($4 + [4]))
	*($2 + [80]) = *(*($4 + [8]))
	*($2 + [88]) = *(*($4 + [12]) + [16])
	*($2 + [96]) = *(*($4 + [12]) + [24])
	*($2 + [44]) = *(*($4 + [16]))
	CALL eosio_assert([1], [352])
	*($8 + [136]) = ($8 + [120])
	*($8 + [132]) = $8
	*($8 + [128]) = $8
	CALL $20(($8 + [128]), $2)
	CALL db_update_i64(*($2 + [124]), $3, $8, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = (($8 + [144]) + [8])
	*($8 + [168]) = *($6)
	if ( (CALL memcmp(($8 + [144]), ($8 + [168]), [8]) == 0) ){ goto $label$2 }
	$7 = ($2 + [128])
	$6 = *($7)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216832, ($8 + [160]), $5)
	*($7) = $6
	
.LABEL $label$3
	CALL db_idx64_update($6, $3, ($8 + [168]))
	
.LABEL $label$2
	*($8 + [168]) = *(($2 + [56]))
	if ( (CALL memcmp($4, ($8 + [168]), [8]) == 0) ){ goto $label$4 }
	$4 = ($2 + [132])
	$2 = *($4)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216833, ($8 + [160]), $5)
	*($4) = $2
	
.LABEL $label$5
	CALL db_idx64_update($2, $3, ($8 + [168]))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [176])
}

void .FUNC _ZN9justaward7chktreeEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	float_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_64 $31
	int_32 $32
	$32 = (*([0] + [4]) - [304])
	*([0] + [4]) = $32
	$9 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$4 = *(($0 + [32]))
	$12 = *(($0 + [36]))
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$1 }
	$30 = ($12 + [-24])
	$11 = ([0] - $4)
	
.LOOP $label$2:
	if ( (int_64)(*(*($30)) == 0) ){ goto $label$1 }
	$12 = $30
	$13 = ($30 + [-24])
	$30 = $13
	if ( ((int_32)($13 + $11) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$13 = ($0 + [8])
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$4 }
	$30 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($30 + [64]) == (int_32)$13), [64])
	goto $label$3 
	
.LABEL $label$4
	$30 = [0]
	$12 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159545106726912, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$30 = CALL $35($13, $12)
	CALL eosio_assert(((int_32)*($30 + [64]) == (int_32)$13), [64])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [800])
	$8 = *($30 + [8])
	$4 = *(($0 + [72]))
	$12 = *(($0 + [76]))
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$5 }
	$30 = ($12 + [-24])
	$11 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($30)) == (int_64)$8) ){ goto $label$5 }
	$12 = $30
	$13 = ($30 + [-24])
	$30 = $13
	if ( ((int_32)($13 + $11) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$13 = ($0 + [48])
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$8 }
	$30 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($30 + [96]) == (int_32)$13), [64])
	goto $label$7 
	
.LABEL $label$8
	$30 = [0]
	$12 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035932468960034816, $8)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	$30 = CALL $36($13, $12)
	CALL eosio_assert(((int_32)*($30 + [96]) == (int_32)$13), [64])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [800])
	$3 = *($30 + [16])
	$4 = ($0 + [128])
	*($32 + [104]) = $4
	CALL $16(($32 + [96]), ($32 + [104]), [168])
	$30 = *($32 + [100])
	if ( ($30 == 0) ){ goto $label$9 }
	$2 = ((CASTING uint_32)(uint_64 $9) + [-300])
	$5 = ($0 + [168])
	$7 = (($32 + [112]) + [160])
	$6 = (($32 + [8]) + [8])
	$16 = ($32 + [20])
	$17 = (($32 + [8]) + [16])
	$18 = ($0 + [152])
	$19 = ($0 + [156])
	$20 = ($0 + [136])
	$21 = ($32 + [136])
	$22 = ($32 + [144])
	$24 = ($32 + [148])
	$26 = ($0 + [192])
	$27 = ($0 + [196])
	$28 = ($0 + [176])
	$29 = ($0 + [184])
	$25 = ($32 + [140])
	$31 = (int_64)0
	
.LOOP $label$10:
	if ( (uint_64)(*($30 + [48]) <= (int_64)18) ){ goto $label$11 }
	if ( ((uint_64)*($30 + [88]) >= (uint_64)$3) ){ goto $label$11 }
	if ( ((uint_64)$31 > (uint_64)$1) ){ goto $label$9 }
	CALL _ZN9justaward9calincomeEyyym(($32 + [64]), $0, *($30 + [88]), *($30 + [96]), *($30 + [24]), $2)
	$30 = *($32 + [100])
	$8 = *($30 + [48])
	*($32 + [56]) = $8
	$9 = ((int_64)*($32 + [64]) + (int_64)*($30 + [72]))
	*($32 + [48]) = $9
	*($32 + [40]) = ((int_64)*((($32 + [64]) + [8])) + (int_64)*($30 + [80]))
	*($32 + [32]) = *($30 + [44])
	if ( ((int_64)$8 != (int_64)20) ){ goto $label$12 }
	$14 = ((float_64)(CASTING float_64)(uint_64 *($30 + [16])) * (float_64)(float_64)1.3)
	$15 = (CASTING float_64)(uint_64 $9)
	if ( (((float_64)$15 <= (float_64)$14) | (((float_64)$15 != (float_64)$15) | ((float_64)$14 != (float_64)$14))) ){ goto $label$12 }
	*($32 + [56]) = (int_64)18
	*($32 + [32]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)1800)
	$30 = *($32 + [100])
	
.LABEL $label$12
	$9 = *($30 + [8])
	$8 = *($30)
	*($6) = ($32 + [40])
	*($16) = ($32 + [64])
	*($17) = ($32 + [32])
	$10 = *($18)
	$12 = *($19)
	*($32 + [12]) = ($32 + [48])
	*($32 + [8]) = ($32 + [56])
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$13 }
	$30 = ($12 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$14:
	if ( ((int_64)*(*($30)) == (int_64)$8) ){ goto $label$13 }
	$12 = $30
	$13 = ($30 + [-24])
	$30 = $13
	if ( ((int_32)($13 + $11) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$16 }
	$30 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($30 + [120]) == (int_32)$4), [64])
	goto $label$15 
	
.LABEL $label$16
	$30 = [0]
	$13 = CALL db_find_i64(*($4), *($20), (int_64)6138858918308216832, $8)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$15 }
	$30 = CALL $9($4, $13)
	CALL eosio_assert(((int_32)*($30 + [120]) == (int_32)$4), [64])
	
.LABEL $label$15
	CALL eosio_assert(((int_64)*($30 + [8]) == (int_64)$9), [176])
	*((($32 + [112]) + [8])) = $9
	*((($32 + [112]) + [16])) = (int_64)-1
	*($21) = (int_64)0
	$13 = [0]
	*($22) = [0]
	$23 = *($0)
	*($32 + [112]) = $23
	*($24) = [0]
	$12 = CALL db_find_i64($23, $9, (int_64)6138858918308216832, $8)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$17 }
	$13 = CALL $9(($32 + [112]), $12)
	CALL eosio_assert(((int_32)*($13 + [120]) == (int_32)($32 + [112])), [64])
	
.LABEL $label$17
	CALL $85($4, $4, $30, *($0), ($32 + [8]))
	CALL $85(($32 + [112]), ($32 + [112]), $13, *($0), ($32 + [8]))
	$12 = *($21)
	if ( ($12 == 0) ){ goto $label$18 }
	$30 = *($25)
	if ( ((int_32)$30 == (int_32)$12) ){ goto $label$20 }
	
.LOOP $label$21:
	$30 = ($30 + [-24])
	$13 = *($30)
	*($30) = [0]
	if ( ($13 == 0) ){ goto $label$22 }
	CALL $108($13)
	
.LABEL $label$22
	if ( ((int_32)$12 != (int_32)$30) ){ goto $label$21 }
	$30 = *($21)
	goto $label$19 
	
.LABEL $label$20
	$30 = $12
	
.LABEL $label$19
	*($25) = $12
	CALL $108($30)
	
.LABEL $label$18
	if ( (int_64)(*($32 + [64]) == 0) ){ goto $label$23 }
	$8 = *(*($32 + [100]) + [8])
	$10 = *($26)
	$12 = *($27)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$24 }
	$30 = ($12 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$25:
	if ( ((int_64)*(*($30)) == (int_64)$8) ){ goto $label$24 }
	$12 = $30
	$13 = ($30 + [-24])
	$30 = $13
	if ( ((int_32)($13 + $11) != (int_32)[-24]) ){ goto $label$25 }
	
.LABEL $label$24
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$27 }
	$30 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($30 + [160]) == (int_32)$5), [64])
	goto $label$26 
	
.LABEL $label$27
	$30 = [0]
	$13 = CALL db_find_i64(*($5), *($28), (int_64)-6030912134838419456, $8)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$26 }
	$30 = CALL $15($5, $13)
	CALL eosio_assert(((int_32)*($30 + [160]) == (int_32)$5), [64])
	
.LABEL $label$26
	$9 = *($0)
	$8 = *($30 + [144])
	$23 = *($32 + [64])
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($30 + [160]) == (int_32)$5), [240])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$4()), [288])
	*($30 + [144]) = ((int_64)$23 + (int_64)$8)
	$13 = ($30 + [128])
	*($6) = *($13)
	$12 = ($30 + [136])
	*($32 + [8]) = *($12)
	$8 = *($30)
	CALL eosio_assert([1], [352])
	*((($32 + [272]) + [8])) = $7
	*($32 + [276]) = ($32 + [112])
	*($32 + [272]) = ($32 + [112])
	CALL $19(($32 + [272]), $30)
	CALL db_update_i64(*($30 + [164]), $9, ($32 + [112]), [160])
	if ( (uint_64)($8 <= *($29)) ){ goto $label$28 }
	*($29) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	*($32 + [296]) = *($12)
	if ( (CALL memcmp(($32 + [8]), ($32 + [296]), [8]) == 0) ){ goto $label$29 }
	$11 = ($30 + [168])
	$12 = *($11)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$30 }
	$12 = CALL db_idx64_find_primary(*($5), *($28), (int_64)-6030912134838419456, ($32 + [288]), $8)
	*($11) = $12
	
.LABEL $label$30
	CALL db_idx64_update($12, $9, ($32 + [296]))
	
.LABEL $label$29
	*($32 + [296]) = *($13)
	if ( (CALL memcmp($6, ($32 + [296]), [8]) == 0) ){ goto $label$23 }
	$13 = ($30 + [172])
	$30 = *($13)
	if ( ((int_32)$30 > (int_32)[-1]) ){ goto $label$31 }
	$30 = CALL db_idx64_find_primary(*($5), *($28), (int_64)-6030912134838419455, ($32 + [288]), $8)
	*($13) = $30
	
.LABEL $label$31
	CALL db_idx64_update($30, $9, ($32 + [296]))
	
.LABEL $label$23
	$31 = ((int_64)$31 + (int_64)1)
	
.LABEL $label$11
	CALL $18(($32 + [96]))
	$30 = *($32 + [100])
	if ( $30 ){ goto $label$10 }
	
.LABEL $label$9
	*([0] + [4]) = ($32 + [304])
}

void .FUNC _ZN9justaward9chkincomeEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)-6030912134838419456, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$2 = ($0 + [168])
	$3 = CALL $15($2, $3)
	
.LOOP $label$3:
	if ( ((int_64)*($3 + [64]) != (int_64)*($3 + [72])) ){ goto $label$5 }
	if ( ((int_64)*($3 + [144]) != (int_64)*($3 + [152])) ){ goto $label$5 }
	if ( ((int_64)*($3 + [96]) != (int_64)*($3 + [104])) ){ goto $label$5 }
	if ( ((int_64)*($3 + [80]) != (int_64)*($3 + [88])) ){ goto $label$5 }
	if ( ((int_64)*($3 + [112]) == (int_64)*($3 + [120])) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$1 }
	CALL _ZN9justaward9withdraw2Ey($0, *($3))
	$4 = ((int_64)$4 + (int_64)1)
	
.LABEL $label$4
	CALL eosio_assert([1], [32])
	$3 = CALL db_next_i64(*($3 + [164]), ($5 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $15($2, $3)
	goto $label$3 
	
.LABEL $label$6
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [2256])
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [128])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $107([80])) + [64]) = $0
	CALL $81(($8 + [32]), $6)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $82(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN9justaward9chkmytreeEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [160])
	*([0] + [4]) = $10
	$6 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$9 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$2 = ([0] - $9)
	
.LOOP $label$2:
	if ( (int_64)(*(*($7)) == 0) ){ goto $label$1 }
	$8 = $7
	$3 = ($7 + [-24])
	$7 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$7), [64])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$3 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159545106726912, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $35($7, $3)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$7), [64])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [800])
	$4 = *($9 + [8])
	$5 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$2 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$4) ){ goto $label$5 }
	$8 = $7
	$3 = ($7 + [-24])
	$7 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = (CASTING uint_32)(uint_64 $6)
	$6 = ((int_64)$6 & (int_64)4294967295)
	$2 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$8 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$2), [64])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035932468960034816, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $36($2, $8)
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$2), [64])
	
.LABEL $label$7
	$8 = ($3 + [-300])
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [800])
	CALL eosio_assert((uint_64)(*($7 + [24]) <= (int_64)6), [864])
	CALL _ZN9justaward12chkdead_userEymy(($10 + [8]), $0, $1, $3, ((uint_64)$6 / (uint_64)*($9 + [48])))
	$4 = *($10 + [8])
	if ( (int_64)($4 == 0) ){ goto $label$9 }
	CALL eosio_assert(((uint_64)*($7 + [8]) >= (uint_64)$4), [1728])
	$6 = *($0)
	CALL eosio_assert($5, [192])
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)$2), [240])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$4()), [288])
	*($7 + [8]) = (int_64))(*($7 + [8]) - $4)
	$4 = *($7)
	CALL eosio_assert([1], [352])
	*($10 + [152]) = (($10 + [48]) + [96])
	*($10 + [148]) = ($10 + [48])
	*($10 + [144]) = ($10 + [48])
	CALL $38(($10 + [144]), $7)
	CALL db_update_i64(*($7 + [100]), $6, ($10 + [48]), [96])
	$3 = ($0 + [64])
	if ( (uint_64)($4 <= *($3)) ){ goto $label$9 }
	*($3) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	CALL _ZN9justaward14chkincome_userEyym(($10 + [48]), $0, $1, *($7 + [16]), $8)
	*([0] + [4]) = ($10 + [160])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [176])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [288])
	$6 = ($2 + [48])
	$5 = *($6)
	*($6) = (int_64)14
	*($8 + [144]) = $5
	*($8 + [152]) = *(($2 + [56]))
	$5 = *($2)
	CALL eosio_assert([1], [352])
	*($8 + [136]) = ($8 + [120])
	*($8 + [132]) = $8
	*($8 + [128]) = $8
	CALL $20(($8 + [128]), $2)
	CALL db_update_i64(*($2 + [124]), $3, $8, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = (($8 + [144]) + [8])
	*($8 + [168]) = *($6)
	if ( (CALL memcmp(($8 + [144]), ($8 + [168]), [8]) == 0) ){ goto $label$2 }
	$7 = ($2 + [128])
	$6 = *($7)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216832, ($8 + [160]), $5)
	*($7) = $6
	
.LABEL $label$3
	CALL db_idx64_update($6, $3, ($8 + [168]))
	
.LABEL $label$2
	*($8 + [168]) = *(($2 + [56]))
	if ( (CALL memcmp($4, ($8 + [168]), [8]) == 0) ){ goto $label$4 }
	$6 = ($2 + [132])
	$2 = *($6)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216833, ($8 + [160]), $5)
	*($6) = $2
	
.LABEL $label$5
	CALL db_idx64_update($2, $3, ($8 + [168]))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [176])
}

void .FUNC _ZN9justaward7buylandEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_auth($1)
}

void .FUNC _ZN9justaward7deltreeEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [208])
	*([0] + [4]) = $12
	CALL require_auth($2)
	$6 = *(($0 + [152]))
	$8 = *(($0 + [156]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$1 }
	$11 = ($8 + [-24])
	$4 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$1 }
	$8 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [128])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	$4 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [120]) == (int_32)$3), [64])
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	$11 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)6138858918308216832, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $9($3, $11)
	CALL eosio_assert(((int_32)*($4 + [120]) == (int_32)$3), [64])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1536])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$2), [1632])
	CALL eosio_assert(((int_64)*($4 + [48]) != (int_64)14), [1664])
	CALL _ZN9justaward9chkmytreeEy($0, $2)
	if ( ((int_64)*($4 + [48]) == (int_64)16) ){ goto $label$5 }
	$5 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$6 }
	$11 = ($8 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$7:
	if ( (int_64)(*(*($11)) == 0) ){ goto $label$6 }
	$8 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$11 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$9 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$11), [64])
	goto $label$8 
	
.LABEL $label$9
	$9 = CALL $35($11, CALL $fimport$7(*(($0 + [8])), *(($0 + [16])), (int_64)7235159545106726912, (int_64)0))
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$11), [64])
	
.LABEL $label$8
	$7 = *($9 + [8])
	$5 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$10 }
	$11 = ($8 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$11:
	if ( ((int_64)*(*($11)) == (int_64)$7) ){ goto $label$10 }
	$8 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$9 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$13 }
	$11 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)$9), [64])
	goto $label$12 
	
.LABEL $label$13
	$11 = [0]
	$8 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035932468960034816, $7)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$11 = CALL $36($9, $8)
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)$9), [64])
	
.LABEL $label$12
	CALL eosio_assert(((uint_64)*($11 + [8]) >= (uint_64)*($4 + [24])), [1696])
	$10 = *($0)
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)$9), [240])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$4()), [288])
	*($11 + [8]) = (int_64))(*($11 + [8]) - *($4 + [24]))
	$7 = *($11)
	CALL eosio_assert([1], [352])
	*($12 + [184]) = ($12 + [96])
	*($12 + [180]) = $12
	*($12 + [176]) = $12
	CALL $38(($12 + [176]), $11)
	CALL db_update_i64(*($11 + [100]), $10, $12, [96])
	$11 = ($0 + [64])
	if ( (uint_64)($7 <= *($11)) ){ goto $label$5 }
	*($11) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$6 = *(($0 + [152]))
	$8 = *(($0 + [156]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$14 }
	$11 = ($8 + [-24])
	$4 = ([0] - $6)
	
.LOOP $label$15:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$14 }
	$8 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $4) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$17 }
	$11 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [120]) == (int_32)$3), [64])
	goto $label$16 
	
.LABEL $label$17
	$11 = [0]
	$9 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)6138858918308216832, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$16 }
	$11 = CALL $9($3, $9)
	CALL eosio_assert(((int_32)*($11 + [120]) == (int_32)$3), [64])
	
.LABEL $label$16
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)$2), [176])
	$9 = [0]
	*(($12 + [32])) = [0]
	*($12 + [8]) = $2
	*($12 + [16]) = (int_64)-1
	*($12 + [24]) = (int_64)0
	$7 = *($0)
	*($12) = $7
	*($12 + [36]) = [0]
	$8 = CALL db_find_i64($7, $2, (int_64)6138858918308216832, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	$9 = CALL $9($12, $8)
	CALL eosio_assert(((int_32)*($9 + [120]) == (int_32)$12), [64])
	
.LABEL $label$18
	CALL $73($3, $3, $11, *($0))
	CALL $73($12, $12, $9, *($0))
	$8 = *($12 + [24])
	if ( ($8 == 0) ){ goto $label$19 }
	$4 = ($12 + [28])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$22:
	$11 = ($11 + [-24])
	$9 = *($11)
	*($11) = [0]
	if ( ($9 == 0) ){ goto $label$23 }
	CALL $108($9)
	
.LABEL $label$23
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$22 }
	$11 = *(($12 + [24]))
	goto $label$20 
	
.LABEL $label$21
	$11 = $8
	
.LABEL $label$20
	*($4) = $8
	CALL $108($11)
	
.LABEL $label$19
	$6 = *(($0 + [192]))
	$8 = *(($0 + [196]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$24 }
	$11 = ($8 + [-24])
	$4 = ([0] - $6)
	
.LOOP $label$25:
	if ( ((int_64)*(*($11)) == (int_64)$2) ){ goto $label$24 }
	$8 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $4) != (int_32)[-24]) ){ goto $label$25 }
	
.LABEL $label$24
	$9 = ($0 + [168])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$28 }
	$11 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [160]) == (int_32)$9), [64])
	if ( $11 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$11 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$26 }
	$11 = CALL $15($9, $11)
	CALL eosio_assert(((int_32)*($11 + [160]) == (int_32)$9), [64])
	
.LABEL $label$27
	$2 = *($0)
	$1 = *($11 + [8])
	CALL eosio_assert([1], [192])
	CALL eosio_assert(((int_32)*($11 + [160]) == (int_32)$9), [240])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [288])
	*($11 + [8]) = ( (int_64)0 ? ((int_64)$1 + (int_64)-1) : (int_64)($1 == 0) )
	$9 = ($11 + [136])
	*($12 + [176]) = *($9)
	*($12 + [184]) = *(($11 + [128]))
	$1 = *($11)
	CALL eosio_assert([1], [352])
	*($12 + [168]) = ($12 + [160])
	*($12 + [164]) = $12
	*($12 + [160]) = $12
	CALL $19(($12 + [160]), $11)
	CALL db_update_i64(*($11 + [164]), $2, $12, [160])
	$8 = ($0 + [184])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$29 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$29
	$8 = (($12 + [176]) + [8])
	*($12 + [200]) = *($9)
	if ( (CALL memcmp(($12 + [176]), ($12 + [200]), [8]) == 0) ){ goto $label$30 }
	$4 = ($11 + [168])
	$9 = *($4)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$31 }
	$9 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, ($12 + [192]), $1)
	*($4) = $9
	
.LABEL $label$31
	CALL db_idx64_update($9, $2, ($12 + [200]))
	
.LABEL $label$30
	*($12 + [200]) = *(($11 + [128]))
	if ( (CALL memcmp($8, ($12 + [200]), [8]) == 0) ){ goto $label$26 }
	$9 = ($11 + [172])
	$11 = *($9)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$32 }
	$11 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419455, ($12 + [192]), $1)
	*($9) = $11
	
.LABEL $label$32
	CALL db_idx64_update($11, $2, ($12 + [200]))
	
.LABEL $label$26
	*([0] + [4]) = ($12 + [208])
}

void .FUNC _ZN9justaward8withdrawEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [256])
	*([0] + [4]) = $17
	CALL require_auth($2)
	$12 = *(($0 + [192]))
	$11 = *(($0 + [196]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$1 }
	$13 = ($11 + [-24])
	$4 = ([0] - $12)
	
.LOOP $label$2:
	if ( ((int_64)*(*($13)) == (int_64)$2) ){ goto $label$1 }
	$11 = $13
	$10 = ($13 + [-24])
	$13 = $10
	if ( ((int_32)($10 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [168])
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$4 }
	$12 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [160]) == (int_32)$3), [64])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$13 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, $2)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $15($3, $13)
	CALL eosio_assert(((int_32)*($12 + [160]) == (int_32)$3), [64])
	
.LABEL $label$3
	$5 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($5, [1760])
	$7 = *(($0 + [152]))
	$11 = *(($0 + [156]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$5 }
	$13 = ($11 + [-24])
	$4 = ([0] - $7)
	
.LOOP $label$6:
	if ( ((int_64)*(*($13)) == (int_64)$1) ){ goto $label$5 }
	$11 = $13
	$10 = ($13 + [-24])
	$13 = $10
	if ( ((int_32)($10 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [128])
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$8 }
	$13 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [120]) == (int_32)$6), [64])
	goto $label$7 
	
.LABEL $label$8
	$13 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)6138858918308216832, $1)
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$9 }
	$13 = CALL $9($6, $13)
	CALL eosio_assert(((int_32)*($13 + [120]) == (int_32)$6), [64])
	goto $label$7 
	
.LABEL $label$9
	$13 = [0]
	
.LABEL $label$7
	*($17 + [76]) = $13
	*($17 + [72]) = $6
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [1536])
	CALL eosio_assert(((int_64)*($13 + [8]) == (int_64)$2), [2096])
	CALL eosio_assert(((uint_64)*($13 + [48]) > (uint_64)(int_64)14), [1664])
	$8 = (int_64)
	if ( (int_64)($8(*($13 + [72]) - *($13 + [112]))) == 0) ){ goto $label$11 }
	$1 = *($13)
	$7 = *(($0 + [152]))
	$11 = *(($0 + [156]))
	*($17 + [32]) = ($17 + [72])
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$12 }
	$13 = ($11 + [-24])
	$4 = ([0] - $7)
	
.LOOP $label$13:
	if ( ((int_64)*(*($13)) == (int_64)$1) ){ goto $label$12 }
	$11 = $13
	$10 = ($13 + [-24])
	$13 = $10
	if ( ((int_32)($10 + $4) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$15 }
	$13 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [120]) == (int_32)$6), [64])
	goto $label$14 
	
.LABEL $label$15
	$13 = [0]
	$10 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)6138858918308216832, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$14 }
	$13 = CALL $9($6, $10)
	CALL eosio_assert(((int_32)*($13 + [120]) == (int_32)$6), [64])
	
.LABEL $label$14
	CALL eosio_assert(((int_64)*($13 + [8]) == (int_64)$2), [176])
	$10 = [0]
	*(($17 + [112])) = [0]
	*($17 + [88]) = $2
	*($17 + [96]) = (int_64)-1
	*($17 + [104]) = (int_64)0
	$16 = *($0)
	*($17 + [80]) = $16
	*($17 + [116]) = [0]
	$11 = CALL db_find_i64($16, $2, (int_64)6138858918308216832, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$16 }
	$10 = CALL $9(($17 + [80]), $11)
	CALL eosio_assert(((int_32)*($10 + [120]) == (int_32)($17 + [80])), [64])
	
.LABEL $label$16
	CALL $77($6, $6, $13, *($0), ($17 + [32]))
	CALL $77(($17 + [80]), ($17 + [80]), $10, *($0), ($17 + [32]))
	$11 = *($17 + [104])
	if ( ($11 == 0) ){ goto $label$17 }
	$4 = ($17 + [108])
	$13 = *($4)
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$19 }
	
.LOOP $label$20:
	$13 = ($13 + [-24])
	$10 = *($13)
	*($13) = [0]
	if ( ($10 == 0) ){ goto $label$21 }
	CALL $108($10)
	
.LABEL $label$21
	if ( ((int_32)$11 != (int_32)$13) ){ goto $label$20 }
	$13 = *(($17 + [104]))
	goto $label$18 
	
.LABEL $label$19
	$13 = $11
	
.LABEL $label$18
	*($4) = $11
	CALL $108($13)
	
.LABEL $label$17
	$16 = *($0)
	$1 = *($12 + [152])
	CALL eosio_assert($5, [192])
	CALL eosio_assert(((int_32)*($12 + [160]) == (int_32)$3), [240])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [288])
	*($12 + [152]) = ((int_64)$1 + (int_64)$8)
	$13 = ($12 + [136])
	*($17 + [32]) = *($13)
	*($17 + [40]) = *(($12 + [128]))
	$1 = *($12)
	CALL eosio_assert([1], [352])
	*($17 + [24]) = (($17 + [80]) + [160])
	*($17 + [20]) = ($17 + [80])
	*($17 + [16]) = ($17 + [80])
	CALL $19(($17 + [16]), $12)
	CALL db_update_i64(*($12 + [164]), $16, ($17 + [80]), [160])
	$10 = ($0 + [184])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$22 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	$10 = (($17 + [32]) + [8])
	*($17 + [240]) = *($13)
	if ( (CALL memcmp(($17 + [32]), ($17 + [240]), [8]) == 0) ){ goto $label$23 }
	$11 = ($12 + [168])
	$13 = *($11)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$24 }
	$13 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, $17, $1)
	*($11) = $13
	
.LABEL $label$24
	CALL db_idx64_update($13, $16, ($17 + [240]))
	
.LABEL $label$23
	*($17 + [240]) = *(($12 + [128]))
	if ( (CALL memcmp($10, ($17 + [240]), [8]) == 0) ){ goto $label$25 }
	$10 = ($12 + [172])
	$13 = *($10)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$26 }
	$13 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419455, $17, $1)
	*($10) = $13
	
.LABEL $label$26
	CALL db_idx64_update($13, $16, ($17 + [240]))
	
.LABEL $label$25
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1184])
	$1 = (int_64)5459781
	$13 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$10 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$10 = [0]
	
.LABEL $label$27
	CALL eosio_assert($10, [1040])
	$9 = *($0)
	$1 = (int_64)0
	$14 = (int_64)59
	$13 = [1072]
	$15 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$37 }
	$10 = *($13)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$10 = ($10 + [165])
	goto $label$35 
	
.LABEL $label$37
	$16 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$33
	$13 = ($13 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$32 }
	*($17 + [24]) = $15
	*($17 + [16]) = $9
	$1 = (int_64)0
	$14 = (int_64)59
	$13 = [1088]
	$15 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$43 }
	$10 = *($13)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$10 = ($10 + [165])
	goto $label$41 
	
.LABEL $label$43
	$16 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$39
	$13 = ($13 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$38 }
	*(($17 + [8])) = [0]
	*($17) = (int_64)0
	$13 = CALL strlen([2128])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$46 }
	*($17) = ($13 << [1])
	$10 = ($17 | [1])
	if ( $13 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$11 = (($13 + [16]) & [-16])
	$10 = CALL $107($11)
	*($17) = ($11 | [1])
	*($17 + [8]) = $10
	*($17 + [4]) = $13
	
.LABEL $label$45
	CALL memcpy($10, [2128], $13)
	
.LABEL $label$44
	*(($10 + $13)) = [0]
	*(($17 + [104])) = (int_64)1397703940
	*(($17 + [116])) = *($17 + [4])
	*($17 + [88]) = $2
	$13 = ($17 + [8])
	*(($17 + [120])) = *($13)
	*($17 + [80]) = *($0)
	*($17 + [96]) = $8
	*($17 + [112]) = *($17)
	*($17) = [0]
	*($17 + [4]) = [0]
	*($13) = [0]
	$13 = CALL $57(($17 + [32]), ($17 + [16]), (int_64)6138663591592764928, $15, ($17 + [80]))
	CALL $58(($17 + [240]), $13)
	$10 = *($17 + [240])
	CALL send_inline($10, (*($17 + [244]) - $10))
	$10 = *($17 + [240])
	if ( ($10 == 0) ){ goto $label$47 }
	*($17 + [244]) = $10
	CALL $108($10)
	
.LABEL $label$47
	$10 = *($13 + [28])
	if ( ($10 == 0) ){ goto $label$48 }
	*(($13 + [32])) = $10
	CALL $108($10)
	
.LABEL $label$48
	$10 = *($13 + [16])
	if ( ($10 == 0) ){ goto $label$49 }
	*(($13 + [20])) = $10
	CALL $108($10)
	
.LABEL $label$49
	if ( ((*(($17 + [112])) & [1]) == 0) ){ goto $label$50 }
	CALL $108(*(($17 + [120])))
	
.LABEL $label$50
	if ( ((*($17) & [1]) == 0) ){ goto $label$11 }
	CALL $108(*(($17 + [8])))
	
.LABEL $label$11
	*([0] + [4]) = ($17 + [256])
	return (unreachable)
	
.LABEL $label$10
	CALL $109($17)
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [176])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [288])
	$6 = ($2 + [48])
	*($8 + [144]) = *($6)
	*($8 + [152]) = *(($2 + [56]))
	$5 = *($2)
	*($2 + [112]) = *(*(*($4) + [4]) + [72])
	CALL eosio_assert([1], [352])
	*($8 + [136]) = ($8 + [120])
	*($8 + [132]) = $8
	*($8 + [128]) = $8
	CALL $20(($8 + [128]), $2)
	CALL db_update_i64(*($2 + [124]), $3, $8, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = (($8 + [144]) + [8])
	*($8 + [168]) = *($6)
	if ( (CALL memcmp(($8 + [144]), ($8 + [168]), [8]) == 0) ){ goto $label$2 }
	$7 = ($2 + [128])
	$6 = *($7)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216832, ($8 + [160]), $5)
	*($7) = $6
	
.LABEL $label$3
	CALL db_idx64_update($6, $3, ($8 + [168]))
	
.LABEL $label$2
	*($8 + [168]) = *(($2 + [56]))
	if ( (CALL memcmp($4, ($8 + [168]), [8]) == 0) ){ goto $label$4 }
	$4 = ($2 + [132])
	$2 = *($4)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216833, ($8 + [160]), $5)
	*($4) = $2
	
.LABEL $label$5
	CALL db_idx64_update($2, $3, ($8 + [168]))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [176])
}

void .FUNC _ZN9justaward9withdraw2Ey (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_32 $26
	$26 = (*([0] + [4]) - [256])
	*([0] + [4]) = $26
	$20 = *(($0 + [192]))
	$7 = *(($0 + [196]))
	if ( ((int_32)$7 == (int_32)$20) ){ goto $label$1 }
	$21 = ($7 + [-24])
	$6 = ([0] - $20)
	
.LOOP $label$2:
	if ( ((int_64)*(*($21)) == (int_64)$1) ){ goto $label$1 }
	$7 = $21
	$8 = ($21 + [-24])
	$21 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [168])
	if ( ((int_32)$7 == (int_32)$20) ){ goto $label$4 }
	$20 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($20 + [160]) == (int_32)$2), [64])
	goto $label$3 
	
.LABEL $label$4
	$20 = [0]
	$21 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, $1)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$3 }
	$20 = CALL $15($2, $21)
	CALL eosio_assert(((int_32)*($20 + [160]) == (int_32)$2), [64])
	
.LABEL $label$3
	$3 = ((int_32)$20 != (int_32)[0])
	CALL eosio_assert($3, [1760])
	$23 = *($20 + [144])
	$25 = $23
	if ( ((int_64)$23 == (int_64)*($20 + [152])) ){ goto $label$5 }
	*((($26 + [40]) + [32])) = [0]
	*($26 + [56]) = (int_64)-1
	$23 = *($0)
	*($26 + [40]) = $23
	*($26 + [48]) = $1
	*($26 + [64]) = (int_64)0
	*($26 + [76]) = [0]
	$21 = CALL db_lowerbound_i64($23, $1, (int_64)6138858918308216832, (int_64)0)
	if ( ((int_32)$21 <= (int_32)[-1]) ){ goto $label$8 }
	$21 = CALL $9(($26 + [40]), $21)
	*($26 + [28]) = $21
	$4 = ($0 + [128])
	*($26 + [24]) = ($26 + [40])
	$11 = ($0 + [152])
	$12 = ($0 + [156])
	$13 = ($0 + [136])
	$14 = ($26 + [104])
	$15 = ($26 + [112])
	$16 = ($26 + [120])
	$17 = (($26 + [96]) + [32])
	$18 = ($26 + [132])
	$19 = ($26 + [124])
	
.LOOP $label$9:
	$25 = *($21 + [72])
	$23 = *($21 + [112])
	if ( ((int_64)$23 == (int_64)$25) ){ goto $label$10 }
	CALL eosio_assert(((uint_64)$25 >= (uint_64)$23), [1792])
	$23 = *(*($26 + [28]))
	$5 = *($11)
	$7 = *($12)
	*($26 + [80]) = ($26 + [24])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$11 }
	$21 = ($7 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$12:
	if ( ((int_64)*(*($21)) == (int_64)$23) ){ goto $label$11 }
	$7 = $21
	$8 = ($21 + [-24])
	$21 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$14 }
	$21 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [120]) == (int_32)$4), [64])
	goto $label$13 
	
.LABEL $label$14
	$21 = [0]
	$8 = CALL db_find_i64(*($4), *($13), (int_64)6138858918308216832, $23)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$13 }
	$21 = CALL $9($4, $8)
	CALL eosio_assert(((int_32)*($21 + [120]) == (int_32)$4), [64])
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($21 + [8]) == (int_64)$1), [176])
	*($14) = $1
	*($15) = (int_64)-1
	*($16) = (int_64)0
	$8 = [0]
	*($17) = [0]
	$25 = *($0)
	*($26 + [96]) = $25
	*($18) = [0]
	$7 = CALL db_find_i64($25, $1, (int_64)6138858918308216832, $23)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	$8 = CALL $9(($26 + [96]), $7)
	CALL eosio_assert(((int_32)*($8 + [120]) == (int_32)($26 + [96])), [64])
	
.LABEL $label$15
	CALL $75($4, $4, $21, *($0), ($26 + [80]))
	CALL $75(($26 + [96]), ($26 + [96]), $8, *($0), ($26 + [80]))
	$7 = *($16)
	if ( ($7 == 0) ){ goto $label$16 }
	$21 = *($19)
	if ( ((int_32)$21 != (int_32)$7) ){ goto $label$18 }
	$21 = $7
	goto $label$17 
	
.LABEL $label$18
	
.LOOP $label$19:
	$21 = ($21 + [-24])
	$8 = *($21)
	*($21) = [0]
	if ( ($8 == 0) ){ goto $label$20 }
	CALL $108($8)
	
.LABEL $label$20
	if ( ((int_32)$7 != (int_32)$21) ){ goto $label$19 }
	$21 = *($16)
	
.LABEL $label$17
	*($19) = $7
	CALL $108($21)
	
.LABEL $label$16
	$21 = *($26 + [28])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$21 != (int_32)[0]), [32])
	$21 = CALL db_next_i64(*(*($26 + [28]) + [124]), ($26 + [96]))
	if ( ((int_32)$21 <= (int_32)[-1]) ){ goto $label$21 }
	$21 = CALL $9(*($26 + [24]), $21)
	*($26 + [28]) = $21
	goto $label$9 
	
.LABEL $label$21
	*($26 + [28]) = [0]
	$7 = *($26 + [64])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	*($26 + [28]) = [0]
	*($26 + [24]) = ($26 + [40])
	$7 = *($26 + [64])
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = ($26 + [68])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$7) ){ goto $label$23 }
	
.LOOP $label$24:
	$21 = ($21 + [-24])
	$8 = *($21)
	*($21) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	CALL $108($8)
	
.LABEL $label$25
	if ( ((int_32)$7 != (int_32)$21) ){ goto $label$24 }
	$21 = *(($26 + [64]))
	goto $label$22 
	
.LABEL $label$23
	$21 = $7
	
.LABEL $label$22
	*($6) = $7
	CALL $108($21)
	
.LABEL $label$6
	$23 = *(($20 + [152]))
	$25 = *(($20 + [144]))
	
.LABEL $label$5
	CALL eosio_assert(((uint_64)$25 >= (uint_64)$23), [1824])
	CALL eosio_assert(((uint_64)*($20 + [64]) >= (uint_64)*($20 + [72])), [1856])
	CALL eosio_assert(((uint_64)*($20 + [80]) >= (uint_64)*($20 + [88])), [1888])
	CALL eosio_assert(((uint_64)*($20 + [96]) >= (uint_64)*($20 + [104])), [1920])
	CALL eosio_assert(((uint_64)*($20 + [112]) >= (uint_64)*($20 + [120])), [1952])
	$21 = ($20 + [144])
	$9 = ((int_64))(((int_64))(((int_64))(((int_64))(*($21) - *(($20 + [152]))) + (int_64)*($20 + [64])) - *($20 + [72])) + (int_64)*($20 + [80])) - *($20 + [88])
	if ( (int_64)($9 + (int_64)*($20 + [96])) - *($20 + [104])) + (int_64))(*($20 + [112]) - *($20 + [120])))) == 0) ){ goto $label$27 }
	$25 = *($0)
	CALL eosio_assert($3, [192])
	CALL eosio_assert(((int_32)*($20 + [160]) == (int_32)$2), [240])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [288])
	$8 = ($20 + [136])
	*($26 + [40]) = *($8)
	*($26 + [48]) = *(($20 + [128]))
	$23 = *($20)
	*($20 + [152]) = *($21)
	*($20 + [72]) = *(($20 + [64]))
	*($20 + [88]) = *(($20 + [80]))
	*($20 + [104]) = *(($20 + [96]))
	*($20 + [120]) = *(($20 + [112]))
	CALL eosio_assert([1], [352])
	*($26 + [32]) = (($26 + [96]) + [160])
	*($26 + [28]) = ($26 + [96])
	*($26 + [24]) = ($26 + [96])
	CALL $19(($26 + [24]), $20)
	CALL db_update_i64(*($20 + [164]), $25, ($26 + [96]), [160])
	$21 = ($0 + [184])
	if ( (uint_64)($23 <= *($21)) ){ goto $label$28 }
	*($21) = ( (int_64)-2 ? ((int_64)$23 + (int_64)1) : ((uint_64)$23 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	$21 = (($26 + [40]) + [8])
	*($26 + [80]) = *($8)
	if ( (CALL memcmp(($26 + [40]), ($26 + [80]), [8]) == 0) ){ goto $label$29 }
	$7 = ($20 + [168])
	$8 = *($7)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$30 }
	$8 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419456, ($26 + [8]), $23)
	*($7) = $8
	
.LABEL $label$30
	CALL db_idx64_update($8, $25, ($26 + [80]))
	
.LABEL $label$29
	*($26 + [80]) = *(($20 + [128]))
	if ( (CALL memcmp($21, ($26 + [80]), [8]) == 0) ){ goto $label$31 }
	$8 = ($20 + [172])
	$21 = *($8)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$32 }
	$21 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912134838419455, ($26 + [8]), $23)
	*($8) = $21
	
.LABEL $label$32
	CALL db_idx64_update($21, $25, ($26 + [80]))
	
.LABEL $label$31
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1184])
	$23 = (int_64)5459781
	$21 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$36 }
	
.LOOP $label$37:
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$37 }
	
.LABEL $label$36
	$8 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$8 = [0]
	
.LABEL $label$33
	CALL eosio_assert($8, [1040])
	$10 = *($0)
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1072]
	$24 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$43 }
	$8 = *($21)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$8 = ($8 + [165])
	goto $label$41 
	
.LABEL $label$43
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$39
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$25 | (int_64)$24)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$38 }
	*($26 + [32]) = $24
	*($26 + [24]) = $10
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1088]
	$24 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$23 > (uint_64)(int_64)7) ){ goto $label$49 }
	$8 = *($21)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$8 = ($8 + [165])
	goto $label$47 
	
.LABEL $label$49
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$45
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$25 | (int_64)$24)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$44 }
	*(($26 + [16])) = [0]
	*($26 + [8]) = (int_64)0
	$21 = CALL strlen([1984])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$52 }
	*($26 + [8]) = ($21 << [1])
	$8 = (($26 + [8]) | [1])
	if ( $21 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$7 = (($21 + [16]) & [-16])
	$8 = CALL $107($7)
	*($26 + [8]) = ($7 | [1])
	*($26 + [16]) = $8
	*($26 + [12]) = $21
	
.LABEL $label$51
	CALL memcpy($8, [1984], $21)
	
.LABEL $label$50
	*(($8 + $21)) = [0]
	*(($26 + [120])) = (int_64)1397703940
	*(($26 + [132])) = *($26 + [12])
	*($26 + [104]) = $1
	$21 = ($26 + [16])
	*(($26 + [136])) = *($21)
	*($26 + [96]) = *($0)
	*($26 + [112]) = $9
	*($26 + [128]) = *($26 + [8])
	*($26 + [8]) = [0]
	*($26 + [12]) = [0]
	*($21) = [0]
	$21 = CALL $57(($26 + [40]), ($26 + [24]), (int_64)6138663591592764928, $24, ($26 + [96]))
	CALL $58(($26 + [80]), $21)
	$8 = *($26 + [80])
	CALL send_inline($8, (*($26 + [84]) - $8))
	$8 = *($26 + [80])
	if ( ($8 == 0) ){ goto $label$53 }
	*($26 + [84]) = $8
	CALL $108($8)
	
.LABEL $label$53
	$8 = *($21 + [28])
	if ( ($8 == 0) ){ goto $label$54 }
	*(($21 + [32])) = $8
	CALL $108($8)
	
.LABEL $label$54
	$8 = *($21 + [16])
	if ( ($8 == 0) ){ goto $label$55 }
	*(($21 + [20])) = $8
	CALL $108($8)
	
.LABEL $label$55
	if ( ((*(($26 + [128])) & [1]) == 0) ){ goto $label$56 }
	CALL $108(*(($26 + [136])))
	
.LABEL $label$56
	if ( ((*($26 + [8]) & [1]) == 0) ){ goto $label$27 }
	CALL $108(*(($26 + [16])))
	
.LABEL $label$27
	*([0] + [4]) = ($26 + [256])
	return (unreachable)
	
.LABEL $label$26
	CALL $109(($26 + [8]))
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $107(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $118($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $108($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $108($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [128])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $107([112])) + [96]) = $0
	CALL $42(($8 + [32]), $6)
	*($6 + [100]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [100])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $39(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $108($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [100]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [688])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035932468960034816)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [624])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [624])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $36(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN9justaward7devwithEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [160])
	*([0] + [4]) = $16
	CALL require_auth(*($0))
	$11 = *(($0 + [32]))
	$10 = *(($0 + [36]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$1 }
	$12 = ($10 + [-24])
	$3 = ([0] - $11)
	
.LOOP $label$2:
	if ( (int_64)(*(*($12)) == 0) ){ goto $label$1 }
	$10 = $12
	$7 = ($12 + [-24])
	$12 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [8])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$2), [64])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$12 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159545106726912, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $35($2, $12)
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$2), [64])
	
.LABEL $label$3
	$4 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($4, [2176])
	CALL eosio_assert(CALL $fimport$25($1), [736])
	$5 = *(($0 + [272]))
	$10 = *(($0 + [276]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$5 }
	$12 = ($10 + [-24])
	$3 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$5 }
	$10 = $12
	$7 = ($12 + [-24])
	$12 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$7 = ($0 + [248])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$8 }
	$12 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [8]) == (int_32)$7), [64])
	goto $label$7 
	
.LABEL $label$8
	$12 = [0]
	$10 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)5383797594050789376, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$12 = CALL $45($7, $10)
	CALL eosio_assert(((int_32)*($12 + [8]) == (int_32)$7), [64])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [2192])
	$8 = *($12)
	$9 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$9(*($11 + [16]) - *($11 + [24]))) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1184])
	$1 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [1040])
	$6 = *($0)
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [1072]
	$14 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$19 }
	$7 = *($12)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$7 = ($7 + [165])
	goto $label$17 
	
.LABEL $label$19
	$15 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$15
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$14 }
	*($16 + [32]) = $14
	*($16 + [24]) = $6
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [1088]
	$14 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$25 }
	$7 = *($12)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$7 = ($7 + [165])
	goto $label$23 
	
.LABEL $label$25
	$15 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$21
	$12 = ($12 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$20 }
	*(($16 + [16])) = [0]
	*($16 + [8]) = (int_64)0
	$12 = CALL strlen([2224])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$29 }
	*($16 + [8]) = ($12 << [1])
	$7 = (($16 + [8]) | [1])
	if ( $12 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$10 = (($12 + [16]) & [-16])
	$7 = CALL $107($10)
	*($16 + [8]) = ($10 | [1])
	*($16 + [16]) = $7
	*($16 + [12]) = $12
	
.LABEL $label$28
	CALL memcpy($7, [2224], $12)
	
.LABEL $label$27
	*(($7 + $12)) = [0]
	*(($16 + [104])) = (int_64)1397703940
	*(($16 + [116])) = *($16 + [12])
	*($16 + [88]) = $8
	$12 = ($16 + [16])
	*(($16 + [120])) = *($12)
	*($16 + [80]) = *($0)
	*($16 + [96]) = $9
	*($16 + [112]) = *($16 + [8])
	*($16 + [8]) = [0]
	*($16 + [12]) = [0]
	*($12) = [0]
	$12 = CALL $57(($16 + [40]), ($16 + [24]), (int_64)6138663591592764928, $14, ($16 + [80]))
	CALL $58(($16 + [144]), $12)
	$7 = *($16 + [144])
	CALL send_inline($7, (*($16 + [148]) - $7))
	$7 = *($16 + [144])
	if ( ($7 == 0) ){ goto $label$30 }
	*($16 + [148]) = $7
	CALL $108($7)
	
.LABEL $label$30
	$7 = *($12 + [28])
	if ( ($7 == 0) ){ goto $label$31 }
	*(($12 + [32])) = $7
	CALL $108($7)
	
.LABEL $label$31
	$7 = *($12 + [16])
	if ( ($7 == 0) ){ goto $label$32 }
	*(($12 + [20])) = $7
	CALL $108($7)
	
.LABEL $label$32
	if ( ((*(($16 + [112])) & [1]) == 0) ){ goto $label$33 }
	CALL $108(*(($16 + [120])))
	
.LABEL $label$33
	if ( ((*($16 + [8]) & [1]) == 0) ){ goto $label$34 }
	CALL $108(*(($16 + [16])))
	
.LABEL $label$34
	$15 = *($0)
	CALL eosio_assert($4, [192])
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$2), [240])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$4()), [288])
	*($11 + [24]) = *(($11 + [16]))
	$1 = *($11)
	CALL eosio_assert([1], [352])
	*($16 + [48]) = (($16 + [80]) + [64])
	*($16 + [44]) = ($16 + [80])
	*($16 + [40]) = ($16 + [80])
	CALL $40(($16 + [40]), $11)
	CALL db_update_i64(*($11 + [68]), $15, ($16 + [80]), [64])
	$12 = ($0 + [24])
	if ( (uint_64)($1 <= *($12)) ){ goto $label$35 }
	*($12) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$35
	*([0] + [4]) = ($16 + [160])
	return (unreachable)
	
.LABEL $label$26
	CALL $109(($16 + [8]))
}

void .FUNC _ZN9justaward11chkdeadtreeEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [304])
	*([0] + [4]) = $19
	*(($17 = CALL $107([408]))) = (int_64)-9104247311843814032
	*($17 + [8]) = (int_64)7100086771344054432
	*($17 + [16]) = (int_64)6659070526019278192
	*($17 + [24]) = (int_64)4301652577647653536
	*($19 + [80]) = $17
	*($19 + [84]) = $17
	$2 = ($17 + [408])
	*($19 + [88]) = $2
	*($17 + [32]) = (int_64)7475575502638782624
	*($17 + [40]) = (int_64)7331460293088155808
	*($17 + [48]) = (int_64)7006637083421284512
	*($17 + [56]) = (int_64)7975005999101150784
	*($17 + [64]) = (int_64)595237412444966112
	*($17 + [72]) = (int_64)7115293017172416672
	*($17 + [80]) = (int_64)8189117956743406624
	*($17 + [88]) = (int_64)7619693980693076128
	*($17 + [96]) = (int_64)7007203331960117408
	*($17 + [104]) = (int_64)4805782001894003744
	*($17 + [112]) = (int_64)-2763376986375044048
	*($17 + [120]) = (int_64)-345287700606582240
	*($17 + [128]) = (int_64)-1473447175432124336
	*($17 + [136]) = (int_64)6138597242034246672
	*($17 + [144]) = (int_64)-2186630960941577648
	*($17 + [152]) = (int_64)-7524023829881761408
	*($17 + [160]) = (int_64)7613239626264390016
	*($17 + [168]) = (int_64)4731584095575140032
	*($17 + [176]) = (int_64)6138840405808529936
	*($17 + [184]) = (int_64)6992003687411521696
	*($17 + [192]) = (int_64)-4497227537841777280
	*($17 + [200]) = (int_64)-1345004085464714864
	*($17 + [208]) = (int_64)6992286236164135072
	*($17 + [216]) = (int_64)6186967026524242448
	*($17 + [224]) = (int_64)2116081897745831280
	*($17 + [232]) = (int_64)-3143692109071465904
	*($17 + [240]) = (int_64)-2625147374720547792
	*($17 + [248]) = (int_64)8759794546013611712
	*($17 + [256]) = (int_64)7604780209352906912
	*($17 + [264]) = (int_64)-8380964377353443312
	*($17 + [272]) = (int_64)8902829950025051360
	*($17 + [280]) = (int_64)6138910272850930192
	*($17 + [288]) = (int_64)-5502579488651827184
	*($17 + [296]) = (int_64)6138945509888601872
	*($17 + [304]) = (int_64)3800115161676261664
	*($17 + [312]) = (int_64)8516742727579611520
	*($17 + [320]) = (int_64)7972613496335621280
	*($17 + [328]) = (int_64)7751422066354705792
	*($17 + [336]) = (int_64)-1190112520884491824
	*($17 + [344]) = (int_64)-8351175226177443952
	*($17 + [352]) = (int_64)7684014134827055424
	*($17 + [360]) = (int_64)-7226679350448966240
	*($17 + [368]) = (int_64)7035881193175304272
	*($17 + [376]) = (int_64)-5189648280760842688
	*($17 + [384]) = (int_64)7604497626190485664
	*($17 + [392]) = (int_64)4851845857153821056
	*($17 + [400]) = (int_64)7389623830542015216
	*($19 + [84]) = $2
	*(($19 + [72])) = [0]
	*($19 + [56]) = (int_64)-1
	$7 = *($0)
	*($19 + [40]) = $7
	*($19 + [48]) = $7
	*($19 + [64]) = (int_64)0
	$11 = ($0 + [176])
	$17 = CALL db_lowerbound_i64(*($0 + [168]), *($11), (int_64)-6030912134838419456, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [168])
	$16 = CALL $15($3, $17)
	$5 = (($19 + [96]) + [160])
	$4 = (($19 + [272]) + [8])
	$12 = ($0 + [184])
	$13 = ($19 + [64])
	$14 = ($19 + [68])
	$15 = [0]
	$18 = [0]
	$6 = (int_64)0
	
.LOOP $label$2:
	$7 = *($16)
	if ( ((int_32)$18 == (int_32)$15) ){ goto $label$3 }
	$17 = ($18 + [-24])
	$8 = ([0] - $15)
	
.LOOP $label$4:
	if ( ((int_64)*(*($17)) == (int_64)$7) ){ goto $label$3 }
	$18 = $17
	$9 = ($17 + [-24])
	$17 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$18 == (int_32)$15) ){ goto $label$6 }
	$17 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [64]) == (int_32)($19 + [40])), [64])
	goto $label$5 
	
.LABEL $label$6
	$17 = [0]
	$9 = CALL db_find_i64(*($19 + [40]), *((($19 + [40]) + [8])), (int_64)-3020380074831511552, $7)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$17 = CALL $80(($19 + [40]), $9)
	CALL eosio_assert(((int_32)*($17 + [64]) == (int_32)($19 + [40])), [64])
	
.LABEL $label$5
	if ( ((int_64)*($16 + [64]) != (int_64)0) ){ goto $label$8 }
	$10 = *($17 + [40])
	if ( ((int_64)$10 > (int_64)-1) ){ goto $label$8 }
	$9 = [0]
	$17 = *($19 + [80])
	if ( ((int_32)$2 == (int_32)$17) ){ goto $label$9 }
	$8 = int_32(($2 - $17) >> [3])
	$7 = *($16)
	$18 = [0]
	$9 = [0]
	
.LOOP $label$10:
	$9 = ($9 | ((int_64)$7 == (int_64)*($17)))
	$17 = ($17 + [8])
	$18 = ($18 + [1])
	if ( ($18 <= $8) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_64)$6 > (uint_64)$1) ){ goto $label$7 }
	if ( ($9 & [1]) ){ goto $label$11 }
	CALL __multi3(($19 + [24]), (int_64))((int_64)0 - $10), (int_64)0, (int_64)16916100, (int_64)0)
	CALL __udivti3(($19 + [8]), *($19 + [24]), *((($19 + [24]) + [8])), (int_64)28441821, (int_64)0)
	$10 = *($0)
	CALL eosio_assert([1], [192])
	CALL eosio_assert(((int_32)*($16 + [160]) == (int_32)$3), [240])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$4()), [288])
	*(($16 + [64])) = *($19 + [8])
	$17 = ($16 + [128])
	*($4) = *($17)
	$9 = ($16 + [136])
	*($19 + [272]) = *($9)
	$7 = *($16)
	CALL eosio_assert([1], [352])
	*((($19 + [256]) + [8])) = $5
	*($19 + [260]) = ($19 + [96])
	*($19 + [256]) = ($19 + [96])
	CALL $19(($19 + [256]), $16)
	CALL db_update_i64(*($16 + [164]), $10, ($19 + [96]), [160])
	if ( (uint_64)($7 <= *($12)) ){ goto $label$12 }
	*($12) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($19 + [296]) = *($9)
	if ( (CALL memcmp(($19 + [272]), ($19 + [296]), [8]) == 0) ){ goto $label$13 }
	$18 = ($16 + [168])
	$9 = *($18)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$14 }
	$9 = CALL db_idx64_find_primary(*($3), *($11), (int_64)-6030912134838419456, ($19 + [288]), $7)
	*($18) = $9
	
.LABEL $label$14
	CALL db_idx64_update($9, $10, ($19 + [296]))
	
.LABEL $label$13
	*($19 + [296]) = *($17)
	if ( (CALL memcmp($4, ($19 + [296]), [8]) == 0) ){ goto $label$15 }
	$9 = ($16 + [172])
	$17 = *($9)
	if ( ((int_32)$17 > (int_32)[-1]) ){ goto $label$16 }
	$17 = CALL db_idx64_find_primary(*($3), *($11), (int_64)-6030912134838419455, ($19 + [288]), $7)
	*($9) = $17
	
.LABEL $label$16
	CALL db_idx64_update($17, $10, ($19 + [296]))
	
.LABEL $label$15
	CALL _ZN9justaward9withdraw2Ey($0, *($16))
	
.LABEL $label$11
	$6 = ((int_64)$6 + (int_64)1)
	
.LABEL $label$8
	CALL eosio_assert([1], [32])
	$17 = CALL db_next_i64(*($16 + [164]), ($19 + [96]))
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$7 }
	$16 = CALL $15($3, $17)
	$15 = *($13)
	$18 = *($14)
	goto $label$2 
	
.LABEL $label$7
	$18 = *($19 + [64])
	if ( ($18 == 0) ){ goto $label$1 }
	$8 = ($19 + [68])
	$17 = *($8)
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$18 }
	
.LOOP $label$19:
	$17 = ($17 + [-24])
	$9 = *($17)
	*($17) = [0]
	if ( ($9 == 0) ){ goto $label$20 }
	CALL $108($9)
	
.LABEL $label$20
	if ( ((int_32)$18 != (int_32)$17) ){ goto $label$19 }
	$17 = *(($19 + [64]))
	goto $label$17 
	
.LABEL $label$18
	$17 = $18
	
.LABEL $label$17
	*($8) = $18
	CALL $108($17)
	
.LABEL $label$1
	$17 = *($19 + [80])
	if ( ($17 == 0) ){ goto $label$21 }
	*($19 + [84]) = $17
	CALL $108($17)
	
.LABEL $label$21
	*([0] + [4]) = ($19 + [304])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6030912134838419456, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [160]) == (int_32)$4), [64])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $15($4, CALL $fimport$7(*($4), *($4 + [8]), (int_64)-6030912134838419456, $5))
	CALL eosio_assert(((int_32)*($2 + [160]) == (int_32)$4), [64])
	
.LABEL $label$4
	*(($2 + [168])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [32])
	$6 = *($0 + [4])
	$7 = *($6 + [168])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6030912134838419456, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [168]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$2), [64])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $15($2, CALL $fimport$7(*($2), *($2 + [8]), (int_64)-6030912134838419456, $3))
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$2), [64])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [168])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [176])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [192])
	CALL eosio_assert(((int_32)*($2 + [120]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [288])
	$6 = ($2 + [48])
	*($8 + [144]) = *($6)
	*($8 + [152]) = *(($2 + [56]))
	*($6) = *(*($4))
	$5 = *($2)
	*($2 + [72]) = *(*($4 + [4]))
	*($2 + [80]) = *(*($4 + [8]))
	*($2 + [88]) = *(*($4 + [12]) + [16])
	*($2 + [96]) = *(*($4 + [12]) + [24])
	*($2 + [44]) = *(*($4 + [16]))
	CALL eosio_assert([1], [352])
	*($8 + [136]) = ($8 + [120])
	*($8 + [132]) = $8
	*($8 + [128]) = $8
	CALL $20(($8 + [128]), $2)
	CALL db_update_i64(*($2 + [124]), $3, $8, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = (($8 + [144]) + [8])
	*($8 + [168]) = *($6)
	if ( (CALL memcmp(($8 + [144]), ($8 + [168]), [8]) == 0) ){ goto $label$2 }
	$7 = ($2 + [128])
	$6 = *($7)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216832, ($8 + [160]), $5)
	*($7) = $6
	
.LABEL $label$3
	CALL db_idx64_update($6, $3, ($8 + [168]))
	
.LABEL $label$2
	*($8 + [168]) = *(($2 + [56]))
	if ( (CALL memcmp($4, ($8 + [168]), [8]) == 0) ){ goto $label$4 }
	$4 = ($2 + [132])
	$2 = *($4)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6138858918308216833, ($8 + [160]), $5)
	*($4) = $2
	
.LABEL $label$5
	CALL db_idx64_update($2, $3, ($8 + [168]))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [176])
}

void .FUNC _ZN9justaward17chkincome_alluserEyyy (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$5 = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [-300])
	$8 = (int_64)0
	$7 = (int_64)0
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$8 = (int_64)0
	$7 = (int_64)0
	if ( (CALL is_account($2) == 0) ){ goto $label$1 }
	CALL _ZN9justaward14chkincome_userEyym(($11 + [24]), $1, $2, $3, $5)
	$8 = *($11 + [40])
	$7 = *($11 + [56])
	
.LABEL $label$1
	*($11 + [16]) = ($1 + [168])
	*($11 + [24]) = (int_64)0
	CALL $32(($11 + [8]), ($11 + [16]), ($11 + [24]))
	$6 = *($11 + [12])
	if ( ($6 == 0) ){ goto $label$4 }
	$9 = ($11 + [40])
	$10 = ($11 + [56])
	
.LOOP $label$5:
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$6 }
	if ( ((uint_64)*($6 + [136]) >= (uint_64)$3) ){ goto $label$4 }
	if ( (int_64)($7 == 0) ){ goto $label$7 }
	if ( ((uint_64)((int_64)((int_64)*($6 + [16]) + (int_64)$7) + (int_64)*($6 + [24])) > (uint_64)$4) ){ goto $label$3 }
	
.LABEL $label$7
	CALL _ZN9justaward14chkincome_userEyym(($11 + [24]), $1, *($6), $3, $5)
	$8 = ((int_64)*($9) + (int_64)$8)
	$7 = ((int_64)*($10) + (int_64)$7)
	
.LABEL $label$6
	CALL $33(($11 + [8]))
	$6 = *($11 + [12])
	if ( $6 ){ goto $label$5 }
	
.LABEL $label$4
	*(($0 + [16])) = $8
	*(($0 + [32])) = $7
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$2 }
	*(($0 + [24])) = (int_64)1
	goto $label$2 
	
.LABEL $label$3
	*(($0 + [16])) = $8
	*(($0 + [32])) = $7
	
.LABEL $label$2
	*([0] + [4]) = ($11 + [64])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}