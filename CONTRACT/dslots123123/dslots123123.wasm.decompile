(data (i32.const 8192) "\04DIV\00\00\00\00")
(data (i32.const 8200) "djflsgc4fmhb\00Bet not found\00")
(data (i32.const 8227) "eosio.ram\00unable to find key\00")
(data (i32.const 8256) "eosio.stake\00eosio.token\00")
(data (i32.const 8280) "dslotsdivtok\00Spin won! Rolled \00")
(data (i32.const 8311) "Invalid asset\00 !\00")
(data (i32.const 8328) "Only EOS supported\00")
(data (i32.const 8347) "Bet too small\00betreceipt\00")
(data (i32.const 8372) "Bet too big\00dslotsdivtok\00")
(data (i32.const 8397) "Your referral profit!\00Profits for dividend distributio\00")
(data (i32.const 8452) "eosio.token\00distribute\00")
(data (i32.const 8475) "Your DIV tokens!\00cannot modify objects in table of another contract\00")
(data (i32.const 8543) "onerror action\'s are only valid from the \"eosio\" system account\00Unknown reward\00")
(data (i32.const 8622) "transfer\00object passed to iterator_to is not in multi_index\00")
(data (i32.const 8682) ",\00error reading iterator\00")
(data (i32.const 8707) "Bad token size\00")
(data (i32.const 8722) "rf:\00read\00")
(data (i32.const 8731) "sd:\00")
(data (i32.const 8735) "Unknown token type\00")
(data (i32.const 8754) "Contract disabled\00magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8821) "write\00invalid symbol name\00")
(data (i32.const 8847) "magnitude of asset amount must be less than 2^62\000x\00")
(data (i32.const 8899) "invalid symbol name\001x\00")
(data (i32.const 8922) "no token stat\002x\00")
(data (i32.const 8939) "object passed to iterator_to is not in multi_index\005x\00")
(data (i32.const 8993) "error reading iterator\0025x\00")
(data (i32.const 9020) "read\00100x\00")
(data (i32.const 9030) "attempt to subtract asset with different symbol\00320x\00")
(data (i32.const 9083) "subtraction underflow\00800x\00")
(data (i32.const 9110) "subtraction overflow\001000x\00")
(data (i32.const 9137) "comparison of assets with different symbols is not allowed\00JACKPOT!!!\00")
(data (i32.const 9207) "suspend\00attempt to add asset with different symbol\00")
(data (i32.const 9258) "setdistibutionmin\00addition underflow\00")
(data (i32.const 9295) "ctrl none\00addition overflow\00")
(data (i32.const 9323) "cannot create objects in table of another contract\00comparison of assets with different symbols is not allowed\00")
(data (i32.const 9433) "cannot pass end iterator to modify\00cannot create objects in table of another contract\00")
(data (i32.const 9519) "object passed to modify is not in multi_index\00cannot pass end iterator to erase\00")
(data (i32.const 9599) "cannot modify objects in table of another contract\00cannot increment end iterator\00")
(data (i32.const 9680) "updater cannot change primary key when modifying an object\00object passed to erase is not in multi_index\00")
(data (i32.const 9784) "dslots123123\00cannot erase objects in table of another contract\00")
(data (i32.const 9847) "get\00attempt to remove object that was not in multi_index\00")
(data (i32.const 9904) "\04EOS\00\00\00\00")
(data (i32.const 9912) "cannot pass end iterator to modify\00")
(data (i32.const 9947) "object passed to modify is not in multi_index\00")
(data (i32.const 9993) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10052) "write\00")
(data (i32.const 10058) "80x\00")
(data (i32.const 18480) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 18496) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 18512) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 18528) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_update_i64" (func $fimport$4 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$6 (param i32 i32 i32)))
(import "env" "read_transaction" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$8 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$15 (param i64)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$17 (param i32 i32 i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$32 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$33 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$36 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$38 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$39 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$40 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $20))
(export "_Znwj" (func $78))
(export "_ZdlPv" (func $80))
(export "_Znaj" (func $79))
(export "_ZdaPv" (func $81))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $21 $5 $1 $25 $51)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18614))
(global $global$2 i32 (i32.const 18614))


int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_64 .FUNC $94 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $96($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $93($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [18496])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [18480]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [18512]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $95($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $95 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $96 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $98(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $91 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $92 (int_32 $0)
{
}

int_64 .FUNC $93 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9020])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9020])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9020])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9020])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9020])
	CALL memcpy(($0 + [48]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	*($2 + [8]) = $0
	CALL $50(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9847])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $11($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9020])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9519])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9599])
	$5 = *($1)
	CALL eosio_assert([1], [9680])
	*($4 + [80]) = ($4 + [62])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [44])
	*($4 + [108]) = ($1 + [48])
	CALL $3(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [62])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*(*($0 + [4])))
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8847])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8899])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = $5
	$9 = $2
	$7 = ($9 + [-64])
	$global$0 = $7
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($9 + [-2])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [44])
	*($3 + [44]) = ($1 + [48])
	CALL $3(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)7035938067002163200, *(*($0 + [8])), $6, $7, [62])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8821])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8821])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8821])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8821])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8821])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9020])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $28(*($1), *($0 + [12]))
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [9020])
	CALL memcpy($2, *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9020])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy($3, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [9020])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($0 + [48]) = (int_64)0
	*(($4 = ($0 + [56]))) = (int_64)1398362884
	CALL eosio_assert([1], [8847])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8899])
	*($0 + [64]) = $1
	$4 = *($2)
	*($3 + [80]) = ($3 + [62])
	*($3 + [76]) = $3
	*($3 + [72]) = $3
	*($3 + [88]) = ($3 + [72])
	*($3 + [100]) = ($0 + [8])
	*($3 + [96]) = $0
	*($3 + [104]) = ($0 + [44])
	*($3 + [108]) = ($0 + [48])
	CALL $3(($3 + [96]), ($3 + [88]))
	$5 = *($0)
	*($0 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)7035938067002163200, *(*($2 + [8])), $5, $3, [62])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($3 + [112])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [9323])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([80])
	CALL $45($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [68])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $4(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*(($0 + [16])) = [0]
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	$3 = ($1 + [1])
	$4 = ($0 + [8])
	$5 = ($1 + [4])
	
.LOOP $label$2:
	$6 = *($1)
	if ( ($6 & [1]) ){ goto $label$6 }
	$7 = uint_32($6 >> [1])
	$8 = $3
	$6 = CALL $99([8682])
	if ( ($6 == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = *($5)
	$8 = *(($1 + [8]))
	$6 = CALL $99([8682])
	if ( $6 ){ goto $label$4 }
	
.LABEL $label$5
	$6 = [0]
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$1 }
	$9 = ($8 + $7)
	$10 = $8
	
.LOOP $label$7:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	$7 = CALL $97($10, [44], $7)
	if ( ($7 == 0) ){ goto $label$1 }
	if ( (CALL $98($7, [8682], $6) == 0) ){ goto $label$8 }
	$10 = ($7 + [1])
	$7 = ($9 - $10)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$1 }
	$6 = ($7 - $8)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$3
	$7 = CALL $84(($2 + [32]), $1, [0], $6, $1)
	$10 = *($2 + [52])
	if ( ((uint_32)$10 >= (uint_32)*((($2 + [48]) + [8]))) ){ goto $label$10 }
	CALL $83($10, $7)
	*($2 + [52]) = (*($2 + [52]) + [12])
	goto $label$9 
	
.LABEL $label$10
	CALL $17(($2 + [48]), $7)
	
.LABEL $label$9
	CALL $89($1, [0], ($6 + [1]))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*((($2 + [32]) + [8])))
	goto $label$2 
	
.LABEL $label$1
	$6 = *($1)
	if ( ($6 & [1]) ){ goto $label$20 }
	if ( uint_32($6 >> [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( (*(($1 + [4])) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$6 = *($2 + [52])
	if ( ((uint_32)$6 >= (uint_32)*(($2 + [56]))) ){ goto $label$17 }
	CALL $83($6, $1)
	*($2 + [52]) = (*($2 + [52]) + [12])
	
.LABEL $label$18
	$8 = *($2 + [52])
	$9 = *($2 + [48])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $17(($2 + [48]), $1)
	$8 = *($2 + [52])
	$9 = *($2 + [48])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$15 }
	
.LABEL $label$16
	$5 = ($2 | [1])
	$3 = ($2 + [8])
	
.LOOP $label$21:
	$6 = CALL $83(($2 + [32]), $9)
	$7 = *($2 + [32])
	CALL eosio_assert(((uint_32)( *($2 + [36]) ? uint_32($7 >> [1]) : ($7 & [1]) ) > (uint_32)[3]), [8707])
	$7 = CALL $84(($2 + [16]), $6, [0], [3], ($2 + [32]))
	$1 = CALL $84($2, $6, [3], [-1], ($2 + [32]))
	$6 = *($2 + [16])
	$10 = CALL $99([8722])
	if ( ((int_32)$10 != (int_32)( *($2 + [20]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$24 }
	if ( CALL $90($7, [0], [-1], [8722], $10) ){ goto $label$24 }
	$6 = ( *($3) ? $5 : (*($2) & [1]) )
	$7 = [0]
	
.LOOP $label$25:
	$10 = ($6 + $7)
	$1 = ($7 + [1])
	$7 = $1
	if ( *($10) ){ goto $label$25 }
	$11 = (CASTING uint_64)(uint_32 ($1 + [-1]))
	$12 = (int_64)0
	$13 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$26:
	$15 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$27 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$7 = ($7 + [-91])
	goto $label$28 
	
.LABEL $label$29
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$31 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$30 
	
.LABEL $label$31
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$30
	$6 = ($6 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)4294967291)
	if ( ((int_64)$13 != (int_64)55834574842) ){ goto $label$26 }
	*($0) = $14
	if ( (*($2) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$6 = *($2 + [16])
	$10 = CALL $99([8731])
	if ( ((int_32)$10 != (int_32)( *($2 + [20]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$32 }
	if ( CALL $90($7, [0], [-1], [8731], $10) ){ goto $label$32 }
	CALL $85($4, $1)
	if ( (*($2) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$32
	CALL eosio_assert([0], [8735])
	if ( ((*($2) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*($3))
	
.LABEL $label$22
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*((($2 + [16]) + [8])))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$36
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv(*((($2 + [32]) + [8])))
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$21 }
	goto $label$33 
	
.LABEL $label$34
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$21 }
	
.LABEL $label$33
	$9 = *($2 + [48])
	if ( $9 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( ($9 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$7 = *($2 + [52])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$12 }
	
.LOOP $label$37:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$38
	$7 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$37 }
	$6 = *($2 + [48])
	goto $label$11 
	
.LABEL $label$13
	$global$0 = ($2 + [64])
	return $0
	
.LABEL $label$12
	$6 = $9
	
.LABEL $label$11
	*($2 + [52]) = $9
	CALL _ZdlPv($6)
	$global$0 = ($2 + [64])
	return $0
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$6 = ($global$0 - [128])
	$global$0 = $6
	CALL eosio_assert((int_64)(((int_64)CALL $7($0) & (int_64)5) == 0), [8754])
	$7 = *($0)
	$8 = (int_64)6
	
.LOOP $label$1:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = (int_64)59
	$0 = [8622]
	$10 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$7 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$11 = ($11 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$12 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$12 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$2 }
	*((($6 + [8]) + [24])) = *(($3 + [8]))
	*($6 + [16]) = $2
	*($6 + [8]) = $1
	*($6 + [24]) = *($3)
	$11 = CALL $83((($6 + [8]) + [32]), $4)
	*($6 + [64]) = $10
	*($6 + [56]) = $5
	*(($0 = CALL _Znwj([16]))) = $7
	*($0 + [8]) = (int_64)3617214756542218240
	*((($6 + [56]) + [36])) = [0]
	$3 = ($0 + [16])
	*((($6 + [56]) + [24])) = $3
	*(($6 + [76])) = $3
	*($6 + [72]) = $0
	*($6 + [84 align=4]) = (int_64)0
	$0 = *($11)
	$11 = ( *((($6 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($11 + [32])
	$8 = (CASTING uint_64)(uint_32 $11)
	$11 = ($6 + [84])
	
.LOOP $label$8:
	$0 = ($0 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $11($11, $0)
	$11 = *(($6 + [88]))
	$0 = *(($6 + [84]))
	goto $label$9 
	
.LABEL $label$10
	$11 = [0]
	$0 = [0]
	
.LABEL $label$9
	*($6 + [116]) = $0
	*($6 + [112]) = $0
	*($6 + [120]) = $11
	*($6 + [96]) = ($6 + [112])
	*($6 + [104]) = ($6 + [8])
	CALL $18(($6 + [104]), ($6 + [96]))
	CALL $13(($6 + [112]), ($6 + [56]))
	$0 = *($6 + [112])
	CALL send_inline($0, (*($6 + [116]) - $0))
	$0 = *($6 + [112])
	if ( ($0 == 0) ){ goto $label$11 }
	*($6 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$0 = *($6 + [84])
	if ( ($0 == 0) ){ goto $label$12 }
	*(($6 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$0 = *($6 + [72])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($6 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [48])))
	
.LABEL $label$14
	$global$0 = ($6 + [128])
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$1 }
	$1 = CALL $100($3)
	CALL read_action_data($1, $3)
	CALL $16($0, $1, $3)
	$global$0 = $2
	return 
	
.LABEL $label$1
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	CALL read_action_data($1, $3)
	CALL $16($0, $1, $3)
	$global$0 = $2
}

int_64 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = ($0 + [48])
	$3 = *(($0 + [76]))
	$2 = *(($0 + [72]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$5:
	$4 = ($3 + [-24])
	$5 = *($4)
	if ( (int_64)(*($5) == 0) ){ goto $label$4 }
	$3 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$1), [8939])
	if ( ($5 == 0) ){ goto $label$2 }
	return *($5 + [44])
	
.LABEL $label$3
	$6 = (int_64)0
	$4 = CALL db_find_i64(*($1), *(($0 + [56])), (int_64)7035938067002163200, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2($1, $4)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$1), [8939])
	return *($4 + [44])
	
.LABEL $label$2
	$6 = (int_64)0
	
.LABEL $label$1
	return $6
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	$3 = ($global$0 - [528])
	$global$0 = $3
	CALL $6(($3 + [368]))
	$4 = *(($3 + [392]))
	$5 = *($3 + [384])
	$6 = *($3 + [376])
	$7 = *($3 + [368])
	$8 = CALL $83(($3 + [352]), ($3 + [400]))
	$9 = *($0)
	if ( ((int_64)$7 == (int_64)$9) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$9) ){ goto $label$1 }
	$6 = (int_64)0
	$9 = (int_64)59
	$10 = [8200]
	$11 = (int_64)0
	
.LOOP $label$2:
	$12 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$3 }
	$13 = *($10)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$13 = ($13 + [-91])
	goto $label$4 
	
.LABEL $label$5
	$13 = ( ($13 + [-48]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $13) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$10 = ($10 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$2 }
	if ( ((int_64)$7 == (int_64)$11) ){ goto $label$1 }
	$6 = (int_64)0
	$12 = (int_64)59
	$10 = [8227]
	$11 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$11 }
	$13 = *($10)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$13 = ($13 + [-91])
	goto $label$9 
	
.LABEL $label$11
	$9 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$13 = ( ($13 + [-48]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$7
	$10 = ($10 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$6 }
	if ( ((int_64)$7 == (int_64)$11) ){ goto $label$1 }
	$6 = (int_64)0
	$12 = (int_64)59
	$10 = [8256]
	$11 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$17 }
	$13 = *($10)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$13 = ($13 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$9 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$13 = ( ($13 + [-48]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$13
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)4294967291)
	$11 = ((int_64)$9 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$12 }
	if ( ((int_64)$7 == (int_64)$11) ){ goto $label$1 }
	$6 = (int_64)0
	$9 = (int_64)59
	$10 = [8280]
	$11 = (int_64)0
	
.LOOP $label$18:
	$12 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$19 }
	$13 = *($10)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$13 = ($13 + [-91])
	goto $label$20 
	
.LABEL $label$21
	$13 = ( ($13 + [-48]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $13) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$10 = ($10 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$18 }
	if ( ((int_64)$7 == (int_64)$11) ){ goto $label$1 }
	if ( ((int_64)((int_64)CALL $7($0) & (int_64)5) != (int_64)0) ){ goto $label$1 }
	$13 = [0]
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$22 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$6 = $9
	$13 = [1]
	$14 = $10
	$10 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$6 = $9
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$13 = ((int_32)$10 < (int_32)[6])
	$14 = ($10 + [1])
	$10 = $14
	if ( $13 ){ goto $label$26 }
	$13 = [1]
	$10 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$13 = [0]
	
.LABEL $label$22
	CALL eosio_assert($13, [8311])
	CALL eosio_assert(((int_64)$4 == (int_64)1397703940), [8328])
	CALL eosio_assert(((uint_64)$5 > (uint_64)(int_64)999), [8347])
	CALL eosio_assert((uint_64)($5 <= (int_64)10001), [8372])
	$10 = CALL $83(($3 + [312]), $8)
	$15 = CALL $8(($3 + [328]), $10)
	if ( ((*($10) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$27
	$10 = *($3 + [296])
	$13 = ($10 & [1])
	$16 = ($15 + [8])
	$17 = CALL $83(($3 + [296]), $16)
	CALL sha256(( *($17 + [8]) ? ($17 + [1]) : $13 ), ( *($17 + [4]) ? uint_32($10 >> [1]) : $13 ), ($3 + [256]))
	$10 = CALL read_transaction([0], [0])
	$13 = CALL $100($10)
	CALL read_transaction($13, $10)
	CALL sha256($13, $10, ($3 + [224]))
	*((($3 + [160]) + [24])) = *((($3 + [256]) + [24]))
	*((($3 + [160]) + [16])) = *((($3 + [256]) + [16]))
	*(($3 + [200])) = *($3 + [232])
	*(($3 + [208])) = *((($3 + [224]) + [16]))
	*(($3 + [216])) = *((($3 + [224]) + [24]))
	*($3 + [168]) = *($3 + [264])
	*($3 + [160]) = *($3 + [256])
	*($3 + [192]) = *($3 + [224])
	CALL sha256(($3 + [160]), [64], ($3 + [128]))
	$4 = *($15)
	if ( ((int_64)$4 == (int_64)*($0)) ){ goto $label$31 }
	if ( ((int_64)$4 == (int_64)*($3 + [368])) ){ goto $label$31 }
	if ( (CALL is_account($4) == 0) ){ goto $label$31 }
	*($3 + [120]) = (int_64)1397703940
	*($3 + [112]) = ((uint_64)((int_64)$5 * (int_64)5) / (uint_64)(int_64)1000)
	$18 = *($0)
	CALL eosio_assert([1], [8847])
	$6 = (uint_64)*($3 + [120]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$6 = $9
	$13 = [1]
	$14 = $10
	$10 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$6 = $9
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$13 = ((int_32)$10 < (int_32)[6])
	$14 = ($10 + [1])
	$10 = $14
	if ( $13 ){ goto $label$36 }
	$13 = [1]
	$10 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$13 = [0]
	
.LABEL $label$32
	CALL eosio_assert($13, [8899])
	*(($3 + [104])) = [0]
	*($3 + [96]) = (int_64)0
	$10 = CALL $99([8397])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$39 }
	*($3 + [96]) = ($10 << [1])
	$13 = (($3 + [96]) | [1])
	if ( $10 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$14 = (($10 + [16]) & [-16])
	$13 = CALL _Znwj($14)
	*($3 + [96]) = ($14 | [1])
	*($3 + [104]) = $13
	*($3 + [100]) = $10
	
.LABEL $label$38
	CALL memcpy($13, [8397], $10)
	
.LABEL $label$37
	*(($13 + $10)) = [0]
	$6 = (int_64)0
	$12 = (int_64)59
	$10 = [8452]
	$11 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$45 }
	$13 = *($10)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$13 = ($13 + [-91])
	goto $label$43 
	
.LABEL $label$45
	$9 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$13 = ( ($13 + [-48]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$41
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)4294967291)
	$11 = ((int_64)$9 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$40 }
	*((($3 + [8]) + [8])) = *((($3 + [112]) + [8]))
	*($3 + [8]) = *($3 + [112])
	CALL $9($0, $18, $4, ($3 + [8]), ($3 + [96]), $11)
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($3 + [104]))
	
.LABEL $label$31
	CALL $10(($3 + [80]), $0, $5)
	if ( ((int_64)*($3 + [80]) < (int_64)1) ){ goto $label$47 }
	$4 = *($0)
	$6 = (int_64)6
	
.LOOP $label$48:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$48 }
	$6 = (int_64)0
	$9 = (int_64)59
	$10 = [8280]
	$11 = (int_64)0
	
.LOOP $label$49:
	$12 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$50 }
	$13 = *($10)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$13 = ($13 + [-91])
	goto $label$51 
	
.LABEL $label$52
	$13 = ( ($13 + [-48]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $13) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$50
	$10 = ($10 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$49 }
	$6 = (int_64)5
	
.LOOP $label$53:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$53 }
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$10 = CALL $99([8475])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$46 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$56 }
	*($3 + [24]) = ($10 << [1])
	$13 = (($3 + [24]) | [1])
	if ( $10 ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$14 = (($10 + [16]) & [-16])
	$13 = CALL _Znwj($14)
	*($3 + [24]) = ($14 | [1])
	*($3 + [32]) = $13
	*($3 + [28]) = $10
	
.LABEL $label$55
	CALL memcpy($13, [8475], $10)
	
.LABEL $label$54
	*(($13 + $10)) = [0]
	*((($3 + [40]) + [16])) = *((($3 + [80]) + [8]))
	$10 = (($3 + [24]) + [8])
	*(($3 + [72])) = *($10)
	*($10) = [0]
	*($3 + [40]) = $7
	*($3 + [416]) = $11
	*($3 + [424]) = (int_64)8516769789752901632
	*($3 + [48]) = *($3 + [80])
	*($3 + [64]) = *($3 + [24])
	*($3 + [24]) = (int_64)0
	*(($10 = CALL _Znwj([16]))) = $4
	*($10 + [8]) = (int_64)3617214756542218240
	*(($3 + [452])) = [0]
	$13 = ($10 + [16])
	*((($3 + [416]) + [24])) = $13
	*(($3 + [436])) = $13
	*($3 + [432]) = $10
	*($3 + [444 align=4]) = (int_64)0
	$10 = *($3 + [64])
	$13 = ( *((($3 + [40]) + [28])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($13 + [24])
	$6 = (CASTING uint_64)(uint_32 $13)
	$14 = (($3 + [40]) + [24])
	$13 = (($3 + [416]) + [28])
	
.LOOP $label$57:
	$10 = ($10 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$57 }
	if ( ($10 == 0) ){ goto $label$59 }
	CALL $11($13, $10)
	$13 = *(($3 + [448]))
	$10 = *(($3 + [444]))
	goto $label$58 
	
.LABEL $label$59
	$13 = [0]
	$10 = [0]
	
.LABEL $label$58
	*($3 + [512]) = $10
	*($3 + [520]) = $13
	$13 = ($13 - $10)
	CALL eosio_assert(((int_32)$13 > (int_32)[7]), [8821])
	CALL memcpy($10, ($3 + [40]), [8])
	CALL eosio_assert(((int_32)($13 + [-8]) > (int_32)[7]), [8821])
	CALL memcpy(($10 + [8]), (($3 + [40]) + [8]), [8])
	CALL eosio_assert(((int_32)($13 + [-16]) > (int_32)[7]), [8821])
	CALL memcpy(($10 + [16]), (($3 + [40]) + [16]), [8])
	*($3 + [516]) = ($10 + [24])
	CALL $12(($3 + [512]), $14)
	CALL $13(($3 + [512]), ($3 + [416]))
	$10 = *($3 + [512])
	CALL send_inline($10, (*($3 + [516]) - $10))
	$10 = *($3 + [512])
	if ( ($10 == 0) ){ goto $label$60 }
	*($3 + [516]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$60
	$10 = *($3 + [444])
	if ( ($10 == 0) ){ goto $label$61 }
	*(($3 + [448])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$61
	$10 = *($3 + [432])
	if ( ($10 == 0) ){ goto $label$62 }
	*(($3 + [436])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$62
	if ( ((*(($3 + [64])) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$63
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$47
	$9 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$3()), [9323])
	*(($10 = CALL _Znwj([96])) + [84]) = ($0 + [8])
	*($10 + [8]) = $5
	*($10) = $7
	*($10 + [16]) = *($3 + [224])
	*(($10 + [24])) = *($3 + [232])
	*(($10 + [32])) = *((($3 + [224]) + [16]))
	*(($10 + [40])) = *((($3 + [224]) + [24]))
	*($10 + [48]) = *($3 + [128])
	*(($10 + [56])) = *($3 + [136])
	*(($10 + [64])) = *((($3 + [128]) + [16]))
	*(($10 + [72])) = *((($3 + [128]) + [24]))
	*($10 + [80]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($3 + [48]) = (($3 + [416]) + [84])
	*($3 + [44]) = ($3 + [416])
	*($3 + [40]) = ($3 + [416])
	CALL $14(($3 + [40]), $10)
	$6 = *($10)
	$14 = CALL db_store_i64(*(($0 + [16])), (int_64)3617214760481587200, $9, $6, ($3 + [416]), [84])
	*($10 + [88]) = $14
	$13 = ($0 + [24])
	if ( (uint_64)($6 <= *($13)) ){ goto $label$64 }
	*($13) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$64
	*($3 + [40]) = $10
	$6 = *($10)
	*($3 + [416]) = $6
	*($3 + [512]) = $14
	$19 = ($0 + [36])
	$13 = *($19)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [40]))) ){ goto $label$65 }
	*($13 + [8]) = $6
	*($13 + [16]) = $14
	*($3 + [40]) = [0]
	*($13) = $10
	*($19) = ($13 + [24])
	$10 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( ($10 == 0) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$65
	CALL $15(($0 + [32]), ($3 + [40]), ($3 + [416]), ($3 + [512]))
	$10 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( $10 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$46
	CALL $82(($3 + [24]))
	
.LABEL $label$30
	CALL $82(($3 + [96]))
	
.LABEL $label$29
	CALL _ZdlPv($10)
	
.LABEL $label$28
	if ( ((*($3 + [296]) & [1]) == 0) ){ goto $label$66 }
	CALL _ZdlPv(*(($17 + [8])))
	
.LABEL $label$66
	if ( ((*($16) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($15 + [16])))
	
.LABEL $label$1
	if ( ((*($3 + [352]) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$67
	if ( ((*(($3 + [400])) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($3 + [408])))
	
.LABEL $label$68
	$global$0 = ($3 + [528])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [8993])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $100($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($7 + $6)
	*(($9 = CALL _Znwj([80])) + [56]) = (int_64)1398362884
	*($9 + [48]) = (int_64)0
	CALL eosio_assert([1], [8847])
	$10 = ($9 + [48])
	$11 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8899])
	*($9 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($9 + [8])
	*($3 + [32]) = $9
	*($3 + [40]) = ($9 + [44])
	*($3 + [44]) = $10
	CALL $46(($3 + [32]), ($3 + [24]))
	*($9 + [68]) = $1
	*($3 + [24]) = $9
	$11 = *($9)
	*($3 + [32]) = $11
	*($3 + [4]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $4($8, ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $103($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8821])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [4])
	*(($3 = ($2 + [8]))) = *(($4 + [8]))
	*(($5 = ($2 + [16]))) = *(($4 + [16]))
	*(($6 = ($2 + [24]))) = *(($4 + [24]))
	*(($7 = ($2 + [32]))) = *(($4 + [32]))
	*($2) = *($4)
	$4 = *($1)
	*((($2 + [40]) + [32])) = *($7)
	*((($2 + [40]) + [24])) = *($6)
	*((($2 + [40]) + [16])) = *($5)
	*((($2 + [40]) + [8])) = *($3)
	*($2 + [40]) = *($2)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[33]), [8821])
	CALL memcpy(*($4 + [4]), ($2 + [40]), [34])
	*($4 + [4]) = (*($4 + [4]) + [34])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8821])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8821])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [8821])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [80])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8200]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$10 = ($0 + [48])
	$9 = *(($0 + [76]))
	$11 = *(($0 + [72]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$10:
	$6 = ($9 + [-24])
	$12 = *($6)
	if ( (int_64)(*($12) == 0) ){ goto $label$9 }
	$9 = $6
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$10), [8939])
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	$9 = CALL db_find_i64(*($10), *(($0 + [56])), (int_64)7035938067002163200, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$6 }
	$12 = CALL $2($10, $9)
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$10), [8939])
	
.LABEL $label$7
	$5 = *($0)
	CALL eosio_assert([1], [9433])
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$10), [9519])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [9599])
	*($12 + [8 align=1]) = *($2)
	*(($12 + [16])) = *(($2 + [8]))
	*(($12 + [24])) = *(($2 + [16]))
	*(($12 + [32])) = *(($2 + [24]))
	*(($12 + [40])) = *(($2 + [32]))
	$4 = *($12)
	CALL eosio_assert([1], [9680])
	*($3 + [80]) = ($3 + [62])
	*($3 + [76]) = $3
	*($3 + [72]) = $3
	*($3 + [88]) = ($3 + [72])
	*($3 + [100]) = ($12 + [8])
	*($3 + [96]) = $12
	*($3 + [104]) = ($12 + [44])
	*($3 + [108]) = ($12 + [48])
	CALL $3(($3 + [96]), ($3 + [88]))
	CALL db_update_i64(*($12 + [68]), $5, $3, [62])
	$6 = ($0 + [64])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$6
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [9323])
	*(($11 = CALL _Znwj([80])) + [56]) = (int_64)1398362884
	*($11 + [48]) = (int_64)0
	CALL eosio_assert([1], [8847])
	$13 = ($11 + [48])
	$4 = (int_64)5462355
	
.LOOP $label$12:
	$14 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$4 = $5
	$14 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$4 = $5
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $9 ){ goto $label$14 }
	$14 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$12 }
	
.LABEL $label$11
	CALL eosio_assert($14, [8899])
	*($11 + [64]) = $10
	*(($11 + [40])) = *(($2 + [32]))
	*(($11 + [32])) = *(($2 + [24]))
	*(($11 + [24])) = *(($2 + [16]))
	*(($11 + [16])) = *(($2 + [8]))
	*($11 + [8 align=1]) = *($2)
	*($3 + [80]) = ($3 + [62])
	*($3 + [76]) = $3
	*($3 + [72]) = $3
	*($3 + [88]) = ($3 + [72])
	*($3 + [100]) = ($11 + [8])
	*($3 + [96]) = $11
	*($3 + [104]) = ($11 + [44])
	*($3 + [108]) = $13
	CALL $3(($3 + [96]), ($3 + [88]))
	$4 = *($11)
	$9 = CALL db_store_i64(*(($0 + [56])), (int_64)7035938067002163200, $8, $4, $3, [62])
	*($11 + [68]) = $9
	$6 = ($0 + [64])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$15 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($3 + [96]) = $11
	$4 = *($11)
	*($3) = $4
	*($3 + [72]) = $9
	$12 = ($0 + [76])
	$6 = *($12)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [80]))) ){ goto $label$17 }
	*($6 + [8]) = $4
	*($6 + [16]) = $9
	*($3 + [96]) = [0]
	*($6) = $11
	*($12) = ($6 + [24])
	$6 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $6 ){ goto $label$16 }
	goto $label$5 
	
.LABEL $label$17
	CALL $4(($0 + [72]), ($3 + [96]), $3, ($3 + [72]))
	$6 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	
.LABEL $label$16
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$global$0 = ($3 + [112])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8821])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8821])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [8821])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [8821])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8821])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [8847])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8899])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($0 + [8])
	*($3 + [32]) = $0
	*($3 + [40]) = ($0 + [16])
	*($3 + [44]) = ($0 + [32])
	CALL $47(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $83(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	float_64 $11
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8280]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL $19(($3 + [40]), $1, $7, [8192])
	$10 = *(($3 + [64]))
	*(($3 + [32])) = $10
	*($3 + [24]) = *($3 + [56])
	CALL eosio_assert(((int_64)$10 == (int_64)*($3 + [48])), [9030])
	$8 = (int_64)
	*($3 + [24]) = $8(*($3 + [24]) - *($3 + [40])))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9083])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9110])
	$11 = CALL $94((float_64)2, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 ((uint_64)*($3 + [40]) / (uint_64)((uint_64)*($3 + [56]) / (uint_64)(int_64)20))) & [255])))
	*($3 + [16]) = (int_64)1447642116
	$11 = ((float_64)((float_64)(float_64)200 / (float_64)$11) * (float_64)(CASTING float_64)(int_64 $2))
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$6 }
	$7 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$7 = (Rounds 0)($11)
	
.LABEL $label$5
	*($3 + [8]) = $7
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8847])
	$4 = (int_64)5654852
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $5
	$9 = [1]
	$1 = $6
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$1 = ($6 + [1])
	$6 = $1
	if ( $9 ){ goto $label$11 }
	$9 = [1]
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [8899])
	CALL eosio_assert(((int_64)$10 == (int_64)1447642116), [9137])
	$6 = ( ($3 + [8]) ? ($3 + [24]) : ((int_64)$8 > (int_64)$7) )
	*($0) = *($6)
	*(($0 + [8])) = *(($6 + [8]))
	$global$0 = ($3 + [80])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $91($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8821])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8821])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $11($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8821])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8821])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $41(CALL $40($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8726])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [8726])
	CALL memcpy(($1 + [16]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [8726])
	CALL memcpy(($1 + [48]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8726])
	CALL memcpy(($1 + [80]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8821])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8821])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8821])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8821])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $12(*($1), ($0 + [32]))
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = *($3)
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	*($4 + [16]) = $5)
	*($4 + [8]) = $2
	$3 = [0]
	$6 = CALL db_find_i64($2, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $36(($4 + [8]), $6)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)($4 + [8])), [8939])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8922])
	*(($0 + [32])) = *(($3 + [32]))
	*(($0 + [24])) = *(($3 + [24]))
	*(($0 + [16])) = *(($3 + [16]))
	*(($0 + [8])) = *(($3 + [8]))
	*($0) = *($3)
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($4 + [36])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$5 }
	$3 = *(($4 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$3 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$global$0 = ($4 + [48])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$38 }
	goto $label$49 
	
.LABEL $label$49
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([8896])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$34 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$48
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([9016])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$37 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$47
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([9131])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$31 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$46
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([8936])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$28 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$45
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([8990])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$25 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$44
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([9078])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$22 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$43
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([8919])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$19 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$42
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([10058])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$16 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$41
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([9025])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$13 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$40
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([9105])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$39
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $99([9196])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$38
	CALL eosio_assert([0], [8607])
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	$3 = CALL $99([0])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$37
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$36
	CALL memcpy($4, [9016], $3)
	
.LABEL $label$35
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$34
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$33
	CALL memcpy($4, [8896], $3)
	
.LABEL $label$32
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$31
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$30
	CALL memcpy($4, [9131], $3)
	
.LABEL $label$29
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$28
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$27
	CALL memcpy($4, [8936], $3)
	
.LABEL $label$26
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$25
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$24
	CALL memcpy($4, [8990], $3)
	
.LABEL $label$23
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$22
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$21
	CALL memcpy($4, [9078], $3)
	
.LABEL $label$20
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$19
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$18
	CALL memcpy($4, [8919], $3)
	
.LABEL $label$17
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$16
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$15
	CALL memcpy($4, [10058], $3)
	
.LABEL $label$14
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$13
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$12
	CALL memcpy($4, [9025], $3)
	
.LABEL $label$11
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$10
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$9
	CALL memcpy($4, [9105], $3)
	
.LABEL $label$8
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$7
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$6
	CALL memcpy($4, [9196], $3)
	
.LABEL $label$5
	*(($4 + $3)) = [0]
	return 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($4, [0], $3)
	
.LABEL $label$2
	*(($4 + $3)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $82($0)
	(CASTING uint_32)(uint_64 $2)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10052])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10052])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10052])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10052])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10052])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [10052])
	CALL memcpy(*($4 + [4]), ($0 + [48]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	*($2 + [8]) = $0
	CALL $76(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9020])
	CALL memcpy(($3 + [80]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[33]), [9020])
	CALL memcpy(($4 + [112]), *($0 + [4]), [34])
	*($0 + [4]) = (*($0 + [4]) + [34])
	*($2) = *($1)
	*($2 + [12]) = ($4 + [147])
	*($2 + [8]) = ($4 + [146])
	*($2 + [16]) = ($4 + [148])
	*($2 + [20]) = ($4 + [149])
	*($2 + [24]) = ($4 + [150])
	*($2 + [28]) = ($4 + [151])
	*($2 + [32]) = ($4 + [152])
	*($2 + [36]) = ($4 + [153])
	*($2 + [40]) = ($4 + [154])
	*($2 + [44]) = ($4 + [155])
	*($2 + [48]) = ($4 + [156])
	*($2 + [52]) = ($4 + [157])
	*($2 + [56]) = ($4 + [158])
	*($2 + [60]) = ($4 + [159])
	*($2 + [64]) = ($4 + [160])
	*($2 + [68]) = ($4 + [161])
	*($2 + [72]) = ($4 + [162])
	*($2 + [76]) = ($4 + [163])
	*($2 + [80]) = ($4 + [164])
	*($2 + [88]) = ($4 + [166])
	*($2 + [84]) = ($4 + [165])
	*($2 + [92]) = ($4 + [167])
	*($2 + [96]) = ($4 + [168])
	*($2 + [100]) = ($4 + [169])
	*($2 + [104]) = ($4 + [170])
	*($2 + [108]) = ($4 + [171])
	*($2 + [112]) = ($4 + [172])
	*($2 + [116]) = ($4 + [173])
	*($2 + [120]) = ($4 + [174])
	*($2 + [124]) = ($4 + [175])
	*($2 + [128]) = ($4 + [176])
	*($2 + [132]) = ($4 + [177])
	*($2 + [136]) = ($4 + [178])
	*($2 + [140]) = ($4 + [179])
	*($2 + [144]) = ($4 + [180])
	*($2 + [148]) = ($4 + [181])
	*($2 + [152]) = ($4 + [182])
	*($2 + [156]) = ($4 + [183])
	*($2 + [164]) = ($4 + [185])
	*($2 + [160]) = ($4 + [184])
	*($2 + [168]) = ($4 + [186])
	*($2 + [172]) = ($4 + [187])
	*($2 + [176]) = ($4 + [188])
	*($2 + [180]) = ($4 + [189])
	*($2 + [184]) = ($4 + [190])
	*($2 + [188]) = ($4 + [191])
	*($2 + [192]) = ($4 + [192])
	*($2 + [196]) = ($4 + [193])
	*($2 + [200]) = ($4 + [194])
	*($2 + [204]) = ($4 + [195])
	*($2 + [208]) = ($4 + [196])
	*($2 + [212]) = ($4 + [197])
	*($2 + [216]) = ($4 + [198])
	*($2 + [220]) = ($4 + [199])
	*($2 + [224]) = ($4 + [200])
	*($2 + [228]) = ($4 + [201])
	*($2 + [232]) = ($4 + [202])
	*($2 + [240]) = ($4 + [204])
	*($2 + [236]) = ($4 + [203])
	*($2 + [244]) = ($4 + [205])
	*($2 + [248]) = ($4 + [206])
	*($2 + [252]) = ($4 + [207])
	*($2 + [256]) = ($4 + [208])
	*($2 + [260]) = ($4 + [209])
	*($2 + [264]) = ($4 + [210])
	*($2 + [268]) = ($4 + [211])
	CALL $33(($2 + [8]), $2)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy(($4 + [216]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy(($4 + [224]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9020])
	CALL memcpy(($4 + [232]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [9020])
	CALL memcpy(($4 + [240]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [272])
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	$3 = ($global$0 - [496])
	$global$0 = $3
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [84]) == (int_32)$4), [8631])
	*($3 + [452]) = $8
	*($3 + [448]) = $4
	$9 = (($3 + [448]) | [4])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)3617214760481587200, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$8 = CALL $52($4, $7)
	CALL eosio_assert(((int_32)*($8 + [84]) == (int_32)$4), [8631])
	*($3 + [452]) = $8
	*($3 + [448]) = $4
	$9 = (($3 + [448]) | [4])
	goto $label$1 
	
.LABEL $label$5
	$8 = [0]
	*($3 + [452]) = [0]
	*($3 + [448]) = $4
	$9 = (($3 + [448]) | [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8213])
	$7 = CALL $53(($0 + [48]), (int_64)0, [8237])
	*((($3 + [408]) + [32])) = *(($7 + [40]))
	*((($3 + [408]) + [24])) = *(($7 + [32]))
	*((($3 + [408]) + [16])) = *(($7 + [24]))
	*(($3 + [416])) = *(($7 + [16]))
	*($3 + [408]) = *($7 + [8 align=1])
	CALL assert_recover_key(($8 + [48]), $2, [66], ($3 + [408]), [34])
	CALL sha256($2, [66], ($3 + [368]))
	$10 = *($3 + [368])
	if ( ((uint_32)$10 <= (uint_32)[-8590]) ){ goto $label$7 }
	*($3 + [360]) = (int_64)0
	CALL $54(($3 + [16]), $0)
	*($3 + [360]) = *($3 + [16])
	CALL $55($0, (int_64)0)
	$11 = (int_64)10
	goto $label$6 
	
.LABEL $label$7
	if ( ($10 <= [-21474]) ){ goto $label$9 }
	*($3 + [360]) = (int_64)0
	$1 = (int_64)1000
	$11 = (int_64)9
	goto $label$8 
	
.LABEL $label$9
	if ( ($10 <= [-64424]) ){ goto $label$10 }
	*($3 + [360]) = (int_64)0
	$1 = (int_64)800
	$11 = (int_64)8
	goto $label$8 
	
.LABEL $label$10
	if ( ($10 <= [-279172]) ){ goto $label$11 }
	*($3 + [360]) = (int_64)0
	$1 = (int_64)320
	$11 = (int_64)7
	goto $label$8 
	
.LABEL $label$11
	if ( ($10 <= [-708669]) ){ goto $label$12 }
	*($3 + [360]) = (int_64)0
	$1 = (int_64)100
	$11 = (int_64)6
	goto $label$8 
	
.LABEL $label$12
	if ( ($10 <= [-14452564]) ){ goto $label$13 }
	*($3 + [360]) = (int_64)0
	$1 = (int_64)80
	$11 = (int_64)5
	goto $label$8 
	
.LABEL $label$13
	if ( ($10 <= [-18318035]) ){ goto $label$14 }
	*($3 + [360]) = (int_64)0
	$1 = (int_64)25
	$11 = (int_64)4
	goto $label$8 
	
.LABEL $label$14
	if ( ($10 <= [-61267707]) ){ goto $label$15 }
	*($3 + [360]) = (int_64)0
	$1 = (int_64)5
	$11 = (int_64)3
	goto $label$8 
	
.LABEL $label$15
	if ( ($10 <= [-881606461]) ){ goto $label$16 }
	*($3 + [360]) = (int_64)0
	$11 = (int_64)2
	$1 = (int_64)2
	goto $label$8 
	
.LABEL $label$16
	*($3 + [360]) = (int_64)0
	$11 = (CASTING uint_64)(uint_32 ((uint_32)$10 > (uint_32)[-1268153519]))
	$1 = $11
	
.LABEL $label$8
	*($3 + [360]) = ((int_64)*($8 + [8]) * (int_64)$1)
	
.LABEL $label$6
	$1 = (int_64)0
	$12 = (int_64)59
	$7 = [8268]
	$13 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$22 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$12 = ((int_64)$12 + (int_64)4294967291)
	$13 = ((int_64)$14 | (int_64)$13)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$17 }
	$15 = CALL $56($0, $13, [9904])
	$1 = *($3 + [360])
	if ( ((uint_64)((int_64)$1 + (int_64)-1) >= (uint_64)$15) ){ goto $label$26 }
	$16 = *(*($9))
	*($3 + [352]) = (int_64)1397703940
	*($3 + [344]) = $1
	$17 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8772])
	$1 = (uint_64)*($3 + [352]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$14 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$1 = $14
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$27 }
	goto $label$24 
	
.LABEL $label$28
	$1 = $14
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$29 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$27 }
	goto $label$24 
	
.LABEL $label$26
	$17 = ((uint_64)*(*($9) + [8]) / (uint_64)(int_64)100)
	CALL $57($0, $17)
	goto $label$23 
	
.LABEL $label$25
	$6 = [0]
	
.LABEL $label$24
	CALL eosio_assert($6, [8827])
	*(($3 + [280])) = [0]
	*($3 + [272]) = (int_64)0
	$7 = CALL $99([8293])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$41 }
	*($3 + [272]) = ($7 << [1])
	$6 = (($3 + [272]) | [1])
	if ( $7 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$8 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($3 + [272]) = ($8 | [1])
	*($3 + [280]) = $6
	*($3 + [276]) = $7
	
.LABEL $label$40
	CALL memcpy($6, [8293], $7)
	
.LABEL $label$39
	*(($6 + $7)) = [0]
	CALL $58(($3 + [464]), $0, $11)
	$7 = *($3 + [464])
	$6 = ($7 & [1])
	$7 = CALL $88(($3 + [272]), ( *($3 + [472]) ? (($3 + [464]) | [1]) : $6 ), ( *($3 + [468]) ? uint_32($7 >> [1]) : $6 ))
	$6 = ($7 + [8])
	*((($3 + [16]) + [8])) = *($6)
	*($3 + [16]) = *($7)
	*($7) = (int_64)0
	*($6) = [0]
	*((($3 + [312]) + [8])) = [0]
	*($3 + [312]) = (int_64)0
	$7 = CALL $99([8325])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$44 }
	*($3 + [312]) = ($7 << [1])
	$8 = (($3 + [312]) | [1])
	$6 = $8
	if ( $7 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$8 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($3 + [312]) = ($8 | [1])
	*($3 + [320]) = $6
	*($3 + [316]) = $7
	$8 = (($3 + [312]) | [1])
	
.LABEL $label$43
	CALL memcpy($6, [8325], $7)
	
.LABEL $label$42
	*(($6 + $7)) = [0]
	$7 = *($3 + [312])
	$6 = ($7 & [1])
	$7 = CALL $88(($3 + [16]), ( *($3 + [320]) ? $8 : $6 ), ( *($3 + [316]) ? uint_32($7 >> [1]) : $6 ))
	$6 = ($7 + [8])
	*((($3 + [328]) + [8])) = *($6)
	*($3 + [328]) = *($7)
	$1 = (int_64)0
	*($7) = (int_64)0
	*($6) = [0]
	$12 = (int_64)59
	$7 = [8268]
	$13 = (int_64)0
	
.LOOP $label$45:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$50 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$6 = ($6 + [-91])
	goto $label$48 
	
.LABEL $label$50
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$47
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$46
	$7 = ($7 + [1])
	$12 = ((int_64)$12 + (int_64)4294967291)
	$13 = ((int_64)$14 | (int_64)$13)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$45 }
	*(($3 + [8])) = *((($3 + [344]) + [8]))
	*($3) = *($3 + [344])
	CALL $9($0, $17, $16, $3, ($3 + [328]), $13)
	if ( (*($3 + [328]) & [1]) ){ goto $label$52 }
	if ( (*($3 + [312]) & [1]) ){ goto $label$51 }
	goto $label$36 
	
.LABEL $label$52
	CALL _ZdlPv(*($3 + [336]))
	if ( ((*($3 + [312]) & [1]) == 0) ){ goto $label$36 }
	
.LABEL $label$51
	CALL _ZdlPv(*(($3 + [320])))
	$7 = [1]
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$38
	CALL $82(($3 + [272]))
	
.LABEL $label$37
	CALL $82(($3 + [312]))
	
.LABEL $label$36
	$7 = [1]
	if ( (*($3 + [16]) & [1]) ){ goto $label$34 }
	
.LABEL $label$35
	if ( (*($3 + [464]) & $7) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	CALL _ZdlPv(*($3 + [24]))
	if ( ((*($3 + [464]) & $7) == 0) ){ goto $label$32 }
	
.LABEL $label$33
	CALL _ZdlPv(*(($3 + [472])))
	if ( (*($3 + [272]) & [1]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	if ( ((*($3 + [272]) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*($3 + [280]))
	
.LABEL $label$30
	$17 = (int_64)0
	
.LABEL $label$23
	$16 = *($0)
	$1 = (int_64)6
	
.LOOP $label$53:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$53 }
	$1 = (int_64)0
	$12 = (int_64)59
	$7 = [8361]
	$13 = (int_64)0
	
.LOOP $label$54:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$59 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$6 = ($6 + [-91])
	goto $label$57 
	
.LABEL $label$59
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$55
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$54 }
	$5 = *($9)
	$12 = *($5 + [8])
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8772])
	$1 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$14 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$63 }
	$1 = $14
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$63
	$1 = $14
	
.LOOP $label$64:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$61 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$64 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	$6 = [0]
	
.LABEL $label$60
	CALL eosio_assert($6, [8827])
	$18 = *($3 + [360])
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8772])
	$1 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$67:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$66 }
	$14 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$68 }
	$1 = $14
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$67 }
	goto $label$65 
	
.LABEL $label$68
	$1 = $14
	
.LOOP $label$69:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$66 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$69 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$67 }
	goto $label$65 
	
.LABEL $label$66
	$6 = [0]
	
.LABEL $label$65
	CALL eosio_assert($6, [8827])
	CALL eosio_assert([1], [8772])
	$19 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$72:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$14 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$73 }
	$1 = $14
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$73
	$1 = $14
	
.LOOP $label$74:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$71 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$74 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$71
	$6 = [0]
	
.LABEL $label$70
	CALL eosio_assert($6, [8827])
	$1 = *($5)
	*((($3 + [16]) + [16])) = (int_64)1397703940
	*((($3 + [16]) + [32])) = (int_64)1397703940
	*($3 + [40]) = $18
	*((($3 + [16]) + [72])) = *(($5 + [40]))
	*((($3 + [16]) + [64])) = *(($5 + [32]))
	*((($3 + [16]) + [56])) = *(($5 + [24]))
	*($3 + [64]) = *($5 + [16])
	*(($3 + [120])) = *(($5 + [72]))
	*(($3 + [112])) = *(($5 + [64]))
	*(($3 + [104])) = *(($5 + [56]))
	*($3 + [16]) = $1
	*($3 + [24]) = $12
	*($3 + [96]) = *($5 + [48])
	*(($3 + [160])) = *((($3 + [408]) + [32]))
	*(($3 + [152])) = *((($3 + [408]) + [24]))
	*(($3 + [144])) = *((($3 + [408]) + [16]))
	*(($3 + [136])) = *(($3 + [416]))
	*($3 + [128]) = *($3 + [408])
	CALL memcpy(($3 + [162]), $2, [66])
	*(($3 + [256])) = (int_64)1397703940
	*(($6 = (($3 + [272]) + [24]))) = [0]
	*($3 + [240]) = $11
	*($3 + [232]) = $19
	*($3 + [248]) = $17
	*($3 + [272]) = $16
	*($3 + [280]) = $13
	*($3 + [288]) = (int_64)0
	*(($7 = CALL _Znwj([16]))) = $16
	*($7 + [8]) = (int_64)3617214756542218240
	*(($3 + [308])) = [0]
	$8 = ($7 + [16])
	*($6) = $8
	*(($3 + [292])) = $8
	*($3 + [288]) = $7
	*($3 + [300 align=4]) = (int_64)0
	CALL $11(($3 + [300]), [236])
	$7 = *((($3 + [272]) + [32]))
	$6 = *($3 + [300])
	*($3 + [468]) = $6
	*($3 + [464]) = $6
	*($3 + [472]) = $7
	*($3 + [488]) = ($3 + [464])
	*($3 + [312]) = ($3 + [16])
	CALL $59(($3 + [312]), ($3 + [488]))
	CALL $13(($3 + [464]), ($3 + [272]))
	$7 = *($3 + [464])
	CALL send_inline($7, (*($3 + [468]) - $7))
	$7 = *($3 + [464])
	if ( ($7 == 0) ){ goto $label$75 }
	*($3 + [468]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$75
	$7 = *($3 + [300])
	if ( ($7 == 0) ){ goto $label$76 }
	*(($3 + [304])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$76
	$7 = *($3 + [288])
	if ( ($7 == 0) ){ goto $label$77 }
	*(($3 + [292])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$77
	*($3 + [280]) = (int_64)1397703940
	*($3 + [272]) = (int_64)0
	CALL eosio_assert([1], [8772])
	$1 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$80:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$79 }
	$14 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$81 }
	$1 = $14
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$80 }
	goto $label$78 
	
.LABEL $label$81
	$1 = $14
	
.LOOP $label$82:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$79 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$82 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$80 }
	goto $label$78 
	
.LABEL $label$79
	$6 = [0]
	
.LABEL $label$78
	CALL eosio_assert($6, [8827])
	if ( ((int_64)*($3 + [360]) != (int_64)0) ){ goto $label$83 }
	*($3 + [272]) = ((uint_64)((int_64)*(*($9) + [8]) * (int_64)( (int_64)10 ? (CASTING uint_64)(uint_32 ((uint_64)$15 > (uint_64)(int_64)20000000)) : ((uint_64)$15 > (uint_64)(int_64)100000000) )) / (uint_64)(int_64)100)
	
.LABEL $label$83
	*(($6 = ($3 + [48]))) = [0]
	*($3 + [32]) = (int_64)-1
	$1 = *($0)
	*($3 + [16]) = $1
	*($3 + [24]) = $1
	*($3 + [40]) = (int_64)0
	$7 = CALL db_find_i64($1, $1, (int_64)7035938067009503232, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$85 }
	$7 = CALL $60(($3 + [16]), $7)
	CALL eosio_assert(((int_32)*($7 + [96]) == (int_32)($3 + [16])), [8631])
	$1 = *($0)
	*($3 + [468]) = ($3 + [360])
	*($3 + [464]) = ($3 + [448])
	*($3 + [472]) = ($3 + [272])
	CALL eosio_assert([1], [9912])
	CALL $61(($3 + [16]), $7, $1, ($3 + [464]))
	goto $label$84 
	
.LABEL $label$85
	$14 = *($0)
	*($3 + [316]) = ($3 + [360])
	*($3 + [312]) = ($3 + [448])
	*($3 + [320]) = ($3 + [272])
	*($3 + [488]) = $14
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$3()), [9468])
	*($3 + [468]) = ($3 + [312])
	*($3 + [464]) = ($3 + [16])
	*($3 + [472]) = ($3 + [488])
	$7 = CALL _Znwj([112])
	CALL $62($7)
	*($7 + [96]) = ($3 + [16])
	CALL $63(($3 + [464]), $7)
	*($3 + [480]) = $7
	$1 = *($7)
	*($3 + [464]) = $1
	$5 = *($7 + [100])
	*($3 + [460]) = $5
	$2 = ($3 + [44])
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$87 }
	*($8 + [8]) = $1
	*($8 + [16]) = $5
	*($3 + [480]) = [0]
	*($8) = $7
	*($2) = ($8 + [24])
	$7 = *($3 + [480])
	*($3 + [480]) = [0]
	if ( $7 ){ goto $label$86 }
	goto $label$84 
	
.LABEL $label$87
	CALL $64(($3 + [40]), ($3 + [480]), ($3 + [464]), ($3 + [460]))
	$7 = *($3 + [480])
	*($3 + [480]) = [0]
	if ( ($7 == 0) ){ goto $label$84 }
	
.LABEL $label$86
	CALL _ZdlPv($7)
	
.LABEL $label$84
	CALL $65($0)
	$1 = *($3 + [448])
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$6 = ((int_32)$7) != (int_32)[0]
	CALL eosio_assert($6), [9565])
	CALL eosio_assert($6, [9650])
	$6 = CALL db_next_i64(*($7 + [88]), ($3 + [464]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$88 }
	CALL $52((CASTING uint_32)(uint_64 $1), $6)
	
.LABEL $label$88
	CALL $66($4, $7)
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$89 }
	$0 = ($3 + [44])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$91 }
	
.LOOP $label$92:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$93 }
	CALL _ZdlPv($6)
	
.LABEL $label$93
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$92 }
	$7 = *(($3 + [40]))
	goto $label$90 
	
.LABEL $label$91
	$7 = $8
	
.LABEL $label$90
	*($0) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$89
	$global$0 = ($3 + [496])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8684])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $100($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [84]) = $0
	*($5 + [80]) = [0]
	CALL $75(($3 + [32]), $5)
	*($5 + [88]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $103($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $53 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [8631])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035938067002163200, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $2($0, $4)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$0), [8631])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$4 = *($1)
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	*($2 + [32]) = (int_64)0
	$1 = CALL db_find_i64($4, $4, (int_64)7035938067009503232, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL $60(($2 + [8]), $1)
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($2 + [8])), [8631])
	*(($0 + [8])) = *(($3 + [56]))
	*($0) = *($3 + [48])
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$3 }
	$5 = ($2 + [36])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$5 }
	$3 = *(($2 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [8772])
	$4 = (int_64)5459781
	
.LOOP $label$8:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$5 = [1]
	$0 = $3
	$3 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$0 = ((int_32)$3 < (int_32)[6])
	$1 = ($3 + [1])
	$3 = $1
	if ( $0 ){ goto $label$10 }
	$5 = [1]
	$3 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($5, [8827])
	
.LABEL $label$3
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$3 = $1
	
.LABEL $label$1
	*($5) = $1
	CALL _ZdlPv($3)
	$global$0 = ($2 + [48])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [8847])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8899])
	*(($0 + [32])) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [8847])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [8899])
	*(($0 + [72])) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*($0 + [48]) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*($0 + [80]) = (int_64)0
	*(($0 + [144])) = [0]
	*(($0 + [136])) = (int_64)0
	*(($0 + [128])) = (int_64)0
	*(($0 + [120])) = (int_64)0
	*($0 + [112]) = (int_64)0
	CALL memset(($0 + [146]), [0], [66])
	*($0 + [224]) = (int_64)0
	*($0 + [216]) = (int_64)0
	*($0 + [232]) = (int_64)0
	*(($0 + [240])) = (int_64)1398362884
	CALL eosio_assert([1], [8847])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$4 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [8899])
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $49(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

int_64 .FUNC $56 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	$4 = (int_64)0
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [16]) = $5
	$6 = *($2)
	*($3 + [8]) = $1
	$2 = CALL db_find_i64($1, $5, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$2) < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $68(($3 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)($3 + [8])), [8631])
	$4 = *($2)
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($3 + [36])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $7
	
.LABEL $label$2
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $57 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = $1
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	$1 = *($0)
	*($2 + [16]) = $1
	*($2 + [24]) = $1
	*($2 + [40]) = (int_64)0
	$3 = CALL db_find_i64($1, $1, (int_64)7035938067009503232, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $60(($2 + [16]), $3)
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($2 + [16])), [8631])
	$1 = *($0)
	*($2 + [8]) = ($2 + [56])
	CALL eosio_assert([1], [9912])
	CALL $69(($2 + [16]), $3, $1, ($2 + [8]))
	$4 = *($2 + [40])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [896])
	$global$0 = $2
	*(($3 = (($2 + [432]) + [8]))) = *(($1 + [16]))
	*(($4 = (($2 + [416]) + [8]))) = *(($1 + [32]))
	*(($5 = (($2 + [384]) + [16]))) = *(($1 + [64]))
	*(($6 = (($2 + [384]) + [24]))) = *(($1 + [72]))
	*(($7 = (($2 + [352]) + [24]))) = *(($1 + [104]))
	*(($8 = (($2 + [352]) + [16]))) = *(($1 + [96]))
	*($2 + [432]) = *($1 + [8])
	*($2 + [416]) = *($1 + [24])
	*($2 + [384]) = *($1 + [48])
	*($2 + [352]) = *($1 + [80])
	*($2 + [392]) = *(($1 + [56]))
	*($2 + [360]) = *(($1 + [88]))
	$9 = *($1)
	*(($10 = (($2 + [312]) + [32]))) = *(($1 + [144]))
	*(($11 = (($2 + [312]) + [24]))) = *(($1 + [136]))
	*(($12 = (($2 + [312]) + [16]))) = *(($1 + [128]))
	*(($13 = (($2 + [312]) + [8]))) = *(($1 + [120]))
	*($2 + [312]) = *($1 + [112 align=1])
	CALL memcpy(($2 + [246]), ($1 + [146]), [66])
	*(($14 = (($2 + [224]) + [8]))) = *(($1 + [240]))
	*($2 + [224]) = *($1 + [232])
	$15 = *($1 + [224])
	$16 = *($1 + [216])
	*((($2 + [656]) + [8])) = *($14)
	*($2 + [656]) = *($2 + [224])
	CALL memcpy(($2 + [584]), ($2 + [246]), [66])
	*((($2 + [544]) + [32])) = *($10)
	*((($2 + [544]) + [24])) = *($11)
	*((($2 + [544]) + [16])) = *($12)
	*((($2 + [544]) + [8])) = *($13)
	*((($2 + [512]) + [16])) = *($8)
	*((($2 + [512]) + [24])) = *($7)
	*($2 + [544]) = *($2 + [312])
	*($2 + [512]) = *($2 + [352])
	*($2 + [520]) = *($2 + [360])
	*((($2 + [480]) + [24])) = *($6)
	*((($2 + [480]) + [16])) = *($5)
	*((($2 + [464]) + [8])) = *($4)
	*((($2 + [448]) + [8])) = *($3)
	*($2 + [488]) = *($2 + [392])
	*($2 + [480]) = *($2 + [384])
	*($2 + [464]) = *($2 + [416])
	*($2 + [448]) = *($2 + [432])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($3 = (($2 + [880]) + [8]))) = *((($2 + [448]) + [8]))
	*(($4 = (($2 + [864]) + [8]))) = *((($2 + [464]) + [8]))
	*(($5 = (($2 + [832]) + [16]))) = *((($2 + [480]) + [16]))
	*(($6 = (($2 + [832]) + [24]))) = *((($2 + [480]) + [24]))
	*(($7 = (($2 + [800]) + [16]))) = *((($2 + [512]) + [16]))
	*(($8 = (($2 + [800]) + [24]))) = *((($2 + [512]) + [24]))
	*($2 + [880]) = *($2 + [448])
	*($2 + [864]) = *($2 + [464])
	*($2 + [832]) = *($2 + [480])
	*($2 + [840]) = *($2 + [488])
	*($2 + [800]) = *($2 + [512])
	*($2 + [808]) = *($2 + [520])
	*(($10 = (($2 + [760]) + [32]))) = *((($2 + [544]) + [32]))
	*(($11 = (($2 + [760]) + [24]))) = *((($2 + [544]) + [24]))
	*(($12 = (($2 + [760]) + [16]))) = *((($2 + [544]) + [16]))
	*(($13 = (($2 + [760]) + [8]))) = *((($2 + [544]) + [8]))
	*($2 + [760]) = *($2 + [544])
	CALL memcpy(($2 + [688]), ($2 + [584]), [66])
	*(($14 = (($2 + [672]) + [8]))) = *((($2 + [656]) + [8]))
	*((($2 + [208]) + [8])) = *($3)
	*((($2 + [192]) + [8])) = *($4)
	*((($2 + [160]) + [16])) = *($5)
	*((($2 + [160]) + [24])) = *($6)
	*($2 + [672]) = *($2 + [656])
	*($2 + [208]) = *($2 + [880])
	*($2 + [192]) = *($2 + [864])
	*($2 + [160]) = *($2 + [832])
	*($2 + [168]) = *($2 + [840])
	*((($2 + [128]) + [24])) = *($8)
	*((($2 + [128]) + [16])) = *($7)
	*((($2 + [88]) + [32])) = *($10)
	*((($2 + [88]) + [24])) = *($11)
	*((($2 + [88]) + [16])) = *($12)
	*((($2 + [88]) + [8])) = *($13)
	*($2 + [136]) = *($2 + [808])
	*($2 + [128]) = *($2 + [800])
	*($2 + [88]) = *($2 + [760])
	CALL memcpy(($2 + [22]), ($2 + [688]), [66])
	*(($2 + [8])) = *($14)
	*($2) = *($2 + [672])
	CALL void $0((int_32 $9), (int_64 ($2 + [208])), (int_32 ($2 + [192])), (int_32 ($2 + [160])), (int_32 ($2 + [128])), (int_32 ($2 + [88])), (int_32 ($2 + [22])), (int_32 $16), (int_64 $15), (int_64 $2), (int_32 $1))
	$global$0 = ($2 + [896])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $83($2, $1)
	$4 = *($1 + [16])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$1 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	$5 = CALL $83(($2 + [16]), $3)
	CALL void $1((int_32 $5), (int_32 $4), (int_64 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $48($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $87($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $87($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $82($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $55 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = $1
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	$1 = *($0)
	*($2 + [16]) = $1
	*($2 + [24]) = $1
	*($2 + [40]) = (int_64)0
	$3 = CALL db_find_i64($1, $1, (int_64)7035938067009503232, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $60(($2 + [16]), $3)
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($2 + [16])), [8631])
	$1 = *($0)
	*($2 + [8]) = ($2 + [56])
	CALL eosio_assert([1], [9912])
	CALL $67(($2 + [16]), $3, $1, ($2 + [8]))
	$4 = *($2 + [40])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $2
	$2 = (int_64)0
	$4 = (int_64)59
	$5 = [8200]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	$5 = *($1)
	$8 = CALL $99([9207])
	if ( ((int_32)$8 != (int_32)( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$7 }
	if ( (CALL $90($1, [0], [-1], [9207], $8) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *($1)
	$8 = CALL $99([9258])
	if ( ((int_32)$8 != (int_32)( *(($1 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$8 }
	if ( (CALL $90($1, [0], [-1], [9258], $8) == 0) ){ goto $label$5 }
	
.LABEL $label$8
	CALL eosio_assert([0], [9295])
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$6
	CALL $30($0, ((int_64)CALL $7($0) | (int_64)5))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$5
	$9 = ($0 + [48])
	$8 = *(($0 + [76]))
	$10 = *(($0 + [72]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$13:
	$5 = ($8 + [-24])
	$1 = *($5)
	if ( (int_64)(*($1) == 0) ){ goto $label$12 }
	$8 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$9), [8939])
	goto $label$10 
	
.LABEL $label$11
	$5 = CALL db_find_i64(*($9), *(($0 + [56])), (int_64)7035938067002163200, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$1 = CALL $2($9, $5)
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$9), [8939])
	
.LABEL $label$10
	$2 = *($0)
	*($3 + [8]) = ($3 + [24])
	CALL eosio_assert([1], [9433])
	CALL $31($9, $1, $2, ($3 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$9
	$2 = *($0)
	*($3 + [16]) = ($3 + [24])
	CALL $32(($3 + [8]), $9, $2, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8543])
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8622]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$12 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8452]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$18 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$19 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8622]
	$7 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$25 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$8 = ($8 + [-91])
	goto $label$23 
	
.LABEL $label$25
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$20 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$19
	$4 = (int_64)7
	
.LOOP $label$26:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$26 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = (int_64)0
	*(($3 + [128])) = [0]
	*(($3 + [144])) = $0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	*($3 + [96]) = $0
	*($3 + [88]) = $0
	*($3 + [136]) = $0
	if ( ((int_64)$2 <= (int_64)-2507753362806243329) ){ goto $label$33 }
	if ( ((int_64)$2 == (int_64)-2507753362806243328) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)4229853260945440768) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)5075292897255882752) ){ goto $label$32 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [1]
	*($3 + [8]) = *($3 + [80])
	CALL $22(($3 + [88]), ($3 + [8]))
	$10 = *(($3 + [160]))
	if ( $10 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)-4994130327958978560) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$32 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3 + [16]) = *($3 + [72])
	CALL $23(($3 + [88]), ($3 + [16]))
	
.LABEL $label$32
	$10 = *(($3 + [160]))
	if ( ($10 == 0) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$31
	*($3 + [52]) = [0]
	*($3 + [48]) = [3]
	*($3 + [40]) = *($3 + [48])
	CALL $24(($3 + [88]), ($3 + [40]))
	$10 = *(($3 + [160]))
	if ( $10 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	*($3 + [60]) = [0]
	*($3 + [56]) = [4]
	*($3 + [32]) = *($3 + [56])
	CALL $26(($3 + [88]), ($3 + [32]))
	$10 = *(($3 + [160]))
	if ( $10 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	*($3 + [68]) = [0]
	*($3 + [64]) = [5]
	*($3 + [24]) = *($3 + [64])
	CALL $27(($3 + [88]), ($3 + [24]))
	$10 = *(($3 + [160]))
	if ( ($10 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$11 = ($3 + [164])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$35 }
	
.LOOP $label$36:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$37 }
	CALL _ZdlPv($8)
	
.LABEL $label$37
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$36 }
	$6 = *(($3 + [160]))
	goto $label$34 
	
.LABEL $label$35
	$6 = $10
	
.LABEL $label$34
	*($11) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$27
	$10 = *(($3 + [120]))
	if ( ($10 == 0) ){ goto $label$4 }
	$11 = ($3 + [124])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$39 }
	
.LOOP $label$40:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$41 }
	CALL _ZdlPv($8)
	
.LABEL $label$41
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$40 }
	$6 = *(($3 + [120]))
	goto $label$38 
	
.LABEL $label$39
	$6 = $10
	
.LABEL $label$38
	*($11) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$4
	CALL $92([0])
	$global$0 = ($3 + [176])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $100($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9020])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [9020])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $103($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $100($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [52]) = $1
	*($3 + [48]) = $1
	*($3 + [56]) = ($1 + $0)
	CALL $28(($3 + [48]), ($3 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [56]) - *($3 + [52])) > (uint_32)[7]), [9020])
	CALL memcpy(($3 + [24]), *($3 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $103($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $29(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_64 $8, int_64 $9, int_32 $10)
{
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$11 = (int_64)0
	$12 = (int_64)59
	$13 = [9784]
	$14 = (int_64)0
	
.LOOP $label$1:
	$15 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$16 = *($13)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$16 = ($16 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$16 = ( ($16 + [-48]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$15 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $16) & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$13 = ($13 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($14)
	CALL require_recipient($1)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $100($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [48])) = [0]
	*((($3 + [8]) + [32])) = (int_64)0
	*((($3 + [8]) + [24])) = (int_64)0
	*((($3 + [8]) + [16])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9020])
	CALL memcpy(($3 + [8]), $6, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[33]), [9020])
	$1 = (($3 + [8]) + [8])
	CALL memcpy($1, ($6 + [8]), [34])
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL $103($6)
	
.LABEL $label$4
	*(($7 = (($3 + [56]) + [8]))) = *(($1 + [8]))
	*(($6 = (($3 + [56]) + [16]))) = *(($1 + [16]))
	*(($2 = (($3 + [56]) + [24]))) = *(($1 + [24]))
	*(($8 = (($3 + [56]) + [32]))) = *(($1 + [32]))
	*($3 + [56]) = *($1)
	$9 = *($3 + [8])
	*((($3 + [96]) + [32])) = *($8)
	*((($3 + [96]) + [24])) = *($2)
	*((($3 + [96]) + [16])) = *($6)
	*((($3 + [96]) + [8])) = *($7)
	*($3 + [136]) = $9
	*($3 + [96]) = *($3 + [56])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($3 + [136])), (int_32 ($3 + [96])), (int_32 $5))
	$global$0 = ($3 + [144])
	return [1]
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [560])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $100($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [72]) = (int_64)0
	$2 = CALL memset((($3 + [72]) + [8]), [0], [66])
	*($3 + [492]) = $6
	*($3 + [488]) = $6
	*($3 + [496]) = ($6 + $1)
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9020])
	CALL memcpy(($3 + [72]), *($3 + [492]), [8])
	*($3 + [492]) = (*($3 + [492]) + [8])
	*($3 + [416]) = ($3 + [488])
	*($3 + [156]) = ($3 + [81])
	*($3 + [152]) = $2
	*($3 + [160]) = ($3 + [82])
	*($3 + [164]) = ($3 + [83])
	*($3 + [168]) = ($3 + [84])
	*($3 + [172]) = ($3 + [85])
	*($3 + [176]) = ($3 + [86])
	*($3 + [180]) = ($3 + [87])
	*($3 + [184]) = ($3 + [88])
	*($3 + [188]) = ($3 + [89])
	*($3 + [192]) = ($3 + [90])
	*($3 + [196]) = ($3 + [91])
	*($3 + [200]) = ($3 + [92])
	*($3 + [204]) = ($3 + [93])
	*($3 + [208]) = ($3 + [94])
	*($3 + [212]) = ($3 + [95])
	*($3 + [216]) = ($3 + [96])
	*($3 + [220]) = ($3 + [97])
	*($3 + [224]) = ($3 + [98])
	*($3 + [232]) = ($3 + [100])
	*($3 + [228]) = ($3 + [99])
	*($3 + [236]) = ($3 + [101])
	*($3 + [240]) = ($3 + [102])
	*($3 + [244]) = ($3 + [103])
	*($3 + [248]) = ($3 + [104])
	*($3 + [252]) = ($3 + [105])
	*($3 + [256]) = ($3 + [106])
	*($3 + [260]) = ($3 + [107])
	*($3 + [264]) = ($3 + [108])
	*($3 + [268]) = ($3 + [109])
	*($3 + [272]) = ($3 + [110])
	*($3 + [276]) = ($3 + [111])
	*($3 + [280]) = ($3 + [112])
	*($3 + [284]) = ($3 + [113])
	*($3 + [288]) = ($3 + [114])
	*($3 + [292]) = ($3 + [115])
	*($3 + [296]) = ($3 + [116])
	*($3 + [300]) = ($3 + [117])
	*($3 + [308]) = ($3 + [119])
	*($3 + [304]) = ($3 + [118])
	*($3 + [312]) = ($3 + [120])
	*($3 + [316]) = ($3 + [121])
	*($3 + [320]) = ($3 + [122])
	*($3 + [324]) = ($3 + [123])
	*($3 + [328]) = ($3 + [124])
	*($3 + [332]) = ($3 + [125])
	*($3 + [336]) = ($3 + [126])
	*($3 + [340]) = ($3 + [127])
	*($3 + [344]) = ($3 + [128])
	*($3 + [348]) = ($3 + [129])
	*($3 + [352]) = ($3 + [130])
	*($3 + [356]) = ($3 + [131])
	*($3 + [360]) = ($3 + [132])
	*($3 + [364]) = ($3 + [133])
	*($3 + [368]) = ($3 + [134])
	*($3 + [372]) = ($3 + [135])
	*($3 + [376]) = ($3 + [136])
	*($3 + [384]) = (($3 + [72]) + [66])
	*($3 + [380]) = ($3 + [137])
	*($3 + [388]) = ($3 + [139])
	*($3 + [392]) = ($3 + [140])
	*($3 + [396]) = ($3 + [141])
	*($3 + [400]) = ($3 + [142])
	*($3 + [404]) = ($3 + [143])
	*($3 + [408]) = ($3 + [144])
	*($3 + [412]) = ($3 + [145])
	CALL $33(($3 + [152]), ($3 + [416]))
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $103($6)
	
.LABEL $label$4
	$7 = *($3 + [72])
	CALL memcpy(($3 + [416]), $2, [66])
	CALL memcpy(($3 + [488]), ($3 + [416]), [66])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL memcpy(($3 + [152]), ($3 + [488]), [66])
	CALL memcpy(($3 + [6]), ($3 + [152]), [66])
	CALL void $1((int_32 $7), (int_64 ($3 + [6])), (int_32 $5))
	$global$0 = ($3 + [560])
	return [1]
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [288])
	$global$0 = $2
	*(($3 = $2) + [284]) = $0
	*($3 + [272]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $100($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $34(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $103($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [272])
	*($3 + [8]) = ($3 + [284])
	CALL $35(($3 + [8]), ($3 + [16]))
	$global$0 = ($3 + [288])
	return [1]
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9947])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [8492])
	$5 = *($1)
	CALL $73($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9993])
	*($4 + [104]) = ($4 + [96])
	*($4 + [100]) = $4
	*($4 + [96]) = $4
	CALL $70(($4 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $4, [96])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8684])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $100($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $71($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $72(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $103($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$1 = ($global$0 - [224])
	$global$0 = $1
	*(($1 + [104])) = [0]
	*($1 + [88]) = (int_64)-1
	$2 = *($0)
	*($1 + [72]) = $2
	*($1 + [80]) = $2
	*($1 + [96]) = (int_64)0
	$3 = CALL db_find_i64($2, $2, (int_64)7035938067009503232, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $60(($1 + [72]), $3)
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)($1 + [72])), [8631])
	$3 = CALL $53(($0 + [48]), (int_64)0, [8237])
	$2 = *($3 + [48])
	CALL eosio_assert(((int_64)*(($4 + [72])) == (int_64)*(($3 + [56]))), [9374])
	if ( ((int_64)*($4 + [64]) <= (int_64)$2) ){ goto $label$2 }
	$5 = ($4 + [64])
	$6 = *($0)
	$2 = (int_64)0
	$7 = (int_64)59
	$3 = [8384]
	$8 = (int_64)0
	
.LOOP $label$3:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$4 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$10 = ($10 + [-91])
	goto $label$5 
	
.LABEL $label$6
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$3 }
	*((($1 + [40]) + [8])) = [0]
	*((($1 + [56]) + [8])) = *(($5 + [8]))
	*($1 + [40]) = (int_64)0
	*($1 + [56]) = *($5)
	$3 = CALL $99([8419])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$9 }
	*($1 + [40]) = ($3 << [1])
	$10 = (($1 + [40]) | [1])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$11 = (($3 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($1 + [40]) = ($11 | [1])
	*($1 + [48]) = $10
	*($1 + [44]) = $3
	
.LABEL $label$8
	CALL memcpy($10, [8419], $3)
	
.LABEL $label$7
	*(($10 + $3)) = [0]
	$2 = (int_64)0
	$9 = (int_64)59
	$3 = [8268]
	$12 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$15 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$10 = ($10 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$7 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$11
	$3 = ($3 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$12 = ((int_64)$7 | (int_64)$12)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$10 }
	*(($1 + [8])) = *((($1 + [56]) + [8]))
	*($1) = *($1 + [56])
	CALL $9($0, $6, $8, $1, ($1 + [40]), $12)
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($1 + [48]))
	
.LABEL $label$16
	$6 = *($0)
	$2 = (int_64)6
	
.LOOP $label$17:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$17 }
	$2 = (int_64)0
	$7 = (int_64)59
	$3 = [8384]
	$8 = (int_64)0
	
.LOOP $label$18:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$19 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$10 = ($10 + [-91])
	goto $label$20 
	
.LABEL $label$21
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$19
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$18 }
	$2 = (int_64)0
	$9 = (int_64)59
	$3 = [8464]
	$12 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$2 > (uint_64)(int_64)9) ){ goto $label$27 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$10 = ($10 + [-91])
	goto $label$25 
	
.LABEL $label$27
	$7 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$23
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$12 = ((int_64)$7 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$22 }
	*(($11 = (($1 + [16]) + [8]))) = *(($5 + [8]))
	*($1 + [32]) = (int_64)1447642116
	*($1 + [112]) = $8
	*($1 + [120]) = $12
	*($1 + [16]) = *($5)
	*(($3 = CALL _Znwj([16]))) = $6
	*($3 + [8]) = (int_64)3617214756542218240
	*(($1 + [148])) = [0]
	$10 = ($3 + [16])
	*((($1 + [112]) + [24])) = $10
	*(($1 + [132])) = $10
	*($1 + [128]) = $3
	*($1 + [140 align=4]) = (int_64)0
	CALL $11(($1 + [140]), [24])
	$3 = *($1 + [140])
	$10 = (*(($1 + [144])) - $3)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [10052])
	CALL memcpy($3, ($1 + [16]), [8])
	CALL eosio_assert(((int_32)($10 + [-8]) > (int_32)[7]), [10052])
	CALL memcpy(($3 + [8]), $11, [8])
	CALL eosio_assert(((int_32)($10 + [-16]) > (int_32)[7]), [10052])
	CALL memcpy(($3 + [16]), (($1 + [16]) + [16]), [8])
	CALL $13(($1 + [208]), ($1 + [112]))
	$3 = *($1 + [208])
	CALL send_inline($3, (*($1 + [212]) - $3))
	$3 = *($1 + [208])
	if ( ($3 == 0) ){ goto $label$28 }
	*($1 + [212]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$3 = *($1 + [140])
	if ( ($3 == 0) ){ goto $label$29 }
	*(($1 + [144])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$29
	$3 = *($1 + [128])
	if ( ($3 == 0) ){ goto $label$30 }
	*(($1 + [132])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$30
	$7 = *($0)
	CALL eosio_assert([1], [9912])
	CALL eosio_assert(((int_32)*(($4 + [96])) == (int_32)($1 + [72])), [9947])
	CALL eosio_assert(((int_64)*($1 + [72]) == (int_64)CALL $fimport$3()), [8492])
	*($4 + [64]) = (int_64)0
	$2 = *($4)
	CALL eosio_assert([1], [9993])
	*($1 + [24]) = (($1 + [112]) + [96])
	*($1 + [20]) = ($1 + [112])
	*($1 + [16]) = ($1 + [112])
	CALL $70(($1 + [16]), $4)
	CALL db_update_i64(*($4 + [100]), $7, ($1 + [112]), [96])
	$3 = ($1 + [88])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$2 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$0 = *($1 + [96])
	if ( ($0 == 0) ){ goto $label$31 }
	$4 = ($1 + [100])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$10 = *($3)
	*($3) = [0]
	if ( ($10 == 0) ){ goto $label$35 }
	CALL _ZdlPv($10)
	
.LABEL $label$35
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($1 + [96]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $0
	
.LABEL $label$32
	*($4) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$global$0 = ($1 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $82(($1 + [40]))
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9947])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [8492])
	$6 = *($1)
	$7 = *(*($3))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8772])
	$8 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$3 < (int_32)[6])
	$11 = ($3 + [1])
	$3 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8827])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9993])
	$10 = $4
	$3 = ($10 + [-96])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $10
	CALL $70($5, $1)
	CALL db_update_i64(*($1 + [100]), $2, $3, [96])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [9739])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9797])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9851])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [88])))
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9947])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [8492])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$6 = *($1)
	$7 = *(*(*($3) + [4]) + [8])
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8772])
	$8 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$11 = [1]
	$12 = $9
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$9 < (int_32)[6])
	$12 = ($9 + [1])
	$9 = $12
	if ( $11 ){ goto $label$5 }
	$11 = [1]
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [8827])
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)1397703940), [9215])
	$8 = ((int_64)*($1 + [16]) + (int_64)$7)
	*($1 + [16]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9276])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9305])
	$7 = *(*($3 + [4]))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8772])
	$8 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$8 = $10
	$11 = [1]
	$12 = $9
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $10
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$9 < (int_32)[6])
	$12 = ($9 + [1])
	$9 = $12
	if ( $11 ){ goto $label$10 }
	$11 = [1]
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$11 = [0]
	
.LABEL $label$6
	CALL eosio_assert($11, [8827])
	CALL eosio_assert(((int_64)*(($1 + [40])) == (int_64)1397703940), [9215])
	$8 = ((int_64)*($1 + [32]) + (int_64)$7)
	*($1 + [32]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9276])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9305])
	$9 = *($3 + [8])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)*(($1 + [72]))), [9215])
	$8 = ((int_64)*($1 + [64]) + (int_64)*($9))
	*($1 + [64]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9276])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [9305])
	$9 = *($3 + [8])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)*(($1 + [88]))), [9215])
	$8 = ((int_64)*($1 + [80]) + (int_64)*($9))
	*($1 + [80]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9276])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [9305])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9993])
	$11 = $4
	$9 = ($11 + [-96])
	$global$0 = $9
	*($5 + [4]) = $9
	*($5) = $9
	*($5 + [8]) = $11
	CALL $70($5, $1)
	CALL db_update_i64(*($1 + [100]), $2, $9, [96])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($5 + [16])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8684])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $100($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([112])
	$6 = CALL $62($5)
	*($5 + [96]) = $0
	CALL $74(($3 + [32]), $6)
	*($5 + [100]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $64(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $103($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)0
	*($1 + [8]) = (int_64)1
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *(*(*($5) + [4]) + [8])
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8772])
	$7 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8827])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = $6
	$6 = *(*($5 + [4]))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8772])
	$7 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [8827])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = $6
	CALL eosio_assert([1], [8772])
	$7 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$7 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$15 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$10 = [0]
	
.LABEL $label$11
	CALL eosio_assert($10, [8827])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = (int_64)0
	$8 = *($5 + [8])
	*($1 + [64]) = *($8)
	*(($1 + [72])) = *(($8 + [8]))
	$8 = *($5 + [8])
	*($1 + [80]) = *($8)
	*(($1 + [88])) = *(($8 + [8]))
	$10 = $2
	$8 = ($10 + [-96])
	$global$0 = $8
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = $10
	CALL $70($3, $1)
	$7 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($4 + [8]), (int_64)7035938067009503232, *(*($0 + [8])), $7, $8, [96])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$16 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	$global$0 = ($3 + [16])
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [8772])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8827])
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [8772])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8827])
	*(($1 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [8772])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [8827])
	*(($1 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [8772])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$2 = $3
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [8827])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [8772])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	$2 = $3
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$26 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	
.LABEL $label$24
	CALL eosio_assert($6, [8827])
	return $0
	
.LABEL $label$22
	CALL eosio_assert([0], [8827])
	return $0
	
.LABEL $label$21
	CALL eosio_assert([0], [8827])
	return $0
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $102($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [18528])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $100 (int_32 $0)
{
	return CALL $101([10076], $0)
}

void .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18460])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18268]
	$3 = (((int_32)$1 * (int_32)[12]) + [18268])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $102 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10068]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10072])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10068]) = [1]
	$2 = ($2 << [16])
	*([0] + [10072]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10072])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10072]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10068]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10068]) = [1]
	$3 = ($3 << [16])
	*([0] + [10072]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10072])
	
.LABEL $label$10
	*([0] + [10072]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $86($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $86($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $82 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $103($0)
	
.LABEL $label$1
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = *(*($0))
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8772])
	$3 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $4
	$5 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8827])
	CALL eosio_assert(((int_64)*(($1 + [56])) == (int_64)1397703940), [9215])
	$3 = ((int_64)*($1 + [48]) + (int_64)$2)
	*($1 + [48]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9276])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [9305])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [8772])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8827])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8726])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [8726])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [304])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [10052])
	CALL memcpy(*($4 + [4]), ($3 + [80]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0)
	*(($3 = ($2 + [8]))) = *(($4 + [120]))
	*(($5 = ($2 + [16]))) = *(($4 + [128]))
	*(($6 = ($2 + [24]))) = *(($4 + [136]))
	*(($7 = ($2 + [32]))) = *(($4 + [144]))
	*($2) = *($4 + [112 align=1])
	$0 = *($1)
	*((($2 + [40]) + [32])) = *($7)
	*((($2 + [40]) + [24])) = *($6)
	*((($2 + [40]) + [16])) = *($5)
	*((($2 + [40]) + [8])) = *($3)
	*($2 + [40]) = *($2)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[33]), [10052])
	CALL memcpy(*($0 + [4]), ($2 + [40]), [34])
	*($0 + [4]) = (*($0 + [4]) + [34])
	*($2) = *($1)
	*($2 + [44]) = ($4 + [147])
	*($2 + [40]) = ($4 + [146])
	*($2 + [48]) = ($4 + [148])
	*($2 + [52]) = ($4 + [149])
	*($2 + [56]) = ($4 + [150])
	*($2 + [60]) = ($4 + [151])
	*($2 + [64]) = ($4 + [152])
	*($2 + [68]) = ($4 + [153])
	*($2 + [72]) = ($4 + [154])
	*($2 + [76]) = ($4 + [155])
	*($2 + [80]) = ($4 + [156])
	*($2 + [84]) = ($4 + [157])
	*($2 + [88]) = ($4 + [158])
	*($2 + [92]) = ($4 + [159])
	*($2 + [96]) = ($4 + [160])
	*($2 + [100]) = ($4 + [161])
	*($2 + [104]) = ($4 + [162])
	*($2 + [108]) = ($4 + [163])
	*($2 + [112]) = ($4 + [164])
	*($2 + [120]) = ($4 + [166])
	*($2 + [116]) = ($4 + [165])
	*($2 + [124]) = ($4 + [167])
	*($2 + [128]) = ($4 + [168])
	*($2 + [132]) = ($4 + [169])
	*($2 + [136]) = ($4 + [170])
	*($2 + [140]) = ($4 + [171])
	*($2 + [144]) = ($4 + [172])
	*($2 + [148]) = ($4 + [173])
	*($2 + [152]) = ($4 + [174])
	*($2 + [156]) = ($4 + [175])
	*($2 + [160]) = ($4 + [176])
	*($2 + [164]) = ($4 + [177])
	*($2 + [168]) = ($4 + [178])
	*($2 + [172]) = ($4 + [179])
	*($2 + [176]) = ($4 + [180])
	*($2 + [180]) = ($4 + [181])
	*($2 + [184]) = ($4 + [182])
	*($2 + [188]) = ($4 + [183])
	*($2 + [196]) = ($4 + [185])
	*($2 + [192]) = ($4 + [184])
	*($2 + [200]) = ($4 + [186])
	*($2 + [204]) = ($4 + [187])
	*($2 + [208]) = ($4 + [188])
	*($2 + [212]) = ($4 + [189])
	*($2 + [216]) = ($4 + [190])
	*($2 + [220]) = ($4 + [191])
	*($2 + [224]) = ($4 + [192])
	*($2 + [228]) = ($4 + [193])
	*($2 + [232]) = ($4 + [194])
	*($2 + [236]) = ($4 + [195])
	*($2 + [240]) = ($4 + [196])
	*($2 + [244]) = ($4 + [197])
	*($2 + [248]) = ($4 + [198])
	*($2 + [252]) = ($4 + [199])
	*($2 + [256]) = ($4 + [200])
	*($2 + [260]) = ($4 + [201])
	*($2 + [264]) = ($4 + [202])
	*($2 + [272]) = ($4 + [204])
	*($2 + [268]) = ($4 + [203])
	*($2 + [276]) = ($4 + [205])
	*($2 + [280]) = ($4 + [206])
	*($2 + [284]) = ($4 + [207])
	*($2 + [288]) = ($4 + [208])
	*($2 + [292]) = ($4 + [209])
	*($2 + [296]) = ($4 + [210])
	*($2 + [300]) = ($4 + [211])
	CALL $77(($2 + [40]), $2)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($4 + [216]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10052])
	CALL memcpy(*($0 + [4]), ($4 + [224]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [10052])
	CALL memcpy(*($1 + [4]), ($4 + [232]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((int_32)(*($1 + [8]) - $0) > (int_32)[7]), [10052])
	CALL memcpy(*($1 + [4]), ($4 + [240]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [304])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [10052])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8726])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8726])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8993])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $100($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	CALL $37($5)
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $38(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $103($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $37 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [8847])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8899])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [8847])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8899])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8899])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8899])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $100($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10064])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $100($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [9323])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([80])) + [56]) = (int_64)1398362884
	*($5 + [48]) = (int_64)0
	CALL eosio_assert([1], [8847])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8899])
	*($5 + [64]) = $1
	CALL $42(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [68])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $4(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9020])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9020])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $30 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = $1
	$3 = ($0 + [48])
	$5 = *(($0 + [76]))
	$4 = *(($0 + [72]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( (int_64)(*($7) == 0) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8939])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [56])), (int_64)7035938067002163200, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $2($3, $6)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8939])
	
.LABEL $label$2
	$1 = *($0)
	*($2 + [8]) = ($2 + [24])
	CALL eosio_assert([1], [9433])
	CALL $43($3, $7, $1, ($2 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($2 + [16]) = ($2 + [24])
	CALL $44(($2 + [8]), $3, $1, ($2 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9519])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9599])
	$6 = *($1)
	$7 = *(*($3))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8847])
	$8 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$3 < (int_32)[6])
	$11 = ($3 + [1])
	$3 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8899])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9680])
	$10 = $4
	$3 = ($10 + [-64])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($10 + [-2])
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = ($1 + [8])
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [44])
	*($5 + [44]) = ($1 + [48])
	CALL $3(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $3, [62])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}