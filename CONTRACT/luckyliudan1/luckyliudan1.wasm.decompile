(data (i32.const 8192) "the room doesn\'t exist\00")
(data (i32.const 8215) "invalid quantity\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8318) "EOS\00")
(data (i32.const 8322) "only EOS token allowed\00")
(data (i32.const 8345) "must deposit positive quantity\00")
(data (i32.const 8376) "this room doesn\'t support single player game\00")
(data (i32.const 8421) "the specified room can\'t be found\00")
(data (i32.const 8455) "this room doesn\'t support pool game\00")
(data (i32.const 8491) "must buy round tickets\00")
(data (i32.const 8514) "game not exist\00")
(data (i32.const 8529) "the game has already ended\00")
(data (i32.const 8556) "active\00")
(data (i32.const 8563) "eosio.token\00")
(data (i32.const 8575) "transfer\00")
(data (i32.const 8584) "room type can only be 0(for single play mode) or 1(for pool mode)\00")
(data (i32.const 8650) "only manager can create room\00")
(data (i32.const 8679) "{\"room_id\": %}\00")
(data (i32.const 8694) "game has already resolved\00")
(data (i32.const 8720) "game hasn\'t ended\00")
(data (i32.const 8738) "game doesn\'t contain enough players\00")
(data (i32.const 8774) "{\"winner_index\": %}\00")
(data (i32.const 8794) "{\"game_id2\": %}\00")
(data (i32.const 8810) "{\"winner.key\": %}\00")
(data (i32.const 8828) "{\"winner_id\": %}\00")
(data (i32.const 8845) "{\"player_id1\": %}\00")
(data (i32.const 8863) "{\"game_id\": %}\00")
(data (i32.const 8878) "only manager can add new manager\00")
(data (i32.const 8911) "only empty contract can be inited\00")
(data (i32.const 8945) "string is too long to be a valid symbol_code\00")
(data (i32.const 8990) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9043) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9092) "invalid symbol name\00")
(data (i32.const 9112) "string is too long to be a valid name\00")
(data (i32.const 9150) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9217) "character is not in allowed character set for names\00")
(data (i32.const 9272) "<$\00\00")
(data (i32.const 9276) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9309) "write\00")
(data (i32.const 9315) "{\"index_key\": %}\00")
(data (i32.const 9332) "{\"lower_bound\": %}\00")
(data (i32.const 9351) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9402) "error reading iterator\00")
(data (i32.const 9425) "read\00")
(data (i32.const 9430) "{\"upper_bound\": %}\00")
(data (i32.const 9449) "cannot pass end iterator to modify\00")
(data (i32.const 9484) "object passed to modify is not in multi_index\00")
(data (i32.const 9530) "cannot modify objects in table of another contract\00")
(data (i32.const 9581) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9640) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9692) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9746) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9794) "cannot create objects in table of another contract\00")
(data (i32.const 9845) "{\"ticket_index\": %}\00")
(data (i32.const 9865) "{\"player_id2\": %}\00")
(import "env" "sha256" (func $fimport$0 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$1 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$2 (result i32)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "read_transaction" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "read_action_data" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$7 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$9 (result i64)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "memcpy" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$12 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$15 (param i32 i32)))
(import "env" "printui" (func $fimport$16 (param i64)))
(import "env" "prints" (func $fimport$17 (param i32)))
(import "env" "send_deferred" (func $fimport$18 (param i32 i64 i32 i32 i32)))
(import "env" "printui128" (func $fimport$19 (param i32)))
(import "env" "db_idx64_store" (func $fimport$20 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$21 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "db_idx128_upperbound" (func $fimport$23 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$25 (param i64 i64 i64) (result i32)))
(import "env" "db_idx128_store" (func $fimport$26 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "abort" (func $fimport$27))
(import "env" "set_blockchain_parameters_packed" (func $fimport$28 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$30 (param i32 i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $76))
(export "_Znwj" (func $74))
(export "_Znaj" (func $75))
(export "_ZdaPv" (func $77))
(export "_ZnwjSt11align_val_t" (func $78))
(export "_ZnajSt11align_val_t" (func $79))
(export "_ZdlPvSt11align_val_t" (func $80))
(export "_ZdaPvSt11align_val_t" (func $81))
(table $0 11 11 anyfunc)
(elem (i32.const 1) $2 $4 $6 $8 $9 $11 $12 $14 $16 $18)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18300))
(global $global$2 i32 (i32.const 18300))


int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9896]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9900])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9896]) = [1]
	$2 = ($2 << [16])
	*([0] + [9900]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9900])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9900]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9896]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9896]) = [1]
	$3 = ($3 << [16])
	*([0] + [9900]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9900])
	
.LABEL $label$10
	*([0] + [9900]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18288])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18096]
	$3 = (((int_32)$1 * (int_32)[12]) + [18096])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9746])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035924439720001536)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9692])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9692])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $21(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $63($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $45($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $64($2, $1)
	CALL $66(CALL $65(CALL $65($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9746])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3617168760277827584)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9692])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9692])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $40(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9402])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $88($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $71(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $91($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9309])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $72(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $45($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $47(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $82($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9112])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9217])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9150])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9217])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = [0]
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	*($4 + [16]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)-4816283142123945984, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $24(($4 + [8]), $8)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($4 + [8])), [9351])
	
.LABEL $label$1
	$9 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($9, [8192])
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$6 = $2
	$5 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$6 = $2
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $5 ){ goto $label$6 }
	$5 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [8215])
	$8 = CALL $84([8318])
	if ( ($8 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8945])
	goto $label$9 
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$6 = (int_64)0
	
.LOOP $label$11:
	$5 = *(($8 + [8317]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8990])
	
.LABEL $label$12
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$11 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$6 = (int_64)4
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$6), [8322])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8345])
	CALL $23($0, $1, *($0), *($3))
	$2 = *($0)
	CALL eosio_assert($9, [9449])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($4 + [8])), [9484])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$9()), [9530])
	*($7 + [32]) = ((int_64)*($7 + [32]) + (int_64)*($3))
	$6 = *($7)
	CALL eosio_assert([1], [9581])
	*($4 + [104]) = (($4 + [48]) + [40])
	*($4 + [100]) = ($4 + [48])
	*($4 + [96]) = ($4 + [48])
	*($4 + [112]) = ($4 + [96])
	*($4 + [124]) = ($7 + [8])
	*($4 + [120]) = $7
	*($4 + [128]) = ($7 + [16])
	*($4 + [132]) = ($7 + [24])
	*($4 + [136]) = ($7 + [32])
	CALL $30(($4 + [120]), ($4 + [112]))
	CALL db_update_i64(*($7 + [44]), $2, ($4 + [48]), [40])
	$8 = (($4 + [8]) + [16])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$13 }
	*($8) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$10 = *($4 + [32])
	if ( ($10 == 0) ){ goto $label$14 }
	$7 = ($4 + [36])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$16 }
	
.LOOP $label$17:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$17 }
	$8 = *(($4 + [32]))
	goto $label$15 
	
.LABEL $label$16
	$8 = $10
	
.LABEL $label$15
	*($7) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$global$0 = ($4 + [144])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$0 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $28(($3 + [8]), $5)
	CALL eosio_assert(((int_32)*($0 + [72]) == (int_32)($3 + [8])), [9351])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [8878])
	CALL eosio_assert((*($0 + [48]) == 0), [8878])
	$5 = *(($3 + [36]))
	$6 = *(($3 + [32]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$0 = ($5 + [-24])
	$7 = *($0)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$8 }
	$5 = $0
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)($3 + [8])), [9351])
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$0 = CALL db_find_i64(*($3 + [8]), *(($3 + [16])), (int_64)-6030912142679474176, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $28(($3 + [8]), $0)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)($3 + [8])), [9351])
	
.LABEL $label$6
	CALL eosio_assert([1], [9449])
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)($3 + [8])), [9484])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$9()), [9530])
	*($7 + [48]) = [0]
	$2 = *($7)
	CALL eosio_assert([1], [9581])
	*($3 + [120]) = (($3 + [48]) + [60])
	*($3 + [116]) = ($3 + [48])
	*($3 + [112]) = ($3 + [48])
	*($3 + [128]) = ($3 + [112])
	*($3 + [140]) = ($7 + [16])
	*($3 + [136]) = $7
	*($3 + [144]) = ($7 + [48])
	*($3 + [148]) = ($7 + [56])
	*($3 + [152]) = ($7 + [64])
	CALL $33(($3 + [136]), ($3 + [128]))
	CALL db_update_i64(*($7 + [76]), $1, ($3 + [48]), [60])
	$0 = (($3 + [8]) + [16])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$4 }
	*($0) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$7 = *($3 + [32])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$9()), [9794])
	*(($0 = CALL _Znwj([96])) + [72]) = ($3 + [8])
	*($0 + [48]) = [0]
	*($0) = $2
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($3 + [120]) = (($3 + [48]) + [60])
	*($3 + [116]) = ($3 + [48])
	*($3 + [112]) = ($3 + [48])
	*($3 + [128]) = ($3 + [112])
	*($3 + [140]) = ($0 + [16])
	*($3 + [136]) = $0
	*($3 + [144]) = ($0 + [48])
	*($3 + [148]) = ($0 + [56])
	*($3 + [152]) = ($0 + [64])
	CALL $33(($3 + [136]), ($3 + [128]))
	$2 = *($0)
	$7 = CALL db_store_i64(*(($3 + [16])), (int_64)-6030912142679474176, $1, $2, ($3 + [48]), [60])
	*($0 + [76]) = $7
	$5 = (($3 + [8]) + [16])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$10 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($3 + [136]) = $0
	$2 = *($0)
	*($3 + [48]) = $2
	*($3 + [112]) = $7
	$6 = ($3 + [36])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($3 + [40]))) ){ goto $label$12 }
	*($5 + [8]) = $2
	*($5 + [16]) = $7
	*($3 + [136]) = [0]
	*($5) = $0
	*($6) = ($5 + [24])
	$0 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( $0 ){ goto $label$11 }
	goto $label$4 
	
.LABEL $label$12
	CALL $34(($3 + [32]), ($3 + [136]), ($3 + [48]), ($3 + [112]))
	$0 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($3 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($3 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $7
	
.LABEL $label$13
	*($6) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [160])
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*($3 + [72]) = $2
	CALL require_auth($1)
	$4 = [0]
	*(($3 + [64])) = [0]
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	$2 = *($0)
	*($3 + [32]) = $2
	*($3 + [40]) = $2
	$5 = CALL db_find_i64($2, $2, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $28(($3 + [32]), $5)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($3 + [32])), [9351])
	
.LABEL $label$1
	CALL sha256(($3 + [72]), [8], $3)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL eosio_assert([1], [9449])
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($3 + [32])), [9484])
	CALL eosio_assert(((int_64)*($3 + [32]) == (int_64)CALL $fimport$9()), [9530])
	*($4 + [16]) = *($3)
	*(($4 + [24])) = *($3 + [8])
	*(($4 + [32])) = *(($3 + [16]))
	*(($4 + [40])) = *(($3 + [24]))
	$2 = *($4)
	CALL eosio_assert([1], [9581])
	*($3 + [152]) = (($3 + [80]) + [60])
	*($3 + [148]) = ($3 + [80])
	*($3 + [144]) = ($3 + [80])
	*($3 + [160]) = ($3 + [144])
	*($3 + [172]) = ($4 + [16])
	*($3 + [168]) = $4
	*($3 + [176]) = ($4 + [48])
	*($3 + [180]) = ($4 + [56])
	*($3 + [184]) = ($4 + [64])
	CALL $33(($3 + [168]), ($3 + [160]))
	CALL db_update_i64(*($4 + [76]), $1, ($3 + [80]), [60])
	$4 = (($3 + [32]) + [16])
	if ( (uint_64)($2 <= *($4)) ){ goto $label$4 }
	*($4) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$5 = *($3 + [56])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = *($0)
	CALL eosio_assert(((int_64)*($3 + [32]) == (int_64)CALL $fimport$9()), [9794])
	*(($4 = CALL _Znwj([96])) + [72]) = ($3 + [32])
	*($4) = $1
	*($4 + [48]) = [1]
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [16]) = *($3)
	*(($4 + [24])) = *($3 + [8])
	*(($4 + [32])) = *(($3 + [16]))
	*(($4 + [40])) = *(($3 + [24]))
	*($3 + [152]) = (($3 + [80]) + [60])
	*($3 + [148]) = ($3 + [80])
	*($3 + [144]) = ($3 + [80])
	*($3 + [160]) = ($3 + [144])
	*($3 + [172]) = ($4 + [16])
	*($3 + [168]) = $4
	*($3 + [176]) = ($4 + [48])
	*($3 + [180]) = ($4 + [56])
	*($3 + [184]) = ($4 + [64])
	CALL $33(($3 + [168]), ($3 + [160]))
	$2 = *($4)
	$5 = CALL db_store_i64(*((($3 + [32]) + [8])), (int_64)-6030912142679474176, $6, $2, ($3 + [80]), [60])
	*($4 + [76]) = $5
	$0 = (($3 + [32]) + [16])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$6 }
	*($0) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($3 + [168]) = $4
	$2 = *($4)
	*($3 + [80]) = $2
	*($3 + [144]) = $5
	$7 = ($3 + [60])
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)*((($3 + [32]) + [32]))) ){ goto $label$8 }
	*($0 + [8]) = $2
	*($0 + [16]) = $5
	*($3 + [168]) = [0]
	*($0) = $4
	*($7) = ($0 + [24])
	$4 = *($3 + [168])
	*($3 + [168]) = [0]
	if ( $4 ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$8
	CALL $34(($3 + [56]), ($3 + [168]), ($3 + [80]), ($3 + [144]))
	$4 = *($3 + [168])
	*($3 + [168]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$5 = *($3 + [56])
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($3 + [60])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL _ZdlPv($0)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($3 + [56]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $5
	
.LABEL $label$9
	*($7) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$global$0 = ($3 + [192])
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9425])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9425])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $91($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $4 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [160])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$0 = CALL db_lowerbound_i64($3, $3, (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	CALL $28(($2 + [8]), $0)
	$0 = [0]
	goto $label$1 
	
.LABEL $label$2
	$0 = [1]
	
.LABEL $label$1
	CALL eosio_assert($0, [8911])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$9()), [9794])
	*(($0 = CALL _Znwj([96])) + [72]) = ($2 + [8])
	*($0 + [48]) = [0]
	*($0) = $1
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($2 + [120]) = (($2 + [48]) + [60])
	*($2 + [116]) = ($2 + [48])
	*($2 + [112]) = ($2 + [48])
	*($2 + [128]) = ($2 + [112])
	*($2 + [140]) = ($0 + [16])
	*($2 + [136]) = $0
	*($2 + [144]) = ($0 + [48])
	*($2 + [148]) = ($0 + [56])
	*($2 + [152]) = ($0 + [64])
	CALL $33(($2 + [136]), ($2 + [128]))
	$3 = *($0)
	$4 = CALL db_store_i64(*(($2 + [16])), (int_64)-6030912142679474176, $1, $3, ($2 + [48]), [60])
	*($0 + [76]) = $4
	$5 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$3 }
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($2 + [136]) = $0
	$3 = *($0)
	*($2 + [48]) = $3
	*($2 + [112]) = $4
	$6 = ($2 + [36])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($2 + [40]))) ){ goto $label$6 }
	*($5 + [8]) = $3
	*($5 + [16]) = $4
	*($2 + [136]) = [0]
	*($5) = $0
	*($6) = ($5 + [24])
	$0 = *($2 + [136])
	*($2 + [136]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $34(($2 + [32]), ($2 + [136]), ($2 + [48]), ($2 + [112]))
	$0 = *($2 + [136])
	*($2 + [136]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$7 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $4
	
.LABEL $label$8
	*($6) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$global$0 = ($2 + [160])
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9425])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $91($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [128])
	$global$0 = $4
	*((($4 + [88]) + [32])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$5 = *($0)
	*($4 + [88]) = $5
	*($4 + [96]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)-4816283142123945984, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $24(($4 + [88]), $7)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($4 + [88])), [9351])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8421])
	CALL eosio_assert(((int_64)*($6 + [24]) == (int_64)1), [8455])
	$8 = *($6 + [16])
	*((($4 + [48]) + [32])) = [0]
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	$5 = *($0)
	*($4 + [48]) = $5
	*($4 + [56]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)7035924439720001536, $8)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $21(($4 + [48]), $6)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($4 + [48])), [9351])
	if ( ((int_64)*($6 + [40]) == (int_64)-1) ){ goto $label$4 }
	CALL $36($0, $2, (int_64)600000000, $4)
	CALL $11($0, $1, *($4), $3)
	$3 = *($4 + [72])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL $36($0, $2, (int_64)600000000, $4)
	CALL $11($0, $1, *($4), $3)
	$3 = *($4 + [72])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (uint_64)(CALL current_time() <= ((int_64)*($6 + [32]) + (int_64)*($6 + [24]))) ){ goto $label$6 }
	if ( (CALL $22($0, $8) == 0) ){ goto $label$6 }
	CALL $16($0, $8)
	CALL $36($0, $2, (int_64)600000000, $4)
	CALL $11($0, $1, *($4), $3)
	$3 = *($4 + [72])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*(($4 + [40])) = *(($6 + [40]))
	*(($4 + [32])) = *(($6 + [32]))
	*(($4 + [24])) = *(($6 + [24]))
	*(($4 + [16])) = *(($6 + [16]))
	*(($4 + [8])) = *(($6 + [8]))
	*($4) = *($6)
	CALL $11($0, $1, *($4), $3)
	$3 = *($4 + [72])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($4 + [76])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($4 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $3
	
.LABEL $label$7
	*($7) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$3 = *($4 + [112])
	if ( ($3 == 0) ){ goto $label$11 }
	$7 = ($4 + [116])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	CALL _ZdlPv($6)
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$14 }
	$0 = *(($4 + [112]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $3
	
.LABEL $label$12
	*($7) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$global$0 = ($4 + [128])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [112]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $20(($4 + [16]), ($4 + [112]))
	*(($9 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($3 = (($4 + [96]) + [8]))) = *($9)
	*($4 + [96]) = *($4)
	$10 = *($3)
	*(($9 = (($4 + [112]) + [8]))) = $10
	*((($4 + [16]) + [24])) = $10
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	*($3) = *($8)
	*($4 + [96]) = *($4 + [80])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	*($9) = *($3)
	*($4 + [112]) = *($4 + [96])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [112])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $91($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)4520918368170016767) ){ goto $label$10 }
	if ( ((int_64)$2 <= (int_64)3626280937716039679) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)3626280937716039680) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)4520488125973135360) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)4520790926951972864) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [1]
	*($3 + [56]) = *($3 + [96])
	CALL $3($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 <= (int_64)5031766159042707455) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)5031766159042707456) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)5031766165184348160) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [2]
	*($3 + [48]) = *($3 + [104])
	CALL $5($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-4994130327958978560) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4417040397843300352) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [3]
	*($3 + [32]) = *($3 + [120])
	CALL $7($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)4520918368170016768) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)4849662300613017600) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [4]
	*($3 + [72]) = *($3 + [80])
	CALL $3($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [116]) = [0]
	*($3 + [112]) = [5]
	*($3 + [40]) = *($3 + [112])
	CALL $10($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [156]) = [0]
	*($3 + [152]) = [6]
	*($3) = *($3 + [152])
	CALL $3($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	*($3 + [132]) = [0]
	*($3 + [128]) = [7]
	*($3 + [24]) = *($3 + [128])
	CALL $13($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [148]) = [0]
	*($3 + [144]) = [8]
	*($3 + [8]) = *($3 + [144])
	CALL $15($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [140]) = [0]
	*($3 + [136]) = [9]
	*($3 + [16]) = *($3 + [136])
	CALL $17($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [92]) = [0]
	*($3 + [88]) = [10]
	*($3 + [64]) = *($3 + [88])
	CALL $19($1, $1, ($3 + [64]))
	
.LABEL $label$1
	CALL $83([0])
	$global$0 = ($3 + [160])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert((uint_64)($3 <= (int_64)2), [8584])
	CALL require_auth($1)
	*((($4 + [40]) + [32])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$5 = *($0)
	*($4 + [40]) = $5
	*($4 + [48]) = $5
	$6 = CALL $28(($4 + [40]), CALL $fimport$8($5, $5, (int_64)-6030912142679474176, $1))
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)($4 + [40])), [9351])
	CALL eosio_assert((*($6 + [48]) == 0), [8650])
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$5 = *($0)
	*($4) = $5
	*($4 + [8]) = $5
	$6 = CALL db_lowerbound_i64($5, $5, (int_64)-4816283142123945984, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $24($4, $6)
	*($4 + [84]) = [0]
	*($4 + [80]) = $4
	$5 = *(*(CALL $29(($4 + [80])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$7 = (uint_64)($5 <= (int_64)-2)
	goto $label$1 
	
.LABEL $label$2
	$7 = [1]
	$5 = (int_64)0
	
.LABEL $label$1
	*(($6 = ($4 + [16]))) = $5
	CALL eosio_assert($7, [9640])
	$1 = *($6)
	$8 = *($0)
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$9()), [9794])
	*(($0 = CALL _Znwj([56])) + [40]) = $4
	*($0 + [8]) = $2
	*($0) = $1
	*($0 + [24]) = $3
	*($0 + [32]) = (int_64)0
	*($4 + [136]) = (($4 + [80]) + [40])
	*($4 + [132]) = ($4 + [80])
	*($4 + [128]) = ($4 + [80])
	*($4 + [144]) = ($4 + [128])
	*($4 + [156]) = ($0 + [8])
	*($4 + [152]) = $0
	*($4 + [160]) = ($0 + [16])
	*($4 + [164]) = ($0 + [24])
	*($4 + [168]) = ($0 + [32])
	CALL $30(($4 + [152]), ($4 + [144]))
	$5 = *($0)
	$7 = CALL db_store_i64(*(($4 + [8])), (int_64)-4816283142123945984, $8, $5, ($4 + [80]), [40])
	*($0 + [44]) = $7
	if ( (uint_64)($5 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($4 + [152]) = $0
	$5 = *($0)
	*($4 + [80]) = $5
	*($4 + [128]) = $7
	$9 = ($4 + [28])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*(($4 + [32]))) ){ goto $label$6 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($4 + [152]) = [0]
	*($6) = $0
	*($9) = ($6 + [24])
	$0 = *($4 + [152])
	*($4 + [152]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $31(($4 + [24]), ($4 + [152]), ($4 + [80]), ($4 + [128]))
	$0 = *($4 + [152])
	*($4 + [152]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$0 = [8679]
	$6 = *([8679])
	if ( ($6 == 0) ){ goto $label$7 }
	
.LOOP $label$9:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$8 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$7 }
	goto $label$9 
	
.LABEL $label$8
	CALL printui($1)
	CALL prints(($0 + [1]))
	
.LABEL $label$7
	$7 = *($4 + [24])
	if ( ($7 == 0) ){ goto $label$10 }
	$9 = ($4 + [28])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	CALL _ZdlPv($6)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($4 + [24]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $7
	
.LABEL $label$11
	*($9) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$15 }
	$9 = ($4 + [68])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$19 }
	CALL _ZdlPv($6)
	
.LABEL $label$19
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($4 + [64]))
	goto $label$16 
	
.LABEL $label$17
	$0 = $7
	
.LABEL $label$16
	*($9) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$15
	$global$0 = ($4 + [176])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9425])
	CALL memcpy(($4 + [40]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9425])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9425])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $91($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [416])
	$global$0 = $2
	$3 = [0]
	*(($2 + [296])) = [0]
	*($2 + [280]) = (int_64)-1
	*($2 + [288]) = (int_64)0
	$4 = *($0)
	*($2 + [264]) = $4
	*($2 + [272]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)7035924439720001536, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $21(($2 + [264]), $5)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)($2 + [264])), [9351])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($3 + [40]) == (int_64)-1), [8694])
	CALL eosio_assert(((uint_64)CALL $fimport$3() >= (uint_64)((int_64)*($3 + [32]) + (int_64)*($3 + [24]))), [8720])
	CALL eosio_assert(CALL $22($0, $1), [8738])
	$6 = *($3 + [16])
	if ( (int_64)($6 == 0) ){ goto $label$6 }
	*($2 + [240]) = [0]
	CALL sha256(($2 + [128]), [112], ($2 + [304]))
	*($2 + [224]) = ((int_64)*($2 + [224]) + (int_64)1)
	$7 = ((int_64)((uint_64)*($2 + [312]) % (uint_64)$6) + (int_64)1)
	$5 = [8774]
	$8 = *([8774])
	if ( ($8 == 0) ){ goto $label$7 }
	
.LOOP $label$9:
	if ( ((int_32)$8 == (int_32)[37]) ){ goto $label$8 }
	CALL prints_l($5, [1])
	$5 = ($5 + [1])
	$8 = *($5)
	if ( ($8 == 0) ){ goto $label$7 }
	goto $label$9 
	
.LABEL $label$8
	CALL printui($7)
	CALL prints(($5 + [1]))
	
.LABEL $label$7
	*($2 + [112]) = (int_64)0
	$9 = [0]
	*((($2 + [304]) + [32])) = [0]
	*($2 + [320]) = (int_64)-1
	*($2 + [328]) = (int_64)0
	*($2 + [340]) = [0]
	$4 = *($0)
	*($2 + [304]) = $4
	*($2 + [312]) = $4
	CALL $32(($2 + [40]), ($2 + [304]), $1, $7)
	$5 = *($2 + [44])
	*((($2 + [80]) + [16])) = *(($5 + [16]))
	*((($2 + [80]) + [24])) = *(($5 + [24]))
	*($2 + [80]) = *($5)
	*($2 + [88]) = *(($5 + [8]))
	*($2 + [112]) = *(($5 + [32]))
	$10 = *($2 + [328])
	if ( ($10 == 0) ){ goto $label$3 }
	$11 = ($2 + [332])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$5 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	CALL _ZdlPv($8)
	
.LABEL $label$11
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($2 + [328]))
	goto $label$4 
	
.LABEL $label$6
	$4 = (int_64)-2
	goto $label$2 
	
.LABEL $label$5
	$5 = $10
	
.LABEL $label$4
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$12 = *($2 + [80])
	*((($2 + [40]) + [32])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	$4 = *($0)
	*($2 + [40]) = $4
	*($2 + [48]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-4816283142123945984, *($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$9 = CALL $24(($2 + [40]), $5)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($2 + [40])), [9351])
	
.LABEL $label$12
	$4 = (int_64)-3
	$14 = *($0)
	$13 = *(($2 + [112]))
	if ( ((int_64)$13 == (int_64)$14) ){ goto $label$13 }
	$4 = ((int_64)( (int_64)99 ? (int_64)95 : (int_64)(*($9 + [24]) == 0) ) * (int_64)$6)
	if ( ((uint_64)*($9 + [32]) >= (uint_64)$4) ){ goto $label$18 }
	*(($2 + [32])) = [0]
	*($2 + [8]) = $14
	*($2) = $14
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$5 = CALL db_find_i64($14, $14, (int_64)-6030912142679474176, $13)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$17 }
	$5 = CALL $28($2, $5)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$2), [9351])
	$14 = *($0)
	CALL eosio_assert([1], [9449])
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$2), [9484])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$9()), [9530])
	*($5 + [64]) = ((int_64)*($5 + [64]) + (int_64)$4)
	$6 = *($5)
	CALL eosio_assert([1], [9581])
	*($2 + [376]) = (($2 + [304]) + [60])
	*($2 + [372]) = ($2 + [304])
	*($2 + [368]) = ($2 + [304])
	*($2 + [384]) = ($2 + [368])
	*($2 + [396]) = ($5 + [16])
	*($2 + [392]) = $5
	*($2 + [400]) = ($5 + [48])
	*($2 + [404]) = ($5 + [56])
	*($2 + [408]) = ($5 + [64])
	CALL $33(($2 + [392]), ($2 + [384]))
	CALL db_update_i64(*($5 + [76]), $14, ($2 + [304]), [60])
	$5 = ($2 + [16])
	if ( (uint_64)($6 <= *($5)) ){ goto $label$16 }
	*($5) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$10 = *($2 + [24])
	if ( $10 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	CALL $23($0, $14, $13, $4)
	$14 = *($0)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9449])
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($2 + [40])), [9484])
	CALL eosio_assert(((int_64)*($2 + [40]) == (int_64)CALL $fimport$9()), [9530])
	*($9 + [32]) = (int_64))(*($9 + [32]) - $4)
	$6 = *($9)
	CALL eosio_assert([1], [9581])
	*($2 + [400]) = (($2 + [304]) + [40])
	*($2 + [396]) = ($2 + [304])
	*($2 + [392]) = ($2 + [304])
	*($2 + [368]) = ($2 + [392])
	*($2 + [4]) = ($9 + [8])
	*($2) = $9
	*($2 + [8]) = ($9 + [16])
	*($2 + [12]) = ($9 + [24])
	*($2 + [16]) = ($9 + [32])
	CALL $30($2, ($2 + [368]))
	CALL db_update_i64(*($9 + [44]), $14, ($2 + [304]), [40])
	$5 = (($2 + [40]) + [16])
	if ( (uint_64)($6 <= *($5)) ){ goto $label$14 }
	*($5) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	goto $label$14 
	
.LABEL $label$17
	$14 = *($0)
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$9()), [9794])
	*(($5 = CALL _Znwj([96])) + [72]) = $2
	*($5 + [48]) = [1]
	*($5) = *((($2 + [80]) + [32]))
	$6 = CALL current_time()
	*($5 + [64]) = $4
	*($5 + [56]) = $6
	*($2 + [376]) = (($2 + [304]) + [60])
	*($2 + [372]) = ($2 + [304])
	*($2 + [368]) = ($2 + [304])
	*($2 + [384]) = ($2 + [368])
	*($2 + [396]) = ($5 + [16])
	*($2 + [392]) = $5
	*($2 + [400]) = ($5 + [48])
	*($2 + [404]) = ($5 + [56])
	*($2 + [408]) = ($5 + [64])
	CALL $33(($2 + [392]), ($2 + [384]))
	$6 = *($5)
	$10 = CALL db_store_i64(*(($2 + [8])), (int_64)-6030912142679474176, $14, $6, ($2 + [304]), [60])
	*($5 + [76]) = $10
	$8 = ($2 + [16])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$19 }
	*($8) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($2 + [392]) = $5
	$6 = *($5)
	*($2 + [304]) = $6
	*($2 + [368]) = $10
	$9 = ($2 + [28])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($2 + [32]))) ){ goto $label$21 }
	*($8 + [8]) = $6
	*($8 + [16]) = $10
	*($2 + [392]) = [0]
	*($8) = $5
	*($9) = ($8 + [24])
	$5 = *($2 + [392])
	*($2 + [392]) = [0]
	if ( $5 ){ goto $label$20 }
	goto $label$16 
	
.LABEL $label$21
	CALL $34(($2 + [24]), ($2 + [392]), ($2 + [304]), ($2 + [368]))
	$5 = *($2 + [392])
	*($2 + [392]) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	
.LABEL $label$20
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$10 = *($2 + [24])
	if ( ($10 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$9 = ($2 + [28])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	CALL _ZdlPv($8)
	
.LABEL $label$25
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($2 + [24]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $10
	
.LABEL $label$22
	*($9) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$5 = [8794]
	$8 = *([8794])
	if ( ($8 == 0) ){ goto $label$26 }
	
.LOOP $label$28:
	if ( ((int_32)$8 == (int_32)[37]) ){ goto $label$27 }
	CALL prints_l($5, [1])
	$5 = ($5 + [1])
	$8 = *($5)
	if ( ($8 == 0) ){ goto $label$26 }
	goto $label$28 
	
.LABEL $label$27
	CALL printui($1)
	CALL prints(($5 + [1]))
	
.LABEL $label$26
	$5 = [8810]
	$1 = *($2 + [80])
	$8 = *([8810])
	if ( ($8 == 0) ){ goto $label$29 }
	
.LOOP $label$31:
	if ( ((int_32)$8 == (int_32)[37]) ){ goto $label$30 }
	CALL prints_l($5, [1])
	$5 = ($5 + [1])
	$8 = *($5)
	if ( ($8 == 0) ){ goto $label$29 }
	goto $label$31 
	
.LABEL $label$30
	CALL printui($1)
	CALL prints(($5 + [1]))
	
.LABEL $label$29
	$5 = [8828]
	$8 = *([8828])
	if ( ($8 == 0) ){ goto $label$32 }
	
.LOOP $label$34:
	if ( ((int_32)$8 == (int_32)[37]) ){ goto $label$33 }
	CALL prints_l($5, [1])
	$5 = ($5 + [1])
	$8 = *($5)
	if ( ($8 == 0) ){ goto $label$32 }
	goto $label$34 
	
.LABEL $label$33
	CALL printui($12)
	CALL prints(($5 + [1]))
	
.LABEL $label$32
	CALL $35($0, ($2 + [80]), CALL $fimport$3(), $7, $4, *($0))
	$4 = $12
	
.LABEL $label$13
	$10 = *($2 + [64])
	if ( ($10 == 0) ){ goto $label$2 }
	$9 = ($2 + [68])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$36 }
	
.LOOP $label$37:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$38 }
	CALL _ZdlPv($8)
	
.LABEL $label$38
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$37 }
	$5 = *(($2 + [64]))
	goto $label$35 
	
.LABEL $label$36
	$5 = $10
	
.LABEL $label$35
	*($9) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$1 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9449])
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)($2 + [264])), [9484])
	CALL eosio_assert(((int_64)*($2 + [264]) == (int_64)CALL $fimport$9()), [9530])
	*($3 + [40]) = $4
	$4 = *($3)
	CALL eosio_assert([1], [9581])
	*($2 + [88]) = (($2 + [128]) + [48])
	*($2 + [84]) = ($2 + [128])
	*($2 + [80]) = ($2 + [128])
	*($2 + [40]) = ($2 + [80])
	*($2 + [308]) = ($3 + [8])
	*($2 + [304]) = $3
	*($2 + [312]) = ($3 + [16])
	*($2 + [316]) = ($3 + [24])
	*($2 + [320]) = ($3 + [32])
	*($2 + [324]) = ($3 + [40])
	CALL $27(($2 + [304]), ($2 + [40]))
	CALL db_update_i64(*($3 + [52]), $1, ($2 + [128]), [48])
	$5 = (($2 + [264]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$39 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$39
	$3 = *($2 + [288])
	if ( ($3 == 0) ){ goto $label$40 }
	$10 = ($2 + [292])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$42 }
	
.LOOP $label$43:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$44 }
	CALL _ZdlPv($8)
	
.LABEL $label$44
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$43 }
	$5 = *(($2 + [288]))
	goto $label$41 
	
.LABEL $label$42
	$5 = $3
	
.LABEL $label$41
	*($10) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$40
	$global$0 = ($2 + [416])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9425])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $91($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9425])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9425])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $91($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [176])
	$global$0 = $4
	$5 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$5 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8215])
	$7 = CALL $84([8318])
	if ( ($7 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8945])
	goto $label$8 
	
.LABEL $label$9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = (int_64)0
	
.LOOP $label$10:
	$5 = *(($7 + [8317]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8990])
	
.LABEL $label$11
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$10 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$6 
	
.LABEL $label$7
	$6 = (int_64)4
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$6), [8322])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8345])
	$8 = *($3)
	$6 = ((uint_64)$8 / (uint_64)(int_64)100)
	CALL eosio_assert(((int_64)((int_64)$6 * (int_64)100) == (int_64)$8), [8491])
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$8 = *($0)
	*($4 + [40]) = $8
	*($4 + [48]) = $8
	$7 = [0]
	$5 = CALL db_find_i64($8, $8, (int_64)7035924439720001536, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $21(($4 + [40]), $5)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($4 + [40])), [9351])
	
.LABEL $label$12
	$9 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($9, [8514])
	$5 = [1]
	if ( (uint_64)(CALL current_time() <= ((int_64)*($7 + [32]) + (int_64)*($7 + [24]))) ){ goto $label$13 }
	$5 = ((int_32)CALL $22($0, $2) ^ (int_32)[1])
	
.LABEL $label$13
	CALL eosio_assert($5, [8529])
	$2 = ((int_64)$6 * (int_64)95)
	CALL $23($0, $1, *($0), $2)
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$8 = *($0)
	*($4) = $8
	*($4 + [8]) = $8
	$5 = CALL $24($4, CALL $fimport$8($8, $8, (int_64)-4816283142123945984, *($7 + [8])))
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$4), [9351])
	CALL $23($0, $1, *($5 + [8]), ((int_64)$6 * (int_64)5))
	CALL $25($0, $1, $7, $6)
	CALL $26($0, *($7 + [8]), $2, *($0))
	$8 = *($0)
	CALL eosio_assert($9, [9449])
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($4 + [40])), [9484])
	CALL eosio_assert(((int_64)*($4 + [40]) == (int_64)CALL $fimport$9()), [9530])
	*($7 + [16]) = ((int_64)*($7 + [16]) + (int_64)$6)
	$6 = *($7)
	CALL eosio_assert([1], [9581])
	*($4 + [136]) = (($4 + [80]) + [48])
	*($4 + [132]) = ($4 + [80])
	*($4 + [128]) = ($4 + [80])
	*($4 + [144]) = ($4 + [128])
	*($4 + [156]) = ($7 + [8])
	*($4 + [152]) = $7
	*($4 + [160]) = ($7 + [16])
	*($4 + [164]) = ($7 + [24])
	*($4 + [168]) = ($7 + [32])
	*($4 + [172]) = ($7 + [40])
	CALL $27(($4 + [152]), ($4 + [144]))
	CALL db_update_i64(*($7 + [52]), $8, ($4 + [80]), [48])
	$7 = (($4 + [40]) + [16])
	if ( (uint_64)($6 <= *($7)) ){ goto $label$14 }
	*($7) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$9 = *($4 + [24])
	if ( ($9 == 0) ){ goto $label$15 }
	$0 = ($4 + [28])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$17 }
	
.LOOP $label$18:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$18 }
	$7 = *(($4 + [24]))
	goto $label$16 
	
.LABEL $label$17
	$7 = $9
	
.LABEL $label$16
	*($0) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$15
	$9 = *($4 + [64])
	if ( ($9 == 0) ){ goto $label$20 }
	$0 = ($4 + [68])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$23:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$24 }
	CALL _ZdlPv($5)
	
.LABEL $label$24
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$23 }
	$7 = *(($4 + [64]))
	goto $label$21 
	
.LABEL $label$22
	$7 = $9
	
.LABEL $label$21
	*($0) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$20
	$global$0 = ($4 + [176])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = [0]
	*(($3 + [120])) = [0]
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	$5 = *($0)
	*($3 + [88]) = $5
	*($3 + [96]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)-4816283142123945984, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $24(($3 + [88]), $6)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($3 + [88])), [9351])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($4 + [24]) == (int_64)1), [8455])
	if ( ((int_64)$1 == (int_64)600000000) ){ goto $label$2 }
	CALL require_auth(*($4 + [8]))
	
.LABEL $label$2
	$7 = *($4 + [16])
	*(($3 + [80])) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$5 = *($0)
	*($3 + [48]) = $5
	*($3 + [56]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)7035924439720001536, $7)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $21(($3 + [48]), $6)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($3 + [48])), [9351])
	if ( ((int_64)*($6 + [40]) == (int_64)-1) ){ goto $label$4 }
	CALL $36($0, $2, (int_64)600000000, $3)
	goto $label$3 
	
.LABEL $label$5
	CALL $36($0, $2, (int_64)600000000, $3)
	goto $label$3 
	
.LABEL $label$4
	if ( (uint_64)(CALL current_time() <= ((int_64)*($6 + [32]) + (int_64)*($6 + [24]))) ){ goto $label$6 }
	if ( (CALL $22($0, $7) == 0) ){ goto $label$6 }
	CALL $16($0, $7)
	CALL $36($0, $2, (int_64)600000000, $3)
	goto $label$3 
	
.LABEL $label$6
	CALL require_auth(*($4 + [8]))
	CALL $36($0, $2, $1, $3)
	
.LABEL $label$3
	$4 = [8863]
	$5 = *($3)
	$0 = *([8863])
	if ( ($0 == 0) ){ goto $label$7 }
	
.LOOP $label$9:
	if ( ((int_32)$0 == (int_32)[37]) ){ goto $label$8 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$7 }
	goto $label$9 
	
.LABEL $label$8
	CALL printui($5)
	CALL prints(($4 + [1]))
	
.LABEL $label$7
	$6 = *($3 + [72])
	if ( ($6 == 0) ){ goto $label$10 }
	$8 = ($3 + [76])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($3 + [72]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $6
	
.LABEL $label$11
	*($8) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$6 = *($3 + [112])
	if ( ($6 == 0) ){ goto $label$15 }
	$8 = ($3 + [116])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$19 }
	CALL _ZdlPv($0)
	
.LABEL $label$19
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($3 + [112]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $6
	
.LABEL $label$16
	*($8) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$global$0 = ($3 + [128])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9425])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9425])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $91($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$5 = ($global$0 - [224])
	$global$0 = $5
	$6 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$6 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8215])
	$8 = CALL $84([8318])
	if ( ($8 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8945])
	goto $label$8 
	
.LABEL $label$9
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = (int_64)0
	
.LOOP $label$10:
	$6 = *(($8 + [8317]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8990])
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$10 }
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$6 
	
.LABEL $label$7
	$7 = (int_64)4
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$7), [8322])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8345])
	$6 = [0]
	if ( ((uint_64)((int_64)*($4) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$12 }
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$7 = $9
	$6 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$7 = $9
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $6 ){ goto $label$16 }
	$6 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$6 = [0]
	
.LABEL $label$12
	CALL eosio_assert($6, [8215])
	$8 = CALL $84([8318])
	if ( ($8 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [8945])
	goto $label$19 
	
.LABEL $label$20
	if ( ($8 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$7 = (int_64)0
	
.LOOP $label$21:
	$6 = *(($8 + [8317]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [8990])
	
.LABEL $label$22
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$21 }
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$17 
	
.LABEL $label$18
	$7 = (int_64)4
	
.LABEL $label$17
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$7), [8322])
	CALL eosio_assert(((int_64)*($4) > (int_64)0), [8345])
	$8 = [0]
	*((($5 + [88]) + [32])) = [0]
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	$7 = *($0)
	*($5 + [88]) = $7
	*($5 + [96]) = $7
	$6 = [0]
	$10 = CALL db_find_i64($7, $7, (int_64)-4816283142123945984, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$23 }
	$6 = CALL $24(($5 + [88]), $10)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($5 + [88])), [9351])
	
.LABEL $label$23
	CALL eosio_assert((int_64)(*($6 + [24]) == 0), [8376])
	$9 = *($4)
	$7 = *($3)
	CALL $36($0, $2, (int_64)0, ($5 + [40]))
	$7 = ((uint_64)$7 / (uint_64)(int_64)100)
	$11 = ((int_64)$7 * (int_64)99)
	CALL $23($0, $1, *($0), $11)
	CALL $23($0, $1, *($6 + [8]), $7)
	CALL $25($0, $1, ($5 + [40]), $7)
	CALL $26($0, $2, $11, *($0))
	*($5 + [56]) = ((int_64)*($5 + [56]) + (int_64)$7)
	$1 = ((uint_64)$9 / (uint_64)(int_64)100)
	CALL $25($0, *($0), ($5 + [40]), $1)
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$9 = *($0)
	*($5) = $9
	*($5 + [8]) = $9
	$6 = CALL db_find_i64($9, $9, (int_64)7035924439720001536, *($5 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$24 }
	$8 = CALL $21($5, $6)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$5), [9351])
	
.LABEL $label$24
	$9 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9449])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$5), [9484])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$9()), [9530])
	*($8 + [16]) = ((int_64)((int_64)$1 + (int_64)$7) + (int_64)*($8 + [16]))
	$7 = *($8)
	CALL eosio_assert([1], [9581])
	*($5 + [184]) = (($5 + [128]) + [48])
	*($5 + [180]) = ($5 + [128])
	*($5 + [176]) = ($5 + [128])
	*($5 + [192]) = ($5 + [176])
	*($5 + [204]) = ($8 + [8])
	*($5 + [200]) = $8
	*($5 + [208]) = ($8 + [16])
	*($5 + [212]) = ($8 + [24])
	*($5 + [216]) = ($8 + [32])
	*($5 + [220]) = ($8 + [40])
	CALL $27(($5 + [200]), ($5 + [192]))
	CALL db_update_i64(*($8 + [52]), $9, ($5 + [128]), [48])
	$8 = ($5 + [16])
	if ( (uint_64)($7 <= *($8)) ){ goto $label$25 }
	*($8) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$25
	CALL $16($0, *($5 + [40]))
	$0 = *($5 + [24])
	if ( ($0 == 0) ){ goto $label$26 }
	$10 = ($5 + [28])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$28 }
	
.LOOP $label$29:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$30 }
	CALL _ZdlPv($6)
	
.LABEL $label$30
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$29 }
	$8 = *(($5 + [24]))
	goto $label$27 
	
.LABEL $label$28
	$8 = $0
	
.LABEL $label$27
	*($10) = $0
	CALL _ZdlPv($8)
	
.LABEL $label$26
	$0 = *($5 + [112])
	if ( ($0 == 0) ){ goto $label$31 }
	$10 = ($5 + [116])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$33 }
	
.LOOP $label$34:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$35 }
	CALL _ZdlPv($6)
	
.LABEL $label$35
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$34 }
	$8 = *(($5 + [112]))
	goto $label$32 
	
.LABEL $label$33
	$8 = $0
	
.LABEL $label$32
	*($10) = $0
	CALL _ZdlPv($8)
	
.LABEL $label$31
	$global$0 = ($5 + [224])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $88($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($9 = ($4 + [104]))) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [160]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $37(($4 + [16]), ($4 + [160]))
	*(($10 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($3 = (($4 + [144]) + [8]))) = *($10)
	*($4 + [144]) = *($4)
	$11 = *($3)
	*(($10 = (($4 + [160]) + [8]))) = $11
	*((($4 + [16]) + [24])) = $11
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [144])
	*($4 + [32]) = $0
	*($4 + [160]) = $0
	*(($11 = (($4 + [128]) + [8]))) = *($8)
	*(($8 = (($4 + [112]) + [8]))) = *($9)
	*($4 + [128]) = *($4 + [80])
	*($4 + [112]) = *($4 + [96])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	*($10) = *($8)
	*($3) = *($11)
	*($4 + [160]) = *($4 + [112])
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [144])), (int_32 ($4 + [160])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $91($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_upperbound(*($2), *($2 + [8]), (int_64)-3778232678493017600, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [9351])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $50($7, CALL $fimport$8(*($7), *($7 + [8]), (int_64)-3778232678493017600, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [9351])
	
.LABEL $label$2
	*($4 + [48]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9402])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $88($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([64])) + [40]) = $0
	*($5 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9425])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[15]), [9425])
	CALL memcpy(($5 + [16]), ($2 + [8]), [16])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[24]), [9425])
	CALL memcpy(($5 + [32]), ($2 + [24]), [8])
	*($5 + [48]) = [-1]
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $53(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $91($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9746])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3778232678493017600)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9692])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9692])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $50(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ((int_64)*(*($4 + [8])) + (int_64)*(*($4 + [4]) + [16]))
	*($1 + [16]) = $6
	$7 = *(*($4 + [4]))
	*(($1 + [24])) = $7
	*($1 + [32]) = *(*($4 + [12]))
	$8 = ($1 + [16])
	$4 = [9845]
	$9 = *([9845])
	if ( ($9 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)$9 == (int_32)[37]) ){ goto $label$2 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$2
	*($3) = $6
	*($3 + [8]) = $7
	CALL printui128($3)
	CALL prints(($4 + [1]))
	
.LABEL $label$1
	$4 = $2
	$9 = ($4 + [-32])
	$global$0 = $9
	CALL eosio_assert([1], [9309])
	CALL memcpy($9, $1, [8])
	CALL eosio_assert([1], [9309])
	CALL memcpy(($4 + [-24]), $8, [16])
	CALL eosio_assert([1], [9309])
	CALL memcpy(($4 + [-8]), ($1 + [32]), [8])
	$6 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($5 + [8]), (int_64)-3778232678493017600, *(*($0 + [8])), $6, $9, [32])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$4 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$6 = *(($5 + [8]))
	$7 = *(*(($0 + [8])))
	$10 = *($1)
	*($3 + [8]) = *(($1 + [24]))
	*($3) = *(($1 + [16]))
	*($1 + [48]) = CALL db_idx128_store($6, (int_64)-3778232678493017600, $7, $10, $3)
	$global$0 = ($3 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$1 = *($1)
	*($2 + [15]) = *(*($0 + [16]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [9309])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = ((int_64)$2 + (int_64)1)
	$4 = [8863]
	$5 = *([8863])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$2 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$2
	CALL printui($2)
	CALL prints(($4 + [1]))
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $58($0, ($3 + [8]), ($3 + [16]))
	$4 = [9315]
	$2 = *($3 + [24])
	$6 = *($3 + [16])
	$5 = *([9315])
	if ( ($5 == 0) ){ goto $label$4 }
	
.LOOP $label$6:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$5 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$6 
	
.LABEL $label$5
	*($3 + [32]) = $6
	*($3 + [40]) = $2
	CALL printui128(($3 + [32]))
	CALL prints(($4 + [1]))
	
.LABEL $label$4
	$2 = *(*($0 + [4]))
	$4 = [9430]
	$5 = *([9430])
	if ( ($5 == 0) ){ goto $label$7 }
	
.LOOP $label$9:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$8 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$9 
	
.LABEL $label$8
	CALL printui($2)
	CALL prints(($4 + [1]))
	
.LABEL $label$7
	$global$0 = ($3 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-3778232678493017600, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [9351])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $50($7, CALL $fimport$8(*($7), *($7 + [8]), (int_64)-3778232678493017600, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [9351])
	
.LABEL $label$2
	*($4 + [48]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$6 = ($global$0 - [160])
	$global$0 = $6
	*($6 + [104]) = $2
	*(($7 = (($6 + [64]) + [32]))) = [0]
	*($6 + [80]) = (int_64)-1
	*($6 + [88]) = (int_64)0
	*($6 + [100]) = [0]
	$8 = *($0)
	*($6 + [64]) = $8
	*($6 + [72]) = $8
	CALL eosio_assert(((int_64)$8 == (int_64)CALL $fimport$9()), [9794])
	*(($9 = CALL _Znwj([48])) + [32]) = ($6 + [64])
	*($9 + [8]) = $2
	*($9 + [16]) = $3
	*($9 + [24]) = $4
	*($9) = *($1)
	*($6 + [120]) = (($6 + [16]) + [32])
	*($6 + [116]) = ($6 + [16])
	*($6 + [112]) = ($6 + [16])
	*($6 + [56]) = ($6 + [112])
	$10 = ($9 + [8])
	*($6 + [132]) = $10
	*($6 + [128]) = $9
	*($6 + [136]) = ($9 + [16])
	*($6 + [140]) = ($9 + [24])
	CALL $59(($6 + [128]), ($6 + [56]))
	$2 = *($9)
	*($9 + [36]) = CALL db_store_i64(*($6 + [72]), (int_64)-2042605236735967232, $5, $2, ($6 + [16]), [32])
	if ( (uint_64)($2 <= *($6 + [80])) ){ goto $label$1 }
	*((($6 + [64]) + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$2 = *($9)
	$8 = *((($6 + [64]) + [8]))
	*($6 + [128]) = *($10)
	*($9 + [40]) = CALL db_idx64_store($8, (int_64)-2042605236735967232, $5, $2, ($6 + [128]))
	*($6 + [128]) = $9
	$2 = *($9)
	*($6 + [16]) = $2
	$11 = *(($9 + [36]))
	*($6 + [112]) = $11
	$12 = ($6 + [92])
	$10 = *($12)
	if ( ((uint_32)$10 >= (uint_32)*($7)) ){ goto $label$4 }
	*($10 + [8]) = $2
	*($10 + [16]) = $11
	*($6 + [128]) = [0]
	*($10) = $9
	*($12) = ($10 + [24])
	$9 = *($6 + [128])
	$10 = [0]
	*($6 + [128]) = [0]
	if ( $9 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $60(($6 + [88]), ($6 + [128]), ($6 + [16]), ($6 + [112]))
	$9 = *($6 + [128])
	$10 = [0]
	*($6 + [128]) = [0]
	if ( ($9 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($9)
	
.LABEL $label$2
	$8 = *($1 + [32])
	*($6 + [56]) = $8
	*(($6 + [48])) = $10
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$2 = *($0)
	*($6 + [16]) = $2
	*($6 + [24]) = $2
	$9 = CALL db_find_i64($2, $2, (int_64)-6030912142679474176, $8)
	if ( ((int_32)$9 < (int_32)$10) ){ goto $label$5 }
	$10 = CALL $28(($6 + [16]), $9)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($6 + [16])), [9351])
	$8 = *($6 + [56])
	
.LABEL $label$5
	$9 = [8845]
	$1 = *([8845])
	if ( ($1 == 0) ){ goto $label$6 }
	
.LOOP $label$8:
	if ( ((int_32)$1 == (int_32)[37]) ){ goto $label$7 }
	CALL prints_l($9, [1])
	$9 = ($9 + [1])
	$1 = *($9)
	if ( ($1 == 0) ){ goto $label$6 }
	goto $label$8 
	
.LABEL $label$7
	CALL printui($8)
	CALL prints(($9 + [1]))
	
.LABEL $label$6
	if ( ($10 == 0) ){ goto $label$11 }
	*($6 + [128]) = ($6 + [104])
	CALL eosio_assert([1], [9449])
	CALL $61(($6 + [16]), $10, $5, ($6 + [128]))
	$10 = *($6 + [40])
	if ( $10 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	*($6 + [12]) = ($6 + [104])
	*($6 + [8]) = ($6 + [56])
	*($6 + [112]) = $5
	CALL eosio_assert(((int_64)*($6 + [16]) == (int_64)CALL $fimport$9()), [9794])
	*($6 + [132]) = ($6 + [8])
	*($6 + [128]) = ($6 + [16])
	*($6 + [136]) = ($6 + [112])
	*(($9 = CALL _Znwj([96]))) = (int_64)0
	*($9 + [72]) = ($6 + [16])
	CALL $62(($6 + [128]), $9)
	*($6 + [152]) = $9
	$2 = *($9)
	*($6 + [128]) = $2
	$10 = *($9 + [76])
	*($6 + [148]) = $10
	$0 = ($6 + [44])
	$1 = *($0)
	if ( ((uint_32)$1 >= (uint_32)*(($6 + [48]))) ){ goto $label$14 }
	*($1 + [8]) = $2
	*($1 + [16]) = $10
	*($6 + [152]) = [0]
	*($1) = $9
	*($0) = ($1 + [24])
	$9 = *($6 + [152])
	*($6 + [152]) = [0]
	if ( $9 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $34(($6 + [40]), ($6 + [152]), ($6 + [128]), ($6 + [148]))
	$9 = *($6 + [152])
	*($6 + [152]) = [0]
	if ( ($9 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv($9)
	
.LABEL $label$12
	$10 = *($6 + [40])
	if ( ($10 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$0 = ($6 + [44])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$16 }
	
.LOOP $label$17:
	$9 = ($9 + [-24])
	$1 = *($9)
	*($9) = [0]
	if ( ($1 == 0) ){ goto $label$18 }
	CALL _ZdlPv($1)
	
.LABEL $label$18
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$17 }
	$9 = *(($6 + [40]))
	goto $label$15 
	
.LABEL $label$16
	$9 = $10
	
.LABEL $label$15
	*($0) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$9
	$10 = *($6 + [88])
	if ( ($10 == 0) ){ goto $label$19 }
	$0 = ($6 + [92])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$21 }
	
.LOOP $label$22:
	$9 = ($9 + [-24])
	$1 = *($9)
	*($9) = [0]
	if ( ($1 == 0) ){ goto $label$23 }
	CALL _ZdlPv($1)
	
.LABEL $label$23
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$22 }
	$9 = *(($6 + [88]))
	goto $label$20 
	
.LABEL $label$21
	$9 = $10
	
.LABEL $label$20
	*($0) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$19
	$global$0 = ($6 + [160])
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9746])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4816283142123945984)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9692])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9692])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $24(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9402])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $88($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [72]) = $0
	*($5) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [64])
	CALL $73(($3 + [40]), ($3 + [32]))
	*($5 + [76]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $34(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $91($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9402])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $88($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $70(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $91($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9425])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [272])
	$global$0 = $4
	*((($4 + [200]) + [32])) = [0]
	*($4 + [216]) = (int_64)-1
	$5 = (int_64)0
	*($4 + [224]) = (int_64)0
	$6 = *($0)
	*($4 + [200]) = $6
	*($4 + [208]) = $6
	$7 = CALL db_lowerbound_i64($6, $6, (int_64)-3617168760277827584, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL $40(($4 + [200]), $7)
	*($4 + [132]) = [0]
	*($4 + [128]) = ($4 + [200])
	$6 = *(*(CALL $41(($4 + [128])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*(($7 = (($4 + [200]) + [16]))) = $5
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [9640])
	$8 = *($7)
	$5 = *($0)
	CALL eosio_assert(((int_64)*($4 + [200]) == (int_64)CALL $fimport$9()), [9794])
	*(($0 = CALL _Znwj([48])) + [32]) = ($4 + [200])
	*($0 + [8]) = $1
	*($0) = $8
	*($0 + [16]) = $2
	*($0 + [24]) = $3
	*($4 + [120]) = (($4 + [128]) + [32])
	*($4 + [116]) = ($4 + [128])
	*($4 + [112]) = ($4 + [128])
	*($4 + [240]) = ($4 + [112])
	*($4 + [52]) = ($0 + [8])
	*($4 + [48]) = $0
	*($4 + [56]) = ($0 + [16])
	*($4 + [60]) = ($0 + [24])
	CALL $42(($4 + [48]), ($4 + [240]))
	$6 = *($0)
	$9 = CALL db_store_i64(*((($4 + [200]) + [8])), (int_64)-3617168760277827584, $5, $6, ($4 + [128]), [32])
	*($0 + [36]) = $9
	if ( (uint_64)($6 <= *($7)) ){ goto $label$2 }
	*($7) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($4 + [48]) = $0
	$6 = *($0)
	*($4 + [128]) = $6
	*($4 + [112]) = $9
	$10 = ($4 + [228])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($4 + [232]))) ){ goto $label$5 }
	*($7 + [8]) = $6
	*($7 + [16]) = $9
	*($4 + [48]) = [0]
	*($7) = $0
	*($10) = ($7 + [24])
	$7 = *($4 + [48])
	$0 = [0]
	*($4 + [48]) = [0]
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $43(($4 + [224]), ($4 + [48]), ($4 + [128]), ($4 + [112]))
	$7 = *($4 + [48])
	$0 = [0]
	*($4 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$6 = CALL current_time()
	$5 = (int_64)0
	*(($4 + [156])) = (int_64)0
	*(($4 + [172])) = (int_64)0
	*(($4 + [180])) = (int_64)0
	*($4 + [140]) = $0
	*($4 + [144]) = $0
	*($4 + [148 align=4]) = (int_64)0
	*($4 + [164 align=4]) = (int_64)0
	*($4 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	$0 = CALL $84([8318])
	if ( ($0 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8945])
	goto $label$7 
	
.LABEL $label$8
	if ( ($0 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = (int_64)0
	
.LOOP $label$9:
	$7 = *(($0 + [8317]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [8990])
	
.LABEL $label$10
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$9 }
	
.LABEL $label$6
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9043])
	$6 = ((int_64)$5 & (int_64)72057594037927935)
	$11 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$6 = $5
	$7 = [1]
	$9 = $0
	$0 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$6 = $5
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$0 < (int_32)[6])
	$9 = ($0 + [1])
	$0 = $9
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$0 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [9092])
	*($4 + [112]) = [8556]
	*($4 + [116]) = CALL $84([8556])
	*($4 + [24]) = *($4 + [112])
	*($4 + [120]) = *(CALL $44(($4 + [48]), ($4 + [24])))
	*($4 + [112]) = $1
	*($4 + [240]) = [8563]
	*($4 + [244]) = CALL $84([8563])
	*($4 + [16]) = *($4 + [240])
	*($4 + [104]) = *(CALL $44(($4 + [48]), ($4 + [16])))
	*($4 + [240]) = [8575]
	*($4 + [244]) = CALL $84([8575])
	*($4 + [8]) = *($4 + [240])
	*($4 + [96]) = *(CALL $44(($4 + [48]), ($4 + [8])))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$19 }
	$7 = [0]
	$9 = *([0] + [9272])
	$6 = $1
	
.LOOP $label$21:
	*((($4 + [48]) + ($0 = $7))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$0 == (int_32)[12]) )))))
	$7 = ($0 + [1])
	if ( ((uint_32)$0 > (uint_32)[11]) ){ goto $label$20 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$21 }
	
.LABEL $label$20
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($4 + [32]) = ($7 << [1])
	$9 = (($4 + [32]) | [1])
	goto $label$17 
	
.LABEL $label$19
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	*($4 + [32]) = [0]
	$0 = (($4 + [32]) | [1])
	goto $label$16 
	
.LABEL $label$18
	$10 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($4 + [32]) = ($10 | [1])
	*($4 + [40]) = $9
	*($4 + [36]) = $7
	
.LABEL $label$17
	$10 = ($0 + [1])
	$0 = [0]
	
.LOOP $label$22:
	*(($9 + $0)) = *((($4 + [48]) + $0))
	$0 = ($0 + [1])
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$22 }
	$0 = ($9 + $7)
	
.LABEL $label$16
	*($0) = [0]
	*((($4 + [48]) + [24])) = $11
	$0 = (($4 + [32]) + [8])
	*((($4 + [48]) + [40])) = *($0)
	*($0) = [0]
	*($4 + [56]) = $2
	*($4 + [48]) = $1
	*($4 + [64]) = $3
	*($4 + [80]) = *($4 + [32])
	*($4 + [32]) = (int_64)0
	$7 = *((($4 + [128]) + [40]))
	if ( ((uint_32)$7 >= (uint_32)*(($4 + [172]))) ){ goto $label$26 }
	*($7 + [8]) = *($4 + [96])
	*($7) = *($4 + [104])
	*($7 + [16 align=4]) = (int_64)0
	*(($9 = ($7 + [24]))) = [0]
	$0 = CALL _Znwj([16])
	*($7 + [16]) = $0
	$10 = ($0 + [16])
	*($9) = $10
	*(($0 + [8])) = *((($4 + [112]) + [8]))
	*($0) = *($4 + [112])
	*(($7 + [20])) = $10
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$0 = *($4 + [80])
	$9 = ( *((($4 + [48]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($9 + [32])
	$6 = (CASTING uint_64)(uint_32 $9)
	$9 = ($7 + [28])
	
.LOOP $label$27:
	$0 = ($0 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$27 }
	if ( ($0 == 0) ){ goto $label$25 }
	CALL $45($9, $0)
	$9 = *(($7 + [32]))
	$0 = *(($7 + [28]))
	goto $label$24 
	
.LABEL $label$26
	CALL $46(($4 + [164]), ($4 + [112]), ($4 + [104]), ($4 + [96]), ($4 + [48]))
	goto $label$23 
	
.LABEL $label$25
	$9 = [0]
	$0 = [0]
	
.LABEL $label$24
	*($4 + [244]) = $0
	*($4 + [240]) = $0
	*($4 + [248]) = $9
	*($4 + [256]) = ($4 + [240])
	*($4 + [264]) = ($4 + [48])
	CALL $47(($4 + [264]), ($4 + [256]))
	*(($0 = (($4 + [128]) + [40]))) = (*($0) + [40])
	
.LABEL $label$23
	if ( ((*(($4 + [80])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$28
	*(($4 + [148])) = [0]
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = $8
	CALL $48(($4 + [112]), ($4 + [128]))
	$0 = *($4 + [112])
	CALL send_deferred(($4 + [48]), $1, $0, (*($4 + [116]) - $0), [0])
	$0 = *($4 + [112])
	if ( ($0 == 0) ){ goto $label$29 }
	*($4 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$29
	CALL $49(($4 + [128]))
	$9 = *($4 + [224])
	if ( ($9 == 0) ){ goto $label$30 }
	$10 = ($4 + [228])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$32 }
	
.LOOP $label$33:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$34 }
	CALL _ZdlPv($7)
	
.LABEL $label$34
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$33 }
	$0 = *(($4 + [224]))
	goto $label$31 
	
.LABEL $label$32
	$0 = $9
	
.LABEL $label$31
	*($10) = $9
	CALL _ZdlPv($0)
	
.LABEL $label$30
	$global$0 = ($4 + [272])
}

int_32 .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	*($2 + [60]) = [0]
	$3 = *($0)
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	CALL $32(($2 + [16]), ($2 + [24]), $1, (int_64)0)
	$0 = *($2 + [20])
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((int_64)*(($0 + [24])) != (int_64)$1) ){ goto $label$1 }
	CALL $56(($2 + [8]), ($2 + [24]), $1)
	
.LABEL $label$1
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($2 + [52])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	CALL _ZdlPv($6)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [48]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($2 + [64])
	return [0]
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [208])
	$global$0 = $4
	*($4 + [96]) = $3
	*($4 + [104]) = $1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [92]) = [0]
	$1 = *($0)
	*($4 + [56]) = $1
	*($4 + [64]) = $1
	*($4 + [80]) = (int_64)0
	$5 = CALL db_lowerbound_i64($1, $1, (int_64)-3778232678493017600, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $50(($4 + [56]), $5)
	*($4 + [12]) = [0]
	*($4 + [8]) = ($4 + [56])
	$1 = *(*(CALL $51(($4 + [8])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	*(($4 + [72])) = $1
	$5 = (uint_64)($1 <= (int_64)-2)
	goto $label$1 
	
.LABEL $label$2
	*(($4 + [72])) = (int_64)0
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [9640])
	*($4 + [48]) = *(($4 + [72]))
	$1 = *($0)
	*($4 + [12]) = $2
	*($4 + [8]) = ($4 + [48])
	*($4 + [16]) = ($4 + [96])
	*($4 + [20]) = ($4 + [104])
	*($4 + [184]) = $1
	CALL eosio_assert(((int_64)*($4 + [56]) == (int_64)CALL $fimport$9()), [9794])
	*($4 + [116]) = ($4 + [8])
	*($4 + [112]) = ($4 + [56])
	*($4 + [120]) = ($4 + [184])
	*(($5 = CALL _Znwj([64])) + [32]) = (int_64)0
	*($5 + [40]) = ($4 + [56])
	CALL $52(($4 + [112]), $5)
	*($4 + [160]) = $5
	$1 = *($5)
	*($4 + [112]) = $1
	$6 = *($5 + [44])
	*($4 + [176]) = $6
	$7 = ($4 + [84])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($4 + [88]))) ){ goto $label$5 }
	*($8 + [8]) = $1
	*($8 + [16]) = $6
	*($4 + [160]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	$5 = *($4 + [160])
	$8 = [0]
	*($4 + [160]) = [0]
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $53(($4 + [80]), ($4 + [160]), ($4 + [112]), ($4 + [176]))
	$5 = *($4 + [160])
	$8 = [0]
	*($4 + [160]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($5)
	
.LABEL $label$3
	*(($6 = (($4 + [8]) + [32]))) = $8
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$1 = *($0)
	*($4 + [8]) = $1
	*($4 + [16]) = *($4 + [104])
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$9()), [9794])
	*(($5 = CALL _Znwj([56])) + [40]) = ($4 + [8])
	*($5) = *($4 + [48])
	*($5 + [8]) = CALL current_time()
	*($5 + [32]) = $8
	*($5 + [16]) = *($2)
	*($5 + [24]) = *($4 + [96])
	*($4 + [168]) = (($4 + [112]) + [33])
	*($4 + [164]) = ($4 + [112])
	*($4 + [160]) = ($4 + [112])
	*($4 + [176]) = ($4 + [160])
	*($4 + [188]) = ($5 + [8])
	*($4 + [184]) = $5
	*($4 + [192]) = ($5 + [16])
	*($4 + [196]) = ($5 + [24])
	*($4 + [200]) = ($5 + [32])
	CALL $54(($4 + [184]), ($4 + [176]))
	$3 = *($5)
	$2 = CALL db_store_i64(*($4 + [16]), (int_64)-3020370841071255552, $1, $3, ($4 + [112]), [33])
	*($5 + [44]) = $2
	if ( (uint_64)($3 <= *($4 + [24])) ){ goto $label$6 }
	*((($4 + [8]) + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($4 + [184]) = $5
	$1 = *($5)
	*($4 + [112]) = $1
	*($4 + [160]) = $2
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*($6)) ){ goto $label$9 }
	*($0 + [8]) = $1
	*($0 + [16]) = $2
	*($4 + [184]) = [0]
	*($0) = $5
	*($8) = ($0 + [24])
	$5 = *($4 + [184])
	*($4 + [184]) = [0]
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $55(($4 + [32]), ($4 + [184]), ($4 + [112]), ($4 + [160]))
	$5 = *($4 + [184])
	*($4 + [184]) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$10 }
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($4 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $2
	
.LABEL $label$11
	*($8) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$2 = *($4 + [80])
	if ( ($2 == 0) ){ goto $label$15 }
	$8 = ($4 + [84])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$19 }
	CALL _ZdlPv($0)
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($4 + [80]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $2
	
.LABEL $label$16
	*($8) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$global$0 = ($4 + [208])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9402])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $88($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	*($5 + [8]) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $69(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $31(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $91($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [144])
	$global$0 = $4
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $5
	$0 = [0]
	$6 = CALL db_find_i64($5, $5, (int_64)-4816283142123945984, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $24(($4 + [8]), $6)
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)($4 + [8])), [9351])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9449])
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)($4 + [8])), [9484])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$9()), [9530])
	*($0 + [32]) = ((int_64)*($0 + [32]) + (int_64)$2)
	$5 = *($0)
	CALL eosio_assert([1], [9581])
	*($4 + [104]) = (($4 + [48]) + [40])
	*($4 + [100]) = ($4 + [48])
	*($4 + [96]) = ($4 + [48])
	*($4 + [112]) = ($4 + [96])
	*($4 + [124]) = ($0 + [8])
	*($4 + [120]) = $0
	*($4 + [128]) = ($0 + [16])
	*($4 + [132]) = ($0 + [24])
	*($4 + [136]) = ($0 + [32])
	CALL $30(($4 + [120]), ($4 + [112]))
	CALL db_update_i64(*($0 + [44]), $3, ($4 + [48]), [40])
	$0 = (($4 + [8]) + [16])
	if ( (uint_64)($5 <= *($0)) ){ goto $label$2 }
	*($0) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	CALL _ZdlPv($6)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [144])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9309])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9309])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9309])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9309])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9309])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9309])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $67(CALL $68($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9309])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9309])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9309])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9309])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9309])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9309])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9309])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9309])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9309])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9309])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $67($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [9484])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [9530])
	$6 = ($1 + [56])
	$7 = *($1)
	$8 = *(*($3))
	if ( ((uint_64)*($1 + [56]) >= (uint_64)$8) ){ goto $label$1 }
	*($6) = $8
	
.LABEL $label$1
	CALL eosio_assert([1], [9581])
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-4])
	*($5 + [16]) = $5
	*($5 + [36]) = $6
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [16])
	*($5 + [32]) = ($1 + [48])
	*($5 + [40]) = ($1 + [64])
	CALL $33(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*(($1 + [76])), $2, $4, [60])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($5 + [48])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *(*($5))
	$7 = [9865]
	$8 = *([9865])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)$8 == (int_32)[37]) ){ goto $label$2 }
	CALL prints_l($7, [1])
	$7 = ($7 + [1])
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$2
	CALL printui($6)
	CALL prints(($7 + [1]))
	
.LABEL $label$1
	*($1) = *(*($5))
	*($1 + [48]) = [1]
	*($1 + [56]) = *(*($5 + [4]))
	*($1 + [64]) = (int_64)0
	$8 = $2
	$7 = ($8 + [-64])
	$global$0 = $7
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($8 + [-4])
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [16])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [48])
	*($3 + [36]) = ($1 + [56])
	*($3 + [40]) = ($1 + [64])
	CALL $33(($3 + [24]), ($3 + [16]))
	$6 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-6030912142679474176, *(*($0 + [8])), $6, $7, [60])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $90($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8232])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $88 (int_32 $0)
{
	return CALL $89([9904], $0)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $88($1)
	
.LABEL $label$2
	*(CALL $85()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $88(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $91($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $85())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $87($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $85 ()
{
	return [9888]
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $83 (int_32 $0)
{
}

void .FUNC $82 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $91($0)
	
.LABEL $label$1
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9309])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9309])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [9425])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9425])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $91($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $88($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9884])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $88($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [176])
	$global$0 = $4
	*((($4 + [40]) + [32])) = [0]
	*($4 + [56]) = (int_64)-1
	$5 = (int_64)0
	*($4 + [64]) = (int_64)0
	$6 = *($0)
	*($4 + [40]) = $6
	*($4 + [48]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)-4816283142123945984, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $24(($4 + [40]), $8)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($4 + [40])), [9351])
	
.LABEL $label$1
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$6 = *($0)
	*($4) = $6
	*($4 + [8]) = $6
	$8 = CALL db_lowerbound_i64($6, $6, (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	CALL $21($4, $8)
	*($4 + [84]) = [0]
	*($4 + [80]) = $4
	$6 = *(*(CALL $38(($4 + [80])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$8 = (uint_64)($5 <= (int_64)-2)
	goto $label$2 
	
.LABEL $label$3
	$8 = [1]
	
.LABEL $label$2
	*(($9 = ($4 + [16]))) = $5
	CALL eosio_assert($8, [9640])
	$6 = *($9)
	*($3 + [8]) = $1
	*($3) = $6
	*($3 + [16]) = (int_64)0
	$6 = CALL current_time()
	*($3 + [32]) = $2
	*($3 + [24]) = $6
	*($3 + [40]) = (int_64)-1
	$1 = *($0)
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$9()), [9794])
	*(($8 = CALL _Znwj([64])) + [48]) = $4
	*(($10 = ($8 + [40]))) = *($3 + [40])
	*(($11 = ($8 + [32]))) = *($3 + [32])
	*(($12 = ($8 + [24]))) = *($3 + [24])
	*(($13 = ($8 + [16]))) = *($3 + [16])
	*(($14 = ($8 + [8]))) = *($3 + [8])
	*($8) = *($3)
	*($4 + [160]) = (($4 + [80]) + [48])
	*($4 + [156]) = ($4 + [80])
	*($4 + [152]) = ($4 + [80])
	*($4 + [168]) = ($4 + [152])
	*($4 + [132]) = $14
	*($4 + [128]) = $8
	*($4 + [136]) = $13
	*($4 + [140]) = $12
	*($4 + [144]) = $11
	*($4 + [148]) = $10
	CALL $27(($4 + [128]), ($4 + [168]))
	$6 = *($8)
	$10 = CALL db_store_i64(*(($4 + [8])), (int_64)7035924439720001536, $1, $6, ($4 + [80]), [48])
	*($8 + [52]) = $10
	if ( (uint_64)($6 <= *($9)) ){ goto $label$4 }
	*($9) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [128]) = $8
	$6 = *($8)
	*($4 + [80]) = $6
	*($4 + [152]) = $10
	$11 = ($4 + [28])
	$9 = *($11)
	if ( ((uint_32)$9 >= (uint_32)*(($4 + [32]))) ){ goto $label$7 }
	*($9 + [8]) = $6
	*($9 + [16]) = $10
	*($4 + [128]) = [0]
	*($9) = $8
	*($11) = ($9 + [24])
	$8 = *($4 + [128])
	$9 = [0]
	*($4 + [128]) = [0]
	if ( $8 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $39(($4 + [24]), ($4 + [128]), ($4 + [80]), ($4 + [152]))
	$8 = *($4 + [128])
	$9 = [0]
	*($4 + [128]) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($8)
	
.LABEL $label$5
	$1 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)$9), [9449])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($4 + [40])), [9484])
	CALL eosio_assert(((int_64)*($4 + [40]) == (int_64)CALL $fimport$9()), [9530])
	*($7 + [16]) = *($3)
	$6 = *($7)
	CALL eosio_assert([1], [9581])
	*($4 + [160]) = (($4 + [80]) + [40])
	*($4 + [156]) = ($4 + [80])
	*($4 + [152]) = ($4 + [80])
	*($4 + [168]) = ($4 + [152])
	*($4 + [132]) = ($7 + [8])
	*($4 + [128]) = $7
	*($4 + [136]) = ($7 + [16])
	*($4 + [140]) = ($7 + [24])
	*($4 + [144]) = ($7 + [32])
	CALL $30(($4 + [128]), ($4 + [168]))
	CALL db_update_i64(*($7 + [44]), $1, ($4 + [80]), [40])
	$3 = (($4 + [40]) + [16])
	if ( (uint_64)($6 <= *($3)) ){ goto $label$8 }
	*($3) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$7 = *($4 + [24])
	if ( ($7 == 0) ){ goto $label$9 }
	$0 = ($4 + [28])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$13 }
	CALL _ZdlPv($8)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	$3 = *(($4 + [24]))
	goto $label$10 
	
.LABEL $label$11
	$3 = $7
	
.LABEL $label$10
	*($0) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$14 }
	$0 = ($4 + [68])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$16 }
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$17 }
	$3 = *(($4 + [64]))
	goto $label$15 
	
.LABEL $label$16
	$3 = $7
	
.LABEL $label$15
	*($0) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$14
	$global$0 = ($4 + [176])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9425])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9425])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9425])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [40])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $86(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9884])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $86(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [16]) = $3
	*($4 + [24]) = $2
	$5 = [8863]
	$6 = *([8863])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$2 }
	CALL prints_l($5, [1])
	$5 = ($5 + [1])
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$2
	CALL printui($2)
	CALL prints(($5 + [1]))
	
.LABEL $label$1
	*($4 + [8]) = $1
	CALL $57($0, ($4 + [8]), ($4 + [16]))
	$5 = [9315]
	$2 = *($4 + [24])
	$3 = *($4 + [16])
	$6 = *([9315])
	if ( ($6 == 0) ){ goto $label$4 }
	
.LOOP $label$6:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$5 }
	CALL prints_l($5, [1])
	$5 = ($5 + [1])
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$4 }
	goto $label$6 
	
.LABEL $label$5
	*($4 + [32]) = $3
	*($4 + [40]) = $2
	CALL printui128(($4 + [32]))
	CALL prints(($5 + [1]))
	
.LABEL $label$4
	$2 = *(*($0 + [4]))
	$5 = [9332]
	$6 = *([9332])
	if ( ($6 == 0) ){ goto $label$7 }
	
.LOOP $label$9:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$8 }
	CALL prints_l($5, [1])
	$5 = ($5 + [1])
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$7 }
	goto $label$9 
	
.LABEL $label$8
	CALL printui($2)
	CALL prints(($5 + [1]))
	
.LABEL $label$7
	$global$0 = ($4 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [9309])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9309])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9309])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}