(data (i32.const 8192) "producer not found\00")
(data (i32.const 8211) "producer not active\00")
(data (i32.const 8231) "player not found\00")
(data (i32.const 8248) "voteproducer\00")
(data (i32.const 8261) "eosio.token\00")
(data (i32.const 8273) "transfer\00")
(data (i32.const 8282) "from \00")
(data (i32.const 8288) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8352) "write\00")
(data (i32.const 8358) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8407) "invalid symbol name\00")
(data (i32.const 8428) "\f0 \00\00")
(data (i32.const 8432) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8465) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8516) "error reading iterator\00")
(data (i32.const 8539) "read\00")
(data (i32.const 8544) "cannot pass end iterator to modify\00")
(data (i32.const 8579) "object passed to modify is not in multi_index\00")
(data (i32.const 8625) "cannot modify objects in table of another contract\00")
(data (i32.const 8676) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8735) "cannot create objects in table of another contract\00")
(data (i32.const 8786) "get\00")
(data (i32.const 8790) "cannot pass end iterator to erase\00")
(data (i32.const 8824) "object passed to erase is not in multi_index\00")
(data (i32.const 8869) "cannot erase objects in table of another contract\00")
(data (i32.const 8919) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8972) "cannot increment end iterator\00")
(data (i32.const 17412) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "db_update_i64" (func $fimport$3 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$4 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$5 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$7 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "memmove" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "require_auth" (func $fimport$10 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$13 (param i32 i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "db_idx64_lowerbound" (func $fimport$16 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$17 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$19 (result i32)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$22 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$23 (param i32)))
(import "env" "__lttf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $26))
(export "_Znwj" (func $49))
(export "_ZdlPv" (func $51))
(export "_Znaj" (func $50))
(export "_ZdaPv" (func $52))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $1 $17 $6 $15 $24)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17498))
(global $global$2 i32 (i32.const 17498))


int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8516])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $66($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([104])
	$6 = CALL $41($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [92])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $69($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	$1 = *($5 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($5 + [20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $62 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = ($0 + [8])
	$5 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8465])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $2($3, $6)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8465])
	
.LABEL $label$1
	$8 = *($7 + [16])
	$9 = ( ((int_64)$8 + (int_64)-100) ? $8 : (int_64)(*($7 + [40]) == 0) )
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$5 }
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8358])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$8 = $10
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $10
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$10 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [8407])
	$11 = *($0)
	$8 = (int_64)6
	
.LOOP $label$11:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$11 }
	$8 = (int_64)0
	$12 = (int_64)59
	$6 = [8261]
	$13 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$17 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$5 = ($5 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$12 = ((int_64)$12 + (int_64)4294967291)
	$13 = ((int_64)$10 | (int_64)$13)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$12 }
	$8 = (int_64)0
	$12 = (int_64)59
	$6 = [8273]
	$14 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$23 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$5 = ($5 + [-91])
	goto $label$21 
	
.LABEL $label$23
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$14 = ((int_64)$10 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$18 }
	*($2) = $11
	CALL $20(($2 + [8]), $2)
	$6 = CALL $59(($2 + [8]), [0], [8282])
	$5 = *($6)
	$4 = *($6 + [4])
	*($6) = (int_64)0
	$15 = *($6 + [8])
	*($6 + [8]) = [0]
	*((($2 + [24]) + [24])) = (int_64)1397703940
	*((($2 + [24]) + [36])) = $4
	*(($2 + [64])) = $15
	*($2 + [24]) = *($0)
	*($2 + [32]) = $1
	*($2 + [72]) = $13
	*($2 + [80]) = $14
	*($2 + [40]) = $9
	*($2 + [56]) = $5
	*(($6 = CALL _Znwj([16]))) = $11
	*($6 + [8]) = (int_64)3617214756542218240
	*((($2 + [72]) + [36])) = [0]
	$15 = ($6 + [16])
	*((($2 + [72]) + [24])) = $15
	*(($2 + [92])) = $15
	*($2 + [88]) = $6
	*($2 + [100 align=4]) = (int_64)0
	$5 = ( $4 ? (uint_32($5 >> [1]) & [127]) : ($5 & [1]) )
	$6 = ($5 + [32])
	$8 = (CASTING uint_64)(uint_32 $5)
	$5 = ($2 + [100])
	
.LOOP $label$24:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$24 }
	if ( ($6 == 0) ){ goto $label$26 }
	CALL $21($5, $6)
	$5 = *(($2 + [104]))
	$6 = *(($2 + [100]))
	goto $label$25 
	
.LABEL $label$26
	$5 = [0]
	$6 = [0]
	
.LABEL $label$25
	*($2 + [132]) = $6
	*($2 + [128]) = $6
	*($2 + [136]) = $5
	*($2 + [112]) = ($2 + [128])
	*($2 + [120]) = ($2 + [24])
	CALL $22(($2 + [120]), ($2 + [112]))
	CALL $23(($2 + [128]), ($2 + [72]))
	$6 = *($2 + [128])
	CALL send_inline($6, (*($2 + [132]) - $6))
	$6 = *($2 + [128])
	if ( ($6 == 0) ){ goto $label$27 }
	*($2 + [132]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$27
	$6 = *($2 + [100])
	if ( ($6 == 0) ){ goto $label$28 }
	*(($2 + [104])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$28
	$6 = *($2 + [88])
	if ( ($6 == 0) ){ goto $label$29 }
	*(($2 + [92])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$29
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$30
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$5
	CALL $10(($2 + [24]), $0)
	*($2 + [72]) = *($7 + [8])
	*($2) = $3
	CALL $11(($2 + [128]), $2, ($2 + [72]))
	CALL $12(($2 + [8]), $2, ($2 + [72]))
	if ( ((int_32)*($2 + [132]) != (int_32)*($2 + [12])) ){ goto $label$31 }
	$5 = *($2 + [28])
	$6 = *($2 + [24])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$33 }
	$8 = *(($7 + [8]))
	
.LOOP $label$34:
	if ( ((int_64)*($6) == (int_64)$8) ){ goto $label$33 }
	$6 = ($6 + [8])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$32 }
	$15 = ($6 + [8])
	$5 = ($5 - $15)
	$4 = int_32($5 >> [3])
	if ( ($5 == 0) ){ goto $label$35 }
	CALL memmove($6, $15, $5)
	
.LABEL $label$35
	*($2 + [28]) = ($6 + ($4 << [3]))
	
.LABEL $label$32
	CALL $14($0, ($2 + [24]))
	
.LABEL $label$31
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8790])
	CALL eosio_assert($6, [8972])
	$6 = CALL db_next_i64(*($7 + [52]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$36 }
	CALL $2($3, $6)
	
.LABEL $label$36
	CALL $16($3, $7)
	$6 = *($2 + [24])
	if ( ($6 == 0) ){ goto $label$37 }
	*($2 + [28]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$37
	$global$0 = ($2 + [144])
}

int_32 .FUNC $66 (int_32 $0)
{
	return CALL $67([9016], $0)
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $40($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $57($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $57($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $53($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $68($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [17412])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $66($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1397703940
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [8358])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8407])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $32(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $69($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $33(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $66($5)
	CALL read_action_data($2, $5)
	CALL $69($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $61($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [8428])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $55($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $57($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $21($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8352])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8352])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $35(CALL $34($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8352])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8352])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8352])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $45(*($1), ($0 + [32]))
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($3 - $2)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$8 }
	$6 = *($0 + [4])
	$4 = *($0 + [8])
	$5 = int_32($4 >> [3])
	if ( ((int_32)$5 <= (int_32)int_32(($4 - $6) >> [3])) ){ goto $label$7 }
	$7 = *($0)
	$6 = (int_32(($6 - $7) >> [3]) + $5)
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	$5 = ($4 - $7)
	if ( ((uint_32)int_32($5 >> [3]) >= (uint_32)[268435455]) ){ goto $label$6 }
	$4 = int_32(($1 - $7) >> [3])
	$7 = int_32($5 >> [2])
	$6 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ($6 <= [536870912]) ){ goto $label$5 }
	CALL abort()
	
.LABEL $label$8
	return $1
	
.LABEL $label$7
	$8 = ($6 - $1)
	$4 = int_32($8 >> [3])
	if ( ((int_32)$5 <= (int_32)$4) ){ goto $label$10 }
	$7 = $6
	$9 = ($2 + ($4 << [3]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$11 }
	$10 = (($3 + [-8]) - $9)
	$4 = $6
	$7 = $9
	
.LOOP $label$12:
	*($4) = *($7)
	$4 = ($4 + [8])
	$7 = ($7 + [8])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$12 }
	$7 = (($6 + ($10 & [-8])) + [8])
	*(($0 + [4])) = $7
	
.LABEL $label$11
	if ( ((int_32)$8 >= (int_32)[1]) ){ goto $label$9 }
	return $1
	
.LABEL $label$10
	$7 = $6
	$9 = $3
	
.LABEL $label$9
	$4 = ($5 << [3])
	$5 = ($7 - ($1 + $4))
	$8 = int_32($5 >> [3])
	$4 = ($7 - $4)
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$13 }
	$10 = uint_32((($6 - ($8 << [3])) + ((int_32)$1 ^ (int_32)[-1])) >> [3])
	$3 = $7
	
.LOOP $label$14:
	*($3) = *($4)
	$3 = ($3 + [8])
	$4 = ($4 + [8])
	if ( ($4 <= $6) ){ goto $label$14 }
	*(($0 + [4])) = (($7 + ($10 << [3])) + [8])
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$15 }
	CALL memmove(($7 - ($8 << [3])), $1, $5)
	
.LABEL $label$15
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$4 }
	$3 = ($9 - $2)
	$4 = [0]
	
.LOOP $label$16:
	*(($1 + $4)) = *(($2 + $4))
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$16 }
	return $1
	
.LABEL $label$6
	$4 = int_32(($1 - $7) >> [3])
	$6 = [536870911]
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $61($0)
	
.LABEL $label$1
	$7 = ($5 + ($4 << [3]))
	$4 = $7
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$17 }
	$9 = uint_32((($3 + [-8]) - $2) >> [3])
	$4 = $7
	
.LOOP $label$18:
	*($4) = *($2)
	$4 = ($4 + [8])
	$2 = ($2 + [8])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$18 }
	$4 = (($7 + ($9 << [3])) + [8])
	
.LABEL $label$17
	$6 = ($6 << [3])
	$9 = *($0)
	$2 = ($1 - $9)
	$3 = ($7 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($3, $9, $2)
	
.LABEL $label$19
	$6 = ($5 + $6)
	$5 = ($0 + [4])
	$2 = (*($5) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($4, $1, $2)
	$4 = ($4 + $2)
	
.LABEL $label$20
	*($5) = $4
	$2 = *($0)
	*($0) = $3
	*(($0 + [8])) = $6
	if ( ($2 == 0) ){ goto $label$21 }
	CALL _ZdlPv($2)
	
.LABEL $label$21
	(unreachable)
	(unreachable)
	return $7
}

void .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$1 = ($global$0 - [112])
	$global$0 = $1
	CALL $17($0)
	$2 = ($0 + [16])
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *($2), (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($1 + [48])
	$5 = ($1 + [100])
	$6 = ($1 + [108])
	$7 = ($0 + [8])
	$3 = CALL $2($7, $3)
	$8 = *($3 + [40])
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$3 }
	$9 = [3]
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	goto $label$1 
	
.LABEL $label$2
	$9 = [4]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$20 
	
.LABEL $label$22
	$3 = CALL $2($7, $3)
	$8 = *($3 + [40])
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$11 }
	$9 = [3]
	goto $label$4 
	
.LABEL $label$21
	if ( ((int_64)*($3 + [16]) < (int_64)10000) ){ goto $label$8 }
	$9 = [0]
	goto $label$4 
	
.LABEL $label$20
	if ( ((int_64)((int_64)$8 / (int_64)86400) >= (int_64)(CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[86400]))) ){ goto $label$9 }
	$9 = [5]
	goto $label$4 
	
.LABEL $label$19
	$10 = *($0)
	CALL eosio_assert([1], [8544])
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$7), [8579])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$2()), [8625])
	*($3 + [16]) = ((int_64)*($3 + [16]) + (int_64)-10000)
	$11 = ($3 + [8])
	*($1 + [72]) = *($11)
	$8 = *($3)
	*($3 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$8 == (int_64)*($3)), [8676])
	*((($1 + [56]) + [8])) = $4
	*($1 + [60]) = $1
	*($1 + [56]) = $1
	*($1 + [80]) = ($1 + [56])
	*((($1 + [88]) + [8])) = ($3 + [16])
	*($5) = ($3 + [24])
	*((($1 + [88]) + [16])) = ($3 + [32])
	*($6) = ($3 + [40])
	*($1 + [92]) = $11
	*($1 + [88]) = $3
	CALL $4(($1 + [88]), ($1 + [80]))
	CALL db_update_i64(*($3 + [52]), $10, $1, [48])
	$12 = ($0 + [24])
	if ( (uint_64)($8 <= *($12)) ){ goto $label$6 }
	$9 = [6]
	goto $label$4 
	
.LABEL $label$18
	*($12) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$9 = [7]
	goto $label$4 
	
.LABEL $label$17
	*($1 + [88]) = *($11)
	if ( (CALL $64(($1 + [72]), ($1 + [88]), [8]) == 0) ){ goto $label$10 }
	$9 = [8]
	goto $label$4 
	
.LABEL $label$16
	$12 = ($3 + [56])
	$11 = *($12)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$5 }
	$9 = [10]
	goto $label$4 
	
.LABEL $label$15
	$11 = CALL db_idx64_find_primary(*($7), *($2), (int_64)-6030912129794572288, ($1 + [80]), $8)
	*($12) = $11
	$9 = [9]
	goto $label$4 
	
.LABEL $label$14
	CALL db_idx64_update($11, $10, ($1 + [88]))
	$9 = [1]
	goto $label$4 
	
.LABEL $label$13
	CALL eosio_assert([1], [8972])
	$3 = CALL db_next_i64(*($3 + [52]), $1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$9 = [4]
	goto $label$4 
	
.LABEL $label$12
	$global$0 = ($1 + [112])
	return 
	
.LABEL $label$11
	$9 = [0]
	goto $label$4 
	
.LABEL $label$10
	$9 = [1]
	goto $label$4 
	
.LABEL $label$9
	$9 = [1]
	goto $label$4 
	
.LABEL $label$8
	$9 = [1]
	goto $label$4 
	
.LABEL $label$7
	$9 = [2]
	goto $label$4 
	
.LABEL $label$6
	$9 = [7]
	goto $label$4 
	
.LABEL $label$5
	$9 = [9]
	goto $label$4 
	$9
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $66($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [8539])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 & [-8]) != (int_32)[8]), [8539])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($3 + [52]) = ($1 + [16])
	$2 = ($3 + [16])
	CALL $30(($3 + [48]), $2)
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $69($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $31(($3 + [48]), $3)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8288])
	
.LABEL $label$2
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$5 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8261]
	$7 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$11 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$8 = ($8 + [-91])
	goto $label$9 
	
.LABEL $label$11
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$7
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$12 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8273]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$18 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$13 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$12
	$4 = (int_64)5
	
.LOOP $label$19:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$19 }
	if ( ((int_64)6138663577826885632 != (int_64)$1) ){ goto $label$4 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [8248]
	$7 = (int_64)0
	
.LOOP $label$20:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$21 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$8 = ($8 + [-91])
	goto $label$22 
	
.LABEL $label$23
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$20 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*(($3 + [96])) = $0
	*(($3 + [104])) = (int_64)-1
	*(($3 + [112])) = (int_64)0
	*(($3 + [120])) = [0]
	*(($3 + [124])) = [0]
	*($3 + [88]) = $0
	*($3 + [80]) = $0
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)-2507754169720236688) ){ goto $label$28 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3) = *($3 + [72])
	CALL $27(($3 + [80]), $3)
	$10 = *(($3 + [112]))
	if ( $10 ){ goto $label$24 }
	goto $label$4 
	
.LABEL $label$29
	if ( ((int_64)$2 == (int_64)-7954134735498772480) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)-6077959540857372672) ){ goto $label$28 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [24]) = *($3 + [48])
	CALL $28(($3 + [80]), ($3 + [24]))
	
.LABEL $label$28
	$10 = *(($3 + [112]))
	if ( ($10 == 0) ){ goto $label$4 }
	goto $label$24 
	
.LABEL $label$27
	*($3 + [68]) = [0]
	*($3 + [64]) = [3]
	*($3 + [8]) = *($3 + [64])
	CALL $29(($3 + [80]), ($3 + [8]))
	$10 = *(($3 + [112]))
	if ( $10 ){ goto $label$24 }
	goto $label$4 
	
.LABEL $label$26
	*($3 + [60]) = [0]
	*($3 + [56]) = [4]
	*($3 + [16]) = *($3 + [56])
	CALL $28(($3 + [80]), ($3 + [16]))
	$10 = *(($3 + [112]))
	if ( $10 ){ goto $label$24 }
	goto $label$4 
	
.LABEL $label$25
	*($3 + [44]) = [0]
	*($3 + [40]) = [5]
	*($3 + [32]) = *($3 + [40])
	CALL $28(($3 + [80]), ($3 + [32]))
	$10 = *(($3 + [112]))
	if ( ($10 == 0) ){ goto $label$4 }
	
.LABEL $label$24
	$11 = ($3 + [116])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$31 }
	
.LOOP $label$32:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$33 }
	CALL _ZdlPv($8)
	
.LABEL $label$33
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$32 }
	$6 = *(($3 + [112]))
	goto $label$30 
	
.LABEL $label$31
	$6 = $10
	
.LABEL $label$30
	*($11) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$4
	CALL $63([0])
	$global$0 = ($3 + [128])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $66($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9004])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $66($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = int_32(($1 - $0) >> [3])
	if ( ((uint_32)$3 > (uint_32)[5]) ){ goto $label$21 }
	goto $label$3 
	
.LABEL $label$22
	$5 = *($0)
	$3 = ($1 + [-8])
	$4 = *($3)
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$3 }
	*($0) = $4
	*($3) = $5
	return [1]
	
.LABEL $label$21
	$5 = *($0 + [16])
	$6 = *($0)
	$4 = *($0 + [8])
	if ( ((uint_64)$4 >= (uint_64)$6) ){ goto $label$17 }
	if ( ((uint_64)$5 >= (uint_64)$4) ){ goto $label$14 }
	*($0) = $5
	*(($0 + [16])) = $6
	goto $label$13 
	
.LABEL $label$20
	$3 = ($1 + [-8])
	$4 = *($3)
	$6 = *($0)
	$5 = *($0 + [8])
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$16 }
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$9 }
	*($0) = $4
	*($3) = $6
	return [1]
	
.LABEL $label$19
	CALL $47($0, ($0 + [8]), ($0 + [16]), ($0 + [24]), ($1 + [-8]), $2)
	return [1]
	
.LABEL $label$18
	$3 = ($1 + [-8])
	$5 = *($0 + [16])
	$6 = *($0)
	$4 = *($0 + [8])
	if ( ((uint_64)$4 >= (uint_64)$6) ){ goto $label$15 }
	if ( ((uint_64)$5 >= (uint_64)$4) ){ goto $label$8 }
	*($0) = $5
	*(($0 + [16])) = $6
	goto $label$7 
	
.LABEL $label$17
	if ( ((uint_64)$5 >= (uint_64)$4) ){ goto $label$11 }
	*(($0 + [16])) = $4
	*(($3 = ($0 + [8]))) = $5
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$12 }
	*($0) = $5
	*($3) = $6
	$7 = ($0 + [24])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$16
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$3 }
	*(($2 = ($0 + [8]))) = $4
	*($3) = $5
	$5 = *($0)
	$4 = *($2)
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$3 }
	*($0) = $4
	*($2) = $5
	return [1]
	
.LABEL $label$15
	if ( ((uint_64)$5 >= (uint_64)$4) ){ goto $label$5 }
	*(($0 + [16])) = $4
	*(($2 = ($0 + [8]))) = $5
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$6 }
	*($0) = $5
	*($2) = $6
	$6 = *($3)
	if ( (uint_64)($6 <= $4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$14
	*($0) = $4
	*(($3 = ($0 + [8]))) = $6
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$11 }
	*(($0 + [16])) = $6
	*($3) = $5
	
.LABEL $label$13
	$4 = $6
	
.LABEL $label$12
	$7 = ($0 + [24])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	$4 = $5
	$7 = ($0 + [24])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$10
	$8 = [0]
	$9 = [16]
	$5 = *($7)
	if ( ((uint_64)$5 >= (uint_64)$4) ){ goto $label$2 }
	$10 = [2]
	goto $label$1 
	
.LABEL $label$9
	*($0) = $5
	*(($2 = ($0 + [8]))) = $6
	$4 = *($3)
	if ( ((uint_64)$4 >= (uint_64)$6) ){ goto $label$3 }
	*($2) = $4
	*($3) = $6
	return [1]
	
.LABEL $label$8
	*($0) = $4
	*(($2 = ($0 + [8]))) = $6
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$5 }
	*(($0 + [16])) = $6
	*($2) = $5
	
.LABEL $label$7
	$4 = $6
	
.LABEL $label$6
	$6 = *($3)
	if ( ((uint_64)$6 >= (uint_64)$4) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$4 = $5
	$6 = *($3)
	if ( ((uint_64)$6 >= (uint_64)$4) ){ goto $label$3 }
	
.LABEL $label$4
	*(($2 = ($0 + [16]))) = $6
	*($3) = $4
	$3 = ($0 + [8])
	$5 = *($3)
	$4 = *($2)
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$3 }
	*($2) = $5
	*($3) = $4
	$5 = *($0)
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$3 }
	*($0) = $4
	*(($0 + [8])) = $5
	return [1]
	
.LABEL $label$3
	return [1]
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	
.LOOP $label$23:
	goto $label$34 
	
.LABEL $label$40
	$3 = $9
	$10 = [3]
	goto $label$23 
	
.LABEL $label$39
	*((($2 = ($0 + $3)) + [8])) = $4
	if ( ($3 == 0) ){ goto $label$24 }
	$10 = [4]
	goto $label$23 
	
.LABEL $label$38
	$3 = ($3 + [-8])
	$4 = *(($2 + [-8]))
	if ( (uint_64)($5 <= $4) ){ goto $label$25 }
	$10 = [5]
	goto $label$23 
	
.LABEL $label$37
	*((($0 + $3) + [8])) = $5
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[8]) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$36
	*($0) = $5
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[8]) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$35
	$9 = ($9 + [8])
	$4 = *($7)
	$7 = $3
	$5 = *($7)
	if ( (uint_64)($5 <= $4) ){ goto $label$30 }
	$10 = [0]
	goto $label$23 
	
.LABEL $label$34
	$3 = ($7 + [8])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$31 }
	$10 = [8]
	goto $label$23 
	
.LABEL $label$33
	return [1]
	
.LABEL $label$32
	return ((int_32)($7 + [8]) == (int_32)$1)
	
.LABEL $label$31
	$10 = [1]
	goto $label$23 
	
.LABEL $label$30
	$10 = [2]
	goto $label$23 
	
.LABEL $label$29
	$10 = [6]
	goto $label$23 
	
.LABEL $label$28
	$10 = [0]
	goto $label$23 
	
.LABEL $label$27
	$10 = [6]
	goto $label$23 
	
.LABEL $label$26
	$10 = [0]
	goto $label$23 
	
.LABEL $label$25
	$10 = [3]
	goto $label$23 
	
.LABEL $label$24
	$10 = [7]
	goto $label$23 
	$3
	return $10
}

void .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17400])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17208]
	$3 = (((int_32)$1 * (int_32)[12]) + [17208])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9008]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9012])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9008]) = [1]
	$2 = ($2 << [16])
	*([0] + [9012]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9012])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9012]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9008]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9008]) = [1]
	$3 = ($3 << [16])
	*([0] + [9012]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9012])
	
.LABEL $label$10
	*([0] + [9012]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8539])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $30($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8539])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8539])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8539])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [56]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8539])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8539])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8539])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8539])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $61($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [60 align=4]) = (int_64)0
	*($0 + [72]) = (int_64)0
	$3 = [0]
	*(($0 + [24])) = [0]
	*(($4 = ($0 + [80]))) = (int_64)1397703940
	CALL eosio_assert([1], [8358])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$4 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8407])
	*($0 + [88]) = $1
	CALL $43(*($2 + [4]), $0)
	*($0 + [92]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8786])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $21($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8539])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((uint_64)$7 >= (uint_64)$8) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$8 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$7 
	
.LABEL $label$9
	$9 = [0]
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$5 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((uint_64)$6 >= (uint_64)$8) ){ goto $label$6 }
	*($0) = $6
	*($1) = $8
	$9 = [2]
	$7 = *($2)
	$8 = *($3)
	if ( (uint_64)($8 <= $7) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$8
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((uint_64)$7 >= (uint_64)$8) ){ goto $label$6 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$7
	$7 = $8
	
.LABEL $label$6
	$8 = *($3)
	if ( ((uint_64)$8 >= (uint_64)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = $6
	$8 = *($3)
	if ( (uint_64)($8 <= $7) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = *($3)
	$7 = *($4)
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($2) = $8
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$11 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$10 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	$6 = *($3)
	$7 = *($4)
	if ( (uint_64)($7 <= $6) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$11
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( (uint_64)($7 <= $6) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$10
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( (uint_64)($7 <= $6) ){ goto $label$1 }
	
.LABEL $label$2
	return $9
	
.LABEL $label$1
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$14 }
	*($2) = $7
	*($3) = $6
	$6 = *($1)
	$7 = *($2)
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$13 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((uint_64)$7 >= (uint_64)$6) ){ goto $label$12 }
	*($0) = $7
	*($1) = $6
	return ($9 + [4])
	
.LABEL $label$14
	return ($9 + [1])
	
.LABEL $label$13
	return ($9 + [2])
	
.LABEL $label$12
	return ($9 + [3])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	
.LOOP $label$1:
	$5 = ($1 + [-16])
	$6 = ($1 + [-8])
	
.LOOP $label$6:
	$4 = $0
	$0 = ($1 - $4)
	$7 = int_32($0 >> [3])
	if ( ((uint_32)$7 <= (uint_32)[5]) ){ goto $label$45 }
	if ( ((int_32)$0 <= (int_32)[247]) ){ goto $label$44 }
	$8 = ($4 + (((int_32)$7 / (int_32)[2]) << [3]))
	if ( ((int_32)$0 < (int_32)[7993]) ){ goto $label$46 }
	$0 = (((int_32)$7 / (int_32)[4]) << [3])
	$9 = CALL $47($4, ($4 + $0), $8, ($8 + $0), $6, $2)
	goto $label$16 
	
.LABEL $label$46
	$12 = *($6)
	$10 = *($4)
	$11 = *($8)
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$49 }
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$48 }
	*($4) = $12
	*($6) = $10
	$9 = [1]
	$11 = *($8)
	$10 = *($4)
	if ( (uint_64)($10 <= $11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$49
	$9 = [0]
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$16 }
	*($8) = $12
	*($6) = $11
	$9 = [1]
	$11 = *($4)
	$12 = *($8)
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$16 }
	*($4) = $12
	*($8) = $11
	goto $label$47 
	
.LABEL $label$48
	*($4) = $11
	*($8) = $10
	$9 = [1]
	$12 = *($6)
	if ( ((uint_64)$12 >= (uint_64)$10) ){ goto $label$16 }
	*($8) = $12
	*($6) = $10
	
.LABEL $label$47
	$9 = [2]
	$11 = *($8)
	$10 = *($4)
	if ( (uint_64)($10 <= $11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$45
	goto $label$30 
	
.LABEL $label$50
	$11 = *($4)
	$0 = ($1 + [-8])
	$12 = *($0)
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$23 }
	*($4) = $12
	*($0) = $11
	return 
	
.LABEL $label$44
	$11 = *($4 + [16])
	$10 = *($4)
	$12 = *($4 + [8])
	if ( ((uint_64)$12 >= (uint_64)$10) ){ goto $label$56 }
	if ( ((uint_64)$11 >= (uint_64)$12) ){ goto $label$55 }
	*($4) = $11
	*(($4 + [16])) = $10
	goto $label$54 
	
.LABEL $label$56
	if ( ((uint_64)$11 >= (uint_64)$12) ){ goto $label$52 }
	*(($4 + [16])) = $12
	*(($0 = ($4 + [8]))) = $11
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$53 }
	*($4) = $11
	*($0) = $10
	$6 = ($4 + [24])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$51 }
	goto $label$21 
	
.LABEL $label$55
	*($4) = $12
	*(($0 = ($4 + [8]))) = $10
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$52 }
	*(($4 + [16])) = $10
	*($0) = $11
	
.LABEL $label$54
	$12 = $10
	
.LABEL $label$53
	$6 = ($4 + [24])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$51 }
	goto $label$22 
	
.LABEL $label$52
	$12 = $11
	$6 = ($4 + [24])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$20 }
	
.LABEL $label$51
	$8 = [16]
	$11 = *($6)
	if ( ((uint_64)$11 >= (uint_64)$12) ){ goto $label$31 }
	$13 = [2]
	goto $label$3 
	
.LABEL $label$43
	$0 = ($1 + [-8])
	$12 = *($0)
	$10 = *($4)
	$11 = *($4 + [8])
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$40 }
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$38 }
	*($4) = $12
	*($0) = $10
	return 
	
.LABEL $label$42
	CALL $47($4, ($4 + [8]), ($4 + [16]), ($4 + [24]), ($1 + [-8]), $2)
	return 
	
.LABEL $label$41
	$0 = ($1 + [-8])
	$11 = *($4 + [16])
	$10 = *($4)
	$12 = *($4 + [8])
	if ( ((uint_64)$12 >= (uint_64)$10) ){ goto $label$39 }
	if ( ((uint_64)$11 >= (uint_64)$12) ){ goto $label$37 }
	*($4) = $11
	*(($4 + [16])) = $10
	goto $label$36 
	
.LABEL $label$40
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$26 }
	*(($7 = ($4 + [8]))) = $12
	*($0) = $11
	$11 = *($4)
	$12 = *($7)
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$25 }
	*($4) = $12
	*($7) = $11
	return 
	
.LABEL $label$39
	if ( ((uint_64)$11 >= (uint_64)$12) ){ goto $label$35 }
	*(($4 + [16])) = $12
	*(($7 = ($4 + [8]))) = $11
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$33 }
	*($4) = $11
	*($7) = $10
	$14 = *($0)
	if ( ((uint_64)$14 >= (uint_64)$12) ){ goto $label$19 }
	goto $label$32 
	
.LABEL $label$38
	*($4) = $11
	*(($7 = ($4 + [8]))) = $10
	$12 = *($0)
	if ( ((uint_64)$12 >= (uint_64)$10) ){ goto $label$24 }
	*($7) = $12
	*($0) = $10
	return 
	
.LABEL $label$37
	*($4) = $12
	*(($7 = ($4 + [8]))) = $10
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$34 }
	*(($4 + [16])) = $10
	*($7) = $11
	
.LABEL $label$36
	$12 = $10
	$14 = *($0)
	if ( ((uint_64)$14 >= (uint_64)$12) ){ goto $label$17 }
	goto $label$32 
	
.LABEL $label$35
	$12 = $11
	$14 = *($0)
	if ( ((uint_64)$14 >= (uint_64)$12) ){ goto $label$18 }
	goto $label$32 
	
.LABEL $label$34
	$12 = $11
	
.LABEL $label$33
	$14 = *($0)
	if ( ((uint_64)$14 >= (uint_64)$12) ){ goto $label$29 }
	
.LABEL $label$32
	*(($7 = ($4 + [16]))) = $14
	*($0) = $12
	$0 = ($4 + [8])
	$11 = *($0)
	$12 = *($7)
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$28 }
	*($7) = $11
	*($0) = $12
	$11 = *($4)
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$27 }
	*($4) = $12
	*(($4 + [8])) = $11
	return $13
	
.LABEL $label$31
	$13 = [0]
	goto $label$3 
	
.LABEL $label$30
	$13 = [7]
	goto $label$3 
	
.LABEL $label$29
	$13 = [7]
	goto $label$3 
	
.LABEL $label$28
	$13 = [7]
	goto $label$3 
	
.LABEL $label$27
	$13 = [7]
	goto $label$3 
	
.LABEL $label$26
	$13 = [7]
	goto $label$3 
	
.LABEL $label$25
	$13 = [7]
	goto $label$3 
	
.LABEL $label$24
	$13 = [7]
	goto $label$3 
	
.LABEL $label$23
	$13 = [7]
	goto $label$3 
	
.LABEL $label$22
	$13 = [7]
	goto $label$3 
	
.LABEL $label$21
	$13 = [7]
	goto $label$3 
	
.LABEL $label$20
	$13 = [7]
	goto $label$3 
	
.LABEL $label$19
	$13 = [7]
	goto $label$3 
	
.LABEL $label$18
	$13 = [7]
	goto $label$3 
	
.LABEL $label$17
	$13 = [7]
	goto $label$3 
	
.LABEL $label$16
	$11 = *($8)
	$10 = *($4)
	if ( ((uint_64)$10 >= (uint_64)$11) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = $6
	$3 = ($4 + [8])
	if ( ($3 <= $7) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$0 = $5
	
.LOOP $label$57:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	$12 = *($0)
	$7 = ($0 + [-8])
	$0 = $7
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$57 }
	*($4) = $12
	*(($7 = ($7 + [8]))) = $10
	$9 = ($9 + [1])
	$3 = ($4 + [8])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$11 }
	
.LABEL $label$13
	
.LOOP $label$58:
	$0 = ($3 + [-8])
	$12 = *($8)
	
.LOOP $label$59:
	$0 = ($0 + [8])
	$11 = *($0)
	if ( (uint_64)($11 <= $12) ){ goto $label$59 }
	$3 = ($0 + [8])
	
.LOOP $label$60:
	$7 = ($7 + [-8])
	$10 = *($7)
	if ( ((uint_64)$10 >= (uint_64)$12) ){ goto $label$60 }
	if ( ((uint_32)$0 > (uint_32)$7) ){ goto $label$61 }
	*($0) = $10
	*($7) = $11
	$8 = ( $7 ? $8 : ((int_32)$8 == (int_32)$0) )
	$9 = ($9 + [1])
	goto $label$58 
	
.LABEL $label$61
	$3 = $0
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$7 = ($4 + [8])
	$11 = *($6)
	if ( (uint_64)($10 <= $11) ){ goto $label$66 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$65 }
	$7 = ($4 + [16])
	
.LOOP $label$68:
	$0 = ($7 + [-8])
	$12 = *($0)
	if ( (uint_64)($10 <= $12) ){ goto $label$67 }
	$7 = ($7 + [8])
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$68 }
	goto $label$64 
	
.LABEL $label$67
	*($0) = $11
	*($6) = $12
	
.LABEL $label$66
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$63 }
	
.LOOP $label$69:
	$0 = ($7 + [-8])
	$12 = *($4)
	
.LOOP $label$70:
	$0 = ($0 + [8])
	$11 = *($0)
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$70 }
	$7 = ($0 + [8])
	
.LOOP $label$71:
	$6 = ($6 + [-8])
	$10 = *($6)
	if ( (uint_64)($12 <= $10) ){ goto $label$71 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$72 }
	*($0) = $10
	*($6) = $11
	goto $label$69 
	
.LABEL $label$72
	$7 = ([4] & [7])
	if ( ((uint_32)$7 > (uint_32)[4]) ){ goto $label$62 }
	goto $label$4 
	
.LABEL $label$65
	$13 = [7]
	goto $label$3 
	
.LABEL $label$64
	$13 = [7]
	goto $label$3 
	
.LABEL $label$63
	$13 = [7]
	goto $label$3 
	
.LABEL $label$62
	$13 = [7]
	goto $label$3 
	
.LABEL $label$11
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$10
	$11 = *($3)
	$12 = *($8)
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$9 }
	*($3) = $12
	*($8) = $11
	if ( ($9 + [1]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( $9 ){ goto $label$7 }
	
.LABEL $label$8
	$7 = CALL $48($4, $3, $2)
	$0 = ($3 + [8])
	if ( CALL $48($0, $1, $2) ){ goto $label$5 }
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $46($4, $3, $2)
	$0 = ($3 + [8])
	goto $label$6 
	
.LABEL $label$5
	$1 = ( $1 ? $3 : $7 )
	$0 = $4
	$7 = (( [1] ? [2] : $7 ) & [7])
	if ( ((uint_32)$7 <= (uint_32)[4]) ){ goto $label$4 }
	$13 = [7]
	goto $label$3 
	
.LABEL $label$4
	if ( (([1] << $7) & [21]) ){ goto $label$1 }
	$13 = [7]
	
.LABEL $label$3
	
.LOOP $label$73:
	goto $label$81 
	
.LABEL $label$88
	$0 = $8
	$13 = [3]
	goto $label$73 
	
.LABEL $label$87
	*((($7 = ($4 + $0)) + [8])) = $12
	if ( ($0 == 0) ){ goto $label$75 }
	$13 = [4]
	goto $label$73 
	
.LABEL $label$86
	$0 = ($0 + [-8])
	$12 = *(($7 + [-8]))
	if ( (uint_64)($11 <= $12) ){ goto $label$76 }
	$13 = [5]
	goto $label$73 
	
.LABEL $label$85
	$0 = (($4 + $0) + [8])
	goto $label$74 
	
.LABEL $label$84
	$0 = $4
	$13 = [6]
	goto $label$73 
	
.LABEL $label$83
	*($0) = $11
	$0 = ($6 + [8])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$77 }
	$13 = [1]
	goto $label$73 
	
.LABEL $label$82
	$8 = ($8 + [8])
	$12 = *($6)
	$6 = $0
	$11 = *($6)
	if ( (uint_64)($11 <= $12) ){ goto $label$79 }
	$13 = [0]
	goto $label$73 
	
.LABEL $label$81
	$0 = ($6 + [8])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$78 }
	$13 = [7]
	goto $label$73 
	
.LABEL $label$80
	return 
	
.LABEL $label$79
	$13 = [2]
	goto $label$73 
	
.LABEL $label$78
	$13 = [1]
	goto $label$73 
	
.LABEL $label$77
	$13 = [7]
	goto $label$73 
	
.LABEL $label$76
	$13 = [3]
	goto $label$73 
	
.LABEL $label$75
	$13 = [8]
	goto $label$73 
	
.LABEL $label$74
	$13 = [6]
	goto $label$73 
	
.LABEL $label$2
	CALL $46(($3 + [8]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$7
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8352])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8352])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $61($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $69($0)
	
.LABEL $label$1
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [8])
	$4 = *(($0 + [36]))
	$3 = *(($0 + [32]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$2), [8465])
	if ( $6 ){ goto $label$3 }
	return [0]
	
.LABEL $label$4
	$5 = [0]
	$4 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $2($2, $4)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$2), [8465])
	
.LABEL $label$3
	$5 = [0]
	if ( ((int_64)*($6 + [24]) < (int_64)100001) ){ goto $label$2 }
	$5 = [1]
	$1 = *($6 + [16])
	if ( ((int_64)$1 <= (int_64)10000) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	return (((int_64)$1 > (int_64)99) & (int_64)(*($6 + [32]) == 0))
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [24]) = $2
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$7:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$6 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [8465])
	goto $label$4 
	
.LABEL $label$5
	$7 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $2($4, $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [8465])
	
.LABEL $label$4
	$5 = ($8 + [32])
	$6 = ($8 + [8])
	if ( ((int_64)*($6) != (int_64)$2) ){ goto $label$8 }
	if ( ((int_64)*($5) != (int_64)0) ){ goto $label$2 }
	
.LABEL $label$8
	CALL $10(($3 + [8]), $0)
	if ( (int_64)(*($5) == 0) ){ goto $label$9 }
	*($3 + [32]) = *($6)
	*($3 + [112]) = $4
	CALL $11(($3 + [120]), ($3 + [112]), ($3 + [32]))
	CALL $12(($3 + [88]), ($3 + [112]), ($3 + [32]))
	if ( ((int_32)*($3 + [124]) != (int_32)*($3 + [92])) ){ goto $label$9 }
	$9 = *($3 + [12])
	$7 = *($3 + [8])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$10 }
	$1 = *($6)
	
.LOOP $label$11:
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$10 }
	$7 = ($7 + [8])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$9 }
	$10 = ($7 + [8])
	$9 = ($9 - $10)
	$11 = int_32($9 >> [3])
	if ( ($9 == 0) ){ goto $label$12 }
	CALL memmove($7, $10, $9)
	
.LABEL $label$12
	*($3 + [12]) = ($7 + ($11 << [3]))
	
.LABEL $label$9
	$2 = *($0)
	CALL eosio_assert([1], [8544])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [8579])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [8625])
	$7 = ($8 + [8])
	*($3 + [104]) = *($7)
	*($7) = *($3 + [24])
	$1 = *($8)
	*(($8 + [32])) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [8676])
	*($3 + [96]) = (($3 + [32]) + [48])
	*($3 + [92]) = ($3 + [32])
	*($3 + [88]) = ($3 + [32])
	*($3 + [112]) = ($3 + [88])
	*($3 + [124]) = $6
	*($3 + [120]) = $8
	*($3 + [128]) = ($8 + [16])
	*($3 + [132]) = ($8 + [24])
	*($3 + [136]) = $5
	*($3 + [140]) = ($8 + [40])
	CALL $4(($3 + [120]), ($3 + [112]))
	CALL db_update_i64(*($8 + [52]), $2, ($3 + [32]), [48])
	$7 = ($0 + [24])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$13 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($3 + [120]) = *($6)
	if ( (CALL $64(($3 + [104]), ($3 + [120]), [8]) == 0) ){ goto $label$14 }
	$6 = ($8 + [56])
	$7 = *($6)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$15 }
	$7 = CALL db_idx64_find_primary(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912129794572288, ($3 + [112]), $1)
	*($6) = $7
	
.LABEL $label$15
	CALL db_idx64_update($7, $2, ($3 + [120]))
	
.LABEL $label$14
	$8 = *($3 + [8])
	$7 = $8
	$6 = *($3 + [12])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$18 }
	$1 = *($3 + [24])
	$7 = $8
	
.LOOP $label$19:
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$18 }
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$16 }
	
.LABEL $label$17
	if ( ((uint_32)$6 >= (uint_32)*($3 + [16])) ){ goto $label$21 }
	*($6) = *($3 + [24])
	*($3 + [12]) = ($6 + [8])
	goto $label$20 
	
.LABEL $label$21
	CALL $13(($3 + [8]), ($3 + [24]))
	
.LABEL $label$20
	$1 = (int_64)5
	
.LOOP $label$22:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$22 }
	$1 = (int_64)5
	
.LOOP $label$23:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$23 }
	*(($3 + [64])) = [0]
	*($3 + [40]) = (int_64)6138663577826885632
	*($3 + [32]) = (int_64)6138663577826885632
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [68]) = [0]
	$4 = *($3 + [8])
	if ( ((int_32)*($3 + [12]) == (int_32)$4) ){ goto $label$24 }
	$10 = (($3 + [32]) + [8])
	$9 = ($3 + [56])
	$11 = ($3 + [60])
	$8 = [0]
	$6 = [0]
	$1 = *($4)
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$25 }
	$12 = [2]
	goto $label$1 
	
.LABEL $label$25
	$12 = [0]
	goto $label$1 
	
.LABEL $label$24
	$12 = [6]
	goto $label$1 
	
.LABEL $label$16
	$12 = [17]
	goto $label$1 
	
.LABEL $label$3
	$12 = [19]
	goto $label$1 
	
.LABEL $label$2
	$12 = [19]
	
.LABEL $label$1
	
.LOOP $label$26:
	goto $label$73 
	
.LABEL $label$74
	$1 = *($4)
	$6 = *($11)
	$8 = *($9)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$47 }
	$12 = [0]
	goto $label$26 
	
.LABEL $label$73
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$40 }
	$12 = [1]
	goto $label$26 
	
.LABEL $label$72
	$6 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$71
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$46 }
	$12 = [25]
	goto $label$26 
	
.LABEL $label$70
	CALL eosio_assert(((int_32)*(($5 + [84])) == (int_32)($3 + [32])), [8465])
	if ( ($5 == 0) ){ goto $label$45 }
	$12 = [26]
	goto $label$26 
	
.LABEL $label$69
	if ( *($5 + [50]) ){ goto $label$43 }
	goto $label$44 
	
.LABEL $label$68
	$7 = CALL db_find_i64(*($3 + [32]), *($10), (int_64)-5915305344019464192, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$37 }
	$12 = [3]
	goto $label$26 
	
.LABEL $label$67
	$7 = CALL $7(($3 + [32]), $7)
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)($3 + [32])), [8465])
	if ( (*($7 + [50]) == 0) ){ goto $label$36 }
	$12 = [4]
	goto $label$26 
	
.LABEL $label$66
	$4 = ($4 + [8])
	if ( ((int_32)*($3 + [12]) != (int_32)$4) ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$65
	$8 = ($4 + [8])
	$7 = (*($3 + [12]) - $8)
	$6 = int_32($7 >> [3])
	if ( ($7 == 0) ){ goto $label$27 }
	$12 = [22]
	goto $label$26 
	
.LABEL $label$64
	CALL memmove($4, $8, $7)
	$12 = [23]
	goto $label$26 
	
.LABEL $label$63
	$7 = ($4 + ($6 << [3]))
	*($3 + [12]) = $7
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$35 }
	$12 = [6]
	goto $label$26 
	
.LABEL $label$62
	CALL $14($0, ($3 + [8]))
	$8 = *($3 + [56])
	if ( ($8 == 0) ){ goto $label$34 }
	$12 = [7]
	goto $label$26 
	
.LABEL $label$61
	$5 = ($3 + [60])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$33 }
	$12 = [8]
	goto $label$26 
	
.LABEL $label$60
	$12 = [9]
	goto $label$26 
	
.LABEL $label$59
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$31 }
	$12 = [10]
	goto $label$26 
	
.LABEL $label$58
	if ( ((*($6 + [52]) & [1]) == 0) ){ goto $label$30 }
	$12 = [11]
	goto $label$26 
	
.LABEL $label$57
	CALL _ZdlPv(*(($6 + [60])))
	$12 = [12]
	goto $label$26 
	
.LABEL $label$56
	CALL _ZdlPv($6)
	$12 = [13]
	goto $label$26 
	
.LABEL $label$55
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$32 }
	$12 = [14]
	goto $label$26 
	
.LABEL $label$54
	$7 = *(($3 + [56]))
	goto $label$29 
	
.LABEL $label$53
	$7 = $8
	$12 = [15]
	goto $label$26 
	
.LABEL $label$52
	*($5) = $8
	CALL _ZdlPv($7)
	$12 = [16]
	goto $label$26 
	
.LABEL $label$51
	$8 = *($3 + [8])
	$12 = [17]
	goto $label$26 
	
.LABEL $label$50
	if ( ($8 == 0) ){ goto $label$28 }
	$12 = [18]
	goto $label$26 
	
.LABEL $label$49
	*($3 + [12]) = $8
	CALL _ZdlPv($8)
	$12 = [19]
	goto $label$26 
	
.LABEL $label$48
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$47
	$12 = [2]
	goto $label$26 
	
.LABEL $label$46
	$12 = [2]
	goto $label$26 
	
.LABEL $label$45
	$12 = [21]
	goto $label$26 
	
.LABEL $label$44
	$12 = [21]
	goto $label$26 
	
.LABEL $label$43
	$12 = [4]
	goto $label$26 
	
.LABEL $label$42
	$12 = [6]
	goto $label$26 
	
.LABEL $label$41
	$12 = [5]
	goto $label$26 
	
.LABEL $label$40
	$12 = [24]
	goto $label$26 
	
.LABEL $label$39
	$12 = [2]
	goto $label$26 
	
.LABEL $label$38
	$12 = [0]
	goto $label$26 
	
.LABEL $label$37
	$12 = [21]
	goto $label$26 
	
.LABEL $label$36
	$12 = [21]
	goto $label$26 
	
.LABEL $label$35
	$12 = [5]
	goto $label$26 
	
.LABEL $label$34
	$12 = [16]
	goto $label$26 
	
.LABEL $label$33
	$12 = [20]
	goto $label$26 
	
.LABEL $label$32
	$12 = [9]
	goto $label$26 
	
.LABEL $label$31
	$12 = [13]
	goto $label$26 
	
.LABEL $label$30
	$12 = [12]
	goto $label$26 
	
.LABEL $label$29
	$12 = [15]
	goto $label$26 
	
.LABEL $label$28
	$12 = [19]
	goto $label$26 
	
.LABEL $label$27
	$12 = [23]
	goto $label$26 
	$12
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$5 = ($global$0 - [160])
	$global$0 = $5
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	$8 = *($4)
	$9 = ($8 & [1])
	$7 = ($4 + [1])
	$6 = *($4 + [8])
	$10 = ( $6 ? $7 : $9 )
	$11 = ( *($4 + [4]) ? uint_32($8 >> [1]) : $9 )
	if ( ($11 == 0) ){ goto $label$3 }
	$9 = ($10 + $11)
	$8 = $10
	
.LOOP $label$5:
	if ( (CALL $62(*($8)) == 0) ){ goto $label$4 }
	$8 = ($8 + [1])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$5 }
	$8 = $9
	
.LABEL $label$4
	$9 = (*($4) & [1])
	$6 = *(($4 + [8]))
	goto $label$2 
	
.LABEL $label$3
	$8 = $10
	
.LABEL $label$2
	CALL $60($4, ($10 - ( $6 ? $7 : $9 )), ($8 - $10))
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$12 }
	$6 = $7
	$8 = (($4 + uint_32($8 >> [1])) + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$6 = *(($4 + [8]))
	$8 = ($6 + *(($4 + [4])))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (CALL $62(*(($8 + [-1]))) == 0) ){ goto $label$10 }
	$10 = ($6 + [1])
	
.LOOP $label$13:
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$9 }
	$11 = ($8 + [-2])
	$9 = ($8 + [-1])
	$8 = $9
	if ( CALL $62(*($11)) ){ goto $label$13 }
	$8 = $9
	
.LABEL $label$10
	$11 = [1]
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$8 = $6
	$11 = [1]
	$10 = *($4)
	if ( (($10 & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$10 = *(($4 + [8]))
	$11 = ($10 + *(($4 + [4])))
	goto $label$6 
	
.LABEL $label$7
	$11 = (($4 + uint_32($10 >> $11)) + $11)
	$10 = $7
	
.LABEL $label$6
	CALL $60($4, ($8 - $10), ($11 - $8))
	if ( ((*($4) & [1]) == 0) ){ goto $label$14 }
	$7 = *(($4 + [8]))
	
.LABEL $label$14
	$8 = [0]
	
.LOOP $label$15:
	$11 = ($7 + $8)
	$4 = ($8 + [1])
	$8 = $4
	if ( *($11) ){ goto $label$15 }
	$12 = (CASTING uint_64)(uint_32 ($4 + [-1]))
	$2 = (int_64)0
	$13 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$16:
	$15 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$12) ){ goto $label$17 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$8 = ($8 + [-91])
	goto $label$18 
	
.LABEL $label$19
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$21 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$20 
	
.LABEL $label$21
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$20
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)4294967291)
	if ( ((int_64)$13 != (int_64)55834574842) ){ goto $label$16 }
	if ( ((int_64)$14 == (int_64)*($0)) ){ goto $label$1 }
	$2 = (int_64)5
	
.LOOP $label$22:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$22 }
	$2 = (int_64)5
	
.LOOP $label$23:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$23 }
	*((($5 + [8]) + [32])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	*($5 + [44]) = [0]
	*($5 + [16]) = (int_64)6138663577826885632
	*($5 + [8]) = (int_64)6138663577826885632
	$7 = [0]
	$8 = CALL db_find_i64((int_64)6138663577826885632, (int_64)6138663577826885632, (int_64)-5915305344019464192, $14)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$24 }
	$7 = CALL $7(($5 + [8]), $8)
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)($5 + [8])), [8465])
	
.LABEL $label$24
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8192])
	CALL eosio_assert(*($7 + [50]), [8211])
	$10 = ($0 + [8])
	$11 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$26 }
	
.LOOP $label$28:
	$7 = ($11 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$27 }
	$11 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$10), [8465])
	goto $label$25 
	
.LABEL $label$26
	$8 = [0]
	$7 = CALL db_find_i64(*($10), *(($0 + [16])), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$25 }
	$8 = CALL $2($10, $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$10), [8465])
	
.LABEL $label$25
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8231])
	$13 = *($0)
	CALL eosio_assert($7, [8544])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$10), [8579])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [8625])
	*($8 + [16]) = ((int_64)*($8 + [16]) + (int_64)*($3))
	$7 = ($8 + [8])
	*($5 + [120]) = *($7)
	$2 = *($8)
	CALL eosio_assert([1], [8676])
	*($5 + [112]) = (($5 + [48]) + [48])
	*($5 + [108]) = ($5 + [48])
	*($5 + [104]) = ($5 + [48])
	*($5 + [128]) = ($5 + [104])
	*($5 + [140]) = $7
	*($5 + [136]) = $8
	*($5 + [144]) = ($8 + [16])
	*($5 + [148]) = ($8 + [24])
	*($5 + [152]) = ($8 + [32])
	*($5 + [156]) = ($8 + [40])
	CALL $4(($5 + [136]), ($5 + [128]))
	CALL db_update_i64(*($8 + [52]), $13, ($5 + [48]), [48])
	$11 = ($0 + [24])
	if ( (uint_64)($2 <= *($11)) ){ goto $label$29 }
	*($11) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$29
	*($5 + [136]) = *($7)
	if ( (CALL $64(($5 + [120]), ($5 + [136]), [8]) == 0) ){ goto $label$30 }
	$8 = ($8 + [56])
	$7 = *($8)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$31 }
	$7 = CALL db_idx64_find_primary(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912129794572288, ($5 + [128]), $2)
	*($8) = $7
	
.LABEL $label$31
	CALL db_idx64_update($7, $13, ($5 + [136]))
	
.LABEL $label$30
	if ( (CALL $8($0, $1) == 0) ){ goto $label$32 }
	CALL $9($0, $1, $14)
	
.LABEL $label$32
	$11 = *($5 + [32])
	if ( ($11 == 0) ){ goto $label$1 }
	$4 = ($5 + [36])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$34 }
	
.LOOP $label$35:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$36 }
	if ( ((*($8 + [52]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($8 + [60])))
	
.LABEL $label$37
	CALL _ZdlPv($8)
	
.LABEL $label$36
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$35 }
	$7 = *(($5 + [32]))
	goto $label$33 
	
.LABEL $label$34
	$7 = $11
	
.LABEL $label$33
	*($4) = $11
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($5 + [160])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8516])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $66($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [50]) = [1]
	*($5 + [8]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [60 align=4]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = [0]
	*($5 + [84]) = $0
	CALL $37(($3 + [32]), $5)
	*($5 + [92]) = [-1]
	*($5 + [88]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $69($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [60])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8352])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $61($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8516])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $66($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $36(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $5(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $69($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_64 .FUNC $3 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = (int_64)5
	
.LOOP $label$1:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$1 }
	$3 = (int_64)5
	
.LOOP $label$2:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$2 }
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [16]) = (int_64)6138663577826885632
	*($2 + [8]) = (int_64)6138663577826885632
	$4 = CALL db_find_i64((int_64)6138663577826885632, (int_64)6138663577826885632, (int_64)-2507753063930920960, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $18(($2 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($2 + [8])), [8465])
	$3 = *($4 + [32])
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = *($7 + [16])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($7 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
	return $3
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [112])
	$global$0 = $4
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	$5 = ($0 + [8])
	$7 = *(($0 + [36]))
	$6 = *(($0 + [32]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$5 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [8465])
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL db_find_i64(*($5), *(($0 + [16])), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $2($5, $8)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [8465])
	
.LABEL $label$3
	$10 = *($0)
	CALL eosio_assert([1], [8544])
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [8579])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [8625])
	$8 = ($9 + [8])
	*($4 + [56]) = *($8)
	$2 = *($9)
	*($9 + [24]) = CALL $3($4, $1)
	CALL eosio_assert(((int_64)$2 == (int_64)*($9)), [8676])
	*($4 + [80]) = ($4 + [48])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [64]) = ($4 + [72])
	*($4 + [92]) = $8
	*($4 + [88]) = $9
	*($4 + [96]) = ($9 + [16])
	*($4 + [100]) = ($9 + [24])
	*($4 + [104]) = ($9 + [32])
	*($4 + [108]) = ($9 + [40])
	CALL $4(($4 + [88]), ($4 + [64]))
	CALL db_update_i64(*($9 + [52]), $10, $4, [48])
	$7 = ($0 + [24])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$7 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($4 + [88]) = *($8)
	if ( (CALL $64(($4 + [56]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$7 = ($9 + [56])
	$8 = *($7)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$8 = CALL db_idx64_find_primary(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912129794572288, ($4 + [64]), $2)
	*($7) = $8
	
.LABEL $label$8
	CALL db_idx64_update($8, $10, ($4 + [88]))
	
.LABEL $label$2
	$2 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [8735])
	*(($8 = CALL _Znwj([64])) + [48]) = $5
	*($8) = $1
	*($8 + [24]) = CALL $3($4, $1)
	*($4 + [80]) = ($4 + [48])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [64]) = ($4 + [72])
	$7 = ($8 + [8])
	*($4 + [92]) = $7
	*($4 + [88]) = $8
	*($4 + [96]) = ($8 + [16])
	*($4 + [100]) = ($8 + [24])
	*($4 + [104]) = ($8 + [32])
	*($4 + [108]) = ($8 + [40])
	CALL $4(($4 + [88]), ($4 + [64]))
	$1 = *($8)
	$9 = ($0 + [16])
	*($8 + [52]) = CALL db_store_i64(*($9), (int_64)-6030912129794572288, $2, $1, $4, [48])
	$6 = ($0 + [24])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$9 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$1 = *($9)
	$10 = *($8)
	*($4 + [88]) = *($7)
	*($8 + [56]) = CALL db_idx64_store($1, (int_64)-6030912129794572288, $2, $10, ($4 + [88]))
	*($4 + [88]) = $8
	$1 = *($8)
	*($4) = $1
	$9 = *(($8 + [52]))
	*($4 + [72]) = $9
	$6 = ($0 + [36])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [40]))) ){ goto $label$11 }
	*($7 + [8]) = $1
	*($7 + [16]) = $9
	*($4 + [88]) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	$8 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( $8 ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $5(($0 + [32]), ($4 + [88]), $4, ($4 + [72]))
	$8 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$10
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL $46(*($1), *($1 + [4]), ($2 + [40]))
	$3 = *($0)
	$4 = (int_64)6
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	$4 = (int_64)5
	
.LOOP $label$2:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$2 }
	$4 = (int_64)0
	$5 = (int_64)59
	$0 = [8248]
	$6 = (int_64)0
	
.LOOP $label$3:
	$7 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$4 }
	$8 = *($0)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$8 = ($8 + [-91])
	goto $label$5 
	
.LABEL $label$6
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$4
	$0 = ($0 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$3 }
	*((($2 + [8]) + [24])) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)0
	$8 = (($2 + [8]) + [16])
	$0 = (*(($1 + [4])) - *($1))
	if ( ($0 == 0) ){ goto $label$8 }
	$9 = int_32($0 >> [3])
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$7 }
	$0 = CALL _Znwj($0)
	*(($2 + [24])) = $0
	*(($10 = ($2 + [28]))) = $0
	*(($2 + [32])) = ($0 + ($9 << [3]))
	$9 = *($1)
	$1 = (*(($1 + [4])) - $9)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $9, $1)
	*($10) = (*($10) + $1)
	
.LABEL $label$8
	$1 = ($2 + [16])
	*($2 + [48]) = $6
	*($2 + [40]) = (int_64)6138663577826885632
	*(($0 = CALL _Znwj([16]))) = $3
	*($0 + [8]) = (int_64)3617214756542218240
	*(($2 + [76])) = [0]
	$10 = ($0 + [16])
	*((($2 + [40]) + [24])) = $10
	*((($2 + [40]) + [20])) = $10
	*($2 + [56]) = $0
	*($2 + [68 align=4]) = (int_64)0
	$8 = *($8)
	$9 = *((($2 + [8]) + [20]))
	$11 = ($9 - $8)
	$4 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	$12 = ($2 + [68])
	$0 = [-16]
	
.LOOP $label$9:
	$0 = ($0 + [-1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	$10 = [0]
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$12 }
	$8 = [0]
	$9 = ($11 & [-8])
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$10 }
	$0 = ($9 - $0)
	goto $label$11 
	
.LABEL $label$12
	$0 = ([0] - $0)
	
.LABEL $label$11
	CALL $21($12, $0)
	$10 = *(($2 + [72]))
	$8 = *(($2 + [68]))
	
.LABEL $label$10
	$0 = ($10 - $8)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8352])
	CALL memcpy($8, ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8352])
	CALL memcpy(($8 + [8]), $1, [8])
	$0 = ($8 + [16])
	$4 = (CASTING uint_64)(uint_32 int_32((*(($2 + [28])) - *((($2 + [8]) + [16]))) >> [3]))
	
.LOOP $label$13:
	$8 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$1 = ((int_64)$4) != (int_64)0
	*($2 + [80]) = (($1) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)($10 - $0) > (int_32)[0]), [8352])
	CALL memcpy($0, ($2 + [80]), [1])
	$0 = ($0 + [1])
	if ( $1 ){ goto $label$13 }
	$8 = *(($2 + [28]))
	$9 = *(($2 + [24]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$14 }
	$12 = ($8 - $9)
	$8 = [0]
	
.LOOP $label$15:
	$1 = ($0 + $8)
	CALL eosio_assert(((int_32)($10 - $1) > (int_32)[7]), [8352])
	CALL memcpy($1, ($9 + $8), [8])
	$8 = ($8 + [8])
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$15 }
	
.LABEL $label$14
	CALL $23(($2 + [80]), ($2 + [40]))
	$0 = *($2 + [80])
	CALL send_inline($0, (*($2 + [84]) - $0))
	$0 = *($2 + [80])
	if ( ($0 == 0) ){ goto $label$16 }
	*($2 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$16
	$0 = *($2 + [68])
	if ( ($0 == 0) ){ goto $label$17 }
	*(($2 + [72])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$17
	$0 = *($2 + [56])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($2 + [60])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$18
	$0 = *($2 + [24])
	if ( ($0 == 0) ){ goto $label$19 }
	*(($2 + [28])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$19
	$global$0 = ($2 + [96])
	return (unreachable)
	
.LABEL $label$7
	CALL $61($8)
}

void .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [8])
	$2 = CALL $2($3, $2)
	
.LOOP $label$2:
	CALL eosio_assert([1], [8790])
	CALL eosio_assert([1], [8972])
	$0 = [0]
	$4 = CALL db_next_i64(*($2 + [52]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $2($3, $4)
	
.LABEL $label$3
	CALL $16($3, $2)
	$2 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [8869])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [8919])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6030912129794572288, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$1 = ($global$0 - [48])
	$global$0 = $1
	$2 = (int_64)5
	
.LOOP $label$1:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$1 }
	$2 = (int_64)5
	
.LOOP $label$2:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$2 }
	*(($1 + [32])) = [0]
	*($1 + [8]) = (int_64)6138663577826885632
	*($1) = (int_64)6138663577826885632
	*($1 + [16]) = (int_64)-1
	$2 = *(($0 + [16]))
	*($1 + [24]) = (int_64)0
	$3 = CALL db_lowerbound_i64(*($0 + [8]), $2, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$4 = ($1 + [8])
	$5 = ($1 + [24])
	$6 = ($1 + [28])
	$7 = [0]
	$8 = [0]
	$9 = ($0 + [8])
	$10 = CALL $2($9, $3)
	$2 = *($10)
	if ( ((int_32)[0] == (int_32)[0]) ){ goto $label$5 }
	$11 = [0]
	goto $label$3 
	
.LABEL $label$5
	$11 = [2]
	goto $label$3 
	
.LABEL $label$4
	$11 = [9]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$63 
	
.LABEL $label$63
	$3 = ($8 + [-24])
	$12 = *($3)
	if ( ((int_64)*($12) == (int_64)$2) ){ goto $label$27 }
	$11 = [1]
	goto $label$6 
	
.LABEL $label$62
	$8 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$61
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$32 }
	$11 = [29]
	goto $label$6 
	
.LABEL $label$60
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)$1), [8465])
	if ( $12 ){ goto $label$30 }
	goto $label$31 
	
.LABEL $label$59
	$10 = CALL $2($9, $3)
	$2 = *($10)
	$8 = *($6)
	$7 = *($5)
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$33 }
	$11 = [2]
	goto $label$6 
	
.LABEL $label$58
	$3 = CALL db_find_i64(*($1), *($4), (int_64)-2507753063930920960, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$24 }
	$11 = [3]
	goto $label$6 
	
.LABEL $label$57
	$12 = CALL $18($1, $3)
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)$1), [8465])
	$11 = [4]
	goto $label$6 
	
.LABEL $label$56
	$3 = [1]
	if ( ((int_64)*($12 + [8]) != (int_64)*($0)) ){ goto $label$23 }
	$11 = [26]
	goto $label$6 
	
.LABEL $label$55
	$3 = ((int_64)*($12 + [32]) < (int_64)100000)
	$8 = [0]
	if ( ((int_64)*($10 + [16]) > (int_64)9999) ){ goto $label$29 }
	$11 = [22]
	goto $label$6 
	
.LABEL $label$54
	$2 = *($10 + [40])
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$7 }
	$11 = [24]
	goto $label$6 
	
.LABEL $label$53
	if ( ((int_64))(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($10 + [32])) > (int_64)900) ){ goto $label$8 }
	$11 = [25]
	goto $label$6 
	
.LABEL $label$52
	$2 = *(($10 + [40]))
	if ( (int_64)($2 == 0) ){ goto $label$22 }
	$11 = [23]
	goto $label$6 
	
.LABEL $label$51
	if ( ((int_32)($3 | ((int_64)((int_64)$2 / (int_64)86400) < (int_64)(CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[86400])))) != (int_32)[1]) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$50
	$8 = [0]
	if ( ((int_64)*($10 + [16]) <= (int_64)9999) ){ goto $label$28 }
	$11 = [6]
	goto $label$6 
	
.LABEL $label$49
	if ( ((int_32)($3 | $8) == (int_32)[1]) ){ goto $label$19 }
	$11 = [7]
	goto $label$6 
	
.LABEL $label$48
	CALL eosio_assert([1], [8972])
	$3 = CALL db_next_i64(*($10 + [52]), ($1 + [40]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$47
	$3 = [1]
	$8 = [0]
	if ( ((int_64)*($10 + [16]) <= (int_64)9999) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$46
	CALL $19($0, *($10))
	$11 = [9]
	goto $label$6 
	
.LABEL $label$45
	$7 = *($1 + [24])
	if ( ($7 == 0) ){ goto $label$14 }
	$11 = [10]
	goto $label$6 
	
.LABEL $label$44
	$10 = ($1 + [28])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$13 }
	$11 = [11]
	goto $label$6 
	
.LABEL $label$43
	$11 = [12]
	goto $label$6 
	
.LABEL $label$42
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	$11 = [13]
	goto $label$6 
	
.LABEL $label$41
	$12 = *($8 + [16])
	if ( ($12 == 0) ){ goto $label$10 }
	$11 = [14]
	goto $label$6 
	
.LABEL $label$40
	*(($8 + [20])) = $12
	CALL _ZdlPv($12)
	$11 = [15]
	goto $label$6 
	
.LABEL $label$39
	CALL _ZdlPv($8)
	$11 = [16]
	goto $label$6 
	
.LABEL $label$38
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	$11 = [17]
	goto $label$6 
	
.LABEL $label$37
	$3 = *(($1 + [24]))
	goto $label$9 
	
.LABEL $label$36
	$3 = $7
	$11 = [18]
	goto $label$6 
	
.LABEL $label$35
	*($10) = $7
	CALL _ZdlPv($3)
	$11 = [19]
	goto $label$6 
	
.LABEL $label$34
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$33
	$11 = [0]
	goto $label$6 
	
.LABEL $label$32
	$11 = [2]
	goto $label$6 
	
.LABEL $label$31
	$11 = [27]
	goto $label$6 
	
.LABEL $label$30
	$11 = [4]
	goto $label$6 
	
.LABEL $label$29
	$11 = [6]
	goto $label$6 
	
.LABEL $label$28
	$11 = [22]
	goto $label$6 
	
.LABEL $label$27
	$11 = [28]
	goto $label$6 
	
.LABEL $label$26
	$11 = [2]
	goto $label$6 
	
.LABEL $label$25
	$11 = [0]
	goto $label$6 
	
.LABEL $label$24
	$11 = [27]
	goto $label$6 
	
.LABEL $label$23
	$11 = [5]
	goto $label$6 
	
.LABEL $label$22
	$11 = [6]
	goto $label$6 
	
.LABEL $label$21
	$11 = [22]
	goto $label$6 
	
.LABEL $label$20
	$11 = [6]
	goto $label$6 
	
.LABEL $label$19
	$11 = [21]
	goto $label$6 
	
.LABEL $label$18
	$11 = [21]
	goto $label$6 
	
.LABEL $label$17
	$11 = [7]
	goto $label$6 
	
.LABEL $label$16
	$11 = [9]
	goto $label$6 
	
.LABEL $label$15
	$11 = [8]
	goto $label$6 
	
.LABEL $label$14
	$11 = [19]
	goto $label$6 
	
.LABEL $label$13
	$11 = [20]
	goto $label$6 
	
.LABEL $label$12
	$11 = [12]
	goto $label$6 
	
.LABEL $label$11
	$11 = [16]
	goto $label$6 
	
.LABEL $label$10
	$11 = [15]
	goto $label$6 
	
.LABEL $label$9
	$11 = [18]
	goto $label$6 
	
.LABEL $label$8
	$11 = [21]
	goto $label$6 
	
.LABEL $label$7
	$11 = [23]
	goto $label$6 
	$11
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = (int_64)5
	
.LOOP $label$1:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$1 }
	$3 = (int_64)5
	
.LOOP $label$2:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$2 }
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [16]) = (int_64)6138663577826885632
	*($2 + [8]) = (int_64)6138663577826885632
	$1 = CALL db_find_i64((int_64)6138663577826885632, (int_64)6138663577826885632, (int_64)-2507753063930920960, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $18(($2 + [8]), $1)
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)($2 + [8])), [8465])
	CALL $25($0, [0], *($1 + [16]), *(($1 + [20])))
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($2 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$8 }
	*(($1 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6030912129794572288, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [8465])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $2($7, CALL $fimport$1(*($7), *($7 + [8]), (int_64)-6030912129794572288, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [8465])
	
.LABEL $label$2
	*(($4 + [56])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)-6030912129794572288, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [8465])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $2($7, CALL $fimport$1(*($7), *($7 + [8]), (int_64)-6030912129794572288, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [8465])
	
.LABEL $label$2
	*(($4 + [56])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $61($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8539])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[33]), [8539])
	CALL memcpy(($1 + [16]), *($0 + [4]), [34])
	$3 = (*($0 + [4]) + [34])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8539])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [50]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$0 = CALL $39($0, ($1 + [52]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8539])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8539])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[1]), [8539])
	CALL memcpy(($1 + [80]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8352])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8352])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8352])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8352])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8352])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8539])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [8539])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $39(*($1), ($0 + [32]))
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $54(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $54(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8786])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $44($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [8539])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = (int_64)0
	$3 = [0]
	*($2 + [8]) = [0]
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($6 == 0) ){ goto $label$6 }
	$3 = int_32($6 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$2 }
	$6 = CALL _Znwj($6)
	*(($2 + [8])) = ($6 + ($3 << [3]))
	*($2) = $6
	*($2 + [4]) = $6
	$3 = *(($1 + [16]))
	$1 = (*(($1 + [20])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($6, $3, $1)
	$3 = ($6 + $1)
	*($2 + [4]) = $3
	goto $label$4 
	
.LABEL $label$6
	$6 = [0]
	$7 = [0]
	$8 = [0]
	goto $label$3 
	
.LABEL $label$5
	$3 = $6
	
.LABEL $label$4
	$7 = $6
	$8 = $6
	
.LABEL $label$3
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$9 = (*(*($0)) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($9) + $1))
	
.LABEL $label$7
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$0 = ($3 - $8)
	if ( ($0 == 0) ){ goto $label$8 }
	$8 = int_32($0 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$1 }
	$0 = CALL _Znwj($0)
	*(($2 + [24])) = ($0 + ($8 << [3]))
	*($2 + [16]) = $0
	*($2 + [20]) = $0
	$3 = ($3 - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $6, $3)
	*($2 + [20]) = ($0 + $3)
	
.LABEL $label$8
	CALL void $9((int_32 $5), (int_64 $4), (int_64 ($2 + [16])), (int_32 $1))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $61($2)
	
.LABEL $label$1
	CALL $61(($2 + [16]))
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $56($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $58($0, $1, $2, CALL $65($2))
}

void .FUNC $61 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $63 (int_32 $0)
{
}

int_32 .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $61($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [60])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $53 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}