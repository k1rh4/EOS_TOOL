(data (i32.const 4) "\c0i\00\00")
(data (i32.const 16) "cannot create objects in table of another contract\00")
(data (i32.const 80) "cannot pass end iterator to modify\00")
(data (i32.const 128) "object passed to modify is not in multi_index\00")
(data (i32.const 176) "cannot modify objects in table of another contract\00")
(data (i32.const 240) "updater cannot change primary key when modifying an object\00")
(data (i32.const 304) "write\00")
(data (i32.const 320) "error reading iterator\00")
(data (i32.const 352) "read\00")
(data (i32.const 368) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 432) "invalid symbol name\00")
(data (i32.const 464) "multiplication overflow or underflow\00")
(data (i32.const 512) "multiplication underflow\00")
(data (i32.const 544) "multiplication overflow\00")
(data (i32.const 576) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 640) "onlyforaddfund\00")
(data (i32.const 656) "game not init\00")
(data (i32.const 672) "game not start\00")
(data (i32.const 688) "game is over\00")
(data (i32.const 704) "time end\00")
(data (i32.const 720) "only accepts FOS \00")
(data (i32.const 752) "must purchase a positive amount\00")
(data (i32.const 784) "must more than EOS\00")
(data (i32.const 816) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 880) "must more than 10 FOS\00")
(data (i32.const 912) "must more than 2%\00")
(data (i32.const 944) "must less than 20%\00")
(data (i32.const 976) " not find round task\00")
(data (i32.const 1008) "cur_amt can not  >= task_amt\00")
(data (i32.const 1040) "attempt to add asset with different symbol\00")
(data (i32.const 1088) "addition underflow\00")
(data (i32.const 1120) "addition overflow\00")
(data (i32.const 1152) "attempt to subtract asset with different symbol\00")
(data (i32.const 1200) "subtraction underflow\00")
(data (i32.const 1232) "subtraction overflow\00")
(data (i32.const 1264) "real_amt:\00")
(data (i32.const 1280) " \00")
(data (i32.const 1296) "  \00")
(data (i32.const 1312) "please wait\00")
(data (i32.const 1328) "farmeos refund\00")
(data (i32.const 1360) "farmeosrich reward\00")
(data (i32.const 1392) "farmeosbankx\00")
(data (i32.const 1408) "eosio.token\00")
(data (i32.const 1424) "active\00")
(data (i32.const 1440) "transfer\00")
(data (i32.const 1456) "0\00")
(data (i32.const 1472) "farmeosbank4\00")
(data (i32.const 1488) "farmeosbank2\00")
(data (i32.const 1504) "buyfarm\00")
(data (i32.const 1520) "buy token\00")
(data (i32.const 1536) "debug\00")
(data (i32.const 1552) ".\00")
(data (i32.const 1568) ",\00")
(data (i32.const 1584) "farmeosubmit\00")
(data (i32.const 1600) "round not over\00")
(data (i32.const 1616) "is_enough:\00")
(data (i32.const 1632) "cannot increment end iterator\00")
(data (i32.const 1664) " bonus\00")
(data (i32.const 1680) " input_amt:\00")
(data (i32.const 1696) "  tmp:\00")
(data (i32.const 1712) "is_is_enough:\00")
(data (i32.const 1728) " send_amt:\00")
(data (i32.const 1744) "status not right\00")
(data (i32.const 1776) "cannot pass end iterator to erase\00")
(data (i32.const 1824) "object passed to erase is not in multi_index\00")
(data (i32.const 1872) "cannot erase objects in table of another contract\00")
(data (i32.const 1936) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2000) "time not end\00")
(data (i32.const 2016) " end_enough:\00")
(data (i32.const 2032) " last_name\00")
(data (i32.const 2048) "user_table not empty\00")
(data (i32.const 2080) "cleanround\00")
(data (i32.const 2096) "onerror\00")
(data (i32.const 2112) "eosio\00")
(data (i32.const 2128) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 2192) "get\00")
(data (i32.const 10592) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "is_account" (func $fimport$12 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$15 (param i64)))
(import "env" "prints" (func $fimport$16 (param i32)))
(import "env" "prints_l" (func $fimport$17 (param i32 i32)))
(import "env" "printui" (func $fimport$18 (param i64)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$20 (param i64)))
(import "env" "require_auth2" (func $fimport$21 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$22 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$23 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio11farmeosrich6updateEmmNS_5assetES1_S1_" (func $5))
(export "_ZN5eosio11farmeosrich8transferEyyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $18))
(export "_ZN5eosio11farmeosrich13delaytransferEmyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $34))
(export "_ZN5eosio11farmeosrich6profitEm" (func $53))
(export "_ZN5eosio11farmeosrich7eraseinEm" (func $57))
(export "_ZN5eosio11farmeosrich9endprofitEm" (func $60))
(export "_ZN5eosio11farmeosrich9updatepriEm" (func $64))
(export "_ZN5eosio11farmeosrich10updateuserEyx" (func $65))
(export "_ZN5eosio11farmeosrich8nextturnEm" (func $66))
(export "_ZN5eosio11farmeosrich9startgameEx" (func $70))
(export "_ZN5eosio11farmeosrich10cleanroundEm" (func $73))
(export "_ZN5eosio3xxaEv" (func $75))
(export "apply" (func $76))
(export "malloc" (func $88))
(export "free" (func $91))
(export "memcmp" (func $101))
(export "strlen" (func $102))
(table $0 11 11 anyfunc)
(elem (i32.const 0) $103 $5 $57 $53 $65 $70 $18 $73 $60 $66 $64)



int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $99 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $94 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $92(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $93($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $97($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $92($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $93($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10678]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10680])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10678]) = [1]
	$7 = ($7 << [16])
	*([0] + [10680]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10680])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10680]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10678]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10678]) = [1]
	$3 = ($3 << [16])
	*([0] + [10680]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10680])
	
.LABEL $label$8
	*([0] + [10680]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10580])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10388]
	$1 = (((int_32)$2 * (int_32)[12]) + [10388])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10684])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $93 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $39($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [304])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [304])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $43(CALL $44($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [304])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [304])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [304])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [304])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [304])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $43($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [304])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [304])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [304])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $43(CALL $44($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [304])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [304])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [304])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [304])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [304])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($0, *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [304])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [304])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [304])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $46(*($1), ($0 + [32]))
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [304])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [304])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [304])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $92(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $93($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $93($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [144])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [320])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $92([256])
	CALL $6($6)
	*($6 + [240]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [24])
	*($8 + [52]) = ($6 + [28])
	*($8 + [56]) = ($6 + [32])
	*($8 + [60]) = ($6 + [36])
	*($8 + [64]) = ($6 + [40])
	*($8 + [68]) = ($6 + [48])
	*($8 + [72]) = ($6 + [64])
	*($8 + [76]) = ($6 + [80])
	*($8 + [80]) = ($6 + [96])
	*($8 + [84]) = ($6 + [112])
	*($8 + [88]) = ($6 + [128])
	*($8 + [92]) = ($6 + [144])
	*($8 + [96]) = ($6 + [160])
	*($8 + [100]) = ($6 + [176])
	*($8 + [104]) = ($6 + [184])
	*($8 + [108]) = ($6 + [192])
	*($8 + [112]) = ($6 + [200])
	*($8 + [116]) = ($6 + [208])
	*($8 + [120]) = ($6 + [212])
	*($8 + [124]) = ($6 + [216])
	*($8 + [128]) = ($6 + [224])
	*($8 + [132]) = ($6 + [228])
	*($8 + [136]) = ($6 + [232])
	*($8 + [140]) = ($6 + [236])
	CALL $11(($8 + [40]), ($8 + [32]))
	*($6 + [244]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [244])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $8(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $93($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [144])
	return $6
}

int_32 .FUNC $6 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [120]))) = (int_64)1398362884
	*($0 + [112]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$3 = [0]
	
.LABEL $label$26
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [136]))) = (int_64)1398362884
	*($0 + [128]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$3 = [0]
	
.LABEL $label$31
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [152]))) = (int_64)1398362884
	*($0 + [144]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$3 = [0]
	
.LABEL $label$36
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [168]))) = (int_64)1398362884
	*($0 + [160]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	
.LOOP $label$45:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$45 }
	
.LABEL $label$44
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$3 = [0]
	
.LABEL $label$41
	CALL eosio_assert($3, [432])
	return $0
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [144])
	$23 = $24
	*([0] + [4]) = $24
	$3 = *($0 + [4])
	*($1) = [1]
	$21 = [0]
	*($1 + [28]) = [0]
	*($1 + [24]) = *(*($3))
	$2 = *($0)
	$4 = *($3 + [20])
	$19 = *($3 + [4])
	*($1 + [80]) = *($19)
	*(($1 + [88])) = *(($19 + [8]))
	$19 = *($3 + [8])
	*($1 + [48]) = *($19)
	*(($22 = ($1 + [56]))) = *(($19 + [8]))
	$9 = *($22)
	CALL eosio_assert([1], [368])
	$8 = ($1 + [48])
	$7 = ($1 + [80])
	$6 = ($1 + [24])
	$5 = ($1 + [28])
	$20 = (uint_64)$9 >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$19 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$19 = [0]
	
.LABEL $label$1
	CALL eosio_assert($19, [432])
	*(($1 + [120])) = $9
	*($1 + [112]) = (int_64)0
	$9 = *(($1 + [56]))
	CALL eosio_assert([1], [368])
	$20 = (uint_64)$9 >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$19 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$19 = [0]
	
.LABEL $label$6
	CALL eosio_assert($19, [432])
	*(($1 + [168])) = $9
	*($1 + [160]) = (int_64)0
	$21 = *($3 + [12])
	$9 = *($21 + [8])
	$20 = *($21)
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$20 < (int_64)4611686018427387904), [544])
	*(($1 + [136])) = $9
	*($1 + [128]) = ((int_64)((int_64)$20 * (int_64)7084) / (int_64)10000)
	$21 = *($3 + [12])
	$9 = *($21 + [8])
	$20 = *($21)
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$20 < (int_64)4611686018427387904), [544])
	*(($1 + [152])) = $9
	*($1 + [144]) = ((int_64)((int_64)$20 * (int_64)2083) / (int_64)10000)
	$21 = *($3 + [12])
	$9 = *($21 + [8])
	$20 = *($21)
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$20 < (int_64)4611686018427387904), [544])
	*(($1 + [16])) = $9
	*($1 + [8]) = ((int_64)((int_64)$20 * (int_64)833) / (int_64)10000)
	*($1 + [192]) = [1]
	$9 = *(*($3 + [12]) + [8])
	CALL eosio_assert([1], [368])
	$10 = ($1 + [192])
	$20 = (uint_64)$9 >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$19 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$19 = [0]
	
.LABEL $label$11
	CALL eosio_assert($19, [432])
	*(($1 + [72])) = $9
	*($1 + [64]) = (int_64)0
	$9 = *(*(($3 + [12])) + [8])
	CALL eosio_assert([1], [368])
	$20 = (uint_64)$9 >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$19 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$19 = [0]
	
.LABEL $label$16
	CALL eosio_assert($19, [432])
	*(($1 + [104])) = $9
	*($1 + [96]) = (int_64)0
	*($1 + [32]) = [1]
	*($1 + [184]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)3600) & (int_64)4294967295)
	$20 = CALL current_time()
	*($1 + [36]) = [1]
	*($1 + [212]) = [0]
	*($1 + [228]) = [0]
	*($1 + [176]) = ((int_64)((uint_64)$20 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$17 = *($16 + [24])
	$16 = *($3 + [16])
	$22 = *(($16 + [28]))
	if ( ((int_32)$22 == (int_32)$17) ){ goto $label$21 }
	$21 = ($22 + [-24])
	$18 = ([0] - $17)
	
.LOOP $label$22:
	if ( ((int_32)*(*($21)) == (int_32)[1]) ){ goto $label$21 }
	$22 = $21
	$19 = ($21 + [-24])
	$21 = $19
	if ( ((int_32)($19 + $18) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	$18 = ($1 + [228])
	$15 = ($1 + [212])
	$14 = ($1 + [36])
	$13 = ($1 + [176])
	$12 = ($1 + [184])
	$11 = ($1 + [32])
	if ( ((int_32)$22 == (int_32)$17) ){ goto $label$25 }
	$21 = *(($22 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [56]) == (int_32)$16), [576])
	if ( $21 ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	$21 = CALL db_find_i64(*($16), *($16 + [8]), (int_64)-4812882469285658624, (int_64)1)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*(CALL $12($16, $21) + [56]) == (int_32)$16), [576])
	goto $label$23 
	
.LABEL $label$24
	$21 = *(($3 + [16]))
	$20 = *($4)
	*($23 + [24]) = *(($3 + [8]))
	*($23 + [8]) = $20
	CALL eosio_assert(((int_64)*($21) == (int_64)CALL $fimport$2()), [16])
	*($23 + [40]) = $21
	*($23 + [44]) = ($23 + [24])
	*($23 + [48]) = ($23 + [8])
	$19 = CALL $92([72])
	CALL $13($19)
	*($19 + [56]) = $21
	CALL $14(($23 + [40]), $19)
	*($23 + [32]) = $19
	$20 = *($19)
	*($23 + [40]) = $20
	$3 = *($19 + [60])
	*($23 + [28]) = $3
	$16 = ($21 + [28])
	$22 = *($16)
	if ( ((uint_32)$22 >= (uint_32)*(($21 + [32]))) ){ goto $label$27 }
	*($22 + [8]) = $20
	*($22 + [16]) = $3
	*($23 + [32]) = [0]
	*($22) = $19
	*($16) = ($22 + [24])
	goto $label$26 
	
.LABEL $label$27
	CALL $15(($21 + [24]), ($23 + [32]), ($23 + [40]), ($23 + [28]))
	
.LABEL $label$26
	$21 = *($23 + [32])
	*($23 + [32]) = [0]
	if ( ($21 == 0) ){ goto $label$23 }
	CALL $93($21)
	
.LABEL $label$23
	$19 = $24
	$21 = ($19 + [-240])
	*([0] + [4]) = $21
	*($23 + [12]) = $21
	*($23 + [8]) = $21
	*($23 + [16]) = ($19 + [-12])
	*($23 + [32]) = ($23 + [8])
	*($23 + [44]) = ($1 + [8])
	*($23 + [40]) = $1
	*($23 + [48]) = $6
	*($23 + [52]) = $5
	*($23 + [56]) = $11
	*($23 + [60]) = $14
	*($23 + [64]) = ($1 + [40])
	*($23 + [68]) = $8
	*($23 + [72]) = ($1 + [64])
	*($23 + [76]) = $7
	*($23 + [80]) = ($1 + [96])
	*($23 + [84]) = ($1 + [112])
	*($23 + [88]) = ($1 + [128])
	*($23 + [92]) = ($1 + [144])
	*($23 + [96]) = ($1 + [160])
	*($23 + [100]) = $13
	*($23 + [104]) = $12
	*($23 + [108]) = $10
	*($23 + [112]) = ($1 + [200])
	*($23 + [116]) = ($1 + [208])
	*($23 + [120]) = $15
	*($23 + [124]) = ($1 + [216])
	*($23 + [128]) = ($1 + [224])
	*($23 + [132]) = $18
	*($23 + [136]) = ($1 + [232])
	*($23 + [140]) = ($1 + [236])
	CALL $10(($23 + [40]), ($23 + [32]))
	$20 = *($1)
	*($1 + [244]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159550150574080, *(*($0 + [8])), $20, $21, [228])
	if ( (uint_64)($20 <= *($2 + [16])) ){ goto $label$28 }
	*(($2 + [16])) = ((int_64)$20 + (int_64)1)
	
.LABEL $label$28
	*([0] + [4]) = ($23 + [144])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN5eosio11farmeosrich6updateEmmNS_5assetES1_S1_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 _ZN5eosio11farmeosrich6updateEmmNS_5assetES1_S1_)
{
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [464])
	*([0] + [4]) = $9
	*($9 + [88]) = $1
	CALL require_auth(*($0))
	*(($7 = (($9 + [48]) + [32]))) = [0]
	*($9 + [64]) = (int_64)-1
	*($9 + [72]) = (int_64)0
	$6 = *($0)
	*($9 + [48]) = $6
	*($9 + [56]) = $6
	*((($9 + [8]) + [32])) = [0]
	*($9 + [16]) = $6
	*($9 + [8]) = $6
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$1 = CALL db_lowerbound_i64($6, $6, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$4 }
	$1 = CALL $9(($9 + [48]), $1)
	$8 = *($0)
	CALL eosio_assert([1], [80])
	CALL eosio_assert(((int_32)*($1 + [240]) == (int_32)($9 + [48])), [128])
	CALL eosio_assert(((int_64)*($9 + [48]) == (int_64)CALL $fimport$2()), [176])
	*($1 + [40]) = $2
	*($1 + [24]) = *($9 + [88])
	$6 = *($1)
	CALL eosio_assert([1], [240])
	*($9 + [344]) = (($9 + [96]) + [228])
	*($9 + [340]) = ($9 + [96])
	*($9 + [336]) = ($9 + [96])
	*($9 + [352]) = ($9 + [336])
	*($9 + [364]) = ($1 + [8])
	*($9 + [360]) = $1
	*($9 + [368]) = ($1 + [24])
	*($9 + [372]) = ($1 + [28])
	*($9 + [376]) = ($1 + [32])
	*($9 + [380]) = ($1 + [36])
	*($9 + [384]) = ($1 + [40])
	*($9 + [388]) = ($1 + [48])
	*($9 + [392]) = ($1 + [64])
	*($9 + [396]) = ($1 + [80])
	*($9 + [400]) = ($1 + [96])
	*($9 + [404]) = ($1 + [112])
	*($9 + [408]) = ($1 + [128])
	*($9 + [412]) = ($1 + [144])
	*($9 + [416]) = ($1 + [160])
	*($9 + [420]) = ($1 + [176])
	*($9 + [424]) = ($1 + [184])
	*($9 + [428]) = ($1 + [192])
	*($9 + [432]) = ($1 + [200])
	*($9 + [436]) = ($1 + [208])
	*($9 + [440]) = ($1 + [212])
	*($9 + [444]) = ($1 + [216])
	*($9 + [448]) = ($1 + [224])
	*($9 + [452]) = ($1 + [228])
	*($9 + [456]) = ($1 + [232])
	*($9 + [460]) = ($1 + [236])
	CALL $10(($9 + [360]), ($9 + [352]))
	CALL db_update_i64(*($1 + [244]), $8, ($9 + [96]), [228])
	$1 = ($9 + [64])
	if ( (uint_64)($6 <= *($1)) ){ goto $label$3 }
	*($1) = ((int_64)$6 + (int_64)1)
	$2 = *($9 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$8 = *($0)
	*($9 + [100]) = $3
	*($9 + [104]) = $4
	*($9 + [108]) = $5
	*($9 + [116]) = $0
	*($9 + [96]) = ($9 + [88])
	*($9 + [112]) = ($9 + [8])
	*($9 + [336]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$2()), [16])
	*($9 + [364]) = ($9 + [96])
	*($9 + [360]) = ($9 + [48])
	*($9 + [368]) = ($9 + [336])
	$1 = CALL $92([256])
	CALL $6($1)
	*($1 + [240]) = ($9 + [48])
	CALL $7(($9 + [360]), $1)
	*($9 + [352]) = $1
	$6 = *($1)
	*($9 + [360]) = $6
	$2 = *($1 + [244])
	*($9 + [92]) = $2
	$3 = ($9 + [76])
	$0 = *($3)
	if ( ((uint_32)$0 >= (uint_32)*($7)) ){ goto $label$6 }
	*($0 + [8]) = $6
	*($0 + [16]) = $2
	*($9 + [352]) = [0]
	*($0) = $1
	*($3) = ($0 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $8(($9 + [72]), ($9 + [352]), ($9 + [360]), ($9 + [92]))
	
.LABEL $label$5
	$1 = *($9 + [352])
	*($9 + [352]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $93($1)
	
.LABEL $label$3
	$2 = *($9 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($9 + [36])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $93($0)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$1 = *(($9 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$1 = $2
	
.LABEL $label$7
	*($3) = $2
	CALL $93($1)
	
.LABEL $label$1
	$2 = *($9 + [72])
	if ( ($2 == 0) ){ goto $label$11 }
	$3 = ($9 + [76])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL $93($0)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	$1 = *(($9 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $2
	
.LABEL $label$12
	*($3) = $2
	CALL $93($1)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [464])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1) = [1]
	$2 = *($0)
	$7 = *($6)
	*($1 + [8]) = *($7)
	*(($4 = ($1 + [16]))) = *(($7 + [8]))
	$3 = *($4)
	$5 = *($1 + [8])
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [544])
	*(($1 + [32])) = $3
	*($1 + [24]) = ((int_64)((int_64)$5 * (int_64)105) / (int_64)100)
	$3 = *(*($6) + [8])
	CALL eosio_assert([1], [368])
	$4 = ($1 + [8])
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [432])
	*(($1 + [48])) = $3
	*($1 + [40]) = (int_64)0
	$7 = $9
	$6 = ($7 + [-64])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-12])
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $4
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + [24])
	*($8 + [44]) = ($1 + [40])
	CALL $16(($8 + [32]), ($8 + [24]))
	$5 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-4812882469285658624, *(*($0 + [8])), $5, $6, [52])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $92(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $93($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $93($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($0, *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [100])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [100])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [320])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $92([72])
	CALL $13($6)
	*($6 + [56]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [24])
	*($8 + [44]) = ($6 + [40])
	CALL $17(($8 + [32]), ($8 + [24]))
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [60])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $15(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $93($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $13 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [432])
	return $0
}

void .FUNC _ZN5eosio3xxaEv ()
{
}

void .FUNC _ZN5eosio11farmeosrich8transferEyyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [400])
	*([0] + [4]) = $12
	*($12 + [296]) = $1
	$8 = *($0)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$2 }
	CALL require_auth($1)
	$10 = *($4)
	$7 = CALL strlen([640])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$3 }
	if ( (CALL $98($4, [0], [-1], [640], $7) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = [0]
	*(($12 + [288])) = [0]
	*($12 + [272]) = (int_64)-1
	$1 = *($0)
	*($12 + [256]) = $1
	*($12 + [264]) = $1
	*($12 + [280]) = (int_64)0
	$10 = [0]
	$5 = CALL db_lowerbound_i64($1, $1, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$10 = CALL $9(($12 + [256]), $5)
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [656])
	$10 = CALL db_lowerbound_i64(*($12 + [256]), *(($12 + [264])), (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $9(($12 + [256]), $10)
	
.LABEL $label$5
	$10 = [1]
	$5 = *($7 + [24])
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$6 }
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$7 }
	$10 = ((uint_64)*($7 + [176]) <= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295))
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [672])
	CALL eosio_assert((*($7 + [40]) == 0), [688])
	CALL eosio_assert((uint_64)(((int_64)((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= *($7 + [184])), [704])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($7 + [56]))), [720])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [752])
	$1 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$5 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [432])
	$1 = *(($3 + [8]))
	if ( ((int_64)$1 != (int_64)1397703940) ){ goto $label$14 }
	CALL eosio_assert(((int_64)*($3) > (int_64)999), [784])
	goto $label$13 
	
.LABEL $label$14
	CALL eosio_assert(((int_64)$1 == (int_64)*(($7 + [88]))), [816])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($7 + [80])), [880])
	
.LABEL $label$13
	$10 = ($7 + [56])
	$2 = *($10)
	$1 = *($7 + [48])
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [544])
	$5 = ($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)*($5)), [816])
	CALL eosio_assert(((int_64)*($3) >= (int_64)((int_64)$1 / (int_64)50)), [912])
	$2 = *($10)
	$1 = *($7 + [48])
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [544])
	CALL eosio_assert(((int_64)$2 == (int_64)*($5)), [816])
	CALL eosio_assert(((int_64)*($3) <= (int_64)((int_64)$1 / (int_64)5)), [944])
	CALL current_time()
	*((($12 + [216]) + [32])) = [0]
	*($12 + [232]) = (int_64)-1
	*($12 + [240]) = (int_64)0
	$1 = *($0)
	*($12 + [216]) = $1
	*($12 + [224]) = $1
	$11 = [0]
	$6 = CALL db_find_i64($1, $1, (int_64)-4812882469285658624, *($7 + [32]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$15 }
	$11 = CALL $12(($12 + [216]), $6)
	CALL eosio_assert(((int_32)*($11 + [56]) == (int_32)($12 + [216])), [576])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [976])
	$1 = *(($7 + [32]))
	*(($11 = (($12 + [200]) + [8]))) = *(($7 + [72]))
	*($12 + [200]) = *($7 + [64])
	$2 = *($10)
	*(($6 = (($12 + [184]) + [8]))) = $2
	*($12 + [184]) = *($7 + [48])
	CALL eosio_assert(((int_64)$2 == (int_64)*($11)), [816])
	CALL eosio_assert(((int_64)*($12 + [200]) < (int_64)*($12 + [184])), [1008])
	$2 = *($12 + [200])
	$8 = *($11)
	CALL eosio_assert(((int_64)*($5) == (int_64)$8), [1040])
	$2 = ((int_64)$2 + (int_64)*($3))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [1120])
	CALL eosio_assert(((int_64)$8 == (int_64)*($6)), [816])
	if ( ((int_64)*($12 + [184]) >= (int_64)$2) ){ goto $label$17 }
	$2 = *((($12 + [184]) + [8]))
	*((($12 + [168]) + [8])) = $2
	*($12 + [168]) = *($12 + [184])
	CALL eosio_assert(((int_64)$2 == (int_64)*((($12 + [200]) + [8]))), [1152])
	$2 = (int_64)
	*($12 + [168]) = $2(*($12 + [168]) - *($12 + [200])))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [1232])
	goto $label$16 
	
.LABEL $label$17
	*((($12 + [168]) + [8])) = *(($3 + [8]))
	*($12 + [168]) = *($3)
	
.LABEL $label$16
	CALL prints([1264])
	CALL $19(($12 + [168]))
	CALL prints([1280])
	CALL $19(($12 + [184]))
	CALL prints([1296])
	CALL $19(($12 + [200]))
	CALL prints([1296])
	CALL $19($3)
	*(($5 = ($12 + [160]))) = [0]
	$2 = *($0)
	*($12 + [128]) = $2
	*($12 + [144]) = (int_64)-1
	*($12 + [152]) = (int_64)0
	*($12 + [136]) = $1
	$10 = CALL db_find_i64($2, $1, (int_64)-4812882651500904448, *($12 + [296]))
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$19 }
	$10 = CALL $22(($12 + [128]), $10)
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)($12 + [128])), [576])
	$2 = *($0)
	CALL eosio_assert([1], [80])
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)($12 + [128])), [128])
	CALL eosio_assert(((int_64)*($12 + [128]) == (int_64)CALL $fimport$2()), [176])
	$1 = *($10)
	CALL eosio_assert(((int_64)*($12 + [176]) == (int_64)*(($10 + [16]))), [1040])
	$8 = ((int_64)*($10 + [8]) + (int_64)*($12 + [168]))
	*($10 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [1120])
	CALL eosio_assert((uint_64)(((int_64)*($10 + [40]) + (int_64)3) <= ((int_64)((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [1312])
	*($10 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($10)), [240])
	*($12 + [56]) = (($12 + [304]) + [48])
	*($12 + [52]) = ($12 + [304])
	*($12 + [48]) = ($12 + [304])
	*($12 + [384]) = ($12 + [48])
	*($12 + [92]) = ($10 + [8])
	*($12 + [88]) = $10
	*($12 + [96]) = ($10 + [24])
	*($12 + [100]) = ($10 + [40])
	CALL $23(($12 + [88]), ($12 + [384]))
	CALL db_update_i64(*($10 + [52]), $2, ($12 + [304]), [48])
	$10 = (($12 + [128]) + [16])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$18 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$18 
	
.LABEL $label$19
	$1 = *($0)
	*($12 + [52]) = ($12 + [168])
	*($12 + [48]) = ($12 + [296])
	*($12 + [88]) = $1
	CALL eosio_assert(((int_64)*($12 + [128]) == (int_64)CALL $fimport$2()), [16])
	*($12 + [308]) = ($12 + [48])
	*($12 + [304]) = ($12 + [128])
	*($12 + [312]) = ($12 + [88])
	$10 = CALL $92([64])
	CALL $20($10)
	*($10 + [48]) = ($12 + [128])
	CALL $21(($12 + [304]), $10)
	*($12 + [384]) = $10
	$1 = *($10)
	*($12 + [304]) = $1
	$6 = *($10 + [52])
	*($12 + [360]) = $6
	$9 = ($12 + [156])
	$11 = *($9)
	if ( ((uint_32)$11 >= (uint_32)*($5)) ){ goto $label$21 }
	*($11 + [8]) = $1
	*($11 + [16]) = $6
	*($12 + [384]) = [0]
	*($11) = $10
	*($9) = ($11 + [24])
	goto $label$20 
	
.LABEL $label$21
	CALL $24(($12 + [152]), ($12 + [384]), ($12 + [304]), ($12 + [360]))
	
.LABEL $label$20
	$10 = *($12 + [384])
	*($12 + [384]) = [0]
	if ( ($10 == 0) ){ goto $label$18 }
	CALL $93($10)
	
.LABEL $label$18
	$10 = [0]
	*((($12 + [88]) + [32])) = [0]
	*($12 + [112]) = (int_64)0
	*($12 + [104]) = (int_64)-1
	$1 = *($0)
	*($12 + [88]) = $1
	*($12 + [96]) = $1
	$5 = CALL db_find_i64($1, $1, (int_64)8425852628872724480, *($7 + [28]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$23 }
	$10 = CALL $25(($12 + [88]), $5)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($12 + [88])), [576])
	$1 = *($0)
	CALL eosio_assert([1], [80])
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($12 + [88])), [128])
	CALL eosio_assert(((int_64)*($12 + [88]) == (int_64)CALL $fimport$2()), [176])
	*($10 + [8]) = *($12 + [296])
	*(($10 + [20])) = *($12 + [172])
	*($10 + [16]) = *($12 + [168])
	*(($10 + [28])) = *(($12 + [180]))
	*(($10 + [24])) = *((($12 + [168]) + [8]))
	$5 = *($10)
	*($10 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_32)$5 == (int_32)*($10)), [240])
	*($12 + [392]) = (($12 + [304]) + [36])
	*($12 + [388]) = ($12 + [304])
	*($12 + [384]) = ($12 + [304])
	*($12 + [360]) = ($12 + [384])
	*($12 + [52]) = ($10 + [8])
	*($12 + [48]) = $10
	*($12 + [56]) = ($10 + [16])
	*($12 + [60]) = ($10 + [32])
	CALL $26(($12 + [48]), ($12 + [360]))
	CALL db_update_i64(*($10 + [44]), $1, ($12 + [304]), [36])
	$10 = (($12 + [88]) + [16])
	$1 = (CASTING uint_64)(uint_32 $5)
	if ( (uint_64)($1 <= *($10)) ){ goto $label$22 }
	*($10) = ((int_64)$1 + (int_64)1)
	goto $label$22 
	
.LABEL $label$23
	$2 = *($0)
	CALL eosio_assert(((int_64)*($12 + [88]) == (int_64)CALL $fimport$2()), [16])
	*(($5 = CALL $92([56])) + [24]) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [368])
	$6 = ($5 + [16])
	$1 = (int_64)5462355
	
.LOOP $label$25:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$11 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	CALL eosio_assert($11, [432])
	*($5 + [40]) = ($12 + [88])
	*($5) = *(($7 + [28]))
	*($5 + [8]) = *($12 + [296])
	*(($6 + [12])) = *((($12 + [168]) + [12]))
	*(($6 + [8])) = *((($12 + [168]) + [8]))
	*(($6 + [4])) = *($12 + [172])
	*($6) = *($12 + [168])
	*($5 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($12 + [392]) = (($12 + [304]) + [36])
	*($12 + [388]) = ($12 + [304])
	*($12 + [384]) = ($12 + [304])
	*($12 + [360]) = ($12 + [384])
	*($12 + [52]) = ($5 + [8])
	*($12 + [48]) = $5
	*($12 + [56]) = $6
	*($12 + [60]) = ($5 + [32])
	CALL $26(($12 + [48]), ($12 + [360]))
	$1 = *($5)
	$11 = CALL db_store_i64(*((($12 + [88]) + [8])), (int_64)8425852628872724480, $2, $1, ($12 + [304]), [36])
	*($5 + [44]) = $11
	$10 = ($12 + [104])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$28 }
	*($10) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$28
	*($12 + [48]) = $5
	$1 = *($5)
	*($12 + [304]) = $1
	*($12 + [384]) = $11
	$10 = *((($12 + [88]) + [28]))
	if ( ((uint_32)$10 >= (uint_32)*((($12 + [88]) + [32]))) ){ goto $label$30 }
	*($10 + [8]) = $1
	*($10 + [16]) = $11
	*($12 + [48]) = [0]
	*($10) = $5
	*(($12 + [116])) = ($10 + [24])
	goto $label$29 
	
.LABEL $label$30
	CALL $27(($12 + [112]), ($12 + [48]), ($12 + [304]), ($12 + [384]))
	
.LABEL $label$29
	$10 = *($12 + [48])
	*($12 + [48]) = [0]
	if ( ($10 == 0) ){ goto $label$22 }
	CALL $93($10)
	
.LABEL $label$22
	$1 = *($0)
	*($12 + [308]) = $4
	*($12 + [316]) = $0
	*($12 + [304]) = ($12 + [168])
	*($12 + [312]) = ($12 + [296])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [80])
	CALL $28(($12 + [256]), $7, $1, ($12 + [304]))
	*(($4 = ($12 + [80]))) = [0]
	$1 = *($0)
	*($12 + [48]) = $1
	*($12 + [64]) = (int_64)-1
	*($12 + [72]) = (int_64)0
	*($12 + [56]) = $1
	$10 = CALL db_find_i64($1, $1, (int_64)-3020376800527122432, *($12 + [296]))
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$32 }
	$10 = CALL $31(($12 + [48]), $10)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($12 + [48])), [576])
	$2 = *($0)
	CALL eosio_assert([1], [80])
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($12 + [48])), [128])
	CALL eosio_assert(((int_64)*($12 + [48]) == (int_64)CALL $fimport$2()), [176])
	$1 = *($10)
	CALL eosio_assert(((int_64)*($12 + [176]) == (int_64)*(($10 + [16]))), [1040])
	$8 = ((int_64)*($10 + [8]) + (int_64)*($12 + [168]))
	*($10 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [1120])
	CALL eosio_assert(((int_64)$1 == (int_64)*($10)), [240])
	*($12 + [368]) = (($12 + [304]) + [40])
	*($12 + [364]) = ($12 + [304])
	*($12 + [360]) = ($12 + [304])
	*($12 + [376]) = ($12 + [360])
	*($12 + [388]) = ($10 + [8])
	*($12 + [384]) = $10
	*($12 + [392]) = ($10 + [24])
	CALL $32(($12 + [384]), ($12 + [376]))
	CALL db_update_i64(*($10 + [44]), $2, ($12 + [304]), [40])
	$10 = (($12 + [48]) + [16])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$31 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$31 
	
.LABEL $label$32
	$1 = *($0)
	*($12 + [364]) = ($12 + [168])
	*($12 + [360]) = ($12 + [296])
	*($12 + [384]) = $1
	CALL eosio_assert(((int_64)*($12 + [48]) == (int_64)CALL $fimport$2()), [16])
	*($12 + [308]) = ($12 + [360])
	*($12 + [304]) = ($12 + [48])
	*($12 + [312]) = ($12 + [384])
	$10 = CALL $92([56])
	CALL $29($10)
	*($10 + [40]) = ($12 + [48])
	CALL $30(($12 + [304]), $10)
	*($12 + [376]) = $10
	$1 = *($10)
	*($12 + [304]) = $1
	$11 = *($10 + [44])
	*($12 + [356]) = $11
	$6 = ($12 + [76])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*($4)) ){ goto $label$34 }
	*($5 + [8]) = $1
	*($5 + [16]) = $11
	*($12 + [376]) = [0]
	*($5) = $10
	*($6) = ($5 + [24])
	goto $label$33 
	
.LABEL $label$34
	CALL $33(($12 + [72]), ($12 + [376]), ($12 + [304]), ($12 + [356]))
	
.LABEL $label$33
	$10 = *($12 + [376])
	*($12 + [376]) = [0]
	if ( ($10 == 0) ){ goto $label$31 }
	CALL $93($10)
	
.LABEL $label$31
	$4 = (($12 + [168]) + [8])
	$10 = ($3 + [8])
	CALL eosio_assert(((int_64)*($10) == (int_64)*($4)), [816])
	if ( ((int_64)*($3) <= (int_64)*($12 + [168])) ){ goto $label$35 }
	*((($12 + [32]) + [12])) = *(($3 + [12]))
	*(($5 = (($12 + [32]) + [8]))) = *($10)
	$2 = *($12 + [296])
	*($12 + [32]) = *($3)
	*($12 + [36]) = *(($3 + [4]))
	$3 = *(($7 + [32]))
	CALL eosio_assert(((int_64)*($4) == (int_64)*($5)), [1152])
	$1 = (int_64)
	*($12 + [32]) = $1(*($12 + [32]) - *($12 + [168])))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [1232])
	*((($12 + [16]) + [8])) = [0]
	*($12 + [16]) = (int_64)0
	$10 = CALL strlen([1328])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$38 }
	*($12 + [16]) = ($10 << [1])
	$7 = (($12 + [16]) | [1])
	if ( $10 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$4 = (($10 + [16]) & [-16])
	$7 = CALL $92($4)
	*($12 + [16]) = ($4 | [1])
	*($12 + [24]) = $7
	*($12 + [20]) = $10
	
.LABEL $label$37
	CALL memcpy($7, [1328], $10)
	
.LABEL $label$36
	*(($7 + $10)) = [0]
	*(($12 + [8])) = *((($12 + [32]) + [8]))
	*($12) = *($12 + [32])
	CALL _ZN5eosio11farmeosrich13delaytransferEmyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $3, $2, $12, ($12 + [16]))
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$35 }
	CALL $93(*($12 + [24]))
	
.LABEL $label$35
	$3 = *($12 + [72])
	if ( ($3 == 0) ){ goto $label$39 }
	$0 = ($12 + [76])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$41 }
	
.LOOP $label$42:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$43 }
	CALL $93($7)
	
.LABEL $label$43
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$42 }
	$10 = *(($12 + [72]))
	goto $label$40 
	
.LABEL $label$41
	$10 = $3
	
.LABEL $label$40
	*($0) = $3
	CALL $93($10)
	
.LABEL $label$39
	$3 = *($12 + [112])
	if ( ($3 == 0) ){ goto $label$44 }
	$0 = ($12 + [116])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$46 }
	
.LOOP $label$47:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$48 }
	CALL $93($7)
	
.LABEL $label$48
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$47 }
	$10 = *(($12 + [112]))
	goto $label$45 
	
.LABEL $label$46
	$10 = $3
	
.LABEL $label$45
	*($0) = $3
	CALL $93($10)
	
.LABEL $label$44
	$3 = *($12 + [152])
	if ( ($3 == 0) ){ goto $label$49 }
	$0 = ($12 + [156])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$51 }
	
.LOOP $label$52:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$53 }
	CALL $93($7)
	
.LABEL $label$53
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$52 }
	$10 = *(($12 + [152]))
	goto $label$50 
	
.LABEL $label$51
	$10 = $3
	
.LABEL $label$50
	*($0) = $3
	CALL $93($10)
	
.LABEL $label$49
	$3 = *($12 + [240])
	if ( ($3 == 0) ){ goto $label$54 }
	$0 = ($12 + [244])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$56 }
	
.LOOP $label$57:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$58 }
	CALL $93($7)
	
.LABEL $label$58
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$57 }
	$10 = *(($12 + [240]))
	goto $label$55 
	
.LABEL $label$56
	$10 = $3
	
.LABEL $label$55
	*($0) = $3
	CALL $93($10)
	
.LABEL $label$54
	$3 = *($12 + [280])
	if ( ($3 == 0) ){ goto $label$2 }
	$0 = ($12 + [284])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$60 }
	
.LOOP $label$61:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$62 }
	CALL $93($7)
	
.LABEL $label$62
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$61 }
	$10 = *(($12 + [280]))
	goto $label$59 
	
.LABEL $label$60
	$10 = $3
	
.LABEL $label$59
	*($0) = $3
	CALL $93($10)
	
.LABEL $label$2
	*([0] + [4]) = ($12 + [400])
	return (unreachable)
	
.LABEL $label$1
	CALL $94(($12 + [16]))
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([1552])
	CALL prints_l($2, $3)
	CALL prints([1280])
	CALL $52($1, [0])
	*([0] + [4]) = $10
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1872])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = *($1)
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [1936])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $93($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $93($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [128])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [240]) == (int_32)$0), [128])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [176])
	*($1 + [24]) = [3]
	$3 = *($1)
	$8 = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)10) & (int_64)4294967295)
	*($1 + [176]) = $8
	$7 = ($1 + [184])
	$6 = ($1 + [176])
	$5 = ($1 + [24])
	$4 = (CASTING uint_64)(uint_32 $3)
	$8 = ((int_64)$8 + (int_64)120)
	if ( ((uint_64)*($1 + [184]) >= (uint_64)$8) ){ goto $label$1 }
	*($7) = $8
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 == (int_32)*($1)), [240])
	$3 = $9
	$9 = ($3 + [-240])
	*([0] + [4]) = $9
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($3 + [-12])
	*($10 + [16]) = $10
	*($10 + [28]) = ($1 + [8])
	*($10 + [24]) = $1
	*($10 + [32]) = $5
	*($10 + [36]) = ($1 + [28])
	*($10 + [40]) = ($1 + [32])
	*($10 + [44]) = ($1 + [36])
	*($10 + [48]) = ($1 + [40])
	*($10 + [52]) = ($1 + [48])
	*($10 + [56]) = ($1 + [64])
	*($10 + [60]) = ($1 + [80])
	*($10 + [64]) = ($1 + [96])
	*($10 + [68]) = ($1 + [112])
	*($10 + [72]) = ($1 + [128])
	*($10 + [76]) = ($1 + [144])
	*($10 + [80]) = ($1 + [160])
	*($10 + [84]) = $6
	*($10 + [88]) = $7
	*($10 + [92]) = ($1 + [192])
	*($10 + [96]) = ($1 + [200])
	*($10 + [100]) = ($1 + [208])
	*($10 + [104]) = ($1 + [212])
	*($10 + [108]) = ($1 + [216])
	*($10 + [112]) = ($1 + [224])
	*($10 + [116]) = ($1 + [228])
	*($10 + [120]) = ($1 + [232])
	*($10 + [124]) = ($1 + [236])
	CALL $10(($10 + [24]), ($10 + [16]))
	CALL db_update_i64(*($1 + [244]), $2, $9, [228])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$2
	*([0] + [4]) = ($10 + [128])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [352])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([1568])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC _ZN5eosio11farmeosrich6profitEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [544])
	*([0] + [4]) = $14
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1584]
	$12 = (int_64)0
	
.LOOP $label$1:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($9)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($12)
	$9 = [0]
	*(($14 + [168])) = [0]
	*($14 + [152]) = (int_64)-1
	$11 = *($0)
	*($14 + [136]) = $11
	*($14 + [144]) = $11
	*($14 + [160]) = (int_64)0
	$2 = [0]
	$3 = CALL db_lowerbound_i64($11, $11, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$2 = CALL $9(($14 + [136]), $3)
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [656])
	$2 = CALL db_lowerbound_i64(*($14 + [136]), *(($14 + [144])), (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$9 = CALL $9(($14 + [136]), $2)
	
.LABEL $label$6
	*($14 + [128]) = ($14 + [136])
	*($14 + [132]) = $9
	$2 = [0]
	*(($14 + [120])) = [0]
	*($14 + [104]) = (int_64)-1
	*($14 + [112]) = (int_64)0
	$11 = *($0)
	*($14 + [88]) = $11
	*($14 + [96]) = $11
	$9 = CALL db_find_i64($11, $11, (int_64)-4812882469285658624, *($9 + [192]))
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$8 }
	$2 = CALL $12(($14 + [88]), $9)
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)($14 + [88])), [576])
	*($14 + [84]) = $2
	*($14 + [80]) = ($14 + [88])
	$3 = (($14 + [80]) | [4])
	goto $label$7 
	
.LABEL $label$8
	*($14 + [84]) = [0]
	*($14 + [80]) = ($14 + [88])
	$3 = (($14 + [80]) | [4])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [976])
	$9 = *($14 + [132])
	CALL eosio_assert(((int_64)*(($9 + [56])) == (int_64)*(($9 + [72]))), [816])
	CALL eosio_assert(((int_64)*($9 + [48]) == (int_64)*($9 + [64])), [1600])
	CALL eosio_assert(((int_32)*(*($14 + [132]) + [24]) == (int_32)[2]), [1600])
	*((($14 + [40]) + [32])) = [0]
	*($14 + [56]) = (int_64)-1
	$10 = *($0)
	*($14 + [40]) = $10
	*($14 + [48]) = $10
	*($14 + [64]) = (int_64)0
	*($14) = $10
	*($14 + [16]) = (int_64)-1
	*($14 + [24]) = [0]
	$9 = *($14 + [132])
	*($14 + [8]) = *($9 + [192])
	*(($2 = ($14 + [28]))) = [0]
	*(($14 + [32])) = [0]
	$11 = *($9 + [200])
	if ( ((int_64)$11 != (int_64)0) ){ goto $label$9 }
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [80])
	CALL eosio_assert(((int_32)*($9 + [240]) == (int_32)($14 + [136])), [128])
	CALL eosio_assert(((int_64)*($14 + [136]) == (int_64)CALL $fimport$2()), [176])
	$4 = *($9)
	$3 = *($3)
	$11 = *($3 + [24])
	$13 = *(($3 + [32]))
	CALL eosio_assert(((int_64)*(($3 + [48])) == (int_64)$13), [1152])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($11 - *($3 + [40]))) > (int_64)-4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [1232])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($9 + [120]))), [816])
	*($9 + [208]) = ((int_64)*($9 + [112]) >= (int_64)$11)
	CALL prints([1616])
	CALL printui(*($9 + [208]))
	CALL eosio_assert(((int_32)$4 == (int_32)*($9)), [240])
	*($14 + [424]) = (($14 + [176]) + [228])
	*($14 + [420]) = ($14 + [176])
	*($14 + [416]) = ($14 + [176])
	*($14 + [432]) = ($14 + [416])
	*($14 + [444]) = ($9 + [8])
	*($14 + [440]) = $9
	*($14 + [448]) = ($9 + [24])
	*($14 + [452]) = ($9 + [28])
	*($14 + [456]) = ($9 + [32])
	*($14 + [460]) = ($9 + [36])
	*($14 + [464]) = ($9 + [40])
	*($14 + [468]) = ($9 + [48])
	*($14 + [472]) = ($9 + [64])
	*($14 + [476]) = ($9 + [80])
	*($14 + [480]) = ($9 + [96])
	*($14 + [484]) = ($9 + [112])
	*($14 + [488]) = ($9 + [128])
	*($14 + [492]) = ($9 + [144])
	*($14 + [496]) = ($9 + [160])
	*($14 + [500]) = ($9 + [176])
	*($14 + [504]) = ($9 + [184])
	*($14 + [508]) = ($9 + [192])
	*($14 + [512]) = ($9 + [200])
	*($14 + [516]) = ($9 + [208])
	*($14 + [520]) = ($9 + [212])
	*($14 + [524]) = ($9 + [216])
	*($14 + [528]) = ($9 + [224])
	*($14 + [532]) = ($9 + [228])
	*($14 + [536]) = ($9 + [232])
	*($14 + [540]) = ($9 + [236])
	CALL $10(($14 + [440]), ($14 + [432]))
	CALL db_update_i64(*($9 + [244]), $10, ($14 + [176]), [228])
	$9 = ($14 + [152])
	$11 = (CASTING uint_64)(uint_32 $4)
	if ( (uint_64)($11 <= *($9)) ){ goto $label$10 }
	*($9) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$10
	$11 = *(*($14 + [132]) + [200])
	if ( ((int_64)$11 != (int_64)0) ){ goto $label$9 }
	$11 = *(CALL $22($14, CALL $fimport$6(*($14), *(($14 + [8])), (int_64)-4812882651500904448, (int_64)0)))
	
.LABEL $label$9
	$5 = *(($14 + [24]))
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$11 }
	$9 = ($3 + [-24])
	$4 = ([0] - $5)
	
.LOOP $label$12:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$11 }
	$3 = $9
	$2 = ($9 + [-24])
	$9 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$14 }
	$9 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$14), [576])
	goto $label$13 
	
.LABEL $label$14
	$9 = CALL db_find_i64(*($14), *(($14 + [8])), (int_64)-4812882651500904448, $11)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$15 }
	$9 = CALL $22($14, $9)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$14), [576])
	goto $label$13 
	
.LABEL $label$15
	$9 = [0]
	
.LABEL $label$13
	*($14 + [444]) = $9
	*($14 + [440]) = $14
	if ( (int_64)(*(*($14 + [132]) + [200]) == 0) ){ goto $label$16 }
	if ( ($9 == 0) ){ goto $label$16 }
	$2 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1632])
	$9 = CALL db_next_i64(*(*($14 + [444]) + [52]), ($14 + [176]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	$2 = CALL $22(*($14 + [440]), $9)
	
.LABEL $label$17
	*($14 + [444]) = $2
	
.LABEL $label$16
	if ( ($1 == 0) ){ goto $label$18 }
	$4 = ($14 + [188])
	$5 = ($14 + [184])
	$6 = ($14 + [192])
	$7 = ($14 + [196])
	$8 = ($14 + [200])
	$2 = [0]
	
.LOOP $label$19:
	$11 = *($0)
	$9 = *($14 + [132])
	*($4) = $0
	*($5) = ($14 + [88])
	*($6) = ($14 + [128])
	*($7) = ($14 + [80])
	*($8) = ($14 + [40])
	*($14 + [180]) = $14
	*($14 + [176]) = ($14 + [440])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [80])
	CALL $54(($14 + [136]), $9, $11, ($14 + [176]))
	if ( (*($14 + [444]) == 0) ){ goto $label$18 }
	CALL eosio_assert([1], [1632])
	$9 = [0]
	$3 = CALL db_next_i64(*(*($14 + [444]) + [52]), ($14 + [176]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$20 }
	$9 = CALL $22(*($14 + [440]), $3)
	
.LABEL $label$20
	*($14 + [444]) = $9
	$2 = ($2 + [1])
	if ( ($2 <= $1) ){ goto $label$19 }
	
.LABEL $label$18
	$0 = *($14 + [24])
	if ( ($0 == 0) ){ goto $label$21 }
	$3 = ($14 + [28])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$23 }
	
.LOOP $label$24:
	$9 = ($9 + [-24])
	$2 = *($9)
	*($9) = [0]
	if ( ($2 == 0) ){ goto $label$25 }
	CALL $93($2)
	
.LABEL $label$25
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$24 }
	$9 = *(($14 + [24]))
	goto $label$22 
	
.LABEL $label$23
	$9 = $0
	
.LABEL $label$22
	*($3) = $0
	CALL $93($9)
	
.LABEL $label$21
	$0 = *($14 + [64])
	if ( ($0 == 0) ){ goto $label$26 }
	$3 = ($14 + [68])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$28 }
	
.LOOP $label$29:
	$9 = ($9 + [-24])
	$2 = *($9)
	*($9) = [0]
	if ( ($2 == 0) ){ goto $label$30 }
	CALL $93($2)
	
.LABEL $label$30
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$29 }
	$9 = *(($14 + [64]))
	goto $label$27 
	
.LABEL $label$28
	$9 = $0
	
.LABEL $label$27
	*($3) = $0
	CALL $93($9)
	
.LABEL $label$26
	$0 = *($14 + [112])
	if ( ($0 == 0) ){ goto $label$31 }
	$3 = ($14 + [116])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$33 }
	
.LOOP $label$34:
	$9 = ($9 + [-24])
	$2 = *($9)
	*($9) = [0]
	if ( ($2 == 0) ){ goto $label$35 }
	CALL $93($2)
	
.LABEL $label$35
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$34 }
	$9 = *(($14 + [112]))
	goto $label$32 
	
.LABEL $label$33
	$9 = $0
	
.LABEL $label$32
	*($3) = $0
	CALL $93($9)
	
.LABEL $label$31
	$0 = *($14 + [160])
	if ( ($0 == 0) ){ goto $label$36 }
	$3 = ($14 + [164])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$38 }
	
.LOOP $label$39:
	$9 = ($9 + [-24])
	$2 = *($9)
	*($9) = [0]
	if ( ($2 == 0) ){ goto $label$40 }
	CALL $93($2)
	
.LABEL $label$40
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$39 }
	$9 = *(($14 + [160]))
	goto $label$37 
	
.LABEL $label$38
	$9 = $0
	
.LABEL $label$37
	*($3) = $0
	CALL $93($9)
	
.LABEL $label$36
	*([0] + [4]) = ($14 + [544])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [160])
	$17 = $18
	*([0] + [4]) = $18
	CALL eosio_assert(((int_32)*($1 + [240]) == (int_32)$0), [128])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [176])
	$6 = *($3 + [12])
	$4 = *($1)
	$5 = (CASTING uint_64)(uint_32 $4)
	$14 = *(*($3) + [4])
	if ( ($14 == 0) ){ goto $label$7 }
	*($1 + [200]) = *($14)
	*($17 + [104]) = (int_64)0
	$13 = *(($1 + [56]))
	*($17 + [112]) = $13
	CALL eosio_assert([1], [368])
	$16 = ($1 + [200])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$10 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$10 = [0]
	
.LABEL $label$8
	CALL eosio_assert($10, [432])
	$14 = *(*($3 + [16]) + [4])
	if ( (*($14 + [208]) == 0) ){ goto $label$6 }
	$14 = *(*($3) + [4])
	$11 = *(($14 + [16]))
	$13 = *($14 + [8])
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [544])
	$14 = *(*($3) + [4])
	CALL eosio_assert(((int_64)$11 == (int_64)*(($14 + [32]))), [1152])
	$13 = (int_64)
	CALL eosio_assert(((int_64)$13(((int_64)((int_64)$13 * (int_64)105) / (int_64)100) - *($14 + [24]))) > (int_64)-4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [1232])
	*($17 + [104]) = $13
	$15 = ($3 + [20])
	goto $label$5 
	
.LABEL $label$7
	*($1 + [200]) = (int_64)0
	if ( ((int_64)*($1 + [112]) > (int_64)10000) ){ goto $label$4 }
	$14 = *($1 + [32])
	goto $label$3 
	
.LABEL $label$6
	$11 = *($14 + [112])
	CALL prints([1664])
	CALL printi(*($14 + [112]))
	$14 = *(*($3) + [4])
	CALL prints([1680])
	CALL $19(($14 + [8]))
	CALL prints([1296])
	$14 = *(*($3) + [4])
	*(($17 + [12])) = *(($14 + [20]))
	*(($17 + [8])) = *(($14 + [16]))
	*($17) = *($14 + [8])
	*($17 + [4]) = *(($14 + [12]))
	CALL eosio_assert([1], [464])
	$13 = *($17)
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [544])
	*($17) = ((int_64)$13 * (int_64)$11)
	CALL prints([1696])
	CALL $19($17)
	*($17 + [104]) = ((int_64)*($17) / (int_64)*(*(*($3 + [20]) + [4]) + [8]))
	$15 = ($3 + [20])
	
.LABEL $label$5
	$10 = ($3 + [16])
	$14 = *(*($10) + [4])
	CALL prints([1712])
	CALL printui(*($14 + [208]))
	CALL prints([1280])
	CALL prints([1728])
	CALL $19(($17 + [104]))
	$9 = (($17 + [104]) + [8])
	CALL eosio_assert(((int_64)*($9) == (int_64)*(($1 + [120]))), [1152])
	$13 = (int_64)
	*($1 + [112]) = $13(*($1 + [112]) - *($17 + [104])))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [1200])
	CALL eosio_assert(((int_64)*($1 + [112]) < (int_64)4611686018427387904), [1232])
	$7 = *(($3 + [4]))
	$13 = *($6)
	$14 = *(*($3) + [4])
	*($17) = $6
	*($17 + [8]) = *($10)
	*($17 + [4]) = ($17 + [104])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [80])
	CALL $56($7, $14, $13, $17)
	$13 = *($6)
	$10 = *($3 + [8])
	$14 = *(*($15) + [4])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [80])
	CALL eosio_assert(((int_32)$10 == (int_32)*($14 + [56])), [128])
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$2()), [176])
	$15 = *($14)
	CALL eosio_assert(((int_64)*($9) == (int_64)*(($14 + [48]))), [1040])
	$11 = ((int_64)*($14 + [40]) + (int_64)*($17 + [104]))
	*($14 + [40]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($14 + [40]) < (int_64)4611686018427387904), [1120])
	CALL eosio_assert(((int_32)$15 == (int_32)*($14)), [240])
	*($17 + [128]) = ($17 + [52])
	*($17 + [124]) = $17
	*($17 + [120]) = $17
	*($17 + [136]) = ($17 + [120])
	*($17 + [148]) = ($14 + [8])
	*($17 + [144]) = $14
	*($17 + [152]) = ($14 + [24])
	*($17 + [156]) = ($14 + [40])
	CALL $16(($17 + [144]), ($17 + [136]))
	CALL db_update_i64(*($14 + [60]), $13, $17, [52])
	$13 = (CASTING uint_64)(uint_32 $15)
	if ( (uint_64)($13 <= *($10 + [16])) ){ goto $label$13 }
	*(($10 + [16])) = ((int_64)$13 + (int_64)1)
	
.LABEL $label$13
	$13 = *(*(*($3) + [4]))
	$8 = *($7 + [24])
	$7 = *($3 + [24])
	$15 = *(($7 + [28]))
	if ( ((int_32)$15 == (int_32)$8) ){ goto $label$14 }
	$14 = ($15 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$15:
	if ( ((int_64)*(*($14)) == (int_64)$13) ){ goto $label$14 }
	$15 = $14
	$10 = ($14 + [-24])
	$14 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	if ( ((int_32)$15 == (int_32)$8) ){ goto $label$17 }
	$14 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [40]) == (int_32)$7), [576])
	if ( $14 ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	$14 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)-3020376800527122432, $13)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$14 = CALL $31($7, $14)
	CALL eosio_assert(((int_32)*($14 + [40]) == (int_32)$7), [576])
	
.LABEL $label$16
	$10 = *(($3 + [24]))
	$11 = *($6)
	CALL eosio_assert([1], [80])
	CALL eosio_assert(((int_32)$10 == (int_32)*($14 + [40])), [128])
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$2()), [176])
	$13 = *($14)
	CALL eosio_assert(((int_64)*((($17 + [104]) + [8])) == (int_64)*(($14 + [32]))), [1040])
	$12 = ((int_64)*($14 + [24]) + (int_64)*($17 + [104]))
	*($14 + [24]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($14 + [24]) < (int_64)4611686018427387904), [1120])
	CALL eosio_assert(((int_64)$13 == (int_64)*($14)), [240])
	*($17 + [128]) = ($17 + [40])
	*($17 + [124]) = $17
	*($17 + [120]) = $17
	*($17 + [136]) = ($17 + [120])
	*($17 + [148]) = ($14 + [8])
	*($17 + [144]) = $14
	*($17 + [152]) = ($14 + [24])
	CALL $32(($17 + [144]), ($17 + [136]))
	CALL db_update_i64(*($14 + [44]), $11, $17, [40])
	if ( (uint_64)($13 <= *($10 + [16])) ){ goto $label$1 }
	*(($10 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$4
	$14 = *($1 + [192])
	if ( ((int_32)$14 != (int_32)*($1 + [32])) ){ goto $label$2 }
	
.LABEL $label$3
	*($1 + [24]) = [4]
	*(($10 = ($1 + [32]))) = ($14 + [1])
	$14 = ($1 + [56])
	$11 = *($14)
	$13 = *($1 + [48])
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [544])
	*($1 + [64]) = (int_64)0
	*($14) = $11
	*($1 + [48]) = ((int_64)((int_64)$13 * (int_64)110) / (int_64)100)
	$9 = *($10)
	$8 = *($16 + [24])
	$16 = *($3 + [8])
	$15 = *(($16 + [28]))
	if ( ((int_32)$15 == (int_32)$8) ){ goto $label$18 }
	$14 = ($15 + [-24])
	$7 = ([0] - $8)
	
.LOOP $label$19:
	if ( ((int_32)*(*($14)) == (int_32)$9) ){ goto $label$18 }
	$15 = $14
	$10 = ($14 + [-24])
	$14 = $10
	if ( ((int_32)($10 + $7) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	if ( ((int_32)$15 == (int_32)$8) ){ goto $label$21 }
	$14 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [56]) == (int_32)$16), [576])
	if ( $14 ){ goto $label$2 }
	goto $label$20 
	
.LABEL $label$21
	$14 = CALL db_find_i64(*($16), *($16 + [8]), (int_64)-4812882469285658624, (CASTING uint_64)(uint_32 $9))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*(CALL $12($16, $14) + [56]) == (int_32)$16), [576])
	goto $label$2 
	
.LABEL $label$20
	$14 = *(($3 + [8]))
	$13 = *($6)
	*($17 + [136]) = $1
	*($17 + [144]) = $13
	CALL eosio_assert(((int_64)*($14) == (int_64)CALL $fimport$2()), [16])
	*($17) = $14
	*($17 + [4]) = ($17 + [136])
	*($17 + [8]) = ($17 + [144])
	$10 = CALL $92([72])
	CALL $13($10)
	*($10 + [56]) = $14
	CALL $55($17, $10)
	*($17 + [104]) = $10
	$13 = *($10)
	*($17) = $13
	$9 = *($10 + [60])
	*($17 + [120]) = $9
	$6 = ($14 + [28])
	$15 = *($6)
	if ( ((uint_32)$15 >= (uint_32)*(($14 + [32]))) ){ goto $label$23 }
	*($15 + [8]) = $13
	*($15 + [16]) = $9
	*($17 + [104]) = [0]
	*($15) = $10
	*($6) = ($15 + [24])
	goto $label$22 
	
.LABEL $label$23
	CALL $15(($14 + [24]), ($17 + [104]), $17, ($17 + [120]))
	
.LABEL $label$22
	$14 = *($17 + [104])
	*($17 + [104]) = [0]
	if ( ($14 == 0) ){ goto $label$2 }
	CALL $93($14)
	
.LABEL $label$2
	$16 = ($1 + [200])
	if ( (*(*(*($3 + [16]) + [4]) + [208]) == 0) ){ goto $label$1 }
	*($1 + [192]) = (*($1 + [192]) + [1])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [240])
	$10 = $18
	$14 = ($10 + [-240])
	*([0] + [4]) = $14
	*($17 + [148]) = $14
	*($17 + [144]) = $14
	*($17 + [152]) = ($10 + [-12])
	*($17 + [104]) = ($17 + [144])
	*($17 + [4]) = ($1 + [8])
	*($17) = $1
	*($17 + [8]) = ($1 + [24])
	*($17 + [12]) = ($1 + [28])
	*($17 + [16]) = ($1 + [32])
	*($17 + [20]) = ($1 + [36])
	*($17 + [24]) = ($1 + [40])
	*($17 + [28]) = ($1 + [48])
	*($17 + [32]) = ($1 + [64])
	*($17 + [36]) = ($1 + [80])
	*($17 + [40]) = ($1 + [96])
	*($17 + [44]) = ($1 + [112])
	*($17 + [48]) = ($1 + [128])
	*($17 + [52]) = ($1 + [144])
	*($17 + [56]) = ($1 + [160])
	*($17 + [60]) = ($1 + [176])
	*($17 + [64]) = ($1 + [184])
	*($17 + [68]) = ($1 + [192])
	*($17 + [72]) = $16
	*($17 + [76]) = ($1 + [208])
	*($17 + [80]) = ($1 + [212])
	*($17 + [84]) = ($1 + [216])
	*($17 + [88]) = ($1 + [224])
	*($17 + [92]) = ($1 + [228])
	*($17 + [96]) = ($1 + [232])
	*($17 + [100]) = ($1 + [236])
	CALL $10($17, ($17 + [104]))
	CALL db_update_i64(*($1 + [244]), $2, $14, [228])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$24 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$24
	*([0] + [4]) = ($17 + [160])
}

void .FUNC _ZN5eosio11farmeosrich13delaytransferEmyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	$11 = CALL current_time()
	*(($13 + [108])) = [0]
	*(($13 + [112])) = [0]
	*($13 + [92]) = [0]
	*($13 + [96]) = [0]
	*($13 + [100]) = [0]
	*($13 + [104]) = [0]
	*($13 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$11 / (uint_64)(int_64)1000000)) + [60])
	*($13 + [116]) = [0]
	*(($13 + [120])) = [0]
	*(($13 + [124])) = [0]
	*($13 + [128]) = [0]
	*(($13 + [132])) = [0]
	*(($13 + [136])) = [0]
	$8 = *($4)
	$5 = CALL strlen([1344])
	if ( ((int_32)$5 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$1 }
	if ( CALL $98($4, [0], [-1], [1344], $5) ){ goto $label$1 }
	CALL $96($4, [1360])
	
.LABEL $label$1
	$11 = (int_64)0
	$12 = (int_64)59
	$8 = [1392]
	$9 = (int_64)0
	
.LOOP $label$2:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$3 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$3
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$2 }
	*($13 + [72]) = $9
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$6 }
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [1408]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$12 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$12 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$9 = ((int_64)$12 | (int_64)$9)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$7 }
	*($13 + [72]) = $9
	
.LABEL $label$6
	$7 = ($13 + [116])
	$6 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [1424]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$18 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$18
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$12 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$13 }
	*($13 + [64]) = $9
	*($13 + [56]) = $6
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [1440]
	$9 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$24 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$5 = ($5 + [165])
	goto $label$22 
	
.LABEL $label$24
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$20
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$12 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$19 }
	*($13 + [48]) = $9
	*(($13 + [28])) = *(($3 + [12]))
	*(($13 + [24])) = *(($3 + [8]))
	*(($13 + [20])) = *(($3 + [4]))
	*($13 + [8]) = $2
	*($13) = $6
	*($13 + [16]) = *($3)
	CALL $100(($13 + [32]), $4)
	CALL $35($7, ($13 + [56]), ($13 + [72]), ($13 + [48]), $13)
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$25 }
	CALL $93(*(($13 + [40])))
	
.LABEL $label$25
	$11 = CALL current_time()
	*($13 + [8]) = (int_64)0
	*($13) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $1) + (int_64)$2) + (int_64)((int_64)((uint_64)$11 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	$11 = *($0)
	CALL $36(($13 + [56]), ($13 + [80]))
	$8 = *($13 + [56])
	CALL send_deferred($13, $11, $8, (*($13 + [60]) - $8), [0])
	$8 = *($13 + [56])
	if ( ($8 == 0) ){ goto $label$26 }
	*($13 + [60]) = $8
	CALL $93($8)
	
.LABEL $label$26
	CALL $37(($13 + [80]))
	*([0] + [4]) = ($13 + [144])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [128])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [176])
	$4 = *($1)
	$5 = *($3)
	$10 = *($3 + [4])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($1 + [32]))), [1040])
	$7 = ((int_64)*($1 + [24]) + (int_64)*($10))
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1120])
	$8 = *($3 + [4])
	*(((($10 = $11) + [48]) + [12])) = *(($8 + [12]))
	*((($10 + [48]) + [8])) = *(($8 + [8]))
	*($10 + [48]) = *($8)
	*($10 + [52]) = *(($8 + [4]))
	$7 = *($1)
	$6 = *(*(*($3 + [8]) + [4]) + [192])
	*((($10 + [32]) + [8])) = [0]
	*($10 + [32]) = (int_64)0
	$3 = CALL strlen([1344])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($10 + [32]) = ($3 << [1])
	$8 = (($10 + [32]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$9 = (($3 + [16]) & [-16])
	$8 = CALL $92($9)
	*($10 + [32]) = ($9 | [1])
	*($10 + [40]) = $8
	*($10 + [36]) = $3
	
.LABEL $label$3
	CALL memcpy($8, [1344], $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	*((($10 + [8]) + [8])) = *((($10 + [48]) + [8]))
	*($10 + [8]) = *($10 + [48])
	CALL _ZN5eosio11farmeosrich13delaytransferEmyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($5, $6, $7, ($10 + [8]), ($10 + [32]))
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $93(*($10 + [40]))
	
.LABEL $label$5
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [240])
	$8 = $11
	$3 = ($8 + [-48])
	*([0] + [4]) = $3
	*($10 + [36]) = $3
	*($10 + [32]) = $3
	*($10 + [40]) = $8
	*($10 + [24]) = ($10 + [32])
	*($10 + [52]) = ($1 + [8])
	*($10 + [48]) = $1
	*($10 + [56]) = ($1 + [24])
	*($10 + [60]) = ($1 + [40])
	CALL $23(($10 + [48]), ($10 + [24]))
	CALL db_update_i64(*($1 + [52]), $2, $3, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $94(($10 + [32]))
}

void .FUNC _ZN5eosio11farmeosrich7eraseinEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1584]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($4)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [165])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	*((($10 + [48]) + [32])) = [0]
	*($10 + [64]) = (int_64)-1
	$6 = *($0)
	*($10 + [48]) = $6
	*($10 + [56]) = $6
	*($10 + [72]) = (int_64)0
	$4 = [0]
	$9 = CALL db_lowerbound_i64($6, $6, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	CALL $9(($10 + [48]), $9)
	$4 = [1]
	
.LABEL $label$5
	CALL eosio_assert($4, [656])
	$2 = CALL $9(($10 + [48]), CALL $fimport$6(*($10 + [48]), *((($10 + [48]) + [8])), (int_64)7235159550150574080, (int_64)0))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)[4]), [1744])
	*((($10 + [8]) + [32])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$6 = *($0)
	*($10 + [8]) = $6
	*($10 + [16]) = $6
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($1 + [-1])
	$1 = (($10 + [8]) + [8])
	$5 = $6
	
.LOOP $label$8:
	$9 = CALL db_lowerbound_i64($5, $6, (int_64)8425852628872724480, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	CALL $25(($10 + [8]), $9)
	$9 = [0]
	$3 = CALL db_lowerbound_i64(*($10 + [8]), *($1), (int_64)8425852628872724480, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	$9 = CALL $25(($10 + [8]), $3)
	
.LABEL $label$11
	$3 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($3, [1776])
	CALL eosio_assert($3, [1632])
	$3 = CALL db_next_i64(*($9 + [44]), ($10 + [88]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$12 }
	CALL $25(($10 + [8]), $3)
	
.LABEL $label$12
	CALL $58(($10 + [8]), $9)
	if ( $4 ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = *($0)
	CALL eosio_assert([1], [80])
	CALL $59(($10 + [48]), $2, $6)
	if ( ($4 == 0) ){ goto $label$7 }
	
.LABEL $label$9
	$4 = ($4 + [-1])
	$6 = *($1)
	$5 = *($10 + [8])
	goto $label$8 
	
.LABEL $label$7
	$1 = *($10 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($10 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$16 }
	CALL $93($9)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($10 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $1
	
.LABEL $label$13
	*($3) = $1
	CALL $93($4)
	
.LABEL $label$6
	$1 = *($10 + [72])
	if ( ($1 == 0) ){ goto $label$17 }
	$3 = ($10 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL $93($9)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($10 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $1
	
.LABEL $label$18
	*($3) = $1
	CALL $93($4)
	
.LABEL $label$17
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $92(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $92([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $39($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $45(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $93($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $93($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $93($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [432])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [192])
	$19 = $20
	*([0] + [4]) = $20
	CALL eosio_assert(((int_32)*($1 + [240]) == (int_32)$0), [128])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [176])
	*($1 + [24]) = [1]
	$5 = *($3 + [12])
	$4 = *($1)
	$11 = *($3)
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($1 + [72]))), [1040])
	$12 = ((int_64)*($1 + [64]) + (int_64)*($11))
	*($1 + [64]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [1120])
	$11 = *($3)
	$13 = *($11 + [8])
	$12 = *($11)
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [544])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($1 + [120]))), [1040])
	$12 = ((int_64)*($1 + [112]) + (int_64)((int_64)((int_64)$12 * (int_64)72) / (int_64)100))
	*($1 + [112]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($1 + [112]) < (int_64)4611686018427387904), [1120])
	$11 = *($3)
	$13 = *($11 + [8])
	$12 = *($11)
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [544])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($1 + [136]))), [1040])
	$12 = ((int_64)*($1 + [128]) + (int_64)((int_64)((int_64)$12 * (int_64)17) / (int_64)100))
	*($1 + [128]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($1 + [128]) < (int_64)4611686018427387904), [1120])
	$11 = *($3)
	$13 = *($11 + [8])
	$12 = *($11)
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [544])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($1 + [152]))), [1040])
	$12 = ((int_64)*($1 + [144]) + (int_64)((int_64)$12 / (int_64)20))
	*($1 + [144]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($1 + [144]) < (int_64)4611686018427387904), [1120])
	$11 = *($3)
	$13 = *($11 + [8])
	$12 = *($11)
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [544])
	$10 = ($1 + [168])
	CALL eosio_assert(((int_64)$13 == (int_64)*($10)), [1040])
	$12 = ((int_64)*($1 + [160]) + (int_64)((int_64)((int_64)$12 * (int_64)3) / (int_64)100))
	*($1 + [160]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($1 + [160]) < (int_64)4611686018427387904), [1120])
	$11 = *($3)
	$13 = *($11 + [8])
	$12 = *($11)
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [544])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($1 + [16]))), [1040])
	$12 = ((int_64)*($1 + [8]) + (int_64)((int_64)$12 / (int_64)50))
	*($1 + [8]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1120])
	$11 = *($3)
	$13 = *($11 + [8])
	$12 = *($11)
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [544])
	$6 = ((int_64)$12 / (int_64)100)
	if ( ((int_64)$13 != (int_64)1397703940) ){ goto $label$6 }
	if ( ((int_64)$12 < (int_64)1100) ){ goto $label$3 }
	$10 = *($11)
	$11 = *($3 + [4])
	$9 = CALL strlen([1344])
	if ( ((int_32)$9 != (int_32)( *($11 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$7 }
	if ( CALL $98($11, [0], [-1], [1344], $9) ){ goto $label$7 }
	CALL $96(*(($3 + [4])), [1456])
	
.LABEL $label$7
	$11 = *(($3 + [4]))
	if ( (*($11) & [1]) ){ goto $label$5 }
	$11 = ($11 + [1])
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$13 == (int_64)*($10)), [1040])
	$12 = ((int_64)*($11) + (int_64)$6)
	*(($11 = ($1 + [160]))) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [1120])
	goto $label$2 
	
.LABEL $label$5
	$11 = *($11 + [8])
	
.LABEL $label$4
	$10 = [-1]
	
.LOOP $label$8:
	$9 = ($11 + $10)
	$7 = ($10 + [1])
	$10 = $7
	if ( *(($9 + [1])) ){ goto $label$8 }
	$15 = (CASTING uint_64)(uint_32 $7)
	$12 = (int_64)0
	$16 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$9:
	$14 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$15) ){ goto $label$10 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$10 = ($10 + [165])
	goto $label$11 
	
.LABEL $label$12
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$14 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	goto $label$13 
	
.LABEL $label$14
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$13
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$9 }
	if ( (CALL is_account($13) == 0) ){ goto $label$16 }
	if ( ((int_64)$13 != (int_64)*(*($3 + [8]))) ){ goto $label$15 }
	
.LABEL $label$16
	$12 = (int_64)0
	$16 = (int_64)59
	$11 = [1472]
	$13 = (int_64)0
	
.LOOP $label$17:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$18 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$10 = ($10 + [165])
	goto $label$19 
	
.LABEL $label$20
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$18
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$17 }
	
.LABEL $label$15
	$8 = *($5)
	$12 = (int_64)0
	$14 = (int_64)59
	$11 = [1424]
	$15 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$26 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$10 = ($10 + [165])
	goto $label$24 
	
.LABEL $label$26
	$16 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$22
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$21 }
	$12 = (int_64)0
	$16 = (int_64)59
	$11 = [1488]
	$17 = (int_64)0
	
.LOOP $label$27:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$28 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$10 = ($10 + [165])
	goto $label$29 
	
.LABEL $label$30
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$28
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$17 = ((int_64)$14 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$27 }
	$12 = (int_64)0
	$14 = (int_64)59
	$11 = [1504]
	$18 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$12 > (uint_64)(int_64)6) ){ goto $label$36 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$10 = ($10 + [165])
	goto $label$34 
	
.LABEL $label$36
	$16 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$32
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$18 = ((int_64)$16 | (int_64)$18)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$31 }
	*(($19 + [16])) = (int_64)1397703940
	*($19 + [8]) = $6
	*($19) = $8
	*($19 + [24]) = *(*($3 + [8]))
	*($19 + [32]) = $13
	*($19 + [120]) = $17
	*($19 + [128]) = $18
	*($19 + [40]) = (int_64)0
	*(($11 = CALL $92([16]))) = $8
	*($11 + [8]) = $15
	*(($10 = ($19 + [152]))) = [0]
	$9 = ($11 + [16])
	*(($19 + [144])) = $9
	*(($19 + [140])) = $9
	*($19 + [136]) = $11
	*($19 + [148]) = [0]
	*(($19 + [156])) = [0]
	CALL $39(($19 + [148]), [48])
	$11 = *($10)
	$10 = *($19 + [148])
	*($19 + [180]) = $10
	*($19 + [176]) = $10
	*($19 + [184]) = $11
	*($19 + [168]) = ($19 + [176])
	*($19 + [104]) = $19
	CALL $48(($19 + [104]), ($19 + [168]))
	CALL $49(($19 + [176]), ($19 + [120]))
	$11 = *($19 + [176])
	CALL send_inline($11, (*($19 + [180]) - $11))
	$11 = *($19 + [176])
	if ( ($11 == 0) ){ goto $label$37 }
	*($19 + [180]) = $11
	CALL $93($11)
	
.LABEL $label$37
	$11 = *($19 + [148])
	if ( ($11 == 0) ){ goto $label$38 }
	*(($19 + [152])) = $11
	CALL $93($11)
	
.LABEL $label$38
	$11 = *($19 + [136])
	if ( ($11 == 0) ){ goto $label$39 }
	*(($19 + [140])) = $11
	CALL $93($11)
	
.LABEL $label$39
	$8 = *($5)
	$12 = (int_64)0
	$16 = (int_64)59
	$11 = [1424]
	$14 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$45 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$10 = ($10 + [165])
	goto $label$43 
	
.LABEL $label$45
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$41
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$40 }
	$12 = (int_64)0
	$16 = (int_64)59
	$11 = [1408]
	$15 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$51 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$10 = ($10 + [165])
	goto $label$49 
	
.LABEL $label$51
	$13 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$47
	$11 = ($11 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$15 = ((int_64)$13 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$46 }
	$12 = (int_64)0
	$16 = (int_64)59
	$11 = [1440]
	$17 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$57 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$10 = ($10 + [165])
	goto $label$55 
	
.LABEL $label$57
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$53
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$17 = ((int_64)$13 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$52 }
	$12 = (int_64)0
	$13 = (int_64)59
	$11 = [1488]
	$18 = (int_64)0
	
.LOOP $label$58:
	$16 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$59 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$10 = ($10 + [165])
	goto $label$60 
	
.LABEL $label$61
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$59
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$18 = ((int_64)$16 | (int_64)$18)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$58 }
	*(($19 + [112])) = [0]
	*($19 + [104]) = (int_64)0
	$11 = CALL strlen([1520])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$64 }
	*($19 + [104]) = ($11 << [1])
	$10 = (($19 + [104]) | [1])
	if ( $11 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	$9 = (($11 + [16]) & [-16])
	$10 = CALL $92($9)
	*($19 + [104]) = ($9 | [1])
	*($19 + [112]) = $10
	*($19 + [108]) = $11
	
.LABEL $label$63
	CALL memcpy($10, [1520], $11)
	
.LABEL $label$62
	*(($10 + $11)) = [0]
	$12 = *($5)
	*(($19 + [24])) = (int_64)1397703940
	*(($10 = ($19 + [36]))) = *($19 + [108])
	*($19 + [8]) = $18
	$11 = ($19 + [112])
	*(($19 + [40])) = *($11)
	*($19) = $12
	*($19 + [16]) = $6
	*($19 + [32]) = *($19 + [104])
	*($19 + [104]) = [0]
	*($19 + [108]) = [0]
	*($11) = [0]
	*($19 + [120]) = $15
	*($19 + [128]) = $17
	*(($11 = CALL $92([16]))) = $8
	*($11 + [8]) = $14
	*((($19 + [120]) + [32])) = [0]
	$9 = ($11 + [16])
	*((($19 + [120]) + [24])) = $9
	*(($19 + [140])) = $9
	*($19 + [136]) = $11
	*($19 + [148]) = [0]
	*((($19 + [120]) + [36])) = [0]
	$11 = *($19 + [32])
	$10 = ( *($10) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($10 + [32])
	$12 = (CASTING uint_64)(uint_32 $10)
	$10 = ($19 + [148])
	
.LOOP $label$65:
	$11 = ($11 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$65 }
	if ( ($11 == 0) ){ goto $label$67 }
	CALL $39($10, $11)
	$10 = *(($19 + [152]))
	$11 = *(($19 + [148]))
	goto $label$66 
	
.LABEL $label$67
	$10 = [0]
	$11 = [0]
	
.LABEL $label$66
	*($19 + [180]) = $11
	*($19 + [176]) = $11
	*($19 + [184]) = $10
	*($19 + [160]) = ($19 + [176])
	*($19 + [168]) = $19
	CALL $45(($19 + [168]), ($19 + [160]))
	CALL $49(($19 + [176]), ($19 + [120]))
	$11 = *($19 + [176])
	CALL send_inline($11, (*($19 + [180]) - $11))
	$11 = *($19 + [176])
	if ( ($11 == 0) ){ goto $label$68 }
	*($19 + [180]) = $11
	CALL $93($11)
	
.LABEL $label$68
	$11 = *($19 + [148])
	if ( ($11 == 0) ){ goto $label$69 }
	*(($19 + [152])) = $11
	CALL $93($11)
	
.LABEL $label$69
	$11 = *($19 + [136])
	if ( ($11 == 0) ){ goto $label$70 }
	*(($19 + [140])) = $11
	CALL $93($11)
	
.LABEL $label$70
	if ( ((*(($19 + [32])) & [1]) == 0) ){ goto $label$71 }
	CALL $93(*(($19 + [40])))
	
.LABEL $label$71
	if ( ((*($19 + [104]) & [1]) == 0) ){ goto $label$3 }
	CALL $93(*(($19 + [112])))
	
.LABEL $label$3
	CALL prints([1536])
	
.LABEL $label$2
	$12 = ((int_64)*($1 + [184]) + (int_64)60)
	*($1 + [184]) = $12
	$10 = ($1 + [184])
	if ( (uint_64)((int_64))($12 - ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) <= (int_64)3601) ){ goto $label$72 }
	*($10) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)3600) & (int_64)4294967295)
	
.LABEL $label$72
	$9 = ($1 + [24])
	$12 = (CASTING uint_64)(uint_32 $4)
	*($1 + [28]) = (*($1 + [28]) + [1])
	CALL eosio_assert(((int_64)*(($1 + [72])) == (int_64)*(($1 + [56]))), [816])
	$3 = ($1 + [28])
	$7 = ($1 + [64])
	if ( ((int_64)*($7) < (int_64)*($1 + [48])) ){ goto $label$73 }
	*($9) = [2]
	
.LABEL $label$73
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [240])
	$20 = $20
	$11 = ($20 + [-240])
	*([0] + [4]) = $11
	*($19 + [124]) = $11
	*($19 + [120]) = $11
	*($19 + [128]) = ($20 + [-12])
	*($19 + [176]) = ($19 + [120])
	*($19 + [4]) = ($1 + [8])
	*($19) = $1
	*($19 + [8]) = $9
	*($19 + [12]) = $3
	*($19 + [16]) = ($1 + [32])
	*($19 + [20]) = ($1 + [36])
	*($19 + [24]) = ($1 + [40])
	*($19 + [28]) = ($1 + [48])
	*($19 + [32]) = $7
	*($19 + [36]) = ($1 + [80])
	*($19 + [40]) = ($1 + [96])
	*($19 + [44]) = ($1 + [112])
	*($19 + [48]) = ($1 + [128])
	*($19 + [52]) = ($1 + [144])
	*($19 + [56]) = ($1 + [160])
	*($19 + [60]) = ($1 + [176])
	*($19 + [64]) = $10
	*($19 + [68]) = ($1 + [192])
	*($19 + [72]) = ($1 + [200])
	*($19 + [76]) = ($1 + [208])
	*($19 + [80]) = ($1 + [212])
	*($19 + [84]) = ($1 + [216])
	*($19 + [88]) = ($1 + [224])
	*($19 + [92]) = ($1 + [228])
	*($19 + [96]) = ($1 + [232])
	*($19 + [100]) = ($1 + [236])
	CALL $10($19, ($19 + [176]))
	CALL db_update_i64(*($1 + [244]), $2, $11, [228])
	if ( (uint_64)($12 <= *($0 + [16])) ){ goto $label$74 }
	*(($0 + [16])) = ((int_64)$12 + (int_64)1)
	
.LABEL $label$74
	*([0] + [4]) = ($19 + [192])
	return (unreachable)
	
.LABEL $label$1
	CALL $94(($19 + [104]))
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1) = *(*($6) + [32])
	$2 = *($0)
	$7 = *($6)
	*($1 + [8]) = *($7 + [48])
	*(($4 = ($1 + [16]))) = *(($7 + [56]))
	$3 = *($4)
	$5 = *($1 + [8])
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [544])
	*(($1 + [32])) = $3
	*($1 + [24]) = ((int_64)((int_64)$5 * (int_64)105) / (int_64)100)
	$3 = *((*($6) + [56]))
	CALL eosio_assert([1], [368])
	$4 = ($1 + [8])
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [432])
	*(($1 + [48])) = $3
	*($1 + [40]) = (int_64)0
	$7 = $9
	$6 = ($7 + [-64])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-12])
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $4
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + [24])
	*($8 + [44]) = ($1 + [40])
	CALL $16(($8 + [32]), ($8 + [24]))
	$5 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-4812882469285658624, *(*($0 + [8])), $5, $6, [52])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$7 = *($6 + [4])
	*($1 + [8]) = *($7)
	*(($1 + [16])) = *(($7 + [8]))
	$4 = *(*($6 + [4]) + [8])
	CALL eosio_assert([1], [368])
	$3 = ($1 + [8])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [432])
	*(($1 + [32])) = $4
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = $9
	$6 = ($7 + [-48])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = $7
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $3
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + [24])
	*($8 + [44]) = ($1 + [40])
	CALL $23(($8 + [32]), ($8 + [24]))
	$5 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-4812882651500904448, *(*($0 + [8])), $5, $6, [48])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $20 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [432])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [368])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [432])
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [320])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $92([64])
	CALL $20($6)
	*($6 + [48]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [24])
	*($8 + [44]) = ($6 + [40])
	CALL $51(($8 + [32]), ($8 + [24]))
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [52])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $24(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $93($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [320])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $92([56])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [368])
	$3 = ($4 + [16])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [432])
	*($4 + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($4 + [8])
	*($8 + [32]) = $4
	*($8 + [40]) = $3
	*($8 + [44]) = ($4 + [32])
	CALL $50(($8 + [32]), ($8 + [24]))
	*($4 + [44]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [44])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $27($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $93($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $92(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $93($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $93($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $92(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $93($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $93($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [304])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1872])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1936])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $93($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $93($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1872])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = *($1)
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [1936])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $93($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $93($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC _ZN5eosio11farmeosrich10updateuserEyx (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [128])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1584]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *($0)
	*($10 + [8]) = $7
	*($10 + [16]) = $7
	$5 = CALL db_find_i64($7, $7, (int_64)-3020376800527122432, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $31(($10 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)($10 + [8])), [576])
	$6 = *($0)
	CALL eosio_assert([1], [80])
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)($10 + [8])), [128])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)CALL $fimport$2()), [176])
	*($5 + [24]) = ((int_64)*($5 + [24]) + (int_64)$2)
	$7 = *($5)
	CALL eosio_assert([1], [240])
	*($10 + [96]) = (($10 + [48]) + [40])
	*($10 + [92]) = ($10 + [48])
	*($10 + [88]) = ($10 + [48])
	*($10 + [104]) = ($10 + [88])
	*($10 + [116]) = ($5 + [8])
	*($10 + [112]) = $5
	*($10 + [120]) = ($5 + [24])
	CALL $32(($10 + [112]), ($10 + [104]))
	CALL db_update_i64(*($5 + [44]), $6, ($10 + [48]), [40])
	$5 = ($10 + [24])
	if ( (uint_64)($7 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$0 = *($10 + [32])
	if ( ($0 == 0) ){ goto $label$6 }
	$4 = ($10 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $93($3)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$9 }
	$5 = *(($10 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $0
	
.LABEL $label$7
	*($4) = $0
	CALL $93($5)
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [128])
}

void .FUNC _ZN5eosio11farmeosrich9updatepriEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [416])
	*([0] + [4]) = $8
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1584]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	*((($8 + [8]) + [32])) = [0]
	*($8 + [24]) = (int_64)-1
	$5 = *($0)
	*($8 + [8]) = $5
	*($8 + [16]) = $5
	*($8 + [32]) = (int_64)0
	$3 = [0]
	$2 = CALL db_lowerbound_i64($5, $5, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $9(($8 + [8]), $2)
	
.LABEL $label$5
	$4 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [80])
	CALL eosio_assert(((int_32)*($3 + [240]) == (int_32)($8 + [8])), [128])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$2()), [176])
	*($3 + [228]) = $1
	$5 = *($3)
	CALL eosio_assert([1], [240])
	*($8 + [296]) = (($8 + [48]) + [228])
	*($8 + [292]) = ($8 + [48])
	*($8 + [288]) = ($8 + [48])
	*($8 + [304]) = ($8 + [288])
	*($8 + [316]) = ($3 + [8])
	*($8 + [312]) = $3
	*($8 + [320]) = ($3 + [24])
	*($8 + [324]) = ($3 + [28])
	*($8 + [328]) = ($3 + [32])
	*($8 + [332]) = ($3 + [36])
	*($8 + [336]) = ($3 + [40])
	*($8 + [340]) = ($3 + [48])
	*($8 + [344]) = ($3 + [64])
	*($8 + [348]) = ($3 + [80])
	*($8 + [352]) = ($3 + [96])
	*($8 + [356]) = ($3 + [112])
	*($8 + [360]) = ($3 + [128])
	*($8 + [364]) = ($3 + [144])
	*($8 + [368]) = ($3 + [160])
	*($8 + [372]) = ($3 + [176])
	*($8 + [376]) = ($3 + [184])
	*($8 + [380]) = ($3 + [192])
	*($8 + [384]) = ($3 + [200])
	*($8 + [388]) = ($3 + [208])
	*($8 + [392]) = ($3 + [212])
	*($8 + [396]) = ($3 + [216])
	*($8 + [400]) = ($3 + [224])
	*($8 + [404]) = ($3 + [228])
	*($8 + [408]) = ($3 + [232])
	*($8 + [412]) = ($3 + [236])
	CALL $10(($8 + [312]), ($8 + [304]))
	CALL db_update_i64(*($3 + [244]), $4, ($8 + [48]), [228])
	$3 = ($8 + [24])
	if ( (uint_64)($5 <= *($3)) ){ goto $label$6 }
	*($3) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	$0 = *($8 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$1 = ($8 + [36])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $93($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($8 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $0
	
.LABEL $label$8
	*($1) = $0
	CALL $93($3)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [416])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1872])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1936])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $93($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $93($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC _ZN5eosio11farmeosrich8nextturnEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [176])
	*([0] + [4]) = $17
	$14 = (int_64)0
	$11 = (int_64)59
	$16 = [1584]
	$12 = (int_64)0
	
.LOOP $label$1:
	$13 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$2
	$16 = ($16 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($12)
	*((($17 + [128]) + [32])) = [0]
	*($17 + [144]) = (int_64)-1
	*($17 + [152]) = (int_64)0
	$14 = *($0)
	*($17 + [128]) = $14
	*($17 + [136]) = $14
	if ( ($1 == 0) ){ goto $label$5 }
	$4 = (($17 + [88]) + [8])
	$5 = (($17 + [88]) + [16])
	$6 = (($17 + [88]) + [24])
	$7 = (($17 + [88]) + [32])
	$8 = (($17 + [8]) + [28])
	$15 = [0]
	
.LOOP $label$6:
	*($4) = $14
	*($5) = (int_64)-1
	*($6) = (int_64)0
	*($7) = [0]
	*($17 + [88]) = $14
	$16 = CALL db_lowerbound_i64($14, $14, (int_64)-4812882651500904448, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$9 }
	CALL $22(($17 + [88]), $16)
	$16 = [0]
	$3 = CALL db_lowerbound_i64(*($17 + [88]), *($4), (int_64)-4812882651500904448, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$16 = CALL $22(($17 + [88]), $3)
	
.LABEL $label$10
	$3 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($3, [1776])
	CALL eosio_assert($3, [1632])
	$3 = CALL db_next_i64(*($16 + [52]), ($17 + [48]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	CALL $22(($17 + [88]), $3)
	
.LABEL $label$11
	CALL $67(($17 + [88]), $16)
	$2 = *($6)
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$14 = *($0)
	*(($3 = (($17 + [48]) + [8]))) = $14
	*((($17 + [48]) + [16])) = (int_64)-1
	*(($10 = (($17 + [48]) + [24]))) = (int_64)0
	*((($17 + [48]) + [32])) = [0]
	*($17 + [48]) = $14
	$16 = CALL db_lowerbound_i64($14, $14, (int_64)-4812882469285658624, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$14 }
	CALL $12(($17 + [48]), $16)
	$16 = [0]
	$3 = CALL db_lowerbound_i64(*($17 + [48]), *($3), (int_64)-4812882469285658624, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	$16 = CALL $12(($17 + [48]), $3)
	
.LABEL $label$15
	$3 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($3, [1776])
	CALL eosio_assert($3, [1632])
	$3 = CALL db_next_i64(*($16 + [60]), ($17 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$16 }
	CALL $12(($17 + [48]), $3)
	
.LABEL $label$16
	CALL $68(($17 + [48]), $16)
	$2 = *($10)
	if ( $2 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$14 = *($0)
	*(($3 = (($17 + [8]) + [8]))) = $14
	*((($17 + [8]) + [16])) = (int_64)-1
	*(($9 = (($17 + [8]) + [24]))) = (int_64)0
	*((($17 + [8]) + [32])) = [0]
	*($17 + [8]) = $14
	$16 = CALL db_lowerbound_i64($14, $14, (int_64)8425852628872724480, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$19 }
	CALL $25(($17 + [8]), $16)
	$16 = [0]
	$3 = CALL db_lowerbound_i64(*($17 + [8]), *($3), (int_64)8425852628872724480, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$20 }
	$16 = CALL $25(($17 + [8]), $3)
	
.LABEL $label$20
	$3 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($3, [1776])
	CALL eosio_assert($3, [1632])
	$3 = CALL db_next_i64(*($16 + [44]), ($17 + [168]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$21 }
	CALL $25(($17 + [8]), $3)
	
.LABEL $label$21
	CALL $58(($17 + [8]), $16)
	$2 = *($9)
	if ( $2 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$3 = (($17 + [128]) + [8])
	$16 = CALL db_lowerbound_i64(*($17 + [128]), *($3), (int_64)-3020376800527122432, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$22 }
	CALL $31(($17 + [128]), $16)
	$16 = [0]
	$3 = CALL db_lowerbound_i64(*($17 + [128]), *($3), (int_64)-3020376800527122432, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$23 }
	$16 = CALL $31(($17 + [128]), $3)
	
.LABEL $label$23
	$3 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($3, [1776])
	CALL eosio_assert($3, [1632])
	$3 = CALL db_next_i64(*($16 + [44]), ($17 + [168]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$24 }
	CALL $31(($17 + [128]), $3)
	
.LABEL $label$24
	CALL $69(($17 + [128]), $16)
	
.LABEL $label$22
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$16 = *($8)
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$26 }
	
.LOOP $label$27:
	$16 = ($16 + [-24])
	$3 = *($16)
	*($16) = [0]
	if ( ($3 == 0) ){ goto $label$28 }
	CALL $93($3)
	
.LABEL $label$28
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$27 }
	$16 = *($9)
	goto $label$25 
	
.LABEL $label$26
	$16 = $2
	
.LABEL $label$25
	*($8) = $2
	CALL $93($16)
	
.LABEL $label$17
	$2 = *($10)
	if ( ($2 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$9 = (($17 + [48]) + [28])
	$16 = *($9)
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$30 }
	
.LOOP $label$31:
	$16 = ($16 + [-24])
	$3 = *($16)
	*($16) = [0]
	if ( ($3 == 0) ){ goto $label$32 }
	CALL $93($3)
	
.LABEL $label$32
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$31 }
	$16 = *($10)
	goto $label$29 
	
.LABEL $label$30
	$16 = $2
	
.LABEL $label$29
	*($9) = $2
	CALL $93($16)
	
.LABEL $label$12
	$2 = *($6)
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$10 = (($17 + [88]) + [28])
	$16 = *($10)
	if ( ((int_32)$16 != (int_32)$2) ){ goto $label$34 }
	$16 = $2
	goto $label$33 
	
.LABEL $label$34
	
.LOOP $label$35:
	$16 = ($16 + [-24])
	$3 = *($16)
	*($16) = [0]
	if ( ($3 == 0) ){ goto $label$36 }
	CALL $93($3)
	
.LABEL $label$36
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$35 }
	$16 = *($6)
	
.LABEL $label$33
	*($10) = $2
	CALL $93($16)
	
.LABEL $label$7
	$15 = ($15 + [1])
	if ( ((int_32)$15 == (int_32)$1) ){ goto $label$37 }
	$14 = *($0)
	goto $label$6 
	
.LABEL $label$37
	$2 = *($17 + [152])
	if ( ($2 == 0) ){ goto $label$5 }
	$6 = ($17 + [156])
	$16 = *($6)
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$39 }
	
.LOOP $label$40:
	$16 = ($16 + [-24])
	$3 = *($16)
	*($16) = [0]
	if ( ($3 == 0) ){ goto $label$41 }
	CALL $93($3)
	
.LABEL $label$41
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$40 }
	$16 = *(($17 + [152]))
	goto $label$38 
	
.LABEL $label$39
	$16 = $2
	
.LABEL $label$38
	*($6) = $2
	CALL $93($16)
	
.LABEL $label$5
	*([0] + [4]) = ($17 + [176])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [128])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [240]) == (int_32)$0), [128])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [176])
	*($1 + [216]) = (int_64)0
	$5 = ($1 + [216])
	$4 = *($1)
	if ( ((int_32)*(*($3)) != (int_32)*(*(*($3 + [4]) + [4]) + [192])) ){ goto $label$2 }
	*($1 + [40]) = [1]
	$6 = ($1 + [212])
	$7 = ($1 + [40])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [212]) = (*($1 + [212]) + [-1])
	$7 = ($1 + [40])
	$6 = ($1 + [212])
	
.LABEL $label$1
	CALL eosio_assert([1], [240])
	$9 = $9
	$3 = ($9 + [-240])
	*([0] + [4]) = $3
	*($8 + [4]) = $3
	*($8) = $3
	*($8 + [8]) = ($9 + [-12])
	*($8 + [16]) = $8
	*($8 + [48]) = $7
	*($8 + [24]) = $1
	*($8 + [28]) = ($1 + [8])
	*($8 + [32]) = ($1 + [24])
	*($8 + [36]) = ($1 + [28])
	*($8 + [40]) = ($1 + [32])
	*($8 + [44]) = ($1 + [36])
	*($8 + [52]) = ($1 + [48])
	*($8 + [56]) = ($1 + [64])
	*($8 + [60]) = ($1 + [80])
	*($8 + [64]) = ($1 + [96])
	*($8 + [68]) = ($1 + [112])
	*($8 + [72]) = ($1 + [128])
	*($8 + [76]) = ($1 + [144])
	*($8 + [80]) = ($1 + [160])
	*($8 + [84]) = ($1 + [176])
	*($8 + [88]) = ($1 + [184])
	*($8 + [92]) = ($1 + [192])
	*($8 + [96]) = ($1 + [200])
	*($8 + [100]) = ($1 + [208])
	*($8 + [104]) = $6
	*($8 + [108]) = $5
	*($8 + [112]) = ($1 + [224])
	*($8 + [116]) = ($1 + [228])
	*($8 + [120]) = ($1 + [232])
	*($8 + [124]) = ($1 + [236])
	CALL $10(($8 + [24]), ($8 + [16]))
	CALL db_update_i64(*($1 + [244]), $2, $3, [228])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [128])
}

void .FUNC _ZN5eosio11farmeosrich9endprofitEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [480])
	*([0] + [4]) = $13
	$12 = [0]
	*(($13 + [136])) = [0]
	*($13 + [120]) = (int_64)-1
	$11 = *($0)
	*($13 + [104]) = $11
	*($13 + [112]) = $11
	*($13 + [128]) = (int_64)0
	$10 = [0]
	$2 = CALL db_lowerbound_i64($11, $11, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $9(($13 + [104]), $2)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [656])
	$10 = CALL db_lowerbound_i64(*($13 + [104]), *(($13 + [112])), (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	$12 = CALL $9(($13 + [104]), $10)
	
.LABEL $label$2
	*($13 + [100]) = $12
	*($13 + [96]) = ($13 + [104])
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000) & (int_64)4294967295) > (uint_64)*(*($13 + [100]) + [184])), [2000])
	$12 = *($13 + [100])
	$10 = *($12 + [212])
	if ( $10 ){ goto $label$3 }
	$4 = *($0)
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [80])
	CALL eosio_assert(((int_32)*($12 + [240]) == (int_32)($13 + [104])), [128])
	CALL eosio_assert(((int_64)*($13 + [104]) == (int_64)CALL $fimport$2()), [176])
	*($12 + [212]) = *(*($13 + [100]) + [32])
	$11 = *($12)
	CALL eosio_assert([1], [240])
	*($13 + [56]) = (($13 + [144]) + [228])
	*($13 + [52]) = ($13 + [144])
	*($13 + [48]) = ($13 + [144])
	*($13) = ($13 + [48])
	*($13 + [380]) = ($12 + [8])
	*($13 + [376]) = $12
	*($13 + [384]) = ($12 + [24])
	*($13 + [388]) = ($12 + [28])
	*($13 + [392]) = ($12 + [32])
	*($13 + [396]) = ($12 + [36])
	*($13 + [400]) = ($12 + [40])
	*($13 + [404]) = ($12 + [48])
	*($13 + [408]) = ($12 + [64])
	*($13 + [412]) = ($12 + [80])
	*($13 + [416]) = ($12 + [96])
	*($13 + [420]) = ($12 + [112])
	*($13 + [424]) = ($12 + [128])
	*($13 + [428]) = ($12 + [144])
	*($13 + [432]) = ($12 + [160])
	*($13 + [436]) = ($12 + [176])
	*($13 + [440]) = ($12 + [184])
	*($13 + [444]) = ($12 + [192])
	*($13 + [448]) = ($12 + [200])
	*($13 + [452]) = ($12 + [208])
	*($13 + [456]) = ($12 + [212])
	*($13 + [460]) = ($12 + [216])
	*($13 + [464]) = ($12 + [224])
	*($13 + [468]) = ($12 + [228])
	*($13 + [472]) = ($12 + [232])
	*($13 + [476]) = ($12 + [236])
	CALL $10(($13 + [376]), $13)
	CALL db_update_i64(*($12 + [244]), $4, ($13 + [144]), [228])
	$12 = ($13 + [120])
	if ( (uint_64)($11 <= *($12)) ){ goto $label$4 }
	*($12) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$4
	$10 = *(*($13 + [100]) + [212])
	
.LABEL $label$3
	*($13 + [92]) = $10
	$12 = [0]
	*(($13 + [80])) = [0]
	*($13 + [64]) = (int_64)-1
	*($13 + [72]) = (int_64)0
	$11 = *($0)
	*($13 + [48]) = $11
	*($13 + [56]) = $11
	$10 = CALL db_find_i64($11, $11, (int_64)-4812882469285658624, (CASTING uint_64)(uint_32 $10))
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$6 }
	$12 = CALL $12(($13 + [48]), $10)
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)($13 + [48])), [576])
	*($13 + [44]) = $12
	*($13 + [40]) = ($13 + [48])
	$10 = (($13 + [40]) | [4])
	goto $label$5 
	
.LABEL $label$6
	*($13 + [44]) = [0]
	*($13 + [40]) = ($13 + [48])
	$10 = (($13 + [40]) | [4])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [976])
	$12 = *($13 + [100])
	if ( ((int_64)*($12 + [128]) > (int_64)9999) ){ goto $label$7 }
	$4 = *($0)
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [80])
	CALL eosio_assert(((int_32)*($12 + [240]) == (int_32)($13 + [104])), [128])
	CALL eosio_assert(((int_64)*($13 + [104]) == (int_64)CALL $fimport$2()), [176])
	*($12 + [40]) = [1]
	$11 = *($12)
	CALL eosio_assert([1], [240])
	*($13 + [8]) = (($13 + [144]) + [228])
	*($13 + [4]) = ($13 + [144])
	*($13) = ($13 + [144])
	*($13 + [32]) = $13
	*($13 + [380]) = ($12 + [8])
	*($13 + [376]) = $12
	*($13 + [384]) = ($12 + [24])
	*($13 + [388]) = ($12 + [28])
	*($13 + [392]) = ($12 + [32])
	*($13 + [396]) = ($12 + [36])
	*($13 + [400]) = ($12 + [40])
	*($13 + [404]) = ($12 + [48])
	*($13 + [408]) = ($12 + [64])
	*($13 + [412]) = ($12 + [80])
	*($13 + [416]) = ($12 + [96])
	*($13 + [420]) = ($12 + [112])
	*($13 + [424]) = ($12 + [128])
	*($13 + [428]) = ($12 + [144])
	*($13 + [432]) = ($12 + [160])
	*($13 + [436]) = ($12 + [176])
	*($13 + [440]) = ($12 + [184])
	*($13 + [444]) = ($12 + [192])
	*($13 + [448]) = ($12 + [200])
	*($13 + [452]) = ($12 + [208])
	*($13 + [456]) = ($12 + [212])
	*($13 + [460]) = ($12 + [216])
	*($13 + [464]) = ($12 + [224])
	*($13 + [468]) = ($12 + [228])
	*($13 + [472]) = ($12 + [232])
	*($13 + [476]) = ($12 + [236])
	CALL $10(($13 + [376]), ($13 + [32]))
	CALL db_update_i64(*($12 + [244]), $4, ($13 + [144]), [228])
	$12 = ($13 + [120])
	if ( (uint_64)($11 <= *($12)) ){ goto $label$8 }
	*($12) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$8
	$12 = *($13 + [100])
	
.LABEL $label$7
	if ( ((int_64)*($12 + [216]) != (int_64)0) ){ goto $label$9 }
	$4 = *($0)
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [80])
	CALL eosio_assert(((int_32)*($12 + [240]) == (int_32)($13 + [104])), [128])
	CALL eosio_assert(((int_64)*($13 + [104]) == (int_64)CALL $fimport$2()), [176])
	$2 = *($12)
	$10 = *($10)
	$11 = *($10 + [24])
	$3 = *(($10 + [32]))
	CALL eosio_assert(((int_64)*(($10 + [48])) == (int_64)$3), [1152])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($11 - *($10 + [40]))) > (int_64)-4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [1232])
	CALL eosio_assert(((int_64)$3 == (int_64)*(($12 + [136]))), [816])
	*($12 + [224]) = ((int_64)*($12 + [128]) >= (int_64)$11)
	CALL prints([2016])
	CALL printui(*($12 + [224]))
	CALL eosio_assert(((int_32)$2 == (int_32)*($12)), [240])
	*($13 + [8]) = (($13 + [144]) + [228])
	*($13 + [4]) = ($13 + [144])
	*($13) = ($13 + [144])
	*($13 + [32]) = $13
	*($13 + [380]) = ($12 + [8])
	*($13 + [376]) = $12
	*($13 + [384]) = ($12 + [24])
	*($13 + [388]) = ($12 + [28])
	*($13 + [392]) = ($12 + [32])
	*($13 + [396]) = ($12 + [36])
	*($13 + [400]) = ($12 + [40])
	*($13 + [404]) = ($12 + [48])
	*($13 + [408]) = ($12 + [64])
	*($13 + [412]) = ($12 + [80])
	*($13 + [416]) = ($12 + [96])
	*($13 + [420]) = ($12 + [112])
	*($13 + [424]) = ($12 + [128])
	*($13 + [428]) = ($12 + [144])
	*($13 + [432]) = ($12 + [160])
	*($13 + [436]) = ($12 + [176])
	*($13 + [440]) = ($12 + [184])
	*($13 + [444]) = ($12 + [192])
	*($13 + [448]) = ($12 + [200])
	*($13 + [452]) = ($12 + [208])
	*($13 + [456]) = ($12 + [212])
	*($13 + [460]) = ($12 + [216])
	*($13 + [464]) = ($12 + [224])
	*($13 + [468]) = ($12 + [228])
	*($13 + [472]) = ($12 + [232])
	*($13 + [476]) = ($12 + [236])
	CALL $10(($13 + [376]), ($13 + [32]))
	CALL db_update_i64(*($12 + [244]), $4, ($13 + [144]), [228])
	$12 = ($13 + [120])
	$11 = (CASTING uint_64)(uint_32 $2)
	if ( (uint_64)($11 <= *($12)) ){ goto $label$9 }
	*($12) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$9
	*($13 + [160]) = (int_64)-1
	*($13 + [168]) = [0]
	$11 = *($13 + [92])
	$4 = *($0)
	*($13 + [144]) = $4
	*($13 + [152]) = $11
	*(($13 + [172])) = [0]
	*(($13 + [176])) = [0]
	$12 = CALL db_lowerbound_i64($4, $11, (int_64)-4812882651500904448, (int_64)0)
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$14 }
	CALL $22(($13 + [144]), $12)
	$11 = *(*($13 + [100]) + [216])
	if ( ((int_64)$11 != (int_64)0) ){ goto $label$15 }
	$11 = *(CALL $22(($13 + [144]), CALL $fimport$6(*($13 + [144]), *(($13 + [152])), (int_64)-4812882651500904448, (int_64)0)))
	
.LABEL $label$15
	CALL prints([2032])
	CALL printui($11)
	$6 = *(($13 + [168]))
	$2 = *(($13 + [172]))
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$16 }
	$12 = ($2 + [-24])
	$5 = ([0] - $6)
	
.LOOP $label$17:
	if ( ((int_64)*(*($12)) == (int_64)$11) ){ goto $label$16 }
	$2 = $12
	$10 = ($12 + [-24])
	$12 = $10
	if ( ((int_32)($10 + $5) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$13 }
	$12 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)($13 + [144])), [576])
	*($13 + [36]) = $12
	*($13 + [32]) = ($13 + [144])
	goto $label$12 
	
.LABEL $label$14
	$12 = *($13 + [100])
	$11 = *($0)
	*($13 + [380]) = ($13 + [96])
	*($13 + [376]) = ($13 + [92])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [80])
	CALL $61(($13 + [104]), $12, $11, ($13 + [376]))
	$10 = *($13 + [168])
	if ( $10 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$12 = CALL db_find_i64(*($13 + [144]), *(($13 + [152])), (int_64)-4812882651500904448, $11)
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$18 }
	$12 = CALL $22(($13 + [144]), $12)
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)($13 + [144])), [576])
	*($13 + [36]) = $12
	*($13 + [32]) = ($13 + [144])
	goto $label$12 
	
.LABEL $label$18
	$12 = [0]
	*($13 + [36]) = [0]
	*($13 + [32]) = ($13 + [144])
	
.LABEL $label$12
	if ( (int_64)(*(*($13 + [100]) + [216]) == 0) ){ goto $label$19 }
	if ( ($12 == 0) ){ goto $label$19 }
	$10 = [0]
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [1632])
	$12 = CALL db_next_i64(*(*($13 + [36]) + [52]), ($13 + [376]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$20 }
	$10 = CALL $22(*($13 + [32]), $12)
	
.LABEL $label$20
	*($13 + [36]) = $10
	
.LABEL $label$19
	*(($13 + [408])) = [0]
	*($13 + [392]) = (int_64)-1
	*($13 + [400]) = (int_64)0
	$11 = *($0)
	*($13 + [376]) = $11
	*($13 + [384]) = $11
	if ( ($1 == 0) ){ goto $label$21 }
	$5 = ($13 + [20])
	$6 = ($13 + [8])
	$7 = ($13 + [12])
	$8 = ($13 + [16])
	$9 = ($13 + [24])
	$10 = [1]
	
.LOOP $label$23:
	$12 = *($13 + [100])
	*($5) = $0
	*($6) = ($13 + [92])
	*($7) = ($13 + [96])
	*($8) = ($13 + [40])
	*($9) = ($13 + [376])
	*($13 + [4]) = ($13 + [144])
	*($13) = ($13 + [32])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [80])
	CALL $62(($13 + [104]), $12, $11, $13)
	if ( (*($13 + [36]) == 0) ){ goto $label$22 }
	CALL eosio_assert([1], [1632])
	$12 = [0]
	$2 = CALL db_next_i64(*(*($13 + [36]) + [52]), $13)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$24 }
	$12 = CALL $22(*($13 + [32]), $2)
	
.LABEL $label$24
	*($13 + [36]) = $12
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$22 }
	$10 = ($10 + [1])
	$11 = *($0)
	goto $label$23 
	
.LABEL $label$22
	$10 = *($13 + [400])
	if ( ($10 == 0) ){ goto $label$21 }
	$2 = ($13 + [404])
	$12 = *($2)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$26 }
	
.LOOP $label$27:
	$12 = ($12 + [-24])
	$0 = *($12)
	*($12) = [0]
	if ( ($0 == 0) ){ goto $label$28 }
	CALL $93($0)
	
.LABEL $label$28
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$27 }
	$12 = *(($13 + [400]))
	goto $label$25 
	
.LABEL $label$26
	$12 = $10
	
.LABEL $label$25
	*($2) = $10
	CALL $93($12)
	
.LABEL $label$21
	$10 = *($13 + [168])
	if ( ($10 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = ($13 + [172])
	$12 = *($2)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$30 }
	
.LOOP $label$31:
	$12 = ($12 + [-24])
	$0 = *($12)
	*($12) = [0]
	if ( ($0 == 0) ){ goto $label$32 }
	CALL $93($0)
	
.LABEL $label$32
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$31 }
	$12 = *(($13 + [168]))
	goto $label$29 
	
.LABEL $label$30
	$12 = $10
	
.LABEL $label$29
	*($2) = $10
	CALL $93($12)
	
.LABEL $label$10
	$10 = *($13 + [72])
	if ( ($10 == 0) ){ goto $label$33 }
	$2 = ($13 + [76])
	$12 = *($2)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$35 }
	
.LOOP $label$36:
	$12 = ($12 + [-24])
	$0 = *($12)
	*($12) = [0]
	if ( ($0 == 0) ){ goto $label$37 }
	CALL $93($0)
	
.LABEL $label$37
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$36 }
	$12 = *(($13 + [72]))
	goto $label$34 
	
.LABEL $label$35
	$12 = $10
	
.LABEL $label$34
	*($2) = $10
	CALL $93($12)
	
.LABEL $label$33
	$10 = *($13 + [128])
	if ( ($10 == 0) ){ goto $label$38 }
	$2 = ($13 + [132])
	$12 = *($2)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$40 }
	
.LOOP $label$41:
	$12 = ($12 + [-24])
	$0 = *($12)
	*($12) = [0]
	if ( ($0 == 0) ){ goto $label$42 }
	CALL $93($0)
	
.LABEL $label$42
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$41 }
	$12 = *(($13 + [128]))
	goto $label$39 
	
.LABEL $label$40
	$12 = $10
	
.LABEL $label$39
	*($2) = $10
	CALL $93($12)
	
.LABEL $label$38
	*([0] + [4]) = ($13 + [480])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [128])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [176])
	$4 = *($1)
	$5 = *($3)
	$10 = *($3 + [4])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($1 + [32]))), [1040])
	$7 = ((int_64)*($1 + [24]) + (int_64)*($10))
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1120])
	$8 = *($3 + [4])
	*(((($10 = $11) + [48]) + [12])) = *(($8 + [12]))
	*((($10 + [48]) + [8])) = *(($8 + [8]))
	*($10 + [48]) = *($8)
	*($10 + [52]) = *(($8 + [4]))
	$7 = *($1)
	$6 = *(*(*($3 + [8]) + [4]) + [192])
	*((($10 + [32]) + [8])) = [0]
	*($10 + [32]) = (int_64)0
	$3 = CALL strlen([1344])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($10 + [32]) = ($3 << [1])
	$8 = (($10 + [32]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$9 = (($3 + [16]) & [-16])
	$8 = CALL $92($9)
	*($10 + [32]) = ($9 | [1])
	*($10 + [40]) = $8
	*($10 + [36]) = $3
	
.LABEL $label$3
	CALL memcpy($8, [1344], $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	*((($10 + [8]) + [8])) = *((($10 + [48]) + [8]))
	*($10 + [8]) = *($10 + [48])
	CALL _ZN5eosio11farmeosrich13delaytransferEmyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($5, $6, $7, ($10 + [8]), ($10 + [32]))
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $93(*($10 + [40]))
	
.LABEL $label$5
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [240])
	$8 = $11
	$3 = ($8 + [-48])
	*([0] + [4]) = $3
	*($10 + [36]) = $3
	*($10 + [32]) = $3
	*($10 + [40]) = $8
	*($10 + [24]) = ($10 + [32])
	*($10 + [52]) = ($1 + [8])
	*($10 + [48]) = $1
	*($10 + [56]) = ($1 + [24])
	*($10 + [60]) = ($1 + [40])
	CALL $23(($10 + [48]), ($10 + [24]))
	CALL db_update_i64(*($1 + [52]), $2, $3, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $94(($10 + [32]))
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [160])
	$17 = $18
	*([0] + [4]) = $18
	CALL eosio_assert(((int_32)*($1 + [240]) == (int_32)$0), [128])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [176])
	$4 = *($1)
	$5 = (CASTING uint_64)(uint_32 $4)
	$14 = *(*($3) + [4])
	if ( ($14 == 0) ){ goto $label$6 }
	$6 = *($3 + [20])
	*($1 + [216]) = *($14)
	*($17 + [104]) = (int_64)0
	$13 = *((*(*($3 + [16]) + [4]) + [32]))
	*($17 + [112]) = $13
	CALL eosio_assert([1], [368])
	$16 = ($1 + [216])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$10 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	
.LABEL $label$7
	CALL eosio_assert($10, [432])
	$14 = *(*($3 + [12]) + [4])
	if ( (*($14 + [224]) == 0) ){ goto $label$5 }
	$14 = *(*($3) + [4])
	$11 = *(($14 + [16]))
	$13 = *($14 + [8])
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [544])
	$14 = *(*($3) + [4])
	CALL eosio_assert(((int_64)$11 == (int_64)*(($14 + [32]))), [1152])
	$13 = (int_64)
	CALL eosio_assert(((int_64)$13(((int_64)((int_64)$13 * (int_64)105) / (int_64)100) - *($14 + [24]))) > (int_64)-4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [1232])
	goto $label$4 
	
.LABEL $label$6
	*($1 + [216]) = (int_64)0
	$16 = ($1 + [216])
	if ( ((int_32)*(*($3 + [8])) != (int_32)*(*(*($3 + [12]) + [4]) + [192])) ){ goto $label$3 }
	*($1 + [40]) = [1]
	goto $label$2 
	
.LABEL $label$5
	$11 = *($14 + [128])
	$13 = *(*(*($3) + [4]) + [8])
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [544])
	$13 = ((int_64)((int_64)$13 * (int_64)$11) / (int_64)*(*(*(($3 + [16])) + [4]) + [8]))
	
.LABEL $label$4
	*($17 + [104]) = $13
	CALL prints([1728])
	CALL $19(($17 + [104]))
	CALL eosio_assert(((int_64)*(($17 + [112])) == (int_64)*(($1 + [136]))), [1152])
	$13 = (int_64)
	*($1 + [128]) = $13(*($1 + [128]) - *($17 + [104])))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [1200])
	CALL eosio_assert(((int_64)*($1 + [128]) < (int_64)4611686018427387904), [1232])
	$10 = *(($3 + [4]))
	$13 = *($6)
	$14 = *(*($3) + [4])
	*($17) = $6
	*($17 + [8]) = *(($3 + [12]))
	*($17 + [4]) = ($17 + [104])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [80])
	CALL $63($10, $14, $13, $17)
	$13 = *(*(*($3) + [4]))
	$8 = *($7 + [24])
	$7 = *($3 + [24])
	$15 = *(($7 + [28]))
	if ( ((int_32)$15 == (int_32)$8) ){ goto $label$12 }
	$14 = ($15 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$13:
	if ( ((int_64)*(*($14)) == (int_64)$13) ){ goto $label$12 }
	$15 = $14
	$10 = ($14 + [-24])
	$14 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$15 == (int_32)$8) ){ goto $label$16 }
	$14 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [40]) == (int_32)$7), [576])
	if ( $14 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$14 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)-3020376800527122432, $13)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$14 }
	$14 = CALL $31($7, $14)
	CALL eosio_assert(((int_32)*($14 + [40]) == (int_32)$7), [576])
	
.LABEL $label$15
	$10 = *(($3 + [24]))
	$11 = *($6)
	CALL eosio_assert([1], [80])
	CALL eosio_assert(((int_32)$10 == (int_32)*($14 + [40])), [128])
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$2()), [176])
	$13 = *($14)
	CALL eosio_assert(((int_64)*((($17 + [104]) + [8])) == (int_64)*(($14 + [32]))), [1040])
	$12 = ((int_64)*($14 + [24]) + (int_64)*($17 + [104]))
	*($14 + [24]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1088])
	CALL eosio_assert(((int_64)*($14 + [24]) < (int_64)4611686018427387904), [1120])
	CALL eosio_assert(((int_64)$13 == (int_64)*($14)), [240])
	*($17 + [128]) = ($17 + [40])
	*($17 + [124]) = $17
	*($17 + [120]) = $17
	*($17 + [136]) = ($17 + [120])
	*($17 + [148]) = ($14 + [8])
	*($17 + [144]) = $14
	*($17 + [152]) = ($14 + [24])
	CALL $32(($17 + [144]), ($17 + [136]))
	CALL db_update_i64(*($14 + [44]), $11, $17, [40])
	if ( (uint_64)($13 <= *($10 + [16])) ){ goto $label$14 }
	*(($10 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$14 = *($1)
	goto $label$1 
	
.LABEL $label$3
	*($1 + [212]) = (*($1 + [212]) + [-1])
	
.LABEL $label$2
	$14 = $4
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 == (int_32)$14), [240])
	$10 = $18
	$14 = ($10 + [-240])
	*([0] + [4]) = $14
	*($17 + [108]) = $14
	*($17 + [104]) = $14
	*($17 + [112]) = ($10 + [-12])
	*($17 + [144]) = ($17 + [104])
	*($17) = $1
	*($17 + [4]) = ($1 + [8])
	*($17 + [8]) = ($1 + [24])
	*($17 + [12]) = ($1 + [28])
	*($17 + [16]) = ($1 + [32])
	*($17 + [20]) = ($1 + [36])
	*($17 + [24]) = ($1 + [40])
	*($17 + [28]) = ($1 + [48])
	*($17 + [32]) = ($1 + [64])
	*($17 + [36]) = ($1 + [80])
	*($17 + [40]) = ($1 + [96])
	*($17 + [44]) = ($1 + [112])
	*($17 + [48]) = ($1 + [128])
	*($17 + [52]) = ($1 + [144])
	*($17 + [56]) = ($1 + [160])
	*($17 + [60]) = ($1 + [176])
	*($17 + [64]) = ($1 + [184])
	*($17 + [68]) = ($1 + [192])
	*($17 + [72]) = ($1 + [200])
	*($17 + [76]) = ($1 + [208])
	*($17 + [80]) = ($1 + [212])
	*($17 + [84]) = $16
	*($17 + [88]) = ($1 + [224])
	*($17 + [92]) = ($1 + [228])
	*($17 + [96]) = ($1 + [232])
	*($17 + [100]) = ($1 + [236])
	CALL $10($17, ($17 + [144]))
	CALL db_update_i64(*($1 + [244]), $2, $14, [228])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$17 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$17
	*([0] + [4]) = ($17 + [160])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $92($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $103 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $90($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10592])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $89([2196], $0)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2192])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $39($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [352])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $87($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $95($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $92($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $95($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $93($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $94($7)
	return (unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $100(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $100(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $93(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $93(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [352])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $86(*($1), ($0 + [32]))
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [352])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [352])
	CALL memcpy(($0 + [4]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [352])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [368])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [432])
	*(($0 + [32])) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [368])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [432])
	*(($0 + [48])) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [368])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [432])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $83(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [352])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [352])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [352])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1) = [1]
	$2 = *($0)
	$7 = *($6)
	*($1 + [8]) = *($7 + [48])
	*(($4 = ($1 + [16]))) = *(($7 + [56]))
	$3 = *($4)
	$5 = *($1 + [8])
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [512])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [544])
	*(($1 + [32])) = $3
	*($1 + [24]) = ((int_64)((int_64)$5 * (int_64)105) / (int_64)100)
	$3 = *((*($6) + [56]))
	CALL eosio_assert([1], [368])
	$4 = ($1 + [8])
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [432])
	*(($1 + [48])) = $3
	*($1 + [40]) = (int_64)0
	$7 = $9
	$6 = ($7 + [-64])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-12])
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $4
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + [24])
	*($8 + [44]) = ($1 + [40])
	CALL $16(($8 + [32]), ($8 + [24]))
	$5 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-4812882469285658624, *(*($0 + [8])), $5, $6, [52])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC _ZN5eosio11farmeosrich10cleanroundEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [160])
	*([0] + [4]) = $12
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1584]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	*(($12 + [136])) = [0]
	*($12 + [120]) = (int_64)-1
	$8 = *($0)
	*($12 + [104]) = $8
	$4 = (CASTING uint_64)(uint_32 $1)
	*($12 + [112]) = $4
	*($12 + [128]) = (int_64)0
	$6 = CALL db_lowerbound_i64($8, $4, (int_64)-4812882651500904448, (int_64)0)
	$2 = uint_32($6 >> [31])
	$5 = ($12 + [112])
	$11 = [0]
	
.LOOP $label$6:
	if ( ($2 & [1]) ){ goto $label$5 }
	CALL $22(($12 + [104]), $6)
	$6 = [0]
	$2 = CALL db_lowerbound_i64(*($12 + [104]), *($5), (int_64)-4812882651500904448, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $22(($12 + [104]), $2)
	
.LABEL $label$7
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [1776])
	CALL eosio_assert($2, [1632])
	$2 = CALL db_next_i64(*($6 + [52]), ($12 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	CALL $22(($12 + [104]), $2)
	
.LABEL $label$8
	CALL $67(($12 + [104]), $6)
	$6 = CALL db_lowerbound_i64(*($12 + [104]), *($5), (int_64)-4812882651500904448, (int_64)0)
	$2 = uint_32($6 >> [31])
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[10]) ){ goto $label$6 }
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $22(($12 + [104]), $6)
	$8 = CALL current_time()
	*(($12 + [68])) = [0]
	*(($12 + [72])) = [0]
	*($12 + [52]) = [0]
	*($12 + [56]) = [0]
	*($12 + [60]) = [0]
	*($12 + [64]) = [0]
	*($12 + [40]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [76]) = [0]
	*(($12 + [80])) = [0]
	*(($12 + [84])) = [0]
	*($12 + [88]) = [0]
	*(($12 + [92])) = [0]
	*(($12 + [96])) = [0]
	$5 = ($12 + [76])
	$3 = *($0)
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [1424]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$14 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$2 = ($2 + [165])
	goto $label$12 
	
.LABEL $label$14
	$7 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$9 }
	*($12 + [24]) = $9
	*($12 + [16]) = $3
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [2080]
	$9 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$8 > (uint_64)(int_64)9) ){ goto $label$20 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$2 = ($2 + [165])
	goto $label$18 
	
.LABEL $label$20
	$7 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$15 }
	*($12 + [144]) = $9
	*($12 + [8]) = $1
	CALL $74($5, ($12 + [16]), $0, ($12 + [144]), ($12 + [8]))
	$8 = *($0)
	*(($12 + [60])) = [1]
	*($12 + [24]) = (int_64)0
	*($12 + [16]) = $4
	CALL $36(($12 + [144]), ($12 + [40]))
	$6 = *($12 + [144])
	CALL send_deferred(($12 + [16]), $8, $6, (*($12 + [148]) - $6), [0])
	$6 = *($12 + [144])
	if ( ($6 == 0) ){ goto $label$21 }
	*($12 + [148]) = $6
	CALL $93($6)
	
.LABEL $label$21
	CALL $37(($12 + [40]))
	
.LABEL $label$5
	$5 = *($12 + [128])
	if ( ($5 == 0) ){ goto $label$22 }
	$11 = ($12 + [132])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$24 }
	
.LOOP $label$25:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$26 }
	CALL $93($2)
	
.LABEL $label$26
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$25 }
	$6 = *(($12 + [128]))
	goto $label$23 
	
.LABEL $label$24
	$6 = $5
	
.LABEL $label$23
	*($11) = $5
	CALL $93($6)
	
.LABEL $label$22
	*([0] + [4]) = ($12 + [160])
}

void .FUNC _ZN5eosio11farmeosrich9startgameEx (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	*($8 + [88]) = $1
	$1 = (int_64)0
	$5 = (int_64)59
	$4 = [1584]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	*(($8 + [80])) = [0]
	*($8 + [64]) = (int_64)-1
	$1 = *($0)
	*($8 + [48]) = $1
	*($8 + [56]) = $1
	*($8 + [72]) = (int_64)0
	$4 = CALL db_lowerbound_i64($1, $1, (int_64)-3020376800527122432, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	CALL $31(($8 + [48]), $4)
	$4 = [0]
	goto $label$5 
	
.LABEL $label$6
	$4 = [1]
	
.LABEL $label$5
	CALL eosio_assert($4, [2048])
	$4 = CALL db_lowerbound_i64(*($8 + [48]), *(($8 + [56])), (int_64)-3020376800527122432, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	CALL $31(($8 + [48]), $4)
	$0 = *($8 + [72])
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	$1 = *($0)
	*($8 + [8]) = $1
	*($8 + [16]) = $1
	*($8 + [32]) = (int_64)0
	$4 = [0]
	$2 = CALL db_lowerbound_i64($1, $1, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$4 = CALL $9(($8 + [8]), $2)
	
.LABEL $label$10
	$1 = *($0)
	*($8 + [4]) = $0
	*($8) = ($8 + [88])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [80])
	CALL $71(($8 + [8]), $4, $1, $8)
	$0 = *($8 + [32])
	if ( ($0 == 0) ){ goto $label$11 }
	$3 = ($8 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $93($2)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($8 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $0
	
.LABEL $label$12
	*($3) = $0
	CALL $93($4)
	
.LABEL $label$11
	$0 = *($8 + [72])
	if ( ($0 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = ($8 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$19 }
	CALL $93($2)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($8 + [72]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $0
	
.LABEL $label$16
	*($3) = $0
	CALL $93($4)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$27 = (*([0] + [4]) - [144])
	*([0] + [4]) = $27
	CALL eosio_assert(((int_32)*($1 + [240]) == (int_32)$0), [128])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [176])
	$24 = *(*($3))
	$26 = (int_64)($24 == 0)
	*($1 + [36]) = ( (*($1 + [36]) + [1]) ? [1] : $26 )
	$20 = ($1 + [16])
	$22 = *($20)
	$4 = *($1)
	$21 = *($3 + [4])
	$23 = *($1 + [8])
	CALL eosio_assert([1], [464])
	$24 = ( $23 ? $24 : $26 )
	$3 = ((int_64)$24 > (int_64)-4611686018427387904)
	CALL eosio_assert($3, [512])
	$26 = ((int_64)$24 < (int_64)4611686018427387904)
	CALL eosio_assert($26, [544])
	*(($1 + [136])) = $22
	*($1 + [128]) = ((int_64)((int_64)$24 * (int_64)7084) / (int_64)10000)
	CALL eosio_assert([1], [464])
	CALL eosio_assert($3, [512])
	CALL eosio_assert($26, [544])
	*(($1 + [152])) = $22
	*($1 + [144]) = ((int_64)((int_64)$24 * (int_64)2083) / (int_64)10000)
	CALL eosio_assert([1], [464])
	CALL eosio_assert($3, [512])
	CALL eosio_assert($26, [544])
	*($20) = $22
	*($1 + [8]) = ((int_64)((int_64)$24 * (int_64)833) / (int_64)10000)
	*($1 + [112]) = (int_64)0
	*($1 + [24]) = (int_64)1
	*($1 + [32]) = [1]
	*($1 + [40]) = [0]
	*($1 + [48]) = (int_64)1000000
	*($1 + [48]) = ( (int_64)10000 ? (int_64)1000000 : ((int_64)*(($1 + [56])) == (int_64)1397703940) )
	*($1 + [64]) = (int_64)0
	*($1 + [176]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$24 = CALL current_time()
	*($1 + [192]) = [1]
	*($1 + [200]) = (int_64)0
	*($1 + [208]) = [0]
	*($1 + [212]) = [0]
	*($1 + [216]) = (int_64)0
	*($1 + [224]) = [0]
	*($1 + [184]) = ((int_64)((int_64)((uint_64)$24 / (uint_64)(int_64)1000000) + (int_64)3600) & (int_64)4294967295)
	*($1 + [228]) = [0]
	*($1 + [236]) = [0]
	*(($20 = (($26 = $27) + [32]))) = [0]
	*($26 + [24]) = (int_64)0
	$24 = *($21)
	*($26 + [8]) = $24
	*($26) = $24
	*($26 + [16]) = (int_64)-1
	$3 = CALL db_find_i64($24, $24, (int_64)-4812882469285658624, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $12($26, $3) + [56]) == (int_32)$26), [576])
	goto $label$1 
	
.LABEL $label$2
	$22 = *($21)
	*($26 + [104]) = $1
	*($26 + [136]) = $22
	CALL eosio_assert(((int_64)$24 == (int_64)CALL $fimport$2()), [16])
	*($26 + [116]) = ($26 + [104])
	*($26 + [112]) = $26
	*($26 + [120]) = ($26 + [136])
	$3 = CALL $92([72])
	CALL $13($3)
	*($3 + [56]) = $26
	CALL $72(($26 + [112]), $3)
	*($26 + [128]) = $3
	$24 = *($3)
	*($26 + [112]) = $24
	$19 = *($3 + [60])
	*($26 + [108]) = $19
	$21 = *(($26 + [28]))
	if ( ((uint_32)$21 >= (uint_32)*($20)) ){ goto $label$4 }
	*($21 + [8]) = $24
	*($21 + [16]) = $19
	*($26 + [128]) = [0]
	*($21) = $3
	*(($26 + [28])) = ($21 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $15(($26 + [24]), ($26 + [128]), ($26 + [112]), ($26 + [108]))
	
.LABEL $label$3
	$3 = *($26 + [128])
	*($26 + [128]) = [0]
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $93($3)
	
.LABEL $label$1
	$19 = ($1 + [236])
	$18 = ($1 + [228])
	$17 = ($1 + [224])
	$16 = ($1 + [216])
	$15 = ($1 + [212])
	$14 = ($1 + [208])
	$13 = ($1 + [200])
	$12 = ($1 + [192])
	$11 = ($1 + [184])
	$10 = ($1 + [176])
	$9 = ($1 + [40])
	$8 = ($1 + [32])
	$7 = ($1 + [28])
	$6 = ($1 + [24])
	$5 = ($1 + [36])
	$24 = (CASTING uint_64)(uint_32 $4)
	$20 = *($26 + [24])
	if ( ($20 == 0) ){ goto $label$5 }
	$25 = ($26 + [28])
	$3 = *($25)
	if ( ((int_32)$3 == (int_32)$20) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = ($3 + [-24])
	$21 = *($3)
	*($3) = [0]
	if ( ($21 == 0) ){ goto $label$9 }
	CALL $93($21)
	
.LABEL $label$9
	if ( ((int_32)$20 != (int_32)$3) ){ goto $label$8 }
	$3 = *(($26 + [24]))
	goto $label$6 
	
.LABEL $label$7
	$3 = $20
	
.LABEL $label$6
	*($25) = $20
	CALL $93($3)
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [240])
	$21 = $27
	$3 = ($21 + [-240])
	*([0] + [4]) = $3
	*($26 + [116]) = $3
	*($26 + [112]) = $3
	*($26 + [120]) = ($21 + [-12])
	*($26 + [136]) = ($26 + [112])
	*($26 + [4]) = ($1 + [8])
	*($26) = $1
	*($26 + [8]) = $6
	*($26 + [12]) = $7
	*($26 + [16]) = $8
	*($26 + [20]) = $5
	*($26 + [24]) = $9
	*($26 + [28]) = ($1 + [48])
	*($26 + [32]) = ($1 + [64])
	*($26 + [36]) = ($1 + [80])
	*($26 + [40]) = ($1 + [96])
	*($26 + [44]) = ($1 + [112])
	*($26 + [48]) = ($1 + [128])
	*($26 + [52]) = ($1 + [144])
	*($26 + [56]) = ($1 + [160])
	*($26 + [60]) = $10
	*($26 + [64]) = $11
	*($26 + [68]) = $12
	*($26 + [72]) = $13
	*($26 + [76]) = $14
	*($26 + [80]) = $15
	*($26 + [84]) = $16
	*($26 + [88]) = $17
	*($26 + [92]) = $18
	*($26 + [96]) = ($1 + [232])
	*($26 + [100]) = $19
	CALL $10($26, ($26 + [136]))
	CALL db_update_i64(*($1 + [244]), $2, $3, [228])
	if ( (uint_64)($24 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ((int_64)$24 + (int_64)1)
	
.LABEL $label$10
	*([0] + [4]) = ($26 + [144])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [176])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2096]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2112]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [2128])
	
.LABEL $label$7
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [1392]
	$7 = (int_64)0
	
.LOOP $label$14:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$15 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$3 = ($3 + [165])
	goto $label$16 
	
.LABEL $label$17
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$14 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1408]
	$7 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$27 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$22 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$20 }
	
.LABEL $label$21
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1440]
	$7 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$33 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$33
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$28 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$19 }
	
.LABEL $label$20
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$18 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1440]
	$7 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$39 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$3 = ($3 + [165])
	goto $label$37 
	
.LABEL $label$39
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$35
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$34 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$18 }
	
.LABEL $label$19
	*($9 + [168]) = $0
	if ( ((int_64)$2 > (int_64)-3075276115062816769) ){ goto $label$48 }
	if ( ((int_64)$2 <= (int_64)-4157529782108553217) ){ goto $label$47 }
	if ( ((int_64)$2 == (int_64)-4157529782108553216) ){ goto $label$45 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$44 }
	if ( ((int_64)$2 != (int_64)-3075276126730321920) ){ goto $label$18 }
	*($9 + [156]) = [0]
	*($9 + [152]) = [1]
	*($9 + [16 align=4]) = *($9 + [152])
	CALL $78(($9 + [168]), ($9 + [16]))
	goto $label$18 
	
.LABEL $label$48
	if ( ((int_64)$2 <= (int_64)4923676697420251135) ){ goto $label$46 }
	if ( ((int_64)$2 == (int_64)4923676697420251136) ){ goto $label$43 }
	if ( ((int_64)$2 == (int_64)6112330074336788480) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)6182744349214769152) ){ goto $label$18 }
	*($9 + [132]) = [0]
	*($9 + [128]) = [2]
	*($9 + [40 align=4]) = *($9 + [128])
	CALL $79(($9 + [168]), ($9 + [40]))
	goto $label$18 
	
.LABEL $label$47
	if ( ((int_64)$2 == (int_64)-7297066238310612992) ){ goto $label$41 }
	if ( ((int_64)$2 != (int_64)-5915276470426533888) ){ goto $label$18 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [3]
	*($9 + [24 align=4]) = *($9 + [144])
	CALL $79(($9 + [168]), ($9 + [24]))
	goto $label$18 
	
.LABEL $label$46
	if ( ((int_64)$2 == (int_64)-3075276115062816768) ){ goto $label$40 }
	if ( ((int_64)$2 != (int_64)-3075276112363405312) ){ goto $label$18 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [4]
	*($9 + [48 align=4]) = *($9 + [120])
	CALL $80(($9 + [168]), ($9 + [48]))
	goto $label$18 
	
.LABEL $label$45
	*($9 + [92]) = [0]
	*($9 + [88]) = [5]
	*($9 + [80 align=4]) = *($9 + [88])
	CALL $81(($9 + [168]), ($9 + [80]))
	goto $label$18 
	
.LABEL $label$44
	*($9 + [164]) = [0]
	*($9 + [160]) = [6]
	*($9 + [8 align=4]) = *($9 + [160])
	CALL $77(($9 + [168]), ($9 + [8]))
	goto $label$18 
	
.LABEL $label$43
	*($9 + [100]) = [0]
	*($9 + [96]) = [7]
	*($9 + [72 align=4]) = *($9 + [96])
	CALL $79(($9 + [168]), ($9 + [72]))
	goto $label$18 
	
.LABEL $label$42
	*($9 + [140]) = [0]
	*($9 + [136]) = [8]
	*($9 + [32 align=4]) = *($9 + [136])
	CALL $79(($9 + [168]), ($9 + [32]))
	goto $label$18 
	
.LABEL $label$41
	*($9 + [108]) = [0]
	*($9 + [104]) = [9]
	*($9 + [64 align=4]) = *($9 + [104])
	CALL $79(($9 + [168]), ($9 + [64]))
	goto $label$18 
	
.LABEL $label$40
	*($9 + [116]) = [0]
	*($9 + [112]) = [10]
	*($9 + [56 align=4]) = *($9 + [112])
	CALL $79(($9 + [168]), ($9 + [56]))
	
.LABEL $label$18
	*([0] + [4]) = ($9 + [176])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [368])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [432])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $84(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $85(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $93(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $92(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $92([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $39(($8 + [28]), [4])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[3]), [304])
	CALL memcpy($2, $4, [4])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $93($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $93($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $93($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $92($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $99($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $93($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $38($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $39($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $40($4, $1)
	CALL $42(CALL $41(CALL $41($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $93($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $93($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $93($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $93($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $93($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $93($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $93($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $93($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [256])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	CALL $82(($8 + [56]), $6, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	*((($8 + [144]) + [12])) = *(($8 + [76]))
	*(($1 = (($8 + [144]) + [8]))) = *(($8 + [72]))
	*($8 + [148]) = *((($8 + [56]) + [12]))
	$6 = *($8 + [56])
	*($8 + [144]) = *($8 + [64])
	$3 = *($8 + [60])
	*(($4 = (($8 + [128]) + [8]))) = *(($8 + [88]))
	*($8 + [128]) = *($8 + [80])
	*(($5 = (($8 + [112]) + [8]))) = *(($8 + [104]))
	*($8 + [112]) = *($8 + [96])
	*((($8 + [192]) + [8])) = *($5)
	*((($8 + [176]) + [8])) = *($4)
	*($8 + [192]) = *($8 + [112])
	*($8 + [176]) = *($8 + [128])
	*((($8 + [160]) + [8])) = *($1)
	*($8 + [160]) = *($8 + [144])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	*(($2 = (($8 + [240]) + [8]))) = *((($8 + [160]) + [8]))
	*(($0 = (($8 + [224]) + [8]))) = *((($8 + [176]) + [8]))
	*($8 + [240]) = *($8 + [160])
	*($8 + [224]) = *($8 + [176])
	*(($4 = (($8 + [208]) + [8]))) = *((($8 + [192]) + [8]))
	*($8 + [208]) = *($8 + [192])
	*((($8 + [40]) + [8])) = *($2)
	*($8 + [40]) = *($8 + [240])
	*((($8 + [24]) + [8])) = *($0)
	*($8 + [24]) = *($8 + [224])
	*((($8 + [8]) + [8])) = *($4)
	*($8 + [8]) = *($8 + [208])
	CALL void $1((int_32 $6), (int_32 $3), (int_32 ($8 + [40])), (int_32 ($8 + [24])), (int_32 ($8 + [8])), (int_32 $7))
	*([0] + [4]) = ($8 + [256])
	return [1]
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [352])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [304])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $92(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $93($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $93($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$7 = *($6 + [4])
	*($1 + [8]) = *($7)
	*(($1 + [16])) = *(($7 + [8]))
	$4 = *(*($6 + [4]) + [8])
	CALL eosio_assert([1], [368])
	$3 = ($1 + [8])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [432])
	*(($1 + [32])) = $4
	*($1 + [24]) = (int_64)0
	$7 = $9
	$6 = ($7 + [-48])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-8])
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $3
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + [24])
	CALL $32(($8 + [32]), ($8 + [24]))
	$5 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020376800527122432, *(*($0 + [8])), $5, $6, [40])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [320])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $92([56])
	CALL $29($6)
	*($6 + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [24])
	CALL $47(($8 + [32]), ($8 + [24]))
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [44])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $33(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $93($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}