(data (i32.const 8192) "Can\'t execute transfer action\00")
(data (i32.const 8222) "No airdrop or already airdroped\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8340) "symbol mismatch\00")
(data (i32.const 8356) "contract mismatch\00")
(data (i32.const 8374) "airdrop\00")
(data (i32.const 8382) "airdrop balance overflow\00")
(data (i32.const 8407) "write\00")
(data (i32.const 8413) "unable to find key\00")
(data (i32.const 8432) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8483) "error reading iterator\00")
(data (i32.const 8506) "read\00")
(data (i32.const 8511) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8560) "invalid symbol name\00")
(data (i32.const 8580) "attempt to add asset with different symbol\00")
(data (i32.const 8623) "addition underflow\00")
(data (i32.const 8642) "addition overflow\00")
(data (i32.const 8660) "get\00")
(data (i32.const 8664) "singleton does not exist\00")
(data (i32.const 8689) "cannot pass end iterator to modify\00")
(data (i32.const 8724) "object passed to modify is not in multi_index\00")
(data (i32.const 8770) "cannot modify objects in table of another contract\00")
(data (i32.const 8821) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8880) "cannot create objects in table of another contract\00")
(data (i32.const 8931) "-%lld.%s %s\00")
(data (i32.const 8943) "%lld.%s %s\00")
(data (i32.const 17376) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$1 (param i32)))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "memmove" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$9 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$11 (result i64)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$14))
(import "env" "memset" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$18 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$23 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$25 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$26 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$27 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$30 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$32 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$33 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$34 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $43))
(export "_Znwj" (func $41))
(export "_Znaj" (func $42))
(export "_ZdaPv" (func $44))
(export "_ZnwjSt11align_val_t" (func $45))
(export "_ZnajSt11align_val_t" (func $46))
(export "_ZdlPvSt11align_val_t" (func $47))
(export "_ZdaPvSt11align_val_t" (func $48))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $2 $4 $6 $56 $58)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17456))
(global $global$2 i32 (i32.const 17456))


void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8880])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([24])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = $1
	CALL $37(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-3665743729458675712
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-3665743729458675712
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $34(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	*($1 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $63($1)
	
.LABEL $label$2
	*(CALL $53()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $63(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $66($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = [0]
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$7 = *($3)
	*($5 + [8]) = $7
	$8 = *($2)
	*($5 + [16]) = $8
	$9 = (uint_64)*($4) >> (uint_64)(int_64)8
	$2 = CALL db_find_i64($7, $8, (int_64)3607749779137757184, $9)
	if ( ((int_32)$2) <= (int_32)[-1]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $23(($5 + [8]), $2) + [16]) == (int_32)($5 + [8])), [8432])
	$6 = CALL $24(($5 + [8]), $9, [8413])
	*($0) = *($6)
	*(($0 + [8])) = *(($6 + [8]))
	$4 = *($5 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$2 = ($5 + [36])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($5 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($0) = (int_64)0
	$7 = *($4)
	*($0 + [8]) = $7
	CALL eosio_assert([1], [8511])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	
.LOOP $label$8:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$2 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$0 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $0 ){ goto $label$10 }
	$2 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($2, [8560])
	
.LABEL $label$3
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$2
	$6 = $4
	
.LABEL $label$1
	*($2) = $4
	CALL _ZdlPv($6)
	$global$0 = ($5 + [48])
}

void .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17360])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17168]
	$3 = (((int_32)$1 * (int_32)[12]) + [17168])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8968]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8972])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8968]) = [1]
	$2 = ($2 << [16])
	*([0] + [8972]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8972])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8972]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8968]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8968]) = [1]
	$3 = ($3 << [16])
	*([0] + [8972]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8972])
	
.LABEL $label$10
	*([0] + [8972]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8407])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8407])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [8]))
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8407])
	CALL memcpy(*($6), $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8407])
	CALL memcpy(*($6), ($7 + [16]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $52($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8407])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8407])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($2 + [8])
	CALL $11(($3 + [8]), $0, $1, $4)
	CALL eosio_assert(((int_64)$4 == (int_64)*($3 + [16])), [8580])
	$5 = ((int_64)*($3 + [8]) + (int_64)*($2))
	*($3 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [8623])
	CALL eosio_assert(((int_64)*($3 + [8]) < (int_64)4611686018427387904), [8642])
	$2 = *($0)
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$7 = ($0 + [4])
	
.LOOP $label$2:
	if ( ((int_64)*($2 + [8]) != (int_64)$4) ){ goto $label$3 }
	if ( ((int_64)*($2 + [16]) != (int_64)$1) ){ goto $label$3 }
	$8 = ($2 + [24])
	$6 = ($6 - $8)
	$9 = ((int_32)$6 / (int_32)[24])
	if ( ($6 == 0) ){ goto $label$4 }
	CALL memmove($2, $8, $6)
	
.LABEL $label$4
	$6 = ($2 + ((int_32)$9 * (int_32)[24]))
	*($7) = $6
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)*($0 + [8])) ){ goto $label$5 }
	*($6) = *($3 + [8])
	*(($6 + [16])) = *((($3 + [8]) + [16]))
	*(($6 + [8])) = *((($3 + [8]) + [8]))
	*(($2 = ($0 + [4]))) = (*($2) + [24])
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$5
	CALL $26($0, ($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$5 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [12]) == (int_32)$1), [8432])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-3665743729458675712, (int_64)-3665743729458675712)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $9($1, $5)
	CALL eosio_assert(((int_32)*($5 + [12]) == (int_32)$1), [8432])
	
.LABEL $label$4
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$1 = (*($5 + [4]) - *($5))
	$3 = ((int_32)$1 / (int_32)[24])
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$1 = CALL _Znwj($1)
	*(($6 = ($0 + [4]))) = $1
	*(($0 + [8])) = ($1 + ((int_32)$3 * (int_32)[24]))
	*($0) = $1
	$5 = *($5)
	$0 = (*(($5 + [4])) - $5)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($1, $5, $0)
	*($6) = (*($6) + ((int_32)((uint_32)$0 / (uint_32)[24]) * (int_32)[24]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	*($4 + [8]) = $3
	CALL $25($4, $1, $2, ($4 + [8]))
	*($0) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($4 + [4])
	$5 = (*($1 + [4]) - *($1))
	$3 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($6 = ($0 + [4]))) = $5
	*(($0 + [8])) = ($5 + ((int_32)$3 * (int_32)[24]))
	*($0) = $5
	$0 = *($1)
	$1 = (*(($1 + [4])) - $0)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $0, $1)
	*($6) = (*($6) + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$2
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $52($0)
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8483])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $63($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8506])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8506])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $29(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $66($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [8931] ? [8943] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $59($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $60($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $49($0)
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8880])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([24])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = $1
	CALL $40(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-3665743729458675712
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-3665743729458675712
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $34(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	*($1 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8432])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $23($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8432])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8407])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8407])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8407])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $52($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[24])))) = *($1)
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($5 + ((int_32)$6 * (int_32)[24]))
	$4 = ($4 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $49 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $66($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $63($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8956])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $63($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $38($1, *($5), *($5 + [4]))
	
.LABEL $label$1
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[24]))
	$5 = [0]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$5 = ((((int_32)((uint_32)($8 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $5) + [24])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $63($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $39($3, $1)
	*($1 + [16]) = CALL db_store_i64(*($4 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), (int_64)-3665743729458675712, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)-3665743729458675712) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $66($2)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)-3665743729458675712) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)-3665743729458675711
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $66($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $61(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8956])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $61(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8506])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8506])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8506])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8506])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $30(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8483])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $63($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([24])) + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [12]) = $0
	CALL $33(($3 + [32]), $5)
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-3665743729458675712
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-3665743729458675712
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $34(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $66($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$10 }
	*($1 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	float_64 $18
	int_64 $19
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL require_auth(*($0))
	*($3 + [168]) = *($1 + [16])
	*($3 + [160]) = *($1 + [8])
	CALL $19(($3 + [144]), $0, $0, ($3 + [168]), ($3 + [160]))
	CALL eosio_assert(((int_64)*($3 + [144]) >= (int_64)*($1)), [8382])
	$4 = (int_64)0
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)*($2 + [4])) ){ goto $label$1 }
	$6 = *(($5 + [16]))
	CALL eosio_assert([1], [8511])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$4 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$4 = $7
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$6 }
	$8 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [8560])
	$4 = (int_64)0
	$9 = *(($2 + [4]))
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$1 }
	
.LOOP $label$7:
	$7 = *(($5 + [8]))
	CALL eosio_assert(((int_64)*(($5 + [16])) == (int_64)$6), [8580])
	$4 = ((int_64)$7 + (int_64)$4)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [8623])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [8642])
	$5 = ($5 + [24])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$1
	$5 = ($1 + [8])
	*((($3 + [128]) + [8])) = *($5)
	*($3 + [128]) = *($1)
	*((($3 + [112]) + [8])) = *($5)
	*($3 + [128]) = (int_64)0
	*($3 + [112]) = (int_64)0
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$8 }
	$11 = *(($2 + [4]))
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$8 }
	$12 = (CASTING float_64)(int_64 $4)
	$13 = (($3 + [72]) + [8])
	$14 = ($3 + [88])
	$15 = (($3 + [72]) + [24])
	$16 = ($3 + [104])
	$17 = ($3 + [100])
	
.LOOP $label$9:
	$4 = *($8 + [8])
	*($13) = *($8)
	*($14) = (int_64)-1
	*($15) = (int_64)0
	*($16) = [0]
	*($3 + [72]) = *($0)
	$18 = ((float_64)((float_64)(CASTING float_64)(int_64 $4) / (float_64)$12) * (float_64)(CASTING float_64)(int_64 *($1)))
	if ( ((float_64)(float_64)|$18| < (float_64)(float_64)9223372036854775808) ){ goto $label$11 }
	$19 = (int_64)-9223372036854775808
	goto $label$10 
	
.LABEL $label$11
	$19 = (Rounds 0)($18)
	
.LABEL $label$10
	$6 = *($3 + [160])
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8511])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$13:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$4 = $7
	$2 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = $7
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$15 }
	$2 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$12
	CALL eosio_assert($2, [8560])
	CALL eosio_assert(((int_64)$6 == (int_64)*((($3 + [128]) + [8]))), [8580])
	$4 = ((int_64)*($3 + [128]) + (int_64)$19)
	*($3 + [128]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [8623])
	CALL eosio_assert(((int_64)*($3 + [128]) < (int_64)4611686018427387904), [8642])
	CALL eosio_assert(((int_64)*($3 + [128]) <= (int_64)*($1)), [8382])
	$4 = *($0)
	*(($9 = (($3 + [16]) + [8]))) = [0]
	*($3 + [16]) = (int_64)0
	CALL $20(($3 + [56]), ($3 + [72]), $4, ($3 + [16]))
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$16 }
	*($3 + [20]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	*((($3 + [40]) + [8])) = $6
	*(($3 + [8])) = $6
	*($3 + [40]) = $19
	*($3) = $19
	CALL $21(($3 + [56]), *($3 + [168]), $3)
	CALL $11(($3 + [16]), ($3 + [56]), *($3 + [168]), *($3 + [160]))
	CALL eosio_assert(((int_64)*($9) == (int_64)*((($3 + [112]) + [8]))), [8580])
	$4 = ((int_64)*($3 + [112]) + (int_64)*($3 + [16]))
	*($3 + [112]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [8623])
	CALL eosio_assert(((int_64)*($3 + [112]) < (int_64)4611686018427387904), [8642])
	CALL eosio_assert(((int_64)*($3 + [112]) <= (int_64)*($3 + [144])), [8382])
	CALL $15(($3 + [72]), ($3 + [56]), *($0))
	$5 = *($3 + [56])
	if ( ($5 == 0) ){ goto $label$17 }
	*($3 + [60]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$2 = *($15)
	if ( ($2 == 0) ){ goto $label$18 }
	$5 = *($17)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	$10 = *($9)
	if ( ($10 == 0) ){ goto $label$23 }
	*($9 + [4]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$23
	CALL _ZdlPv($9)
	
.LABEL $label$22
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$21 }
	$5 = *($15)
	goto $label$19 
	
.LABEL $label$20
	$5 = $2
	
.LABEL $label$19
	*($17) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$8 = ($8 + [24])
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$9 }
	
.LABEL $label$8
	CALL $22(($3 + [72]), ($3 + [128]))
	$9 = *($3 + [72])
	$10 = ($9 & [1])
	$5 = (($3 + [72]) | [1])
	CALL prints_l(( *($3 + [80]) ? $5 : $10 ), ( *($3 + [76]) ? uint_32($9 >> [1]) : $10 ))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [80])))
	
.LABEL $label$24
	*($3 + [72]) = [45]
	CALL prints_l(($3 + [72]), [1])
	CALL $22(($3 + [72]), $1)
	$9 = *($3 + [72])
	$10 = ($9 & [1])
	CALL prints_l(( *($3 + [80]) ? $5 : $10 ), ( *($3 + [76]) ? uint_32($9 >> [1]) : $10 ))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($3 + [80])))
	
.LABEL $label$25
	*($3 + [72]) = [45]
	CALL prints_l(($3 + [72]), [1])
	CALL $22(($3 + [72]), ($3 + [112]))
	$9 = *($3 + [72])
	$10 = ($9 & [1])
	$5 = (($3 + [72]) | [1])
	CALL prints_l(( *($3 + [80]) ? $5 : $10 ), ( *($3 + [76]) ? uint_32($9 >> [1]) : $10 ))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($3 + [80])))
	
.LABEL $label$26
	*($3 + [72]) = [45]
	CALL prints_l(($3 + [72]), [1])
	CALL $22(($3 + [72]), ($3 + [144]))
	$9 = *($3 + [72])
	$10 = ($9 & [1])
	CALL prints_l(( *($3 + [80]) ? $5 : $10 ), ( *($3 + [76]) ? uint_32($9 >> [1]) : $10 ))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($3 + [80])))
	
.LABEL $label$27
	$global$0 = ($3 + [176])
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$2 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$2 = CALL $63($8)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $8)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [48]) = ($2 + $8)
	*($4 + [40]) = $2
	CALL eosio_assert(((uint_32)$8 > (uint_32)[7]), [8506])
	CALL memcpy(($4 + [56]), $2, [8])
	*($4 + [8]) = (int_64)0
	$3 = ($8 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8506])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	*($4 + [64]) = *($4 + [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8506])
	CALL memcpy((($4 + [56]) + [16]), ($2 + [16]), [8])
	*($4 + [44]) = ($2 + [24])
	CALL $16(($4 + [40]), (($4 + [56]) + [24]))
	*(($3 = (($4 + [112]) + [8]))) = *($4 + [48])
	*($4 + [112]) = *($4 + [40])
	$10 = *($3)
	*(($9 = (($4 + [136]) + [8]))) = $10
	*((($4 + [8]) + [24])) = $10
	*($4 + [8]) = $0
	*($4 + [16]) = $1
	$0 = *($4 + [112])
	*($4 + [24]) = $0
	*($4 + [136]) = $0
	*(($11 = (($4 + [112]) + [16]))) = *($4 + [72])
	*($3) = *($4 + [64])
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = [0]
	*($4 + [112]) = *($4 + [56])
	$10 = (*(($4 + [84])) - *($4 + [80]))
	$12 = ((int_32)$10 / (int_32)[24])
	if ( ($10 == 0) ){ goto $label$6 }
	if ( ((uint_32)$12 >= (uint_32)[178956971]) ){ goto $label$5 }
	$7 = CALL _Znwj($10)
	*(($4 + [104])) = ($7 + ((int_32)$12 * (int_32)[24]))
	*($4 + [96]) = $7
	*($4 + [100]) = $7
	$12 = *((($4 + [56]) + [24]))
	$10 = (*(($4 + [84])) - $12)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $12, $10)
	$7 = (*($4 + [100]) + ((int_32)((uint_32)$10 / (uint_32)[24]) * (int_32)[24]))
	*($4 + [100]) = $7
	
.LABEL $label$6
	*((($4 + [136]) + [16])) = *($11)
	*($9) = *($3)
	*($4 + [136]) = *($4 + [112])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	*($4 + [168]) = [0]
	*($4 + [160]) = (int_64)0
	$7 = ($7 - *($4 + [96]))
	$5 = ((int_32)$7 / (int_32)[24])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$4 }
	$7 = CALL _Znwj($7)
	*(($4 + [168])) = ($7 + ((int_32)$5 * (int_32)[24]))
	*($4 + [160]) = $7
	*($4 + [164]) = $7
	$10 = *($4 + [96])
	$5 = (*($4 + [100]) - $10)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($7, $10, $5)
	*($4 + [164]) = ($7 + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$8
	CALL void $3((int_32 ($4 + [136])), (int_32 ($4 + [160])), (int_32 $6))
	$7 = *($4 + [160])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [164]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [96])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [100]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL $66($2)
	
.LABEL $label$11
	$2 = *(($4 + [80]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($4 + [84])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($4 + [176])
	return [1]
	
.LABEL $label$5
	CALL $52(($4 + [96]))
	
.LABEL $label$4
	CALL $52(($4 + [160]))
	(unreachable)
	return (unreachable)
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL require_auth(*($1))
	*(($4 + [184])) = [0]
	*($4 + [168]) = (int_64)-1
	*($4 + [176]) = (int_64)0
	$5 = *($0)
	*($4 + [152]) = $5
	$6 = *($1)
	*($4 + [160]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($5, $6, (int_64)-3665743729458675712, (int_64)-3665743729458675712)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $9(($4 + [152]), $8) + [12]) == (int_32)($4 + [152])), [8432])
	$7 = [1]
	
.LABEL $label$1
	CALL eosio_assert($7, [8222])
	CALL $10(($4 + [136]), ($4 + [152]))
	CALL $11(($4 + [112]), ($4 + [136]), *($2), *($3))
	CALL eosio_assert(((int_64)*($4 + [120]) == (int_64)*($3)), [8340])
	CALL eosio_assert(((int_64)*($4 + [128]) == (int_64)*($2)), [8356])
	CALL eosio_assert(((int_64)*($4 + [112]) > (int_64)0), [8222])
	$5 = *($2)
	$6 = *($0)
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	$7 = CALL $60([8374])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$8 }
	*($4 + [8]) = ($7 << [1])
	$8 = (($4 + [8]) | [1])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($4 + [8]) = ($9 | [1])
	*($4 + [16]) = $8
	*($4 + [12]) = $7
	
.LABEL $label$7
	CALL memcpy($8, [8374], $7)
	
.LABEL $label$6
	*(($8 + $7)) = [0]
	*(($8 = (($4 + [72]) + [24]))) = [0]
	*((($4 + [24]) + [24])) = *((($4 + [112]) + [8]))
	$7 = (($4 + [8]) + [8])
	*(($4 + [64])) = *($7)
	*($7) = [0]
	*($4 + [72]) = $5
	*($4 + [80]) = (int_64)-3617168760277827584
	*($4 + [88]) = (int_64)0
	*($4 + [24]) = *($0)
	*($4 + [32]) = *($1)
	*($4 + [40]) = *($4 + [112])
	*($4 + [56]) = *($4 + [8])
	*($4 + [8]) = (int_64)0
	*(($7 = CALL _Znwj([16]))) = $6
	*($7 + [8]) = (int_64)3617214756542218240
	*((($4 + [72]) + [36])) = [0]
	$1 = ($7 + [16])
	*($8) = $1
	*(($4 + [92])) = $1
	*($4 + [88]) = $7
	*($4 + [100 align=4]) = (int_64)0
	$7 = *($4 + [56])
	$1 = ( *((($4 + [24]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$5 = (CASTING uint_64)(uint_32 $1)
	$1 = ($4 + [100])
	
.LOOP $label$9:
	$7 = ($7 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	if ( ($7 == 0) ){ goto $label$11 }
	CALL $12($1, $7)
	$1 = *(($4 + [104]))
	$7 = *(($4 + [100]))
	goto $label$10 
	
.LABEL $label$11
	$1 = [0]
	$7 = [0]
	
.LABEL $label$10
	*($4 + [212]) = $7
	*($4 + [208]) = $7
	*($4 + [216]) = $1
	*($4 + [192]) = ($4 + [208])
	*($4 + [200]) = ($4 + [24])
	CALL $13(($4 + [200]), ($4 + [192]))
	CALL $14(($4 + [208]), ($4 + [72]))
	$7 = *($4 + [208])
	CALL send_inline($7, (*($4 + [212]) - $7))
	$7 = *($4 + [208])
	if ( ($7 == 0) ){ goto $label$12 }
	*($4 + [212]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$7 = *($4 + [100])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($4 + [104])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$7 = *($4 + [88])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($4 + [92])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( (*(($4 + [56])) & [1]) ){ goto $label$16 }
	if ( (*($4 + [8]) & [1]) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [64])))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [16])))
	$7 = *($4 + [136])
	$1 = *($4 + [140])
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$5
	CALL $49(($4 + [8]))
	
.LABEL $label$4
	$7 = *($4 + [136])
	$1 = *($4 + [140])
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = *($3)
	$6 = *($2)
	
.LOOP $label$17:
	if ( ((int_64)*($7 + [8]) != (int_64)$5) ){ goto $label$18 }
	if ( ((int_64)*($7 + [16]) != (int_64)$6) ){ goto $label$18 }
	$3 = ($7 + [24])
	$1 = ($1 - $3)
	$2 = ((int_32)$1 / (int_32)[24])
	if ( ($1 == 0) ){ goto $label$19 }
	CALL memmove($7, $3, $1)
	
.LABEL $label$19
	$1 = ($7 + ((int_32)$2 * (int_32)[24]))
	*($4 + [140]) = $1
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$17 }
	goto $label$2 
	
.LABEL $label$18
	$7 = ($7 + [24])
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$17 }
	
.LABEL $label$2
	CALL $15(($4 + [152]), ($4 + [136]), *($0))
	$7 = *($4 + [136])
	if ( ($7 == 0) ){ goto $label$20 }
	*($4 + [140]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$20
	$3 = *($4 + [176])
	if ( ($3 == 0) ){ goto $label$21 }
	$0 = ($4 + [180])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$23 }
	
.LOOP $label$24:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$25 }
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$26 }
	*($1 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$26
	CALL _ZdlPv($1)
	
.LABEL $label$25
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$24 }
	$7 = *(($4 + [176]))
	goto $label$22 
	
.LABEL $label$23
	$7 = $3
	
.LABEL $label$22
	*($0) = $3
	CALL _ZdlPv($7)
	
.LABEL $label$21
	$global$0 = ($4 + [224])
	(unreachable)
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $63($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8506])
	CALL memcpy(($4 + [32]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8506])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8506])
	CALL memcpy($4, ($2 + [16]), [8])
	$8 = *($4)
	*($4 + [48]) = $8
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$0 = *($4 + [32])
	*($4 + [64]) = *($4 + [40])
	*($4 + [72]) = $0
	*($4 + [56]) = $8
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [72])), (int_32 ($4 + [64])), (int_32 ($4 + [56])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $66($2)
	
.LABEL $label$6
	$global$0 = ($4 + [80])
	return [1]
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $63($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [48]) + [24]))) = (int_64)0
	*(($4 + [88])) = [0]
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [36]) = $2
	*($4 + [32]) = $2
	*($4 + [40]) = ($2 + $7)
	*($4 + [128]) = ($4 + [32])
	*($4) = ($4 + [48])
	CALL $8($4, ($4 + [128]))
	*(($3 = (($4 + [112]) + [8]))) = *($4 + [40])
	*($4 + [112]) = *($4 + [32])
	$10 = *($3)
	*(($9 = (($4 + [128]) + [8]))) = $10
	*(($4 + [24])) = $10
	*($4) = $0
	*($4 + [8]) = $1
	$0 = *($4 + [112])
	*($4 + [16]) = $0
	*($4 + [128]) = $0
	*($3) = *($8)
	*($4 + [112]) = *($4 + [64])
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	$8 = CALL $50(($4 + [96]), ($4 + [80]))
	*($9) = *($3)
	*($4 + [152]) = $1
	*($4 + [144]) = $0
	*($4 + [128]) = *($4 + [112])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [152])), (int_32 ($4 + [144])), (int_32 ($4 + [128])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [96]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $66($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$0 != (int_64)8200272180149086544) ){ goto $label$2 }
	if ( ((int_64)$1 != (int_64)8200272180149086544) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$3 }
	CALL eosio_assert([0], [8192])
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$1 == (int_64)8200272180149086544) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3 + [16]) = *($3 + [40])
	CALL $3((int_64)8200272180149086544, $1, ($3 + [16]))
	
.LABEL $label$2
	CALL $54([0])
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$1
	if ( ((int_64)$2 == (int_64)-7297969546090692608) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)7111860411634630656) ){ goto $label$4 }
	*($3 + [36]) = [0]
	*($3 + [32]) = [2]
	*($3) = *($3 + [32])
	CALL $5((int_64)8200272180149086544, (int_64)8200272180149086544, $3)
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [28]) = [0]
	*($3 + [24]) = [3]
	*($3 + [8]) = *($3 + [24])
	CALL $7((int_64)8200272180149086544, (int_64)8200272180149086544, ($3 + [8]))
	
.LABEL $label$4
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $12($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8407])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8407])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $28(CALL $27($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$0), [8432])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3665743729458675712, (int_64)-3665743729458675712)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $9($0, $4)
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$0), [8432])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [8689])
	CALL $17($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $18($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [8660])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = ((int_32)($6 - $3) / (int_32)[24])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $32($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ((int_32)$8 * (int_32)[24]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$7 = *($8)
	
.LOOP $label$6:
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8506])
	CALL memcpy($3, *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8506])
	CALL memcpy(($3 + [8]), *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8506])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [16])) = *($2 + [8])
	$7 = (*($8) + [8])
	*($8) = $7
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [8724])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [8770])
	$3 = *($3)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $38($1, *($3), *($3 + [4]))
	
.LABEL $label$1
	CALL eosio_assert([1], [8821])
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[24]))
	$3 = [0]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$3 = ((((int_32)((uint_32)($8 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $3) + [24])
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $63($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $39($5, $1)
	CALL db_update_i64(*(($1 + [16])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)-3665743729458675712) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $66($4)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-3665743729458675712) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = (int_64)-3665743729458675711
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)$1), [8432])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-3665743729458675712, (int_64)-3665743729458675712)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $9($1, $3)
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)$1), [8432])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8664])
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$1 = (*($2 + [4]) - *($2))
	$3 = ((int_32)$1 / (int_32)[24])
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$1 = CALL _Znwj($1)
	*(($4 = ($0 + [4]))) = $1
	*(($0 + [8])) = ($1 + ((int_32)$3 * (int_32)[24]))
	*($0) = $1
	$0 = *($2)
	$2 = (*(($2 + [4])) - $0)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($1, $0, $2)
	*($4) = (*($4) + ((int_32)((uint_32)$2 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $52($0)
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert([1], [8511])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8560])
	*($0 + [8]) = $3
	$4 = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $2
	$7 = *($1 + [4])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	if ( ((int_64)*(($5 + [8])) != (int_64)$3) ){ goto $label$8 }
	if ( ((int_64)*(($5 + [16])) != (int_64)$2) ){ goto $label$8 }
	$6 = *($5)
	CALL eosio_assert([1], [8580])
	$4 = ((int_64)$4 + (int_64)$6)
	*($0) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [8623])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [8642])
	
.LABEL $label$8
	$5 = ($5 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$6
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $52($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8407])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8407])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8407])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8407])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $36(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8407])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8407])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $38($1, *($5), *($5 + [4]))
	
.LABEL $label$1
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[24]))
	$5 = [0]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$5 = ((((int_32)((uint_32)($8 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $5) + [24])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $63($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $39($3, $1)
	*($1 + [16]) = CALL db_store_i64(*($4 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), (int_64)-3665743729458675712, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)-3665743729458675712) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $66($2)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)-3665743729458675712) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)-3665743729458675711
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $52($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$11 }
	*($1 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[24])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $52($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[24]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$8
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$9 }
	CALL _ZdlPv($6)
	
.LABEL $label$9
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[24])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $52($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[24]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$8
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$9 }
	CALL _ZdlPv($6)
	
.LABEL $label$9
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [8660])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = ((int_32)($6 - $3) / (int_32)[24])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $35($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ((int_32)$8 * (int_32)[24]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$7 = *($8)
	
.LOOP $label$6:
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8506])
	CALL memcpy($3, *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8506])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [8])) = *($2 + [8])
	$7 = (*($8) + [8])
	*($8) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8506])
	CALL memcpy(($3 + [16]), *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $31($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $51($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $51($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $49($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8660])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $12($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8506])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $55([5], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $53())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $62($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $63 (int_32 $0)
{
	return CALL $64([8976], $0)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $65($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8254])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[24])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($5 - $6) / (int_32)[24])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$2 = ((int_32)$5 / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$6 * (int_32)[24])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[24]) * (int_32)[24]))
	goto $label$3 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ( ($1 + ((int_32)$3 * (int_32)[24])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	$8 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + ((int_32)$8 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$1
	CALL $52($0)
}

void .FUNC $52 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $53 ()
{
	return [8960]
}

void .FUNC $54 (int_32 $0)
{
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [4] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $57($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $57($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $57($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $57($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [17376]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $57($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $57($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $57($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}