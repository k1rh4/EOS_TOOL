(data (i32.const 4) "\80g\00\00")
(data (i32.const 32) "onerror\00")
(data (i32.const 48) "eosio\00")
(data (i32.const 64) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 128) "invalid symbol name\00")
(data (i32.const 160) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 224) "read\00")
(data (i32.const 240) "lucked roll_value:\00")
(data (i32.const 272) "reward:\00")
(data (i32.const 288) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 352) "cannot pass end iterator to modify\00")
(data (i32.const 400) "active\00")
(data (i32.const 416) "eosio.token\00")
(data (i32.const 432) "transfer\00")
(data (i32.const 448) "Welcome back to PokerEOS(https://pokereos.io )! Here is your reward of Lucky Draw!!!!\00")
(data (i32.const 544) "Welcome back to PokerEOS(https://pokereos.io )! Here is your reward of Lucky Draw!!!\00")
(data (i32.const 640) "Welcome back to PokerEOS(https://pokereos.io )! Here is your reward of Lucky Draw!!\00")
(data (i32.const 736) "Welcome back to PokerEOS(https://pokereos.io )! Here is your reward of Lucky Draw!\00")
(data (i32.const 832) "luckreceipt\00")
(data (i32.const 848) "write\00")
(data (i32.const 864) "object passed to modify is not in multi_index\00")
(data (i32.const 912) "cannot modify objects in table of another contract\00")
(data (i32.const 976) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1040) "cannot create objects in table of another contract\00")
(data (i32.const 1104) "error reading iterator\00")
(data (i32.const 1136) ".\00")
(data (i32.const 1152) " \00")
(data (i32.const 1168) ",\00")
(data (i32.const 1184) "luck Enter\00")
(data (i32.const 1200) "luck is not actived\00")
(data (i32.const 1232) "have no count to play luckly game\00")
(data (i32.const 1280) "luck time has not cool down yet\00")
(data (i32.const 1312) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1376) "eos is too less\00")
(data (i32.const 1392) "lucked\00")
(data (i32.const 1408) "unable to find key\00")
(data (i32.const 1440) "pokereosteam\00")
(data (i32.const 1456) "pokereosgame\00")
(data (i32.const 1472) "pokereoshold\00")
(data (i32.const 1488) "pokereoslong\00")
(data (i32.const 1504) "pokereosbull\00")
(data (i32.const 1520) "pokereosbuls\00")
(data (i32.const 1536) "contract err\00")
(data (i32.const 1552) "get_action size failed\00")
(data (i32.const 1584) "get_action failed\00")
(data (i32.const 1616) "get\00")
(data (i32.const 10016) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$8 (param i32 i32)))
(import "env" "get_action" (func $fimport$9 (param i32 i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$12 (param i64)))
(import "env" "prints" (func $fimport$13 (param i32)))
(import "env" "prints_l" (func $fimport$14 (param i32 i32)))
(import "env" "printui" (func $fimport$15 (param i64)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$18 (param i64)))
(import "env" "require_auth2" (func $fimport$19 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$20 (param i64)))
(import "env" "send_deferred" (func $fimport$21 (param i32 i64 i32 i32 i32)))
(import "env" "sha256" (func $fimport$22 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$23 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$24 (result i32)))
(import "env" "transaction_size" (func $fimport$25 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN6randomC2Ev" (func $5))
(export "_ZN6randomD2Ev" (func $6))
(export "_ZN6random4seedE11checksum256S0_" (func $7))
(export "_ZNK6random7mixseedER11checksum256S1_S1_" (func $8))
(export "_ZN6random9generatorEy" (func $9))
(export "_ZNK6random3genER11checksum256y" (func $10))
(export "_ZN6random10get_randomEyRNSt3__16vectorIhNS0_9allocatorIhEEEEhNS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEE" (func $11))
(export "_ZN6random7setseedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $12))
(export "_ZN6random10get_randomEy" (func $15))
(export "_ZNK6random12get_sys_seedEv" (func $16))
(export "_ZNK6random13get_user_seedEv" (func $17))
(export "_ZNK6random9get_mixedEv" (func $18))
(export "_ZNK6random8get_seedEv" (func $19))
(export "apply" (func $20))
(export "malloc" (func $90))
(export "free" (func $93))
(export "memcmp" (func $101))
(export "strlen" (func $102))
(table $0 7 7 anyfunc)
(elem (i32.const 0) $103 $30 $21 $27 $28 $23 $25)



void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $94($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $95($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $99 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10108])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $95 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $96 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $98($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $91([1620], $0)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $92($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10016])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10102]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10104])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10102]) = [1]
	$7 = ($7 << [16])
	*([0] + [10104]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10104])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10104]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10102]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10102]) = [1]
	$3 = ($3 << [16])
	*([0] + [10104]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10104])
	
.LABEL $label$8
	*([0] + [10104]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10004])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9812]
	$1 = (((int_32)$2 * (int_32)[12]) + [9812])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1104])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $94([80])
	$4 = CALL $62($6)
	*($6 + [64]) = $0
	CALL $63(($8 + [32]), $4)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $64(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $95($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $51($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $44($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $52($4, $1)
	CALL $54(CALL $53(CALL $53($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $94(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $94([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $44(($8 + [28]), [68])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $47(($9 + [24]), ($9 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $95($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $95($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $95($6)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [32])
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	*($1 + [8]) = (Rounds 0)(*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [976])
	CALL eosio_assert([1], [848])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	*($1 + [8]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [976])
	CALL eosio_assert([1], [848])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1040])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $94([32])
	CALL $58($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $95($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1040])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $94([32])
	CALL $60($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $95($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [848])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($3 + [4]), ($0 + [48]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($3 + [4]), ($0 + [56]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($3 + [4]), ($0 + [64]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [848])
	CALL memcpy(*($3 + [4]), ($0 + [72]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $94(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $94([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $44($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	CALL $45($10, $4)
	$5 = ($9 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $95($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $95($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $95($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [16])
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $57($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $94($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $99($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $95($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZNK6random7mixseedER11checksum256S1_S1_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*($4) = *($1)
	*($4 + [8]) = *(($1 + [8]))
	*(($4 + [56])) = *(($2 + [24]))
	*(($4 + [48])) = *(($2 + [16]))
	*(($4 + [40])) = *(($2 + [8]))
	*($4 + [32]) = *($2)
	CALL sha256($4, [64], $3)
	*([0] + [4]) = ($4 + [64])
}

int_64 .FUNC _ZN6random9generatorEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($3 + [24])) = *(($0 + [88]))
	*(($3 + [16])) = *(($0 + [80]))
	*($3) = *($0 + [64])
	*($3 + [8]) = *(($0 + [72]))
	*(($3 + [56])) = *(($0 + [120]))
	*(($3 + [48])) = *(($0 + [112]))
	$2 = ($0 + [104])
	*(($3 + [40])) = *($2)
	*($3 + [32]) = *($0 + [96])
	CALL sha256($3, [64], ($0 + [96]))
	if ( (int_64)($1 == 0) ){ goto $label$2 }
	$1 = ((uint_64)*($2) % (uint_64)$1)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)0
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [64])
	return $1
}

int_32 .FUNC _ZN6randomD2Ev (int_32 $0)
{
	return $0
}

void .FUNC _ZN6random4seedE11checksum256S0_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($0) = *($1)
	*(($3 = ($0 + [24]))) = *(($1 + [24]))
	*(($4 = ($0 + [16]))) = *(($1 + [16]))
	*(($5 = ($0 + [8]))) = *(($1 + [8]))
	*(($1 = ($0 + [56]))) = *(($2 + [24]))
	*(($6 = ($0 + [48]))) = *(($2 + [16]))
	*(($7 = ($0 + [40]))) = *(($2 + [8]))
	*($0 + [32]) = *($2)
	*(($8 + [24])) = *($3)
	*(($8 + [16])) = *($4)
	*($8 + [8]) = *($5)
	*($8) = *($0)
	*(($8 + [56])) = *($1)
	*(($8 + [48])) = *($6)
	*(($8 + [40])) = *($7)
	*($8 + [32]) = *($0 + [32])
	CALL sha256($8, [64], ($0 + [64]))
	*(($0 + [120])) = *(($0 + [88]))
	*(($0 + [112])) = *(($0 + [80]))
	*(($0 + [104])) = *(($0 + [72]))
	*($0 + [96]) = *($0 + [64])
	*([0] + [4]) = ($8 + [64])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN6randomC2Ev (int_32 $0)
{
	return $0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	CALL $100($3, $2)
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	CALL $97(($3 + [16]), $3)
	*($3 + [28]) = CALL tapos_block_num()
	*($3 + [32]) = CALL tapos_block_prefix()
	*($3 + [40]) = CALL current_time()
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL $95(*($3 + [8]))
	
.LABEL $label$1
	CALL sha256(($3 + [16]), [32], $0)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $95(*(($3 + [24])))
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [48])
}

int_64 .FUNC _ZN6random10get_randomEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([16])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($4, [16], $2)
	
.LABEL $label$2
	*(($4 + $2)) = [0]
	CALL _ZN6random7setseedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$5
	*(($5 + [40])) = *(($0 + [88]))
	*(($5 + [32])) = *(($0 + [80]))
	*($5 + [16]) = *($0 + [64])
	*($5 + [24]) = *(($0 + [72]))
	*(($5 + [72])) = *(($0 + [120]))
	*(($5 + [64])) = *(($0 + [112]))
	$2 = ($0 + [104])
	*(($5 + [56])) = *($2)
	*($5 + [48]) = *($0 + [96])
	CALL sha256(($5 + [16]), [64], ($0 + [96]))
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	$1 = ((uint_64)*($2) % (uint_64)$1)
	goto $label$6 
	
.LABEL $label$7
	$1 = (int_64)0
	
.LABEL $label$6
	*([0] + [4]) = ($5 + [80])
	return $1
	
.LABEL $label$1
	CALL $96($5)
	return (unreachable)
}

void .FUNC _ZNK6random12get_sys_seedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1)
	*(($0 + [24])) = *(($1 + [24]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [8])) = *(($1 + [8]))
}

void .FUNC _ZNK6random13get_user_seedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [32])
	*(($0 + [24])) = *(($1 + [56]))
	*(($0 + [16])) = *(($1 + [48]))
	*(($0 + [8])) = *(($1 + [40]))
}

int_64 .FUNC _ZNK6random3genER11checksum256y (int_32 $0, int_32 $1, int_64 $2)
{
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	return ((uint_64)*($1 + [8]) % (uint_64)$2)
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC _ZN6random10get_randomEyRNSt3__16vectorIhNS0_9allocatorIhEEEEhNS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	CALL $100($11, $4)
	CALL _ZN6random7setseedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $11)
	if ( ((*($11) & [1]) == 0) ){ goto $label$1 }
	CALL $95(*($11 + [8]))
	
.LABEL $label$1
	if ( ($3 == 0) ){ goto $label$2 }
	$5 = ($0 + [64])
	$4 = ($0 + [96])
	$6 = ($11 + [48])
	$10 = [0]
	$9 = ($0 + [104])
	$0 = ($2 + [4])
	
.LOOP $label$3:
	*((($11 + [16]) + [24])) = *(($5 + [24]))
	*((($11 + [16]) + [16])) = *(($5 + [16]))
	*($11 + [24]) = *(($5 + [8]))
	*($11 + [16]) = *($5)
	*(($6 + [24])) = *(($4 + [24]))
	*(($6 + [16])) = *(($4 + [16]))
	*(($6 + [8])) = *(($4 + [8]))
	*($6) = *($4)
	CALL sha256(($11 + [16]), [64], $4)
	$7 = (CASTING uint_32)(uint_64 ((uint_64)*($9) % (uint_64)(int_64)255))
	*($11 + [16]) = $7
	$8 = *($0)
	if ( ((uint_32)$8 >= (uint_32)*(($2 + [8]))) ){ goto $label$5 }
	*($8) = $7
	*($0) = (*($0) + [1])
	goto $label$4 
	
.LABEL $label$5
	CALL $13($2, ($11 + [16]))
	
.LABEL $label$4
	$10 = ($10 + [1])
	if ( (($10 & [255]) <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($11 + [80])
}

void .FUNC _ZN6random7setseedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [272])
	*([0] + [4]) = $9
	$2 = CALL transaction_size()
	$3 = CALL malloc($2)
	CALL read_transaction($3, $2)
	CALL sha256($3, $2, ($9 + [112]))
	CALL $100(($9 + [64]), $1)
	CALL $14(($9 + [208]), $0, ($9 + [64]))
	$1 = (($9 + [208]) + [24])
	*(($2 = (($9 + [80]) + [24]))) = *($1)
	$4 = (($9 + [208]) + [16])
	*(($3 = (($9 + [80]) + [16]))) = *($4)
	*($9 + [88]) = *($9 + [216])
	*($9 + [80]) = *($9 + [208])
	if ( ((*($9 + [64]) & [1]) == 0) ){ goto $label$1 }
	CALL $95(*($9 + [72]))
	
.LABEL $label$1
	*(($5 = (($9 + [32]) + [24]))) = *($2)
	*(($2 = (($9 + [32]) + [16]))) = *($3)
	*($9 + [40]) = *($9 + [88])
	*($9 + [32]) = *($9 + [80])
	*(($3 = ($9 + [24]))) = *((($9 + [112]) + [24]))
	*(($6 = ($9 + [16]))) = *((($9 + [112]) + [16]))
	*($9 + [8]) = *($9 + [120])
	*($9) = *($9 + [112])
	*(($7 = (($9 + [176]) + [24]))) = *($3)
	*(($3 = (($9 + [176]) + [16]))) = *($6)
	*($9 + [184]) = *($9 + [8])
	*($9 + [176]) = *($9)
	*(($6 = (($9 + [144]) + [24]))) = *($5)
	*(($5 = (($9 + [144]) + [16]))) = *($2)
	*($9 + [152]) = *($9 + [40])
	*($9 + [144]) = *($9 + [32])
	*(($2 = ($0 + [24]))) = *($6)
	*(($6 = ($0 + [16]))) = *($5)
	*(($5 = ($0 + [8]))) = *($9 + [152])
	*($0) = *($9 + [144])
	*(($8 = ($0 + [56]))) = *($7)
	*(($7 = ($0 + [48]))) = *($3)
	*(($3 = ($0 + [40]))) = *($9 + [184])
	*($0 + [32]) = *($9 + [176])
	*($1) = *($2)
	*($4) = *($6)
	*($9 + [216]) = *($5)
	*($9 + [208]) = *($0)
	*((($9 + [208]) + [56])) = *($8)
	*((($9 + [208]) + [48])) = *($7)
	*((($9 + [208]) + [40])) = *($3)
	*($9 + [240]) = *($0 + [32])
	CALL sha256(($9 + [208]), [64], ($0 + [64]))
	*(($0 + [120])) = *(($0 + [88]))
	*(($0 + [112])) = *(($0 + [80]))
	*(($0 + [104])) = *(($0 + [72]))
	*($0 + [96]) = *($0 + [64])
	*([0] + [4]) = ($9 + [272])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $94($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $95($4)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $75 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [112]))
	$6 = *(($0 + [116]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [88])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$4), [288])
	if ( $5 ){ goto $label$4 }
	return [0]
	
.LABEL $label$5
	$5 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-8173745943120707584, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $38($4, $5)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$4), [288])
	
.LABEL $label$4
	return (*($5 + [20]) <= *($0 + [16]))
	
.LABEL $label$3
	return [0]
}

void .FUNC _ZNK6random9get_mixedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [64])
	*(($0 + [24])) = *(($1 + [88]))
	*(($0 + [16])) = *(($1 + [80]))
	*(($0 + [8])) = *(($1 + [72]))
}

void .FUNC _ZNK6random8get_seedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [96])
	*(($0 + [24])) = *(($1 + [120]))
	*(($0 + [16])) = *(($1 + [112]))
	*(($0 + [8])) = *(($1 + [104]))
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)100
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [848])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $94(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $95($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $95($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $95($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $95($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $95($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $95($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $95($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $95($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $95($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $95($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [848])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [848])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [848])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [848])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [848])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [848])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [848])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $55(CALL $56($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [848])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [848])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $55($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([1136])
	CALL prints_l($2, $3)
	CALL prints([1152])
	CALL $66($1, [0])
	*([0] + [4]) = $10
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [848])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [848])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [848])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [848])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [848])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1104])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $94([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [224])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [224])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $59(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $95($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [224])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	float_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [272])
	*([0] + [4]) = $14
	CALL require_auth(*($0))
	*($14 + [232]) = ((float_64)(CASTING float_64)(uint_64 CALL current_time()) / (float_64)(float_64)1e6)
	$11 = CALL _ZN6random10get_randomEy(($0 + [128]), (int_64)10001)
	*($14 + [224]) = $11
	if ( ((int_64)$11 != (int_64)10000) ){ goto $label$2 }
	$11 = (int_64)1224
	*($14 + [224]) = (int_64)1224
	$12 = (int_64)1
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)((int_64)$11 & (int_64)-2) != (int_64)9998) ){ goto $label$3 }
	$11 = (int_64)1001
	*($14 + [224]) = (int_64)1001
	$12 = (int_64)2
	goto $label$1 
	
.LABEL $label$3
	$12 = (int_64)3
	if ( ((uint_64)((int_64)$11 + (int_64)-9994) > (uint_64)(int_64)3) ){ goto $label$4 }
	$11 = (int_64)1002
	*($14 + [224]) = (int_64)1002
	goto $label$1 
	
.LABEL $label$4
	if ( ((uint_64)((int_64)$11 + (int_64)-9986) > (uint_64)(int_64)7) ){ goto $label$5 }
	$11 = (int_64)1003
	*($14 + [224]) = (int_64)1003
	$12 = (int_64)4
	goto $label$1 
	
.LABEL $label$5
	$12 = (int_64)0
	if ( ((uint_64)((int_64)$11 + (int_64)-9886) > (uint_64)(int_64)99) ){ goto $label$1 }
	$11 = (int_64)1004
	*($14 + [224]) = (int_64)1004
	$12 = (int_64)5
	
.LABEL $label$1
	CALL $33(($14 + [208]), $0, $11)
	CALL prints([240])
	CALL printui(*($14 + [224]))
	CALL prints([272])
	CALL $34(($14 + [208]))
	$3 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$6 }
	$9 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$7:
	if ( ((int_64)*(*($9)) == (int_64)101) ){ goto $label$6 }
	$8 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$2 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$11 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$2), [288])
	if ( $9 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$9 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159551874301952, (int_64)101)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$9 }
	$9 = CALL $35($2, $9)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$2), [288])
	
.LABEL $label$10
	*($14 + [32]) = ($14 + [208])
	CALL eosio_assert([1], [352])
	CALL $37($2, $9, (int_64)0, ($14 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$11 = *($0)
	*($14 + [144]) = ($14 + [208])
	CALL $36(($14 + [32]), $2, $11, ($14 + [144]))
	
.LABEL $label$8
	$3 = *(($0 + [112]))
	$8 = *(($0 + [116]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$12 }
	$9 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$13:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$12 }
	$8 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$6 = ($0 + [88])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$15 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$6), [288])
	goto $label$14 
	
.LABEL $label$15
	$9 = [0]
	$8 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-8173745943120707584, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $38($6, $8)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$6), [288])
	
.LABEL $label$14
	*($14 + [36]) = ($14 + [208])
	*($14 + [32]) = ($14 + [224])
	*($14 + [40]) = ($14 + [232])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [352])
	CALL $39($6, $9, (int_64)0, ($14 + [32]))
	if ( ((int_64)*($14 + [224]) != (int_64)10000) ){ goto $label$49 }
	$3 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$50 }
	$9 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$51:
	if ( ((int_64)*(*($9)) == (int_64)103) ){ goto $label$50 }
	$8 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$51 }
	
.LABEL $label$50
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$55 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$2), [288])
	if ( $9 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$9 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159551874301952, (int_64)103)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$53 }
	$9 = CALL $35($2, $9)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$2), [288])
	
.LABEL $label$54
	$7 = (float_64)
	if ( (((float_64)$7(*($14 + [232]) - (CASTING float_64)(uint_64 *($9 + [8])))) >= (float_64)(float_64)3600) | ((float_64)$7 != (float_64)$7)) ){ goto $label$52 }
	$3 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$56 }
	$9 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$57:
	if ( ((int_64)*(*($9)) == (int_64)100) ){ goto $label$56 }
	$8 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$57 }
	
.LABEL $label$56
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$48 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$2), [288])
	if ( $9 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$53
	$11 = *($0)
	*($14 + [144]) = ($14 + [232])
	CALL $40(($14 + [32]), $2, $11, ($14 + [144]))
	goto $label$49 
	
.LABEL $label$52
	*($14 + [32]) = ($14 + [232])
	CALL eosio_assert([1], [352])
	CALL $43($2, $9, (int_64)0, ($14 + [32]))
	
.LABEL $label$49
	$11 = CALL current_time()
	*(($14 + [172])) = [0]
	*(($14 + [176])) = [0]
	*($14 + [156]) = [0]
	*($14 + [160]) = [0]
	*($14 + [164]) = [0]
	*($14 + [168]) = [0]
	*($14 + [144]) = ((CASTING uint_32)(uint_64 ((uint_64)$11 / (uint_64)(int_64)1000000)) + [60])
	*($14 + [180]) = [0]
	*(($14 + [184])) = [0]
	*(($14 + [188])) = [0]
	*($14 + [192]) = [0]
	*(($14 + [196])) = [0]
	*(($14 + [200])) = [0]
	$9 = ((CASTING uint_32)(uint_64 $12) & [7])
	if ( ((int_32)$9 == (int_32)[3]) ){ goto $label$71 }
	if ( ((int_32)$9 == (int_32)[2]) ){ goto $label$70 }
	if ( ((int_32)$9 != (int_32)[1]) ){ goto $label$69 }
	$8 = ($14 + [180])
	$5 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [400]
	$13 = (int_64)0
	
.LOOP $label$72:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$77 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$6 = ($6 + [165])
	goto $label$75 
	
.LABEL $label$77
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$74
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$73
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$72 }
	*($14 + [8]) = $13
	*($14) = $5
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [416]
	$13 = (int_64)0
	
.LOOP $label$78:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$83 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$6 = ($6 + [165])
	goto $label$81 
	
.LABEL $label$83
	$12 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$82
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$80
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$79
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$78 }
	*($14 + [240]) = $13
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [432]
	$13 = (int_64)0
	
.LOOP $label$84:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$89 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$6 = ($6 + [165])
	goto $label$87 
	
.LABEL $label$89
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$88
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$86
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$85
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$84 }
	*($14 + [136]) = $13
	*(($14 + [52])) = *($14 + [212])
	*($14 + [40]) = $1
	*(($14 + [60])) = *(($14 + [220]))
	*(($14 + [56])) = *(($14 + [216]))
	*($14 + [32]) = $5
	*($14 + [48]) = *($14 + [208])
	*(($14 + [72])) = [0]
	*($14 + [64]) = (int_64)0
	$6 = ($14 + [64])
	$9 = CALL strlen([448])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$60 }
	*(($14 + [64])) = ($9 << [1])
	$6 = ($6 + [1])
	if ( $9 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$71
	$8 = ($14 + [180])
	$5 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [400]
	$13 = (int_64)0
	
.LOOP $label$90:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$95 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$6 = ($6 + [165])
	goto $label$93 
	
.LABEL $label$95
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$94
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$92
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$91
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$90 }
	*($14 + [8]) = $13
	*($14) = $5
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [416]
	$13 = (int_64)0
	
.LOOP $label$96:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$101 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$100 }
	$6 = ($6 + [165])
	goto $label$99 
	
.LABEL $label$101
	$12 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$100
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$99
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$98
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$97
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$96 }
	*($14 + [240]) = $13
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [432]
	$13 = (int_64)0
	
.LOOP $label$102:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$107 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$106 }
	$6 = ($6 + [165])
	goto $label$105 
	
.LABEL $label$107
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$106
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$105
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$104
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$103
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$102 }
	*($14 + [136]) = $13
	*(($14 + [52])) = *($14 + [212])
	*($14 + [40]) = $1
	*(($14 + [60])) = *(($14 + [220]))
	*(($14 + [56])) = *(($14 + [216]))
	*($14 + [32]) = $5
	*($14 + [48]) = *($14 + [208])
	*(($14 + [72])) = [0]
	*($14 + [64]) = (int_64)0
	$6 = ($14 + [64])
	$9 = CALL strlen([640])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$68 }
	*(($14 + [64])) = ($9 << [1])
	$6 = ($6 + [1])
	if ( $9 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$70
	$8 = ($14 + [180])
	$5 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [400]
	$13 = (int_64)0
	
.LOOP $label$108:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$113 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$112 }
	$6 = ($6 + [165])
	goto $label$111 
	
.LABEL $label$113
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$112
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$111
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$110
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$109
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$108 }
	*($14 + [8]) = $13
	*($14) = $5
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [416]
	$13 = (int_64)0
	
.LOOP $label$114:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$119 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$118 }
	$6 = ($6 + [165])
	goto $label$117 
	
.LABEL $label$119
	$12 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$116 }
	goto $label$115 
	
.LABEL $label$118
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$117
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$116
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$115
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$114 }
	*($14 + [240]) = $13
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [432]
	$13 = (int_64)0
	
.LOOP $label$120:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$125 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$124 }
	$6 = ($6 + [165])
	goto $label$123 
	
.LABEL $label$125
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$122 }
	goto $label$121 
	
.LABEL $label$124
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$123
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$122
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$121
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$120 }
	*($14 + [136]) = $13
	*(($14 + [52])) = *($14 + [212])
	*($14 + [40]) = $1
	*(($14 + [60])) = *(($14 + [220]))
	*(($14 + [56])) = *(($14 + [216]))
	*($14 + [32]) = $5
	*($14 + [48]) = *($14 + [208])
	*(($14 + [72])) = [0]
	*($14 + [64]) = (int_64)0
	$6 = ($14 + [64])
	$9 = CALL strlen([544])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$65 }
	*(($14 + [64])) = ($9 << [1])
	$6 = ($6 + [1])
	if ( $9 ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$69
	$8 = ($14 + [180])
	if ( ((int_64)$12 != (int_64)4) ){ goto $label$126 }
	$5 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [400]
	$13 = (int_64)0
	
.LOOP $label$127:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$132 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$131 }
	$6 = ($6 + [165])
	goto $label$130 
	
.LABEL $label$132
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$129 }
	goto $label$128 
	
.LABEL $label$131
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$130
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$129
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$128
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$127 }
	*($14 + [8]) = $13
	*($14) = $5
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [416]
	$13 = (int_64)0
	
.LOOP $label$133:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$138 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$137 }
	$6 = ($6 + [165])
	goto $label$136 
	
.LABEL $label$138
	$12 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$137
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$136
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$135
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$134
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$133 }
	*($14 + [240]) = $13
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [432]
	$13 = (int_64)0
	
.LOOP $label$139:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$144 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$143 }
	$6 = ($6 + [165])
	goto $label$142 
	
.LABEL $label$144
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$141 }
	goto $label$140 
	
.LABEL $label$143
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$142
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$141
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$140
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$139 }
	*($14 + [136]) = $13
	*(($14 + [52])) = *($14 + [212])
	*($14 + [40]) = $1
	*(($14 + [60])) = *(($14 + [220]))
	*(($14 + [56])) = *(($14 + [216]))
	*($14 + [32]) = $5
	*($14 + [48]) = *($14 + [208])
	*(($14 + [72])) = [0]
	*($14 + [64]) = (int_64)0
	$6 = ($14 + [64])
	$9 = CALL strlen([640])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$45 }
	*(($14 + [64])) = ($9 << [1])
	$6 = ($6 + [1])
	if ( $9 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$126
	$5 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [400]
	$13 = (int_64)0
	
.LOOP $label$145:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$150 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$149 }
	$6 = ($6 + [165])
	goto $label$148 
	
.LABEL $label$150
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$147 }
	goto $label$146 
	
.LABEL $label$149
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$148
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$147
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$146
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$145 }
	*($14 + [8]) = $13
	*($14) = $5
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [416]
	$13 = (int_64)0
	
.LOOP $label$151:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$156 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$155 }
	$6 = ($6 + [165])
	goto $label$154 
	
.LABEL $label$156
	$12 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$153 }
	goto $label$152 
	
.LABEL $label$155
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$154
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$153
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$152
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$151 }
	*($14 + [240]) = $13
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [432]
	$13 = (int_64)0
	
.LOOP $label$157:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$162 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$161 }
	$6 = ($6 + [165])
	goto $label$160 
	
.LABEL $label$162
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$159 }
	goto $label$158 
	
.LABEL $label$161
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$160
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$159
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$158
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$157 }
	*($14 + [136]) = $13
	*(($14 + [52])) = *($14 + [212])
	*($14 + [40]) = $1
	*(($14 + [60])) = *(($14 + [220]))
	*(($14 + [56])) = *(($14 + [216]))
	*($14 + [32]) = $5
	*($14 + [48]) = *($14 + [208])
	*(($14 + [72])) = [0]
	*($14 + [64]) = (int_64)0
	$6 = ($14 + [64])
	$9 = CALL strlen([736])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$42 }
	*(($14 + [64])) = ($9 << [1])
	$6 = ($6 + [1])
	if ( $9 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$68
	$4 = (($9 + [16]) & [-16])
	$6 = CALL $94($4)
	*(($14 + [64])) = ($4 | [1])
	*(($14 + [72])) = $6
	*(($14 + [68])) = $9
	
.LABEL $label$67
	CALL memcpy($6, [640], $9)
	
.LABEL $label$66
	*(($6 + $9)) = [0]
	$6 = *(($14 + [184]))
	if ( ((uint_32)$6 >= (uint_32)*(($14 + [188]))) ){ goto $label$62 }
	*($6 + [8]) = *($14 + [136])
	*($6) = *($14 + [240])
	*($6 + [16 align=4]) = (int_64)0
	*(($4 = ($6 + [24]))) = [0]
	$9 = CALL $94([16])
	*($6 + [16]) = $9
	$2 = ($9 + [16])
	*($4) = $2
	*(($9 + [8])) = *(($14 + [8]))
	*($9) = *($14)
	*(($6 + [20])) = $2
	*($6 + [28]) = [0]
	*(($6 + [32])) = [0]
	*(($6 + [36])) = [0]
	$9 = *((($14 + [32]) + [32]))
	$4 = ( *((($14 + [32]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($4 + [32])
	$11 = (CASTING uint_64)(uint_32 $4)
	$4 = ($6 + [28])
	
.LOOP $label$163:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$163 }
	if ( ($9 == 0) ){ goto $label$37 }
	CALL $44($4, $9)
	$4 = *(($6 + [32]))
	$9 = *(($6 + [28]))
	goto $label$36 
	
.LABEL $label$65
	$4 = (($9 + [16]) & [-16])
	$6 = CALL $94($4)
	*(($14 + [64])) = ($4 | [1])
	*(($14 + [72])) = $6
	*(($14 + [68])) = $9
	
.LABEL $label$64
	CALL memcpy($6, [544], $9)
	
.LABEL $label$63
	*(($6 + $9)) = [0]
	$6 = *(($14 + [184]))
	if ( ((uint_32)$6 >= (uint_32)*(($14 + [188]))) ){ goto $label$61 }
	*($6 + [8]) = *($14 + [136])
	*($6) = *($14 + [240])
	*($6 + [16 align=4]) = (int_64)0
	*(($4 = ($6 + [24]))) = [0]
	$9 = CALL $94([16])
	*($6 + [16]) = $9
	$2 = ($9 + [16])
	*($4) = $2
	*(($9 + [8])) = *(($14 + [8]))
	*($9) = *($14)
	*(($6 + [20])) = $2
	*($6 + [28]) = [0]
	*(($6 + [32])) = [0]
	*(($6 + [36])) = [0]
	$9 = *((($14 + [32]) + [32]))
	$4 = ( *((($14 + [32]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($4 + [32])
	$11 = (CASTING uint_64)(uint_32 $4)
	$4 = ($6 + [28])
	
.LOOP $label$164:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$164 }
	if ( ($9 == 0) ){ goto $label$34 }
	CALL $44($4, $9)
	$4 = *(($6 + [32]))
	$9 = *(($6 + [28]))
	goto $label$33 
	
.LABEL $label$62
	CALL $46($8, $14, ($14 + [240]), ($14 + [136]), ($14 + [32]))
	goto $label$35 
	
.LABEL $label$61
	CALL $46($8, $14, ($14 + [240]), ($14 + [136]), ($14 + [32]))
	goto $label$32 
	
.LABEL $label$60
	$4 = (($9 + [16]) & [-16])
	$6 = CALL $94($4)
	*(($14 + [64])) = ($4 | [1])
	*(($14 + [72])) = $6
	*(($14 + [68])) = $9
	
.LABEL $label$59
	CALL memcpy($6, [448], $9)
	
.LABEL $label$58
	*(($6 + $9)) = [0]
	$6 = *(($14 + [184]))
	if ( ((uint_32)$6 >= (uint_32)*(($14 + [188]))) ){ goto $label$165 }
	*($6 + [8]) = *($14 + [136])
	*($6) = *($14 + [240])
	*($6 + [16 align=4]) = (int_64)0
	*(($4 = ($6 + [24]))) = [0]
	$9 = CALL $94([16])
	*($6 + [16]) = $9
	$2 = ($9 + [16])
	*($4) = $2
	*(($9 + [8])) = *(($14 + [8]))
	*($9) = *($14)
	*(($6 + [20])) = $2
	*($6 + [28]) = [0]
	*(($6 + [32])) = [0]
	*(($6 + [36])) = [0]
	$9 = *((($14 + [32]) + [32]))
	$4 = ( *((($14 + [32]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($4 + [32])
	$11 = (CASTING uint_64)(uint_32 $4)
	$4 = ($6 + [28])
	
.LOOP $label$166:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$166 }
	if ( ($9 == 0) ){ goto $label$31 }
	CALL $44($4, $9)
	$4 = *(($6 + [32]))
	$9 = *(($6 + [28]))
	goto $label$30 
	
.LABEL $label$165
	CALL $46($8, $14, ($14 + [240]), ($14 + [136]), ($14 + [32]))
	goto $label$29 
	
.LABEL $label$48
	$9 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159551874301952, (int_64)100)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$46 }
	$9 = CALL $35($2, $9)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$2), [288])
	
.LABEL $label$47
	CALL eosio_assert([1], [352])
	CALL $42($2, $9, (int_64)0, ($14 + [32]))
	goto $label$21 
	
.LABEL $label$46
	CALL $41(($14 + [32]), $2, *($0), ($14 + [144]))
	goto $label$21 
	
.LABEL $label$45
	$4 = (($9 + [16]) & [-16])
	$6 = CALL $94($4)
	*(($14 + [64])) = ($4 | [1])
	*(($14 + [72])) = $6
	*(($14 + [68])) = $9
	
.LABEL $label$44
	CALL memcpy($6, [640], $9)
	
.LABEL $label$43
	*(($6 + $9)) = [0]
	$6 = *(($14 + [184]))
	if ( ((uint_32)$6 >= (uint_32)*(($14 + [188]))) ){ goto $label$39 }
	*($6 + [8]) = *($14 + [136])
	*($6) = *($14 + [240])
	*($6 + [16 align=4]) = (int_64)0
	*(($4 = ($6 + [24]))) = [0]
	$9 = CALL $94([16])
	*($6 + [16]) = $9
	$2 = ($9 + [16])
	*($4) = $2
	*(($9 + [8])) = *(($14 + [8]))
	*($9) = *($14)
	*(($6 + [20])) = $2
	*($6 + [28]) = [0]
	*(($6 + [32])) = [0]
	*(($6 + [36])) = [0]
	$9 = *((($14 + [32]) + [32]))
	$4 = ( *((($14 + [32]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($4 + [32])
	$11 = (CASTING uint_64)(uint_32 $4)
	$4 = ($6 + [28])
	
.LOOP $label$167:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$167 }
	if ( ($9 == 0) ){ goto $label$28 }
	CALL $44($4, $9)
	$4 = *(($6 + [32]))
	$9 = *(($6 + [28]))
	goto $label$27 
	
.LABEL $label$42
	$4 = (($9 + [16]) & [-16])
	$6 = CALL $94($4)
	*(($14 + [64])) = ($4 | [1])
	*(($14 + [72])) = $6
	*(($14 + [68])) = $9
	
.LABEL $label$41
	CALL memcpy($6, [736], $9)
	
.LABEL $label$40
	*(($6 + $9)) = [0]
	$6 = *(($14 + [184]))
	if ( ((uint_32)$6 >= (uint_32)*(($14 + [188]))) ){ goto $label$38 }
	*($6 + [8]) = *($14 + [136])
	*($6) = *($14 + [240])
	*($6 + [16 align=4]) = (int_64)0
	*(($4 = ($6 + [24]))) = [0]
	$9 = CALL $94([16])
	*($6 + [16]) = $9
	$2 = ($9 + [16])
	*($4) = $2
	*(($9 + [8])) = *(($14 + [8]))
	*($9) = *($14)
	*(($6 + [20])) = $2
	*($6 + [28]) = [0]
	*(($6 + [32])) = [0]
	*(($6 + [36])) = [0]
	$9 = *((($14 + [32]) + [32]))
	$4 = ( *((($14 + [32]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($4 + [32])
	$11 = (CASTING uint_64)(uint_32 $4)
	$4 = ($6 + [28])
	
.LOOP $label$168:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$168 }
	if ( ($9 == 0) ){ goto $label$25 }
	CALL $44($4, $9)
	$4 = *(($6 + [32]))
	$9 = *(($6 + [28]))
	goto $label$24 
	
.LABEL $label$39
	CALL $46($8, $14, ($14 + [240]), ($14 + [136]), ($14 + [32]))
	goto $label$26 
	
.LABEL $label$38
	CALL $46($8, $14, ($14 + [240]), ($14 + [136]), ($14 + [32]))
	goto $label$23 
	
.LABEL $label$37
	$4 = [0]
	$9 = [0]
	
.LABEL $label$36
	*($14 + [124]) = $9
	*($14 + [120]) = $9
	*($14 + [128]) = $4
	CALL $45(($14 + [120]), ($14 + [32]))
	*(($9 = (($14 + [144]) + [40]))) = (*($9) + [40])
	
.LABEL $label$35
	if ( ((*(($14 + [64])) & [1]) == 0) ){ goto $label$22 }
	CALL $95(*(($14 + [72])))
	goto $label$22 
	
.LABEL $label$34
	$4 = [0]
	$9 = [0]
	
.LABEL $label$33
	*($14 + [124]) = $9
	*($14 + [120]) = $9
	*($14 + [128]) = $4
	CALL $45(($14 + [120]), ($14 + [32]))
	*(($9 = (($14 + [144]) + [40]))) = (*($9) + [40])
	
.LABEL $label$32
	if ( ((*(($14 + [64])) & [1]) == 0) ){ goto $label$22 }
	CALL $95(*(($14 + [72])))
	goto $label$22 
	
.LABEL $label$31
	$4 = [0]
	$9 = [0]
	
.LABEL $label$30
	*($14 + [124]) = $9
	*($14 + [120]) = $9
	*($14 + [128]) = $4
	CALL $45(($14 + [120]), ($14 + [32]))
	*(($9 = (($14 + [144]) + [40]))) = (*($9) + [40])
	
.LABEL $label$29
	if ( ((*(($14 + [64])) & [1]) == 0) ){ goto $label$22 }
	CALL $95(*(($14 + [72])))
	goto $label$22 
	
.LABEL $label$28
	$4 = [0]
	$9 = [0]
	
.LABEL $label$27
	*($14 + [124]) = $9
	*($14 + [120]) = $9
	*($14 + [128]) = $4
	CALL $45(($14 + [120]), ($14 + [32]))
	*(($9 = (($14 + [144]) + [40]))) = (*($9) + [40])
	
.LABEL $label$26
	if ( ((*(($14 + [64])) & [1]) == 0) ){ goto $label$22 }
	CALL $95(*(($14 + [72])))
	goto $label$22 
	
.LABEL $label$25
	$4 = [0]
	$9 = [0]
	
.LABEL $label$24
	*($14 + [124]) = $9
	*($14 + [120]) = $9
	*($14 + [128]) = $4
	CALL $45(($14 + [120]), ($14 + [32]))
	*(($9 = (($14 + [144]) + [40]))) = (*($9) + [40])
	
.LABEL $label$23
	if ( ((*(($14 + [64])) & [1]) == 0) ){ goto $label$22 }
	CALL $95(*(($14 + [72])))
	
.LABEL $label$22
	$5 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [400]
	$13 = (int_64)0
	
.LOOP $label$169:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$174 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$173 }
	$6 = ($6 + [165])
	goto $label$172 
	
.LABEL $label$174
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$171 }
	goto $label$170 
	
.LABEL $label$173
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$172
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$171
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$170
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$169 }
	*($14 + [128]) = $13
	*($14 + [120]) = $5
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [832]
	$13 = (int_64)0
	
.LOOP $label$175:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$180 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$179 }
	$6 = ($6 + [165])
	goto $label$178 
	
.LABEL $label$180
	$12 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$177 }
	goto $label$176 
	
.LABEL $label$179
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$178
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$177
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$176
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$175 }
	*($14 + [136]) = $13
	*(($9 = ($14 + [24]))) = *(($0 + [248]))
	*(($6 = ($14 + [16]))) = *(($0 + [240]))
	*($14 + [8]) = *(($0 + [232]))
	*($14) = *(($0 + [224]))
	$7 = *($14 + [232])
	*($14 + [32]) = $1
	*((($14 + [32]) + [40])) = *($9)
	*((($14 + [32]) + [32])) = *($6)
	*((($14 + [32]) + [24])) = *($14 + [8])
	*($14 + [48]) = *($14)
	*($14 + [80]) = *($14 + [224])
	*(($14 + [96])) = *((($14 + [208]) + [8]))
	*($14 + [88]) = *($14 + [208])
	*($14 + [104]) = (CASTING uint_32)(float_64 $7)
	$6 = (($14 + [144]) + [40])
	$9 = *($6)
	if ( ((uint_32)$9 >= (uint_32)*(($14 + [188]))) ){ goto $label$182 }
	*($9 + [8]) = $13
	*($9) = $5
	*($9 + [16 align=4]) = (int_64)0
	*(($4 = ($9 + [24]))) = [0]
	$8 = CALL $94([16])
	*($9 + [16]) = $8
	$2 = ($8 + [16])
	*($4) = $2
	*(($8 + [8])) = *((($14 + [120]) + [8]))
	*($8) = *($14 + [120])
	*(($9 + [20])) = $2
	*($9 + [28]) = [0]
	*(($8 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	CALL $44(($9 + [28]), [68])
	$8 = *($8)
	$9 = *($9 + [28])
	*($14 + [244]) = $9
	*($14 + [240]) = $9
	*($14 + [248]) = $8
	*($14 + [256]) = ($14 + [240])
	*($14 + [264]) = ($14 + [32])
	CALL $47(($14 + [264]), ($14 + [256]))
	*($6) = (*($6) + [40])
	goto $label$181 
	
.LABEL $label$182
	CALL $48($8, ($14 + [120]), $0, ($14 + [136]), ($14 + [32]))
	
.LABEL $label$181
	*(($14 + [164])) = [0]
	*($14 + [40]) = (int_64)0
	*($14 + [32]) = $1
	$11 = *($0)
	CALL $49($14, ($14 + [144]))
	$9 = *($14)
	CALL send_deferred(($14 + [32]), $11, $9, (*($14 + [4]) - $9), [0])
	$9 = *($14)
	if ( ($9 == 0) ){ goto $label$183 }
	*($14 + [4]) = $9
	CALL $95($9)
	
.LABEL $label$183
	CALL $50(($14 + [144]))
	
.LABEL $label$21
	*([0] + [4]) = ($14 + [272])
	return (unreachable)
	
.LABEL $label$20
	CALL $96($6)
	
.LABEL $label$19
	CALL $96($6)
	
.LABEL $label$18
	CALL $96($6)
	
.LABEL $label$17
	CALL $96($6)
	
.LABEL $label$16
	CALL $96($6)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [848])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [848])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$2 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)100) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [48])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [288])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159551874301952, (int_64)100)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $35($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [288])
	
.LABEL $label$5
	CALL eosio_assert([1], [352])
	CALL $85($1, $5, (int_64)0, $7)
	goto $label$3 
	
.LABEL $label$4
	CALL $84($7, $1, *($0), ($7 + [8]))
	
.LABEL $label$3
	$2 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$7 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$8:
	if ( ((int_64)*(*($5)) == (int_64)103) ){ goto $label$7 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$12 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [288])
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$5 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159551874301952, (int_64)103)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$5 = CALL $35($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [288])
	
.LABEL $label$11
	CALL eosio_assert([1], [352])
	CALL $87($1, $5, (int_64)0, $7)
	goto $label$9 
	
.LABEL $label$10
	CALL $86($7, $1, *($0), ($7 + [8]))
	
.LABEL $label$9
	*([0] + [4]) = ($7 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [352])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [48]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [64])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [128])) = (int_64)1397703940
	*($11 + [104]) = (int_64)3600
	*($11 + [96]) = $0
	*($11 + [112]) = [11]
	*($11 + [120]) = (int_64)600000
	CALL eosio_assert([1], [160])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$3 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$3 = [0]
	
.LABEL $label$22
	CALL eosio_assert($3, [128])
	*(($11 + [152])) = $0
	*(($11 + [160])) = (int_64)-1
	*(($11 + [168])) = [0]
	*(($11 + [172])) = [0]
	*(($11 + [176])) = [0]
	*($11 + [144]) = $0
	*($11 + [136]) = [0]
	*($11 + [184]) = $0
	*(($11 + [192])) = $0
	*(($11 + [200])) = (int_64)-1
	*(($11 + [208])) = [0]
	*(($11 + [212])) = [0]
	*(($11 + [216])) = [0]
	if ( ((int_64)$2 > (int_64)-4416989690754760705) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)-8173751848700739584) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)-8173746196523778048) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)-8173739028047891968) ){ goto $label$27 }
	*($11 + [52]) = [0]
	*($11 + [48]) = [1]
	*($11 + [40 align=4]) = *($11 + [48])
	CALL $31(($11 + [96]), ($11 + [40]))
	goto $label$27 
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)-4416989690754760704) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)3626112839887880192) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$27 }
	*($11 + [92]) = [0]
	*($11 + [88]) = [2]
	*($11) = *($11 + [88])
	CALL $22(($11 + [96]), $11)
	goto $label$27 
	
.LABEL $label$31
	*($11 + [68]) = [0]
	*($11 + [64]) = [3]
	*($11 + [24 align=4]) = *($11 + [64])
	CALL $24(($11 + [96]), ($11 + [24]))
	goto $label$27 
	
.LABEL $label$30
	*($11 + [60]) = [0]
	*($11 + [56]) = [4]
	*($11 + [32 align=4]) = *($11 + [56])
	CALL $29(($11 + [96]), ($11 + [32]))
	goto $label$27 
	
.LABEL $label$29
	*($11 + [84]) = [0]
	*($11 + [80]) = [5]
	*($11 + [8 align=4]) = *($11 + [80])
	CALL $24(($11 + [96]), ($11 + [8]))
	goto $label$27 
	
.LABEL $label$28
	*($11 + [76]) = [0]
	*($11 + [72]) = [6]
	*($11 + [16 align=4]) = *($11 + [72])
	CALL $26(($11 + [96]), ($11 + [16]))
	
.LABEL $label$27
	$4 = *(($11 + [208]))
	if ( ($4 == 0) ){ goto $label$33 }
	$5 = ($11 + [212])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$35 }
	
.LOOP $label$36:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$37 }
	CALL $95($3)
	
.LABEL $label$37
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$36 }
	$6 = *(($11 + [208]))
	goto $label$34 
	
.LABEL $label$35
	$6 = $4
	
.LABEL $label$34
	*($5) = $4
	CALL $95($6)
	
.LABEL $label$33
	$4 = *(($11 + [168]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [172])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$39 }
	
.LOOP $label$40:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$41 }
	CALL $95($3)
	
.LABEL $label$41
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$40 }
	$6 = *(($11 + [168]))
	goto $label$38 
	
.LABEL $label$39
	$6 = $4
	
.LABEL $label$38
	*($5) = $4
	CALL $95($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [352])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [24]) = $1
	*($8 + [16]) = $2
	CALL require_auth(*($0))
	$3 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$6), [288])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159551874301952, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $35($6, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$6), [288])
	
.LABEL $label$5
	*($8 + [8]) = ($8 + [16])
	CALL eosio_assert([1], [352])
	CALL $82($6, $5, (int_64)0, ($8 + [8]))
	goto $label$3 
	
.LABEL $label$4
	$1 = *($0)
	*($8 + [12]) = ($8 + [16])
	*($8 + [8]) = ($8 + [24])
	CALL $81($8, $6, $1, ($8 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	*($13 + [72]) = $1
	CALL $73(($13 + [32]), [1], [0])
	$3 = *((*(($13 + [52])) + [-16]))
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1440]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	$8 = [1]
	if ( ((int_64)$3 == (int_64)$11) ){ goto $label$5 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1456]
	$11 = (int_64)0
	
.LOOP $label$6:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$7 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$4 = ($4 + [165])
	goto $label$8 
	
.LABEL $label$9
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$7
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$6 }
	$8 = [1]
	if ( ((int_64)$3 == (int_64)$11) ){ goto $label$5 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1472]
	$11 = (int_64)0
	
.LOOP $label$10:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$11 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$4 = ($4 + [165])
	goto $label$12 
	
.LABEL $label$13
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$10 }
	$8 = [1]
	if ( ((int_64)$3 == (int_64)$11) ){ goto $label$5 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1488]
	$11 = (int_64)0
	
.LOOP $label$14:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$15 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [165])
	goto $label$16 
	
.LABEL $label$17
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$15
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$14 }
	$8 = [1]
	if ( ((int_64)$3 == (int_64)$11) ){ goto $label$5 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1504]
	$11 = (int_64)0
	
.LOOP $label$18:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$19 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$4 = ($4 + [165])
	goto $label$20 
	
.LABEL $label$21
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$18 }
	$8 = [1]
	if ( ((int_64)$3 == (int_64)$11) ){ goto $label$5 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1520]
	$11 = (int_64)0
	
.LOOP $label$22:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$23 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$4 = ($4 + [165])
	goto $label$24 
	
.LABEL $label$25
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$23
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$22 }
	$8 = ((int_64)$3 == (int_64)$11)
	
.LABEL $label$5
	CALL eosio_assert($8, [1536])
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1440]
	$3 = *($13 + [32])
	$11 = (int_64)0
	
.LOOP $label$26:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$27 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$4 = ($4 + [165])
	goto $label$28 
	
.LABEL $label$29
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$27
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$26 }
	$8 = [1]
	if ( ((int_64)$3 == (int_64)$11) ){ goto $label$30 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1456]
	$11 = (int_64)0
	
.LOOP $label$31:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$32 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$4 = ($4 + [165])
	goto $label$33 
	
.LABEL $label$34
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$32
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$31 }
	$8 = [1]
	if ( ((int_64)$3 == (int_64)$11) ){ goto $label$30 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1472]
	$11 = (int_64)0
	
.LOOP $label$35:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$36 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$4 = ($4 + [165])
	goto $label$37 
	
.LABEL $label$38
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$36
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$35 }
	$8 = [1]
	if ( ((int_64)$3 == (int_64)$11) ){ goto $label$30 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1488]
	$11 = (int_64)0
	
.LOOP $label$39:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$40 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$4 = ($4 + [165])
	goto $label$41 
	
.LABEL $label$42
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$40
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$39 }
	$8 = [1]
	if ( ((int_64)$3 == (int_64)$11) ){ goto $label$30 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1504]
	$11 = (int_64)0
	
.LOOP $label$43:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$44 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$4 = ($4 + [165])
	goto $label$45 
	
.LABEL $label$46
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$44
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$43 }
	$8 = [1]
	if ( ((int_64)$3 == (int_64)$11) ){ goto $label$30 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1520]
	$11 = (int_64)0
	
.LOOP $label$47:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$48 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$4 = ($4 + [165])
	goto $label$49 
	
.LABEL $label$50
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$48
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$47 }
	$8 = ((int_64)$3 == (int_64)$11)
	
.LABEL $label$30
	CALL eosio_assert($8, [1536])
	if ( ((int_64)*($2) < (int_64)10000) ){ goto $label$53 }
	*($13 + [24]) = ((float_64)(CASTING float_64)(uint_64 CALL current_time()) / (float_64)(float_64)1e6)
	$5 = *(($0 + [112]))
	$2 = *(($0 + [116]))
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$54 }
	$8 = ($2 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$55:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$54 }
	$2 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$55 }
	
.LABEL $label$54
	$8 = ($0 + [88])
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$58 }
	$4 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$8), [288])
	if ( $4 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$4 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-8173745943120707584, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$56 }
	$4 = CALL $38($8, $4)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$8), [288])
	
.LABEL $label$57
	$2 = (([28800] - $5) + ( $6 ? $2 : $7 ))
	$7 = ((int_32)$6 < (int_32)$2)
	$6 = *($4 + [12])
	$2 = (CASTING int_32)(float_64 *($13 + [24]))
	$5 = *($0 + [40])
	if ( ((((([115199] - $5) + ( $2 ? $6 : $7 )) - $2) + ((int_32)$2 % (int_32)[86400])) <= [172799]) ){ goto $label$59 }
	if ( (CALL $75($0, *($13 + [72])) == 0) ){ goto $label$59 }
	*($13 + [16]) = ($13 + [24])
	CALL eosio_assert([1], [352])
	CALL $76($8, $4, (int_64)0, ($13 + [16]))
	
.LABEL $label$59
	if ( (CALL $75($0, *($13 + [72])) == 0) ){ goto $label$53 }
	*($13 + [16]) = $0
	CALL eosio_assert([1], [352])
	CALL $77($8, $4, (int_64)0, ($13 + [16]))
	$8 = *($13 + [60])
	if ( $8 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$56
	$10 = *($0)
	*($13 + [12]) = ($13 + [24])
	*($13 + [8]) = ($13 + [72])
	CALL $74(($13 + [16]), $8, $10, ($13 + [8]))
	
.LABEL $label$53
	$8 = *($13 + [60])
	if ( ($8 == 0) ){ goto $label$51 }
	
.LABEL $label$52
	*(($13 + [64])) = $8
	CALL $95($8)
	
.LABEL $label$51
	$8 = *($13 + [48])
	if ( ($8 == 0) ){ goto $label$60 }
	*(($13 + [52])) = $8
	CALL $95($8)
	
.LABEL $label$60
	*([0] + [4]) = ($13 + [80])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [224])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [224])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	float_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [112])
	*([0] + [4]) = $15
	*($15 + [88]) = $1
	CALL prints([1184])
	CALL require_auth($1)
	$5 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$1 }
	$11 = ($10 + [-24])
	$3 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)100) ){ goto $label$1 }
	$10 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$11 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$4 }
	$7 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$11), [288])
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL $35($11, CALL $fimport$4(*(($0 + [48])), *(($0 + [56])), (int_64)7235159551874301952, (int_64)100))
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$11), [288])
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($7 + [8]) != (int_64)0), [1200])
	$4 = ((float_64)(CASTING float_64)(uint_64 CALL current_time()) / (float_64)(float_64)1e6)
	*($15 + [80]) = $4
	$6 = *(($0 + [112]))
	$10 = *(($0 + [116]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$5 }
	$11 = ($10 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$6:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$5 }
	$10 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [88])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$3 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)$5), [288])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$11 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-8173745943120707584, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $38($5, $11)
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)$5), [288])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)*($3 + [20]) != (int_32)[0]), [1232])
	CALL eosio_assert(((float_64)(CASTING float_64)(uint_64 ((int_64)*($3 + [16]) + (int_64)*($0 + [8]))) < (float_64)$4), [1280])
	$1 = (int_64)0
	$12 = (int_64)59
	$11 = [416]
	$13 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$15 }
	$7 = *($11)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$7 = ($7 + [165])
	goto $label$13 
	
.LABEL $label$15
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$11
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$10 }
	$1 = *($0)
	*(($6 = (($15 + [16]) + [32]))) = [0]
	*($15 + [24]) = $1
	*($15 + [16]) = $13
	*($15 + [32]) = (int_64)-1
	$1 = (int_64)0
	*($15 + [40]) = (int_64)0
	$11 = CALL $69(($15 + [16]), (int_64)5459781, [1408])
	$14 = *($11 + [8])
	$12 = *($11)
	$10 = *($15 + [40])
	if ( ($10 == 0) ){ goto $label$16 }
	$9 = ($15 + [44])
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$18 }
	
.LOOP $label$19:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL $95($7)
	
.LABEL $label$20
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$19 }
	$11 = *(($15 + [40]))
	goto $label$17 
	
.LABEL $label$18
	$11 = $10
	
.LABEL $label$17
	*($9) = $10
	CALL $95($11)
	
.LABEL $label$16
	CALL eosio_assert(((int_64)$14 == (int_64)*(($0 + [32]))), [1312])
	CALL eosio_assert(((int_64)$12 > (int_64)*($0 + [24])), [1376])
	*($15 + [16]) = ($15 + [80])
	CALL eosio_assert([1], [352])
	CALL $67($5, $3, (int_64)0, ($15 + [16]))
	$14 = CALL current_time()
	*(($15 + [44])) = [0]
	*($6) = [0]
	*($15 + [28]) = [0]
	*($15 + [32]) = [0]
	*($15 + [36]) = [0]
	*($15 + [40]) = [0]
	*($15 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$14 / (uint_64)(int_64)1000000)) + [60])
	*($15 + [52]) = [0]
	*(($15 + [56])) = [0]
	*(($15 + [60])) = [0]
	*($15 + [64]) = [0]
	*(($15 + [68])) = [0]
	*(($15 + [72])) = [0]
	$10 = ($15 + [52])
	$8 = *($0)
	$12 = (int_64)59
	$11 = [400]
	$13 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$26 }
	$7 = *($11)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$7 = ($7 + [165])
	goto $label$24 
	
.LABEL $label$26
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$22
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$21 }
	*($15 + [8]) = $13
	*($15) = $8
	$1 = (int_64)0
	$12 = (int_64)59
	$11 = [1392]
	$13 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$32 }
	$7 = *($11)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$7 = ($7 + [165])
	goto $label$30 
	
.LABEL $label$32
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$28
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$27 }
	*($15 + [96]) = $13
	CALL $68($10, $15, $0, ($15 + [96]), ($15 + [88]))
	$1 = *($0)
	$14 = *($15 + [88])
	*(($15 + [36])) = [1]
	*($15 + [8]) = (int_64)0
	*($15) = $14
	CALL $49(($15 + [96]), ($15 + [16]))
	$11 = *($15 + [96])
	CALL send_deferred($15, $1, $11, (*($15 + [100]) - $11), [0])
	$11 = *($15 + [96])
	if ( ($11 == 0) ){ goto $label$33 }
	*($15 + [100]) = $11
	CALL $95($11)
	
.LABEL $label$33
	CALL $50(($15 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($15 + [112])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [128])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [224])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [224])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [224])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $69 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [288])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $70($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [288])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $94(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $94([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $44(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [848])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $95($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $95($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $95($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = (int_64)101
	*($0 + [8]) = *(*($1))
	$1 = *($2)
	CALL eosio_assert([1], [848])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $94(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $95($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $95($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	$3 = *($3)
	*($1 + [20]) = (*($1 + [20]) + [-1])
	*($1 + [16]) = (CASTING uint_32)(float_64 *($3))
	$4 = *($1)
	*($1 + [8]) = (*($1 + [8]) + [1])
	CALL eosio_assert([1], [160])
	$5 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [128])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [976])
	$6 = $8
	$3 = ($6 + [-64])
	*([0] + [4]) = $3
	*($7 + [4]) = $3
	*($7) = $3
	*($7 + [8]) = ($6 + [-6])
	CALL $61($7, $1)
	CALL db_update_i64(*($1 + [68]), $2, $3, [58])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([1168])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [21]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = (int_64)103
	*($0 + [8]) = (Rounds 0)(*(*($1)))
	$1 = *($2)
	CALL eosio_assert([1], [848])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [224])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [224])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [224])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [224])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [224])
	CALL memcpy(($1 + [20]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [224])
	CALL memcpy(($1 + [21]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [224])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [224])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [224])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [224])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [224])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $62 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [32]) = (int_64)0
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [128])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [128])
	return $0
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $94($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $103 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)100
	*($0 + [8]) = (int_64)1
	$1 = *($2)
	CALL eosio_assert([1], [848])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)103
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [848])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	*($1 + [8]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [976])
	CALL eosio_assert([1], [848])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1040])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $94([32])
	CALL $88($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $95($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	*($1 + [8]) = (int_64)1
	$4 = *($1)
	CALL eosio_assert([1], [976])
	CALL eosio_assert([1], [848])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1040])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $94([32])
	CALL $89($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $95($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [848])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [976])
	CALL eosio_assert([1], [848])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1040])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $94([32])
	CALL $83($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $95($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$3 = int_32(($7 - $6) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$3 }
	$5 = [268435455]
	$2 = ($2 - $6)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = int_32($2 >> [3])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $94(($5 << [4]))
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $99($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$7 = ($7 - $6)
	$3 = ($2 + ($3 << [4]))
	$4 = ($3 - $7)
	$1 = ($3 + ($1 << [4]))
	$5 = ($2 + ($5 << [4]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $6, $7)
	$6 = *($0)
	
.LABEL $label$7
	*($0) = $4
	*(($0 + [4])) = $1
	*(($0 + [8])) = $5
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $95($6)
	
.LABEL $label$8
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $94(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $95($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $95($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [16])
	$5 = $4
	*([0] + [4]) = $4
	$3 = CALL get_action($1, $2, [0], [0])
	CALL eosio_assert(((int_32)$3 > (int_32)[0]), [1552])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 == (int_32)CALL $fimport$9($1, $2, $4, $3)), [1584])
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*($5) = $4
	$1 = ($4 + $3)
	*($5 + [8]) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [224])
	CALL memcpy($0, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($1 - $3) > (uint_32)[7]), [224])
	CALL memcpy(($0 + [8]), $3, [8])
	*($5 + [4]) = ($4 + [16])
	CALL $79(CALL $78($5, ($0 + [16])), ($0 + [28]))
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1104])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $94([32])
	$6 = CALL $71($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $72(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $95($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [128])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [224])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [224])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	$3 = *($3)
	*($1 + [21]) = [0]
	*($1 + [20]) = (*($1 + [20]) + [1])
	*($1 + [12]) = (CASTING uint_32)(float_64 *($3))
	$4 = *($1)
	CALL eosio_assert([1], [976])
	*($5 + [72]) = ($5 + [58])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $61(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $5, [58])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	$4 = *($1)
	$5 = *($1 + [21])
	if ( ((int_32)$5 >= (int_32)(*(*($3) + [16]) + [-1])) ){ goto $label$1 }
	*(($1 + [21])) = ($5 + [1])
	*($1 + [20]) = (*($1 + [20]) + [1])
	
.LABEL $label$1
	CALL eosio_assert([1], [976])
	$3 = $6
	$6 = ($3 + [-64])
	*([0] + [4]) = $6
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($3 + [-6])
	CALL $61($7, $1)
	CALL db_update_i64(*($1 + [68]), $2, $6, [58])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1040])
	$4 = CALL $94([80])
	$6 = CALL $62($4)
	*($4 + [64]) = $1
	*($4) = *(*($3))
	*($4 + [12]) = (CASTING uint_32)(float_64 *(*($3 + [4])))
	*($4 + [16]) = [0]
	*($4 + [20]) = [2]
	*($4 + [21]) = [1]
	*($4 + [24]) = [0]
	*($4 + [8]) = [0]
	*($8 + [88]) = (($8 + [16]) + [58])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $61(($8 + [80]), $6)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)-8173745943120707584, $2, $5, ($8 + [16]), [58])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [80]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $64(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $95($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	*($1 + [24]) = *(*($3))
	$5 = *($3 + [4])
	*($1 + [32]) = *($5)
	*(($1 + [40])) = *(($5 + [8]))
	$4 = *($1)
	*($1 + [16]) = (CASTING uint_32)(float_64 *(*($3 + [8])))
	CALL eosio_assert([1], [976])
	*($6 + [72]) = ($6 + [58])
	*($6 + [68]) = $6
	*($6 + [64]) = $6
	CALL $61(($6 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $6, [58])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1040])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $94([32])
	CALL $65($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $95($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [912])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [976])
	CALL eosio_assert([1], [848])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [848])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1616])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $80($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [224])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [224])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1616])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $44($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [224])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [224])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [224])
	CALL memcpy(($0 + [16]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [224])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [224])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [224])
	CALL memcpy(($0 + [64]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [224])
	CALL memcpy(($0 + [72]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	if ( ((uint_64)$2 >= (uint_64)(int_64)9886) ){ goto $label$20 }
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)5
	CALL eosio_assert([1], [160])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$21 }
	goto $label$18 
	
.LABEL $label$20
	if ( ((uint_64)$2 >= (uint_64)(int_64)9986) ){ goto $label$17 }
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)50
	CALL eosio_assert([1], [160])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$24 }
	goto $label$15 
	
.LABEL $label$19
	$3 = [0]
	
.LABEL $label$18
	CALL eosio_assert($3, [128])
	return 
	
.LABEL $label$17
	if ( ((uint_64)$2 >= (uint_64)(int_64)9994) ){ goto $label$14 }
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)500
	CALL eosio_assert([1], [160])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$27 }
	goto $label$12 
	
.LABEL $label$16
	$3 = [0]
	
.LABEL $label$15
	CALL eosio_assert($3, [128])
	return 
	
.LABEL $label$14
	if ( ((uint_64)$2 >= (uint_64)(int_64)9998) ){ goto $label$11 }
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)5000
	CALL eosio_assert([1], [160])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	
.LOOP $label$32:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$32 }
	
.LABEL $label$31
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$30 }
	goto $label$9 
	
.LABEL $label$13
	$3 = [0]
	
.LABEL $label$12
	CALL eosio_assert($3, [128])
	return 
	
.LABEL $label$11
	if ( ((uint_64)$2 >= (uint_64)(int_64)10000) ){ goto $label$8 }
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)50000
	CALL eosio_assert([1], [160])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$33 }
	goto $label$6 
	
.LABEL $label$10
	$3 = [0]
	
.LABEL $label$9
	CALL eosio_assert($3, [128])
	return 
	
.LABEL $label$8
	if ( ((int_64)$2 != (int_64)10000) ){ goto $label$5 }
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)500000
	CALL eosio_assert([1], [160])
	$2 = (uint_64)(int_64)1397703936 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	
.LOOP $label$38:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$38 }
	
.LABEL $label$37
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$36 }
	goto $label$3 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [128])
	return 
	
.LABEL $label$5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [160])
	$2 = (uint_64)(int_64)1397703936 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	
.LOOP $label$41:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$41 }
	
.LABEL $label$40
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$39 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	
.LABEL $label$3
	CALL eosio_assert($3, [128])
	return 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [128])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = (*([0] + [4]) - [272])
	$10 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($4 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*(($10 + [88])) = (int_64)0
	*(($10 + [80])) = (int_64)0
	*((($10 + [48]) + [24])) = (int_64)0
	*($10 + [64]) = (int_64)0
	*($10 + [48]) = (int_64)0
	*($10 + [96]) = (int_64)0
	*($10 + [104]) = (int_64)0
	*(($10 + [112])) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$4 = ($10 + [64])
	$7 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	CALL eosio_assert($8, [128])
	*($10 + [120]) = [0]
	*($10 + [244]) = $6
	*($10 + [240]) = $6
	*($10 + [248]) = ($6 + $3)
	*($10 + [144]) = ($10 + [240])
	*($10 + [176]) = ($10 + [48])
	CALL $32(($10 + [176]), ($10 + [144]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($6)
	
.LABEL $label$9
	*(($1 = (($10 + [144]) + [24]))) = *(($4 + [24]))
	*(($6 = (($10 + [144]) + [16]))) = *(($4 + [16]))
	*($10 + [156]) = *(($4 + [12]))
	*($10 + [152]) = *(($4 + [8]))
	$7 = *($10 + [48])
	*($10 + [144]) = *($4)
	$5 = *(($10 + [96]))
	*(($4 = (($10 + [128]) + [8]))) = *(($10 + [112]))
	*($10 + [128]) = *($10 + [104])
	$8 = *(($10 + [120]))
	*((($10 + [176]) + [24])) = *($1)
	*((($10 + [176]) + [16])) = *($6)
	*((($10 + [208]) + [8])) = *($4)
	*($10 + [208]) = *($10 + [128])
	*($10 + [184]) = *($10 + [152])
	*($10 + [176]) = *($10 + [144])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$9 = *((*($1) + $9))
	
.LABEL $label$10
	*(($4 = (($10 + [240]) + [24]))) = *((($10 + [176]) + [24]))
	*(($6 = (($10 + [240]) + [16]))) = *((($10 + [176]) + [16]))
	*($10 + [248]) = *($10 + [184])
	*($10 + [240]) = *($10 + [176])
	*(($3 = (($10 + [224]) + [8]))) = *((($10 + [208]) + [8]))
	*($10 + [224]) = *($10 + [208])
	*((($10 + [16]) + [24])) = *($4)
	*((($10 + [16]) + [16])) = *($6)
	*($10 + [24]) = *($10 + [248])
	*($10 + [16]) = *($10 + [240])
	*(($10 + [8])) = *($3)
	*($10) = *($10 + [224])
	CALL void $1((int_32 $7), (int_64 ($10 + [16])), (int_32 $5), (int_64 $10), (int_32 $8), (int_32 $9))
	*([0] + [4]) = ($10 + [272])
	return [1]
}