(data (i32.const 8192) "got into transfer function quantity: %\00")
(data (i32.const 8231) "Must buy at least 1 ticket!\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8345) "if recovery\00")
(data (i32.const 8357) "arraysizeBefore: % \00")
(data (i32.const 8377) "arraysizeAfter: % \00")
(data (i32.const 8396) "lucky winning number: % \00")
(data (i32.const 8421) "new lucky winning number: % \00")
(data (i32.const 8450) "ongoing?: % \00")
(data (i32.const 8463) "EOS\00")
(data (i32.const 8467) "sending out the winner eos! winnereos: % \00")
(data (i32.const 8509) "____THE WINNER IS % \00")
(data (i32.const 8530) "still ongoing?: % \00")
(data (i32.const 8549) "TADA, WINNER!\00")
(data (i32.const 8563) "payback!\00")
(data (i32.const 8572) "if over 9\00")
(data (i32.const 8582) "lottery % erased!\00")
(data (i32.const 8600) "got into if statement, ongoing: %\00")
(data (i32.const 8634) "before emplace\00")
(data (i32.const 8649) "bonusdraw: %\00")
(data (i32.const 8662) "no bonus aka zero\00")
(data (i32.const 8680) "first bonus double tickets\00")
(data (i32.const 8707) "first bonus already claimed\00")
(data (i32.const 8735) "second bonus tripple tickets\00")
(data (i32.const 8764) "second bonus already claimed\00")
(data (i32.const 8793) "third bonus 10X tickets\00")
(data (i32.const 8817) "third bonus already claimed\00")
(data (i32.const 8845) "fourth bonus flush array array\00")
(data (i32.const 8876) "fourth bonus already claimed\00")
(data (i32.const 8905) "onerror\00")
(data (i32.const 8913) "eosio\00")
(data (i32.const 8919) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8983) "eosio.token\00")
(data (i32.const 8995) "transfer\00")
(data (i32.const 9004) "string is too long to be a valid symbol_code\00")
(data (i32.const 9049) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9102) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9151) "invalid symbol name\00")
(data (i32.const 9171) "write\00")
(data (i32.const 9177) "string is too long to be a valid name\00")
(data (i32.const 9215) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9282) "character is not in allowed character set for names\00")
(data (i32.const 9334) "-%lld.%s %s\00")
(data (i32.const 9346) "%lld.%s %s\00")
(data (i32.const 9357) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9408) "error reading iterator\00")
(data (i32.const 9431) "read\00")
(data (i32.const 9436) "get\00")
(data (i32.const 9440) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9492) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9546) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9594) "cannot pass end iterator to modify\00")
(data (i32.const 9629) "object passed to modify is not in multi_index\00")
(data (i32.const 9675) "cannot modify objects in table of another contract\00")
(data (i32.const 9726) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9785) "true\00")
(data (i32.const 9790) "false\00")
(data (i32.const 9796) "cannot pass end iterator to erase\00")
(data (i32.const 9830) "cannot increment end iterator\00")
(data (i32.const 9860) "object passed to erase is not in multi_index\00")
(data (i32.const 9905) "cannot erase objects in table of another contract\00")
(data (i32.const 9955) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10008) "cannot create objects in table of another contract\00")
(data (i32.const
(data (i32.const 19280) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "prints_l" (func $fimport$0 (param i32 i32)))
(import "env" "prints" (func $fimport$1 (param i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "printui" (func $fimport$7 (param i64)))
(import "env" "tapos_block_prefix" (func $fimport$8 (result i32)))
(import "env" "tapos_block_num" (func $fimport$9 (result i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$12 (result i64)))
(import "env" "send_deferred" (func $fimport$13 (param i32 i64 i32 i32 i32)))
(import "env" "printn" (func $fimport$14 (param i64)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "action_data_size" (func $fimport$16 (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$19))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$24 (param i32)))
(import "env" "db_store_i64" (func $fimport$25 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $37))
(export "_ZdlPv" (func $72))
(export "_Znwj" (func $70))
(export "_Znaj" (func $71))
(export "_ZdaPv" (func $73))
(export "_ZnwjSt11align_val_t" (func $74))
(export "_ZnajSt11align_val_t" (func $75))
(export "_ZdlPvSt11align_val_t" (func $76))
(export "_ZdaPvSt11align_val_t" (func $77))
(table $0 7 7 anyfunc)
(elem (i32.const 1) $1 $33 $36 $86 $88 $90)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19360))
(global $global$2 i32 (i32.const 19360))


void .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19268])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19076]
	$3 = (((int_32)$1 * (int_32)[12]) + [19076])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $95($1)
	
.LABEL $label$2
	*(CALL $83()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $95(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $98($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $95 (int_32 $0)
{
	return CALL $96([10884], $0)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $97($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8259])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10876]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10880])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10876]) = [1]
	$2 = ($2 << [16])
	*([0] + [10880]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10880])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10880]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10876]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10876]) = [1]
	$3 = ($3 << [16])
	*([0] + [10880]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10880])
	
.LABEL $label$10
	*([0] + [10880]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $87([6], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $83())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $94($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9177])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9282])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9215])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9282])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9431])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), *($0 + [4]))
	CALL $50(*($1), *($0 + [8]))
	CALL $50(*($1), *($0 + [12]))
	CALL $51(*($1), *($0 + [16]))
	CALL $52(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9431])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9431])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9431])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9431])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9431])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9431])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9171])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9171])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $44($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9171])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9171])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9171])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $79(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $79(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9431])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9431])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9431])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9431])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $68(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $98($2)
	
.LABEL $label$5
	CALL $30(($4 + [64]))
	$global$0 = ($4 + [80])
	return [1]
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9171])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9171])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9171])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $44(CALL $43($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9171])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9171])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9171])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9171])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9171])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9171])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9171])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9171])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $31($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $32(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $31($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9171])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9171])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $44(CALL $43($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$4 = *($1)
	$6 = ($1 + [36])
	$5 = ($1 + [32])
	CALL $57($5, *($6), *($1 + [8]), *(($1 + [12])))
	CALL $57($5, *($6), *($1 + [20]), *(($1 + [24])))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [9726])
	*(($6 = $3) + [24]) = [0]
	*($6 + [8]) = ($6 + [24])
	$7 = ($1 + [8])
	*($6 + [36]) = $7
	*($6 + [32]) = $1
	$8 = ($1 + [20])
	*($6 + [40]) = $8
	*($6 + [44]) = $5
	$9 = ($1 + [44])
	*($6 + [48]) = $9
	$10 = ($1 + [56])
	*($6 + [52]) = $10
	$11 = ($1 + [72])
	*($6 + [56]) = $11
	$12 = ($1 + [80])
	*($6 + [60]) = $12
	$13 = ($1 + [88])
	*($6 + [64]) = $13
	$14 = ($1 + [96])
	*($6 + [68]) = $14
	$15 = ($1 + [104])
	*($6 + [72]) = $15
	$16 = ($1 + [112])
	*($6 + [76]) = $16
	CALL $58(($6 + [32]), ($6 + [8]))
	$17 = *($6 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$3 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($17 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($3 + $17)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = $7
	*($6 + [40]) = $8
	*($6 + [44]) = $5
	*($6 + [48]) = $9
	*($6 + [52]) = $10
	*($6 + [56]) = $11
	*($6 + [60]) = $12
	*($6 + [64]) = $13
	*($6 + [68]) = $14
	*($6 + [72]) = $15
	*($6 + [76]) = $16
	*($6 + [32]) = $1
	CALL $59(($6 + [32]), ($6 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $3, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [80])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$6 = ($1 + [32])
	$3 = *(*($3))
	$7 = *($1 + [32])
	if ( ((uint_32)int_32((*(($1 + [36])) - $7) >> [3]) <= (uint_32)$3) ){ goto $label$2 }
	$8 = *($1)
	*($1 + [112]) = [0]
	*($1 + [72]) = *(($7 + ($3 << [3])))
	CALL eosio_assert([1], [9726])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$7 = ($1 + [8])
	*($5 + [36]) = $7
	*($5 + [32]) = $1
	$9 = ($1 + [20])
	*($5 + [40]) = $9
	*($5 + [44]) = $6
	$10 = ($1 + [44])
	*($5 + [48]) = $10
	$11 = ($1 + [56])
	*($5 + [52]) = $11
	$12 = ($1 + [72])
	*($5 + [56]) = $12
	$13 = ($1 + [80])
	*($5 + [60]) = $13
	$14 = ($1 + [88])
	*($5 + [64]) = $14
	$15 = ($1 + [96])
	*($5 + [68]) = $15
	$16 = ($1 + [104])
	*($5 + [72]) = $16
	$17 = ($1 + [112])
	*($5 + [76]) = $17
	CALL $58(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $95($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [40]) = $9
	*($5 + [44]) = $6
	*($5 + [48]) = $10
	*($5 + [52]) = $11
	*($5 + [56]) = $12
	*($5 + [60]) = $13
	*($5 + [64]) = $14
	*($5 + [68]) = $15
	*($5 + [72]) = $16
	*($5 + [76]) = $17
	*($5 + [32]) = $1
	CALL $59(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	CALL $98($4)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $82($6)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

int_32 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [120]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9546])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-8272109760875069440)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9492])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9492])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $3(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9860])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9905])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9955])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL $12(($3 + [56]), *(($3 + [60])))
	$8 = *($3 + [44])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($3 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$8 = *($3 + [20])
	if ( ($8 == 0) ){ goto $label$12 }
	*(($3 + [24])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$12
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $12(($5 + [56]), *(($5 + [60])))
	$8 = *($5 + [44])
	if ( ($8 == 0) ){ goto $label$16 }
	*(($5 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	$8 = *($5 + [32])
	if ( ($8 == 0) ){ goto $label$17 }
	*(($5 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$17
	$8 = *($5 + [20])
	if ( ($8 == 0) ){ goto $label$18 }
	*(($5 + [24])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$18
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$19 }
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$19
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$14 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [120]))
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [9334] ? [9346] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $91($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $92($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $78($0)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9408])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $95($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [60 align=4]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [56]) = ($5 + [60])
	*($5 + [80]) = CALL current_time()
	$6 = CALL current_time()
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)1000
	*($5 + [112]) = [0]
	*($5 + [116]) = $0
	*($5 + [88]) = ((int_64)$6 + (int_64)300000000)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [20])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [44])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [72])
	*($3 + [60]) = ($5 + [80])
	*($3 + [64]) = ($5 + [88])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [104])
	*($3 + [76]) = ($5 + [112])
	CALL $49(($3 + [32]), ($3 + [24]))
	*($5 + [120]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $11(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $98($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $12(($1 + [56]), *(($1 + [60])))
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$13 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$5 = ($global$0 - [304])
	$global$0 = $5
	*(($6 = (($5 + [264]) + [8]))) = *(($3 + [8]))
	*($5 + [280]) = $1
	*($5 + [264]) = *($3)
	*((($5 + [24]) + [8])) = *($6)
	*($5 + [24]) = *($5 + [264])
	$6 = [8192]
	$7 = *([8192])
	if ( ($7 == 0) ){ goto $label$4 }
	
.LOOP $label$5:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$3 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_64)$1 != (int_64)*($0)) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $2(($5 + [224]), ($5 + [24]))
	$7 = *($5 + [224])
	$8 = ($7 & [1])
	CALL prints_l(( *($5 + [232]) ? (($5 + [224]) | [1]) : $8 ), ( *($5 + [228]) ? uint_32($7 >> [1]) : $8 ))
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($5 + [232])))
	
.LABEL $label$6
	CALL prints(($6 + [1]))
	if ( ((int_64)*($5 + [280]) == (int_64)*($0)) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($3) > (int_64)999), [8231])
	*(($5 + [256])) = [0]
	*($5 + [240]) = (int_64)-1
	$9 = (int_64)0
	*($5 + [248]) = (int_64)0
	$1 = *($0)
	*($5 + [224]) = $1
	*($5 + [232]) = $1
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL $3(($5 + [224]), $6)
	*($5 + [28]) = [0]
	*($5 + [24]) = ($5 + [224])
	$1 = *(*(CALL $4(($5 + [24])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*(($6 = ($5 + [240]))) = $9
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [9440])
	$1 = ((int_64)*($6) + (int_64)-1)
	$7 = *(($5 + [252]))
	$10 = *(($5 + [248]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$29 }
	
.LOOP $label$31:
	$6 = ($7 + [-24])
	$8 = *($6)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$30 }
	$7 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$29 }
	CALL eosio_assert(((int_32)*(($8 + [116])) == (int_32)($5 + [224])), [9357])
	if ( ((uint_64)*($8 + [88]) > (uint_64)CALL current_time()) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$29
	$8 = [0]
	$6 = CALL db_find_i64(*($5 + [224]), *(($5 + [232])), (int_64)-8272109760875069440, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$32 }
	$8 = CALL $3(($5 + [224]), $6)
	CALL eosio_assert(((int_32)*($8 + [116]) == (int_32)($5 + [224])), [9357])
	
.LABEL $label$32
	if ( ((uint_64)*($8 + [88]) > (uint_64)CALL current_time()) ){ goto $label$27 }
	
.LABEL $label$28
	if ( (*($8 + [112]) == 0) ){ goto $label$27 }
	CALL $85([8345], [0])
	*(($5 + [208])) = [0]
	*($5 + [192]) = (int_64)-1
	$9 = (int_64)0
	*($5 + [200]) = (int_64)0
	$1 = *($0)
	*($5 + [176]) = $1
	*($5 + [184]) = $1
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$33 }
	CALL $3(($5 + [176]), $6)
	*($5 + [28]) = [0]
	*($5 + [24]) = ($5 + [176])
	$1 = *(*(CALL $4(($5 + [24])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$33
	*(($6 = ($5 + [192]))) = $9
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [9440])
	$1 = ((int_64)*($6) + (int_64)-1)
	$7 = *(($5 + [204]))
	$10 = *(($5 + [200]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$25 }
	
.LOOP $label$34:
	$6 = ($7 + [-24])
	$8 = *($6)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$26 }
	$7 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$34 }
	goto $label$25 
	
.LABEL $label$27
	$6 = ($5 + [240])
	$1 = *($6)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$35 }
	$1 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($5 + [224]), *(($5 + [232])), (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$36 }
	CALL $3(($5 + [224]), $7)
	*($5 + [28]) = [0]
	*($5 + [24]) = ($5 + [224])
	$1 = *(*(CALL $4(($5 + [24])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$36
	*(($5 + [240])) = $1
	
.LABEL $label$35
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [9440])
	$7 = *($8 + [112])
	$1 = *($6)
	if ( ((int_64)$1 != (int_64)10) ){ goto $label$38 }
	if ( (($7 & [255]) == 0) ){ goto $label$37 }
	$1 = (int_64)10
	goto $label$15 
	
.LABEL $label$38
	if ( ($7 & [255]) ){ goto $label$18 }
	$6 = [8600]
	$7 = *([8600])
	if ( ($7 == 0) ){ goto $label$19 }
	
.LOOP $label$39:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$20 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$39 }
	goto $label$19 
	
.LABEL $label$37
	CALL $85([8572], [0])
	$6 = CALL db_lowerbound_i64(*($5 + [224]), *((($5 + [224]) + [8])), (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$40 }
	$7 = CALL $3(($5 + [224]), $6)
	$9 = (CASTING uint_64)(uint_32 ($5 + [224]))
	
.LOOP $label$41:
	CALL eosio_assert([1], [9796])
	CALL eosio_assert([1], [9830])
	$6 = [0]
	$8 = CALL db_next_i64(*($7 + [120]), ($5 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$42 }
	$6 = CALL $3(($5 + [224]), $8)
	
.LABEL $label$42
	CALL $5(($5 + [224]), $7)
	$1 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)32) | (int_64)$9)
	*($5 + [16]) = $1
	*($5 + [88]) = $1
	*($5) = ($5 + [16])
	CALL $85([8582], $5)
	$7 = $6
	if ( $6 ){ goto $label$41 }
	
.LABEL $label$40
	*($5 + [136]) = (int_64)3617214756542218240
	$1 = *($0)
	*($5 + [128]) = $1
	*((($5 + [288]) + [8])) = [0]
	*($5 + [288]) = (int_64)0
	$6 = CALL $92([8563])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$23 }
	*($5 + [288]) = ($6 << [1])
	$7 = (($5 + [288]) | [1])
	if ( $6 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$26
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$25 }
	CALL eosio_assert(((int_32)*(($8 + [116])) == (int_32)($5 + [176])), [9357])
	goto $label$24 
	
.LABEL $label$25
	$8 = [0]
	$6 = CALL db_find_i64(*($5 + [176]), *(($5 + [184])), (int_64)-8272109760875069440, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$24 }
	$8 = CALL $3(($5 + [176]), $6)
	CALL eosio_assert(((int_32)*($8 + [116]) == (int_32)($5 + [176])), [9357])
	
.LABEL $label$24
	$10 = int_32((*(($8 + [36])) - *($8 + [32])) >> [3])
	$6 = [8357]
	$7 = *([8357])
	if ( ($7 == 0) ){ goto $label$43 }
	
.LOOP $label$45:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$44 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	CALL printui((CASTING uint_64)(uint_32 $10))
	CALL prints(($6 + [1]))
	
.LABEL $label$43
	$1 = *($0)
	$10 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($10, [9594])
	CALL $6(($5 + [176]), $8, $1)
	$11 = int_32((*(($8 + [36])) - *(($8 + [32]))) >> [3])
	$6 = [8377]
	$7 = *([8377])
	if ( ($7 == 0) ){ goto $label$46 }
	
.LOOP $label$48:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$47 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	CALL printui((CASTING uint_64)(uint_32 $11))
	CALL prints(($6 + [1]))
	
.LABEL $label$46
	$6 = ($5 + [192])
	$1 = *($6)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$49 }
	$1 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($5 + [176]), *(($5 + [184])), (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$50 }
	CALL $3(($5 + [176]), $7)
	*($5 + [28]) = [0]
	*($5 + [24]) = ($5 + [176])
	$1 = *(*(CALL $4(($5 + [24])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$50
	*(($5 + [192])) = $1
	
.LABEL $label$49
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [9440])
	$1 = *($6)
	$6 = *(($8 + [32]))
	$7 = *(($8 + [36]))
	$11 = CALL tapos_block_prefix()
	$12 = CALL tapos_block_num()
	$1 = (CASTING uint_64)(uint_32 int_32(($7 - $6) >> [3]))
	$1 = ((int_64)((uint_64)((int_64))(((int_64)((int_64)((int_64)$1 << (int_64)1) + (int_64)$1) + (int_64)-2) - CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$12 * (int_32)$11))) % (uint_64)$1) + (int_64)1
	*($5 + [168]) = $1)
	$6 = [8396]
	$7 = *([8396])
	if ( ($7 == 0) ){ goto $label$54 }
	
.LOOP $label$55:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$53 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$55 }
	
.LABEL $label$54
	if ( ((int_64)*($5 + [168]) != (int_64)1) ){ goto $label$51 }
	goto $label$52 
	
.LABEL $label$53
	CALL printui($1)
	CALL prints(($6 + [1]))
	if ( ((int_64)*($5 + [168]) != (int_64)1) ){ goto $label$51 }
	
.LABEL $label$52
	*($5 + [168]) = (int_64)0
	$6 = [8421]
	$7 = *([8421])
	if ( ($7 == 0) ){ goto $label$51 }
	
.LOOP $label$57:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$56 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$57 }
	goto $label$51 
	
.LABEL $label$56
	CALL printui((int_64)0)
	CALL prints(($6 + [1]))
	
.LABEL $label$51
	$11 = *($8 + [112])
	$6 = [8450]
	$7 = *([8450])
	if ( ($7 == 0) ){ goto $label$58 }
	
.LOOP $label$60:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$59 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$59
	CALL prints(( [9785] ? [9790] : ($11 & [255]) ))
	CALL prints(($6 + [1]))
	
.LABEL $label$58
	$1 = *($0)
	*($5 + [24]) = ($5 + [168])
	CALL eosio_assert($10, [9594])
	CALL $7(($5 + [176]), $8, $1, ($5 + [24]))
	$13 = *($8 + [96])
	$6 = CALL $92([8463])
	if ( ($6 <= [8]) ){ goto $label$62 }
	CALL eosio_assert([0], [9004])
	goto $label$61 
	
.LABEL $label$62
	if ( ($6 == 0) ){ goto $label$17 }
	
.LABEL $label$61
	$9 = (int_64)0
	
.LOOP $label$63:
	$7 = *(($6 + [8462]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$64 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$64
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$63 }
	goto $label$11 
	
.LABEL $label$23
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [288]) = ($8 | [1])
	*($5 + [296]) = $7
	*($5 + [292]) = $6
	
.LABEL $label$22
	CALL memcpy($7, [8563], $6)
	
.LABEL $label$21
	*(($7 + $6)) = [0]
	*(($5 + [48])) = *(($3 + [8]))
	$6 = (($5 + [288]) + [8])
	*(($5 + [64])) = *($6)
	*($6) = [0]
	*($5 + [24]) = $1
	*($5 + [32]) = *($5 + [280])
	*($5 + [40]) = *($3)
	*($5 + [56]) = *($5 + [288])
	*($5 + [288]) = (int_64)0
	$6 = CALL $8(($5 + [176]), ($5 + [128]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($5 + [24]))
	CALL $9(($5 + [112]), $6)
	$7 = *($5 + [112])
	CALL send_inline($7, (*($5 + [116]) - $7))
	$7 = *($5 + [112])
	if ( ($7 == 0) ){ goto $label$65 }
	*($5 + [116]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$65
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$66 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$66
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$67 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$67
	if ( ((*(($5 + [56])) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$68
	if ( ((*($5 + [288]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [296])))
	goto $label$10 
	
.LABEL $label$20
	CALL prints([9790])
	CALL prints(($6 + [1]))
	
.LABEL $label$19
	CALL prints([8634])
	$1 = *($0)
	*($5 + [288]) = ($5 + [224])
	*($5 + [176]) = $1
	CALL eosio_assert(((int_64)*($5 + [224]) == (int_64)CALL $fimport$12()), [10008])
	*($5 + [28]) = ($5 + [288])
	*($5 + [24]) = ($5 + [224])
	*($5 + [32]) = ($5 + [176])
	*(($6 = CALL _Znwj([128])) + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [60 align=4]) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [56]) = ($6 + [60])
	*($6 + [80]) = CALL current_time()
	$1 = CALL current_time()
	*($6 + [96]) = (int_64)0
	*($6 + [104]) = (int_64)1000
	*($6 + [112]) = [0]
	*($6 + [88]) = ((int_64)$1 + (int_64)300000000)
	*($6 + [116]) = ($5 + [224])
	CALL $10(($5 + [24]), $6)
	*($5 + [128]) = $6
	$1 = *($6)
	*($5 + [24]) = $1
	$8 = *($6 + [120])
	*($5 + [112]) = $8
	$10 = ($5 + [252])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($5 + [256]))) ){ goto $label$71 }
	*($7 + [8]) = $1
	*($7 + [16]) = $8
	*($5 + [128]) = [0]
	*($7) = $6
	*($10) = ($7 + [24])
	$6 = *($5 + [128])
	$7 = [0]
	*($5 + [128]) = [0]
	if ( $6 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	CALL $11(($5 + [248]), ($5 + [128]), ($5 + [24]), ($5 + [112]))
	$6 = *($5 + [128])
	$7 = [0]
	*($5 + [128]) = [0]
	if ( ($6 == 0) ){ goto $label$69 }
	
.LABEL $label$70
	CALL $12(($6 + [56]), *(($6 + [60])))
	$8 = *($6 + [44])
	if ( ($8 == 0) ){ goto $label$72 }
	*(($6 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$72
	$8 = *($6 + [32])
	if ( ($8 == 0) ){ goto $label$73 }
	*(($6 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$73
	$8 = *($6 + [20])
	if ( ($8 == 0) ){ goto $label$74 }
	*(($6 + [24])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$74
	$8 = *($6 + [8])
	if ( ($8 == 0) ){ goto $label$75 }
	*(($6 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$75
	CALL _ZdlPv($6)
	
.LABEL $label$69
	$1 = CALL current_time()
	*(($5 + [52])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*(($5 + [76])) = (int_64)0
	*($5 + [36]) = $7
	*($5 + [40]) = $7
	*($5 + [44 align=4]) = (int_64)0
	*($5 + [60 align=4]) = (int_64)0
	*($5 + [24]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*($5 + [184]) = (int_64)3617214756542218240
	*($5 + [176]) = *($0)
	*($5 + [128]) = (int_64)6112258149673041920
	CALL $13(($5 + [60]), ($5 + [176]), $0, ($5 + [128]), ($5 + [112]))
	*($5 + [44]) = [60]
	$1 = CALL current_time()
	*($5 + [184]) = (int_64)0
	*($5 + [176]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$1 = *($0)
	CALL $14(($5 + [128]), ($5 + [24]))
	$6 = *($5 + [128])
	CALL send_deferred(($5 + [176]), $1, $6, (*($5 + [132]) - $6), $7)
	$6 = *($5 + [128])
	if ( ($6 == 0) ){ goto $label$76 }
	*($5 + [132]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$76
	CALL $15(($5 + [24]))
	$1 = *(($5 + [240]))
	
.LABEL $label$18
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$15 }
	$1 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($5 + [224]), *(($5 + [232])), (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$16 }
	CALL $3(($5 + [224]), $6)
	*($5 + [28]) = [0]
	*($5 + [24]) = ($5 + [224])
	$1 = *(*(CALL $4(($5 + [24])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	*(($5 + [240])) = $1
	goto $label$15 
	
.LABEL $label$17
	$9 = (int_64)0
	goto $label$11 
	
.LABEL $label$16
	*(($5 + [240])) = (int_64)0
	
.LABEL $label$15
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [9440])
	$1 = ((int_64)*(($5 + [240])) + (int_64)-1)
	$7 = *(($5 + [252]))
	$10 = *(($5 + [248]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$78 }
	
.LOOP $label$80:
	$6 = ($7 + [-24])
	$8 = *($6)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$79 }
	$7 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$80 }
	goto $label$78 
	
.LABEL $label$79
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$78 }
	CALL eosio_assert(((int_32)*(($8 + [116])) == (int_32)($5 + [224])), [9357])
	$1 = *($3)
	if ( ((int_64)$1 > (int_64)9999) ){ goto $label$77 }
	goto $label$13 
	
.LABEL $label$78
	$8 = [0]
	$6 = CALL db_find_i64(*($5 + [224]), *(($5 + [232])), (int_64)-8272109760875069440, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$81 }
	$8 = CALL $3(($5 + [224]), $6)
	CALL eosio_assert(((int_32)*($8 + [116]) == (int_32)($5 + [224])), [9357])
	
.LABEL $label$81
	$1 = *($3)
	if ( ((int_64)$1 <= (int_64)9999) ){ goto $label$13 }
	
.LABEL $label$77
	$6 = ($5 + [240])
	$1 = *($6)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$82 }
	$1 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($5 + [224]), *(($5 + [232])), (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$83 }
	CALL $3(($5 + [224]), $7)
	*($5 + [28]) = [0]
	*($5 + [24]) = ($5 + [224])
	$1 = *(*(CALL $4(($5 + [24])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$83
	*(($5 + [240])) = $1
	
.LABEL $label$82
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [9440])
	$1 = *($6)
	$6 = *(($8 + [48]))
	$7 = *($8 + [44])
	$10 = CALL tapos_block_prefix()
	$11 = CALL tapos_block_num()
	$1 = (CASTING uint_64)(uint_32 int_32(($6 - $7) >> [3]))
	$9 = ((int_64)((uint_64)((int_64))(((int_64)((int_64)((int_64)$1 << (int_64)1) + (int_64)$1) + (int_64)-2) - CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$11 * (int_32)$10))) % (uint_64)$1) + (int_64)1)
	$1 = *($3)
	goto $label$12 
	
.LABEL $label$14
	CALL $78(($5 + [288]))
	
.LABEL $label$13
	$9 = (int_64)0
	
.LABEL $label$12
	*($5 + [176]) = ((uint_64)$1 / (uint_64)*($8 + [104]))
	$6 = [8649]
	$7 = *([8649])
	if ( ($7 == 0) ){ goto $label$84 }
	
.LOOP $label$86:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$85 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$86 }
	goto $label$84 
	
.LABEL $label$85
	CALL printui($9)
	CALL prints(($6 + [1]))
	
.LABEL $label$84
	$15 = ($8 + [44])
	$11 = (CASTING uint_32)(uint_64 $9)
	$6 = *($8 + [44])
	$7 = int_32((*(($8 + [48])) - $6) >> [3])
	if ( ((uint_32)$7 <= (uint_32)$11) ){ goto $label$87 }
	if ( ((int_64)*(($6 + ($11 << [3]))) != (int_64)0) ){ goto $label$88 }
	CALL prints([8662])
	$1 = *($0)
	*($5 + [24]) = $3
	*($5 + [28]) = ($5 + [176])
	*($5 + [32]) = ($5 + [280])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9594])
	CALL $16(($5 + [224]), $8, $1, ($5 + [24]))
	$6 = *(($8 + [44]))
	$7 = int_32((*(($8 + [48])) - $6) >> [3])
	
.LABEL $label$88
	if ( ((uint_32)$7 <= (uint_32)$11) ){ goto $label$87 }
	if ( ((int_64)*(($6 + ($11 << [3]))) != (int_64)1) ){ goto $label$89 }
	CALL prints([8680])
	$12 = ($8 + [60])
	$6 = *($12)
	if ( ($6 == 0) ){ goto $label$90 }
	$7 = $12
	
.LOOP $label$91:
	$10 = (int_64)(*($6 + [16]) == 0)
	$7 = ( $7 ? $6 : $10 )
	$6 = *(($6 + ($10 << [2])))
	if ( $6 ){ goto $label$91 }
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$90 }
	if ( ((uint_64)*($7 + [16]) > (uint_64)(int_64)1) ){ goto $label$90 }
	CALL prints([8707])
	$1 = *($0)
	*($5 + [24]) = $3
	*($5 + [28]) = ($5 + [176])
	*($5 + [32]) = ($5 + [280])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9594])
	CALL $17(($5 + [224]), $8, $1, ($5 + [24]))
	goto $label$89 
	
.LABEL $label$90
	$1 = *($0)
	*($5 + [24]) = ($5 + [280])
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [9594])
	CALL $18(($5 + [224]), $8, $1, ($5 + [24]))
	$1 = *($0)
	*($5 + [24]) = $3
	*($5 + [28]) = ($5 + [176])
	*($5 + [32]) = ($5 + [280])
	CALL eosio_assert($6, [9594])
	CALL $19(($5 + [224]), $8, $1, ($5 + [24]))
	
.LABEL $label$89
	$6 = *(($8 + [44]))
	if ( ((uint_32)int_32((*(($8 + [48])) - $6) >> [3]) <= (uint_32)$11) ){ goto $label$87 }
	if ( ((int_64)*(($6 + ($11 << [3]))) != (int_64)2) ){ goto $label$92 }
	CALL prints([8735])
	$12 = ($8 + [60])
	$6 = *($12)
	if ( ($6 == 0) ){ goto $label$93 }
	$7 = $12
	
.LOOP $label$94:
	$10 = (uint_64)(*($6 + [16]) <= (int_64)2)
	$7 = ( $7 ? $6 : $10 )
	$6 = *(($6 + ($10 << [2])))
	if ( $6 ){ goto $label$94 }
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$93 }
	if ( ((uint_64)*($7 + [16]) > (uint_64)(int_64)2) ){ goto $label$93 }
	CALL prints([8764])
	$1 = *($0)
	*($5 + [24]) = $3
	*($5 + [28]) = ($5 + [176])
	*($5 + [32]) = ($5 + [280])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9594])
	CALL $20(($5 + [224]), $8, $1, ($5 + [24]))
	goto $label$92 
	
.LABEL $label$93
	$1 = *($0)
	*($5 + [24]) = ($5 + [280])
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [9594])
	CALL $21(($5 + [224]), $8, $1, ($5 + [24]))
	$1 = *($0)
	*($5 + [24]) = $3
	*($5 + [28]) = ($5 + [176])
	*($5 + [32]) = ($5 + [280])
	CALL eosio_assert($6, [9594])
	CALL $22(($5 + [224]), $8, $1, ($5 + [24]))
	
.LABEL $label$92
	$6 = *(($8 + [44]))
	if ( ((uint_32)int_32((*(($8 + [48])) - $6) >> [3]) <= (uint_32)$11) ){ goto $label$87 }
	if ( ((int_64)*(($6 + ($11 << [3]))) != (int_64)3) ){ goto $label$95 }
	CALL prints([8793])
	$12 = ($8 + [60])
	$6 = *($12)
	if ( ($6 == 0) ){ goto $label$96 }
	$7 = $12
	
.LOOP $label$97:
	$10 = (uint_64)(*($6 + [16]) <= (int_64)3)
	$7 = ( $7 ? $6 : $10 )
	$6 = *(($6 + ($10 << [2])))
	if ( $6 ){ goto $label$97 }
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$96 }
	if ( ((uint_64)*($7 + [16]) > (uint_64)(int_64)3) ){ goto $label$96 }
	CALL prints([8817])
	$1 = *($0)
	*($5 + [24]) = $3
	*($5 + [28]) = ($5 + [176])
	*($5 + [32]) = ($5 + [280])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9594])
	CALL $23(($5 + [224]), $8, $1, ($5 + [24]))
	goto $label$95 
	
.LABEL $label$96
	$1 = *($0)
	*($5 + [24]) = ($5 + [280])
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [9594])
	CALL $24(($5 + [224]), $8, $1, ($5 + [24]))
	$1 = *($0)
	*($5 + [24]) = $3
	*($5 + [28]) = ($5 + [176])
	*($5 + [32]) = ($5 + [280])
	CALL eosio_assert($6, [9594])
	CALL $25(($5 + [224]), $8, $1, ($5 + [24]))
	
.LABEL $label$95
	$6 = *(($8 + [44]))
	if ( ((uint_32)int_32((*(($8 + [48])) - $6) >> [3]) <= (uint_32)$11) ){ goto $label$87 }
	if ( ((int_64)*(($6 + ($11 << [3]))) != (int_64)4) ){ goto $label$10 }
	CALL prints([8845])
	$11 = ($8 + [60])
	$6 = *($11)
	if ( ($6 == 0) ){ goto $label$98 }
	$7 = $11
	
.LOOP $label$99:
	$10 = (uint_64)(*($6 + [16]) <= (int_64)4)
	$7 = ( $7 ? $6 : $10 )
	$6 = *(($6 + ($10 << [2])))
	if ( $6 ){ goto $label$99 }
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$98 }
	if ( ((uint_64)*($7 + [16]) > (uint_64)(int_64)4) ){ goto $label$98 }
	CALL prints([8876])
	$1 = *($0)
	*($5 + [24]) = $3
	*($5 + [28]) = ($5 + [176])
	*($5 + [32]) = ($5 + [280])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9594])
	CALL $26(($5 + [224]), $8, $1, ($5 + [24]))
	goto $label$10 
	
.LABEL $label$98
	$1 = *($0)
	*($5 + [24]) = ($5 + [280])
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [9594])
	CALL $27(($5 + [224]), $8, $1, ($5 + [24]))
	$1 = *($0)
	*($5 + [24]) = $3
	*($5 + [28]) = ($5 + [176])
	*($5 + [32]) = ($5 + [280])
	CALL eosio_assert($6, [9594])
	CALL $28(($5 + [224]), $8, $1, ($5 + [24]))
	*($5 + [128]) = (CASTING uint_64)(uint_32 int_32((*(($8 + [12])) - *($8 + [8])) >> [3]))
	*($5 + [112]) = (CASTING uint_64)(uint_32 int_32((*(($8 + [24])) - *($8 + [20])) >> [3]))
	$1 = *($0)
	*($5 + [28]) = ($5 + [280])
	*($5 + [24]) = ($5 + [128])
	*($5 + [32]) = ($5 + [112])
	CALL eosio_assert($6, [9594])
	CALL $29(($5 + [224]), $8, $1, ($5 + [24]))
	goto $label$10 
	
.LABEL $label$87
	CALL $82($15)
	
.LABEL $label$11
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9102])
	$1 = ((int_64)$9 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	$6 = [0]
	
.LOOP $label$102:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$101 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$103 }
	$1 = $9
	$7 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$103
	$1 = $9
	
.LOOP $label$104:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$101 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $7 ){ goto $label$104 }
	$7 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$101
	$7 = [0]
	
.LABEL $label$100
	CALL eosio_assert($7, [9151])
	*($5 + [32]) = $14
	*($5 + [24]) = $13
	$6 = [8467]
	$7 = *([8467])
	if ( ($7 == 0) ){ goto $label$105 }
	
.LOOP $label$107:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$106 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$107 }
	goto $label$105 
	
.LABEL $label$106
	CALL $2(($5 + [128]), ($5 + [24]))
	$7 = *($5 + [128])
	$10 = ($7 & [1])
	CALL prints_l(( *($5 + [136]) ? (($5 + [128]) | [1]) : $10 ), ( *($5 + [132]) ? uint_32($7 >> [1]) : $10 ))
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$108 }
	CALL _ZdlPv(*(($5 + [136])))
	
.LABEL $label$108
	CALL prints(($6 + [1]))
	
.LABEL $label$105
	$1 = *($8 + [72])
	$6 = [8509]
	$7 = *([8509])
	if ( ($7 == 0) ){ goto $label$109 }
	
.LOOP $label$111:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$110 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$111 }
	goto $label$109 
	
.LABEL $label$110
	CALL printn($1)
	CALL prints(($6 + [1]))
	
.LABEL $label$109
	$10 = *(($8 + [112]))
	$6 = [8530]
	$7 = *([8530])
	if ( ($7 == 0) ){ goto $label$112 }
	
.LOOP $label$114:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$113 }
	CALL prints_l($6, [1])
	$6 = ($6 + [1])
	$7 = *($6)
	if ( $7 ){ goto $label$114 }
	goto $label$112 
	
.LABEL $label$113
	CALL prints(( [9785] ? [9790] : ($10 & [255]) ))
	CALL prints(($6 + [1]))
	
.LABEL $label$112
	*($5 + [120]) = (int_64)3617214756542218240
	$1 = *($0)
	*($5 + [112]) = $1
	*(($5 + [104])) = [0]
	*($5 + [96]) = (int_64)0
	$6 = CALL $92([8549])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$117 }
	*($5 + [96]) = ($6 << [1])
	$7 = (($5 + [96]) | [1])
	if ( $6 ){ goto $label$116 }
	goto $label$115 
	
.LABEL $label$117
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($5 + [96]) = ($10 | [1])
	*($5 + [104]) = $7
	*($5 + [100]) = $6
	
.LABEL $label$116
	CALL memcpy($7, [8549], $6)
	
.LABEL $label$115
	*(($7 + $6)) = [0]
	$9 = *(($8 + [72]))
	*(($5 + [48])) = $14
	$6 = ($5 + [104])
	*(($5 + [64])) = *($6)
	*($6) = [0]
	*($5 + [24]) = $1
	$1 = *($5 + [96])
	*($5 + [96]) = (int_64)0
	*($5 + [40]) = $13
	*($5 + [56]) = $1
	*($5 + [32]) = $9
	$6 = CALL $8(($5 + [128]), ($5 + [112]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($5 + [24]))
	CALL $9(($5 + [288]), $6)
	$7 = *($5 + [288])
	CALL send_inline($7, (*($5 + [292]) - $7))
	$7 = *($5 + [288])
	if ( ($7 == 0) ){ goto $label$118 }
	*($5 + [292]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$118
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$119 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$119
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$120 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$120
	if ( ((*(($5 + [56])) & [1]) == 0) ){ goto $label$121 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$121
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$122 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$122
	*($5 + [120]) = (int_64)3617214756542218240
	$1 = *($0)
	*($5 + [112]) = $1
	*(($5 + [104])) = [0]
	*($5 + [96]) = (int_64)0
	$6 = CALL $92([8563])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$125 }
	*($5 + [96]) = ($6 << [1])
	$7 = (($5 + [96]) | [1])
	if ( $6 ){ goto $label$124 }
	goto $label$123 
	
.LABEL $label$125
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [96]) = ($8 | [1])
	*($5 + [104]) = $7
	*($5 + [100]) = $6
	
.LABEL $label$124
	CALL memcpy($7, [8563], $6)
	
.LABEL $label$123
	*(($7 + $6)) = [0]
	*(($5 + [48])) = *(($3 + [8]))
	$6 = (($5 + [96]) + [8])
	*(($5 + [64])) = *($6)
	*($6) = [0]
	*($5 + [24]) = $1
	*($5 + [32]) = *($5 + [280])
	*($5 + [40]) = *($3)
	*($5 + [56]) = *($5 + [96])
	*($5 + [96]) = (int_64)0
	$6 = CALL $8(($5 + [128]), ($5 + [112]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($5 + [24]))
	CALL $9(($5 + [288]), $6)
	$7 = *($5 + [288])
	CALL send_inline($7, (*($5 + [292]) - $7))
	$7 = *($5 + [288])
	if ( ($7 == 0) ){ goto $label$126 }
	*($5 + [292]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$126
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$127 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$127
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$128 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$128
	if ( ((*(($5 + [56])) & [1]) == 0) ){ goto $label$129 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$129
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$130 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$130
	CALL $30(($5 + [200]))
	
.LABEL $label$10
	CALL $30(($5 + [248]))
	$global$0 = ($5 + [304])
	return (unreachable)
	
.LABEL $label$9
	CALL $78(($5 + [96]))
	
.LABEL $label$8
	CALL $78(($5 + [96]))
	
.LABEL $label$1
	$global$0 = ($5 + [304])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $45($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $31($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $46($2, $1)
	CALL $48(CALL $47(CALL $47($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$5 = *(*($3))
	*($1 + [96]) = (int_64))(((int_64)*($1 + [96]) + (int_64)$5) - ((int_64)((int_64)$5 / (int_64)100) << (int_64)1))
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $67($6, *(($1 + [12])), *(*(($3 + [4]))), *(($3 + [8])))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9726])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$7 = ($1 + [20])
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [44])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [72])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	$13 = ($1 + [88])
	*($3 + [64]) = $13
	$14 = ($1 + [96])
	*($3 + [68]) = $14
	$15 = ($1 + [104])
	*($3 + [72]) = $15
	$16 = ($1 + [112])
	*($3 + [76]) = $16
	CALL $58(($3 + [32]), ($3 + [8]))
	$17 = *($3 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$4 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $17)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	*($3 + [76]) = $16
	*($3 + [32]) = $1
	CALL $59(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$5 = *(*($3))
	*($1 + [96]) = (int_64))(((int_64)*($1 + [96]) + (int_64)$5) - ((int_64)((int_64)$5 / (int_64)100) << (int_64)1))
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $67($6, *(($1 + [12])), *(*(($3 + [4]))), *(($3 + [8])))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9726])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$7 = ($1 + [20])
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [44])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [72])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	$13 = ($1 + [88])
	*($3 + [64]) = $13
	$14 = ($1 + [96])
	*($3 + [68]) = $14
	$15 = ($1 + [104])
	*($3 + [72]) = $15
	$16 = ($1 + [112])
	*($3 + [76]) = $16
	CALL $58(($3 + [32]), ($3 + [8]))
	$17 = *($3 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$4 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $17)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	*($3 + [76]) = $16
	*($3 + [32]) = $1
	CALL $59(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $3($5, $7)
	*($3 + [28]) = [0]
	*($3 + [24]) = $5
	$6 = *(*(CALL $4(($3 + [24])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [9440])
	*($1) = *(($5 + [16]))
	$8 = ($1 + [8])
	CALL $64($8, [0], [0])
	$9 = ($1 + [20])
	CALL $64($9, [0], [0])
	CALL memcpy(($3 + [24]), [10064], [800])
	$10 = ($1 + [44])
	CALL $65($10, ($3 + [24]), (($3 + [24]) + [800]))
	$11 = ($1 + [56])
	CALL $66($11, [0], [0])
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = CALL current_time()
	$6 = CALL current_time()
	*($1 + [96]) = (int_64)0
	*($1 + [104]) = (int_64)1000
	*($1 + [112]) = [1]
	*($1 + [88]) = ((int_64)$6 + (int_64)60000000)
	*($3 + [824]) = [0]
	*($3 + [8]) = ($3 + [824])
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	$12 = ($1 + [32])
	*($3 + [36]) = $12
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	$13 = ($1 + [72])
	*($3 + [48]) = $13
	$14 = ($1 + [80])
	*($3 + [52]) = $14
	$15 = ($1 + [88])
	*($3 + [56]) = $15
	$16 = ($1 + [96])
	*($3 + [60]) = $16
	$17 = ($1 + [104])
	*($3 + [64]) = $17
	$18 = ($1 + [112])
	*($3 + [68]) = $18
	CALL $58(($3 + [24]), ($3 + [8]))
	$7 = *($3 + [824])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$5 = CALL $95($7)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $7)
	*($3 + [824]) = ($3 + [8])
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $12
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	*($3 + [48]) = $13
	*($3 + [52]) = $14
	*($3 + [56]) = $15
	*($3 + [60]) = $16
	*($3 + [64]) = $17
	*($3 + [68]) = $18
	CALL $59(($3 + [24]), ($3 + [824]))
	$6 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($4 + [8]), (int_64)-8272109760875069440, *(*($0 + [8])), $6, $5, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $98($5)
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [832])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [832])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $56(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $12($0, *($1))
	CALL $12($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$6 = ($2 + [16])
	*($3) = $6
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $6
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($7 + [40])
	$2 = *($0)
	$11 = *(($0 + [4]))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $11)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($11 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$6 = ($8 + [-24])
	*($5) = *($6)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($6) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [60])
	$3 = *($8)
	if ( ($3 == 0) ){ goto $label$4 }
	$8 = ($1 + [60])
	$9 = *($3 + [16])
	if ( (uint_64)($9 <= (int_64)2) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = $8
	$11 = [3]
	goto $label$1 
	
.LABEL $label$3
	$11 = [16]
	goto $label$1 
	
.LABEL $label$2
	$11 = [2]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$34 
	
.LABEL $label$38
	$8 = $3
	$3 = $10
	$9 = *($3 + [16])
	if ( (uint_64)($9 <= (int_64)2) ){ goto $label$20 }
	$11 = [16]
	goto $label$5 
	
.LABEL $label$37
	$10 = *($3)
	if ( $10 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$36
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$15 }
	$11 = [15]
	goto $label$5 
	
.LABEL $label$35
	$8 = ($3 + [4])
	$10 = *($3 + [4])
	if ( ($10 == 0) ){ goto $label$18 }
	$11 = [0]
	goto $label$5 
	
.LABEL $label$34
	$3 = $8
	goto $label$19 
	
.LABEL $label$33
	$12 = ($1 + [56])
	$10 = *($8)
	if ( $10 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$32
	$12 = ($1 + [56])
	$8 = $3
	$10 = *($8)
	if ( $10 ){ goto $label$12 }
	$11 = [12]
	goto $label$5 
	
.LABEL $label$31
	*(($10 = CALL _Znwj([32]))) = (int_64)0
	*($10 + [8]) = $3
	*($8) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)1
	$3 = $10
	$13 = *(*($12))
	if ( ($13 == 0) ){ goto $label$6 }
	$11 = [13]
	goto $label$5 
	
.LABEL $label$30
	*($12) = $13
	$3 = *($8)
	$11 = [14]
	goto $label$5 
	
.LABEL $label$29
	CALL $55(*(($1 + [60])), $3)
	*(($3 = ($1 + [64]))) = (*($3) + [1])
	$11 = [4]
	goto $label$5 
	
.LABEL $label$28
	*(($10 + [24])) = *($6)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9726])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$10 = ($1 + [8])
	*($5 + [36]) = $10
	*($5 + [32]) = $1
	$6 = ($1 + [20])
	*($5 + [40]) = $6
	$13 = ($1 + [32])
	*($5 + [44]) = $13
	$14 = ($1 + [44])
	*($5 + [48]) = $14
	*($5 + [52]) = $12
	$15 = ($1 + [72])
	*($5 + [56]) = $15
	$16 = ($1 + [80])
	*($5 + [60]) = $16
	$17 = ($1 + [88])
	*($5 + [64]) = $17
	$18 = ($1 + [96])
	*($5 + [68]) = $18
	$19 = ($1 + [104])
	*($5 + [72]) = $19
	$20 = ($1 + [112])
	*($5 + [76]) = $20
	CALL $58(($5 + [32]), ($5 + [8]))
	$8 = *($5 + [24])
	if ( ($8 <= [513]) ){ goto $label$11 }
	$11 = [11]
	goto $label$5 
	
.LABEL $label$27
	$3 = CALL $95($8)
	goto $label$10 
	
.LABEL $label$26
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	$11 = [6]
	goto $label$5 
	
.LABEL $label$25
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $8)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $10
	*($5 + [40]) = $6
	*($5 + [44]) = $13
	*($5 + [48]) = $14
	*($5 + [52]) = $12
	*($5 + [56]) = $15
	*($5 + [60]) = $16
	*($5 + [64]) = $17
	*($5 + [68]) = $18
	*($5 + [72]) = $19
	*($5 + [76]) = $20
	*($5 + [32]) = $1
	CALL $59(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$9 }
	$11 = [7]
	goto $label$5 
	
.LABEL $label$24
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	$11 = [9]
	goto $label$5 
	
.LABEL $label$23
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$22
	CALL $98($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	$11 = [8]
	goto $label$5 
	
.LABEL $label$21
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$20
	$11 = [2]
	goto $label$5 
	
.LABEL $label$19
	$11 = [1]
	goto $label$5 
	
.LABEL $label$18
	$11 = [3]
	goto $label$5 
	
.LABEL $label$17
	$11 = [17]
	goto $label$5 
	
.LABEL $label$16
	$11 = [1]
	goto $label$5 
	
.LABEL $label$15
	$11 = [3]
	goto $label$5 
	
.LABEL $label$14
	$11 = [12]
	goto $label$5 
	
.LABEL $label$13
	$11 = [4]
	goto $label$5 
	
.LABEL $label$12
	$11 = [4]
	goto $label$5 
	
.LABEL $label$11
	$11 = [5]
	goto $label$5 
	
.LABEL $label$10
	$11 = [6]
	goto $label$5 
	
.LABEL $label$9
	$11 = [10]
	goto $label$5 
	
.LABEL $label$8
	$11 = [8]
	goto $label$5 
	
.LABEL $label$7
	$11 = [9]
	goto $label$5 
	
.LABEL $label$6
	$11 = [14]
	goto $label$5 
	$11
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$5 = *(*($3))
	*($1 + [96]) = (int_64))(((int_64)*($1 + [96]) + (int_64)$5) - ((int_64)((int_64)$5 / (int_64)100) << (int_64)1))
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $67($6, *(($1 + [12])), *(*($3 + [4])), *($3 + [8]))
	$7 = ($1 + [20])
	CALL $67($7, *(($1 + [24])), *(*($3 + [4])), *($3 + [8]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9726])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [44])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [72])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	$13 = ($1 + [88])
	*($3 + [64]) = $13
	$14 = ($1 + [96])
	*($3 + [68]) = $14
	$15 = ($1 + [104])
	*($3 + [72]) = $15
	$16 = ($1 + [112])
	*($3 + [76]) = $16
	CALL $58(($3 + [32]), ($3 + [8]))
	$17 = *($3 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$4 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $17)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	*($3 + [76]) = $16
	*($3 + [32]) = $1
	CALL $59(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = (*($2) + [8])
	*(($2 = *($1))) = $3
	$1 = *($1)
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$5 = ($4 - $1)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$2 }
	$3 = (($5 & [-8]) + $3)
	
.LABEL $label$2
	*($2) = $3
	$1 = *($1)
	$1 = *($0 + [8])
	$4 = *($1 + [4])
	$5 = ($4 - $1)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$4 }
	$3 = (($5 & [-8]) + $3)
	
.LABEL $label$4
	*($2) = $3
	$1 = *($1)
	$1 = *($0 + [12])
	$4 = *($1 + [4])
	$5 = ($4 - $1)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$6 }
	$3 = (($5 & [-8]) + $3)
	
.LABEL $label$6
	*($2) = $3
	$1 = *($1)
	$1 = *($0 + [16])
	$4 = *($1 + [4])
	$5 = ($4 - $1)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$8 }
	$3 = (($5 & [-8]) + $3)
	
.LABEL $label$8
	*($2) = $3
	$0 = *($0 + [20])
	$6 = *($0 + [8])
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$9 }
	*($2) = $3
	$5 = ($0 + [4])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = $1
	$0 = *($4 + [4])
	if ( ($0 == 0) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = $0
	$0 = *($1)
	if ( $0 ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$1 = *($4 + [8])
	if ( ((int_32)*($1) == (int_32)$4) ){ goto $label$12 }
	$4 = ($4 + [8])
	
.LOOP $label$15:
	$0 = *($4)
	$4 = ($0 + [8])
	$1 = *($0 + [8])
	if ( ((int_32)$0 != (int_32)*($1)) ){ goto $label$15 }
	
.LABEL $label$12
	$3 = ($3 + [16])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$11 }
	*($2) = $3
	
.LABEL $label$10
	*($2) = ($3 + [41])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9171])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $60(*($1), *($0 + [4]))
	CALL $60(*($1), *($0 + [8]))
	CALL $60(*($1), *($0 + [12]))
	CALL $61(*($1), *($0 + [16]))
	CALL $62(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9171])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9171])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9171])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9171])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9171])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$1 = *($1)
	*($2 + [15]) = *(*($0 + [44]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [9171])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9436])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $53($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [9431])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9436])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $54($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [9431])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $12($1, *($1 + [4]))
	$3 = ($1 + [4])
	*($1) = $3
	$4 = (int_64)0
	*($1 + [4 align=4]) = (int_64)0
	$5 = *($0 + [4])
	$6 = [0]
	$7 = ($0 + [8])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($7)), [9436])
	$8 = ($0 + [4])
	$5 = *($8)
	$9 = *($5)
	$5 = ($5 + [1])
	*($8) = $5
	$6 = ($6 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($9 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($9 & [128]) ){ goto $label$1 }
	$10 = (CASTING uint_32)(uint_64 $4)
	if ( ($10 == 0) ){ goto $label$2 }
	$11 = ($1 + [4])
	$7 = [0]
	
.LOOP $label$3:
	*($2) = (int_64)0
	$9 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($9) - $5) > (uint_32)[7]), [9431])
	$8 = ($0 + [4])
	CALL memcpy(($2 + [8]), *($8), [8])
	$5 = (*($8) + [8])
	*($8) = $5
	CALL eosio_assert(((uint_32)(*($9) - $5) > (uint_32)[7]), [9431])
	CALL memcpy($2, *($8), [8])
	*($8) = (*($8) + [8])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$7 }
	$9 = $11
	$12 = *($5 + [16])
	$4 = *($2 + [8])
	if ( ((uint_64)$4 >= (uint_64)$12) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = $3
	$9 = $3
	$13 = [3]
	goto $label$4 
	
.LABEL $label$6
	$13 = [10]
	goto $label$4 
	
.LABEL $label$5
	$13 = [2]
	
.LABEL $label$4
	
.LOOP $label$9:
	goto $label$27 
	
.LABEL $label$31
	$9 = $5
	$5 = $6
	$12 = *($5 + [16])
	if ( ((uint_64)$4 >= (uint_64)$12) ){ goto $label$20 }
	$13 = [10]
	goto $label$9 
	
.LABEL $label$30
	$6 = *($5)
	if ( $6 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$29
	if ( ((uint_64)$12 >= (uint_64)$4) ){ goto $label$15 }
	$13 = [9]
	goto $label$9 
	
.LABEL $label$28
	$9 = ($5 + [4])
	$6 = *($5 + [4])
	if ( ($6 == 0) ){ goto $label$18 }
	$13 = [0]
	goto $label$9 
	
.LABEL $label$27
	$5 = $9
	goto $label$19 
	
.LABEL $label$26
	if ( (*($9) == 0) ){ goto $label$14 }
	$13 = [4]
	goto $label$9 
	
.LABEL $label$25
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$24
	$9 = $5
	if ( *($9) ){ goto $label$13 }
	$13 = [6]
	goto $label$9 
	
.LABEL $label$23
	*(($6 = CALL _Znwj([32]))) = (int_64)0
	*($6 + [8]) = $5
	*($9) = $6
	*($6 + [16]) = *($2 + [8])
	*($6 + [24]) = *($2)
	$5 = *(*($1))
	if ( ($5 == 0) ){ goto $label$10 }
	$13 = [7]
	goto $label$9 
	
.LABEL $label$22
	*($1) = $5
	$6 = *($9)
	$13 = [8]
	goto $label$9 
	
.LABEL $label$21
	CALL $55(*(($1 + [4])), $6)
	*(($5 = ($1 + [8]))) = (*($5) + [1])
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$11 }
	goto $label$2 
	
.LABEL $label$20
	$13 = [2]
	goto $label$9 
	
.LABEL $label$19
	$13 = [1]
	goto $label$9 
	
.LABEL $label$18
	$13 = [3]
	goto $label$9 
	
.LABEL $label$17
	$13 = [11]
	goto $label$9 
	
.LABEL $label$16
	$13 = [1]
	goto $label$9 
	
.LABEL $label$15
	$13 = [3]
	goto $label$9 
	
.LABEL $label$14
	$13 = [6]
	goto $label$9 
	
.LABEL $label$13
	$13 = [4]
	goto $label$9 
	
.LABEL $label$12
	$13 = [5]
	goto $label$9 
	
.LABEL $label$11
	$13 = [5]
	goto $label$9 
	
.LABEL $label$10
	$13 = [8]
	goto $label$9 
	
.LABEL $label$8
	$5 = *($8)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	$13
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $81($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $81($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$4 = *($1)
	$6 = ($1 + [36])
	$5 = ($1 + [32])
	CALL $57($5, *($6), *($1 + [8]), *(($1 + [12])))
	CALL $57($5, *($6), *($1 + [20]), *(($1 + [24])))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [9726])
	*(($6 = $3) + [24]) = [0]
	*($6 + [8]) = ($6 + [24])
	$7 = ($1 + [8])
	*($6 + [36]) = $7
	*($6 + [32]) = $1
	$8 = ($1 + [20])
	*($6 + [40]) = $8
	*($6 + [44]) = $5
	$9 = ($1 + [44])
	*($6 + [48]) = $9
	$10 = ($1 + [56])
	*($6 + [52]) = $10
	$11 = ($1 + [72])
	*($6 + [56]) = $11
	$12 = ($1 + [80])
	*($6 + [60]) = $12
	$13 = ($1 + [88])
	*($6 + [64]) = $13
	$14 = ($1 + [96])
	*($6 + [68]) = $14
	$15 = ($1 + [104])
	*($6 + [72]) = $15
	$16 = ($1 + [112])
	*($6 + [76]) = $16
	CALL $58(($6 + [32]), ($6 + [8]))
	$17 = *($6 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$3 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($17 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($3 + $17)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = $7
	*($6 + [40]) = $8
	*($6 + [44]) = $5
	*($6 + [48]) = $9
	*($6 + [52]) = $10
	*($6 + [56]) = $11
	*($6 + [60]) = $12
	*($6 + [64]) = $13
	*($6 + [68]) = $14
	*($6 + [72]) = $15
	*($6 + [76]) = $16
	*($6 + [32]) = $1
	CALL $59(($6 + [32]), ($6 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $3, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [80])
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $12(($1 + [56]), *(($1 + [60])))
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($1 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$8 }
	CALL _ZdlPv($1)
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($3 - $2)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$1 }
	$6 = *($0 + [4])
	$4 = *($0 + [8])
	$5 = int_32($4 >> [3])
	if ( ((int_32)$5 <= (int_32)int_32(($4 - $6) >> [3])) ){ goto $label$7 }
	$7 = *($0)
	$6 = (int_32(($6 - $7) >> [3]) + $5)
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$3 }
	$5 = ($4 - $7)
	if ( ((uint_32)int_32($5 >> [3]) >= (uint_32)[268435455]) ){ goto $label$6 }
	$4 = int_32(($1 - $7) >> [3])
	$7 = int_32($5 >> [2])
	$6 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ($6 <= [536870912]) ){ goto $label$5 }
	CALL abort()
	
.LABEL $label$7
	$8 = ($6 - $1)
	$4 = int_32($8 >> [3])
	if ( ((int_32)$5 <= (int_32)$4) ){ goto $label$9 }
	$7 = $6
	$9 = ($2 + ($4 << [3]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$10 }
	$10 = (($3 + [-8]) - $9)
	$4 = $6
	$7 = $9
	
.LOOP $label$11:
	*($4) = *($7)
	$4 = ($4 + [8])
	$7 = ($7 + [8])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$11 }
	$7 = (($6 + ($10 & [-8])) + [8])
	*(($0 + [4])) = $7
	
.LABEL $label$10
	if ( ((int_32)$8 >= (int_32)[1]) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	$7 = $6
	$9 = $3
	
.LABEL $label$8
	$4 = ($5 << [3])
	$5 = ($7 - ($1 + $4))
	$8 = int_32($5 >> [3])
	$4 = ($7 - $4)
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$12 }
	$10 = uint_32((($6 - ($8 << [3])) + ((int_32)$1 ^ (int_32)[-1])) >> [3])
	$3 = $7
	
.LOOP $label$13:
	*($3) = *($4)
	$3 = ($3 + [8])
	$4 = ($4 + [8])
	if ( ($4 <= $6) ){ goto $label$13 }
	*(($0 + [4])) = (($7 + ($10 << [3])) + [8])
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$14 }
	CALL memmove(($7 - ($8 << [3])), $1, $5)
	
.LABEL $label$14
	$4 = ($9 - $2)
	if ( ($4 == 0) ){ goto $label$1 }
	CALL memmove($1, $2, $4)
	return $1
	
.LABEL $label$6
	$4 = int_32(($1 - $7) >> [3])
	$6 = [536870911]
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $81($0)
	
.LABEL $label$2
	$7 = ($5 + ($4 << [3]))
	$4 = $7
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$15 }
	$9 = uint_32((($3 + [-8]) - $2) >> [3])
	$4 = $7
	
.LOOP $label$16:
	*($4) = *($2)
	$4 = ($4 + [8])
	$2 = ($2 + [8])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$16 }
	$4 = (($7 + ($9 << [3])) + [8])
	
.LABEL $label$15
	$6 = ($6 << [3])
	$9 = *($0)
	$2 = ($1 - $9)
	$3 = ($7 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($3, $9, $2)
	
.LABEL $label$17
	$6 = ($5 + $6)
	$5 = ($0 + [4])
	$2 = (*($5) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($4, $1, $2)
	$4 = ($4 + $2)
	
.LABEL $label$18
	*($5) = $4
	$2 = *($0)
	*($0) = $3
	*(($0 + [8])) = $6
	if ( ($2 == 0) ){ goto $label$19 }
	CALL _ZdlPv($2)
	
.LABEL $label$19
	$1 = $7
	
.LABEL $label$1
	(unreachable)
	(unreachable)
	return $1
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$6 = ($1 + [32])
	$3 = *(*($3))
	$7 = *($1 + [32])
	if ( ((uint_32)int_32((*(($1 + [36])) - $7) >> [3]) <= (uint_32)$3) ){ goto $label$2 }
	$8 = *($1)
	*($1 + [112]) = [0]
	*($1 + [72]) = *(($7 + ($3 << [3])))
	CALL eosio_assert([1], [9726])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$7 = ($1 + [8])
	*($5 + [36]) = $7
	*($5 + [32]) = $1
	$9 = ($1 + [20])
	*($5 + [40]) = $9
	*($5 + [44]) = $6
	$10 = ($1 + [44])
	*($5 + [48]) = $10
	$11 = ($1 + [56])
	*($5 + [52]) = $11
	$12 = ($1 + [72])
	*($5 + [56]) = $12
	$13 = ($1 + [80])
	*($5 + [60]) = $13
	$14 = ($1 + [88])
	*($5 + [64]) = $14
	$15 = ($1 + [96])
	*($5 + [68]) = $15
	$16 = ($1 + [104])
	*($5 + [72]) = $16
	$17 = ($1 + [112])
	*($5 + [76]) = $17
	CALL $58(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $95($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [40]) = $9
	*($5 + [44]) = $6
	*($5 + [48]) = $10
	*($5 + [52]) = $11
	*($5 + [56]) = $12
	*($5 + [60]) = $13
	*($5 + [64]) = $14
	*($5 + [68]) = $15
	*($5 + [72]) = $16
	*($5 + [76]) = $17
	*($5 + [32]) = $1
	CALL $59(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	CALL $98($4)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $82($6)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $64($6, [0], [0])
	CALL $67($6, *(($1 + [12])), *(*($3)), *($3 + [4]))
	$7 = ($1 + [20])
	CALL $64($7, [0], [0])
	CALL $67($7, *(($1 + [24])), *(*($3 + [8])), *($3 + [4]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9726])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [44])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [72])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	$13 = ($1 + [88])
	*($3 + [64]) = $13
	$14 = ($1 + [96])
	*($3 + [68]) = $14
	$15 = ($1 + [104])
	*($3 + [72]) = $15
	$16 = ($1 + [112])
	*($3 + [76]) = $16
	CALL $58(($3 + [32]), ($3 + [8]))
	$17 = *($3 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$4 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $17)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	*($3 + [76]) = $16
	*($3 + [32]) = $1
	CALL $59(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$5 = *(*($3))
	*($1 + [96]) = (int_64))(((int_64)*($1 + [96]) + (int_64)$5) - ((int_64)((int_64)$5 / (int_64)100) << (int_64)1))
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $67($6, *(($1 + [12])), *(*(($3 + [4]))), *(($3 + [8])))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9726])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$7 = ($1 + [20])
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [44])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [72])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	$13 = ($1 + [88])
	*($3 + [64]) = $13
	$14 = ($1 + [96])
	*($3 + [68]) = $14
	$15 = ($1 + [104])
	*($3 + [72]) = $15
	$16 = ($1 + [112])
	*($3 + [76]) = $16
	CALL $58(($3 + [32]), ($3 + [8]))
	$17 = *($3 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$4 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $17)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	*($3 + [76]) = $16
	*($3 + [32]) = $1
	CALL $59(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [60])
	$3 = *($8)
	if ( ($3 == 0) ){ goto $label$4 }
	$8 = ($1 + [60])
	$9 = *($3 + [16])
	if ( (uint_64)($9 <= (int_64)3) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = $8
	$11 = [4]
	goto $label$1 
	
.LABEL $label$3
	$11 = [16]
	goto $label$1 
	
.LABEL $label$2
	$11 = [2]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$34 
	
.LABEL $label$38
	$8 = $3
	$3 = $10
	$9 = *($3 + [16])
	if ( (uint_64)($9 <= (int_64)3) ){ goto $label$20 }
	$11 = [16]
	goto $label$5 
	
.LABEL $label$37
	$10 = *($3)
	if ( $10 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$36
	if ( ((int_64)$9 == (int_64)2) ){ goto $label$15 }
	$11 = [3]
	goto $label$5 
	
.LABEL $label$35
	$8 = ($3 + [4])
	$10 = *($3 + [4])
	if ( ($10 == 0) ){ goto $label$18 }
	$11 = [0]
	goto $label$5 
	
.LABEL $label$34
	$3 = $8
	goto $label$19 
	
.LABEL $label$33
	$12 = ($1 + [56])
	$10 = *($8)
	if ( $10 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$32
	$12 = ($1 + [56])
	$8 = $3
	$10 = *($8)
	if ( $10 ){ goto $label$12 }
	$11 = [13]
	goto $label$5 
	
.LABEL $label$31
	*(($10 = CALL _Znwj([32]))) = (int_64)0
	*($10 + [8]) = $3
	*($8) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)2
	$3 = $10
	$13 = *(*($12))
	if ( ($13 == 0) ){ goto $label$6 }
	$11 = [14]
	goto $label$5 
	
.LABEL $label$30
	*($12) = $13
	$3 = *($8)
	$11 = [15]
	goto $label$5 
	
.LABEL $label$29
	CALL $55(*(($1 + [60])), $3)
	*(($3 = ($1 + [64]))) = (*($3) + [1])
	$11 = [5]
	goto $label$5 
	
.LABEL $label$28
	*(($10 + [24])) = *($6)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9726])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$10 = ($1 + [8])
	*($5 + [36]) = $10
	*($5 + [32]) = $1
	$6 = ($1 + [20])
	*($5 + [40]) = $6
	$13 = ($1 + [32])
	*($5 + [44]) = $13
	$14 = ($1 + [44])
	*($5 + [48]) = $14
	*($5 + [52]) = $12
	$15 = ($1 + [72])
	*($5 + [56]) = $15
	$16 = ($1 + [80])
	*($5 + [60]) = $16
	$17 = ($1 + [88])
	*($5 + [64]) = $17
	$18 = ($1 + [96])
	*($5 + [68]) = $18
	$19 = ($1 + [104])
	*($5 + [72]) = $19
	$20 = ($1 + [112])
	*($5 + [76]) = $20
	CALL $58(($5 + [32]), ($5 + [8]))
	$8 = *($5 + [24])
	if ( ($8 <= [513]) ){ goto $label$11 }
	$11 = [12]
	goto $label$5 
	
.LABEL $label$27
	$3 = CALL $95($8)
	goto $label$10 
	
.LABEL $label$26
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	$11 = [7]
	goto $label$5 
	
.LABEL $label$25
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $8)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $10
	*($5 + [40]) = $6
	*($5 + [44]) = $13
	*($5 + [48]) = $14
	*($5 + [52]) = $12
	*($5 + [56]) = $15
	*($5 + [60]) = $16
	*($5 + [64]) = $17
	*($5 + [68]) = $18
	*($5 + [72]) = $19
	*($5 + [76]) = $20
	*($5 + [32]) = $1
	CALL $59(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$9 }
	$11 = [8]
	goto $label$5 
	
.LABEL $label$24
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	$11 = [10]
	goto $label$5 
	
.LABEL $label$23
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$22
	CALL $98($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	$11 = [9]
	goto $label$5 
	
.LABEL $label$21
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$20
	$11 = [2]
	goto $label$5 
	
.LABEL $label$19
	$11 = [1]
	goto $label$5 
	
.LABEL $label$18
	$11 = [4]
	goto $label$5 
	
.LABEL $label$17
	$11 = [17]
	goto $label$5 
	
.LABEL $label$16
	$11 = [1]
	goto $label$5 
	
.LABEL $label$15
	$11 = [4]
	goto $label$5 
	
.LABEL $label$14
	$11 = [13]
	goto $label$5 
	
.LABEL $label$13
	$11 = [5]
	goto $label$5 
	
.LABEL $label$12
	$11 = [5]
	goto $label$5 
	
.LABEL $label$11
	$11 = [6]
	goto $label$5 
	
.LABEL $label$10
	$11 = [7]
	goto $label$5 
	
.LABEL $label$9
	$11 = [11]
	goto $label$5 
	
.LABEL $label$8
	$11 = [9]
	goto $label$5 
	
.LABEL $label$7
	$11 = [10]
	goto $label$5 
	
.LABEL $label$6
	$11 = [15]
	goto $label$5 
	$11
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$5 = *(*($3))
	*($1 + [96]) = (int_64))(((int_64)*($1 + [96]) + (int_64)$5) - ((int_64)((int_64)$5 / (int_64)100) << (int_64)1))
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $67($6, *(($1 + [12])), *(*(($3 + [4]))), *(($3 + [8])))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9726])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$7 = ($1 + [20])
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [44])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [72])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	$13 = ($1 + [88])
	*($3 + [64]) = $13
	$14 = ($1 + [96])
	*($3 + [68]) = $14
	$15 = ($1 + [104])
	*($3 + [72]) = $15
	$16 = ($1 + [112])
	*($3 + [76]) = $16
	CALL $58(($3 + [32]), ($3 + [8]))
	$17 = *($3 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$4 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $17)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	*($3 + [76]) = $16
	*($3 + [32]) = $1
	CALL $59(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$5 = *(*($3))
	*($1 + [96]) = (int_64))(((int_64)*($1 + [96]) + (int_64)$5) - ((int_64)((int_64)$5 / (int_64)100) << (int_64)1))
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $67($6, *(($1 + [12])), *(*(($3 + [4]))), *(($3 + [8])))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9726])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$7 = ($1 + [20])
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [44])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [72])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	$13 = ($1 + [88])
	*($3 + [64]) = $13
	$14 = ($1 + [96])
	*($3 + [68]) = $14
	$15 = ($1 + [104])
	*($3 + [72]) = $15
	$16 = ($1 + [112])
	*($3 + [76]) = $16
	CALL $58(($3 + [32]), ($3 + [8]))
	$17 = *($3 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$4 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $17)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	*($3 + [76]) = $16
	*($3 + [32]) = $1
	CALL $59(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$5 = *(*($3))
	*($1 + [96]) = (int_64))(((int_64)*($1 + [96]) + (int_64)$5) - ((int_64)((int_64)$5 / (int_64)100) << (int_64)1))
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $67($6, *(($1 + [12])), *(*($3 + [4])), *($3 + [8]))
	$7 = ($1 + [20])
	CALL $67($7, *(($1 + [24])), (*(*($3 + [4])) << [1]), *($3 + [8]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9726])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [44])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [72])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	$13 = ($1 + [88])
	*($3 + [64]) = $13
	$14 = ($1 + [96])
	*($3 + [68]) = $14
	$15 = ($1 + [104])
	*($3 + [72]) = $15
	$16 = ($1 + [112])
	*($3 + [76]) = $16
	CALL $58(($3 + [32]), ($3 + [8]))
	$17 = *($3 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$4 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $17)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	*($3 + [76]) = $16
	*($3 + [32]) = $1
	CALL $59(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$5 = *(*($3))
	*($1 + [96]) = (int_64))(((int_64)*($1 + [96]) + (int_64)$5) - ((int_64)((int_64)$5 / (int_64)100) << (int_64)1))
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $67($6, *(($1 + [12])), *(*($3 + [4])), *($3 + [8]))
	$7 = ($1 + [20])
	CALL $67($7, *(($1 + [24])), ((int_32)*(*($3 + [4])) * (int_32)[9]), *($3 + [8]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9726])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [44])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [72])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	$13 = ($1 + [88])
	*($3 + [64]) = $13
	$14 = ($1 + [96])
	*($3 + [68]) = $14
	$15 = ($1 + [104])
	*($3 + [72]) = $15
	$16 = ($1 + [112])
	*($3 + [76]) = $16
	CALL $58(($3 + [32]), ($3 + [8]))
	$17 = *($3 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$4 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $17)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	*($3 + [76]) = $16
	*($3 + [32]) = $1
	CALL $59(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [60])
	$3 = *($8)
	if ( ($3 == 0) ){ goto $label$4 }
	$8 = ($1 + [60])
	$9 = *($3 + [16])
	if ( (uint_64)($9 <= (int_64)4) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = $8
	$11 = [4]
	goto $label$1 
	
.LABEL $label$3
	$11 = [16]
	goto $label$1 
	
.LABEL $label$2
	$11 = [2]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$34 
	
.LABEL $label$38
	$8 = $3
	$3 = $10
	$9 = *($3 + [16])
	if ( (uint_64)($9 <= (int_64)4) ){ goto $label$20 }
	$11 = [16]
	goto $label$5 
	
.LABEL $label$37
	$10 = *($3)
	if ( $10 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$36
	if ( ((int_64)$9 == (int_64)3) ){ goto $label$15 }
	$11 = [3]
	goto $label$5 
	
.LABEL $label$35
	$8 = ($3 + [4])
	$10 = *($3 + [4])
	if ( ($10 == 0) ){ goto $label$18 }
	$11 = [0]
	goto $label$5 
	
.LABEL $label$34
	$3 = $8
	goto $label$19 
	
.LABEL $label$33
	$12 = ($1 + [56])
	$10 = *($8)
	if ( $10 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$32
	$12 = ($1 + [56])
	$8 = $3
	$10 = *($8)
	if ( $10 ){ goto $label$12 }
	$11 = [13]
	goto $label$5 
	
.LABEL $label$31
	*(($10 = CALL _Znwj([32]))) = (int_64)0
	*($10 + [8]) = $3
	*($8) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)3
	$3 = $10
	$13 = *(*($12))
	if ( ($13 == 0) ){ goto $label$6 }
	$11 = [14]
	goto $label$5 
	
.LABEL $label$30
	*($12) = $13
	$3 = *($8)
	$11 = [15]
	goto $label$5 
	
.LABEL $label$29
	CALL $55(*(($1 + [60])), $3)
	*(($3 = ($1 + [64]))) = (*($3) + [1])
	$11 = [5]
	goto $label$5 
	
.LABEL $label$28
	*(($10 + [24])) = *($6)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9726])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$10 = ($1 + [8])
	*($5 + [36]) = $10
	*($5 + [32]) = $1
	$6 = ($1 + [20])
	*($5 + [40]) = $6
	$13 = ($1 + [32])
	*($5 + [44]) = $13
	$14 = ($1 + [44])
	*($5 + [48]) = $14
	*($5 + [52]) = $12
	$15 = ($1 + [72])
	*($5 + [56]) = $15
	$16 = ($1 + [80])
	*($5 + [60]) = $16
	$17 = ($1 + [88])
	*($5 + [64]) = $17
	$18 = ($1 + [96])
	*($5 + [68]) = $18
	$19 = ($1 + [104])
	*($5 + [72]) = $19
	$20 = ($1 + [112])
	*($5 + [76]) = $20
	CALL $58(($5 + [32]), ($5 + [8]))
	$8 = *($5 + [24])
	if ( ($8 <= [513]) ){ goto $label$11 }
	$11 = [12]
	goto $label$5 
	
.LABEL $label$27
	$3 = CALL $95($8)
	goto $label$10 
	
.LABEL $label$26
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	$11 = [7]
	goto $label$5 
	
.LABEL $label$25
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $8)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $10
	*($5 + [40]) = $6
	*($5 + [44]) = $13
	*($5 + [48]) = $14
	*($5 + [52]) = $12
	*($5 + [56]) = $15
	*($5 + [60]) = $16
	*($5 + [64]) = $17
	*($5 + [68]) = $18
	*($5 + [72]) = $19
	*($5 + [76]) = $20
	*($5 + [32]) = $1
	CALL $59(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$9 }
	$11 = [8]
	goto $label$5 
	
.LABEL $label$24
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	$11 = [10]
	goto $label$5 
	
.LABEL $label$23
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$22
	CALL $98($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	$11 = [9]
	goto $label$5 
	
.LABEL $label$21
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$20
	$11 = [2]
	goto $label$5 
	
.LABEL $label$19
	$11 = [1]
	goto $label$5 
	
.LABEL $label$18
	$11 = [4]
	goto $label$5 
	
.LABEL $label$17
	$11 = [17]
	goto $label$5 
	
.LABEL $label$16
	$11 = [1]
	goto $label$5 
	
.LABEL $label$15
	$11 = [4]
	goto $label$5 
	
.LABEL $label$14
	$11 = [13]
	goto $label$5 
	
.LABEL $label$13
	$11 = [5]
	goto $label$5 
	
.LABEL $label$12
	$11 = [5]
	goto $label$5 
	
.LABEL $label$11
	$11 = [6]
	goto $label$5 
	
.LABEL $label$10
	$11 = [7]
	goto $label$5 
	
.LABEL $label$9
	$11 = [11]
	goto $label$5 
	
.LABEL $label$8
	$11 = [9]
	goto $label$5 
	
.LABEL $label$7
	$11 = [10]
	goto $label$5 
	
.LABEL $label$6
	$11 = [15]
	goto $label$5 
	$11
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [60])
	$3 = *($8)
	if ( ($3 == 0) ){ goto $label$4 }
	$8 = ($1 + [60])
	$9 = *($3 + [16])
	if ( (uint_64)($9 <= (int_64)5) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = $8
	$11 = [4]
	goto $label$1 
	
.LABEL $label$3
	$11 = [16]
	goto $label$1 
	
.LABEL $label$2
	$11 = [2]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$34 
	
.LABEL $label$38
	$8 = $3
	$3 = $10
	$9 = *($3 + [16])
	if ( (uint_64)($9 <= (int_64)5) ){ goto $label$20 }
	$11 = [16]
	goto $label$5 
	
.LABEL $label$37
	$10 = *($3)
	if ( $10 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$36
	if ( ((int_64)$9 == (int_64)4) ){ goto $label$15 }
	$11 = [3]
	goto $label$5 
	
.LABEL $label$35
	$8 = ($3 + [4])
	$10 = *($3 + [4])
	if ( ($10 == 0) ){ goto $label$18 }
	$11 = [0]
	goto $label$5 
	
.LABEL $label$34
	$3 = $8
	goto $label$19 
	
.LABEL $label$33
	$12 = ($1 + [56])
	$10 = *($8)
	if ( $10 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$32
	$12 = ($1 + [56])
	$8 = $3
	$10 = *($8)
	if ( $10 ){ goto $label$12 }
	$11 = [13]
	goto $label$5 
	
.LABEL $label$31
	*(($10 = CALL _Znwj([32]))) = (int_64)0
	*($10 + [8]) = $3
	*($8) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)4
	$3 = $10
	$13 = *(*($12))
	if ( ($13 == 0) ){ goto $label$6 }
	$11 = [14]
	goto $label$5 
	
.LABEL $label$30
	*($12) = $13
	$3 = *($8)
	$11 = [15]
	goto $label$5 
	
.LABEL $label$29
	CALL $55(*(($1 + [60])), $3)
	*(($3 = ($1 + [64]))) = (*($3) + [1])
	$11 = [5]
	goto $label$5 
	
.LABEL $label$28
	*(($10 + [24])) = *($6)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9726])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$10 = ($1 + [8])
	*($5 + [36]) = $10
	*($5 + [32]) = $1
	$6 = ($1 + [20])
	*($5 + [40]) = $6
	$13 = ($1 + [32])
	*($5 + [44]) = $13
	$14 = ($1 + [44])
	*($5 + [48]) = $14
	*($5 + [52]) = $12
	$15 = ($1 + [72])
	*($5 + [56]) = $15
	$16 = ($1 + [80])
	*($5 + [60]) = $16
	$17 = ($1 + [88])
	*($5 + [64]) = $17
	$18 = ($1 + [96])
	*($5 + [68]) = $18
	$19 = ($1 + [104])
	*($5 + [72]) = $19
	$20 = ($1 + [112])
	*($5 + [76]) = $20
	CALL $58(($5 + [32]), ($5 + [8]))
	$8 = *($5 + [24])
	if ( ($8 <= [513]) ){ goto $label$11 }
	$11 = [12]
	goto $label$5 
	
.LABEL $label$27
	$3 = CALL $95($8)
	goto $label$10 
	
.LABEL $label$26
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	$11 = [7]
	goto $label$5 
	
.LABEL $label$25
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $8)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $10
	*($5 + [40]) = $6
	*($5 + [44]) = $13
	*($5 + [48]) = $14
	*($5 + [52]) = $12
	*($5 + [56]) = $15
	*($5 + [60]) = $16
	*($5 + [64]) = $17
	*($5 + [68]) = $18
	*($5 + [72]) = $19
	*($5 + [76]) = $20
	*($5 + [32]) = $1
	CALL $59(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$9 }
	$11 = [8]
	goto $label$5 
	
.LABEL $label$24
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	$11 = [10]
	goto $label$5 
	
.LABEL $label$23
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$22
	CALL $98($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	$11 = [9]
	goto $label$5 
	
.LABEL $label$21
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$20
	$11 = [2]
	goto $label$5 
	
.LABEL $label$19
	$11 = [1]
	goto $label$5 
	
.LABEL $label$18
	$11 = [4]
	goto $label$5 
	
.LABEL $label$17
	$11 = [17]
	goto $label$5 
	
.LABEL $label$16
	$11 = [1]
	goto $label$5 
	
.LABEL $label$15
	$11 = [4]
	goto $label$5 
	
.LABEL $label$14
	$11 = [13]
	goto $label$5 
	
.LABEL $label$13
	$11 = [5]
	goto $label$5 
	
.LABEL $label$12
	$11 = [5]
	goto $label$5 
	
.LABEL $label$11
	$11 = [6]
	goto $label$5 
	
.LABEL $label$10
	$11 = [7]
	goto $label$5 
	
.LABEL $label$9
	$11 = [11]
	goto $label$5 
	
.LABEL $label$8
	$11 = [9]
	goto $label$5 
	
.LABEL $label$7
	$11 = [10]
	goto $label$5 
	
.LABEL $label$6
	$11 = [15]
	goto $label$5 
	$11
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9629])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9675])
	$5 = *(*($3))
	*($1 + [96]) = (int_64))(((int_64)*($1 + [96]) + (int_64)$5) - ((int_64)((int_64)$5 / (int_64)100) << (int_64)1))
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $67($6, *(($1 + [12])), *(*(($3 + [4]))), *(($3 + [8])))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9726])
	*(($3 = $4) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$7 = ($1 + [20])
	*($3 + [40]) = $7
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	$9 = ($1 + [44])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [72])
	*($3 + [56]) = $11
	$12 = ($1 + [80])
	*($3 + [60]) = $12
	$13 = ($1 + [88])
	*($3 + [64]) = $13
	$14 = ($1 + [96])
	*($3 + [68]) = $14
	$15 = ($1 + [104])
	*($3 + [72]) = $15
	$16 = ($1 + [112])
	*($3 + [76]) = $16
	CALL $58(($3 + [32]), ($3 + [8]))
	$17 = *($3 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$4 = CALL $95($17)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($17 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $17)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	*($3 + [76]) = $16
	*($3 + [32]) = $1
	CALL $59(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [120]), $2, $4, $17)
	if ( ((uint_32)$17 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $98($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9436])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $31($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9431])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $69($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $80($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $80($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $78($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [3])
	if ( ((uint_32)$3 <= (uint_32)int_32(($4 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($4 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $3
	$4 = int_32($4 >> [2])
	if ( ($4 <= $3) ){ goto $label$6 }
	$5 = $4
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$3 = (($2 + [-8]) - $1)
	$4 = $5
	
.LOOP $label$7:
	*($4) = *($1)
	$4 = ($4 + [8])
	$1 = ($1 + [8])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	*(($0 + [4])) = (($5 + ($3 & [-8])) + [8])
	goto $label$3 
	
.LABEL $label$4
	$7 = int_32($6 >> [3])
	$6 = (*($0 + [4]) - $5)
	$4 = ($1 + $6)
	$8 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($8 - $1)
	if ( ($6 == 0) ){ goto $label$8 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$3 }
	$5 = (($2 + [-8]) - $8)
	$3 = *(($0 + [4]))
	$1 = $3
	
.LOOP $label$9:
	*($1) = *($4)
	$1 = ($1 + [8])
	$4 = ($4 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	*(($0 + [4])) = (($3 + ($5 & [-8])) + [8])
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + (int_32($6 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $81($0)
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [3])
	if ( ((uint_32)$3 <= (uint_32)int_32(($4 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($4 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $3
	$4 = int_32($4 >> [2])
	if ( ($4 <= $3) ){ goto $label$6 }
	$5 = $4
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$3 = (($2 + [-8]) - $1)
	$4 = $5
	
.LOOP $label$7:
	*($4) = *($1)
	$4 = ($4 + [8])
	$1 = ($1 + [8])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	*(($0 + [4])) = (($5 + ($3 & [-8])) + [8])
	goto $label$3 
	
.LABEL $label$4
	$7 = int_32($6 >> [3])
	$6 = (*($0 + [4]) - $5)
	$4 = ($1 + $6)
	$8 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($8 - $1)
	if ( ($6 == 0) ){ goto $label$8 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$3 }
	$5 = (($2 + [-8]) - $8)
	$3 = *(($0 + [4]))
	$1 = $3
	
.LOOP $label$9:
	*($1) = *($4)
	$1 = ($1 + [8])
	$4 = ($4 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	*(($0 + [4])) = (($3 + ($5 & [-8])) + [8])
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + (int_32($6 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $81($0)
}

int_32 .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	if ( ($2 == 0) ){ goto $label$8 }
	$5 = *($0 + [4])
	$4 = *($0 + [8])
	if ( ((uint_32)int_32(($4 - $5) >> [3]) >= (uint_32)$2) ){ goto $label$7 }
	$6 = *($0)
	$5 = (int_32(($5 - $6) >> [3]) + $2)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$2 }
	$4 = ($4 - $6)
	if ( ((uint_32)int_32($4 >> [3]) >= (uint_32)[268435455]) ){ goto $label$6 }
	$7 = int_32(($1 - $6) >> [3])
	$4 = int_32($4 >> [2])
	$4 = ( $5 ? $4 : ($4 <= $5) )
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ($4 <= [536870912]) ){ goto $label$5 }
	CALL abort()
	
.LABEL $label$8
	return $1
	
.LABEL $label$7
	$7 = $5
	$8 = ($5 - $1)
	$9 = int_32($8 >> [3])
	if ( ((uint_32)$9 >= (uint_32)$2) ){ goto $label$9 }
	$6 = ($9 - $2)
	$7 = ($2 - $9)
	$4 = $5
	
.LOOP $label$10:
	*($4) = *($3)
	$4 = ($4 + [8])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$10 }
	$7 = ($5 + ($7 << [3]))
	*(($0 + [4])) = $7
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$9
	$4 = ($2 << [3])
	$8 = ($7 - ($1 + $4))
	$10 = int_32($8 >> [3])
	$4 = ($7 - $4)
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$11 }
	$11 = uint_32((($5 - ($10 << [3])) + ((int_32)$1 ^ (int_32)[-1])) >> [3])
	$6 = $7
	
.LOOP $label$12:
	*($6) = *($4)
	$6 = ($6 + [8])
	$4 = ($4 + [8])
	if ( ($4 <= $5) ){ goto $label$12 }
	*(($0 + [4])) = (($7 + ($11 << [3])) + [8])
	
.LABEL $label$11
	if ( ($8 == 0) ){ goto $label$13 }
	CALL memmove(($7 - ($10 << [3])), $1, $8)
	
.LABEL $label$13
	if ( ((uint_32)$1 > (uint_32)$3) ){ goto $label$14 }
	$3 = ( ($3 + ($2 << [3])) ? $3 : ((uint_32)*(($0 + [4])) > (uint_32)$3) )
	
.LABEL $label$14
	$6 = ((int_32)$2 ^ (int_32)[-1])
	$4 = ((int_32)$9 ^ (int_32)[-1])
	$6 = (( $4 ? $6 : ((uint_32)$4 > (uint_32)$6) ) + [1])
	$4 = $1
	
.LOOP $label$15:
	*($4) = *($3)
	$4 = ($4 + [8])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$15 }
	return $1
	
.LABEL $label$6
	$7 = int_32(($1 - $6) >> [3])
	$4 = [536870911]
	
.LABEL $label$5
	$6 = CALL _Znwj(($4 << [3]))
	goto $label$1 
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	$4 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$9 = ($6 + ($4 << [3]))
	$5 = ($6 + ($7 << [3]))
	$4 = $5
	$6 = $2
	
.LOOP $label$16:
	*($4) = *($3)
	$4 = ($4 + [8])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$16 }
	$6 = ($2 << [3])
	$2 = *($0)
	$4 = ($1 - $2)
	$3 = ($5 - $4)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($3, $2, $4)
	
.LABEL $label$17
	$4 = ($5 + $6)
	$2 = ($0 + [4])
	$6 = (*($2) - $1)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($4, $1, $6)
	$4 = ($4 + $6)
	
.LABEL $label$18
	*($2) = $4
	$4 = *($0)
	*($0) = $3
	*(($0 + [8])) = $9
	if ( ($4 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	(unreachable)
	(unreachable)
	return $5
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( (*($0 + [8]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = ($0 + [4])
	*($0) = $4
	$5 = *($0 + [4])
	*($0 + [4]) = [0]
	*(($0 + [8])) = [0]
	*($5 + [8]) = [0]
	$5 = *($3 + [4])
	$6 = ( $5 ? $3 : $5 )
	$3 = ((int_32)$6 != (int_32)[0])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($0 + [4])
	
.LOOP $label$4:
	$8 = *($1)
	*($6 + [16]) = $8
	*(($6 + [24])) = *($1 + [8])
	$5 = [0]
	$9 = *($6 + [8])
	if ( ($9 == 0) ){ goto $label$9 }
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$10 }
	*($9 + [4]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	
.LOOP $label$11:
	$5 = $3
	$3 = *($5)
	if ( $3 ){ goto $label$11 }
	$3 = *($5 + [4])
	if ( $3 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	*($9) = [0]
	$3 = *($9 + [4])
	if ( ($3 == 0) ){ goto $label$8 }
	
.LOOP $label$12:
	$5 = $3
	$3 = *($5)
	if ( $3 ){ goto $label$12 }
	$3 = *($5 + [4])
	if ( $3 ){ goto $label$12 }
	
.LABEL $label$9
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = $9
	$3 = *($4)
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$7
	$3 = $4
	$9 = $4
	if ( *($9) ){ goto $label$13 }
	$11 = [6]
	goto $label$5 
	
.LABEL $label$13
	$11 = [4]
	goto $label$5 
	
.LABEL $label$6
	$9 = $7
	$10 = *($3 + [16])
	if ( (uint_64)($8 <= $10) ){ goto $label$14 }
	$11 = [2]
	goto $label$5 
	
.LABEL $label$14
	$11 = [10]
	
.LABEL $label$5
	
.LOOP $label$15:
	goto $label$33 
	
.LABEL $label$35
	if ( ((uint_64)$10 >= (uint_64)$8) ){ goto $label$19 }
	$11 = [9]
	goto $label$15 
	
.LABEL $label$34
	$9 = ($3 + [4])
	$12 = *($3 + [4])
	if ( ($12 == 0) ){ goto $label$21 }
	$11 = [0]
	goto $label$15 
	
.LABEL $label$33
	$3 = $9
	$11 = [1]
	goto $label$15 
	
.LABEL $label$32
	$9 = $3
	$3 = $12
	$10 = *($3 + [16])
	if ( ((uint_64)$8 >= (uint_64)$10) ){ goto $label$22 }
	$11 = [10]
	goto $label$15 
	
.LABEL $label$31
	$12 = *($3)
	if ( $12 ){ goto $label$20 }
	$11 = [11]
	goto $label$15 
	
.LABEL $label$30
	$9 = $3
	$11 = [3]
	goto $label$15 
	
.LABEL $label$29
	if ( (*($9) == 0) ){ goto $label$18 }
	$11 = [4]
	goto $label$15 
	
.LABEL $label$28
	$3 = ((int_32)$5 != (int_32)[0])
	$1 = ($1 + [16])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$23 }
	$11 = [5]
	goto $label$15 
	
.LABEL $label$27
	$6 = $5
	if ( $5 ){ goto $label$4 }
	goto $label$23 
	
.LABEL $label$26
	*($6) = (int_64)0
	*(($6 + [8])) = $3
	*($9) = $6
	$3 = *(*($0))
	if ( ($3 == 0) ){ goto $label$16 }
	$11 = [7]
	goto $label$15 
	
.LABEL $label$25
	*($0) = $3
	$6 = *($9)
	$11 = [8]
	goto $label$15 
	
.LABEL $label$24
	CALL $55(*(($0 + [4])), $6)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	$3 = ((int_32)$5 != (int_32)[0])
	$1 = ($1 + [16])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$23
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$22
	$11 = [2]
	goto $label$15 
	
.LABEL $label$21
	$11 = [3]
	goto $label$15 
	
.LABEL $label$20
	$11 = [1]
	goto $label$15 
	
.LABEL $label$19
	$11 = [3]
	goto $label$15 
	
.LABEL $label$18
	$11 = [6]
	goto $label$15 
	
.LABEL $label$17
	$11 = [5]
	goto $label$15 
	
.LABEL $label$16
	$11 = [8]
	goto $label$15 
	
.LABEL $label$3
	$5 = $6
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	
.LOOP $label$37:
	$3 = *($5 + [8])
	if ( ($3 == 0) ){ goto $label$36 }
	$5 = $3
	goto $label$37 
	
.LABEL $label$36
	CALL $12($0, $5)
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$38 }
	$12 = ($0 + [4])
	
.LOOP $label$39:
	$3 = *($12)
	if ( ($3 == 0) ){ goto $label$42 }
	$5 = $12
	$10 = *($3 + [16])
	$8 = *($1)
	if ( (uint_64)($8 <= $10) ){ goto $label$41 }
	$13 = [2]
	goto $label$40 
	
.LABEL $label$42
	$3 = $12
	$5 = $12
	$13 = [3]
	goto $label$40 
	
.LABEL $label$41
	$13 = [9]
	
.LABEL $label$40
	
.LOOP $label$43:
	goto $label$59 
	
.LABEL $label$61
	if ( ((uint_64)$10 >= (uint_64)$8) ){ goto $label$47 }
	$13 = [8]
	goto $label$43 
	
.LABEL $label$60
	$5 = ($3 + [4])
	$9 = *($3 + [4])
	if ( ($9 == 0) ){ goto $label$49 }
	$13 = [0]
	goto $label$43 
	
.LABEL $label$59
	$3 = $5
	$13 = [1]
	goto $label$43 
	
.LABEL $label$58
	$5 = $3
	$3 = $9
	$10 = *($3 + [16])
	if ( ((uint_64)$8 >= (uint_64)$10) ){ goto $label$50 }
	$13 = [9]
	goto $label$43 
	
.LABEL $label$57
	$9 = *($3)
	if ( $9 ){ goto $label$48 }
	$13 = [10]
	goto $label$43 
	
.LABEL $label$56
	$5 = $3
	if ( *($5) ){ goto $label$45 }
	$13 = [5]
	goto $label$43 
	
.LABEL $label$55
	*((($9 = CALL _Znwj([32])) + [24])) = *(($1 + [8]))
	*($9 + [16]) = *($1)
	*($9) = (int_64)0
	*($9 + [8]) = $3
	*($5) = $9
	$3 = *(*($0))
	if ( ($3 == 0) ){ goto $label$44 }
	$13 = [6]
	goto $label$43 
	
.LABEL $label$54
	*($0) = $3
	$9 = *($5)
	$13 = [7]
	goto $label$43 
	
.LABEL $label$53
	CALL $55(*(($0 + [4])), $9)
	*(($3 = ($0 + [8]))) = (*($3) + [1])
	$1 = ($1 + [16])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$52
	if ( (*($5) == 0) ){ goto $label$46 }
	$13 = [4]
	goto $label$43 
	
.LABEL $label$51
	$1 = ($1 + [16])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$50
	$13 = [2]
	goto $label$43 
	
.LABEL $label$49
	$13 = [3]
	goto $label$43 
	
.LABEL $label$48
	$13 = [1]
	goto $label$43 
	
.LABEL $label$47
	$13 = [3]
	goto $label$43 
	
.LABEL $label$46
	$13 = [5]
	goto $label$43 
	
.LABEL $label$45
	$13 = [4]
	goto $label$43 
	
.LABEL $label$44
	$13 = [7]
	goto $label$43 
	
.LABEL $label$38
	$11
	$13
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9171])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [9171])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9171])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [9171])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9171])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9171])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [8])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [9171])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$1 = ($1 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$5 = ($0 + [4])
	
.LOOP $label$3:
	$6 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($6) - $3) > (int_32)[7]), [9171])
	$8 = $7
	CALL memcpy(*($5), ($8 + [16]), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	CALL eosio_assert(((int_32)(*($6) - $7) > (int_32)[7]), [9171])
	CALL memcpy(*($5), ($8 + [24]), [8])
	$3 = (*($5) + [8])
	*($5) = $3
	$6 = *($8 + [4])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = $6
	$6 = *($7)
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = *($8 + [8])
	if ( ((int_32)*($7) == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [8])
	
.LOOP $label$7:
	$6 = *($8)
	$8 = ($6 + [8])
	$7 = *($6 + [8])
	if ( ((int_32)$6 != (int_32)*($7)) ){ goto $label$7 }
	
.LABEL $label$4
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [5] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $89($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $89($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $89($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $89($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19280]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $89($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $89($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $89($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( ($0 == 0) ){ goto $label$1 }
	*($4 + [15]) = $0
	CALL prints_l(($4 + [15]), [1])
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [12]) = $1
	$0 = CALL $87([4], ($2 + [11]), [-1], $0, *($2 + [12]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $84 (int_32 $0)
{
}

int_32 .FUNC $83 ()
{
	return [10868]
}

void .FUNC $82 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $81 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $98($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $95($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10864])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $95($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $98($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $93(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10864])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $93(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $39 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [104]) + [24])) = (int_64)0
	*((($4 + [104]) + [40])) = [0]
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $5)
	*($4 + [192]) = ($4 + [88])
	*($4 + [16]) = ($4 + [104])
	CALL $41(($4 + [16]), ($4 + [192]))
	*(($3 = ($4 + [8]))) = *($4 + [96])
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4)
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [176])
	*($4 + [32]) = $1
	*($4 + [192]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($3 = ($4 + [72]))) = (int_64)0
	*(($4 + [80])) = [0]
	*($4 + [48]) = $0
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [16])
	CALL $42(($4 + [192]), ($4 + [104]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $98($2)
	
.LABEL $label$4
	CALL $30($3)
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [144])))
	
.LABEL $label$5
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$1 = ($global$0 - [80])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [64])) = [0]
	*($1 + [48]) = (int_64)-1
	$2 = *($0)
	*($1 + [32]) = $2
	*($1 + [40]) = $2
	*($1 + [56]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $3(($1 + [32]), $0)
	$4 = (CASTING uint_64)(uint_32 ($1 + [32]))
	
.LOOP $label$2:
	CALL eosio_assert([1], [9796])
	CALL eosio_assert([1], [9830])
	$0 = [0]
	$5 = CALL db_next_i64(*($3 + [120]), ($1 + [72]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $3(($1 + [32]), $5)
	
.LABEL $label$3
	CALL $5(($1 + [32]), $3)
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)$4)
	*($1 + [16]) = $2
	*($1 + [24]) = $2
	*($1) = ($1 + [16])
	CALL $85([8582], $1)
	$3 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	CALL $30(($1 + [56]))
	$global$0 = ($1 + [80])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL memory()
	*($3 + [112]) = [8905]
	*($3 + [116]) = CALL $92([8905])
	*($3 + [56]) = *($3 + [112])
	CALL $38(($3 + [120]), ($3 + [56]))
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	*($3 + [104]) = [8913]
	*($3 + [108]) = CALL $92([8913])
	*($3 + [48]) = *($3 + [104])
	CALL $38(($3 + [120]), ($3 + [48]))
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [8919])
	
.LABEL $label$1
	*($3 + [96]) = [8983]
	*($3 + [100]) = CALL $92([8983])
	*($3 + [40]) = *($3 + [96])
	CALL $38(($3 + [120]), ($3 + [40]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$3 }
	*($3 + [88]) = [8995]
	*($3 + [92]) = CALL $92([8995])
	*($3 + [32]) = *($3 + [88])
	CALL $38(($3 + [120]), ($3 + [32]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$3 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [1]
	*($3 + [8]) = *($3 + [80])
	CALL $39($0, (int_64)6138663591592764928, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)6182744531340525568) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)6112258149673041920) ){ goto $label$2 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3 + [16]) = *($3 + [72])
	CALL $40($1, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [68]) = [0]
	*($3 + [64]) = [3]
	*($3 + [24]) = *($3 + [64])
	CALL $40($1, $1, ($3 + [24]))
	
.LABEL $label$2
	CALL $84([0])
	$global$0 = ($3 + [128])
}

void .FUNC $78 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9171])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9171])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9171])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9171])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$1 = ($global$0 - [192])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [168])) = [0]
	*($1 + [152]) = (int_64)-1
	$2 = (int_64)0
	*($1 + [160]) = (int_64)0
	$3 = *($0)
	*($1 + [136]) = $3
	*($1 + [144]) = $3
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL $3(($1 + [136]), $4)
	*($1 + [28]) = [0]
	*($1 + [24]) = ($1 + [136])
	$3 = *(*(CALL $4(($1 + [24])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*(($4 = ($1 + [152]))) = $2
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [9440])
	$3 = ((int_64)*($4) + (int_64)-1)
	$6 = *(($1 + [164]))
	$5 = *(($1 + [160]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$4 = ($6 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$4 }
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($7 + [116])) == (int_32)($1 + [136])), [9357])
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	$4 = CALL db_find_i64(*($1 + [136]), *(($1 + [144])), (int_64)-8272109760875069440, $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $3(($1 + [136]), $4)
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)($1 + [136])), [9357])
	
.LABEL $label$2
	$5 = int_32((*(($7 + [36])) - *($7 + [32])) >> [3])
	$4 = [8357]
	$6 = *([8357])
	if ( ($6 == 0) ){ goto $label$6 }
	
.LOOP $label$8:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$7 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$6 = *($4)
	if ( $6 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL printui((CASTING uint_64)(uint_32 $5))
	CALL prints(($4 + [1]))
	
.LABEL $label$6
	$3 = *($0)
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [9594])
	CALL $34(($1 + [136]), $7, $3)
	$8 = int_32((*(($7 + [36])) - *(($7 + [32]))) >> [3])
	$4 = [8377]
	$6 = *([8377])
	if ( ($6 == 0) ){ goto $label$9 }
	
.LOOP $label$11:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$10 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$6 = *($4)
	if ( $6 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	CALL printui((CASTING uint_64)(uint_32 $8))
	CALL prints(($4 + [1]))
	
.LABEL $label$9
	$4 = ($1 + [152])
	$3 = *($4)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$12 }
	$3 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($1 + [136]), *(($1 + [144])), (int_64)-8272109760875069440, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	CALL $3(($1 + [136]), $6)
	*($1 + [28]) = [0]
	*($1 + [24]) = ($1 + [136])
	$3 = *(*(CALL $4(($1 + [24])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*(($1 + [152])) = $3
	
.LABEL $label$12
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [9440])
	$3 = *($4)
	$4 = *(($7 + [32]))
	$6 = *(($7 + [36]))
	$8 = CALL tapos_block_prefix()
	$9 = CALL tapos_block_num()
	$3 = (CASTING uint_64)(uint_32 int_32(($6 - $4) >> [3]))
	$3 = ((int_64)((uint_64)((int_64))(((int_64)((int_64)((int_64)$3 << (int_64)1) + (int_64)$3) + (int_64)-2) - CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$9 * (int_32)$8))) % (uint_64)$3) + (int_64)1
	*($1 + [128]) = $3)
	$4 = [8396]
	$6 = *([8396])
	if ( ($6 == 0) ){ goto $label$17 }
	
.LOOP $label$18:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$16 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$6 = *($4)
	if ( $6 ){ goto $label$18 }
	
.LABEL $label$17
	if ( ((int_64)*($1 + [128]) != (int_64)1) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	CALL printui($3)
	CALL prints(($4 + [1]))
	if ( ((int_64)*($1 + [128]) != (int_64)1) ){ goto $label$14 }
	
.LABEL $label$15
	*($1 + [128]) = (int_64)0
	$4 = [8421]
	$6 = *([8421])
	if ( ($6 == 0) ){ goto $label$14 }
	
.LOOP $label$20:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$19 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$6 = *($4)
	if ( $6 ){ goto $label$20 }
	goto $label$14 
	
.LABEL $label$19
	CALL printui((int_64)0)
	CALL prints(($4 + [1]))
	
.LABEL $label$14
	$8 = *($7 + [112])
	$4 = [8450]
	$6 = *([8450])
	if ( ($6 == 0) ){ goto $label$21 }
	
.LOOP $label$23:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$22 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$6 = *($4)
	if ( $6 ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	CALL prints(( [9785] ? [9790] : ($8 & [255]) ))
	CALL prints(($4 + [1]))
	
.LABEL $label$21
	$3 = *($0)
	*($1 + [24]) = ($1 + [128])
	CALL eosio_assert($5, [9594])
	CALL $35(($1 + [136]), $7, $3, ($1 + [24]))
	$10 = *($7 + [96])
	$4 = CALL $92([8463])
	if ( ($4 <= [8]) ){ goto $label$27 }
	CALL eosio_assert([0], [9004])
	goto $label$26 
	
.LABEL $label$27
	if ( ($4 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$2 = (int_64)0
	
.LOOP $label$28:
	$6 = *(($4 + [8462]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$29
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$28 }
	goto $label$24 
	
.LABEL $label$25
	$2 = (int_64)0
	
.LABEL $label$24
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9102])
	$3 = ((int_64)$2 & (int_64)72057594037927935)
	$11 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	$4 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$2 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$3 = $2
	$6 = [1]
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$3 = $2
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$5 = ($4 + [1])
	$4 = $5
	if ( $6 ){ goto $label$34 }
	$6 = [1]
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$6 = [0]
	
.LABEL $label$30
	CALL eosio_assert($6, [9151])
	*($1 + [32]) = $11
	*($1 + [24]) = $10
	$4 = [8467]
	$6 = *([8467])
	if ( ($6 == 0) ){ goto $label$35 }
	
.LOOP $label$37:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$36 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$6 = *($4)
	if ( $6 ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	CALL $2(($1 + [88]), ($1 + [24]))
	$6 = *($1 + [88])
	$5 = ($6 & [1])
	CALL prints_l(( *($1 + [96]) ? (($1 + [88]) | [1]) : $5 ), ( *($1 + [92]) ? uint_32($6 >> [1]) : $5 ))
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($1 + [96])))
	
.LABEL $label$38
	CALL prints(($4 + [1]))
	
.LABEL $label$35
	$3 = *($7 + [72])
	$4 = [8509]
	$6 = *([8509])
	if ( ($6 == 0) ){ goto $label$39 }
	
.LOOP $label$41:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$40 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$6 = *($4)
	if ( $6 ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	CALL printn($3)
	CALL prints(($4 + [1]))
	
.LABEL $label$39
	$5 = *(($7 + [112]))
	$4 = [8530]
	$6 = *([8530])
	if ( ($6 == 0) ){ goto $label$42 }
	
.LOOP $label$44:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$43 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$6 = *($4)
	if ( $6 ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	CALL prints(( [9785] ? [9790] : ($5 & [255]) ))
	CALL prints(($4 + [1]))
	
.LABEL $label$42
	*($1 + [80]) = (int_64)3617214756542218240
	$3 = *($0)
	*($1 + [72]) = $3
	*(($1 + [16])) = [0]
	*($1 + [8]) = (int_64)0
	$4 = CALL $92([8549])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$45 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$48 }
	*($1 + [8]) = ($4 << [1])
	$6 = (($1 + [8]) | [1])
	if ( $4 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$5 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($1 + [8]) = ($5 | [1])
	*($1 + [16]) = $6
	*($1 + [12]) = $4
	
.LABEL $label$47
	CALL memcpy($6, [8549], $4)
	
.LABEL $label$46
	*(($6 + $4)) = [0]
	$2 = *(($7 + [72]))
	*(($1 + [48])) = $11
	$4 = ($1 + [16])
	*(($1 + [64])) = *($4)
	*($4) = [0]
	*($1 + [24]) = $3
	$3 = *($1 + [8])
	*($1 + [8]) = (int_64)0
	*($1 + [40]) = $10
	*($1 + [56]) = $3
	*($1 + [32]) = $2
	$4 = CALL $8(($1 + [88]), ($1 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($1 + [24]))
	CALL $9(($1 + [176]), $4)
	$6 = *($1 + [176])
	CALL send_inline($6, (*($1 + [180]) - $6))
	$6 = *($1 + [176])
	if ( ($6 == 0) ){ goto $label$49 }
	*($1 + [180]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$49
	$6 = *($4 + [28])
	if ( ($6 == 0) ){ goto $label$50 }
	*(($4 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$50
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$51 }
	*(($4 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$51
	if ( ((*(($1 + [56])) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$52
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$53
	CALL $30(($1 + [160]))
	$global$0 = ($1 + [192])
	return (unreachable)
	
.LABEL $label$45
	CALL $78(($1 + [8]))
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $12(($3 + [56]), *(($3 + [60])))
	$4 = *($3 + [44])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($3 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($3 + [20])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($3 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $81($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}