(data (i32.const 4) "\e0i\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the eosio system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "withdraw\00")
(data (i32.const 160) "signin\00")
(data (i32.const 176) "drop\00")
(data (i32.const 192) "autograb\00")
(data (i32.const 208) "grab\00")
(data (i32.const 224) "reveal\00")
(data (i32.const 240) "autoreveal\00")
(data (i32.const 256) "setroom\00")
(data (i32.const 272) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 336) "invalid symbol name\00")
(data (i32.const 368) "read\00")
(data (i32.const 384) "divide by zero\00")
(data (i32.const 400) "signed division overflow\00")
(data (i32.const 432) "attempt to subtract asset with different symbol\00")
(data (i32.const 480) "subtraction underflow\00")
(data (i32.const 512) "subtraction overflow\00")
(data (i32.const 544) "multiplication overflow\00")
(data (i32.const 576) "multiplication underflow\00")
(data (i32.const 608) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 672) "quantity is too small\00")
(data (i32.const 704) "owner must be valid account\00")
(data (i32.const 736) "player number too large\00")
(data (i32.const 768) "cannot create objects in table of another contract\00")
(data (i32.const 832) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 896) "cannot pass end iterator to modify\00")
(data (i32.const 944) "object passed to modify is not in multi_index\00")
(data (i32.const 992) "cannot modify objects in table of another contract\00")
(data (i32.const 1056) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1120) "write\00")
(data (i32.const 1136) "error reading iterator\00")
(data (i32.const 1168) "invalid room\00")
(data (i32.const 1184) "invalid red envelop\00")
(data (i32.const 1216) "the red envelop has not robbed\00")
(data (i32.const 1248) "red envelope has not finished\00")
(data (i32.const 1280) "attempt to add asset with different symbol\00")
(data (i32.const 1328) "addition underflow\00")
(data (i32.const 1360) "addition overflow\00")
(data (i32.const 1392) "get\00")
(data (i32.const 1408) "no red envelop can be grabbed\00")
(data (i32.const 1440) "this red envelope has expired\00")
(data (i32.const 1472) "overdrawn balance can not grab the red envelope\00")
(data (i32.const 1520) "have already grabbed this red envelope\00")
(data (i32.const 1568) "the red envelop was robbed\00")
(data (i32.const 1600) "red envelop exception occurs\00")
(data (i32.const 1632) "waiting for the last red envelope to finish\00")
(data (i32.const 1680) "active\00")
(data (i32.const 1696) "qtconesbonus\00")
(data (i32.const 1712) "Withdrawn Dividend Pool Quantity\00")
(data (i32.const 1760) "afszzeosales\00")
(data (i32.const 1776) "Withdrawn Auction Pool Quantity\00")
(data (i32.const 1808) "opeyngasteam\00")
(data (i32.const 1824) "Withdrawn Team Pool Quantity\00")
(data (i32.const 1856) "lpmoyealucky\00")
(data (i32.const 1872) "Withdrawn Lucky Pool Quantity\00")
(data (i32.const 1904) "overdrawn balance\00")
(data (i32.const 1936) "already signed in today\00")
(data (i32.const 1968) "grabbing the red envelope, please withdraw later\00")
(data (i32.const 2032) "cannot increment end iterator\00")
(data (i32.const 2064) "no withdrawal balance\00")
(data (i32.const 2096) "Withdrawn Successfully - Play game everyday for mining RED tokens! Hongbao.one - the most fun multiplayer online red envelope game!\00")
(data (i32.const 10624) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "is_account" (func $fimport$12 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(import "env" "sha256" (func $fimport$19 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN7eosgame12eosluckydraw8transferEyyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE" (func $6))
(export "_ZN7eosgame12eosluckydraw8withdrawEy" (func $8))
(export "_ZN7eosgame12eosluckydraw6signinEy" (func $10))
(export "_ZN7eosgame12eosluckydraw4dropEyyRK11checksum256" (func $11))
(export "_ZN7eosgame12eosluckydraw8autograbEyyy" (func $13))
(export "_ZN7eosgame12eosluckydraw4grabEyyy" (func $15))
(export "_ZN7eosgame12eosluckydraw6revealEyRK11checksum256" (func $16))
(export "_ZN7eosgame12eosluckydraw10autorevealEyRK11checksum256S3_" (func $18))
(export "_ZN7eosgame12eosluckydraw7setroomEyN5eosio5assetEhy" (func $20))
(export "_ZN7eosgame12eosluckydraw7lotteryEyRK11checksum256" (func $27))
(export "_ZN7eosgame12eosluckydraw11add_balanceEyN5eosio5assetEb" (func $31))
(export "_ZN7eosgame12eosluckydraw7do_grabEyyyy" (func $46))
(export "_ZN7eosgame12eosluckydraw11sub_balanceEyN5eosio5assetE" (func $50))
(export "_ZN7eosgame12eosluckydraw8send_feeEN5eosio5assetE" (func $51))
(export "_ZN7eosgame12eosluckydraw17get_real_quantityEN5eosio5assetE" (func $66))
(export "malloc" (func $67))
(export "free" (func $70))
(export "memcmp" (func $77))
(export "strlen" (func $78))
(table $0 10 10 anyfunc)
(elem (i32.const 0) $79 $15 $20 $13 $6 $18 $11 $16 $8 $10)



void .FUNC $79 ()
{
	(unreachable)
}

void .FUNC _ZN7eosgame12eosluckydraw10autorevealEyRK11checksum256S3_ (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [240])
	*([0] + [4]) = $4
	CALL require_auth(*($0))
	CALL _ZN7eosgame12eosluckydraw7lotteryEyRK11checksum256($4, $0, $1, $2)
	CALL _ZN7eosgame12eosluckydraw4dropEyyRK11checksum256($0, *($4 + [224]), $1, $3)
	$0 = *($4 + [56])
	if ( ($0 == 0) ){ goto $label$1 }
	*(($4 + [60])) = $0
	CALL $72($0)
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [240])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [368])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [368])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [368])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $64(*($1), ($0 + [32]))
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = (*([0] + [4]) - [208])
	$9 = $3
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	$7 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $1)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)0
	*(($9 + [32])) = (int_64)0
	*(($9 + [24])) = (int_64)0
	*(($9 + [72])) = (int_64)0
	*(($9 + [64])) = (int_64)0
	*(($9 + [56])) = (int_64)0
	*($9 + [16]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [368])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((uint_32)($1 + [-8]) > (uint_32)[31]), [368])
	$3 = ($9 + [16])
	CALL memcpy($3, ($7 + [8]), [32])
	CALL eosio_assert(((uint_32)($1 + [-40]) > (uint_32)[31]), [368])
	$4 = ($9 + [48])
	CALL memcpy($4, ($7 + [40]), [32])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	*(($1 = (($9 + [112]) + [24]))) = *(($3 + [24]))
	*(($7 = (($9 + [112]) + [16]))) = *(($3 + [16]))
	*($9 + [124]) = *(($3 + [12]))
	*($9 + [120]) = *(($3 + [8]))
	$5 = *($9)
	*($9 + [112]) = *($3)
	*(($3 = (($9 + [80]) + [24]))) = *(($4 + [24]))
	*(($6 = (($9 + [80]) + [16]))) = *(($4 + [16]))
	*($9 + [88]) = *(($4 + [8]))
	*($9 + [80]) = *($4)
	*((($9 + [176]) + [24])) = *($3)
	*((($9 + [176]) + [16])) = *($6)
	*($9 + [184]) = *($9 + [88])
	*($9 + [176]) = *($9 + [80])
	*((($9 + [144]) + [24])) = *($1)
	*((($9 + [144]) + [16])) = *($7)
	*($9 + [152]) = *($9 + [120])
	*($9 + [144]) = *($9 + [112])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	CALL void $1((int_32 $5), (int_64 ($9 + [144])), (int_32 ($9 + [176])), (int_32 $8))
	*([0] + [4]) = ($9 + [208])
	return [1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $71($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZN7eosgame12eosluckydraw17get_real_quantityEN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	$5 = *($2)
	$3 = *($2 + [8])
	CALL eosio_assert([1], [384])
	CALL eosio_assert([1], [400])
	*($0) = *($2)
	$4 = *($2 + [8])
	*(($0 + [8])) = $4
	CALL eosio_assert(((int_64)$3 == (int_64)$4), [432])
	$5 = ((int_64)$5 / (int_64)20)
	$5 = (int_64)
	*($0) = $5(*($0) - ( $5 ? (int_64)1 : ((int_64)$5 > (int_64)1) )))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [512])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1392])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $55($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [368])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $73 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $68([2228], $0)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [232]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [992])
	$4 = *($1)
	*($1 + [216]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = *($3)
	*(($1 + [176])) = *($7)
	*(($1 + [200])) = *(($7 + [24]))
	*(($1 + [192])) = *(($7 + [16]))
	*(($1 + [184])) = *(($7 + [8]))
	$7 = *($3 + [4])
	*($1 + [144]) = *($7)
	*(($1 + [168])) = *(($7 + [24]))
	*(($1 + [160])) = *(($7 + [16]))
	*(($1 + [152])) = *(($7 + [8]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1056])
	$5 = *($1 + [56])
	$3 = *(($1 + [60]))
	$6 = ($3 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$7 = [49]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$7 = ((((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[28]) + $7) + [28])
	
.LABEL $label$2
	$3 = ($7 + [148])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($9 + [4]) = $7
	*($9) = $7
	*($9 + [8]) = ($7 + $3)
	CALL $32($9, $1)
	CALL db_update_i64(*(($1 + [236])), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1136])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $71([256])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [272])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [336])
	*($4 + [64]) = [0]
	*($4 + [56 align=4]) = (int_64)0
	*($4 + [232]) = $0
	CALL $41(($8 + [32]), $4)
	*($4 + [236]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [236])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $42($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($5 + [56])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($5 + [60])) = $6
	CALL $72($6)
	
.LABEL $label$15
	CALL $72($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [112])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*(($10 + [40])) = (int_64)1398362884
	*($10 + [32]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert([1], [272])
	$7 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	CALL eosio_assert($8, [336])
	*($10 + [56]) = (int_64)0
	*($10 + [48]) = [0]
	*($10 + [100]) = $6
	*($10 + [96]) = $6
	*($10 + [104]) = ($6 + $3)
	*($10 + [64]) = ($10 + [96])
	*($10 + [80]) = ($10 + [24])
	CALL $22(($10 + [80]), ($10 + [64]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($6)
	
.LABEL $label$9
	*(($1 = (($10 + [64]) + [8]))) = *(($10 + [40]))
	$7 = *($10 + [24])
	*($10 + [64]) = *($10 + [32])
	$4 = *(($10 + [56]))
	$6 = *(($10 + [48]))
	*((($10 + [80]) + [8])) = *($1)
	*($10 + [80]) = *($10 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$9 = *((*($1) + $9))
	
.LABEL $label$10
	$5 = *((($10 + [80]) + [8]))
	*((($10 + [96]) + [8])) = $5
	*((($10 + [8]) + [8])) = $5
	$5 = *($10 + [80])
	*($10 + [96]) = $5
	*($10 + [8]) = $5
	CALL void $1((int_32 $7), (int_64 ($10 + [8])), (int_32 ($6 & [255])), (int_32 $4), (int_64 $9))
	*([0] + [4]) = ($10 + [112])
	return [1]
}

void .FUNC _ZN7eosgame12eosluckydraw7setroomEyN5eosio5assetEhy (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [112])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$5 = *($2 + [8])
	$9 = *($2)
	CALL eosio_assert([1], [384])
	CALL eosio_assert([1], [400])
	CALL eosio_assert([1], [432])
	$6 = ((int_64)$9 / (int_64)20)
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($9 - ( $6 ? (int_64)1 : ((int_64)$6 > (int_64)1) ))) > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [512])
	CALL eosio_assert([1], [272])
	$10 = [0]
	$9 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [336])
	CALL eosio_assert([1], [544])
	CALL eosio_assert([1], [576])
	CALL eosio_assert(((int_64)$5 == (int_64)1397703940), [608])
	CALL eosio_assert(((int_64)$6 >= (int_64)(CASTING uint_64)(uint_32 $3)), [672])
	CALL eosio_assert(CALL $fimport$12($4), [704])
	CALL eosio_assert(($3 <= [11]), [736])
	$10 = [0]
	*(($11 + [40])) = [0]
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	$9 = *($0)
	*($11 + [8]) = $9
	*($11 + [16]) = $9
	$8 = CALL db_find_i64($9, $9, (int_64)-4816269947984412672, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$9 }
	$10 = CALL $23(($11 + [8]), $8)
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)($11 + [8])), [832])
	$6 = *($0)
	CALL eosio_assert([1], [896])
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)($11 + [8])), [944])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)CALL $fimport$3()), [992])
	*(($10 + [28])) = *(($2 + [12]))
	*(($10 + [24])) = *(($2 + [8]))
	*(($10 + [20])) = *(($2 + [4]))
	*($10 + [16]) = *($2)
	$9 = *($10)
	*($10 + [32]) = $3
	*($10 + [40]) = $4
	CALL eosio_assert([1], [1056])
	*($11 + [104]) = (($11 + [48]) + [41])
	*($11 + [100]) = ($11 + [48])
	*($11 + [96]) = ($11 + [48])
	CALL $24(($11 + [96]), $10)
	CALL db_update_i64(*($10 + [52]), $6, ($11 + [48]), [41])
	$10 = ($11 + [24])
	if ( (uint_64)($9 <= *($10)) ){ goto $label$8 }
	*($10) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$8 = *($11 + [32])
	if ( $8 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$6 = *($0)
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)CALL $fimport$3()), [768])
	*(($8 = CALL $71([64])) + [24]) = (int_64)1398362884
	*($8 + [16]) = (int_64)0
	CALL eosio_assert([1], [272])
	$7 = ($8 + [16])
	$9 = (int_64)5462355
	
.LOOP $label$11:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$0 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	CALL eosio_assert($0, [336])
	*($8 + [48]) = ($11 + [8])
	*($8) = $1
	*(($7 + [12])) = *(($2 + [12]))
	*(($7 + [8])) = *(($2 + [8]))
	*(($7 + [4])) = *(($2 + [4]))
	*($7) = *($2)
	*($8 + [32]) = $3
	*($8 + [40]) = $4
	*($11 + [104]) = (($11 + [48]) + [41])
	*($11 + [100]) = ($11 + [48])
	*($11 + [96]) = ($11 + [48])
	CALL $24(($11 + [96]), $8)
	$9 = *($8)
	$2 = CALL db_store_i64(*((($11 + [8]) + [8])), (int_64)-4816269947984412672, $6, $9, ($11 + [48]), [41])
	*($8 + [52]) = $2
	$10 = ($11 + [24])
	if ( (uint_64)($9 <= *($10)) ){ goto $label$14 }
	*($10) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($11 + [96]) = $8
	$9 = *($8)
	*($11 + [48]) = $9
	*($11 + [92]) = $2
	$3 = ($11 + [36])
	$10 = *($3)
	if ( ((uint_32)$10 >= (uint_32)*(($11 + [40]))) ){ goto $label$16 }
	*($10 + [8]) = $9
	*($10 + [16]) = $2
	*($11 + [96]) = [0]
	*($10) = $8
	*($3) = ($10 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $25(($11 + [32]), ($11 + [96]), ($11 + [48]), ($11 + [92]))
	
.LABEL $label$15
	$10 = *($11 + [96])
	*($11 + [96]) = [0]
	if ( ($10 == 0) ){ goto $label$8 }
	CALL $72($10)
	
.LABEL $label$8
	$8 = *($11 + [32])
	if ( ($8 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$3 = ($11 + [36])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$18 }
	
.LOOP $label$19:
	$10 = ($10 + [-24])
	$2 = *($10)
	*($10) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	CALL $72($2)
	
.LABEL $label$20
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$19 }
	$10 = *(($11 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$10 = $8
	
.LABEL $label$17
	*($3) = $8
	CALL $72($10)
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [112])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1136])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $71([64])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [272])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [336])
	*($4 + [48]) = $0
	CALL $26(($8 + [32]), $4)
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $25($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $72($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [368])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [368])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [368])
	CALL memcpy(($0 + [24]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [368])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $71(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $72($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN7eosgame12eosluckydraw7lotteryEyRK11checksum256 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$16 = (*([0] + [4]) - [272])
	*([0] + [4]) = $16
	*(((($19 = $16) + [232]) + [32])) = [0]
	*($19 + [248]) = (int_64)-1
	*($19 + [256]) = (int_64)0
	$13 = *($1)
	*($19 + [232]) = $13
	*($19 + [240]) = $13
	$18 = [0]
	$10 = CALL db_find_i64($13, $13, (int_64)-4816269947984412672, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$18 = CALL $23(($19 + [232]), $10)
	CALL eosio_assert(((int_32)*($18 + [48]) == (int_32)($19 + [232])), [832])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$18 != (int_32)[0]), [1168])
	*((($19 + [192]) + [32])) = [0]
	*($19 + [216]) = (int_64)0
	*($19 + [208]) = (int_64)-1
	$13 = *($1)
	*($19 + [192]) = $13
	*($19 + [200]) = $2
	$18 = CALL db_find_i64($13, $2, (int_64)7035937633859534848, *($18 + [8]))
	if ( ((int_32)$18 <= (int_32)[-1]) ){ goto $label$3 }
	$15 = CALL $28(($19 + [192]), $18)
	CALL eosio_assert(((int_32)*($15 + [232]) == (int_32)($19 + [192])), [832])
	*($19 + [188]) = $15
	*($19 + [184]) = ($19 + [192])
	$14 = (($19 + [184]) | [4])
	goto $label$2 
	
.LABEL $label$3
	$15 = [0]
	*($19 + [188]) = [0]
	*($19 + [184]) = ($19 + [192])
	$14 = (($19 + [184]) | [4])
	
.LABEL $label$2
	$17 = [0]
	$4 = ((int_32)$15 != (int_32)[0])
	CALL eosio_assert($4, [1184])
	$5 = uint_32((*(($15 + [60])) - *($15 + [56])) >> [5])
	*($19 + [183]) = $5
	$10 = ($5 & [255])
	CALL eosio_assert(((int_32)*($15 + [40]) == (int_32)$10), [1216])
	CALL eosio_assert((*($15 + [40]) <= [11]), [736])
	CALL eosio_assert((*($15 + [216]) == 0), [1248])
	CALL sha256($3, [32], ($19 + [144]))
	$2 = *($1)
	*($19) = $3
	*($19 + [4]) = ($19 + [144])
	CALL eosio_assert($4, [896])
	CALL $29(($19 + [192]), $15, $2, $19)
	CALL sha256(($15 + [80]), [128], ($19 + [112]))
	$18 = *($19 + [143])
	$3 = *($19 + [112])
	$11 = $16
	$12 = ($16 - ((($10 << [2]) + [15]) & [2032]))
	*([0] + [4]) = $12
	*($19 + [108]) = [0]
	$9 = ((uint_32)((uint_32)$3 / (uint_32)$10) % (uint_32)$10)
	$7 = ((uint_32)((uint_32)$18 / (uint_32)$10) % (uint_32)$10)
	$8 = ((uint_32)$3 % (uint_32)$10)
	$6 = ((uint_32)$18 % (uint_32)$10)
	if ( ($10 == 0) ){ goto $label$4 }
	$17 = [0]
	$16 = $12
	$18 = [0]
	
.LOOP $label$5:
	$3 = (($19 + [112]) + $18)
	$3 = ((*(($3 + [11])) + *(($3 + [1]))) + *(($3 + [21])))
	*($16) = $3
	$17 = ($17 + $3)
	$16 = ($16 + [4])
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)$10) ){ goto $label$5 }
	*($19 + [108]) = $17
	
.LABEL $label$4
	$16 = ((uint_32)$17 / (uint_32)$10)
	$18 = ($16 << [1])
	if ( ((uint_32)$6 >= (uint_32)$10) ){ goto $label$6 }
	$3 = ($12 + ($6 << [2]))
	$17 = *($3)
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$6 }
	*($3) = ($17 + $18)
	
.LABEL $label$6
	if ( ((uint_32)$7 >= (uint_32)$10) ){ goto $label$7 }
	$3 = ($12 + ($7 << [2]))
	$17 = *($3)
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$7 }
	*($3) = ($17 + $18)
	
.LABEL $label$7
	$16 = uint_32($16 >> [1])
	if ( ((uint_32)$8 >= (uint_32)$10) ){ goto $label$8 }
	$18 = ($12 + ($8 << [2]))
	$3 = *($18)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	$3 = ($3 - $16)
	*($18) = ( $3 ? [0] : ((int_32)$3 > (int_32)[0]) )
	
.LABEL $label$8
	if ( ((uint_32)$9 >= (uint_32)$10) ){ goto $label$9 }
	$18 = ($12 + ($9 << [2]))
	$3 = *($18)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	$16 = ($3 - $16)
	*($18) = ( $16 ? [0] : ((int_32)$16 > (int_32)[0]) )
	
.LABEL $label$9
	$18 = [0]
	*($19 + [108]) = [0]
	if ( (($5 & [255]) == 0) ){ goto $label$10 }
	$16 = $12
	$3 = [0]
	
.LOOP $label$11:
	$18 = ($18 + *($16))
	$16 = ($16 + [4])
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)$10) ){ goto $label$11 }
	*($19 + [108]) = $18
	
.LABEL $label$10
	*(($16 = (($19 + [88]) + [8]))) = *(($15 + [32]))
	*($19 + [88]) = *($15 + [24])
	*((($19 + [72]) + [8])) = *($16)
	*($19 + [72]) = *($19 + [88])
	*($19 + [64]) = (int_64)1397703940
	*($19 + [56]) = (int_64)1
	CALL eosio_assert([1], [272])
	$2 = (int_64)5459781
	$16 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$18 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$18 = [0]
	
.LABEL $label$12
	CALL eosio_assert($18, [336])
	*((($19 + [40]) + [8])) = *((($19 + [88]) + [8]))
	*($19 + [40]) = *($19 + [88])
	$2 = *($1)
	*($19 + [4]) = $12
	*($19) = $10
	*($19 + [8]) = ($19 + [183])
	*($19 + [12]) = ($19 + [72])
	*($19 + [16]) = ($19 + [88])
	*($19 + [20]) = ($19 + [108])
	*($19 + [24]) = ($19 + [56])
	*($19 + [28]) = ($19 + [40])
	*($19 + [32]) = ($19 + [184])
	*($19 + [36]) = $1
	CALL eosio_assert($4, [896])
	CALL $30(($19 + [192]), $15, $2, $19)
	*(($18 = CALL memcpy($0, ($16 = *($14)), [56])) + [56]) = (int_64)0
	*(($18 + [64])) = [0]
	$3 = (*(($16 + [60])) - *($16 + [56]))
	$10 = int_32($3 >> [5])
	if ( ($10 == 0) ){ goto $label$18 }
	if ( ((uint_32)$10 >= (uint_32)[134217728]) ){ goto $label$17 }
	$3 = CALL $71($3)
	*(($18 + [56])) = $3
	*(($18 + [64])) = ($3 + ($10 << [5]))
	*(($10 = ($18 + [60]))) = $3
	$15 = *(($16 + [56]))
	$17 = (*(($16 + [60])) - $15)
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($3, $15, $17)
	*($10) = (*($10) + $17)
	
.LABEL $label$18
	CALL memcpy(($18 + [80]), ($16 + [80]), [152])
	$11
	$10 = *($19 + [216])
	if ( ($10 == 0) ){ goto $label$19 }
	$17 = ($19 + [220])
	$16 = *($17)
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$21 }
	
.LOOP $label$22:
	$16 = ($16 + [-24])
	$18 = *($16)
	*($16) = [0]
	if ( ($18 == 0) ){ goto $label$23 }
	$3 = *($18 + [56])
	if ( ($3 == 0) ){ goto $label$24 }
	*(($18 + [60])) = $3
	CALL $72($3)
	
.LABEL $label$24
	CALL $72($18)
	
.LABEL $label$23
	if ( ((int_32)$10 != (int_32)$16) ){ goto $label$22 }
	$16 = *(($19 + [216]))
	goto $label$20 
	
.LABEL $label$21
	$16 = $10
	
.LABEL $label$20
	*($17) = $10
	CALL $72($16)
	
.LABEL $label$19
	$3 = *($19 + [256])
	if ( ($3 == 0) ){ goto $label$25 }
	$10 = ($19 + [260])
	$16 = *($10)
	if ( ((int_32)$16 == (int_32)$3) ){ goto $label$27 }
	
.LOOP $label$28:
	$16 = ($16 + [-24])
	$18 = *($16)
	*($16) = [0]
	if ( ($18 == 0) ){ goto $label$29 }
	CALL $72($18)
	
.LABEL $label$29
	if ( ((int_32)$3 != (int_32)$16) ){ goto $label$28 }
	$16 = *(($19 + [256]))
	goto $label$26 
	
.LABEL $label$27
	$16 = $3
	
.LABEL $label$26
	*($10) = $3
	CALL $72($16)
	
.LABEL $label$25
	*([0] + [4]) = ($19 + [272])
	return (unreachable)
	
.LABEL $label$17
	CALL $75(($18 + [56]))
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [368])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [368])
	CALL memcpy(($1 + [32]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $71(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $72($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [5])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$4 = [134217727]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$4 = int_32($7 >> [4])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $71(($4 << [5]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $75($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [5])))) = *($1)
	*(($3 + [24])) = *(($1 + [24]))
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [5]))
	$3 = ($3 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $72($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	*($0 + [8]) = (int_64)0
	*(($3 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [272])
	$2 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [336])
	*($0) = $1
	CALL eosio_assert([1], [272])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [336])
	*(($0 + [16])) = (int_64)1397703940
	*(($0 + [8])) = (int_64)0
	*($0 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	return $0
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10710]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10712])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10710]) = [1]
	$7 = ($7 << [16])
	*([0] + [10712]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10712])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10712]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10710]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10710]) = [1]
	$3 = ($3 << [16])
	*([0] + [10712]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10712])
	
.LABEL $label$8
	*([0] + [10712]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $69($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10624])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1392])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $4) >> [5])
	$7 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$4 }
	CALL $44($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	$5 = ($4 + ($7 << [5]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $45($0, $4)
	$4 = ($4 + [32])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $71(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [56])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [60])) = $6
	CALL $72($6)
	
.LABEL $label$11
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $72($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [368])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [368])
	CALL memcpy(($1 + [40]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $43($0, ($1 + [56]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [368])
	CALL memcpy(($1 + [80]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [368])
	CALL memcpy(($1 + [112]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [368])
	CALL memcpy(($1 + [144]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [368])
	CALL memcpy(($1 + [176]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [368])
	CALL memcpy(($1 + [208]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [368])
	CALL memcpy(($1 + [212]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [368])
	CALL memcpy(($1 + [216]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [224]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [368])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [232]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [992])
	$4 = *($1)
	$9 = $10
	$7 = CALL $48($9, *(*($3)))
	$6 = ($1 + [60])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)*(($1 + [64]))) ){ goto $label$2 }
	*($5) = *($9)
	*(($5 + [24])) = *(($9 + [24]))
	*(($5 + [16])) = *(($9 + [16]))
	*(($5 + [8])) = *(($9 + [8]))
	*($6) = (*($6) + [32])
	goto $label$1 
	
.LABEL $label$2
	CALL $49(($1 + [56]), $7)
	
.LABEL $label$1
	if ( ((int_32)(*(*($3 + [4])) + [1]) != (int_32)*(*(*($3 + [8]) + [4]) + [40])) ){ goto $label$3 }
	*($1 + [212]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1056])
	$6 = *($1 + [56])
	$5 = *(($1 + [60]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [5]))
	$3 = [49]
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	$3 = ((((int_32)uint_32(($7 + [-32]) >> [5]) * (int_32)[28]) + $3) + [28])
	
.LABEL $label$5
	$5 = ($3 + [148])
	if ( ($5 <= [513]) ){ goto $label$7 }
	$3 = CALL malloc($5)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($10 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$6
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($3 + $5)
	CALL $32($9, $1)
	CALL db_update_i64(*(($1 + [236])), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$8 }
	CALL free($3)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [32])
}

void .FUNC _ZN7eosgame12eosluckydraw7do_grabEyyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	*([0] + [4]) = $9
	*($9 + [152]) = $1
	*((($9 + [112]) + [32])) = [0]
	*($9 + [128]) = (int_64)-1
	*($9 + [136]) = (int_64)0
	$1 = *($0)
	*($9 + [112]) = $1
	*($9 + [120]) = $1
	$8 = [0]
	$6 = CALL db_find_i64($1, $1, (int_64)-4816269947984412672, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $23(($9 + [112]), $6)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($9 + [112])), [832])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1168])
	*((($9 + [72]) + [32])) = [0]
	*($9 + [88]) = (int_64)-1
	*($9 + [96]) = (int_64)0
	$1 = *($0)
	*($9 + [72]) = $1
	*($9 + [80]) = $2
	$6 = CALL db_find_i64($1, $2, (int_64)7035937633859534848, *($8 + [8]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL $28(($9 + [72]), $6)
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)($9 + [72])), [832])
	*($9 + [68]) = $6
	*($9 + [64]) = ($9 + [72])
	$7 = (($9 + [64]) | [4])
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	*($9 + [68]) = [0]
	*($9 + [64]) = ($9 + [72])
	$7 = (($9 + [64]) | [4])
	
.LABEL $label$2
	$5 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1408])
	CALL eosio_assert(((int_64)*($6) == (int_64)$3), [1440])
	*(($9 + [56])) = [0]
	$1 = *($0)
	*($9 + [24]) = $1
	*($9 + [40]) = (int_64)-1
	*($9 + [48]) = (int_64)0
	*($9 + [32]) = $1
	$2 = *($9 + [152])
	$0 = CALL db_find_i64($1, $1, (int_64)-2187881461846114304, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $36(($9 + [24]), $0)
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)($9 + [24])), [832])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)*(($8 + [24]))), [608])
	$5 = ((int_64)*($0 + [8]) >= (int_64)*($8 + [16]))
	$6 = *($7)
	$2 = *($9 + [152])
	
.LABEL $label$4
	CALL eosio_assert($5, [1472])
	$5 = ($6 + [60])
	$0 = *($5)
	$8 = *($6 + [56])
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$5 }
	$8 = ($8 + [32])
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$6 }
	$8 = $0
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$8 == (int_32)*($5)), [1520])
	$8 = int_32((*($5) - *($6 + [56])) >> [5])
	*($9 + [23]) = $8
	CALL eosio_assert((($8 & [255]) <= *($6 + [40])), [1568])
	*($9 + [12]) = ($9 + [23])
	*($9 + [8]) = ($9 + [152])
	*($9 + [16]) = ($9 + [64])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [896])
	CALL $47(($9 + [72]), $6, $4, ($9 + [8]))
	$6 = *($9 + [48])
	if ( ($6 == 0) ){ goto $label$7 }
	$5 = ($9 + [52])
	$8 = *($5)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $72($0)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$10 }
	$8 = *(($9 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $6
	
.LABEL $label$8
	*($5) = $6
	CALL $72($8)
	
.LABEL $label$7
	$5 = *($9 + [96])
	if ( ($5 == 0) ){ goto $label$12 }
	$7 = ($9 + [100])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	$6 = *($0 + [56])
	if ( ($6 == 0) ){ goto $label$17 }
	*(($0 + [60])) = $6
	CALL $72($6)
	
.LABEL $label$17
	CALL $72($0)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$15 }
	$8 = *(($9 + [96]))
	goto $label$13 
	
.LABEL $label$14
	$8 = $5
	
.LABEL $label$13
	*($7) = $5
	CALL $72($8)
	
.LABEL $label$12
	$6 = *($9 + [136])
	if ( ($6 == 0) ){ goto $label$18 }
	$5 = ($9 + [140])
	$8 = *($5)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$20 }
	
.LOOP $label$21:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$22 }
	CALL $72($0)
	
.LABEL $label$22
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$21 }
	$8 = *(($9 + [136]))
	goto $label$19 
	
.LABEL $label$20
	$8 = $6
	
.LABEL $label$19
	*($5) = $6
	CALL $72($8)
	
.LABEL $label$18
	*([0] + [4]) = ($9 + [160])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [368])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [368])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [368])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$8 = *($0)
	$2 = int_32(($6 - $8) >> [5])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$7 = ($7 - $8)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($7 >> [4])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $71(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*($6 + [8]) = (int_64)0
	*(($6 = ($6 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [272])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [336])
	$6 = (*($8) + [32])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $75($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [5]))
	$2 = ($7 + ($2 << [5]))
	$8 = $2
	
.LOOP $label$14:
	*($8 + [8]) = (int_64)0
	*(($6 = ($8 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [272])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [336])
	$8 = ($8 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$20
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $72($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $72 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC _ZN7eosgame12eosluckydraw8send_feeEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [192])
	*([0] + [4]) = $17
	$12 = (int_64)0
	$11 = (int_64)$14 >> (int_64)63
	$14 = *($1)
	CALL __multi3(($17 + [40]), $14, $11), (int_64)55, (int_64)0)
	CALL __multi3(($17 + [24]), $14, $11, (int_64)25, (int_64)0)
	CALL __multi3(($17 + [8]), $14, $11, (int_64)5, (int_64)0)
	$2 = *($1 + [8])
	$13 = *((($17 + [40]) + [8]))
	$11 = *($17 + [40])
	CALL eosio_assert(( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$13 < (int_64)0) : (int_64)($13 == 0) ), [544])
	CALL eosio_assert(( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$13 > (int_64)-1) : ((int_64)$13 == (int_64)-1) ), [576])
	CALL eosio_assert([1], [384])
	CALL eosio_assert([1], [400])
	$13 = *((($17 + [24]) + [8]))
	$4 = *($17 + [24])
	CALL eosio_assert(( (uint_64)($4 <= (int_64)4611686018427387904) ? ((int_64)$13 < (int_64)0) : (int_64)($13 == 0) ), [544])
	CALL eosio_assert(( ((uint_64)$4 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$13 > (int_64)-1) : ((int_64)$13 == (int_64)-1) ), [576])
	CALL eosio_assert([1], [384])
	CALL eosio_assert([1], [400])
	$13 = *((($17 + [8]) + [8]))
	$6 = *($17 + [8])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$13 < (int_64)0) : (int_64)($13 == 0) ), [544])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$13 > (int_64)-1) : ((int_64)$13 == (int_64)-1) ), [576])
	CALL eosio_assert([1], [384])
	CALL eosio_assert([1], [400])
	CALL eosio_assert([1], [432])
	$3 = ((int_64)$11 / (int_64)100)
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($14 - $3)) > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [512])
	CALL eosio_assert([1], [432])
	$5 = ((int_64)$4 / (int_64)100)
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($14 - $5)) > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [512])
	CALL eosio_assert([1], [432])
	$7 = ((int_64)$6 / (int_64)100)
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($14 - $7)) > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [512])
	if ( ((int_64)$11 < (int_64)100) ){ goto $label$4 }
	$15 = *($0)
	$11 = (int_64)59
	$1 = [1680]
	$13 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$10 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$9 = ($9 + [165])
	goto $label$8 
	
.LABEL $label$10
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$6
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$5 }
	*($17 + [128]) = $13
	*($17 + [120]) = $15
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [112]
	$13 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$16 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$9 = ($9 + [165])
	goto $label$14 
	
.LABEL $label$16
	$14 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$12
	$1 = ($1 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$11 }
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [128]
	$15 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$22 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$9 = ($9 + [165])
	goto $label$20 
	
.LABEL $label$22
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$18
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$17 }
	$12 = (int_64)0
	$14 = (int_64)59
	$1 = [1696]
	$16 = (int_64)0
	
.LOOP $label$23:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$24 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$9 = ($9 + [165])
	goto $label$25 
	
.LABEL $label$26
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$24
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$11 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$23 }
	*(($17 + [64])) = [0]
	*($17 + [56]) = (int_64)0
	$1 = CALL strlen([1712])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$29 }
	*($17 + [56]) = ($1 << [1])
	$9 = (($17 + [56]) | [1])
	if ( $1 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$10 = (($1 + [16]) & [-16])
	$9 = CALL $71($10)
	*($17 + [56]) = ($10 | [1])
	*($17 + [64]) = $9
	*($17 + [60]) = $1
	
.LABEL $label$28
	CALL memcpy($9, [1712], $1)
	
.LABEL $label$27
	*(($9 + $1)) = [0]
	*(($17 + [96])) = $2
	*(($17 + [108])) = *($17 + [60])
	*($17 + [80]) = $16
	$1 = ($17 + [64])
	*(($17 + [112])) = *($1)
	*($17 + [72]) = *($0)
	*($17 + [88]) = $3
	*($17 + [104]) = *($17 + [56])
	*($17 + [56]) = [0]
	*($17 + [60]) = [0]
	*($1) = [0]
	$1 = CALL $53(($17 + [136]), ($17 + [120]), $13, $15, ($17 + [72]))
	CALL $54(($17 + [176]), $1)
	$9 = *($17 + [176])
	CALL send_inline($9, (*($17 + [180]) - $9))
	$9 = *($17 + [176])
	if ( ($9 == 0) ){ goto $label$30 }
	*($17 + [180]) = $9
	CALL $72($9)
	
.LABEL $label$30
	$9 = *($1 + [28])
	if ( ($9 == 0) ){ goto $label$31 }
	*(($1 + [32])) = $9
	CALL $72($9)
	
.LABEL $label$31
	$9 = *($1 + [16])
	if ( ($9 == 0) ){ goto $label$32 }
	*(($1 + [20])) = $9
	CALL $72($9)
	
.LABEL $label$32
	if ( ((*(($17 + [104])) & [1]) == 0) ){ goto $label$33 }
	CALL $72(*(($17 + [112])))
	
.LABEL $label$33
	if ( ((*($17 + [56]) & [1]) == 0) ){ goto $label$4 }
	CALL $72(*(($17 + [64])))
	
.LABEL $label$4
	if ( ((int_64)$4 < (int_64)100) ){ goto $label$34 }
	$15 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [1680]
	$13 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$40 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$9 = ($9 + [165])
	goto $label$38 
	
.LABEL $label$40
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$36
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$35 }
	*($17 + [128]) = $13
	*($17 + [120]) = $15
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [112]
	$13 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$46 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$9 = ($9 + [165])
	goto $label$44 
	
.LABEL $label$46
	$14 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$42
	$1 = ($1 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$41 }
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [128]
	$15 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$52 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$9 = ($9 + [165])
	goto $label$50 
	
.LABEL $label$52
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$48
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$47 }
	$12 = (int_64)0
	$14 = (int_64)59
	$1 = [1760]
	$16 = (int_64)0
	
.LOOP $label$53:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$54 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$9 = ($9 + [165])
	goto $label$55 
	
.LABEL $label$56
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$54
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$11 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$53 }
	*(($17 + [64])) = [0]
	*($17 + [56]) = (int_64)0
	$1 = CALL strlen([1776])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$59 }
	*($17 + [56]) = ($1 << [1])
	$9 = (($17 + [56]) | [1])
	if ( $1 ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	$10 = (($1 + [16]) & [-16])
	$9 = CALL $71($10)
	*($17 + [56]) = ($10 | [1])
	*($17 + [64]) = $9
	*($17 + [60]) = $1
	
.LABEL $label$58
	CALL memcpy($9, [1776], $1)
	
.LABEL $label$57
	*(($9 + $1)) = [0]
	*(($17 + [96])) = $2
	*(($17 + [108])) = *($17 + [60])
	*($17 + [80]) = $16
	$1 = ($17 + [64])
	*(($17 + [112])) = *($1)
	*($17 + [72]) = *($0)
	*($17 + [88]) = $5
	*($17 + [104]) = *($17 + [56])
	*($17 + [56]) = [0]
	*($17 + [60]) = [0]
	*($1) = [0]
	$1 = CALL $53(($17 + [136]), ($17 + [120]), $13, $15, ($17 + [72]))
	CALL $54(($17 + [176]), $1)
	$9 = *($17 + [176])
	CALL send_inline($9, (*($17 + [180]) - $9))
	$9 = *($17 + [176])
	if ( ($9 == 0) ){ goto $label$60 }
	*($17 + [180]) = $9
	CALL $72($9)
	
.LABEL $label$60
	$9 = *($1 + [28])
	if ( ($9 == 0) ){ goto $label$61 }
	*(($1 + [32])) = $9
	CALL $72($9)
	
.LABEL $label$61
	$9 = *($1 + [16])
	if ( ($9 == 0) ){ goto $label$62 }
	*(($1 + [20])) = $9
	CALL $72($9)
	
.LABEL $label$62
	if ( ((*(($17 + [104])) & [1]) == 0) ){ goto $label$63 }
	CALL $72(*(($17 + [112])))
	
.LABEL $label$63
	if ( ((*($17 + [56]) & [1]) == 0) ){ goto $label$34 }
	CALL $72(*(($17 + [64])))
	
.LABEL $label$34
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$65 }
	$15 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [1680]
	$13 = (int_64)0
	
.LOOP $label$66:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$71 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$9 = ($9 + [165])
	goto $label$69 
	
.LABEL $label$71
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$70
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$68
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$67
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$66 }
	*($17 + [128]) = $13
	*($17 + [120]) = $15
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [112]
	$13 = (int_64)0
	
.LOOP $label$72:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$77 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$9 = ($9 + [165])
	goto $label$75 
	
.LABEL $label$77
	$14 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$74
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$73
	$1 = ($1 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$72 }
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [128]
	$15 = (int_64)0
	
.LOOP $label$78:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$83 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$9 = ($9 + [165])
	goto $label$81 
	
.LABEL $label$83
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$82
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$80
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$79
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$78 }
	$12 = (int_64)0
	$14 = (int_64)59
	$1 = [1808]
	$16 = (int_64)0
	
.LOOP $label$84:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$85 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$87 }
	$9 = ($9 + [165])
	goto $label$86 
	
.LABEL $label$87
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$86
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$85
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$11 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$84 }
	*(($17 + [64])) = [0]
	*($17 + [56]) = (int_64)0
	$1 = CALL strlen([1824])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$64 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$90 }
	*($17 + [56]) = ($1 << [1])
	$9 = (($17 + [56]) | [1])
	if ( $1 ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$90
	$10 = (($1 + [16]) & [-16])
	$9 = CALL $71($10)
	*($17 + [56]) = ($10 | [1])
	*($17 + [64]) = $9
	*($17 + [60]) = $1
	
.LABEL $label$89
	CALL memcpy($9, [1824], $1)
	
.LABEL $label$88
	*(($9 + $1)) = [0]
	*(($17 + [96])) = $2
	*(($17 + [108])) = *($17 + [60])
	*($17 + [80]) = $16
	$1 = ($17 + [64])
	*(($17 + [112])) = *($1)
	*($17 + [72]) = *($0)
	*($17 + [88]) = $8
	*($17 + [104]) = *($17 + [56])
	*($17 + [56]) = [0]
	*($17 + [60]) = [0]
	*($1) = [0]
	$1 = CALL $53(($17 + [136]), ($17 + [120]), $13, $15, ($17 + [72]))
	CALL $54(($17 + [176]), $1)
	$9 = *($17 + [176])
	CALL send_inline($9, (*($17 + [180]) - $9))
	$9 = *($17 + [176])
	if ( ($9 == 0) ){ goto $label$91 }
	*($17 + [180]) = $9
	CALL $72($9)
	
.LABEL $label$91
	$9 = *($1 + [28])
	if ( ($9 == 0) ){ goto $label$92 }
	*(($1 + [32])) = $9
	CALL $72($9)
	
.LABEL $label$92
	$9 = *($1 + [16])
	if ( ($9 == 0) ){ goto $label$93 }
	*(($1 + [20])) = $9
	CALL $72($9)
	
.LABEL $label$93
	if ( ((*(($17 + [104])) & [1]) == 0) ){ goto $label$94 }
	CALL $72(*(($17 + [112])))
	
.LABEL $label$94
	if ( ((*($17 + [56]) & [1]) == 0) ){ goto $label$65 }
	CALL $72(*(($17 + [64])))
	
.LABEL $label$65
	if ( ((int_64)$6 < (int_64)100) ){ goto $label$95 }
	$15 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [1680]
	$13 = (int_64)0
	
.LOOP $label$96:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$101 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$100 }
	$9 = ($9 + [165])
	goto $label$99 
	
.LABEL $label$101
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$100
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$99
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$98
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$97
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$96 }
	*($17 + [128]) = $13
	*($17 + [120]) = $15
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [112]
	$13 = (int_64)0
	
.LOOP $label$102:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$107 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$106 }
	$9 = ($9 + [165])
	goto $label$105 
	
.LABEL $label$107
	$14 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$106
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$105
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$104
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$103
	$1 = ($1 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$102 }
	$12 = (int_64)0
	$11 = (int_64)59
	$1 = [128]
	$15 = (int_64)0
	
.LOOP $label$108:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$113 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$112 }
	$9 = ($9 + [165])
	goto $label$111 
	
.LABEL $label$113
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$112
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$111
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$110
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$109
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$108 }
	$12 = (int_64)0
	$14 = (int_64)59
	$1 = [1856]
	$16 = (int_64)0
	
.LOOP $label$114:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$115 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$117 }
	$9 = ($9 + [165])
	goto $label$116 
	
.LABEL $label$117
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$116
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$115
	$1 = ($1 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$11 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$114 }
	*(($17 + [64])) = [0]
	*($17 + [56]) = (int_64)0
	$1 = CALL strlen([1872])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$120 }
	*($17 + [56]) = ($1 << [1])
	$9 = (($17 + [56]) | [1])
	if ( $1 ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$10 = (($1 + [16]) & [-16])
	$9 = CALL $71($10)
	*($17 + [56]) = ($10 | [1])
	*($17 + [64]) = $9
	*($17 + [60]) = $1
	
.LABEL $label$119
	CALL memcpy($9, [1872], $1)
	
.LABEL $label$118
	*(($9 + $1)) = [0]
	*(($17 + [96])) = $2
	*(($17 + [108])) = *($17 + [60])
	*($17 + [80]) = $16
	$1 = ($17 + [64])
	*(($17 + [112])) = *($1)
	*($17 + [72]) = *($0)
	*($17 + [88]) = $7
	*($17 + [104]) = *($17 + [56])
	*($17 + [56]) = [0]
	*($17 + [60]) = [0]
	*($1) = [0]
	$1 = CALL $53(($17 + [136]), ($17 + [120]), $13, $15, ($17 + [72]))
	CALL $54(($17 + [176]), $1)
	$9 = *($17 + [176])
	CALL send_inline($9, (*($17 + [180]) - $9))
	$9 = *($17 + [176])
	if ( ($9 == 0) ){ goto $label$121 }
	*($17 + [180]) = $9
	CALL $72($9)
	
.LABEL $label$121
	$9 = *($1 + [28])
	if ( ($9 == 0) ){ goto $label$122 }
	*(($1 + [32])) = $9
	CALL $72($9)
	
.LABEL $label$122
	$9 = *($1 + [16])
	if ( ($9 == 0) ){ goto $label$123 }
	*(($1 + [20])) = $9
	CALL $72($9)
	
.LABEL $label$123
	if ( ((*(($17 + [104])) & [1]) == 0) ){ goto $label$124 }
	CALL $72(*(($17 + [112])))
	
.LABEL $label$124
	if ( ((*($17 + [56]) & [1]) == 0) ){ goto $label$95 }
	CALL $72(*(($17 + [64])))
	
.LABEL $label$95
	*([0] + [4]) = ($17 + [192])
	return (unreachable)
	
.LABEL $label$64
	CALL $73(($17 + [56]))
	
.LABEL $label$3
	CALL $73(($17 + [56]))
	
.LABEL $label$2
	CALL $73(($17 + [56]))
	
.LABEL $label$1
	CALL $73(($17 + [56]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10612])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10420]
	$1 = (((int_32)$2 * (int_32)[12]) + [10420])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $75 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1136])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $71([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [368])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-4])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [368])
	CALL memcpy(($6 + [8]), ($7 + [8]), [4])
	CALL eosio_assert(((int_32)$4 != (int_32)[12]), [368])
	CALL memcpy(($6 + [12]), ($7 + [12]), [4])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $61(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $72($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $71 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10716])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZN7eosgame12eosluckydraw8withdrawEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [256])
	*([0] + [4]) = $17
	CALL require_auth($1)
	*((($17 + [200]) + [32])) = [0]
	*($17 + [216]) = (int_64)-1
	$13 = *($0)
	*($17 + [200]) = $13
	*($17 + [208]) = $13
	*($17 + [224]) = (int_64)0
	$11 = CALL db_lowerbound_i64($13, $13, (int_64)-4816269947984412672, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $23(($17 + [200]), $11)
	$5 = ($17 + [64])
	$6 = ($17 + [72])
	$7 = ($17 + [80])
	$8 = ($17 + [84])
	$9 = (($17 + [56]) + [32])
	
.LOOP $label$2:
	$13 = *($10)
	*($5) = $13
	*($6) = (int_64)-1
	*($7) = [0]
	$15 = *($0)
	*($17 + [56]) = $15
	*($8) = [0]
	*($9) = [0]
	$11 = CALL db_find_i64($15, $13, (int_64)7035937633859534848, *($10 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $28(($17 + [56]), $11)
	CALL eosio_assert(((int_32)*($3 + [232]) == (int_32)($17 + [56])), [832])
	$3 = *(($3 + [60]))
	$11 = *($3 + [56])
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$4 }
	$11 = ($11 + [32])
	if ( ((int_32)$3 != (int_32)$11) ){ goto $label$5 }
	$11 = $3
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$11 == (int_32)$3), [1968])
	
.LABEL $label$3
	CALL eosio_assert([1], [2032])
	$11 = *($10 + [52])
	$10 = [0]
	$11 = CALL db_next_i64($11, ($17 + [160]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $23(($17 + [200]), $11)
	
.LABEL $label$6
	$2 = *($7)
	if ( ($2 == 0) ){ goto $label$7 }
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$11 = ($11 + [-24])
	$3 = *($11)
	*($11) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	$4 = *($3 + [56])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($3 + [60])) = $4
	CALL $72($4)
	
.LABEL $label$12
	CALL $72($3)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$11) ){ goto $label$10 }
	$11 = *($7)
	goto $label$8 
	
.LABEL $label$9
	$11 = $2
	
.LABEL $label$8
	*($8) = $2
	CALL $72($11)
	
.LABEL $label$7
	if ( $10 ){ goto $label$2 }
	
.LABEL $label$1
	*((($17 + [160]) + [32])) = [0]
	*($17 + [176]) = (int_64)-1
	*($17 + [184]) = (int_64)0
	$13 = *($0)
	*($17 + [160]) = $13
	*($17 + [168]) = $13
	$11 = CALL db_find_i64($13, $13, (int_64)-2187881461846114304, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$14 }
	$4 = CALL $36(($17 + [160]), $11)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($17 + [160])), [832])
	CALL eosio_assert([1], [272])
	$13 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$3 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$3 = [0]
	
.LABEL $label$15
	CALL eosio_assert($3, [336])
	CALL eosio_assert(((int_64)*(($4 + [16])) == (int_64)1397703940), [608])
	CALL eosio_assert(((int_64)*($4 + [8]) > (int_64)0), [2064])
	goto $label$13 
	
.LABEL $label$14
	$4 = [0]
	CALL eosio_assert([0], [2064])
	
.LABEL $label$13
	$16 = *($0)
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [1680]
	$14 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$25 }
	$3 = *($11)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$3 = ($3 + [165])
	goto $label$23 
	
.LABEL $label$25
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$21
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$20 }
	*($17 + [112]) = $14
	*($17 + [104]) = $16
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [112]
	$14 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$13 > (uint_64)(int_64)10) ){ goto $label$31 }
	$3 = *($11)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$3 = ($3 + [165])
	goto $label$29 
	
.LABEL $label$31
	$15 = (int_64)0
	if ( ((int_64)$13 == (int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$27
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$26 }
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [128]
	$16 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$37 }
	$3 = *($11)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$3 = ($3 + [165])
	goto $label$35 
	
.LABEL $label$37
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$33
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$32 }
	*((($17 + [40]) + [8])) = [0]
	*($17 + [40]) = (int_64)0
	$3 = CALL strlen([2096])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$38 }
	$11 = ($4 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$41 }
	*($17 + [40]) = ($3 << [1])
	$4 = (($17 + [40]) | [1])
	if ( $3 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$2 = (($3 + [16]) & [-16])
	$4 = CALL $71($2)
	*($17 + [40]) = ($2 | [1])
	*($17 + [48]) = $4
	*($17 + [44]) = $3
	
.LABEL $label$40
	CALL memcpy($4, [2096], $3)
	
.LABEL $label$39
	*(($4 + $3)) = [0]
	*($17 + [64]) = $1
	*(($17 + [84])) = *(($11 + [12]))
	*(($17 + [80])) = *(($11 + [8]))
	*(($17 + [76])) = *(($11 + [4]))
	*($17 + [56]) = *($0)
	*($17 + [72]) = *($11)
	$3 = (($17 + [40]) + [8])
	*(($17 + [96])) = *($3)
	*($17 + [88]) = *($17 + [40])
	*($17 + [40]) = [0]
	*($17 + [44]) = [0]
	*($3) = [0]
	$3 = CALL $53(($17 + [120]), ($17 + [104]), $14, $16, ($17 + [56]))
	CALL $54(($17 + [240]), $3)
	$4 = *($17 + [240])
	CALL send_inline($4, (*($17 + [244]) - $4))
	$4 = *($17 + [240])
	if ( ($4 == 0) ){ goto $label$42 }
	*($17 + [244]) = $4
	CALL $72($4)
	
.LABEL $label$42
	$4 = *($3 + [28])
	if ( ($4 == 0) ){ goto $label$43 }
	*(($3 + [32])) = $4
	CALL $72($4)
	
.LABEL $label$43
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$44 }
	*(($3 + [20])) = $4
	CALL $72($4)
	
.LABEL $label$44
	if ( ((*(($17 + [88])) & [1]) == 0) ){ goto $label$45 }
	CALL $72(*(($17 + [96])))
	
.LABEL $label$45
	if ( ((*($17 + [40]) & [1]) == 0) ){ goto $label$46 }
	CALL $72(*(($17 + [48])))
	
.LABEL $label$46
	*(($3 = (($17 + [24]) + [8]))) = *(($11 + [8]))
	$13 = *($11)
	*((($17 + [8]) + [12])) = *((($17 + [24]) + [12]))
	*((($17 + [8]) + [8])) = *($3)
	*($17 + [24]) = $13
	*($17 + [12]) = *($17 + [28])
	*($17 + [8]) = *($17 + [24])
	CALL _ZN7eosgame12eosluckydraw11sub_balanceEyN5eosio5assetE($0, $1, ($17 + [8]))
	$4 = *($17 + [184])
	if ( ($4 == 0) ){ goto $label$47 }
	$2 = ($17 + [188])
	$11 = *($2)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$49 }
	
.LOOP $label$50:
	$11 = ($11 + [-24])
	$3 = *($11)
	*($11) = [0]
	if ( ($3 == 0) ){ goto $label$51 }
	CALL $72($3)
	
.LABEL $label$51
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$50 }
	$11 = *(($17 + [184]))
	goto $label$48 
	
.LABEL $label$49
	$11 = $4
	
.LABEL $label$48
	*($2) = $4
	CALL $72($11)
	
.LABEL $label$47
	$4 = *($17 + [224])
	if ( ($4 == 0) ){ goto $label$52 }
	$2 = ($17 + [228])
	$11 = *($2)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$54 }
	
.LOOP $label$55:
	$11 = ($11 + [-24])
	$3 = *($11)
	*($11) = [0]
	if ( ($3 == 0) ){ goto $label$56 }
	CALL $72($3)
	
.LABEL $label$56
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$55 }
	$11 = *(($17 + [224]))
	goto $label$53 
	
.LABEL $label$54
	$11 = $4
	
.LABEL $label$53
	*($2) = $4
	CALL $72($11)
	
.LABEL $label$52
	*([0] + [4]) = ($17 + [256])
	return (unreachable)
	
.LABEL $label$38
	CALL $73(($17 + [40]))
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [368])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN7eosgame12eosluckydraw8transferEyyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	$9 = *($0)
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	$4 = ($4 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = *($4 + [8])
	
.LABEL $label$2
	$8 = [-1]
	
.LOOP $label$4:
	$7 = ($4 + $8)
	$5 = ($8 + [1])
	$8 = $5
	if ( *(($7 + [1])) ){ goto $label$4 }
	$6 = (CASTING uint_64)(uint_32 $5)
	$2 = (int_64)0
	$9 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$5:
	$11 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$6) ){ goto $label$6 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$8 = ($8 + [165])
	goto $label$7 
	
.LABEL $label$8
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$10 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$9 
	
.LABEL $label$10
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$9
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$5 }
	if ( (CALL is_account($10) == 0) ){ goto $label$11 }
	$2 = *(($3 + [8]))
	*((($12 + [48]) + [8])) = $2
	$9 = *($3)
	*(($12 + [8])) = $2
	*($12 + [48]) = $9
	*($12 + [4]) = *($12 + [52])
	*($12) = *($12 + [48])
	CALL _ZN7eosgame12eosluckydraw11add_balanceEyN5eosio5assetEb($0, $10, $12, [0])
	goto $label$1 
	
.LABEL $label$11
	$2 = *(($3 + [8]))
	*((($12 + [32]) + [8])) = $2
	$9 = *($3)
	*((($12 + [16]) + [8])) = $2
	*($12 + [32]) = $9
	*($12 + [20]) = *($12 + [36])
	*($12 + [16]) = *($12 + [32])
	CALL _ZN7eosgame12eosluckydraw11add_balanceEyN5eosio5assetEb($0, $1, ($12 + [16]), [0])
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [64])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [272])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [336])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $62(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $63(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $72(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$46 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$42
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$41 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [192]
	$7 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$52 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$3 = ($3 + [165])
	goto $label$50 
	
.LABEL $label$52
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$48
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$47 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [208]
	$7 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$58 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$3 = ($3 + [165])
	goto $label$56 
	
.LABEL $label$58
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$54
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$53 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [224]
	$7 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$64 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$3 = ($3 + [165])
	goto $label$62 
	
.LABEL $label$64
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$60
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$59 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [240]
	$7 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$70 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$3 = ($3 + [165])
	goto $label$68 
	
.LABEL $label$70
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$66
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$65 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [256]
	$7 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$76 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$3 = ($3 + [165])
	goto $label$74 
	
.LABEL $label$76
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$72
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$71 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	*($9 + [152]) = $0
	if ( ((int_64)$2 <= (int_64)-2039333636196532225) ){ goto $label$84 }
	if ( ((int_64)$2 <= (int_64)3941577298472615935) ){ goto $label$83 }
	if ( ((int_64)$2 == (int_64)3941577298472615936) ){ goto $label$81 }
	if ( ((int_64)$2 == (int_64)5614106371424256000) ){ goto $label$80 }
	if ( ((int_64)$2 != (int_64)7335361038382006272) ){ goto $label$20 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [1]
	*($9 + [48 align=4]) = *($9 + [104])
	CALL $14(($9 + [152]), ($9 + [48]))
	goto $label$20 
	
.LABEL $label$84
	if ( ((int_64)$2 > (int_64)-4352386765319831553) ){ goto $label$82 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$79 }
	if ( ((int_64)$2 != (int_64)-4417052315840675840) ){ goto $label$20 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [2]
	*($9 + [72 align=4]) = *($9 + [80])
	CALL $21(($9 + [152]), ($9 + [72]))
	goto $label$20 
	
.LABEL $label$83
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$78 }
	if ( ((int_64)$2 != (int_64)3941571463168917504) ){ goto $label$20 }
	*($9 + [116]) = [0]
	*($9 + [112]) = [3]
	*($9 + [40 align=4]) = *($9 + [112])
	CALL $14(($9 + [152]), ($9 + [40]))
	goto $label$20 
	
.LABEL $label$82
	if ( ((int_64)$2 == (int_64)-4352386765319831552) ){ goto $label$77 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$20 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [4]
	*($9 + [8 align=4]) = *($9 + [144])
	CALL $7(($9 + [152]), ($9 + [8]))
	goto $label$20 
	
.LABEL $label$81
	*($9 + [92]) = [0]
	*($9 + [88]) = [5]
	*($9 + [64 align=4]) = *($9 + [88])
	CALL $19(($9 + [152]), ($9 + [64]))
	goto $label$20 
	
.LABEL $label$80
	*($9 + [124]) = [0]
	*($9 + [120]) = [6]
	*($9 + [32 align=4]) = *($9 + [120])
	CALL $12(($9 + [152]), ($9 + [32]))
	goto $label$20 
	
.LABEL $label$79
	*($9 + [100]) = [0]
	*($9 + [96]) = [7]
	*($9 + [56 align=4]) = *($9 + [96])
	CALL $17(($9 + [152]), ($9 + [56]))
	goto $label$20 
	
.LABEL $label$78
	*($9 + [140]) = [0]
	*($9 + [136]) = [8]
	*($9 + [16 align=4]) = *($9 + [136])
	CALL $9(($9 + [152]), ($9 + [16]))
	goto $label$20 
	
.LABEL $label$77
	*($9 + [132]) = [0]
	*($9 + [128]) = [9]
	*($9 + [24 align=4]) = *($9 + [128])
	CALL $9(($9 + [152]), ($9 + [24]))
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [160])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [368])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [368])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [368])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC _ZN7eosgame12eosluckydraw4grabEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	CALL require_auth($1)
	CALL _ZN7eosgame12eosluckydraw7do_grabEyyyy($0, $1, $2, $3, $1)
}

void .FUNC _ZN7eosgame12eosluckydraw6revealEyRK11checksum256 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [240])
	*([0] + [4]) = $3
	CALL require_auth(*($0))
	CALL _ZN7eosgame12eosluckydraw7lotteryEyRK11checksum256($3, $0, $1, $2)
	$0 = *($3 + [56])
	if ( ($0 == 0) ){ goto $label$1 }
	*(($3 + [60])) = $0
	CALL $72($0)
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [240])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [112])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($7 + [40])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [368])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((uint_32)($3 + [-8]) > (uint_32)[31]), [368])
	$1 = ($7 + [16])
	CALL memcpy($1, ($5 + [8]), [32])
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($3 = (($7 + [48]) + [24]))) = *(($1 + [24]))
	*(($5 = (($7 + [48]) + [16]))) = *(($1 + [16]))
	$4 = *($7)
	*($7 + [48]) = *($1)
	*($7 + [60]) = *(($1 + [12]))
	*($7 + [56]) = *(($1 + [8]))
	*((($7 + [80]) + [24])) = *($3)
	*((($7 + [80]) + [16])) = *($5)
	*($7 + [88]) = *($7 + [56])
	*($7 + [80]) = *($7 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 ($7 + [80])), (int_32 $6))
	*([0] + [4]) = ($7 + [112])
	return [1]
}

void .FUNC _ZN7eosgame12eosluckydraw6signinEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	CALL require_auth($1)
	$4 = CALL current_time()
	*((($7 + [8]) + [32])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$5 = *($0)
	*($7 + [8]) = $5
	*($7 + [16]) = $5
	$0 = (CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))
	$3 = ($0 - ((uint_32)($0 + [28800]) % (uint_32)[86400]))
	$0 = CALL db_find_i64($5, $5, (int_64)-4352386752434929664, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $60(($7 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($7 + [8])), [832])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [1936])
	$2 = *($0 + [8])
	$6 = *($0 + [12])
	CALL eosio_assert([1], [896])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($7 + [8])), [944])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$3()), [992])
	*($0 + [8]) = $3
	*($0 + [12]) = ( ($6 + [1]) ? [1] : ((int_32)($3 - $2) == (int_32)[86400]) )
	$5 = *($0)
	CALL eosio_assert([1], [1056])
	CALL eosio_assert([1], [1120])
	CALL memcpy(($7 + [48]), $0, [8])
	CALL eosio_assert([1], [1120])
	CALL memcpy((($7 + [48]) | [8]), ($0 + [8]), [4])
	CALL eosio_assert([1], [1120])
	CALL memcpy((($7 + [48]) | [12]), ($0 + [12]), [4])
	CALL db_update_i64(*($0 + [20]), $1, ($7 + [48]), [16])
	$0 = (($7 + [8]) + [16])
	if ( (uint_64)($5 <= *($0)) ){ goto $label$3 }
	*($0) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$2 = *($7 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([1], [1936])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$3()), [768])
	*(($0 = CALL $71([32])) + [16]) = ($7 + [8])
	*($0 + [8]) = $3
	*($0) = $1
	*($0 + [12]) = [1]
	CALL eosio_assert([1], [1120])
	CALL memcpy(($7 + [48]), $0, [8])
	CALL eosio_assert([1], [1120])
	CALL memcpy((($7 + [48]) | [8]), ($0 + [8]), [4])
	CALL eosio_assert([1], [1120])
	CALL memcpy((($7 + [48]) | [12]), ($0 + [12]), [4])
	$5 = *($0)
	$2 = CALL db_store_i64(*((($7 + [8]) + [8])), (int_64)-4352386752434929664, $1, $5, ($7 + [48]), [16])
	*($0 + [20]) = $2
	$3 = (($7 + [8]) + [16])
	if ( (uint_64)($5 <= *($3)) ){ goto $label$5 }
	*($3) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($7 + [72]) = $0
	$1 = *($0)
	*($7 + [48]) = $1
	*($7 + [68]) = $2
	$6 = ($7 + [36])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($7 + [40]))) ){ goto $label$7 }
	*($3 + [8]) = $1
	*($3 + [16]) = $2
	*($7 + [72]) = [0]
	*($3) = $0
	*($6) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $61(($7 + [32]), ($7 + [72]), ($7 + [48]), ($7 + [68]))
	
.LABEL $label$6
	$0 = *($7 + [72])
	*($7 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	CALL $72($0)
	
.LABEL $label$3
	$2 = *($7 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	CALL $72($3)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($7 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $2
	
.LABEL $label$8
	*($6) = $2
	CALL $72($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC _ZN7eosgame12eosluckydraw4dropEyyRK11checksum256 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [320])
	*([0] + [4]) = $9
	*($9 + [224]) = $1
	*($9 + [216]) = $2
	CALL require_auth(*($0))
	$8 = [0]
	*(($9 + [208])) = [0]
	*($9 + [192]) = (int_64)-1
	*($9 + [200]) = (int_64)0
	$1 = *($0)
	*($9 + [176]) = $1
	*($9 + [184]) = $1
	$6 = CALL db_find_i64($1, $1, (int_64)-4816269947984412672, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL $23(($9 + [176]), $6)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($9 + [176])), [832])
	*($9 + [172]) = $8
	*($9 + [168]) = ($9 + [176])
	goto $label$1 
	
.LABEL $label$2
	*($9 + [172]) = [0]
	*($9 + [168]) = ($9 + [176])
	
.LABEL $label$1
	$6 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1168])
	*($9 + [144]) = (int_64)-1
	*($9 + [152]) = [0]
	$1 = *($9 + [216])
	$4 = *($0)
	*($9 + [128]) = $4
	*($9 + [136]) = $1
	*(($9 + [156])) = [0]
	*(($9 + [160])) = [0]
	$8 = *($9 + [172])
	$2 = *($8 + [8])
	*($9 + [120]) = $2
	if ( (int_64)($2 == 0) ){ goto $label$3 }
	$8 = CALL db_find_i64($4, $1, (int_64)7035937633859534848, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $28(($9 + [128]), $8)
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)($9 + [128])), [832])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1600])
	CALL eosio_assert(((int_32)*($6 + [216]) != (int_32)[0]), [1632])
	$8 = *($9 + [172])
	
.LABEL $label$3
	$2 = *(($8 + [24]))
	$1 = *($8 + [16])
	CALL eosio_assert([1], [384])
	CALL eosio_assert([1], [400])
	*($9 + [112]) = $2
	CALL eosio_assert([1], [432])
	$4 = ((int_64)$1 / (int_64)20)
	$4 = (int_64)
	*($9 + [104]) = $4($1 - ( $4 ? (int_64)1 : ((int_64)$4 > (int_64)1) )))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [512])
	CALL eosio_assert(((int_64)$2 == (int_64)*($9 + [112])), [432])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($1 - *($9 + [104]))) > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [512])
	$5 = *($9 + [224])
	if ( ((int_64)$5 == (int_64)*($0)) ){ goto $label$5 }
	*($9 + [96]) = $2
	*((($9 + [16]) + [8])) = $2
	*($9 + [88]) = $1
	*($9 + [16]) = $1
	CALL _ZN7eosgame12eosluckydraw11sub_balanceEyN5eosio5assetE($0, $5, ($9 + [16]))
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$5 }
	*($9 + [80]) = $2
	*(($9 + [8])) = $2
	*($9 + [72]) = $4
	*($9) = $4
	CALL _ZN7eosgame12eosluckydraw8send_feeEN5eosio5assetE($0, $9)
	
.LABEL $label$5
	*($9 + [120]) = ((int_64)*($9 + [120]) + (int_64)1)
	CALL sha256($3, [32], ($9 + [32]))
	$1 = *($0)
	*($9 + [276]) = $3
	*($9 + [260]) = ($9 + [216])
	*($9 + [256]) = ($9 + [120])
	*($9 + [264]) = ($9 + [224])
	*($9 + [268]) = ($9 + [104])
	*($9 + [272]) = ($9 + [168])
	*($9 + [280]) = ($9 + [32])
	*($9 + [248]) = $1
	CALL eosio_assert(((int_64)*($9 + [128]) == (int_64)CALL $fimport$3()), [768])
	*($9 + [308]) = ($9 + [256])
	*($9 + [304]) = ($9 + [128])
	*($9 + [312]) = ($9 + [248])
	*(($3 = CALL $71([256])) + [32]) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [272])
	$1 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [336])
	*($3 + [64]) = [0]
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [232]) = ($9 + [128])
	CALL $52(($9 + [304]), $3)
	*($9 + [240]) = $3
	$1 = *($3)
	*($9 + [304]) = $1
	$6 = *($3 + [236])
	*($9 + [236]) = $6
	$7 = ($9 + [156])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($9 + [160]))) ){ goto $label$12 }
	*($8 + [8]) = $1
	*($8 + [16]) = $6
	*($9 + [240]) = [0]
	*($8) = $3
	*($7) = ($8 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $42(($9 + [152]), ($9 + [240]), ($9 + [304]), ($9 + [236]))
	
.LABEL $label$11
	$8 = *($9 + [240])
	*($9 + [240]) = [0]
	if ( ($8 == 0) ){ goto $label$13 }
	$3 = *($8 + [56])
	if ( ($3 == 0) ){ goto $label$14 }
	*(($8 + [60])) = $3
	CALL $72($3)
	
.LABEL $label$14
	CALL $72($8)
	
.LABEL $label$13
	$2 = *($0)
	$8 = *($9 + [172])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [896])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($9 + [176])), [944])
	CALL eosio_assert(((int_64)*($9 + [176]) == (int_64)CALL $fimport$3()), [992])
	*($8 + [8]) = *($9 + [120])
	$1 = *($8)
	CALL eosio_assert([1], [1056])
	*($9 + [312]) = (($9 + [256]) + [41])
	*($9 + [308]) = ($9 + [256])
	*($9 + [304]) = ($9 + [256])
	CALL $24(($9 + [304]), $8)
	CALL db_update_i64(*($8 + [52]), $2, ($9 + [256]), [41])
	$8 = ($9 + [192])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$15 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$6 = *($9 + [152])
	if ( ($6 == 0) ){ goto $label$16 }
	$7 = ($9 + [156])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$18 }
	
.LOOP $label$19:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$20 }
	$0 = *($3 + [56])
	if ( ($0 == 0) ){ goto $label$21 }
	*(($3 + [60])) = $0
	CALL $72($0)
	
.LABEL $label$21
	CALL $72($3)
	
.LABEL $label$20
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$19 }
	$8 = *(($9 + [152]))
	goto $label$17 
	
.LABEL $label$18
	$8 = $6
	
.LABEL $label$17
	*($7) = $6
	CALL $72($8)
	
.LABEL $label$16
	$0 = *($9 + [200])
	if ( ($0 == 0) ){ goto $label$22 }
	$6 = ($9 + [204])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$24 }
	
.LOOP $label$25:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$26 }
	CALL $72($3)
	
.LABEL $label$26
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$25 }
	$8 = *(($9 + [200]))
	goto $label$23 
	
.LABEL $label$24
	$8 = $0
	
.LABEL $label$23
	*($6) = $0
	CALL $72($8)
	
.LABEL $label$22
	*([0] + [4]) = ($9 + [320])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [112])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*(($8 + [40])) = (int_64)0
	*(($8 + [32])) = (int_64)0
	*(($8 + [24])) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [368])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($3 & [-8]) != (int_32)[8]), [368])
	CALL memcpy(($8 | [8]), ($6 + [8]), [8])
	CALL eosio_assert(((uint_32)($3 + [-16]) > (uint_32)[31]), [368])
	$1 = ($8 + [16])
	CALL memcpy($1, ($6 + [16]), [32])
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	*((($8 + [48]) + [28])) = *(($1 + [28]))
	*(($3 = (($8 + [48]) + [24]))) = *(($1 + [24]))
	*((($8 + [48]) + [20])) = *(($1 + [20]))
	*(($6 = (($8 + [48]) + [16]))) = *(($1 + [16]))
	$4 = *($8)
	*($8 + [48]) = *($1)
	*($8 + [60]) = *(($1 + [12]))
	*($8 + [56]) = *(($1 + [8]))
	*($8 + [52]) = *(($1 + [4]))
	$5 = *($8 + [8])
	*((($8 + [80]) + [24])) = *($3)
	*((($8 + [80]) + [16])) = *($6)
	*($8 + [88]) = *($8 + [56])
	*($8 + [80]) = *($8 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 $5), (int_64 ($8 + [80])), (int_32 $7))
	*([0] + [4]) = ($8 + [112])
	return [1]
}

void .FUNC _ZN7eosgame12eosluckydraw8autograbEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	CALL require_auth(*($0))
	CALL _ZN7eosgame12eosluckydraw7do_grabEyyyy($0, $1, $2, $3, *($0))
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1136])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $71([56])
	$4 = CALL $34($6)
	*($6 + [40]) = $0
	CALL $40(($8 + [32]), $4)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $38(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $72($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [992])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [16]))), [1280])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($5))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1328])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1360])
	if ( (*(*($3 + [4])) == 0) ){ goto $label$1 }
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [1280])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1328])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1360])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1056])
	$8 = $8
	$3 = ($8 + [-48])
	*([0] + [4]) = $3
	*($7 + [4]) = $3
	*($7) = $3
	*($7 + [8]) = ($8 + [-8])
	CALL $39($7, $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $34 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [272])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [336])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [272])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [336])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$5 = *($0 + [4])
	*($1) = *(*($5))
	$2 = *($0)
	$3 = *($5 + [4])
	*($1 + [8]) = *($3)
	*(($1 + [16])) = *(($3 + [8]))
	if ( (*(*($5 + [8])) == 0) ){ goto $label$2 }
	$5 = *(($5 + [4]))
	$4 = *($5 + [8])
	$6 = *($5)
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([1], [272])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	
.LABEL $label$3
	CALL eosio_assert($3, [336])
	$4 = (int_64)1397703940
	$6 = (int_64)0
	
.LABEL $label$1
	*($1 + [24]) = $6
	*(($1 + [32])) = $4
	$8 = $8
	$5 = ($8 + [-48])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($8 + [-8])
	CALL $39($7, $1)
	$4 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-2187881461846114304, *(*($0 + [8])), $4, $5, [40])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[0]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [1])
	$4 = (*($0 + [4]) + [1])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$6 = (*($0 + [4]) + [8])
	*($0 + [4]) = $6
	$5 = (CASTING uint_64)(uint_32 int_32((*(($1 + [60])) - *($1 + [56])) >> [5]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$3 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) > (int_32)[0]), [1120])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *(($1 + [60]))
	$4 = *(($1 + [56]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $33($0, $4)
	$4 = ($4 + [32])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$3 }
	$6 = *(($0 + [4]))
	
.LABEL $label$2
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[31]), [1120])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [80]), [32])
	$6 = (*($4) + [32])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[31]), [1120])
	CALL memcpy(*($4), ($1 + [112]), [32])
	$6 = (*($4) + [32])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[31]), [1120])
	CALL memcpy(*($4), ($1 + [144]), [32])
	$6 = (*($4) + [32])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[31]), [1120])
	CALL memcpy(*($4), ($1 + [176]), [32])
	$6 = (*($4) + [32])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1120])
	CALL memcpy(*($4), ($1 + [208]), [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1120])
	CALL memcpy(*($4), ($1 + [212]), [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1120])
	CALL memcpy(*($4), ($1 + [216]), [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1120])
	CALL memcpy(*($4), ($1 + [224]), [8])
	*($4) = (*($4) + [8])
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [64])
	$25 = $26
	*([0] + [4]) = $26
	CALL eosio_assert(((int_32)*($1 + [232]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [992])
	$4 = *($1)
	$19 = $4
	$10 = ($1 + [60])
	$24 = *($1 + [56])
	if ( ((int_32)$24 == (int_32)*($10)) ){ goto $label$1 }
	$5 = *($3 + [36])
	$23 = [0]
	$11 = ($3 + [4])
	$12 = ($3 + [8])
	$15 = ($3 + [12])
	$16 = ($3 + [28])
	$17 = ($1 + [224])
	$13 = ($3 + [20])
	
.LOOP $label$2:
	$9 = *((*($11) + ($23 << [2])))
	CALL eosio_assert([1], [272])
	$19 = (int_64)5462355
	$20 = [0]
	
.LOOP $label$4:
	$21 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$21 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	CALL eosio_assert($21, [336])
	if ( ((int_32)$23 != (int_32)(*(*($12)) + [-1])) ){ goto $label$8 }
	$20 = *($15)
	$19 = *($20 + [8])
	$22 = *($20)
	goto $label$7 
	
.LABEL $label$8
	$20 = *(($3 + [16]))
	$19 = *($20)
	CALL __multi3(($25 + [32]), $19, (int_64)$19 >> (int_64)63), (CASTING uint_64)(uint_32 $9), (int_64)0)
	$19 = *($20 + [8])
	$22 = *((($25 + [32]) + [8]))
	$18 = *($25 + [32])
	CALL eosio_assert(( (uint_64)($18 <= (int_64)4611686018427387904) ? ((int_64)$22 < (int_64)0) : (int_64)($22 == 0) ), [544])
	CALL eosio_assert(( ((uint_64)$18 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$22 > (int_64)-1) : ((int_64)$22 == (int_64)-1) ), [576])
	$22 = *(*($13))
	CALL eosio_assert(((int_64)$22 != (int_64)0), [384])
	CALL eosio_assert([1], [400])
	$20 = ($3 + [24])
	$21 = *($20)
	CALL eosio_assert(((int_64)$19 == (int_64)*($21 + [8])), [608])
	$22 = ((int_64)$18 / (int_64)$22)
	if ( ((int_64)$22 >= (int_64)*($21)) ){ goto $label$9 }
	$21 = *($20)
	$19 = *($21 + [8])
	$22 = *($21)
	
.LABEL $label$9
	$21 = *($15)
	$18 = *($21)
	$14 = *($21 + [8])
	CALL eosio_assert(((int_64)$19 == (int_64)$14), [432])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($18 - $22)) > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [512])
	$20 = *($20)
	$18 = *($20)
	$18 = (CASTING int_64)(int_32 (*(*($12)) + ((int_32)$23 ^ (int_32)[-1])))
	CALL __multi3(($25 + [16]), $18, (int_64)$18 >> (int_64)63), $18, (int_64)$18 >> (int_64)63))
	$7 = *($20 + [8])
	$18 = *((($25 + [16]) + [8]))
	$8 = *($25 + [16])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$18 < (int_64)0) : (int_64)($18 == 0) ), [544])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$18 > (int_64)-1) : ((int_64)$18 == (int_64)-1) ), [576])
	$20 = ((int_64)$14 == (int_64)$7)
	CALL eosio_assert($20, [608])
	if ( ((int_64)$8 <= (int_64)$6) ){ goto $label$7 }
	CALL eosio_assert($20, [432])
	$18 = (int_64)
	CALL eosio_assert(((int_64)$18($8 - $6)) > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)$18 < (int_64)4611686018427387904), [512])
	CALL eosio_assert(((int_64)$7 == (int_64)$19), [432])
	$22 = (int_64)
	CALL eosio_assert(((int_64)$22($22 - $18)) > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)$22 < (int_64)4611686018427387904), [512])
	
.LABEL $label$7
	$20 = *($16)
	CALL eosio_assert(((int_64)$19 == (int_64)*($20 + [8])), [608])
	if ( ((int_64)$22 > (int_64)*($20)) ){ goto $label$10 }
	if ( ((int_64)*($24) == (int_64)*(*(*(($3 + [32])) + [4]) + [48])) ){ goto $label$10 }
	*(($20 = *($16)) + [8]) = $19
	*($20) = $22
	*($17) = *($24)
	
.LABEL $label$10
	$20 = *($15)
	CALL eosio_assert(((int_64)$19 == (int_64)*($20 + [8])), [432])
	$18 = (int_64)
	*($20) = $18(*($20) - $22))
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)*($20) < (int_64)4611686018427387904), [512])
	*($24 + [8]) = $22
	*(($24 + [16])) = $19
	$18 = *($24)
	*(($20 = (($25 + [48]) + [8]))) = $19
	*(($25 + [8])) = *($20)
	*($25 + [48]) = $22
	*($25) = *($25 + [48])
	CALL _ZN7eosgame12eosluckydraw11add_balanceEyN5eosio5assetEb($5, $18, $25, [1])
	$23 = ($23 + [1])
	$24 = ($24 + [32])
	if ( ((int_32)$24 != (int_32)*($10)) ){ goto $label$2 }
	$19 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$19), [1056])
	$24 = *($1 + [56])
	$21 = *($10)
	$23 = ($21 - $24)
	$19 = (CASTING uint_64)(uint_32 int_32($23 >> [5]))
	$20 = [49]
	
.LOOP $label$11:
	$20 = ($20 + [1])
	$19 = (uint_64)$19 >> (uint_64)(int_64)7
	if ( ((int_64)$19) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$24 == (int_32)$21) ){ goto $label$12 }
	$20 = ((((int_32)uint_32(($23 + [-32]) >> [5]) * (int_32)[28]) + $20) + [28])
	
.LABEL $label$12
	$21 = ($20 + [148])
	if ( ($21 <= [513]) ){ goto $label$14 }
	$20 = CALL malloc($21)
	goto $label$13 
	
.LABEL $label$14
	$20 = ($26 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$13
	*($25 + [52]) = $20
	*($25 + [48]) = $20
	*($25 + [56]) = ($20 + $21)
	CALL $32(($25 + [48]), $1)
	CALL db_update_i64(*(($1 + [236])), $2, $20, $21)
	if ( ($21 <= [513]) ){ goto $label$15 }
	CALL free($20)
	
.LABEL $label$15
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$16 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*([0] + [4]) = ($25 + [64])
}

void .FUNC _ZN7eosgame12eosluckydraw11add_balanceEyN5eosio5assetEb (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	*($7 + [64]) = $1
	*($7 + [63]) = $3
	*(($4 = ($7 + [48]))) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0)
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	$3 = CALL db_find_i64($5, $5, (int_64)-2187881461846114304, $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL $36(($7 + [16]), $3)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)($7 + [16])), [832])
	$5 = *($0)
	*($7 + [80]) = $2
	*($7 + [84]) = ($7 + [63])
	CALL eosio_assert([1], [896])
	CALL $37(($7 + [16]), $3, $5, ($7 + [80]))
	$2 = *($7 + [40])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($7 + [4]) = $2
	*($7) = ($7 + [64])
	*($7 + [8]) = ($7 + [63])
	*($7 + [104]) = $5
	CALL eosio_assert(((int_64)*($7 + [16]) == (int_64)CALL $fimport$3()), [768])
	*($7 + [84]) = $7
	*($7 + [80]) = ($7 + [16])
	*($7 + [88]) = ($7 + [104])
	$0 = CALL $71([56])
	CALL $34($0)
	*($0 + [40]) = ($7 + [16])
	CALL $35(($7 + [80]), $0)
	*($7 + [96]) = $0
	$5 = *($0)
	*($7 + [80]) = $5
	$2 = *($0 + [44])
	*($7 + [76]) = $2
	$6 = ($7 + [44])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*($4)) ){ goto $label$5 }
	*($3 + [8]) = $5
	*($3 + [16]) = $2
	*($7 + [96]) = [0]
	*($3) = $0
	*($6) = ($3 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $38(($7 + [40]), ($7 + [96]), ($7 + [80]), ($7 + [76]))
	
.LABEL $label$4
	$0 = *($7 + [96])
	*($7 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $72($0)
	
.LABEL $label$6
	$2 = *($7 + [40])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($7 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $72($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($7 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $2
	
.LABEL $label$7
	*($4) = $2
	CALL $72($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [112])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $59(*($1), ($0 + [32]))
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1120])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1120])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $71(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $72($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $76(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $76(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $72(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $72(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $65($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $74($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $71($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $74($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $72($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $73($7)
	return (unreachable)
}

void .FUNC _ZN7eosgame12eosluckydraw11sub_balanceEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$5 = [0]
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$3 = *($0)
	*($8 + [8]) = $3
	*($8 + [16]) = $3
	$7 = CALL db_find_i64($3, $3, (int_64)-2187881461846114304, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL $36(($8 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($8 + [8])), [832])
	$4 = *($2 + [8])
	CALL eosio_assert(((int_64)*(($7 + [16])) == (int_64)$4), [608])
	$6 = *($2)
	$2 = ((int_64)*($7 + [8]) >= (int_64)$6)
	$5 = [1]
	goto $label$1 
	
.LABEL $label$2
	$6 = *($2)
	$4 = *($2 + [8])
	$7 = [0]
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [1904])
	$1 = *($0)
	CALL eosio_assert($5, [896])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($8 + [8])), [944])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$3()), [992])
	$3 = *($7)
	CALL eosio_assert(((int_64)$4 == (int_64)*(($7 + [16]))), [432])
	$4 = (int_64)
	*($7 + [8]) = $4(*($7 + [8]) - $6))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [480])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [512])
	CALL eosio_assert(((int_64)$3 == (int_64)*($7)), [1056])
	*($8 + [104]) = (($8 + [48]) + [40])
	*($8 + [100]) = ($8 + [48])
	*($8 + [96]) = ($8 + [48])
	CALL $39(($8 + [96]), $7)
	CALL db_update_i64(*($7 + [44]), $1, ($8 + [48]), [40])
	$7 = (($8 + [8]) + [16])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$2 = *($8 + [32])
	if ( ($2 == 0) ){ goto $label$4 }
	$5 = ($8 + [36])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL $72($0)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$7 }
	$7 = *(($8 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($5) = $2
	CALL $72($7)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $71(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $72($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1) = *(*($6))
	*($1 + [8]) = *(*($6 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($6 + [8]))
	$4 = *($6 + [12])
	*($1 + [24]) = *($4)
	*(($1 + [32])) = *(($4 + [8]))
	*($1 + [40]) = *(*(*($6 + [16]) + [4]) + [32])
	*($1 + [48]) = *(*(*($6 + [16]) + [4]) + [40])
	$4 = *($6 + [20])
	*(($1 + [112])) = *($4)
	*(($1 + [136])) = *(($4 + [24]))
	*(($1 + [128])) = *(($4 + [16]))
	*(($1 + [120])) = *(($4 + [8]))
	$6 = *($6 + [24])
	*($1 + [80]) = *($6)
	*(($1 + [104])) = *(($6 + [24]))
	*(($1 + [96])) = *(($6 + [16]))
	*(($1 + [88])) = *(($6 + [8]))
	CALL memset(($1 + [144]), [0], [32])
	CALL memset(($1 + [176]), [0], [32])
	*($1 + [208]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$3 = *($1 + [56])
	$4 = *(($1 + [60]))
	$5 = ($4 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [5]))
	$6 = [49]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$6 = ((((int_32)uint_32(($5 + [-32]) >> [5]) * (int_32)[28]) + $6) + [28])
	
.LABEL $label$2
	$4 = ($6 + [148])
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $4)
	CALL $32($8, $1)
	$7 = *($1)
	*($1 + [236]) = CALL db_store_i64(*($2 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $7, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $71([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $55($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $58(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $55($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1120])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1120])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $57(CALL $56($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $71($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $75($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $72($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1120])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1120])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1120])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1120])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1120])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}