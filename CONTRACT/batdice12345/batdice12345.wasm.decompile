(data (i32.const 8192) "add active seed : \00")
(data (i32.const 8211) "\n\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8299) "active seed is already exists\00")
(data (i32.const 8329) "active seed is not exists.\00")
(data (i32.const 8356) "active\00")
(data (i32.const 8363) "seedcontract\00")
(data (i32.const 8376) "generateseed\00")
(data (i32.const 8389) "contract_name is not exists.\00")
(data (i32.const 8418) "house contract is not setted.\00")
(data (i32.const 8448) ":house edge.\00")
(data (i32.const 8461) "house_contract_name is not exists.\00")
(data (i32.const 8496) "write\00")
(data (i32.const 8502) "string is too long to be a valid name\00")
(data (i32.const 8540) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8607) "character is not in allowed character set for names\00")
(data (i32.const 8660) "\d8!\00\00")
(data (i32.const 8664) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8697) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8748) "error reading iterator\00")
(data (i32.const 8771) "read\00")
(data (i32.const 8776) "cannot create objects in table of another contract\00")
(data (i32.const 8827) "EOS\00")
(data (i32.const 8831) "string is too long to be a valid symbol_code\00")
(data (i32.const 8876) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8929) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8978) "invalid symbol name\00")
(data (i32.const 8998) "not initialized sicbo global table.\00")
(data (i32.const 9034) "not changed status.\00")
(data (i32.const 9054) "cannot pass end iterator to modify\00")
(data (i32.const 9089) "object passed to modify is not in multi_index\00")
(data (i32.const 9135) "cannot modify objects in table of another contract\00")
(data (i32.const 9186) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9245) "not initialized dice global table.\00")
(data (i32.const 9280) "game is in maintenance.\00")
(data (i32.const 9304) "invalid game type.\00")
(data (i32.const 9323) "Roll must be >= 2 and <= 96\00")
(data (i32.const 9351) "Roll must be >= 4 and <= 99\00")
(data (i32.const 9379) "bet is over max bet.\00")
(data (i32.const 9400) "invalid action count.\00")
(data (i32.const 9422) "second action is must eosio.token code.\00")
(data (i32.const 9462) "second action is must transfer action.\00")
(data (i32.const 9501) "invalid transfer amount.\00")
(data (i32.const 9526) "invalid transfer from\00")
(data (i32.const 9548) "invalid transfer to\00")
(data (i32.const 9568) "total table is not initialized.\00")
(data (i32.const 9600) "not found symbol \00")
(data (i32.const 9618) " \00")
(data (i32.const 9620) ",\00")
(data (i32.const 9622) "seed contract : buffer size is exceeded.\00")
(data (i32.const 9663) "get\00")
(data (i32.const 9667) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9726) "resultseed\00")
(data (i32.const 9737) "activegame doesn\'t exist\00")
(data (i32.const 9762) "thank you for playing dice.\00")
(data (i32.const 9790) "attempt to add asset with different symbol\00")
(data (i32.const 9833) "addition underflow\00")
(data (i32.const 9852) "addition overflow\00")
(data (i32.const 9870) "cannot pass end iterator to erase\00")
(data (i32.const 9904) "cannot increment end iterator\00")
(data (i32.const 9934) "object passed to erase is not in multi_index\00")
(data (i32.const 9979) "cannot erase objects in table of another contract\00")
(data (i32.const 10029) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10082) "invalid bet id.\00")
(import "env" "prints" (func $fimport$0 (param i32)))
(import "env" "printui" (func $fimport$1 (param i64)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "cancel_deferred" (func $fimport$9 (param i32) (result i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "send_deferred" (func $fimport$11 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "is_account" (func $fimport$13 (param i64) (result i32)))
(import "env" "require_auth" (func $fimport$14 (param i64)))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "action_data_size" (func $fimport$16 (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$20 (param i64)))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$22 (param i32 i32)))
(import "env" "printn" (func $fimport$23 (param i64)))
(import "env" "abort" (func $fimport$24))
(import "env" "db_remove_i64" (func $fimport$25 (param i32)))
(import "env" "memmove" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $24))
(export "_Znwj" (func $107))
(export "_ZdlPv" (func $109))
(export "_Znaj" (func $108))
(export "_ZdaPv" (func $110))
(export "_ZnwjSt11align_val_t" (func $111))
(export "_ZnajSt11align_val_t" (func $112))
(export "_ZdlPvSt11align_val_t" (func $113))
(export "_ZdaPvSt11align_val_t" (func $114))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $25 $27 $29 $31 $33 $35 $37 $38)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18516))
(global $global$2 i32 (i32.const 18516))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $87($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $119($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $119($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $115($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [16])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	*($0 + [16 align=4]) = *($1)
	*($6) = *($1 + [8])
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	$1 = [36]
	*(($0 + [36])) = [0]
	$7 = ($0 + [28])
	$6 = *($4 + [40])
	$8 = *(($4 + [44]))
	$2 = (CASTING uint_64)(uint_32 ((int_32)($8 - $6) / (int_32)[12]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$3:
	$9 = *($6)
	$9 = ( *($6 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$1 = ($9 + $1)
	$2 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$4 }
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	$1 = ($1 + [50])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $15($7, $1)
	$6 = *(($0 + [32]))
	$1 = *(($0 + [28]))
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	$1 = [0]
	
.LABEL $label$5
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $6
	CALL $92($5, $4)
	$global$0 = ($5 + [16])
	return $0
}

void .FUNC $94 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = (*($2 + [4]) - *($2))
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = int_32($5 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($4 + [16])) = ($5 + ($6 << [4]))
	*($4 + [8]) = $5
	*($4 + [12]) = $5
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $6, $2)
	*($4 + [12]) = ($5 + $2)
	
.LABEL $label$2
	$2 = CALL $99(($4 + [24]), ($4 + [8]), $0, $1, $3)
	CALL $14(($4 + [64]), $2)
	$5 = *($4 + [64])
	CALL send_inline($5, (*($4 + [68]) - $5))
	$5 = *($4 + [64])
	if ( ($5 == 0) ){ goto $label$3 }
	*($4 + [68]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$4 }
	*(($2 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$5 }
	*(($2 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$2 = *($4 + [8])
	if ( ($2 == 0) ){ goto $label$6 }
	*($4 + [12]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $121(($4 + [8]))
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = *(*(*($2 + [4])))
	*($0 + [8]) = (int_64)1
	$1 = *($2)
	CALL eosio_assert([1], [8496])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8496])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-4994024801263259648, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $121($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $117($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $116($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $116($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $121($0)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [18]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	$3 = ($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [44])) - *($1 + [40])) / (int_32)[12]))
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$7 = ((int_64)$5) != (int_64)0
	*($2 + [8]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8496])
	CALL memcpy(*($3), ($2 + [8]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [44]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $93($0, $6)
	$6 = ($6 + [12])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	$4 = *($3)
	
.LABEL $label$2
	$6 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($6) - $4) > (int_32)[7]), [8496])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [56]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = *(($1 + [64]))
	CALL eosio_assert(((int_32)(*($6) - $4) > (int_32)[7]), [8496])
	CALL memcpy(*($3), ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	CALL eosio_assert(((int_32)(*($6) - $4) > (int_32)[31]), [8496])
	CALL memcpy(*($3), ($1 + [80]), [32])
	$4 = (*($3) + [32])
	*($3) = $4
	CALL eosio_assert(((int_32)(*($6) - $4) > (int_32)[1]), [8496])
	CALL memcpy(*($3), ($1 + [112]), [2])
	*($3) = (*($3) + [2])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8496])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8496])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $123 (int_32 $0)
{
}

void .FUNC $115 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $122 ()
{
	return [10104]
}

void .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18504])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18312]
	$3 = (((int_32)$1 * (int_32)[12]) + [18312])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $121 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $124($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($1 + [8]))
	if ( (CALL is_account((int_64)4157600125686060400) == 0) ){ goto $label$1 }
	CALL require_recipient((int_64)4157600125686060400)
	
.LABEL $label$1
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $127($1)
	
.LABEL $label$2
	*(CALL $122()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $127(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $130($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8771])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8771])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8771])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [9663])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)*($7) != (int_32)$3), [8771])
	$3 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($3), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($4 <= *($7)), [9663])
	$4 = *($3)
	$2 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($2 & [128]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

int_64 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$1 = ($global$0 - [48])
	$global$0 = $1
	$2 = *($0)
	$0 = CALL $124([8827])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8831])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($0 + [8826]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8876])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	*($1 + [8]) = $2
	*($1) = (int_64)6138663591592764928
	$0 = CALL db_find_i64((int_64)6138663591592764928, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$9 }
	$0 = CALL $81($1, $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$1), [8697])
	$3 = ((int_64)*($0) / (int_64)4)
	$5 = *($1 + [24])
	if ( ($5 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL prints([9600])
	CALL printui((int_64)4)
	CALL prints([9620])
	if ( (int_64)($3 == 0) ){ goto $label$10 }
	$0 = [0]
	$7 = $3
	
.LOOP $label$12:
	*((($1 + [41]) + $0)) = $7
	$4 = ($0 + [1])
	if ( ((uint_32)$0 > (uint_32)[5]) ){ goto $label$11 }
	$0 = $4
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$12 }
	
.LABEL $label$11
	CALL prints_l(($1 + [41]), $4)
	
.LABEL $label$10
	CALL prints([9618])
	CALL printn($2)
	CALL eosio_assert([1], [8929])
	$0 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$3 = $7
	$4 = [1]
	$5 = $0
	$0 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$3 = $7
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$5 = ($0 + [1])
	$0 = $5
	if ( $4 ){ goto $label$17 }
	$4 = [1]
	$0 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	CALL eosio_assert($4, [8978])
	$3 = (int_64)0
	$5 = *($1 + [24])
	if ( $5 ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($1 + [48])
	return $3
	
.LABEL $label$7
	$6 = ($1 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$20:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL _ZdlPv($4)
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$20 }
	$0 = *(($1 + [24]))
	goto $label$18 
	
.LABEL $label$19
	$0 = $5
	
.LABEL $label$18
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($1 + [48])
	return $3
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $122())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $126($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8748])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $127($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	CALL $80(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $79(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $130($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [8776])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	CALL $75(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8748])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $127($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8771])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8771])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [8771])
	CALL memcpy(($3 + [16]), ($2 + [16]), [1])
	*($5 + [16]) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $76(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $130($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	CALL $103(($0 + [56]))
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [32]) = *($1 + [16])
	$4 = (*(($1 + [36])) - *($1 + [32]))
	$5 = ((int_32)$4 / (int_32)[12])
	$6 = *($1 + [10])
	$7 = *($1 + [8])
	$8 = *($1)
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$1 }
	$4 = CALL _Znwj($4)
	*(($2 + [24])) = ($4 + ((int_32)$5 * (int_32)[12]))
	*($2 + [16]) = $4
	*($2 + [20]) = $4
	$1 = *(($1 + [36]))
	$5 = *(($1 + [32]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	$9 = CALL $116($4, $5)
	$4 = ($4 + [12])
	$5 = ($5 + [12])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$3 }
	*($2 + [20]) = ($9 + [12])
	
.LABEL $label$2
	*(($2 + [8])) = *($3)
	*($2) = *($2 + [32])
	CALL $104($0, $8, ($7 & [65535]), ($6 & [65535]), $2, ($2 + [16]))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	$5 = *($2 + [20])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$8
	$5 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$7 }
	$4 = *($2 + [16])
	goto $label$5 
	
.LABEL $label$6
	$4 = $1
	
.LABEL $label$5
	*($2 + [20]) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $121(($2 + [16]))
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8771])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [8771])
	CALL memcpy(($0 + [8]), *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [8771])
	CALL memcpy(($0 + [10]), *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8771])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $56(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9089])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9135])
	*($1 + [16]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9186])
	CALL eosio_assert([1], [8496])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8496])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [31]) = *($1 + [16])
	CALL eosio_assert([1], [8496])
	CALL memcpy(($4 + [16]), ($4 + [31]), [1])
	CALL db_update_i64(*($1 + [28]), $2, $4, [17])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [8776])
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $1
	CALL $77($3, $5)
	*($4 + [72]) = (($4 + [16]) + [48])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $78(($4 + [64]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-3660748247211412992, $2, $6, ($4 + [16]), [48])
	*($5 + [52]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $79(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $129($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8213])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $9 (int_64 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [208])
	$global$0 = $2
	$3 = CALL current_time()
	*((($2 + [144]) + [28])) = (int_64)0
	*(($4 = ($2 + [188]))) = (int_64)0
	*(($2 + [196])) = (int_64)0
	*($2 + [156]) = [0]
	*($2 + [160]) = [0]
	*($2 + [164 align=4]) = (int_64)0
	*($2 + [180 align=4]) = (int_64)0
	*($2 + [144]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [112]) = [8356]
	*($2 + [116]) = CALL $124([8356])
	*($2 + [24]) = *($2 + [112])
	$5 = CALL $10(($2 + [120]), ($2 + [24]))
	*($2 + [128]) = $0
	*($2 + [136]) = *($5)
	*($2 + [96]) = [8363]
	*($2 + [100]) = CALL $124([8363])
	*($2 + [16]) = *($2 + [96])
	$6 = CALL $10(($2 + [104]), ($2 + [16]))
	*($2 + [80]) = [8376]
	*($2 + [84]) = CALL $124([8376])
	*($2 + [8]) = *($2 + [80])
	$7 = CALL $10(($2 + [88]), ($2 + [8]))
	*(($2 + [64])) = [0]
	*((($2 + [32]) + [16])) = *(($1 + [16]))
	*((($2 + [32]) + [8])) = *(($1 + [8]))
	*($2 + [56]) = (int_64)0
	*($2 + [32]) = *($1)
	$5 = (*(($1 + [28])) - *($1 + [24]))
	$8 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[357913942]) ){ goto $label$1 }
	$9 = CALL _Znwj($5)
	*((($2 + [32]) + [24])) = $9
	*(($10 = (($2 + [32]) + [28]))) = $9
	*(($2 + [64])) = ($9 + ((int_32)$8 * (int_32)[12]))
	$8 = *(($1 + [28]))
	$5 = *(($1 + [24]))
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $116($9, $5)
	$9 = (*($10) + [12])
	*($10) = $9
	$5 = ($5 + [12])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = (($2 + [144]) + [40])
	$5 = *($9)
	if ( ((uint_32)$5 >= (uint_32)*($4)) ){ goto $label$6 }
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [8]) = *($7)
	*($5) = *($6)
	*(($8 = ($5 + [24]))) = [0]
	$10 = CALL _Znwj([16])
	*($5 + [16]) = $10
	$4 = ($10 + [16])
	*($8) = $4
	*(($10 + [8])) = *((($2 + [128]) + [8]))
	*($10) = *($2 + [128])
	*(($5 + [20])) = $4
	CALL $11(($5 + [28]), ($2 + [32]))
	*($9) = (*($9) + [40])
	$10 = *($2 + [56])
	if ( $10 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $12(($2 + [180]), ($2 + [128]), $6, $7, ($2 + [32]))
	$10 = *($2 + [56])
	if ( ($10 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$8 = ($2 + [60])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($9 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($9 + [-4])))
	
.LABEL $label$10
	$9 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$9 }
	$5 = *(($2 + [56]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $10
	
.LABEL $label$7
	*($8) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$4
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = *($1)
	CALL $7(($2 + [128]), ($2 + [144]))
	$5 = *($2 + [128])
	CALL send_deferred(($2 + [32]), $0, $5, (*($2 + [132]) - $5), [0])
	$5 = *($2 + [128])
	if ( ($5 == 0) ){ goto $label$11 }
	*($2 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	CALL $8(($2 + [144]))
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$1
	CALL $121(($2 + [56]))
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9934])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9979])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10029])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $69($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $15($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $70($2, $1)
	CALL $72(CALL $71(CALL $71($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $5 (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [32])) = [0]
	*($3 + [8]) = $2
	*($3) = $2
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$4 = [0]
	$5 = CALL db_find_i64($2, $2, (int_64)3617214769600282624, $0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2($3, $5)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$3), [8697])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8329])
	CALL eosio_assert($5, [9870])
	CALL eosio_assert($5, [9904])
	$5 = CALL db_next_i64(*($4 + [44]), ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $2($3, $5)
	
.LABEL $label$2
	CALL $6($3, $4)
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($3 + [28])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8748])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $127($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	CALL $100(($3 + [32]), $5)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $4(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $130($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_64 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL prints([8192])
	CALL printui($0)
	CALL prints([8211])
	$6 = [0]
	*(($5 + [32])) = [0]
	*($5 + [8]) = $3
	*($5) = $3
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$7 = CALL db_find_i64($3, $3, (int_64)3617214769600282624, $0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $2($5, $7) + [40]) == (int_32)$5), [8697])
	goto $label$1 
	
.LABEL $label$2
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [8299])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$4()), [8776])
	*(($6 = CALL _Znwj([56])) + [40]) = $5
	*($6 + [8]) = $1
	*($6) = $0
	*($6 + [16]) = $2
	*($6 + [24]) = $3
	*($6 + [32]) = $4
	*($5 + [104]) = (($5 + [48]) + [34])
	*($5 + [100]) = ($5 + [48])
	*($5 + [96]) = ($5 + [48])
	CALL $3(($5 + [96]), $6)
	$3 = *($6)
	$7 = CALL db_store_i64(*(($5 + [8])), (int_64)3617214769600282624, $2, $3, ($5 + [48]), [34])
	*($6 + [44]) = $7
	$1 = ($5 + [16])
	if ( (uint_64)($3 <= *($1)) ){ goto $label$3 }
	*($1) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($5 + [96]) = $6
	$3 = *($6)
	*($5 + [48]) = $3
	*($5 + [44]) = $7
	$8 = ($5 + [28])
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*(($5 + [32]))) ){ goto $label$6 }
	*($1 + [8]) = $3
	*($1 + [16]) = $7
	*($5 + [96]) = [0]
	*($1) = $6
	*($8) = ($1 + [24])
	$6 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $4(($5 + [24]), ($5 + [96]), ($5 + [48]), ($5 + [44]))
	$6 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($6)
	
.LABEL $label$4
	$7 = *($5 + [24])
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = ($5 + [28])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$1 = *($6)
	*($6) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($5 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($5 + [112])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $15($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8496])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8496])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $73(CALL $74($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $121($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $93(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8771])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8771])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8771])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8771])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $98(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8502])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8607])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8540])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8607])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [24]
	$4 = ($1 + [24])
	$6 = *($1 + [24])
	$5 = *(($1 + [28]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($5 - $6) / (int_32)[12]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = *($6)
	$9 = ( *($6 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ([0] - ($9 + $3))
	$7 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$6:
	$8 = ($8 + [-1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	$3 = ([0] - $8)
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	$3 = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	$3 = ([0] - $8)
	
.LABEL $label$4
	CALL $15($0, $3)
	$3 = *(($0 + [4]))
	$8 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	*($2 + [12]) = $8
	*($2 + [8]) = $8
	*($2 + [16]) = $3
	*($2 + [24]) = ($2 + [8])
	*($2 + [44]) = $4
	*($2 + [32]) = $1
	*($2 + [36]) = ($1 + [8])
	*($2 + [40]) = ($1 + [16])
	CALL $101(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $11(($6 + [28]), $4)
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $15($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $16(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1) = (int_64)0
	*($1 + [16]) = [0]
	*($1 + [8]) = *(*(*($0 + [4])))
	$3 = *($0)
	CALL eosio_assert([1], [8496])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8496])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	*($2 + [31]) = *($1 + [16])
	CALL eosio_assert([1], [8496])
	CALL memcpy(($2 + [16]), ($2 + [31]), [1])
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)5445034771337199616, *(*($0 + [8])), $4, $2, [17])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_64 .FUNC $18 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL eosio_assert(CALL $fimport$13($0), [8389])
	*(($1 + [40])) = [0]
	*($1 + [16]) = $0
	*($1 + [8]) = $0
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($0, $0, (int_64)7869342374570861056, $0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $19(($1 + [8]), $3)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)($1 + [8])), [8697])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8418])
	$0 = *($2 + [8])
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($1 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($1 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$2 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($1 + [48])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8748])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $127($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8771])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8771])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $23(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $130($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8748])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $127($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $5)
	*(($4 = CALL _Znwj([128])) + [24]) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [116]) = $0
	CALL $66(($3 + [32]), $4)
	*($4 + [120]) = $1
	*($3 + [24]) = $4
	$6 = *($4)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $4
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $83(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $130($2)
	
.LABEL $label$6
	$2 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	$0 = *($2 + [40])
	if ( ($0 == 0) ){ goto $label$10 }
	$8 = ($2 + [44])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($1 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$14
	$1 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($2 + [40]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$10
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9089])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9135])
	$6 = *($3)
	*($1 + [80]) = *($6)
	*(($1 + [104])) = *(($6 + [24]))
	*(($1 + [96])) = *(($6 + [16]))
	*(($1 + [88])) = *(($6 + [8]))
	$6 = *(*($3 + [4]) + [4])
	*($1 + [56]) = *($6 + [24])
	*(($1 + [64])) = *(($6 + [32]))
	$7 = *($1)
	*($1 + [56]) = *(*($3 + [8]))
	*($1 + [112]) = *(*($3 + [12]))
	CALL eosio_assert([1], [9186])
	$6 = *($1 + [40])
	$8 = *(($1 + [44]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($8 - $6) / (int_32)[12]))
	$3 = [36]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$3:
	$10 = *($6)
	$10 = ( *($6 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$3 = ($10 + $3)
	$9 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	$6 = ($3 + [50])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$3 = CALL $127($6)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL $92($5, $1)
	CALL db_update_i64(*(($1 + [120])), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $130($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9663])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $88($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *(($3 + [-12]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$10:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [8771])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [8771])
	CALL memcpy(($2 + [8]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $87(CALL $89($0, ($2 + [16])), ($2 + [28]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9663])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $86($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [8771])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $87($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $121(($0 + [16]))
	
.LABEL $label$1
	CALL $121(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9089])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9135])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$5 = *($1)
	CALL eosio_assert([1], [9186])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $78(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [8776])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([128])) + [24]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [116]) = $1
	CALL $82(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [120])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $83(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$7 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	$0 = *($7 + [40])
	if ( ($0 == 0) ){ goto $label$4 }
	$5 = ($7 + [44])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($1 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$8
	$1 = $3
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($7 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $0
	
.LABEL $label$5
	*($5) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8771])
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $130($2)
	
.LABEL $label$5
	CALL $40($4)
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9663])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $97($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $98($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [112])
	$global$0 = $2
	*(($2 + [104])) = [0]
	*((($2 + [72]) + [16])) = *(($1 + [16]))
	*((($2 + [72]) + [8])) = *(($1 + [8]))
	*($2 + [96]) = (int_64)0
	*($2 + [72]) = *($1)
	$3 = (*(($1 + [28])) - *($1 + [24]))
	$4 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*((($2 + [72]) + [24])) = $3
	*((($2 + [72]) + [28])) = $3
	*(($2 + [104])) = ($3 + ((int_32)$4 * (int_32)[12]))
	$5 = *(($1 + [28]))
	$4 = *(($1 + [24]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = CALL $116($3, $4)
	$3 = ($3 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	*(($2 + [100])) = ($6 + [12])
	
.LABEL $label$2
	$7 = *(($1 + [72]))
	*((($2 + [32]) + [24])) = $7
	$8 = *(($1 + [64]))
	*((($2 + [32]) + [16])) = $8
	$9 = *(($1 + [56]))
	$10 = *($1 + [48])
	*(($2 + [16])) = $8
	*(($2 + [24])) = $7
	*($2 + [32]) = $10
	*($2 + [40]) = $9
	*($2) = $10
	*($2 + [8]) = $9
	CALL $105($0, ($2 + [72]), $2)
	$5 = *($2 + [96])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($2 + [100])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$8
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($2 + [96]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($2 + [112])
	return (unreachable)
	
.LABEL $label$1
	CALL $121((($2 + [72]) + [24]))
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $118($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $35 (int_32 $0, int_64 $1)
{
	CALL $22(*($0), $1)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $130($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $125(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10100])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $125(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$3 = ($global$0 - [384])
	$global$0 = $3
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( (int_64)(*($8) == 0) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [8697])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)5445034771337199616, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $41($4, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [8697])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9245])
	CALL eosio_assert(((int_32)*($8 + [16]) ^ (int_32)[1]), [9280])
	$9 = ($0 + [32])
	$10 = *($1)
	$6 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$10) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(($5 + [116])) == (int_32)$9), [8697])
	*($3 + [364]) = $5
	*($3 + [360]) = $9
	$4 = (($3 + [360]) | [4])
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL db_find_i64(*($9), *(($0 + [40])), (int_64)3617214763094933504, $10)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$9 }
	$5 = CALL $58($9, $7)
	CALL eosio_assert(((int_32)*($5 + [116]) == (int_32)$9), [8697])
	*($3 + [364]) = $5
	*($3 + [360]) = $9
	$4 = (($3 + [360]) | [4])
	goto $label$5 
	
.LABEL $label$9
	$5 = [0]
	*($3 + [364]) = [0]
	*($3 + [360]) = $9
	$4 = (($3 + [360]) | [4])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9737])
	$11 = ((uint_64)((int_64)((int_64)((int_64)*($2 + [8]) ^ (int_64)*($2)) ^ (int_64)*($2 + [16])) ^ (int_64)*($2 + [24])) % (uint_64)(int_64)100)
	$10 = ((int_64)$11 + (int_64)1)
	*($3 + [352]) = $10
	CALL $5(*($1), $10, *($0))
	*($3 + [344]) = (int_64)0
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$12 }
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$10 }
	$6 = *($5 + [18])
	if ( ((uint_64)$11 >= (uint_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)65535)) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$6 = *($5 + [18])
	if ( ((uint_64)$10 >= (uint_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)65535)) ){ goto $label$10 }
	
.LABEL $label$11
	$6 = ($6 & [65535])
	*($3 + [344]) = ((uint_64)((uint_64)((int_64)((int_64)*($5 + [24]) * (int_64))((int_64)10000 - *($8 + [8]))) * (int_64)100) / (uint_64)(CASTING int_64)(int_32 (( ([100] - $6) ? $6 : $7 ) + [-1]))) / (uint_64)(int_64)10000)
	
.LABEL $label$10
	$10 = *($0)
	$7 = *($3 + [364])
	*($3 + [224]) = $2
	*($3 + [228]) = ($3 + [360])
	*($3 + [232]) = ($3 + [344])
	*($3 + [236]) = ($3 + [352])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9054])
	CALL $59($9, $7, $10, ($3 + [224]))
	if ( (int_64)(*($3 + [344]) == 0) ){ goto $label$15 }
	*(($3 + [336])) = [0]
	*($3 + [328]) = (int_64)0
	$7 = CALL $124([9762])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($3 + [328]) = ($7 << [1])
	$6 = (($3 + [328]) | [1])
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$5 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [328]) = ($5 | [1])
	*($3 + [336]) = $6
	*($3 + [332]) = $7
	
.LABEL $label$17
	CALL memcpy($6, [9762], $7)
	
.LABEL $label$16
	*(($6 + $7)) = [0]
	*($3 + [280]) = (int_64)3617214756542218240
	$10 = *($0)
	*($3 + [272]) = $10
	$7 = *($4)
	$11 = *($7 + [8])
	*(($3 + [248])) = *(($7 + [64]))
	*($3 + [224]) = $10
	*($3 + [240]) = *($7 + [56])
	*($3 + [232]) = $11
	CALL $116(($3 + [256]), ($3 + [328]))
	$7 = CALL $13(($3 + [288]), ($3 + [272]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [224]))
	CALL $14(($3 + [368]), $7)
	$6 = *($3 + [368])
	CALL send_inline($6, (*($3 + [372]) - $6))
	$6 = *($3 + [368])
	if ( ($6 == 0) ){ goto $label$19 }
	*($3 + [372]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$20 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$21 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [264])))
	
.LABEL $label$22
	if ( ((*($3 + [328]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($3 + [336]))
	
.LABEL $label$15
	$7 = CALL $124([8827])
	if ( ($7 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [8831])
	goto $label$24 
	
.LABEL $label$25
	if ( ($7 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$10 = (int_64)0
	
.LOOP $label$26:
	$6 = *(($7 + [8826]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [8876])
	
.LABEL $label$27
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$26 }
	$11 = ((int_64)$10 << (int_64)8)
	goto $label$13 
	
.LABEL $label$23
	$11 = (int_64)0
	goto $label$13 
	
.LABEL $label$14
	CALL $115(($3 + [328]))
	
.LABEL $label$13
	CALL eosio_assert([1], [8929])
	$10 = (uint_64)$11 >> (uint_64)(int_64)8)
	$12 = ((int_64)$11 | (int_64)4)
	$7 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$10 = $11
	$6 = [1]
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$10 = $11
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$32 }
	$6 = [1]
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$6 = [0]
	
.LABEL $label$28
	CALL eosio_assert($6, [8978])
	$8 = *($4)
	$10 = ((int_64)*($8 + [24]) * (int_64)150)
	if ( ((int_64)$10 < (int_64)10000) ){ goto $label$33 }
	$11 = *(($8 + [64]))
	$13 = *($8 + [8])
	$14 = *($0)
	$15 = *($8 + [56])
	$16 = *($8 + [24])
	$17 = *(($8 + [32]))
	*((($3 + [32]) + [8])) = $17
	*((($3 + [16]) + [8])) = $11
	*(($3 + [8])) = $12
	*((($3 + [208]) + [8])) = $17
	*((($3 + [192]) + [8])) = $11
	*($3 + [184]) = $12
	*($3 + [208]) = $16
	*($3 + [192]) = $15
	$10 = ((uint_64)$10 / (uint_64)(int_64)10000)
	*($3 + [176]) = $10
	*($3 + [16]) = $15
	*($3) = $10
	*($3 + [32]) = $16
	CALL $20($14, $13, [0], ($3 + [32]), ($3 + [16]), $3, $10)
	$8 = *($4)
	
.LABEL $label$33
	$10 = *($0)
	*($3 + [232]) = (int_64)3617214756542218240
	*($3 + [224]) = $10
	$11 = *(($8 + [8]))
	$12 = *(($8 + [16]))
	$15 = *(($8 + [24]))
	$16 = *(($8 + [32]))
	$13 = *($8)
	*((($3 + [48]) + [44])) = (int_64)0
	*((($3 + [48]) + [32])) = $16
	*((($3 + [48]) + [24])) = $15
	*((($3 + [48]) + [16])) = $12
	*($3 + [88]) = [0]
	*($3 + [56]) = $11
	*($3 + [48]) = $13
	$7 = (*(($8 + [44])) - *($8 + [40]))
	$4 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$35 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$34 }
	$6 = CALL _Znwj($7)
	*(($5 = (($3 + [48]) + [44]))) = $6
	*(($3 + [96])) = ($6 + ((int_32)$4 * (int_32)[12]))
	*((($3 + [48]) + [40])) = $6
	$4 = *(($8 + [44]))
	$7 = *(($8 + [40]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$35 }
	
.LOOP $label$36:
	CALL $116($6, $7)
	$6 = (*($5) + [12])
	*($5) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$36 }
	
.LABEL $label$35
	*((($3 + [48]) + [112])) = *(($8 + [112]))
	*((($3 + [48]) + [104])) = *(($8 + [104]))
	*((($3 + [48]) + [96])) = *(($8 + [96]))
	*((($3 + [48]) + [88])) = *(($8 + [88]))
	*((($3 + [48]) + [80])) = *(($8 + [80]))
	*((($3 + [48]) + [72])) = *(($8 + [72]))
	*((($3 + [48]) + [64])) = *(($8 + [64]))
	*($3 + [104]) = *($8 + [56])
	CALL $60($10, ($3 + [224]), ($3 + [48]))
	$5 = *($3 + [88])
	if ( ($5 == 0) ){ goto $label$37 }
	$8 = ($3 + [92])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$39 }
	
.LOOP $label$40:
	$7 = ($6 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$41
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$40 }
	$7 = *(($3 + [88]))
	goto $label$38 
	
.LABEL $label$39
	$7 = $5
	
.LABEL $label$38
	*($8) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$37
	$4 = ($0 + [72])
	$10 = *($3 + [352])
	$6 = *(($0 + [100]))
	$8 = *(($0 + [96]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$45 }
	
.LOOP $label$47:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$10) ){ goto $label$46 }
	$6 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$45 }
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [8697])
	goto $label$44 
	
.LABEL $label$45
	$7 = CALL db_find_i64(*(($0 + [72])), *(($0 + [80])), (int_64)-4994024801263259648, $10)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$43 }
	$5 = CALL $61($4, $7)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [8697])
	
.LABEL $label$44
	$10 = *($0)
	CALL eosio_assert([1], [9054])
	CALL $62($4, $5, $10, ($3 + [224]))
	goto $label$42 
	
.LABEL $label$43
	$10 = *($0)
	*($3 + [288]) = ($3 + [352])
	CALL $63(($3 + [224]), $4, $10, ($3 + [288]))
	
.LABEL $label$42
	$4 = ($0 + [152])
	$6 = *(($0 + [180]))
	$8 = *(($0 + [176]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$49 }
	
.LOOP $label$51:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( (int_64)(*($5) == 0) ){ goto $label$50 }
	$6 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$49 }
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$4), [8697])
	goto $label$48 
	
.LABEL $label$49
	$5 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [160])), (int_64)-3660748247211412992, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$48 }
	$5 = CALL $43($4, $7)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$4), [8697])
	
.LABEL $label$48
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [9568])
	$10 = *($0)
	*($3 + [224]) = ($3 + [360])
	CALL eosio_assert($7, [9054])
	CALL $64($4, $5, $10, ($3 + [224]))
	$10 = *($3 + [360])
	$7 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32)
	$6 = ((int_32)$7) != (int_32)[0]
	CALL eosio_assert($6), [9870])
	CALL eosio_assert($6, [9904])
	$6 = CALL db_next_i64(*($7 + [120]), ($3 + [224]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$52 }
	CALL $58((CASTING uint_32)(uint_64 $10), $6)
	
.LABEL $label$52
	CALL $65($9, $7)
	$global$0 = ($3 + [384])
	return (unreachable)
	
.LABEL $label$34
	CALL $121(($3 + [88]))
	(unreachable)
}

int_32 .FUNC $28 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $130($2)
	
.LABEL $label$5
	CALL $40($4)
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $55 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = *($0)
	*($4 + [48]) = [9726]
	*($4 + [52]) = CALL $124([9726])
	*($4) = *($4 + [48])
	CALL $1($1, [0], $5, $5, *(CALL $10(($4 + [56]), $4)))
	
.LABEL $label$1
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	*($4 + [8]) = $1
	*($4 + [16]) = (int_64)5445027871351373824
	*($4 + [24]) = *($0)
	CALL $84(($4 + [32]), *($2), *($2 + [4]))
	CALL $9(*($0), ($4 + [8]))
	$3 = *($4 + [32])
	if ( ($3 == 0) ){ goto $label$2 }
	$6 = ($4 + [36])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($2 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$6
	$2 = $0
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($4 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $3
	
.LABEL $label$3
	*($6) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($4 + [64])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $127($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10100])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $127($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [128])
	$global$0 = $2
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$4 = (*($0) + int_32($3 >> [1]))
	$5 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$5 = *((*($4) + $5))
	
.LABEL $label$1
	*(($2 + [48])) = [0]
	*(($2 + [32])) = *(($1 + [32]))
	*(($2 + [24])) = *(($1 + [24]))
	*(($2 + [16])) = *(($1 + [16]))
	*($2 + [40]) = (int_64)0
	*($2) = *($1)
	*($2 + [8]) = *(($1 + [8]))
	$0 = (*(($1 + [44])) - *($1 + [40]))
	$3 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$0 = CALL _Znwj($0)
	*(($2 + [40])) = $0
	*(($2 + [44])) = $0
	*(($2 + [48])) = ($0 + ((int_32)$3 * (int_32)[12]))
	$6 = *(($1 + [44]))
	$3 = *(($1 + [40]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = CALL $116($0, $3)
	$0 = ($0 + [12])
	$3 = ($3 + [12])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$4 }
	*(($2 + [44])) = ($7 + [12])
	
.LABEL $label$3
	*(($2 + [112])) = *(($1 + [112]))
	*(($2 + [104])) = *(($1 + [104]))
	*(($2 + [96])) = *(($1 + [96]))
	*(($2 + [88])) = *(($1 + [88]))
	*(($2 + [80])) = *(($1 + [80]))
	*(($2 + [72])) = *(($1 + [72]))
	*(($2 + [64])) = *(($1 + [64]))
	*($2 + [56]) = *($1 + [56])
	CALL void $4((int_32 $2), (int_32 $5))
	$1 = *($2 + [40])
	if ( ($1 == 0) ){ goto $label$5 }
	$6 = ($2 + [44])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($3 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$9
	$3 = $0
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($2 + [40]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $1
	
.LABEL $label$6
	*($6) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($2 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $121(($2 + [40]))
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8496])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2) = $0
	CALL $102($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_64 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$7 = ($global$0 - [144])
	$global$0 = $7
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	$8 = [0]
	$9 = *([0] + [8660])
	$10 = $1
	
.LOOP $label$6:
	*(($7 + ($11 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$10 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$11 == (int_32)[12]) )))))
	$8 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[11]) ){ goto $label$5 }
	$10 = ((int_64)$10 << (int_64)5)
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($7 + [80])) = [0]
	*($7 + [72]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$3 }
	*($7 + [72]) = ($8 << [1])
	$9 = (($7 + [72]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($7 + [80])) = [0]
	*($7 + [72]) = (int_64)0
	*($7 + [72]) = [0]
	$11 = (($7 + [72]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$12 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($12)
	*($7 + [72]) = ($12 | [1])
	*($7 + [80]) = $9
	*($7 + [76]) = $8
	
.LABEL $label$2
	$12 = ($11 + [1])
	$11 = [0]
	
.LOOP $label$7:
	*(($9 + $11)) = *(($7 + $11))
	$11 = ($11 + [1])
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$7 }
	$11 = ($9 + $8)
	
.LABEL $label$1
	*($11) = [0]
	$11 = CALL $120(($7 + [72]), [8448])
	$8 = *($11)
	*($11) = [0]
	*($11 + [4]) = [0]
	$12 = *($11 + [8])
	*($11 + [8]) = [0]
	if ( ((*($7 + [72]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($7 + [80]))
	
.LABEL $label$8
	$10 = CALL $18($0)
	*(($7 + [32])) = *(($3 + [8]))
	*(($7 + [48])) = *(($4 + [8]))
	*(($7 + [64])) = *(($5 + [8]))
	*($7 + [8]) = $0
	*($7) = $2
	*($7 + [16]) = $1
	*($7 + [72]) = $10
	*($7 + [80]) = (int_64)-4420680149753659392
	*($7 + [24]) = *($3)
	*($7 + [40]) = *($4)
	*($7 + [56]) = *($5)
	*(($11 = CALL _Znwj([16]))) = $0
	*($11 + [8]) = (int_64)3617214756542218240
	*(($7 + [108])) = [0]
	$9 = ($11 + [16])
	*(($7 + [96])) = $9
	*(($7 + [92])) = $9
	*($7 + [88]) = $11
	*($7 + [100 align=4]) = (int_64)0
	CALL $15(($7 + [100]), [68])
	$11 = *((($7 + [72]) + [32]))
	$9 = *($7 + [100])
	*($7 + [116]) = $9
	*($7 + [112]) = $9
	*($7 + [120]) = $11
	*($7 + [128]) = ($7 + [112])
	*($7 + [136]) = $7
	CALL $21(($7 + [136]), ($7 + [128]))
	CALL $14(($7 + [112]), ($7 + [72]))
	$11 = *($7 + [112])
	CALL send_inline($11, (*($7 + [116]) - $11))
	$11 = *($7 + [112])
	if ( ($11 == 0) ){ goto $label$9 }
	*($7 + [116]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$9
	$11 = *($7 + [100])
	if ( ($11 == 0) ){ goto $label$10 }
	*(($7 + [104])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$10
	$11 = *($7 + [88])
	if ( ($11 == 0) ){ goto $label$11 }
	*(($7 + [92])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$11
	if ( (($8 & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv($12)
	
.LABEL $label$12
	$global$0 = ($7 + [144])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $22 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth($0)
	CALL eosio_assert(CALL $fimport$13($0), [8389])
	CALL eosio_assert(CALL $fimport$13($1), [8461])
	*((($2 + [8]) + [32])) = [0]
	*($2 + [16]) = $0
	*($2 + [8]) = $0
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = CALL db_find_i64($0, $0, (int_64)7869342374570861056, $0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $19(($2 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($2 + [8])), [8697])
	CALL eosio_assert([1], [9054])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($2 + [8])), [9089])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$4()), [9135])
	*($3 + [8]) = $1
	$1 = *($3)
	CALL eosio_assert([1], [9186])
	CALL eosio_assert([1], [8496])
	CALL memcpy(($2 + [64]), $3, [8])
	CALL eosio_assert([1], [8496])
	CALL memcpy((($2 + [64]) | [8]), ($3 + [8]), [8])
	CALL db_update_i64(*($3 + [20]), $0, ($2 + [64]), [16])
	$3 = (($2 + [8]) + [16])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$3 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$4 = *($2 + [32])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)CALL $fimport$4() == (int_64)$0), [8776])
	*(($3 = CALL _Znwj([32])) + [16]) = ($2 + [8])
	*($3 + [8]) = $1
	*($3) = $0
	CALL eosio_assert([1], [8496])
	CALL memcpy(($2 + [64]), $3, [8])
	CALL eosio_assert([1], [8496])
	CALL memcpy((($2 + [64]) | [8]), ($3 + [8]), [8])
	$1 = *($3)
	$4 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)7869342374570861056, $0, $1, ($2 + [64]), [16])
	*($3 + [20]) = $4
	$5 = (($2 + [8]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [56]) = $3
	$0 = *($3)
	*($2 + [64]) = $0
	*($2 + [52]) = $4
	$6 = ($2 + [36])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($2 + [40]))) ){ goto $label$7 }
	*($5 + [8]) = $0
	*($5 + [16]) = $4
	*($2 + [56]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	$3 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $3 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $23(($2 + [32]), ($2 + [56]), ($2 + [64]), ($2 + [52]))
	$3 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($2 + [36])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $4
	
.LABEL $label$8
	*($6) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$6 = ($global$0 - [672])
	$global$0 = $6
	*($6 + [134]) = $2
	*($6 + [136]) = $1
	*($6 + [132]) = $3
	$7 = ($0 + [112])
	$9 = *(($0 + [140]))
	$8 = *(($0 + [136]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( (int_64)(*($11) == 0) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$7), [8697])
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$10 = CALL db_find_i64(*($7), *(($0 + [120])), (int_64)5445034771337199616, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $41($7, $10)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$7), [8697])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9245])
	CALL eosio_assert(((int_32)*($11 + [16]) ^ (int_32)[1]), [9280])
	CALL require_auth($1)
	CALL eosio_assert(($2 == 0), [9304])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$6 }
	if ( $2 ){ goto $label$5 }
	CALL eosio_assert(((($3 + [-2]) & [65535]) <= [95]), [9323])
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert(((($3 + [-4]) & [65535]) <= [96]), [9351])
	
.LABEL $label$5
	$12 = *($11 + [8])
	$1 = *($4)
	CALL eosio_assert(((uint_64)CALL $48($0) >= (uint_64)(int_64))(((uint_64)((uint_64)((int_64)((int_64)$1 * (int_64))((int_64)10000 - $12)) * (int_64)100) / (uint_64)(CASTING int_64)(int_32 (( ([100] - $3) ? $3 : $2 ) + [-1]))) / (uint_64)(int_64)10000) - $1)), [9379])
	$10 = CALL read_transaction(($6 + [144]), [512])
	CALL eosio_assert(((int_32)$10 < (int_32)[513]), [9622])
	*($6 + [8]) = ($10 + ($6 + [144]))
	*($6 + [4]) = ($6 + [144])
	*($6) = ($6 + [144])
	$1 = CALL current_time()
	*(($6 + [100])) = (int_64)0
	*(($6 + [116])) = (int_64)0
	*(($6 + [124])) = (int_64)0
	*($6 + [84]) = [0]
	*($6 + [88]) = [0]
	*($6 + [92 align=4]) = (int_64)0
	*($6 + [108 align=4]) = (int_64)0
	*($6 + [72]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	CALL $49($6, ($6 + [72]))
	CALL $51(CALL $50(CALL $50($6, (($6 + [72]) + [24])), ($6 + [108])), (($6 + [72]) + [48]))
	CALL eosio_assert(((int_32)(*((($6 + [72]) + [40])) - *($6 + [108])) == (int_32)[80]), [9400])
	CALL eosio_assert(((int_64)*(*($6 + [108]) + [40]) == (int_64)6138663591592764928), [9422])
	CALL eosio_assert(((int_64)*((*($6 + [108]) + [48])) == (int_64)-3617168760277827584), [9462])
	$10 = CALL $52(($6 + [32]), (*($6 + [108]) + [40]))
	*((($6 + [144]) + [24])) = (int_64)0
	*((($6 + [144]) + [40])) = [0]
	*($6 + [144]) = (int_64)0
	*($6 + [152]) = (int_64)0
	*($6 + [160]) = (int_64)0
	*($6 + [176]) = (int_64)0
	$8 = ($10 + [32])
	$9 = *($8)
	$11 = *($10 + [28])
	*($6 + [660]) = $11
	*($6 + [656]) = $11
	*($6 + [664]) = $9
	*($6 + [24]) = ($6 + [656])
	*($6 + [4]) = ($6 + [152])
	*($6 + [8]) = ($6 + [160])
	*($6 + [12]) = (($6 + [144]) + [32])
	*($6) = ($6 + [144])
	CALL $17($6, ($6 + [24]))
	$9 = *($10 + [28])
	if ( ($9 == 0) ){ goto $label$7 }
	*($8) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$7
	$9 = *($10 + [16])
	if ( ($9 == 0) ){ goto $label$8 }
	*(($10 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$8
	CALL eosio_assert(((int_64)*(($6 + [168])) == (int_64)*($4 + [8])), [9667])
	CALL eosio_assert(((int_64)*(($6 + [160])) == (int_64)*($4)), [9501])
	CALL eosio_assert(((int_64)*($6 + [144]) == (int_64)*($6 + [136])), [9526])
	CALL eosio_assert(((int_64)*(($6 + [152])) == (int_64)*($0)), [9548])
	$2 = ($0 + [152])
	$9 = *(($0 + [180]))
	$8 = *(($0 + [176]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$10 }
	
.LOOP $label$12:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( (int_64)(*($11) == 0) ){ goto $label$11 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$2), [8697])
	goto $label$9 
	
.LABEL $label$10
	$10 = CALL db_find_i64(*($2), *(($0 + [160])), (int_64)-3660748247211412992, (int_64)0)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$13 }
	$11 = CALL $43($2, $10)
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$2), [8697])
	goto $label$9 
	
.LABEL $label$13
	$11 = [0]
	
.LABEL $label$9
	*($6 + [660]) = $11
	*($6 + [656]) = $2
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9568])
	$1 = *($0)
	$10 = *($6 + [660])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9054])
	CALL $53($2, $10, $1, $6)
	$1 = *($0)
	*($6 + [16]) = $4
	*($6 + [20]) = $5
	*($6 + [4]) = ($6 + [136])
	*($6) = ($6 + [656])
	*($6 + [8]) = ($6 + [134])
	*($6 + [12]) = ($6 + [132])
	CALL $54(($6 + [24]), ($0 + [32]), $1, $6)
	CALL $55($0, *(*($6 + [28])), $5, [1])
	if ( ((*((($6 + [144]) + [32])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [184])))
	
.LABEL $label$14
	CALL $8(($6 + [72]))
	$global$0 = ($6 + [672])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-4417228131232907265) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)-4994130327958978561) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-7954134664302947328) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-5001118313837756416) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [1]
	*($3 + [16]) = *($3 + [104])
	CALL $26($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 > (int_64)5445040692004221439) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4417228131232907264) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4923678915975577600) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [2]
	*($3 + [40]) = *($3 + [80])
	CALL $28($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4994130327958978560) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4994024801513095168) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [3]
	*($3 + [24]) = *($3 + [96])
	CALL $30($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)5445040692004221440) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3) = *($3 + [120])
	CALL $32($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	*($3 + [116]) = [0]
	*($3 + [112]) = [5]
	*($3 + [8]) = *($3 + [112])
	CALL $34($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [76]) = [0]
	*($3 + [72]) = [6]
	*($3 + [48]) = *($3 + [72])
	CALL $36($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [68]) = [0]
	*($3 + [64]) = [7]
	*($3 + [56]) = *($3 + [64])
	CALL $32($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [92]) = [0]
	*($3 + [88]) = [8]
	*($3 + [32]) = *($3 + [88])
	CALL $39($1, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $123([0])
	$global$0 = ($3 + [128])
}

void .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [120])
	$3 = CALL db_lowerbound_i64(*($0 + [112]), *($2), (int_64)5445034771337199616, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = ($0 + [112])
	
.LOOP $label$2:
	$3 = CALL $41($0, $3)
	CALL eosio_assert([1], [9870])
	CALL eosio_assert([1], [9904])
	$4 = CALL db_next_i64(*($3 + [28]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $41($0, $4)
	
.LABEL $label$3
	CALL $68($0, $3)
	$3 = CALL db_lowerbound_i64(*($0), *($2), (int_64)5445034771337199616, (int_64)0)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [232]) + [24])) = (int_64)0
	*((($4 + [232]) + [40])) = [0]
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = [0]
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $5)
	*($4 + [320]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $46(($4 + [24]), ($4 + [320]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($6 = (($4 + [304]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [304]) = $7
	*($4 + [288]) = $7
	$3 = *($6)
	*((($4 + [320]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [304])
	*($4 + [40]) = $1
	*($4 + [320]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*($4 + [324]) = ($4 + [280])
	*($4 + [320]) = ($4 + [24])
	CALL $47(($4 + [320]), ($4 + [232]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $130($2)
	
.LABEL $label$4
	CALL $40(($4 + [24]))
	$3 = *($4 + [264])
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [268])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$9
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [264]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $130($0)
	
.LABEL $label$1
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9934])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9979])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10029])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL eosio_assert(((int_32)*(($1 + [116])) == (int_32)$0), [9934])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9979])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10029])
	$2 = ($3 + [-24])
	$9 = *($4)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = *($3)
	*($3) = [0]
	$4 = *($2)
	*($2) = $5
	if ( ($4 == 0) ){ goto $label$8 }
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	$10 = ($4 + [44])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($8 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$13
	$8 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$12 }
	$5 = *(($4 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $7
	
.LABEL $label$10
	*($10) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$9
	CALL _ZdlPv($4)
	
.LABEL $label$8
	*($2 + [8]) = *($3 + [8])
	*(($2 + [16])) = *(($3 + [16]))
	$2 = ($2 + [24])
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$7 }
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$16 }
	$9 = ($4 + [44])
	$8 = *($9)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($8 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$20
	$8 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($4 + [40]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $7
	
.LABEL $label$17
	*($9) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$16
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$14 }
	
.LABEL $label$5
	*(($0 + [28])) = $2
	CALL db_remove_i64(*(($1 + [120])))
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9089])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9135])
	$5 = *($1)
	$6 = *(*($3) + [4])
	CALL eosio_assert(((int_64)*(($6 + [32])) == (int_64)*(($1 + [24]))), [9790])
	$7 = ((int_64)*($1 + [16]) + (int_64)*($6 + [24]))
	*($1 + [16]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9833])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9852])
	$3 = *(*($3) + [4])
	CALL eosio_assert(((int_64)*(($3 + [64])) == (int_64)*(($1 + [40]))), [9790])
	$7 = ((int_64)*($1 + [32]) + (int_64)*($3 + [56]))
	*($1 + [32]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9833])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9852])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9186])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $78(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [128])
	$global$0 = $2
	*(($2 + [48])) = [0]
	*(($2 + [32])) = *(($1 + [32]))
	*(($2 + [24])) = *(($1 + [24]))
	*(($2 + [16])) = *(($1 + [16]))
	*($2 + [40]) = (int_64)0
	*($2) = *($1)
	*($2 + [8]) = *(($1 + [8]))
	$3 = (*(($1 + [44])) - *($1 + [40]))
	$4 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [40])) = $3
	*(($2 + [44])) = $3
	*(($2 + [48])) = ($3 + ((int_32)$4 * (int_32)[12]))
	$5 = *(($1 + [44]))
	$4 = *(($1 + [40]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = CALL $116($3, $4)
	$3 = ($3 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	*(($2 + [44])) = ($6 + [12])
	
.LABEL $label$2
	*(($2 + [112])) = *(($1 + [112]))
	*(($2 + [104])) = *(($1 + [104]))
	*(($2 + [96])) = *(($1 + [96]))
	*(($2 + [88])) = *(($1 + [88]))
	*(($2 + [80])) = *(($1 + [80]))
	*(($2 + [72])) = *(($1 + [72]))
	*(($2 + [64])) = *(($1 + [64]))
	*($2 + [56]) = *($1 + [56])
	CALL $106($0, $2)
	$1 = *($2 + [40])
	if ( ($1 == 0) ){ goto $label$4 }
	$5 = ($2 + [44])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$8
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($2 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $1
	
.LABEL $label$5
	*($5) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($2 + [128])
	return (unreachable)
	
.LABEL $label$1
	CALL $121(($2 + [40]))
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8771])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[1]), [8771])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[1]), [8771])
	CALL memcpy(($1 + [18]), *($0 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $56($0, ($1 + [40]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8771])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8771])
	CALL memcpy(($1 + [80]), *($0 + [4]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[1]), [8771])
	CALL memcpy(($1 + [112]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8748])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $127($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8771])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8771])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $96(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $130($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $60 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = CALL _Znwj([16]))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	*(($3 + [16])) = *(($2 + [16]))
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [32])) = *(($2 + [32]))
	$1 = *($2 + [40])
	*($2 + [40]) = [0]
	*($3 + [128]) = $4
	$4 = ($4 + [16])
	*($3 + [136]) = $4
	*($3 + [132]) = $4
	*($3) = *($2)
	*($3 + [8]) = *(($2 + [8]))
	$4 = ($2 + [44])
	*(($5 = ($3 + [44]))) = *($4)
	*(($3 + [48])) = *(($2 + [48]))
	*($4) = (int_64)0
	*(($3 + [64])) = *(($2 + [64]))
	*(($3 + [72])) = *(($2 + [72]))
	*(($3 + [80])) = *(($2 + [80]))
	*(($3 + [88])) = *(($2 + [88]))
	*(($3 + [96])) = *(($2 + [96]))
	*(($3 + [104])) = *(($2 + [104]))
	*(($3 + [112])) = *(($2 + [112]))
	*($3 + [40]) = $1
	*($3 + [56]) = *($2 + [56])
	CALL $94($0, (int_64)5445040692004221440, ($3 + [128]), $3)
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$5
	$4 = $2
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($3 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($3 + [44])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$2 = *($3 + [128])
	if ( ($2 == 0) ){ goto $label$6 }
	*($3 + [132]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($3 + [144])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [8776])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $95($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $96(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9089])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9135])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$5 = *($1)
	CALL eosio_assert([1], [9186])
	CALL eosio_assert([1], [8496])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8496])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0 + [12])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($5 + [4]) - *($5)) / (int_32)[12]))
	$7 = *($1)
	$1 = *($7 + [4])
	$0 = ($7 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($2 + [15]) = (($3) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($7 + [8])) - $1) > (int_32)[0]), [8496])
	CALL memcpy(*($0), ($2 + [15]), [1])
	$1 = (*($0) + [1])
	*($0) = $1
	if ( $3 ){ goto $label$1 }
	$1 = *(($5 + [4]))
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $93($7, $0)
	$0 = ($0 + [12])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8771])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8771])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8771])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8771])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8771])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = ($3 + [44])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($6 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$10
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	$7 = *(($3 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $4
	
.LABEL $label$7
	*($5) = $4
	CALL _ZdlPv($7)
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($7)
	
.LABEL $label$1
	return $0
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($3 + [40]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *(($3 + [48]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($0 + [56]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [64]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [8496])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [112])
	$global$0 = $3
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*($0) + int_32($4 >> [1]))
	$6 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$6 = *((*($5) + $6))
	
.LABEL $label$1
	*(($3 + [104])) = [0]
	*((($3 + [72]) + [16])) = *(($1 + [16]))
	*((($3 + [72]) + [8])) = *(($1 + [8]))
	*($3 + [96]) = (int_64)0
	*($3 + [72]) = *($1)
	$0 = (*(($1 + [28])) - *($1 + [24]))
	$4 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$0 = CALL _Znwj($0)
	*((($3 + [72]) + [24])) = $0
	*((($3 + [72]) + [28])) = $0
	*(($3 + [104])) = ($0 + ((int_32)$4 * (int_32)[12]))
	$1 = *(($1 + [28]))
	$4 = *(($1 + [24]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = CALL $116($0, $4)
	$0 = ($0 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	*(($3 + [100])) = ($7 + [12])
	
.LABEL $label$3
	$8 = *(($2 + [24]))
	*((($3 + [32]) + [24])) = $8
	$9 = *(($2 + [16]))
	*((($3 + [32]) + [16])) = $9
	$10 = *(($2 + [8]))
	$11 = *($2)
	*(($3 + [16])) = $9
	*(($3 + [24])) = $8
	*($3 + [32]) = $11
	*($3 + [40]) = $10
	*($3) = $11
	*($3 + [8]) = $10
	CALL void $5((int_32 ($3 + [72])), (int_32 $3), (int_32 $6))
	$1 = *($3 + [96])
	if ( ($1 == 0) ){ goto $label$5 }
	$7 = ($3 + [100])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($4 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$9
	$4 = $0
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($3 + [96]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $1
	
.LABEL $label$6
	*($7) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($3 + [112])
	return (unreachable)
	
.LABEL $label$2
	CALL $121((($3 + [72]) + [24]))
}

void .FUNC $104 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [48])
	$global$0 = $6
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$9 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$9 = *((*($8) + $9))
	
.LABEL $label$1
	*(($10 = (($6 + [32]) + [8]))) = *(($4 + [8]))
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = [0]
	*($6 + [32]) = *($4)
	$4 = (*($5 + [4]) - *($5))
	$0 = ((int_32)$4 / (int_32)[12])
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((uint_32)$0 >= (uint_32)[357913942]) ){ goto $label$2 }
	$4 = CALL _Znwj($4)
	*(($6 + [24])) = ($4 + ((int_32)$0 * (int_32)[12]))
	*($6 + [16]) = $4
	*($6 + [20]) = $4
	$5 = *(($5 + [4]))
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = CALL $116($4, $0)
	$4 = ($4 + [12])
	$0 = ($0 + [12])
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	*($6 + [20]) = ($7 + [12])
	
.LABEL $label$3
	*(($6 + [8])) = *($10)
	*($6) = *($6 + [32])
	CALL void $8((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $6), (int_32 ($6 + [16])), (int_32 $9))
	$5 = *($6 + [16])
	if ( ($5 == 0) ){ goto $label$5 }
	$0 = *($6 + [20])
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($0 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($0 + [-4])))
	
.LABEL $label$9
	$0 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	$4 = *($6 + [16])
	goto $label$6 
	
.LABEL $label$7
	$4 = $5
	
.LABEL $label$6
	*($6 + [20]) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$global$0 = ($6 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $121(($6 + [16]))
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9663])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $90($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8771])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[40]))
	$8 = ($2 + ((int_32)$3 * (int_32)[40]))
	$6 = $8
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[40]))
	$6 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$11 = ($6 - $10)
	$1 = [0]
	
.LOOP $label$10:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-32])) = *(($2 + [-32]))
	*(($6 + [-40])) = *(($2 + [-40]))
	*(($3 = ($6 + [-24]))) = (int_64)0
	*(($4 = ($6 + [-16]))) = [0]
	$5 = ($2 + [-24])
	*($3) = *($5)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($6 + [-12]))) = (int_64)0
	*(($6 = ($6 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($5) = (int_64)0
	$2 = ($2 + [-4])
	*($6) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$10 }
	$8 = ($8 + $1)
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = *(($6 + [-12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($6 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$2 = ($6 + [-40])
	$1 = *(($6 + [-24]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9663])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $15($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8771])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $121($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $117($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $116($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $116($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $121($0)
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($5 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$6 = ($4 + ((int_32)$7 * (int_32)[24]))
	$8 = ($1 + [24])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$1 = (($4 + $5) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$11 }
	$0 = ($3 + [44])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($7 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$15
	$7 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$14 }
	$1 = *(($3 + [40]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $4
	
.LABEL $label$12
	*($0) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1 + [16]) = *(*($4 + [8]))
	*($1) = *(*(*($4) + [4]) + [8])
	*($1 + [18]) = *(*($4 + [12]))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = *($4 + [16])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	$4 = *($4 + [20])
	CALL $91(($1 + [40]), *($4), *($4 + [4]))
	$6 = *($1 + [40])
	$7 = *(($1 + [44]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($7 - $6) / (int_32)[12]))
	$4 = [36]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$3:
	$9 = *($6)
	$9 = ( *($6 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$4 = ($9 + $4)
	$8 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$4:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$2
	$6 = ($4 + [50])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL $127($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $92($3, $1)
	$8 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($5 + [8]), (int_64)3617214763094933504, *(*($0 + [8])), $8, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $130($4)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8748])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $127($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8771])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8771])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $85(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $130($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8771])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8771])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8496])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8496])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $73($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8496])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8496])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8496])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8496])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8496])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8496])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8496])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8496])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8496])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $73(CALL $74($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	*($1 + [8]) = (int_64)0
	*($1) = (int_64)0
	$2 = CALL $124([8827])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8831])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8826]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8876])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [8929])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $6
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$3 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [8978])
	*(($1 + [24])) = $5
	*($1 + [16]) = (int_64)0
	$2 = CALL $124([8827])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8831])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$3 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($2 + [8826]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8876])
	
.LABEL $label$17
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$5 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [8929])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$6 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$3 = $6
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$3 = $6
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$22 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$4 = [0]
	
.LABEL $label$18
	CALL eosio_assert($4, [8978])
	*(($1 + [40])) = $5
	*($1 + [32]) = (int_64)0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8496])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8496])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8496])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $39 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [416])
	$global$0 = $3
	*(($4 = $3) + [360]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	CALL memset(($4 + [224]), [0], [128])
	*(($4 + [256])) = (int_64)0
	*((($4 + [224]) + [48])) = [0]
	*((($4 + [224]) + [64])) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [212]) = $2
	*($4 + [208]) = $2
	*($4 + [216]) = ($2 + $5)
	CALL $66(($4 + [208]), ($4 + [224]))
	*(($3 = ($4 + [8]))) = *($4 + [216])
	*($4) = *($4 + [208])
	$3 = *($3)
	*((($4 + [368]) + [8])) = $3
	*(($6 = (($4 + [384]) + [8]))) = $3
	$7 = *($4)
	*($4 + [384]) = $7
	*($4 + [368]) = $7
	$3 = *($6)
	*((($4 + [400]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [384])
	*($4 + [32]) = $1
	*($4 + [400]) = $1
	*(($4 + [56])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*((($4 + [16]) + [128])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*($4 + [404]) = ($4 + [360])
	*($4 + [400]) = ($4 + [16])
	CALL $67(($4 + [400]), ($4 + [224]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $130($2)
	
.LABEL $label$4
	CALL $40(($4 + [16]))
	$3 = *($4 + [264])
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [268])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$9
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [264]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [416])
	return [1]
}

int_32 .FUNC $36 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8771])
	CALL memcpy(($4 + [200]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [200])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $130($2)
	
.LABEL $label$5
	CALL $40(($4 + [8]))
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $37 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [116])) == (int_32)$3), [8697])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)3617214763094933504, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $58($3, $6)
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)$3), [8697])
	
.LABEL $label$1
	$6 = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10082])
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$8 = *($0)
	*($2 + [8]) = $8
	*($2 + [16]) = $8
	$5 = CALL db_find_i64($8, $8, (int_64)3617214769600282624, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $2(($2 + [8]), $5) + [40]) == (int_32)($2 + [8])), [8697])
	goto $label$5 
	
.LABEL $label$6
	$6 = [1]
	
.LABEL $label$5
	CALL $55($0, $1, ($7 + [40]), $6)
	$7 = *($2 + [32])
	if ( ($7 == 0) ){ goto $label$7 }
	$4 = ($2 + [36])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $7
	
.LABEL $label$8
	*($4) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($2 + [48])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8496])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8771])
	CALL memcpy(($4 + [200]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [200])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $130($2)
	
.LABEL $label$5
	CALL $40(($4 + [8]))
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [15]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [112])
	$5 = *(($0 + [140]))
	$4 = *(($0 + [136]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( (int_64)(*($7) == 0) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [8697])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)5445034771337199616, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $41($3, $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [8697])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8998])
	CALL eosio_assert(((int_32)*($7 + [16]) != (int_32)$1), [9034])
	$8 = *($0)
	*($2 + [8]) = ($2 + [15])
	CALL eosio_assert($6, [9054])
	CALL $45($3, $7, $8, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [368])
	$global$0 = $3
	*(($4 = $3) + [312]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [224]) + [32]))) = (int_64)0
	*(($6 = (($4 + [224]) + [16]))) = (int_64)0
	*(($7 = (($4 + [224]) + [24]))) = (int_64)0
	*(($4 + [296])) = (int_64)0
	*((($4 + [224]) + [64])) = (int_64)0
	*((($4 + [224]) + [56])) = (int_64)0
	*($3) = [0]
	*($4 + [224]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [216]) = ($2 + $5)
	*($4 + [208]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8771])
	CALL memcpy(($4 + [224]), $2, [8])
	$3 = ($5 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8771])
	CALL memcpy((($4 + [224]) | [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8771])
	CALL memcpy($6, ($2 + [16]), [8])
	*($4 + [212]) = ($2 + [24])
	CALL $56(($4 + [208]), $7)
	CALL eosio_assert(((uint_32)(*($4 + [216]) - *($4 + [212])) > (uint_32)[31]), [8771])
	CALL memcpy((($4 + [224]) + [48]), *($4 + [212]), [32])
	*($4 + [212]) = (*($4 + [212]) + [32])
	*(($3 = ($4 + [8]))) = *($4 + [216])
	*($4) = *($4 + [208])
	$3 = *($3)
	*((($4 + [320]) + [8])) = $3
	*(($6 = (($4 + [336]) + [8]))) = $3
	$8 = *($4)
	*($4 + [336]) = $8
	*($4 + [320]) = $8
	$3 = *($6)
	*((($4 + [352]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [336])
	*($4 + [32]) = $1
	*($4 + [352]) = $1
	*(($4 + [56])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*($4 + [356]) = ($4 + [312])
	*($4 + [352]) = ($4 + [16])
	CALL $57(($4 + [352]), ($4 + [224]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $130($2)
	
.LABEL $label$4
	CALL $40(($4 + [16]))
	$3 = *($4 + [248])
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [252])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$9
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [248]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [112])
	$5 = *(($0 + [140]))
	$4 = *(($0 + [136]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( (int_64)(*($7) == 0) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [8697])
	if ( $7 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)5445034771337199616, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $41($3, $6) + [24]) == (int_32)$3), [8697])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	*($2 + [16]) = ($2 + [24])
	CALL $42(($2 + [8]), $3, $1, ($2 + [16]))
	
.LABEL $label$1
	$3 = ($0 + [152])
	$5 = *(($0 + [180]))
	$4 = *(($0 + [176]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( (int_64)(*($7) == 0) ){ goto $label$8 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8697])
	if ( ($7 == 0) ){ goto $label$6 }
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*($3), *(($0 + [160])), (int_64)-3660748247211412992, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $43($3, $6) + [48]) == (int_32)$3), [8697])
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$6
	CALL $44(($2 + [8]), $3, *($0), ($2 + [16]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10112]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10116])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10112]) = [1]
	$2 = ($2 << [16])
	*([0] + [10116]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10116])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10116]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10112]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10112]) = [1]
	$3 = ($3 << [16])
	*([0] + [10116]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10116])
	
.LABEL $label$10
	*([0] + [10116]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $127 (int_32 $0)
{
	return CALL $128([10120], $0)
}