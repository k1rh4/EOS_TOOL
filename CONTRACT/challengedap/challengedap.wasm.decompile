(data (i32.const 8192) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8256) "Account does not Exists\00")
(data (i32.const 8280) "You cannot challenge yourself\00")
(data (i32.const 8310) "Balance must be a positive amount\00")
(data (i32.const 8344) "challengedac\00")
(data (i32.const 8357) "transfer\00")
(data (i32.const 8366) " Challenge money transfer\00")
(data (i32.const 8392) "No matching account name\00")
(data (i32.const 8417) "Challenge does not exist\00")
(data (i32.const 8442) "You cannot decline\00")
(data (i32.const 8461) "Cannot decline after accepting\00")
(data (i32.const 8492) " Challenge does not exist\00")
(data (i32.const 8518) "Cannot accept after decline\00")
(data (i32.const 8546) "Already accepted \00")
(data (i32.const 8564) "This is a isFree Bet\00")
(data (i32.const 8585) "Amount must be equal\00")
(data (i32.const 8606) "Sorry, Challenge time is over\00")
(data (i32.const 8636) "Account does not Exist\00")
(data (i32.const 8659) "Already accepted ----\00")
(data (i32.const 8681) " Wrong acceptor\00")
(data (i32.const 8697) "This is not a Free challenge\00")
(data (i32.const 8726) "Signing in to wrong challenge\00")
(data (i32.const 8756) "Challenge already failed\00")
(data (i32.const 8781) "Challenge already completed\00")
(data (i32.const 8809) "You have already completed your signin for today\00")
(data (i32.const 8858) "Check in time is wrong\00")
(data (i32.const 8881) "Checking out a wrong challenge\00")
(data (i32.const 8912) "You can\'t checkout without checking in\00")
(data (i32.const 8951) "You have already completed your checkout for today\00")
(data (i32.const 9002) "Challenge has not been completed\00")
(data (i32.const 9035) " ---- Can transfer only one time \00")
(data (i32.const 9069) "You can\'t transfer\00")
(data (i32.const 9088) "You have the Challenge \00")
(data (i32.const 9112) "You are not the creator of this challenge\00")
(data (i32.const 9154) "You are not invited to this challenge\00")
(data (i32.const 9192) "Challenge is Still Running\00")
(data (i32.const 9219) "challengeeos\00")
(data (i32.const 9232) "write\00")
(data (i32.const 9238) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9297) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9346) "invalid symbol name\00")
(data (i32.const 9366) "read\00")
(data (i32.const 9371) "get\00")
(data (i32.const 9375) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9426) "error reading iterator\00")
(data (i32.const 9449) "cannot create objects in table of another contract\00")
(data (i32.const 9500) "challengeone\00")
(data (i32.const 9513) "cannot pass end iterator to modify\00")
(data (i32.const 9548) "object passed to modify is not in multi_index\00")
(data (i32.const 9594) "cannot modify objects in table of another contract\00")
(data (i32.const 9645) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9704) "attempt to add asset with different symbol\00")
(data (i32.const 9747) "addition underflow\00")
(data (i32.const 9766) "addition overflow\00")
(data (i32.const 9784) "Error\00")
(data (i32.const 9790) "attempt to subtract asset with different symbol\00")
(data (i32.const 9838) "subtraction underflow\00")
(data (i32.const 9860) "subtraction overflow\00")
(data (i32.const 9881) "cannot pass end iterator to erase\00")
(data (i32.const 9915) "cannot increment end iterator\00")
(data (i32.const 9945) "object passed to erase is not in multi_index\00")
(data (i32.const 9990) "cannot erase objects in table of another contract\00")
(data (i32.const 10040) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10093) " Wrong Time to accept\00")
(data (i32.const 18524) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "db_get_i64" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$13 (param i32)))
(import "env" "abort" (func $fimport$14))
(import "env" "memset" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$24 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$27 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$28 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$31 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$33 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$34 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$35 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $64))
(export "_Znwj" (func $62))
(export "_Znaj" (func $63))
(export "_ZdaPv" (func $65))
(table $0 11 11 anyfunc)
(elem (i32.const 1) $2 $4 $6 $7 $9 $10 $11 $13 $15 $16)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18610))
(global $global$2 i32 (i32.const 18610))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9366])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $54(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $74($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10116])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $74($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [80]) + [8]))) = *(($1 + [32]))
	*($2 + [80]) = *($1 + [24])
	$4 = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	$7 = *($1 + [48])
	$8 = *($1 + [56])
	$9 = *($1 + [64])
	$10 = *($1 + [40])
	$11 = CALL $67(($2 + [64]), ($1 + [72]))
	$12 = CALL $67(($2 + [48]), ($1 + [84]))
	$13 = CALL $67(($2 + [32]), ($1 + [96]))
	$1 = CALL $67(($2 + [16]), ($1 + [108]))
	*(($2 + [8])) = *($3)
	*($2) = *($2 + [80])
	CALL $56($0, $6, $5, $4, $2, $10, $7, $8, $9, $11, $12, $13, $1)
	if ( (*($1) & [1]) ){ goto $label$7 }
	if ( (*($13) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($13) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($13 + [8]))
	$1 = [1]
	if ( ((*($12) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($12) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($11) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($11) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($11 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [96])
}

void .FUNC $77 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18512])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18320]
	$3 = (((int_32)$1 * (int_32)[12]) + [18320])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10120]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10124])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10120]) = [1]
	$2 = ($2 << [16])
	*([0] + [10124]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10124])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10124]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10120]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10120]) = [1]
	$3 = ($3 << [16])
	*([0] + [10124]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10124])
	
.LABEL $label$10
	*([0] + [10124]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $66 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [9548])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9594])
	*($1 + [68]) = [1]
	$4 = *($1 + [56])
	CALL eosio_assert([1], [9645])
	*(($5 = $3) + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$6 = ($1 + [8])
	*($5 + [36]) = $6
	*($5 + [32]) = $1
	$7 = ($1 + [16])
	*($5 + [40]) = $7
	$8 = ($1 + [24])
	*($5 + [44]) = $8
	$9 = ($1 + [32])
	*($5 + [48]) = $9
	$10 = ($1 + [40])
	*($5 + [52]) = $10
	$11 = ($1 + [56])
	*($5 + [56]) = $11
	$12 = ($1 + [64])
	*($5 + [60]) = $12
	$13 = ($1 + [65])
	*($5 + [64]) = $13
	$14 = ($1 + [66])
	*($5 + [68]) = $14
	$15 = ($1 + [67])
	*($5 + [72]) = $15
	$16 = ($1 + [68])
	*($5 + [76]) = $16
	$17 = ($1 + [72])
	*($5 + [80]) = $17
	$18 = ($1 + [80])
	*($5 + [84]) = $18
	$19 = ($1 + [88])
	*($5 + [88]) = $19
	$20 = ($1 + [96])
	*($5 + [92]) = $20
	$21 = ($1 + [104])
	*($5 + [96]) = $21
	$22 = ($1 + [112])
	*($5 + [100]) = $22
	$23 = ($1 + [113])
	*($5 + [104]) = $23
	$24 = ($1 + [128])
	*($5 + [112]) = $24
	$25 = ($1 + [116])
	*($5 + [108]) = $25
	$26 = ($1 + [140])
	*($5 + [116]) = $26
	$27 = ($1 + [152])
	*($5 + [120]) = $27
	CALL $57(($5 + [32]), ($5 + [8]))
	$28 = *($5 + [24])
	if ( ($28 <= [513]) ){ goto $label$2 }
	$3 = CALL $74($28)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($28 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $28)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [40]) = $7
	*($5 + [44]) = $8
	*($5 + [48]) = $9
	*($5 + [52]) = $10
	*($5 + [56]) = $11
	*($5 + [60]) = $12
	*($5 + [64]) = $13
	*($5 + [68]) = $14
	*($5 + [72]) = $15
	*($5 + [76]) = $16
	*($5 + [80]) = $17
	*($5 + [84]) = $18
	*($5 + [88]) = $19
	*($5 + [92]) = $20
	*($5 + [96]) = $21
	*($5 + [100]) = $22
	*($5 + [104]) = $23
	*($5 + [32]) = $1
	*($5 + [112]) = $24
	*($5 + [108]) = $25
	*($5 + [116]) = $26
	*($5 + [120]) = $27
	CALL $58(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [168]), $2, $3, $28)
	if ( ((uint_32)$28 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $77($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [128])
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $50($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9232])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9232])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $53(CALL $52($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $50($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $51(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $21 (int_32 $0)
{
	int_64 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$1 = (int_64)0
	$2 = (int_64)59
	$3 = [9500]
	$4 = (int_64)0
	
.LOOP $label$1:
	$5 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($3)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$4 = ((int_64)$5 | (int_64)$4)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$1 }
	*($0 + [40]) = (int_64)0
	*(($0 + [16])) = $4
	*(($3 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [9297])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$1 = $2
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$1 = $2
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$9 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	
.LABEL $label$5
	CALL eosio_assert($6, [9346])
	*($0 + [68]) = [0]
	*($0 + [64]) = [0]
	$1 = CALL current_time()
	*($0 + [112]) = [0]
	*($0 + [116 align=4]) = (int_64)0
	*(($0 + [124])) = (int_64)0
	*(($0 + [132])) = (int_64)0
	*($0 + [140 align=4]) = (int_64)0
	*(($0 + [148])) = (int_64)0
	*(($0 + [156])) = (int_64)0
	*($0 + [80]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9426])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $74($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9366])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9366])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $48(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $77($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $60(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$4 = *($3 + [8])
	*($1 + [24]) = *($4)
	*($1 + [32]) = *($4)
	$5 = *($0)
	$4 = *($3 + [12])
	*(($1 + [48])) = *(($4 + [8]))
	*($1 + [40]) = *($4)
	*($1 + [67]) = *(*($3 + [16]))
	$4 = *($3 + [20])
	*($1 + [96]) = *($4)
	*($1 + [104]) = *(*($3 + [24]))
	*($1 + [88]) = *($4)
	*($1 + [72]) = *(*($3 + [28]))
	*($1 + [56]) = *(*($3 + [32]))
	$6 = ($1 + [116])
	CALL $68($6, *($3 + [36]))
	$7 = ($1 + [128])
	CALL $68($7, *($3 + [40]))
	$8 = ($1 + [140])
	CALL $68($8, *($3 + [44]))
	$9 = ($1 + [152])
	CALL $68($9, *($3 + [48]))
	*(($3 = $2) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$10 = ($1 + [8])
	*($3 + [36]) = $10
	*($3 + [32]) = $1
	$11 = ($1 + [16])
	*($3 + [40]) = $11
	$12 = ($1 + [24])
	*($3 + [44]) = $12
	$13 = ($1 + [32])
	*($3 + [48]) = $13
	$14 = ($1 + [40])
	*($3 + [52]) = $14
	$15 = ($1 + [56])
	*($3 + [56]) = $15
	$16 = ($1 + [64])
	*($3 + [60]) = $16
	$17 = ($1 + [65])
	*($3 + [64]) = $17
	$18 = ($1 + [66])
	*($3 + [68]) = $18
	$19 = ($1 + [67])
	*($3 + [72]) = $19
	$20 = ($1 + [68])
	*($3 + [76]) = $20
	$21 = ($1 + [72])
	*($3 + [80]) = $21
	$22 = ($1 + [80])
	*($3 + [84]) = $22
	$23 = ($1 + [88])
	*($3 + [88]) = $23
	$24 = ($1 + [96])
	*($3 + [92]) = $24
	$25 = ($1 + [104])
	*($3 + [96]) = $25
	$26 = ($1 + [112])
	*($3 + [100]) = $26
	$27 = ($1 + [113])
	*($3 + [104]) = $27
	*($3 + [112]) = $7
	*($3 + [108]) = $6
	*($3 + [116]) = $8
	*($3 + [120]) = $9
	CALL $57(($3 + [32]), ($3 + [8]))
	$4 = *($3 + [24])
	if ( ($4 <= [513]) ){ goto $label$2 }
	$2 = CALL $74($4)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $10
	*($3 + [32]) = $1
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [52]) = $14
	*($3 + [56]) = $15
	*($3 + [60]) = $16
	*($3 + [64]) = $17
	*($3 + [68]) = $18
	*($3 + [72]) = $19
	*($3 + [76]) = $20
	*($3 + [80]) = $21
	*($3 + [84]) = $22
	*($3 + [88]) = $23
	*($3 + [92]) = $24
	*($3 + [96]) = $25
	*($3 + [100]) = $26
	*($3 + [104]) = $27
	*($3 + [112]) = $7
	*($3 + [108]) = $6
	*($3 + [116]) = $8
	*($3 + [120]) = $9
	CALL $58(($3 + [32]), ($3 + [24]))
	$28 = *(($1 + [56]))
	*($1 + [168]) = CALL db_store_i64(*($5 + [8]), (int_64)4849559400366473216, *(*($0 + [8])), $28, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$28 >= (uint_64)*($5 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $77($2)
	if ( (uint_64)($28 <= *($5 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$28 + (int_64)1) : ((uint_64)$28 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [128])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [128])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [128])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9426])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $74($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([176])
	CALL $21($5)
	*($5 + [164]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [65])
	*($3 + [68]) = ($5 + [66])
	*($3 + [72]) = ($5 + [67])
	*($3 + [76]) = ($5 + [68])
	*($3 + [80]) = ($5 + [72])
	*($3 + [84]) = ($5 + [80])
	*($3 + [88]) = ($5 + [88])
	*($3 + [92]) = ($5 + [96])
	*($3 + [96]) = ($5 + [104])
	*($3 + [100]) = ($5 + [112])
	*($3 + [104]) = ($5 + [113])
	*($3 + [112]) = ($5 + [128])
	*($3 + [108]) = ($5 + [116])
	*($3 + [116]) = ($5 + [140])
	*($3 + [120]) = ($5 + [152])
	CALL $61(($3 + [32]), ($3 + [24]))
	*($5 + [168]) = $1
	*($3 + [24]) = $5
	$6 = *($5 + [56])
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $23(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $77($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [152]) & [1]) ){ goto $label$16 }
	if ( (*($1 + [140]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($1 + [160])))
	if ( ((*($1 + [140]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [148])))
	$4 = [1]
	if ( ((*($1 + [128]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = [1]
	if ( (*($1 + [128]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($1 + [116]) & $4) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [136])))
	if ( ((*($1 + [116]) & $4) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [124])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [128])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9426])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $74($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [9297])
	$10 = ($9 + [16])
	$11 = ($9 + [8])
	$12 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $13
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$12 = $13
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9346])
	*($9 + [24]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [9366])
	CALL memcpy($9, $7, [8])
	$5 = ($6 & [-8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [9366])
	CALL memcpy($11, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[16]), [9366])
	CALL memcpy($10, ($7 + [16]), [8])
	*($9 + [28]) = $1
	*($3 + [24]) = $9
	$12 = *($9)
	*($3 + [16]) = $12
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $12
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $27($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $77($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

int_32 .FUNC $74 (int_32 $0)
{
	return CALL $75([10128], $0)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9945])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9990])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10040])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $69($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [9548])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9594])
	*($1 + [65]) = [1]
	$3 = *($1 + [56])
	CALL eosio_assert([1], [9645])
	*(($4 = $2) + [24]) = [0]
	*($4 + [8]) = ($4 + [24])
	$5 = ($1 + [8])
	*($4 + [36]) = $5
	*($4 + [32]) = $1
	$6 = ($1 + [16])
	*($4 + [40]) = $6
	$7 = ($1 + [24])
	*($4 + [44]) = $7
	$8 = ($1 + [32])
	*($4 + [48]) = $8
	$9 = ($1 + [40])
	*($4 + [52]) = $9
	$10 = ($1 + [56])
	*($4 + [56]) = $10
	$11 = ($1 + [64])
	*($4 + [60]) = $11
	$12 = ($1 + [65])
	*($4 + [64]) = $12
	$13 = ($1 + [66])
	*($4 + [68]) = $13
	$14 = ($1 + [67])
	*($4 + [72]) = $14
	$15 = ($1 + [68])
	*($4 + [76]) = $15
	$16 = ($1 + [72])
	*($4 + [80]) = $16
	$17 = ($1 + [80])
	*($4 + [84]) = $17
	$18 = ($1 + [88])
	*($4 + [88]) = $18
	$19 = ($1 + [96])
	*($4 + [92]) = $19
	$20 = ($1 + [104])
	*($4 + [96]) = $20
	$21 = ($1 + [112])
	*($4 + [100]) = $21
	$22 = ($1 + [113])
	*($4 + [104]) = $22
	$23 = ($1 + [128])
	*($4 + [112]) = $23
	$24 = ($1 + [116])
	*($4 + [108]) = $24
	$25 = ($1 + [140])
	*($4 + [116]) = $25
	$26 = ($1 + [152])
	*($4 + [120]) = $26
	CALL $57(($4 + [32]), ($4 + [8]))
	$27 = *($4 + [24])
	if ( ($27 <= [513]) ){ goto $label$2 }
	$2 = CALL $74($27)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($27 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $27)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $5
	*($4 + [40]) = $6
	*($4 + [44]) = $7
	*($4 + [48]) = $8
	*($4 + [52]) = $9
	*($4 + [56]) = $10
	*($4 + [60]) = $11
	*($4 + [64]) = $12
	*($4 + [68]) = $13
	*($4 + [72]) = $14
	*($4 + [76]) = $15
	*($4 + [80]) = $16
	*($4 + [84]) = $17
	*($4 + [88]) = $18
	*($4 + [92]) = $19
	*($4 + [96]) = $20
	*($4 + [100]) = $21
	*($4 + [104]) = $22
	*($4 + [32]) = $1
	*($4 + [112]) = $23
	*($4 + [108]) = $24
	*($4 + [116]) = $25
	*($4 + [120]) = $26
	CALL $58(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [168]), (int_64)0, $2, $27)
	if ( ((uint_32)$27 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$3 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $77($2)
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [128])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [9548])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9594])
	*($1 + [65]) = [1]
	$4 = *($1 + [56])
	CALL eosio_assert([1], [9645])
	*(($5 = $3) + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$6 = ($1 + [8])
	*($5 + [36]) = $6
	*($5 + [32]) = $1
	$7 = ($1 + [16])
	*($5 + [40]) = $7
	$8 = ($1 + [24])
	*($5 + [44]) = $8
	$9 = ($1 + [32])
	*($5 + [48]) = $9
	$10 = ($1 + [40])
	*($5 + [52]) = $10
	$11 = ($1 + [56])
	*($5 + [56]) = $11
	$12 = ($1 + [64])
	*($5 + [60]) = $12
	$13 = ($1 + [65])
	*($5 + [64]) = $13
	$14 = ($1 + [66])
	*($5 + [68]) = $14
	$15 = ($1 + [67])
	*($5 + [72]) = $15
	$16 = ($1 + [68])
	*($5 + [76]) = $16
	$17 = ($1 + [72])
	*($5 + [80]) = $17
	$18 = ($1 + [80])
	*($5 + [84]) = $18
	$19 = ($1 + [88])
	*($5 + [88]) = $19
	$20 = ($1 + [96])
	*($5 + [92]) = $20
	$21 = ($1 + [104])
	*($5 + [96]) = $21
	$22 = ($1 + [112])
	*($5 + [100]) = $22
	$23 = ($1 + [113])
	*($5 + [104]) = $23
	$24 = ($1 + [128])
	*($5 + [112]) = $24
	$25 = ($1 + [116])
	*($5 + [108]) = $25
	$26 = ($1 + [140])
	*($5 + [116]) = $26
	$27 = ($1 + [152])
	*($5 + [120]) = $27
	CALL $57(($5 + [32]), ($5 + [8]))
	$28 = *($5 + [24])
	if ( ($28 <= [513]) ){ goto $label$2 }
	$3 = CALL $74($28)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($28 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $28)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [40]) = $7
	*($5 + [44]) = $8
	*($5 + [48]) = $9
	*($5 + [52]) = $10
	*($5 + [56]) = $11
	*($5 + [60]) = $12
	*($5 + [64]) = $13
	*($5 + [68]) = $14
	*($5 + [72]) = $15
	*($5 + [76]) = $16
	*($5 + [80]) = $17
	*($5 + [84]) = $18
	*($5 + [88]) = $19
	*($5 + [92]) = $20
	*($5 + [96]) = $21
	*($5 + [100]) = $22
	*($5 + [104]) = $23
	*($5 + [32]) = $1
	*($5 + [112]) = $24
	*($5 + [108]) = $25
	*($5 + [116]) = $26
	*($5 + [120]) = $27
	CALL $58(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [168]), $2, $3, $28)
	if ( ((uint_32)$28 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $77($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [128])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [9548])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9594])
	*($1 + [112]) = [256]
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)-1)
	$4 = *($1 + [56])
	CALL eosio_assert([1], [9645])
	*(($5 = $3) + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$6 = ($1 + [8])
	*($5 + [36]) = $6
	*($5 + [32]) = $1
	$7 = ($1 + [16])
	*($5 + [40]) = $7
	$8 = ($1 + [24])
	*($5 + [44]) = $8
	$9 = ($1 + [32])
	*($5 + [48]) = $9
	$10 = ($1 + [40])
	*($5 + [52]) = $10
	$11 = ($1 + [56])
	*($5 + [56]) = $11
	$12 = ($1 + [64])
	*($5 + [60]) = $12
	$13 = ($1 + [65])
	*($5 + [64]) = $13
	$14 = ($1 + [66])
	*($5 + [68]) = $14
	$15 = ($1 + [67])
	*($5 + [72]) = $15
	$16 = ($1 + [68])
	*($5 + [76]) = $16
	$17 = ($1 + [72])
	*($5 + [80]) = $17
	$18 = ($1 + [80])
	*($5 + [84]) = $18
	$19 = ($1 + [88])
	*($5 + [88]) = $19
	$20 = ($1 + [96])
	*($5 + [92]) = $20
	$21 = ($1 + [104])
	*($5 + [96]) = $21
	$22 = ($1 + [112])
	*($5 + [100]) = $22
	$23 = ($1 + [113])
	*($5 + [104]) = $23
	$24 = ($1 + [128])
	*($5 + [112]) = $24
	$25 = ($1 + [116])
	*($5 + [108]) = $25
	$26 = ($1 + [140])
	*($5 + [116]) = $26
	$27 = ($1 + [152])
	*($5 + [120]) = $27
	CALL $57(($5 + [32]), ($5 + [8]))
	$28 = *($5 + [24])
	if ( ($28 <= [513]) ){ goto $label$2 }
	$3 = CALL $74($28)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($28 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $28)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [40]) = $7
	*($5 + [44]) = $8
	*($5 + [48]) = $9
	*($5 + [52]) = $10
	*($5 + [56]) = $11
	*($5 + [60]) = $12
	*($5 + [64]) = $13
	*($5 + [68]) = $14
	*($5 + [72]) = $15
	*($5 + [76]) = $16
	*($5 + [80]) = $17
	*($5 + [84]) = $18
	*($5 + [88]) = $19
	*($5 + [92]) = $20
	*($5 + [96]) = $21
	*($5 + [100]) = $22
	*($5 + [104]) = $23
	*($5 + [32]) = $1
	*($5 + [112]) = $24
	*($5 + [108]) = $25
	*($5 + [116]) = $26
	*($5 + [120]) = $27
	CALL $58(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [168]), $2, $3, $28)
	if ( ((uint_32)$28 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $77($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [128])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [9548])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9594])
	*($1 + [68]) = [1]
	$4 = *($1 + [56])
	CALL eosio_assert([1], [9645])
	*(($5 = $3) + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$6 = ($1 + [8])
	*($5 + [36]) = $6
	*($5 + [32]) = $1
	$7 = ($1 + [16])
	*($5 + [40]) = $7
	$8 = ($1 + [24])
	*($5 + [44]) = $8
	$9 = ($1 + [32])
	*($5 + [48]) = $9
	$10 = ($1 + [40])
	*($5 + [52]) = $10
	$11 = ($1 + [56])
	*($5 + [56]) = $11
	$12 = ($1 + [64])
	*($5 + [60]) = $12
	$13 = ($1 + [65])
	*($5 + [64]) = $13
	$14 = ($1 + [66])
	*($5 + [68]) = $14
	$15 = ($1 + [67])
	*($5 + [72]) = $15
	$16 = ($1 + [68])
	*($5 + [76]) = $16
	$17 = ($1 + [72])
	*($5 + [80]) = $17
	$18 = ($1 + [80])
	*($5 + [84]) = $18
	$19 = ($1 + [88])
	*($5 + [88]) = $19
	$20 = ($1 + [96])
	*($5 + [92]) = $20
	$21 = ($1 + [104])
	*($5 + [96]) = $21
	$22 = ($1 + [112])
	*($5 + [100]) = $22
	$23 = ($1 + [113])
	*($5 + [104]) = $23
	$24 = ($1 + [128])
	*($5 + [112]) = $24
	$25 = ($1 + [116])
	*($5 + [108]) = $25
	$26 = ($1 + [140])
	*($5 + [116]) = $26
	$27 = ($1 + [152])
	*($5 + [120]) = $27
	CALL $57(($5 + [32]), ($5 + [8]))
	$28 = *($5 + [24])
	if ( ($28 <= [513]) ){ goto $label$2 }
	$3 = CALL $74($28)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($28 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $28)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [40]) = $7
	*($5 + [44]) = $8
	*($5 + [48]) = $9
	*($5 + [52]) = $10
	*($5 + [56]) = $11
	*($5 + [60]) = $12
	*($5 + [64]) = $13
	*($5 + [68]) = $14
	*($5 + [72]) = $15
	*($5 + [76]) = $16
	*($5 + [80]) = $17
	*($5 + [84]) = $18
	*($5 + [88]) = $19
	*($5 + [92]) = $20
	*($5 + [96]) = $21
	*($5 + [100]) = $22
	*($5 + [104]) = $23
	*($5 + [32]) = $1
	*($5 + [112]) = $24
	*($5 + [108]) = $25
	*($5 + [116]) = $26
	*($5 + [120]) = $27
	CALL $58(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [168]), $2, $3, $28)
	if ( ((uint_32)$28 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $77($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [128])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9426])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $74($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9366])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $47(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $77($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $67($2, $1)
	$4 = *($1 + [16])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$1 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	$5 = CALL $67(($2 + [16]), $3)
	CALL void $1((int_32 $5), (int_32 $4), (int_64 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $55($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $70($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $70($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $66($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $72 (int_32 $0)
{
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9232])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $59(*($1), ($0 + [32]))
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $76($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [18524])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [152]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [160])))
	if ( ((*($1 + [140]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [140]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [148])))
	if ( ((*($1 + [128]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [128]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [136])))
	if ( (*($1 + [116]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [116]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [124])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

void .FUNC $71 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $74($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [52]) = $1
	*($3 + [48]) = $1
	*($3 + [56]) = ($1 + $0)
	CALL $44(($3 + [48]), ($3 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [56]) - *($3 + [52])) > (uint_32)[7]), [9366])
	CALL memcpy(($3 + [24]), *($3 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $77($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $45(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [0]
	*((($3 + [40]) + [32])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$5 = *($0)
	*($3 + [40]) = $5
	*($3 + [48]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)4983113292184109056, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $20(($3 + [40]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [40])), [9375])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8256])
	CALL require_auth(*($6 + [8]))
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$5 = *($0)
	*($3) = $5
	*($3 + [8]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)4849559400366473216, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $24($3, $6)
	CALL eosio_assert(((int_32)*($4 + [164]) == (int_32)$3), [9375])
	
.LABEL $label$2
	CALL require_auth(*($4 + [16]))
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$2), [8726])
	CALL eosio_assert(((int_32)*($4 + [68]) ^ (int_32)[1]), [8756])
	CALL eosio_assert(((int_32)*($4 + [65]) ^ (int_32)[1]), [8781])
	CALL eosio_assert(((int_32)*($4 + [112]) ^ (int_32)[1]), [8809])
	$5 = *($4 + [96])
	$2 = *($4 + [32])
	$1 = *($4 + [24])
	$8 = CALL current_time()
	$8 = ((int_64)((uint_64)$8 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((uint_64)*($4 + [88]) <= (uint_64)$8), [8858])
	$9 = *($0)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9513])
	if ( ((uint_64)((int_64)((int_64)$5 + (int_64)((int_64))($1 - $2) * (int_64)86400)) + (int_64)86400) <= (uint_64)$8) ){ goto $label$4 }
	CALL $38($3, $4, $9)
	goto $label$3 
	
.LABEL $label$4
	CALL $39($3, $4, $9)
	
.LABEL $label$3
	CALL $30(($3 + [24]))
	$6 = *($3 + [64])
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($3 + [68])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	$4 = *(($3 + [64]))
	goto $label$6 
	
.LABEL $label$7
	$4 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$global$0 = ($3 + [80])
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [352])
	$global$0 = $3
	$4 = [0]
	*((($3 + [296]) + [32])) = [0]
	*($3 + [312]) = (int_64)-1
	*($3 + [320]) = (int_64)0
	$5 = *($0)
	*($3 + [296]) = $5
	*($3 + [304]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)4983113292184109056, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $20(($3 + [296]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [296])), [9375])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8256])
	$8 = *($6 + [8])
	*((($3 + [256]) + [32])) = [0]
	*($3 + [272]) = (int_64)-1
	*($3 + [280]) = (int_64)0
	$5 = *($0)
	*($3 + [256]) = $5
	*($3 + [264]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)4849559400366473216, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $24(($3 + [256]), $6)
	CALL eosio_assert(((int_32)*($4 + [164]) == (int_32)($3 + [256])), [9375])
	
.LABEL $label$2
	$5 = *($4 + [8])
	$7 = *(($3 + [324]))
	$9 = *(($3 + [320]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($7 + [-24])
	$10 = *($6)
	if ( ((int_64)*($10) == (int_64)$5) ){ goto $label$5 }
	$7 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)($3 + [296])), [9375])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$6 = CALL db_find_i64(*($3 + [296]), *(($3 + [304])), (int_64)4983113292184109056, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $20(($3 + [296]), $6)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)($3 + [296])), [9375])
	
.LABEL $label$3
	$11 = *($10 + [8])
	CALL eosio_assert(((int_64)*($4 + [32]) != (int_64)0), [9088])
	CALL eosio_assert(((int_64)*($4) == (int_64)$2), [9112])
	CALL eosio_assert(((int_64)*(($4 + [8])) == (int_64)$5), [9154])
	$6 = [0]
	*((($3 + [216]) + [32])) = [0]
	*($3 + [232]) = (int_64)-1
	*($3 + [240]) = (int_64)0
	$12 = *($0)
	*($3 + [216]) = $12
	*($3 + [224]) = $12
	*((($3 + [176]) + [32])) = [0]
	*($3 + [184]) = $8
	*($3 + [176]) = $12
	*($3 + [192]) = (int_64)-1
	*($3 + [200]) = (int_64)0
	*((($3 + [136]) + [32])) = [0]
	*($3 + [144]) = $11
	*($3 + [136]) = $12
	*($3 + [152]) = (int_64)-1
	*($3 + [160]) = (int_64)0
	$7 = CALL db_find_i64($12, $12, (int_64)-5003134540516950016, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $31(($3 + [216]), $7)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($3 + [216])), [9375])
	
.LABEL $label$7
	*((($3 + [120]) + [8])) = *(($6 + [16]))
	*($3 + [120]) = *($6 + [8])
	$10 = *(($3 + [204]))
	$9 = *(($3 + [200]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$26 }
	
.LOOP $label$28:
	$6 = ($10 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$27 }
	$10 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [176])), [9375])
	if ( *($4 + [64]) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$7 = [0]
	$6 = CALL db_find_i64(*($3 + [176]), *(($3 + [184])), (int_64)4983123004931178496, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$29 }
	$7 = CALL $26(($3 + [176]), $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [176])), [9375])
	
.LABEL $label$29
	if ( (*($4 + [64]) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	if ( (*($4 + [68]) == 0) ){ goto $label$23 }
	$12 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9513])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [176])), [9548])
	CALL eosio_assert(((int_64)*($3 + [176]) == (int_64)CALL $fimport$5()), [9594])
	$2 = *($7)
	$6 = ($7 + [16])
	CALL eosio_assert(((int_64)*(($4 + [48])) == (int_64)*($6)), [9790])
	$1 = (int_64)
	*($7 + [8]) = $1(*($7 + [8]) - *($4 + [40])))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9838])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [9860])
	CALL eosio_assert(((int_64)$2 == (int_64)*($7)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($3 + [16]), $7, [8])
	CALL eosio_assert([1], [9232])
	$13 = (($3 + [16]) | [8])
	CALL memcpy($13, ($7 + [8]), [8])
	CALL eosio_assert([1], [9232])
	$14 = (($3 + [16]) + [16])
	CALL memcpy($14, $6, [8])
	CALL db_update_i64(*($7 + [28]), $12, ($3 + [16]), [24])
	$6 = (($3 + [176]) + [16])
	if ( (uint_64)($2 <= *($6)) ){ goto $label$30 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$30
	if ( *($4 + [67]) ){ goto $label$16 }
	$10 = *(($3 + [164]))
	$9 = *(($3 + [160]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$18 }
	
.LOOP $label$31:
	$6 = ($10 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$5) ){ goto $label$19 }
	$10 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$31 }
	goto $label$18 
	
.LABEL $label$24
	$2 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9513])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [176])), [9548])
	CALL eosio_assert(((int_64)*($3 + [176]) == (int_64)CALL $fimport$5()), [9594])
	$5 = *($7)
	$6 = ($7 + [16])
	CALL eosio_assert(((int_64)*(($4 + [48])) == (int_64)*($6)), [9790])
	$12 = (int_64)
	*($7 + [8]) = $12(*($7 + [8]) - *($4 + [40])))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9838])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [9860])
	CALL eosio_assert(((int_64)$5 == (int_64)*($7)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($3 + [16]), $7, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy((($3 + [16]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy((($3 + [16]) + [16]), $6, [8])
	CALL db_update_i64(*($7 + [28]), $2, ($3 + [16]), [24])
	$6 = (($3 + [176]) + [16])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$32 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$32
	$2 = *($0)
	$5 = (int_64)6
	
.LOOP $label$33:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$33 }
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = $2
	$5 = (int_64)0
	$2 = (int_64)59
	$6 = [8344]
	$1 = (int_64)0
	
.LOOP $label$34:
	$12 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$35 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$7 = ($7 + [-91])
	goto $label$36 
	
.LABEL $label$37
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$35
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$1 = ((int_64)$12 | (int_64)$1)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$34 }
	$5 = (int_64)0
	$12 = (int_64)59
	$6 = [8357]
	$11 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$43 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$7 = ($7 + [-91])
	goto $label$41 
	
.LABEL $label$43
	$2 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$39
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$11 = ((int_64)$2 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$38 }
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$6 = CALL $73([8366])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$22 }
	*($3) = ($6 << [1])
	$7 = ($3 | [1])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$5 = CALL current_time()
	$2 = *($4 + [88])
	CALL eosio_assert((uint_64)((int_64))(((int_64)$2 + (int_64)60) - ((uint_64)$2 % (uint_64)(int_64)60)) <= ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [9192])
	$2 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9513])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [176])), [9548])
	CALL eosio_assert(((int_64)*($3 + [176]) == (int_64)CALL $fimport$5()), [9594])
	$5 = *($7)
	$6 = ($7 + [16])
	CALL eosio_assert(((int_64)*(($4 + [48])) == (int_64)*($6)), [9790])
	$12 = (int_64)
	*($7 + [8]) = $12(*($7 + [8]) - *($4 + [40])))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9838])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [9860])
	CALL eosio_assert(((int_64)$5 == (int_64)*($7)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($3 + [16]), $7, [8])
	CALL eosio_assert([1], [9232])
	$13 = (($3 + [16]) | [8])
	CALL memcpy($13, ($7 + [8]), [8])
	CALL eosio_assert([1], [9232])
	$14 = (($3 + [16]) + [16])
	CALL memcpy($14, $6, [8])
	CALL db_update_i64(*($7 + [28]), $2, ($3 + [16]), [24])
	$6 = (($3 + [176]) + [16])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$44 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$44
	if ( *($4 + [67]) ){ goto $label$12 }
	$10 = *(($3 + [164]))
	$9 = *(($3 + [160]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$14 }
	
.LOOP $label$45:
	$6 = ($10 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$11) ){ goto $label$15 }
	$10 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$45 }
	goto $label$14 
	
.LABEL $label$22
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($3) = ($10 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $6
	
.LABEL $label$21
	CALL memcpy($7, [8366], $6)
	
.LABEL $label$20
	*(($7 + $6)) = [0]
	*(($3 + [40])) = *((($3 + [120]) + [8]))
	$6 = ($3 + [8])
	*(($3 + [56])) = *($6)
	*($6) = [0]
	*($3 + [24]) = $8
	*($3 + [16]) = *($0)
	*($3 + [32]) = *($3 + [120])
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$6 = CALL $28(($3 + [80]), ($3 + [64]), $1, $11, ($3 + [16]))
	CALL $29(($3 + [336]), $6)
	$7 = *($3 + [336])
	CALL send_inline($7, (*($3 + [340]) - $7))
	$7 = *($3 + [336])
	if ( ($7 == 0) ){ goto $label$46 }
	*($3 + [340]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$46
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$47 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$47
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$48 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$48
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$49
	if ( ((*($3) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [8])))
	$10 = *($3 + [160])
	if ( $10 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$19
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [136])), [9375])
	goto $label$17 
	
.LABEL $label$18
	$7 = [0]
	$6 = CALL db_find_i64(*($3 + [136]), *(($3 + [144])), (int_64)4983123004931178496, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$17 }
	$7 = CALL $26(($3 + [136]), $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [136])), [9375])
	
.LABEL $label$17
	$2 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9513])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [136])), [9548])
	CALL eosio_assert(((int_64)*($3 + [136]) == (int_64)CALL $fimport$5()), [9594])
	$5 = *($7)
	$6 = ($7 + [16])
	CALL eosio_assert(((int_64)*(($4 + [48])) == (int_64)*($6)), [9790])
	$12 = (int_64)
	*($7 + [8]) = $12(*($7 + [8]) - *(($4 + [40]))))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9838])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [9860])
	CALL eosio_assert(((int_64)$5 == (int_64)*($7)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($3 + [16]), $7, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($13, ($7 + [8]), [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($14, $6, [8])
	CALL db_update_i64(*($7 + [28]), $2, ($3 + [16]), [24])
	$6 = (($3 + [136]) + [16])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$16 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	$2 = *($0)
	$5 = (int_64)6
	
.LOOP $label$50:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$50 }
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = $2
	$5 = (int_64)0
	$2 = (int_64)59
	$6 = [8344]
	$1 = (int_64)0
	
.LOOP $label$51:
	$12 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$52 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$7 = ($7 + [-91])
	goto $label$53 
	
.LABEL $label$54
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$52
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$1 = ((int_64)$12 | (int_64)$1)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$51 }
	$5 = (int_64)0
	$12 = (int_64)59
	$6 = [8357]
	$11 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$60 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$7 = ($7 + [-91])
	goto $label$58 
	
.LABEL $label$60
	$2 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$56
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$11 = ((int_64)$2 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$55 }
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$6 = CALL $73([8366])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$63 }
	*($3) = ($6 << [1])
	$7 = ($3 | [1])
	if ( $6 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($3) = ($10 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $6
	
.LABEL $label$62
	CALL memcpy($7, [8366], $6)
	
.LABEL $label$61
	*(($7 + $6)) = [0]
	*(($3 + [40])) = *((($3 + [120]) + [8]))
	$6 = ($3 + [8])
	*(($3 + [56])) = *($6)
	*($6) = [0]
	*($3 + [24]) = $8
	*($3 + [16]) = *($0)
	*($3 + [32]) = *($3 + [120])
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$6 = CALL $28(($3 + [80]), ($3 + [64]), $1, $11, ($3 + [16]))
	CALL $29(($3 + [336]), $6)
	$7 = *($3 + [336])
	CALL send_inline($7, (*($3 + [340]) - $7))
	$7 = *($3 + [336])
	if ( ($7 == 0) ){ goto $label$64 }
	*($3 + [340]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$64
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$65 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$65
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$66 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$66
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$67
	if ( ((*($3) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [8])))
	$10 = *($3 + [160])
	if ( $10 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$15
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [136])), [9375])
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	$6 = CALL db_find_i64(*($3 + [136]), *(($3 + [144])), (int_64)4983123004931178496, $11)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$7 = CALL $26(($3 + [136]), $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [136])), [9375])
	
.LABEL $label$13
	$2 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9513])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [136])), [9548])
	CALL eosio_assert(((int_64)*($3 + [136]) == (int_64)CALL $fimport$5()), [9594])
	$5 = *($7)
	$6 = ($7 + [16])
	CALL eosio_assert(((int_64)*(($4 + [48])) == (int_64)*($6)), [9790])
	$12 = (int_64)
	*($7 + [8]) = $12(*($7 + [8]) - *(($4 + [40]))))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9838])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [9860])
	CALL eosio_assert(((int_64)$5 == (int_64)*($7)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($3 + [16]), $7, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($13, ($7 + [8]), [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($14, $6, [8])
	CALL db_update_i64(*($7 + [28]), $2, ($3 + [16]), [24])
	$6 = (($3 + [136]) + [16])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$12 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$2 = *($0)
	$5 = (int_64)6
	
.LOOP $label$68:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$68 }
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = $2
	$5 = (int_64)0
	$2 = (int_64)59
	$6 = [8344]
	$1 = (int_64)0
	
.LOOP $label$69:
	$12 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$70 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$7 = ($7 + [-91])
	goto $label$71 
	
.LABEL $label$72
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$70
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$1 = ((int_64)$12 | (int_64)$1)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$69 }
	$5 = (int_64)0
	$12 = (int_64)59
	$6 = [8357]
	$11 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$78 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$7 = ($7 + [-91])
	goto $label$76 
	
.LABEL $label$78
	$2 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$74
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$11 = ((int_64)$2 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$73 }
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$6 = CALL $73([8366])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$81 }
	*($3) = ($6 << [1])
	$7 = ($3 | [1])
	if ( $6 ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($3) = ($10 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $6
	
.LABEL $label$80
	CALL memcpy($7, [8366], $6)
	
.LABEL $label$79
	*(($7 + $6)) = [0]
	*(($3 + [40])) = *((($3 + [120]) + [8]))
	$6 = ($3 + [8])
	*(($3 + [56])) = *($6)
	*($6) = [0]
	*($3 + [24]) = $8
	*($3 + [16]) = *($0)
	*($3 + [32]) = *($3 + [120])
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$6 = CALL $28(($3 + [80]), ($3 + [64]), $1, $11, ($3 + [16]))
	CALL $29(($3 + [336]), $6)
	$7 = *($3 + [336])
	CALL send_inline($7, (*($3 + [340]) - $7))
	$7 = *($3 + [336])
	if ( ($7 == 0) ){ goto $label$82 }
	*($3 + [340]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$82
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$83 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$83
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$84 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$84
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$85 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$85
	if ( ((*($3) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$11
	$10 = *($3 + [160])
	if ( ($10 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$9 = ($3 + [164])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$87 }
	
.LOOP $label$88:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$89 }
	CALL _ZdlPv($7)
	
.LABEL $label$89
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$88 }
	$6 = *(($3 + [160]))
	goto $label$86 
	
.LABEL $label$87
	$6 = $10
	
.LABEL $label$86
	*($9) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$10 = *($3 + [200])
	if ( ($10 == 0) ){ goto $label$90 }
	$9 = ($3 + [204])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$92 }
	
.LOOP $label$93:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$94 }
	CALL _ZdlPv($7)
	
.LABEL $label$94
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$93 }
	$6 = *(($3 + [200]))
	goto $label$91 
	
.LABEL $label$92
	$6 = $10
	
.LABEL $label$91
	*($9) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$90
	$10 = *($3 + [240])
	if ( ($10 == 0) ){ goto $label$95 }
	$9 = ($3 + [244])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$97 }
	
.LOOP $label$98:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$99 }
	CALL _ZdlPv($7)
	
.LABEL $label$99
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$98 }
	$6 = *(($3 + [240]))
	goto $label$96 
	
.LABEL $label$97
	$6 = $10
	
.LABEL $label$96
	*($9) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$95
	CALL $30(($3 + [280]))
	$10 = *($3 + [320])
	if ( ($10 == 0) ){ goto $label$100 }
	$9 = ($3 + [324])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$102 }
	
.LOOP $label$103:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$104 }
	CALL _ZdlPv($7)
	
.LABEL $label$104
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$103 }
	$6 = *(($3 + [320]))
	goto $label$101 
	
.LABEL $label$102
	$6 = $10
	
.LABEL $label$101
	*($9) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$100
	$global$0 = ($3 + [352])
	return (unreachable)
	
.LABEL $label$8
	CALL $66($3)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$3 = ($global$0 - [112])
	$global$0 = $3
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$4 = [0]
	
.LOOP $label$3:
	$5 = ($1 + $4)
	$6 = ($4 + [1])
	$4 = $6
	if ( *($5) ){ goto $label$3 }
	$7 = (CASTING uint_64)(uint_32 ($6 + [-1]))
	$8 = (int_64)0
	$9 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$4:
	$11 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$7) ){ goto $label$5 }
	$4 = *($1)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$4 = ($4 + [-91])
	goto $label$6 
	
.LABEL $label$7
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$9 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$4 }
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$8 = *($0)
	*($3 + [40]) = $8
	*($3 + [48]) = $8
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$1 = CALL $73([9219])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$13 }
	*($3) = ($1 << [1])
	$6 = ($3 | [1])
	$5 = $6
	if ( $1 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$4 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($3) = ($4 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $1
	$6 = ($3 | [1])
	
.LABEL $label$12
	CALL memcpy($5, [9219], $1)
	
.LABEL $label$11
	$4 = [0]
	*(($5 + $1)) = [0]
	$13 = (*($3) & [1])
	$12 = *($3 + [8])
	$1 = ( $12 ? $6 : $13 )
	
.LOOP $label$14:
	$5 = ($1 + $4)
	$6 = ($4 + [1])
	$4 = $6
	if ( *($5) ){ goto $label$14 }
	$14 = (CASTING uint_64)(uint_32 ($6 + [-1]))
	$8 = (int_64)0
	$9 = (int_64)59
	$7 = (int_64)0
	
.LOOP $label$15:
	$11 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$14) ){ goto $label$16 }
	$4 = *($1)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$4 = ($4 + [-91])
	goto $label$17 
	
.LABEL $label$18
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$20 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$19 
	
.LABEL $label$20
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$19
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$7 = ((int_64)$11 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$15 }
	if ( ($13 == 0) ){ goto $label$21 }
	CALL _ZdlPv($12)
	
.LABEL $label$21
	$4 = *(($3 + [68]))
	$6 = *(($3 + [64]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$25 }
	
.LOOP $label$27:
	$1 = ($4 + [-24])
	$5 = *($1)
	if ( ((int_64)*($5) == (int_64)$7) ){ goto $label$26 }
	$4 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$25 }
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)($3 + [40])), [9375])
	if ( $5 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$1 = CALL db_find_i64(*($3 + [40]), *(($3 + [48])), (int_64)3631284024116248576, $7)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$23 }
	$5 = CALL $46(($3 + [40]), $1)
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)($3 + [40])), [9375])
	
.LABEL $label$24
	CALL require_auth(*($5))
	goto $label$22 
	
.LABEL $label$23
	$9 = *($0)
	CALL eosio_assert(((int_64)*($3 + [40]) == (int_64)CALL $fimport$5()), [9449])
	*(($1 = CALL _Znwj([24])) + [8]) = ($3 + [40])
	*($1) = $7
	CALL eosio_assert([1], [9232])
	CALL memcpy($3, $1, [8])
	$8 = *($1)
	$5 = CALL db_store_i64(*((($3 + [40]) + [8])), (int_64)3631284024116248576, $9, $8, $3, [8])
	*($1 + [12]) = $5
	$4 = ($3 + [56])
	if ( (uint_64)($8 <= *($4)) ){ goto $label$28 }
	*($4) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	*($3 + [96]) = $1
	$8 = *($1)
	*($3) = $8
	*($3 + [88]) = $5
	$6 = ($3 + [68])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($3 + [72]))) ){ goto $label$31 }
	*($4 + [8]) = $8
	*($4 + [16]) = $5
	*($3 + [96]) = [0]
	*($4) = $1
	*($6) = ($4 + [24])
	$1 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $1 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	CALL $47(($3 + [64]), ($3 + [96]), $3, ($3 + [88]))
	$1 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($1 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv($1)
	
.LABEL $label$29
	CALL require_auth($7)
	
.LABEL $label$22
	*(($6 = ($3 + [32]))) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$8 = *($0)
	*($3) = $8
	*($3 + [8]) = $8
	CALL eosio_assert(((int_64)$8 == (int_64)CALL $fimport$5()), [9449])
	*(($1 = CALL _Znwj([32])) + [16]) = $3
	*($1) = $2
	*($1 + [8]) = $10
	CALL eosio_assert([1], [9232])
	CALL memcpy(($3 + [96]), $1, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy((($3 + [96]) | [8]), ($1 + [8]), [8])
	$9 = *($1)
	$5 = CALL db_store_i64(*($3 + [8]), (int_64)4983113292184109056, $8, $9, ($3 + [96]), [16])
	*($1 + [20]) = $5
	if ( (uint_64)($9 <= *($3 + [16])) ){ goto $label$32 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$32
	*($3 + [88]) = $1
	$8 = *($1)
	*($3 + [96]) = $8
	*($3 + [84]) = $5
	$0 = ($3 + [28])
	$4 = *($0)
	if ( ((uint_32)$4 >= (uint_32)*($6)) ){ goto $label$35 }
	*($4 + [8]) = $8
	*($4 + [16]) = $5
	*($3 + [88]) = [0]
	*($4) = $1
	*($0) = ($4 + [24])
	$1 = *($3 + [88])
	*($3 + [88]) = [0]
	if ( $1 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	CALL $48(($3 + [24]), ($3 + [88]), ($3 + [96]), ($3 + [84]))
	$1 = *($3 + [88])
	*($3 + [88]) = [0]
	if ( ($1 == 0) ){ goto $label$33 }
	
.LABEL $label$34
	CALL _ZdlPv($1)
	
.LABEL $label$33
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$36 }
	$6 = ($3 + [28])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$38 }
	
.LOOP $label$39:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$40 }
	CALL _ZdlPv($4)
	
.LABEL $label$40
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$39 }
	$1 = *(($3 + [24]))
	goto $label$37 
	
.LABEL $label$38
	$1 = $5
	
.LABEL $label$37
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$36
	$5 = *($3 + [64])
	if ( ($5 == 0) ){ goto $label$41 }
	$6 = ($3 + [68])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$43 }
	
.LOOP $label$44:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$44 }
	$1 = *(($3 + [64]))
	goto $label$42 
	
.LABEL $label$43
	$1 = $5
	
.LABEL $label$42
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$41
	$global$0 = ($3 + [112])
	return (unreachable)
	
.LABEL $label$10
	CALL $66($3)
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_64 $7, int_64 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$13 = ($global$0 - [384])
	$global$0 = $13
	*($13 + [352]) = $3
	*($13 + [351]) = $5
	*($13 + [336]) = $6
	*($13 + [328]) = $7
	*($13 + [320]) = $8
	*($13 + [360]) = $2
	*((($13 + [280]) + [32])) = [0]
	*($13 + [296]) = (int_64)-1
	*($13 + [304]) = (int_64)0
	$8 = *($0)
	*($13 + [280]) = $8
	*($13 + [288]) = $8
	$5 = [0]
	$14 = CALL db_find_i64($8, $8, (int_64)4983113292184109056, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $20(($13 + [280]), $14)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($13 + [280])), [9375])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8256])
	$3 = *($5 + [8])
	CALL require_auth($3)
	CALL eosio_assert(((int_64)*($13 + [360]) != (int_64)*($13 + [352])), [8280])
	CALL eosio_assert(((int_64)*($4) > (int_64)0), [8310])
	*($13 + [272]) = $1
	$8 = (int_64)
	*($13 + [264]) = ( (int_64)1 ? ((uint_64)$8(*($13 + [328]) - *($13 + [336]))) / (uint_64)(int_64)86400) : (uint_64)(((int_64)$8 + (int_64)-1) <= (int_64)86399) )
	*(($14 = (($13 + [224]) + [32]))) = [0]
	*($13 + [240]) = (int_64)-1
	*($13 + [248]) = (int_64)0
	$8 = *($0)
	*($13 + [224]) = $8
	*($13 + [232]) = $8
	*($13 + [172]) = $4
	*($13 + [196]) = $9
	*($13 + [200]) = $10
	*($13 + [204]) = $11
	*($13 + [208]) = $12
	*($13 + [164]) = ($13 + [352])
	*($13 + [160]) = ($13 + [360])
	*($13 + [168]) = ($13 + [264])
	*($13 + [176]) = ($13 + [351])
	*($13 + [180]) = ($13 + [336])
	*($13 + [184]) = ($13 + [328])
	*($13 + [188]) = ($13 + [320])
	*($13 + [192]) = ($13 + [272])
	*($13 + [80]) = $8
	CALL eosio_assert(((int_64)$8 == (int_64)CALL $fimport$5()), [9449])
	*($13 + [124]) = ($13 + [160])
	*($13 + [120]) = ($13 + [224])
	*($13 + [128]) = ($13 + [80])
	$5 = CALL _Znwj([176])
	CALL $21($5)
	*($5 + [164]) = ($13 + [224])
	CALL $22(($13 + [120]), $5)
	*($13 + [40]) = $5
	$8 = *($5 + [56])
	*($13 + [120]) = $8
	$10 = *($5 + [168])
	*($13 + [24]) = $10
	$11 = ($13 + [252])
	$9 = *($11)
	if ( ((uint_32)$9 >= (uint_32)*($14)) ){ goto $label$4 }
	*($9 + [8]) = $8
	*($9 + [16]) = $10
	*($13 + [40]) = [0]
	*($9) = $5
	*($11) = ($9 + [24])
	$5 = *($13 + [40])
	*($13 + [40]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	CALL $23(($13 + [248]), ($13 + [40]), ($13 + [120]), ($13 + [24]))
	$5 = *($13 + [40])
	*($13 + [40]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( (*($5 + [152]) & [1]) ){ goto $label$11 }
	if ( (*($5 + [140]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($5 + [160])))
	if ( ((*($5 + [140]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($5 + [148])))
	$9 = [1]
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = [1]
	if ( (*($5 + [128]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($5 + [116]) & $9) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL _ZdlPv(*(($5 + [136])))
	if ( ((*($5 + [116]) & $9) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($5 + [124])))
	
.LABEL $label$5
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$8 = *($13 + [272])
	$9 = *(($13 + [252]))
	$11 = *(($13 + [248]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$13 }
	
.LOOP $label$15:
	$5 = ($9 + [-24])
	$10 = *($5)
	if ( ((int_64)*($10 + [56]) == (int_64)$8) ){ goto $label$14 }
	$9 = $5
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*($10 + [164]) == (int_32)($13 + [224])), [9375])
	goto $label$12 
	
.LABEL $label$13
	$10 = CALL $24(($13 + [224]), CALL $fimport$3(*($13 + [224]), *(($13 + [232])), (int_64)4849559400366473216, $8))
	CALL eosio_assert(((int_32)*($10 + [164]) == (int_32)($13 + [224])), [9375])
	
.LABEL $label$12
	CALL require_auth(*($10 + [16]))
	*(($13 + [152])) = [0]
	*($13 + [136]) = (int_64)-1
	*($13 + [144]) = (int_64)0
	$1 = *($0)
	*($13 + [120]) = $1
	*($13 + [128]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$5()), [9449])
	*(($11 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($11 + [8]) = (int_64)0
	CALL eosio_assert([1], [9297])
	$14 = ($11 + [16])
	$12 = ($11 + [8])
	$8 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$2 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$8 = $2
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$8 = $2
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$20 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$9 = [0]
	
.LABEL $label$16
	CALL eosio_assert($9, [9346])
	*($11 + [24]) = ($13 + [120])
	*($11) = *($13 + [272])
	*($12) = *($4)
	*(($12 + [8])) = *(($4 + [8]))
	CALL eosio_assert([1], [9232])
	CALL memcpy(($13 + [160]), $11, [8])
	CALL eosio_assert([1], [9232])
	$15 = (($13 + [160]) | [8])
	CALL memcpy($15, $12, [8])
	CALL eosio_assert([1], [9232])
	$12 = (($13 + [160]) + [16])
	CALL memcpy($12, $14, [8])
	$8 = *($11)
	$9 = CALL db_store_i64(*((($13 + [120]) + [8])), (int_64)-5003134540516950016, $1, $8, ($13 + [160]), [24])
	*($11 + [28]) = $9
	$5 = (($13 + [120]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$21 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*($13 + [80]) = $11
	$8 = *($11)
	*($13 + [160]) = $8
	*($13 + [40]) = $9
	$10 = ($13 + [148])
	$5 = *($10)
	if ( ((uint_32)$5 >= (uint_32)*(($13 + [152]))) ){ goto $label$24 }
	*($5 + [8]) = $8
	*($5 + [16]) = $9
	*($13 + [80]) = [0]
	*($5) = $11
	*($10) = ($5 + [24])
	$9 = *($13 + [80])
	$5 = [0]
	*($13 + [80]) = [0]
	if ( $9 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL $25(($13 + [144]), ($13 + [80]), ($13 + [160]), ($13 + [40]))
	$9 = *($13 + [80])
	$5 = [0]
	*($13 + [80]) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv($9)
	
.LABEL $label$22
	*(($13 + [112])) = $5
	*($13 + [96]) = (int_64)-1
	*($13 + [104]) = (int_64)0
	$8 = *($0)
	*($13 + [80]) = $8
	*($13 + [88]) = $3
	$9 = CALL db_find_i64($8, $3, (int_64)4983123004931178496, *($13 + [360]))
	if ( ((int_32)$9 < (int_32)$5) ){ goto $label$26 }
	$5 = CALL $26(($13 + [80]), $9)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($13 + [80])), [9375])
	$2 = *($0)
	CALL eosio_assert([1], [9513])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($13 + [80])), [9548])
	CALL eosio_assert(((int_64)*($13 + [80]) == (int_64)CALL $fimport$5()), [9594])
	$8 = *($5)
	$9 = ($5 + [16])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*($9)), [9704])
	$1 = ((int_64)*($5 + [8]) + (int_64)*($4))
	*($5 + [8]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9747])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [9766])
	CALL eosio_assert(((int_64)$8 == (int_64)*($5)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($13 + [160]), $5, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($15, ($5 + [8]), [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($12, $9, [8])
	CALL db_update_i64(*($5 + [28]), $2, ($13 + [160]), [24])
	$5 = (($13 + [80]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$25 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$25 
	
.LABEL $label$26
	$1 = *($0)
	CALL eosio_assert(((int_64)*($13 + [80]) == (int_64)CALL $fimport$5()), [9449])
	*(($11 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($11 + [8]) = (int_64)0
	CALL eosio_assert([1], [9297])
	$16 = ($11 + [16])
	$14 = ($11 + [8])
	$8 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$2 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$8 = $2
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$8 = $2
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$31 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$9 = [0]
	
.LABEL $label$27
	CALL eosio_assert($9, [9346])
	*($11 + [24]) = ($13 + [80])
	*($11) = *($13 + [360])
	*($14) = *($4)
	*(($14 + [8])) = *(($4 + [8]))
	CALL eosio_assert([1], [9232])
	CALL memcpy(($13 + [160]), $11, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($15, $14, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($12, $16, [8])
	$8 = *($11)
	$9 = CALL db_store_i64(*((($13 + [80]) + [8])), (int_64)4983123004931178496, $1, $8, ($13 + [160]), [24])
	*($11 + [28]) = $9
	$5 = ($13 + [96])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$32 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$32
	*($13 + [40]) = $11
	$8 = *($11)
	*($13 + [160]) = $8
	*($13 + [24]) = $9
	$10 = ($13 + [108])
	$5 = *($10)
	if ( ((uint_32)$5 >= (uint_32)*(($13 + [112]))) ){ goto $label$34 }
	*($5 + [8]) = $8
	*($5 + [16]) = $9
	*($13 + [40]) = [0]
	*($5) = $11
	*($10) = ($5 + [24])
	$5 = *($13 + [40])
	*($13 + [40]) = [0]
	if ( $5 ){ goto $label$33 }
	goto $label$25 
	
.LABEL $label$34
	CALL $27(($13 + [104]), ($13 + [40]), ($13 + [160]), ($13 + [24]))
	$5 = *($13 + [40])
	*($13 + [40]) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	
.LABEL $label$33
	CALL _ZdlPv($5)
	
.LABEL $label$25
	$8 = (int_64)6
	
.LOOP $label$35:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$35 }
	*($13 + [32]) = (int_64)3617214756542218240
	*($13 + [24]) = $3
	$8 = (int_64)0
	$2 = (int_64)59
	$5 = [8344]
	$7 = (int_64)0
	
.LOOP $label$36:
	$1 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$37 }
	$9 = *($5)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$9 = ($9 + [-91])
	goto $label$38 
	
.LABEL $label$39
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$1 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$37
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$7 = ((int_64)$1 | (int_64)$7)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$36 }
	$8 = (int_64)0
	$1 = (int_64)59
	$5 = [8357]
	$6 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$45 }
	$9 = *($5)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$9 = ($9 + [-91])
	goto $label$43 
	
.LABEL $label$45
	$2 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$41
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$6 = ((int_64)$2 | (int_64)$6)
	$1 = ((int_64)$1 + (int_64)4294967291)
	if ( ((int_64)$1 != (int_64)55834574842) ){ goto $label$40 }
	*(($13 + [16])) = [0]
	*($13 + [8]) = (int_64)0
	$5 = CALL $73([8366])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$52 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$55 }
	*($13 + [8]) = ($5 << [1])
	$9 = (($13 + [8]) | [1])
	if ( $5 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$10 = (($5 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($13 + [8]) = ($10 | [1])
	*($13 + [16]) = $9
	*($13 + [12]) = $5
	
.LABEL $label$54
	CALL memcpy($9, [8366], $5)
	
.LABEL $label$53
	*(($9 + $5)) = [0]
	*(($13 + [184])) = *(($4 + [8]))
	$5 = (($13 + [8]) + [8])
	*(($13 + [200])) = *($5)
	*($5) = [0]
	*($13 + [160]) = $3
	*($13 + [168]) = *($0)
	*($13 + [176]) = *($4)
	*($13 + [192]) = *($13 + [8])
	*($13 + [8]) = (int_64)0
	$5 = CALL $28(($13 + [40]), ($13 + [24]), $7, $6, ($13 + [160]))
	CALL $29(($13 + [368]), $5)
	$9 = *($13 + [368])
	CALL send_inline($9, (*($13 + [372]) - $9))
	$9 = *($13 + [368])
	if ( ($9 == 0) ){ goto $label$56 }
	*($13 + [372]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$56
	$9 = *($5 + [28])
	if ( ($9 == 0) ){ goto $label$57 }
	*(($5 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$57
	$9 = *($5 + [16])
	if ( ($9 == 0) ){ goto $label$58 }
	*(($5 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$58
	if ( (*(($13 + [192])) & [1]) ){ goto $label$60 }
	if ( (*($13 + [8]) & [1]) ){ goto $label$59 }
	goto $label$51 
	
.LABEL $label$60
	CALL _ZdlPv(*(($13 + [200])))
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$51 }
	
.LABEL $label$59
	CALL _ZdlPv(*(($13 + [16])))
	$10 = *($13 + [104])
	if ( $10 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	CALL $66(($13 + [8]))
	
.LABEL $label$51
	$10 = *($13 + [104])
	if ( ($10 == 0) ){ goto $label$49 }
	
.LABEL $label$50
	$11 = ($13 + [108])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$48 }
	
.LOOP $label$61:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$62 }
	CALL _ZdlPv($9)
	
.LABEL $label$62
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$61 }
	$5 = *(($13 + [104]))
	*($11) = $10
	CALL _ZdlPv($5)
	$10 = *($13 + [144])
	if ( $10 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	$10 = *($13 + [144])
	if ( ($10 == 0) ){ goto $label$46 }
	goto $label$47 
	
.LABEL $label$48
	*($11) = $10
	CALL _ZdlPv($10)
	$10 = *($13 + [144])
	if ( ($10 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	$11 = ($13 + [148])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$64 }
	
.LOOP $label$65:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$66 }
	CALL _ZdlPv($9)
	
.LABEL $label$66
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$65 }
	$5 = *(($13 + [144]))
	goto $label$63 
	
.LABEL $label$64
	$5 = $10
	
.LABEL $label$63
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$46
	CALL $30(($13 + [248]))
	$10 = *($13 + [304])
	if ( ($10 == 0) ){ goto $label$67 }
	$11 = ($13 + [308])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$69 }
	
.LOOP $label$70:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$71 }
	CALL _ZdlPv($9)
	
.LABEL $label$71
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$70 }
	$5 = *(($13 + [304]))
	goto $label$68 
	
.LABEL $label$69
	$5 = $10
	
.LABEL $label$68
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$67
	$global$0 = ($13 + [384])
	(unreachable)
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [176])
	$global$0 = $2
	*(($3 = $2) + [140]) = $0
	*($3 + [128]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $74($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($2 = ($3 + [40]))) = (int_64)1398362884
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	CALL eosio_assert([1], [9297])
	$6 = (uint_64)*($2) >> (uint_64)(int_64)8)
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9346])
	*(($3 + [88])) = (int_64)0
	*(($3 + [96])) = (int_64)0
	*(($3 + [112])) = (int_64)0
	*(($3 + [120])) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [148]) = $4
	*($3 + [144]) = $4
	*($3 + [152]) = ($4 + $5)
	*($3 + [160]) = ($3 + [144])
	*($3 + [168]) = ($3 + [8])
	CALL $18(($3 + [168]), ($3 + [160]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $77($4)
	
.LABEL $label$9
	*($3 + [148]) = ($3 + [128])
	*($3 + [144]) = ($3 + [140])
	CALL $19(($3 + [144]), ($3 + [8]))
	if ( (*($3 + [116]) & [1]) ){ goto $label$16 }
	if ( (*($3 + [104]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($3 + [124])))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [112])))
	$1 = [1]
	if ( ((*($3 + [92]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = [1]
	if ( (*($3 + [92]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($3 + [80]) & $1) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [100])))
	if ( ((*($3 + [80]) & $1) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$10
	$global$0 = ($3 + [176])
	return [1]
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$3 = ($global$0 - [352])
	$global$0 = $3
	$4 = [0]
	*((($3 + [296]) + [32])) = [0]
	*($3 + [312]) = (int_64)-1
	*($3 + [320]) = (int_64)0
	$5 = *($0)
	*($3 + [296]) = $5
	*($3 + [304]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)4983113292184109056, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $20(($3 + [296]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [296])), [9375])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8256])
	*((($3 + [256]) + [32])) = [0]
	*($3 + [272]) = (int_64)-1
	*($3 + [280]) = (int_64)0
	$5 = *($0)
	*($3 + [256]) = $5
	*($3 + [264]) = $5
	$7 = CALL db_find_i64($5, $5, (int_64)4849559400366473216, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $24(($3 + [256]), $7)
	CALL eosio_assert(((int_32)*($4 + [164]) == (int_32)($3 + [256])), [9375])
	
.LABEL $label$2
	$8 = *($6 + [8])
	CALL eosio_assert((int_64)(*($4 + [32]) == 0), [9002])
	CALL eosio_assert(*($4 + [65]), [9035])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$2), [9069])
	$5 = *($4)
	$7 = *(($3 + [324]))
	$9 = *(($3 + [320]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($7 + [-24])
	$10 = *($6)
	if ( ((int_64)*($10) == (int_64)$5) ){ goto $label$5 }
	$7 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)($3 + [296])), [9375])
	goto $label$3 
	
.LABEL $label$4
	$10 = CALL $20(($3 + [296]), CALL $fimport$3(*($3 + [296]), *(($3 + [304])), (int_64)4983113292184109056, $5))
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)($3 + [296])), [9375])
	
.LABEL $label$3
	$11 = *($10 + [8])
	$6 = [0]
	*((($3 + [216]) + [32])) = [0]
	*($3 + [232]) = (int_64)-1
	*($3 + [240]) = (int_64)0
	$12 = *($0)
	*($3 + [216]) = $12
	*($3 + [224]) = $12
	$7 = [0]
	$10 = CALL db_find_i64($12, $12, (int_64)-5003134540516950016, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $31(($3 + [216]), $10)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [216])), [9375])
	
.LABEL $label$7
	*((($3 + [200]) + [8])) = *(($7 + [16]))
	*($3 + [200]) = *($7 + [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9513])
	CALL $43(($3 + [256]), $4)
	*((($3 + [160]) + [32])) = [0]
	*($3 + [176]) = (int_64)-1
	*($3 + [184]) = (int_64)0
	$12 = *($0)
	*($3 + [160]) = $12
	*($3 + [168]) = $11
	$7 = CALL db_find_i64($12, $11, (int_64)4983123004931178496, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $26(($3 + [160]), $7)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($3 + [160])), [9375])
	
.LABEL $label$8
	$7 = [0]
	$12 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9513])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($3 + [160])), [9548])
	CALL eosio_assert(((int_64)*($3 + [160]) == (int_64)CALL $fimport$5()), [9594])
	$5 = *($6)
	$9 = ($4 + [48])
	$10 = ($6 + [16])
	CALL eosio_assert(((int_64)*($10) == (int_64)*($9)), [9238])
	CALL eosio_assert(((int_64)*($6 + [8]) >= (int_64)*($4 + [40])), [9784])
	CALL eosio_assert(((int_64)*($9) == (int_64)*($10)), [9790])
	$1 = (int_64)
	*($6 + [8]) = $1(*($6 + [8]) - *($4 + [40])))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9838])
	CALL eosio_assert(((int_64)*($6 + [8]) < (int_64)4611686018427387904), [9860])
	CALL eosio_assert(((int_64)$5 == (int_64)*($6)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($3 + [16]), $6, [8])
	CALL eosio_assert([1], [9232])
	$9 = (($3 + [16]) | [8])
	CALL memcpy($9, ($6 + [8]), [8])
	CALL eosio_assert([1], [9232])
	$13 = (($3 + [16]) + [16])
	CALL memcpy($13, $10, [8])
	CALL db_update_i64(*($6 + [28]), $12, ($3 + [16]), [24])
	if ( (uint_64)($5 <= *((($3 + [160]) + [16]))) ){ goto $label$9 }
	*(($3 + [176])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	$5 = *($0)
	*($3 + [120]) = $5
	*($3 + [128]) = $8
	$6 = CALL db_find_i64($5, $8, (int_64)4983123004931178496, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$10 }
	$7 = CALL $26(($3 + [120]), $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [120])), [9375])
	
.LABEL $label$10
	$2 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9513])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [120])), [9548])
	CALL eosio_assert(((int_64)*($3 + [120]) == (int_64)CALL $fimport$5()), [9594])
	$5 = *($7)
	$6 = ($7 + [16])
	CALL eosio_assert(((int_64)*(($4 + [48])) == (int_64)*($6)), [9790])
	$12 = (int_64)
	*($7 + [8]) = $12(*($7 + [8]) - *(($4 + [40]))))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9838])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [9860])
	CALL eosio_assert(((int_64)$5 == (int_64)*($7)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($3 + [16]), $7, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($9, ($7 + [8]), [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($13, $6, [8])
	CALL db_update_i64(*($7 + [28]), $2, ($3 + [16]), [24])
	$6 = (($3 + [120]) + [16])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$11 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$2 = *($0)
	$5 = (int_64)6
	
.LOOP $label$12:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$12 }
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = $2
	$5 = (int_64)0
	$2 = (int_64)59
	$6 = [8344]
	$1 = (int_64)0
	
.LOOP $label$13:
	$12 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$14 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$7 = ($7 + [-91])
	goto $label$15 
	
.LABEL $label$16
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$1 = ((int_64)$12 | (int_64)$1)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$13 }
	$5 = (int_64)0
	$12 = (int_64)59
	$6 = [8357]
	$11 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$22 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$7 = ($7 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$2 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$18
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$11 = ((int_64)$2 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$17 }
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$6 = CALL $73([8366])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$33 }
	*($3) = ($6 << [1])
	$7 = ($3 | [1])
	if ( $6 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$4 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($4)
	*($3) = ($4 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $6
	
.LABEL $label$32
	CALL memcpy($7, [8366], $6)
	
.LABEL $label$31
	*(($7 + $6)) = [0]
	*(($3 + [40])) = *((($3 + [200]) + [8]))
	$6 = ($3 + [8])
	*(($3 + [56])) = *($6)
	*($6) = [0]
	*($3 + [24]) = $8
	*($3 + [16]) = *($0)
	*($3 + [32]) = *($3 + [200])
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$6 = CALL $28(($3 + [80]), ($3 + [64]), $1, $11, ($3 + [16]))
	CALL $29(($3 + [336]), $6)
	$7 = *($3 + [336])
	CALL send_inline($7, (*($3 + [340]) - $7))
	$7 = *($3 + [336])
	if ( ($7 == 0) ){ goto $label$34 }
	*($3 + [340]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$34
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$35 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$35
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$36 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$36
	if ( (*(($3 + [48])) & [1]) ){ goto $label$38 }
	if ( (*($3) & [1]) ){ goto $label$37 }
	goto $label$29 
	
.LABEL $label$38
	CALL _ZdlPv(*(($3 + [56])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$29 }
	
.LABEL $label$37
	CALL _ZdlPv(*(($3 + [8])))
	$4 = *($3 + [144])
	if ( ($4 == 0) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	CALL $66($3)
	
.LABEL $label$29
	$4 = *($3 + [144])
	if ( $4 ){ goto $label$27 }
	
.LABEL $label$28
	$4 = *($3 + [184])
	if ( $4 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$10 = ($3 + [148])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$39 }
	
.LOOP $label$40:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$41 }
	CALL _ZdlPv($7)
	
.LABEL $label$41
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$40 }
	$6 = *(($3 + [144]))
	*($10) = $4
	CALL _ZdlPv($6)
	$4 = *($3 + [184])
	if ( $4 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$39
	*($10) = $4
	CALL _ZdlPv($4)
	$4 = *($3 + [184])
	if ( ($4 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$10 = ($3 + [188])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$42 }
	
.LOOP $label$43:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$44 }
	CALL _ZdlPv($7)
	
.LABEL $label$44
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$43 }
	$6 = *(($3 + [184]))
	*($10) = $4
	CALL _ZdlPv($6)
	$4 = *($3 + [240])
	if ( $4 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$42
	*($10) = $4
	CALL _ZdlPv($4)
	$4 = *($3 + [240])
	if ( ($4 == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	$4 = *($3 + [240])
	if ( ($4 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$10 = ($3 + [244])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$46 }
	
.LOOP $label$47:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$48 }
	CALL _ZdlPv($7)
	
.LABEL $label$48
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$47 }
	$6 = *(($3 + [240]))
	goto $label$45 
	
.LABEL $label$46
	$6 = $4
	
.LABEL $label$45
	*($10) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$23
	CALL $30(($3 + [280]))
	$4 = *($3 + [320])
	if ( ($4 == 0) ){ goto $label$49 }
	$10 = ($3 + [324])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$51 }
	
.LOOP $label$52:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$53 }
	CALL _ZdlPv($7)
	
.LABEL $label$53
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$52 }
	$6 = *(($3 + [320]))
	goto $label$50 
	
.LABEL $label$51
	$6 = $4
	
.LABEL $label$50
	*($10) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$49
	$global$0 = ($3 + [352])
	(unreachable)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $74($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9366])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [9366])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $77($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8192])
	
.LABEL $label$2
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$5 }
	$4 = (int_64)7
	
.LOOP $label$6:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*($3 + [168]) = $0
	if ( ((int_64)$2 > (int_64)3607571202266103807) ){ goto $label$15 }
	if ( ((int_64)$2 <= (int_64)-4352386765319831553) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-4352386765319831552) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-4352383333104091136) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-3617168955010973696) ){ goto $label$4 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [1]
	*($3 + [56]) = *($3 + [112])
	CALL $3(($3 + [168]), ($3 + [56]))
	goto $label$4 
	
.LABEL $label$15
	if ( ((int_64)$2 <= (int_64)3626108646797400223) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)5378050745947914240) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)5373101450983374848) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)3626108646797400224) ){ goto $label$4 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [2]
	*($3 + [8]) = *($3 + [160])
	CALL $5(($3 + [168]), ($3 + [8]))
	goto $label$4 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-6408390130881638192) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-5001342335036948480) ){ goto $label$4 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [3]
	*($3 + [64]) = *($3 + [104])
	CALL $3(($3 + [168]), ($3 + [64]))
	goto $label$4 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)3607571202266103808) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)3626070749772398592) ){ goto $label$4 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [4]
	*($3 + [72]) = *($3 + [96])
	CALL $8(($3 + [168]), ($3 + [72]))
	goto $label$4 
	
.LABEL $label$12
	*($3 + [132]) = [0]
	*($3 + [128]) = [5]
	*($3 + [40]) = *($3 + [128])
	CALL $3(($3 + [168]), ($3 + [40]))
	goto $label$4 
	
.LABEL $label$11
	*($3 + [124]) = [0]
	*($3 + [120]) = [6]
	*($3 + [48]) = *($3 + [120])
	CALL $3(($3 + [168]), ($3 + [48]))
	goto $label$4 
	
.LABEL $label$10
	*($3 + [92]) = [0]
	*($3 + [88]) = [7]
	*($3 + [80]) = *($3 + [88])
	CALL $12(($3 + [168]), ($3 + [80]))
	goto $label$4 
	
.LABEL $label$9
	*($3 + [156]) = [0]
	*($3 + [152]) = [8]
	*($3 + [16]) = *($3 + [152])
	CALL $14(($3 + [168]), ($3 + [16]))
	goto $label$4 
	
.LABEL $label$8
	*($3 + [140]) = [0]
	*($3 + [136]) = [9]
	*($3 + [32]) = *($3 + [136])
	CALL $14(($3 + [168]), ($3 + [32]))
	goto $label$4 
	
.LABEL $label$7
	*($3 + [148]) = [0]
	*($3 + [144]) = [10]
	*($3 + [24]) = *($3 + [144])
	CALL $17(($3 + [168]), ($3 + [24]))
	
.LABEL $label$4
	CALL $72([0])
	$global$0 = ($3 + [176])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $74($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9366])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9366])
	$7 = (($3 + [8]) + [8])
	CALL memcpy($7, ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9366])
	$6 = (($3 + [8]) + [16])
	CALL memcpy($6, ($2 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $77($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$8 = *($6)
	$9 = *($7)
	$10 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $10), (int_64 $9), (int_64 $8), (int_64 $5))
	$global$0 = ($3 + [32])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = [0]
	*((($4 + [56]) + [32])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	$6 = *($0)
	*($4 + [56]) = $6
	*($4 + [64]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)4983113292184109056, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $20(($4 + [56]), $8)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [56])), [9375])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8636])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$3), [8392])
	CALL require_auth(*($7 + [8]))
	*((($4 + [16]) + [32])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$6 = *($0)
	*($4 + [16]) = $6
	*($4 + [24]) = $6
	$7 = CALL db_find_i64($6, $6, (int_64)4849559400366473216, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $24(($4 + [16]), $7)
	CALL eosio_assert(((int_32)*($5 + [164]) == (int_32)($4 + [16])), [9375])
	
.LABEL $label$2
	*($4 + [12]) = $5
	*($4 + [8]) = ($4 + [16])
	CALL require_auth(*($5 + [16]))
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [8492])
	CALL eosio_assert(((int_32)*($5 + [66]) ^ (int_32)[1]), [8518])
	CALL eosio_assert(((int_32)*($5 + [64]) ^ (int_32)[1]), [8659])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)$2), [8681])
	CALL eosio_assert(*($5 + [67]), [8697])
	CALL eosio_assert(((uint_64)*($5 + [104]) > (uint_64)((int_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8606])
	*($4) = ($4 + [8])
	CALL eosio_assert($7, [9513])
	CALL $37(($4 + [16]), $5, $4)
	CALL $30(($4 + [40]))
	$0 = *($4 + [80])
	if ( ($0 == 0) ){ goto $label$3 }
	$8 = ($4 + [84])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$6 }
	$5 = *(($4 + [80]))
	goto $label$4 
	
.LABEL $label$5
	$5 = $0
	
.LABEL $label$4
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($4 + [96])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$5 = ($global$0 - [240])
	$global$0 = $5
	$6 = [0]
	*((($5 + [152]) + [32])) = [0]
	*($5 + [168]) = (int_64)-1
	*($5 + [176]) = (int_64)0
	$7 = *($0)
	*($5 + [152]) = $7
	*($5 + [160]) = $7
	$8 = [0]
	$9 = CALL db_find_i64($7, $7, (int_64)4983113292184109056, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $20(($5 + [152]), $9)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [152])), [9375])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8256])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$3), [8392])
	CALL require_auth(*($8 + [8]))
	$10 = *($8)
	*((($5 + [112]) + [32])) = [0]
	*($5 + [128]) = (int_64)-1
	*($5 + [136]) = (int_64)0
	$7 = *($0)
	*($5 + [112]) = $7
	*($5 + [120]) = $7
	$8 = CALL db_find_i64($7, $7, (int_64)4849559400366473216, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $24(($5 + [112]), $8)
	CALL eosio_assert(((int_32)*($6 + [164]) == (int_32)($5 + [112])), [9375])
	
.LABEL $label$2
	CALL require_auth(*($6 + [16]))
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [8492])
	CALL eosio_assert(((int_32)*($6 + [66]) ^ (int_32)[1]), [8518])
	CALL eosio_assert(((int_32)*($6 + [64]) ^ (int_32)[1]), [8546])
	CALL eosio_assert(((int_32)*($6 + [67]) ^ (int_32)[1]), [8564])
	CALL eosio_assert(((int_64)*(($6 + [48])) == (int_64)*($4 + [8])), [9238])
	CALL eosio_assert(((int_64)*($6 + [40]) == (int_64)*($4)), [8585])
	CALL eosio_assert(((uint_64)*($6 + [104]) > (uint_64)((int_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8606])
	CALL eosio_assert($8, [9513])
	CALL $36(($5 + [112]), $6)
	$7 = (int_64)6
	
.LOOP $label$3:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$3 }
	*($5 + [200]) = (int_64)3617214756542218240
	*($5 + [192]) = $3
	$7 = (int_64)0
	$2 = (int_64)59
	$8 = [8344]
	$11 = (int_64)0
	
.LOOP $label$4:
	$12 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$5 }
	$9 = *($8)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [-91])
	goto $label$6 
	
.LABEL $label$7
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$5
	$8 = ($8 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$4 }
	$7 = (int_64)0
	$12 = (int_64)59
	$8 = [8357]
	$13 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$13 }
	$9 = *($8)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$9 = ($9 + [-91])
	goto $label$11 
	
.LABEL $label$13
	$2 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$9
	$8 = ($8 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$13 = ((int_64)$2 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$8 }
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	$8 = CALL $73([8366])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$17 }
	*($5 + [8]) = ($8 << [1])
	$9 = (($5 + [8]) | [1])
	if ( $8 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$14 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($14)
	*($5 + [8]) = ($14 | [1])
	*($5 + [16]) = $9
	*($5 + [12]) = $8
	
.LABEL $label$16
	CALL memcpy($9, [8366], $8)
	
.LABEL $label$15
	*(($9 + $8)) = [0]
	*(($5 + [48])) = *(($4 + [8]))
	$8 = (($5 + [8]) + [8])
	*(($5 + [64])) = *($8)
	*($8) = [0]
	*($5 + [24]) = $3
	*($5 + [32]) = *($0)
	*($5 + [40]) = *($4)
	*($5 + [56]) = *($5 + [8])
	*($5 + [8]) = (int_64)0
	$8 = CALL $28(($5 + [72]), ($5 + [192]), $11, $13, ($5 + [24]))
	CALL $29(($5 + [224]), $8)
	$9 = *($5 + [224])
	CALL send_inline($9, (*($5 + [228]) - $9))
	$9 = *($5 + [224])
	if ( ($9 == 0) ){ goto $label$18 }
	*($5 + [228]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$18
	$9 = *($8 + [28])
	if ( ($9 == 0) ){ goto $label$19 }
	*(($8 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$19
	$9 = *($8 + [16])
	if ( ($9 == 0) ){ goto $label$20 }
	*(($8 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$20
	if ( ((*(($5 + [56])) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$21
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$22
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$7 = *($0)
	*($5 + [24]) = $7
	*($5 + [32]) = $7
	$8 = [0]
	$9 = CALL db_find_i64($7, $7, (int_64)-5003134540516950016, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$23 }
	$8 = CALL $31(($5 + [24]), $9)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($5 + [24])), [9375])
	
.LABEL $label$23
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9513])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($5 + [24])), [9548])
	CALL eosio_assert(((int_64)*($5 + [24]) == (int_64)CALL $fimport$5()), [9594])
	$7 = *($8)
	$9 = ($8 + [16])
	CALL eosio_assert(((int_64)*(($4 + [8])) == (int_64)*($9)), [9704])
	$2 = ((int_64)*($8 + [8]) + (int_64)*($4))
	*($8 + [8]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9747])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [9766])
	CALL eosio_assert(((int_64)$7 == (int_64)*($8)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($5 + [192]), $8, [8])
	CALL eosio_assert([1], [9232])
	$15 = (($5 + [192]) | [8])
	CALL memcpy($15, ($8 + [8]), [8])
	CALL eosio_assert([1], [9232])
	$16 = (($5 + [192]) + [16])
	CALL memcpy($16, $9, [8])
	CALL db_update_i64(*($8 + [28]), (int_64)0, ($5 + [192]), [24])
	$8 = (($5 + [24]) + [16])
	if ( (uint_64)($7 <= *($8)) ){ goto $label$24 }
	*($8) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	$8 = [0]
	*(($5 + [104])) = [0]
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	$7 = *($0)
	*($5 + [72]) = $7
	*($5 + [80]) = $3
	$9 = CALL db_find_i64($7, $3, (int_64)4983123004931178496, $10)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$28 }
	$8 = CALL $26(($5 + [72]), $9)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($5 + [72])), [9375])
	$2 = *($0)
	CALL eosio_assert([1], [9513])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($5 + [72])), [9548])
	CALL eosio_assert(((int_64)*($5 + [72]) == (int_64)CALL $fimport$5()), [9594])
	$7 = *($8)
	$9 = ($8 + [16])
	CALL eosio_assert(((int_64)*(($6 + [48])) == (int_64)*($9)), [9704])
	$12 = ((int_64)*($8 + [8]) + (int_64)*(($6 + [40])))
	*($8 + [8]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9747])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [9766])
	CALL eosio_assert(((int_64)$7 == (int_64)*($8)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($5 + [192]), $8, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($15, ($8 + [8]), [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($16, $9, [8])
	CALL db_update_i64(*($8 + [28]), $2, ($5 + [192]), [24])
	$8 = (($5 + [72]) + [16])
	if ( (uint_64)($7 <= *($8)) ){ goto $label$27 }
	*($8) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$6 = *($5 + [96])
	if ( $6 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$12 = *($0)
	CALL eosio_assert(((int_64)*($5 + [72]) == (int_64)CALL $fimport$5()), [9449])
	*(($0 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($0 + [8]) = (int_64)0
	CALL eosio_assert([1], [9297])
	$17 = ($0 + [16])
	$18 = ($0 + [8])
	$7 = (int_64)5462355
	
.LOOP $label$30:
	$14 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$7 = $2
	$14 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$7 = $2
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $9 ){ goto $label$32 }
	$14 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$30 }
	
.LABEL $label$29
	CALL eosio_assert($14, [9346])
	*($0 + [24]) = ($5 + [72])
	*($0) = $10
	*($18) = *($4)
	*(($18 + [8])) = *(($4 + [8]))
	CALL eosio_assert([1], [9232])
	CALL memcpy(($5 + [192]), $0, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($15, $18, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy($16, $17, [8])
	$7 = *($0)
	$9 = CALL db_store_i64(*((($5 + [72]) + [8])), (int_64)4983123004931178496, $12, $7, ($5 + [192]), [24])
	*($0 + [28]) = $9
	$8 = ($5 + [88])
	if ( (uint_64)($7 <= *($8)) ){ goto $label$33 }
	*($8) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$33
	*($5 + [224]) = $0
	$7 = *($0)
	*($5 + [192]) = $7
	*($5 + [8]) = $9
	$6 = ($5 + [100])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*(($5 + [104]))) ){ goto $label$35 }
	*($8 + [8]) = $7
	*($8 + [16]) = $9
	*($5 + [224]) = [0]
	*($8) = $0
	*($6) = ($8 + [24])
	$8 = *($5 + [224])
	*($5 + [224]) = [0]
	if ( $8 ){ goto $label$34 }
	goto $label$27 
	
.LABEL $label$35
	CALL $27(($5 + [96]), ($5 + [224]), ($5 + [192]), ($5 + [8]))
	$8 = *($5 + [224])
	*($5 + [224]) = [0]
	if ( ($8 == 0) ){ goto $label$27 }
	
.LABEL $label$34
	CALL _ZdlPv($8)
	
.LABEL $label$27
	$6 = *($5 + [96])
	if ( ($6 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$4 = ($5 + [100])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$37 }
	
.LOOP $label$38:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$39 }
	CALL _ZdlPv($9)
	
.LABEL $label$39
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$38 }
	$8 = *(($5 + [96]))
	goto $label$36 
	
.LABEL $label$37
	$8 = $6
	
.LABEL $label$36
	*($4) = $6
	CALL _ZdlPv($8)
	
.LABEL $label$25
	$6 = *($5 + [48])
	if ( ($6 == 0) ){ goto $label$40 }
	$4 = ($5 + [52])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$42 }
	
.LOOP $label$43:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$44 }
	CALL _ZdlPv($9)
	
.LABEL $label$44
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$43 }
	$8 = *(($5 + [48]))
	goto $label$41 
	
.LABEL $label$42
	$8 = $6
	
.LABEL $label$41
	*($4) = $6
	CALL _ZdlPv($8)
	
.LABEL $label$40
	CALL $30(($5 + [136]))
	$6 = *($5 + [176])
	if ( ($6 == 0) ){ goto $label$45 }
	$4 = ($5 + [180])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$47 }
	
.LOOP $label$48:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$49 }
	CALL _ZdlPv($9)
	
.LABEL $label$49
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$48 }
	$8 = *(($5 + [176]))
	goto $label$46 
	
.LABEL $label$47
	$8 = $6
	
.LABEL $label$46
	*($4) = $6
	CALL _ZdlPv($8)
	
.LABEL $label$45
	$global$0 = ($5 + [240])
	return (unreachable)
	
.LABEL $label$14
	CALL $66(($5 + [8]))
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $74($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [56])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	CALL eosio_assert([1], [9297])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [9346])
	*($3 + [100]) = $6
	*($3 + [96]) = $6
	*($3 + [104]) = ($6 + $7)
	*($3 + [64]) = ($3 + [96])
	*($3 + [80]) = ($3 + [24])
	CALL $35(($3 + [80]), ($3 + [64]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $77($6)
	
.LABEL $label$8
	*(($1 = (($3 + [64]) + [8]))) = *(($3 + [56]))
	*($3 + [64]) = *($3 + [48])
	$8 = *(($3 + [40]))
	$10 = *((($3 + [24]) + [8]))
	$12 = *($3 + [24])
	*((($3 + [80]) + [8])) = *($1)
	*($3 + [80]) = *($3 + [64])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$13 = *((($3 + [80]) + [8]))
	*((($3 + [96]) + [8])) = $13
	*((($3 + [8]) + [8])) = $13
	$13 = *($3 + [80])
	*($3 + [8]) = $13
	*($3 + [96]) = $13
	CALL void $1((int_32 $12), (int_64 $10), (int_64 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [112])
	return [1]
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [0]
	*((($3 + [40]) + [32])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$5 = *($0)
	*($3 + [40]) = $5
	*($3 + [48]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)4983113292184109056, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $20(($3 + [40]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [40])), [9375])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8256])
	CALL require_auth(*($6 + [8]))
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$5 = *($0)
	*($3) = $5
	*($3 + [8]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)4849559400366473216, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $24($3, $6)
	CALL eosio_assert(((int_32)*($4 + [164]) == (int_32)$3), [9375])
	
.LABEL $label$2
	$5 = *($4)
	$7 = *(($3 + [68]))
	$8 = *(($3 + [64]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($7 + [-24])
	$9 = *($6)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$5 }
	$7 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($3 + [40])), [9375])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($3 + [40]), *(($3 + [48])), (int_64)4983113292184109056, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $20(($3 + [40]), $6) + [16]) == (int_32)($3 + [40])), [9375])
	
.LABEL $label$3
	$7 = *(($3 + [68]))
	$8 = *(($3 + [64]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$10:
	$6 = ($7 + [-24])
	$9 = *($6)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$9 }
	$7 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($3 + [40])), [9375])
	goto $label$7 
	
.LABEL $label$8
	$6 = CALL db_find_i64(*($3 + [40]), *(($3 + [48])), (int_64)4983113292184109056, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $20(($3 + [40]), $6) + [16]) == (int_32)($3 + [40])), [9375])
	
.LABEL $label$7
	CALL require_auth(*($4 + [16]))
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$2), [8881])
	CALL eosio_assert(((int_32)*($4 + [68]) ^ (int_32)[1]), [8756])
	CALL eosio_assert(((int_64)*($4 + [32]) != (int_64)0), [8781])
	CALL eosio_assert(*($4 + [112]), [8912])
	CALL eosio_assert(((int_32)*($4 + [113]) ^ (int_32)[1]), [8951])
	$2 = CALL current_time()
	$5 = *($0)
	$1 = *($4 + [72])
	$10 = *($4 + [88])
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [9513])
	if ( ((uint_64)(int_64))(((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295) - $10) >= (uint_64)$1) ){ goto $label$12 }
	CALL $40($3, $4, $5)
	CALL $6($0, *($4 + [56]), *($4))
	goto $label$11 
	
.LABEL $label$12
	CALL $41($3, $4, $5)
	if ( ((int_64)*(($4 + [32])) != (int_64)0) ){ goto $label$11 }
	$2 = *($0)
	CALL eosio_assert($6, [9513])
	CALL $42($3, $4, $2)
	CALL $2($0, *($4 + [56]), *(($4 + [8])))
	
.LABEL $label$11
	CALL $30(($3 + [24]))
	$4 = *($3 + [64])
	if ( ($4 == 0) ){ goto $label$13 }
	$8 = ($3 + [68])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$16 }
	$6 = *(($3 + [64]))
	goto $label$14 
	
.LABEL $label$15
	$6 = $4
	
.LABEL $label$14
	*($8) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$13
	$global$0 = ($3 + [80])
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)4983113292184109056, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $20($2, $4)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$2), [9375])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [9881])
	CALL eosio_assert($4, [9915])
	$4 = CALL db_next_i64(*($0 + [20]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $20($2, $4)
	
.LABEL $label$2
	CALL $49($2, $0)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $74($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9366])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $77($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [304])
	$global$0 = $4
	$5 = [0]
	*((($4 + [248]) + [32])) = [0]
	*($4 + [264]) = (int_64)-1
	*($4 + [272]) = (int_64)0
	$6 = *($0)
	*($4 + [248]) = $6
	*($4 + [256]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)4983113292184109056, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $20(($4 + [248]), $8)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [248])), [9375])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8256])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$3), [8392])
	*((($4 + [208]) + [32])) = [0]
	*($4 + [224]) = (int_64)-1
	*($4 + [232]) = (int_64)0
	$6 = *($0)
	*($4 + [208]) = $6
	*($4 + [216]) = $6
	$8 = CALL db_find_i64($6, $6, (int_64)4849559400366473216, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $24(($4 + [208]), $8)
	CALL eosio_assert(((int_32)*($5 + [164]) == (int_32)($4 + [208])), [9375])
	
.LABEL $label$2
	CALL require_auth(*(($7 + [8])))
	CALL require_auth(*($5 + [16]))
	$9 = [0]
	$10 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($10, [8417])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)$2), [8442])
	$6 = *($5)
	$8 = *(($4 + [276]))
	$11 = *(($4 + [272]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($8 + [-24])
	$12 = *($7)
	if ( ((int_64)*($12) == (int_64)$6) ){ goto $label$5 }
	$8 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($12 + [16]) == (int_32)($4 + [248])), [9375])
	$9 = $12
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_find_i64(*($4 + [248]), *((($4 + [248]) + [8])), (int_64)4983113292184109056, $6)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $20(($4 + [248]), $7)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($4 + [248])), [9375])
	
.LABEL $label$3
	$13 = *($9 + [8])
	CALL eosio_assert(((int_32)*($5 + [64]) ^ (int_32)[1]), [8461])
	$7 = [0]
	*((($4 + [168]) + [32])) = [0]
	*($4 + [184]) = (int_64)-1
	*($4 + [192]) = (int_64)0
	$2 = *($0)
	*($4 + [168]) = $2
	*($4 + [176]) = $2
	$8 = [0]
	$11 = CALL db_find_i64($2, $2, (int_64)-5003134540516950016, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $31(($4 + [168]), $11)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($4 + [168])), [9375])
	
.LABEL $label$7
	$14 = *(($8 + [16]))
	$15 = *($8 + [8])
	CALL eosio_assert($10, [9513])
	CALL $32(($4 + [208]), $5)
	*((($4 + [128]) + [32])) = [0]
	*($4 + [144]) = (int_64)-1
	*($4 + [152]) = (int_64)0
	$2 = *($0)
	*($4 + [128]) = $2
	*($4 + [136]) = $13
	$11 = CALL db_find_i64($2, $13, (int_64)4983123004931178496, $6)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $26(($4 + [128]), $11)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($4 + [128])), [9375])
	
.LABEL $label$8
	$2 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9513])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($4 + [128])), [9548])
	CALL eosio_assert(((int_64)*($4 + [128]) == (int_64)CALL $fimport$5()), [9594])
	$6 = *($7)
	$11 = ($7 + [16])
	CALL eosio_assert(((int_64)*($11) == (int_64)$14), [9238])
	CALL eosio_assert(((int_64)*($7 + [8]) >= (int_64)$15), [9784])
	CALL eosio_assert(((int_64)*(($5 + [48])) == (int_64)*($11)), [9790])
	$1 = (int_64)
	*($7 + [8]) = $1(*($7 + [8]) - *($5 + [40])))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9838])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [9860])
	CALL eosio_assert(((int_64)$6 == (int_64)*($7)), [9645])
	CALL eosio_assert([1], [9232])
	CALL memcpy(($4 + [16]), $7, [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy((($4 + [16]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [9232])
	CALL memcpy((($4 + [16]) + [16]), $11, [8])
	CALL db_update_i64(*($7 + [28]), $2, ($4 + [16]), [24])
	if ( (uint_64)($6 <= *((($4 + [128]) + [16]))) ){ goto $label$9 }
	*(($4 + [144])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [9881])
	CALL eosio_assert($7, [9915])
	$7 = CALL db_next_i64(*($8 + [28]), ($4 + [16]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	CALL $31(($4 + [168]), $7)
	
.LABEL $label$10
	CALL $33(($4 + [168]), $8)
	CALL eosio_assert($10, [9881])
	CALL eosio_assert($10, [9915])
	$7 = CALL db_next_i64(*($5 + [168]), ($4 + [16]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	CALL $24(($4 + [208]), $7)
	
.LABEL $label$11
	CALL $34(($4 + [208]), $5)
	$2 = *($0)
	$6 = (int_64)6
	
.LOOP $label$12:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$12 }
	*($4 + [80]) = (int_64)3617214756542218240
	*($4 + [72]) = $2
	$6 = (int_64)0
	$2 = (int_64)59
	$7 = [8344]
	$3 = (int_64)0
	
.LOOP $label$13:
	$1 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$14 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [-91])
	goto $label$15 
	
.LABEL $label$16
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$1 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$14
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$3 = ((int_64)$1 | (int_64)$3)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$13 }
	$6 = (int_64)0
	$1 = (int_64)59
	$7 = [8357]
	$16 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$8 = ($8 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$2 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$1 = ((int_64)$1 + (int_64)4294967291)
	if ( ((int_64)$1 != (int_64)55834574842) ){ goto $label$17 }
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$7 = CALL $73([8366])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$31 }
	*($4) = ($7 << [1])
	$8 = ($4 | [1])
	if ( $7 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$5 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($5)
	*($4) = ($5 | [1])
	*($4 + [8]) = $8
	*($4 + [4]) = $7
	
.LABEL $label$30
	CALL memcpy($8, [8366], $7)
	
.LABEL $label$29
	*(($8 + $7)) = [0]
	*(($4 + [40])) = $14
	$7 = ($4 + [8])
	*(($4 + [56])) = *($7)
	*($7) = [0]
	*($4 + [24]) = $13
	*($4 + [32]) = $15
	*($4 + [16]) = *($0)
	*($4 + [48]) = *($4)
	*($4) = (int_64)0
	$7 = CALL $28(($4 + [88]), ($4 + [72]), $3, $16, ($4 + [16]))
	CALL $29(($4 + [288]), $7)
	$8 = *($4 + [288])
	CALL send_inline($8, (*($4 + [292]) - $8))
	$8 = *($4 + [288])
	if ( ($8 == 0) ){ goto $label$32 }
	*($4 + [292]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$32
	$8 = *($7 + [28])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($7 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$33
	$8 = *($7 + [16])
	if ( ($8 == 0) ){ goto $label$34 }
	*(($7 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$34
	if ( (*(($4 + [48])) & [1]) ){ goto $label$36 }
	if ( (*($4) & [1]) ){ goto $label$35 }
	goto $label$27 
	
.LABEL $label$36
	CALL _ZdlPv(*(($4 + [56])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$35
	CALL _ZdlPv(*(($4 + [8])))
	$5 = *($4 + [152])
	if ( ($5 == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	CALL $66($4)
	
.LABEL $label$27
	$5 = *($4 + [152])
	if ( $5 ){ goto $label$25 }
	
.LABEL $label$26
	$5 = *($4 + [192])
	if ( $5 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$11 = ($4 + [156])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$37 }
	
.LOOP $label$38:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$39 }
	CALL _ZdlPv($8)
	
.LABEL $label$39
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$38 }
	$7 = *(($4 + [152]))
	*($11) = $5
	CALL _ZdlPv($7)
	$5 = *($4 + [192])
	if ( $5 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$37
	*($11) = $5
	CALL _ZdlPv($5)
	$5 = *($4 + [192])
	if ( ($5 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$11 = ($4 + [196])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$41 }
	
.LOOP $label$42:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$43 }
	CALL _ZdlPv($8)
	
.LABEL $label$43
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$42 }
	$7 = *(($4 + [192]))
	goto $label$40 
	
.LABEL $label$41
	$7 = $5
	
.LABEL $label$40
	*($11) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$23
	CALL $30(($4 + [232]))
	$5 = *($4 + [272])
	if ( ($5 == 0) ){ goto $label$44 }
	$11 = ($4 + [276])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$46 }
	
.LOOP $label$47:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$48 }
	CALL _ZdlPv($8)
	
.LABEL $label$48
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$47 }
	$7 = *(($4 + [272]))
	goto $label$45 
	
.LABEL $label$46
	$7 = $5
	
.LABEL $label$45
	*($11) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$44
	$global$0 = ($4 + [304])
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [9548])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9594])
	*($1 + [64]) = [1]
	$3 = *($1 + [56])
	CALL eosio_assert([1], [9645])
	*(($4 = $2) + [24]) = [0]
	*($4 + [8]) = ($4 + [24])
	$5 = ($1 + [8])
	*($4 + [36]) = $5
	*($4 + [32]) = $1
	$6 = ($1 + [16])
	*($4 + [40]) = $6
	$7 = ($1 + [24])
	*($4 + [44]) = $7
	$8 = ($1 + [32])
	*($4 + [48]) = $8
	$9 = ($1 + [40])
	*($4 + [52]) = $9
	$10 = ($1 + [56])
	*($4 + [56]) = $10
	$11 = ($1 + [64])
	*($4 + [60]) = $11
	$12 = ($1 + [65])
	*($4 + [64]) = $12
	$13 = ($1 + [66])
	*($4 + [68]) = $13
	$14 = ($1 + [67])
	*($4 + [72]) = $14
	$15 = ($1 + [68])
	*($4 + [76]) = $15
	$16 = ($1 + [72])
	*($4 + [80]) = $16
	$17 = ($1 + [80])
	*($4 + [84]) = $17
	$18 = ($1 + [88])
	*($4 + [88]) = $18
	$19 = ($1 + [96])
	*($4 + [92]) = $19
	$20 = ($1 + [104])
	*($4 + [96]) = $20
	$21 = ($1 + [112])
	*($4 + [100]) = $21
	$22 = ($1 + [113])
	*($4 + [104]) = $22
	$23 = ($1 + [128])
	*($4 + [112]) = $23
	$24 = ($1 + [116])
	*($4 + [108]) = $24
	$25 = ($1 + [140])
	*($4 + [116]) = $25
	$26 = ($1 + [152])
	*($4 + [120]) = $26
	CALL $57(($4 + [32]), ($4 + [8]))
	$27 = *($4 + [24])
	if ( ($27 <= [513]) ){ goto $label$2 }
	$2 = CALL $74($27)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($27 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $27)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $5
	*($4 + [40]) = $6
	*($4 + [44]) = $7
	*($4 + [48]) = $8
	*($4 + [52]) = $9
	*($4 + [56]) = $10
	*($4 + [60]) = $11
	*($4 + [64]) = $12
	*($4 + [68]) = $13
	*($4 + [72]) = $14
	*($4 + [76]) = $15
	*($4 + [80]) = $16
	*($4 + [84]) = $17
	*($4 + [88]) = $18
	*($4 + [92]) = $19
	*($4 + [96]) = $20
	*($4 + [100]) = $21
	*($4 + [104]) = $22
	*($4 + [32]) = $1
	*($4 + [112]) = $23
	*($4 + [108]) = $24
	*($4 + [116]) = $25
	*($4 + [120]) = $26
	CALL $58(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [168]), (int_64)0, $2, $27)
	if ( ((uint_32)$27 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$3 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $77($2)
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [128])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [9548])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9594])
	$4 = *($1 + [56])
	CALL eosio_assert((uint_64)(*(*(*($2) + [4]) + [96]) <= ((int_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [10093])
	*($1 + [64]) = [1]
	CALL eosio_assert(((int_64)$4 == (int_64)*($1 + [56])), [9645])
	*(($2 = $3) + [24]) = [0]
	*($2 + [8]) = ($2 + [24])
	$5 = ($1 + [8])
	*($2 + [36]) = $5
	*($2 + [32]) = $1
	$6 = ($1 + [16])
	*($2 + [40]) = $6
	$7 = ($1 + [24])
	*($2 + [44]) = $7
	$8 = ($1 + [32])
	*($2 + [48]) = $8
	$9 = ($1 + [40])
	*($2 + [52]) = $9
	$10 = ($1 + [56])
	*($2 + [56]) = $10
	$11 = ($1 + [64])
	*($2 + [60]) = $11
	$12 = ($1 + [65])
	*($2 + [64]) = $12
	$13 = ($1 + [66])
	*($2 + [68]) = $13
	$14 = ($1 + [67])
	*($2 + [72]) = $14
	$15 = ($1 + [68])
	*($2 + [76]) = $15
	$16 = ($1 + [72])
	*($2 + [80]) = $16
	$17 = ($1 + [80])
	*($2 + [84]) = $17
	$18 = ($1 + [88])
	*($2 + [88]) = $18
	$19 = ($1 + [96])
	*($2 + [92]) = $19
	$20 = ($1 + [104])
	*($2 + [96]) = $20
	$21 = ($1 + [112])
	*($2 + [100]) = $21
	$22 = ($1 + [113])
	*($2 + [104]) = $22
	$23 = ($1 + [128])
	*($2 + [112]) = $23
	$24 = ($1 + [116])
	*($2 + [108]) = $24
	$25 = ($1 + [140])
	*($2 + [116]) = $25
	$26 = ($1 + [152])
	*($2 + [120]) = $26
	CALL $57(($2 + [32]), ($2 + [8]))
	$27 = *($2 + [24])
	if ( ($27 <= [513]) ){ goto $label$2 }
	$3 = CALL $74($27)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($27 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($2 + [12]) = $3
	*($2 + [8]) = $3
	*($2 + [16]) = ($3 + $27)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = $5
	*($2 + [40]) = $6
	*($2 + [44]) = $7
	*($2 + [48]) = $8
	*($2 + [52]) = $9
	*($2 + [56]) = $10
	*($2 + [60]) = $11
	*($2 + [64]) = $12
	*($2 + [68]) = $13
	*($2 + [72]) = $14
	*($2 + [76]) = $15
	*($2 + [80]) = $16
	*($2 + [84]) = $17
	*($2 + [88]) = $18
	*($2 + [92]) = $19
	*($2 + [96]) = $20
	*($2 + [100]) = $21
	*($2 + [104]) = $22
	*($2 + [32]) = $1
	*($2 + [112]) = $23
	*($2 + [108]) = $24
	*($2 + [116]) = $25
	*($2 + [120]) = $26
	CALL $58(($2 + [32]), ($2 + [24]))
	CALL db_update_i64(*($1 + [168]), (int_64)0, $3, $27)
	if ( ((uint_32)$27 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $77($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$3
	$global$0 = ($2 + [128])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [9945])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9990])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [56])
	if ( ((int_64)*(*(($5 + [-24])) + [56]) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8) + [56]) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10040])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [152]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [160])))
	if ( ((*($3 + [140]) & [1]) == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((*($3 + [140]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [148])))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [136])))
	if ( (*($3 + [116]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [124])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [160])))
	if ( ((*($5 + [140]) & [1]) == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((*($5 + [140]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($5 + [148])))
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($5 + [136])))
	if ( (*($5 + [116]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($5 + [116]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [124])))
	
.LABEL $label$19
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$17 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [168]))
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy(($3 + [24]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [9366])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [9548])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9594])
	*($1 + [66]) = [1]
	$3 = *($1 + [56])
	CALL eosio_assert([1], [9645])
	*(($4 = $2) + [24]) = [0]
	*($4 + [8]) = ($4 + [24])
	$5 = ($1 + [8])
	*($4 + [36]) = $5
	*($4 + [32]) = $1
	$6 = ($1 + [16])
	*($4 + [40]) = $6
	$7 = ($1 + [24])
	*($4 + [44]) = $7
	$8 = ($1 + [32])
	*($4 + [48]) = $8
	$9 = ($1 + [40])
	*($4 + [52]) = $9
	$10 = ($1 + [56])
	*($4 + [56]) = $10
	$11 = ($1 + [64])
	*($4 + [60]) = $11
	$12 = ($1 + [65])
	*($4 + [64]) = $12
	$13 = ($1 + [66])
	*($4 + [68]) = $13
	$14 = ($1 + [67])
	*($4 + [72]) = $14
	$15 = ($1 + [68])
	*($4 + [76]) = $15
	$16 = ($1 + [72])
	*($4 + [80]) = $16
	$17 = ($1 + [80])
	*($4 + [84]) = $17
	$18 = ($1 + [88])
	*($4 + [88]) = $18
	$19 = ($1 + [96])
	*($4 + [92]) = $19
	$20 = ($1 + [104])
	*($4 + [96]) = $20
	$21 = ($1 + [112])
	*($4 + [100]) = $21
	$22 = ($1 + [113])
	*($4 + [104]) = $22
	$23 = ($1 + [128])
	*($4 + [112]) = $23
	$24 = ($1 + [116])
	*($4 + [108]) = $24
	$25 = ($1 + [140])
	*($4 + [116]) = $25
	$26 = ($1 + [152])
	*($4 + [120]) = $26
	CALL $57(($4 + [32]), ($4 + [8]))
	$27 = *($4 + [24])
	if ( ($27 <= [513]) ){ goto $label$2 }
	$2 = CALL $74($27)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($27 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $27)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $5
	*($4 + [40]) = $6
	*($4 + [44]) = $7
	*($4 + [48]) = $8
	*($4 + [52]) = $9
	*($4 + [56]) = $10
	*($4 + [60]) = $11
	*($4 + [64]) = $12
	*($4 + [68]) = $13
	*($4 + [72]) = $14
	*($4 + [76]) = $15
	*($4 + [80]) = $16
	*($4 + [84]) = $17
	*($4 + [88]) = $18
	*($4 + [92]) = $19
	*($4 + [96]) = $20
	*($4 + [100]) = $21
	*($4 + [104]) = $22
	*($4 + [32]) = $1
	*($4 + [112]) = $23
	*($4 + [108]) = $24
	*($4 + [116]) = $25
	*($4 + [120]) = $26
	CALL $58(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [168]), (int_64)0, $2, $27)
	if ( ((uint_32)$27 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$3 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $77($2)
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [128])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9945])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9990])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10040])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [152]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [160])))
	if ( ((*($3 + [140]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [140]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [148])))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [136])))
	if ( (*($3 + [116]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [124])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9426])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $74($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [9297])
	$10 = ($9 + [16])
	$11 = ($9 + [8])
	$12 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $13
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$12 = $13
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9346])
	*($9 + [24]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [9366])
	CALL memcpy($9, $7, [8])
	$5 = ($6 & [-8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [9366])
	CALL memcpy($11, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[16]), [9366])
	CALL memcpy($10, ($7 + [16]), [8])
	*($9 + [28]) = $1
	*($3 + [24]) = $9
	$12 = *($9)
	*($3 + [16]) = $12
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $12
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $25($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $77($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [11]) = *(*($0 + [28]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9232])
	CALL memcpy(*($4 + [4]), ($2 + [11]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [12]) = *(*($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9232])
	CALL memcpy(*($4 + [4]), ($2 + [12]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [13]) = *(*($0 + [36]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9232])
	CALL memcpy(*($4 + [4]), ($2 + [13]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [14]) = *(*($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9232])
	CALL memcpy(*($4 + [4]), ($2 + [14]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [44]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9232])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [60])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [64])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9232])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [10]) = *(*($0 + [68]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9232])
	CALL memcpy(*($4 + [4]), ($2 + [10]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [9]) = *(*($0 + [72]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9232])
	CALL memcpy(*($4 + [4]), ($2 + [9]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $59(*($1), *($0 + [76]))
	CALL $59(*($1), *($0 + [80]))
	CALL $59(*($1), *($0 + [84]))
	CALL $59(*($1), *($0 + [88]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9232])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9232])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9366])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9366])
	CALL memcpy(($2 + [11]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [11]) != (int_32)[0])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9366])
	CALL memcpy(($2 + [12]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [12]) != (int_32)[0])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9366])
	CALL memcpy(($2 + [13]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [13]) != (int_32)[0])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9366])
	CALL memcpy(($2 + [14]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [14]) != (int_32)[0])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9366])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [60])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [64])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [68])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9366])
	CALL memcpy(($2 + [10]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [10]) != (int_32)[0])
	$3 = *($0 + [72])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9366])
	CALL memcpy(($2 + [9]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [9]) != (int_32)[0])
	CALL $44(*($1), *($0 + [76]))
	CALL $44(*($1), *($0 + [80]))
	CALL $44(*($1), *($0 + [84]))
	CALL $44(*($1), *($0 + [88]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $77($0)
	
.LABEL $label$1
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $71($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [9548])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9594])
	$4 = *($1 + [56])
	$5 = CALL current_time()
	*($1 + [112]) = [1]
	*($1 + [88]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1 + [56])), [9645])
	*(($6 = $3) + [24]) = [0]
	*($6 + [8]) = ($6 + [24])
	$7 = ($1 + [8])
	*($6 + [36]) = $7
	*($6 + [32]) = $1
	$8 = ($1 + [16])
	*($6 + [40]) = $8
	$9 = ($1 + [24])
	*($6 + [44]) = $9
	$10 = ($1 + [32])
	*($6 + [48]) = $10
	$11 = ($1 + [40])
	*($6 + [52]) = $11
	$12 = ($1 + [56])
	*($6 + [56]) = $12
	$13 = ($1 + [64])
	*($6 + [60]) = $13
	$14 = ($1 + [65])
	*($6 + [64]) = $14
	$15 = ($1 + [66])
	*($6 + [68]) = $15
	$16 = ($1 + [67])
	*($6 + [72]) = $16
	$17 = ($1 + [68])
	*($6 + [76]) = $17
	$18 = ($1 + [72])
	*($6 + [80]) = $18
	$19 = ($1 + [80])
	*($6 + [84]) = $19
	$20 = ($1 + [88])
	*($6 + [88]) = $20
	$21 = ($1 + [96])
	*($6 + [92]) = $21
	$22 = ($1 + [104])
	*($6 + [96]) = $22
	$23 = ($1 + [112])
	*($6 + [100]) = $23
	$24 = ($1 + [113])
	*($6 + [104]) = $24
	$25 = ($1 + [128])
	*($6 + [112]) = $25
	$26 = ($1 + [116])
	*($6 + [108]) = $26
	$27 = ($1 + [140])
	*($6 + [116]) = $27
	$28 = ($1 + [152])
	*($6 + [120]) = $28
	CALL $57(($6 + [32]), ($6 + [8]))
	$29 = *($6 + [24])
	if ( ($29 <= [513]) ){ goto $label$2 }
	$3 = CALL $74($29)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($29 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = ($3 + $29)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = $7
	*($6 + [40]) = $8
	*($6 + [44]) = $9
	*($6 + [48]) = $10
	*($6 + [52]) = $11
	*($6 + [56]) = $12
	*($6 + [60]) = $13
	*($6 + [64]) = $14
	*($6 + [68]) = $15
	*($6 + [72]) = $16
	*($6 + [76]) = $17
	*($6 + [80]) = $18
	*($6 + [84]) = $19
	*($6 + [88]) = $20
	*($6 + [92]) = $21
	*($6 + [96]) = $22
	*($6 + [100]) = $23
	*($6 + [104]) = $24
	*($6 + [32]) = $1
	*($6 + [112]) = $25
	*($6 + [108]) = $26
	*($6 + [116]) = $27
	*($6 + [120]) = $28
	CALL $58(($6 + [32]), ($6 + [24]))
	CALL db_update_i64(*($1 + [168]), $2, $3, $29)
	if ( ((uint_32)$29 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $77($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [128])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [128])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9232])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9232])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9232])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9232])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9232])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9366])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3 + [40]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy(($4 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy(($4 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9366])
	CALL memcpy(($4 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $44(*($1), ($4 + [72]))
	CALL $44(*($1), ($4 + [84]))
	CALL $44(*($1), ($4 + [96]))
	CALL $44(*($1), ($4 + [108]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9371])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $50($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9366])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $56 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_64 $7, int_64 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$13 = ($global$0 - [96])
	$global$0 = $13
	$0 = *($0 + [4])
	$14 = *($0 + [4])
	$15 = (*(*($0)) + int_32($14 >> [1]))
	$16 = *($0)
	if ( (($14 & [1]) == 0) ){ goto $label$1 }
	$16 = *((*($15) + $16))
	
.LABEL $label$1
	*(($14 = (($13 + [80]) + [8]))) = *(($4 + [8]))
	*($13 + [80]) = *($4)
	$4 = CALL $67(($13 + [64]), $9)
	$0 = CALL $67(($13 + [48]), $10)
	$9 = CALL $67(($13 + [32]), $11)
	$10 = CALL $67(($13 + [16]), $12)
	*(($13 + [8])) = *($14)
	*($13) = *($13 + [80])
	CALL void $15((int_32 $1), (int_64 $2), (int_64 $3), (int_64 $13), (int_32 $5), (int_32 $6), (int_64 $7), (int_64 $8), (int_64 $4), (int_32 $0), (int_32 $9), (int_32 $10), (int_32 $16))
	if ( (*($10) & [1]) ){ goto $label$8 }
	if ( (*($9) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($9 + [8]))
	$9 = [1]
	if ( ((*($0) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = [1]
	if ( (*($0) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $9) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($0 + [8]))
	if ( ((*($4) & $9) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($13 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($13 + [96])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [111])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [76])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [80])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [84])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$3 = *($0)
	$0 = *($0 + [88])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$8 }
	*($2) = ($0 + $1)
	
.LABEL $label$8
}