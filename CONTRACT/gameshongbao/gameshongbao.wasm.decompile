(data (i32.const 16896) "from\00")
(data (i32.const 16901) "\n\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 16989) "EOS\00")
(data (i32.const 16993) "only EOS token allowed\00")
(data (i32.const 17016) "quantity invalid\00")
(data (i32.const 17033) "transfer quantity must be greater than 0.0001\00")
(data (i32.const 17079) "player does not exist\00")
(data (i32.const 17101) "Withdrawn Successfully\00")
(data (i32.const 17124) "unable to find key\00")
(data (i32.const 17143) "overdrawn balance\00")
(data (i32.const 17161) "player is playing\00")
(data (i32.const 17179) "room quantity must be greater than 1\00")
(data (i32.const 17216) "game does not exist\00")
(data (i32.const 17236) "game is full\00%lld\00")
(data (i32.const 17254) "game has over\00")
(data (i32.const 17268) "game has play\00")
(data (i32.const 17282) "SRT\00")
(data (i32.const 17286) "room does not exist\00")
(data (i32.const 17306) "game is not full\00")
(data (i32.const 17323) "reveal error\00")
(data (i32.const 17336) "not found mine_itr\00")
(data (i32.const 17355) "not found lucky_itr\00")
(data (i32.const 17375) "not found room\00")
(data (i32.const 17390) "string is too long to be a valid symbol_code\00")
(data (i32.const 17435) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17488) "write\00")
(data (i32.const 17494) "cannot create objects in table of another contract\00")
(data (i32.const 17545) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17594) "invalid symbol name\00")
(data (i32.const 17614) "multiplication overflow\00")
(data (i32.const 17638) "multiplication underflow\00")
(data (i32.const 17663) "divide by zero\00")
(data (i32.const 17678) "signed division overflow\00")
(data (i32.const 17703) "attempt to subtract asset with different symbol\00")
(data (i32.const 17751) "subtraction underflow\00")
(data (i32.const 17773) "subtraction overflow\00")
(data (i32.const 17794) "Withdrawn Super Lucky Pool Quantity\00")
(data (i32.const 17830) "Withdrawn Lucky Pool Quantity\00")
(data (i32.const 17860) "attempt to add asset with different symbol\00")
(data (i32.const 17903) "addition underflow\00")
(data (i32.const 17922) "addition overflow\00")
(data (i32.const 17940) "cannot pass end iterator to modify\00")
(data (i32.const 17975) "object passed to modify is not in multi_index\00")
(data (i32.const 18021) "cannot modify objects in table of another contract\00")
(data (i32.const 18072) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18131) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18182) "error reading iterator\00")
(data (i32.const 18205) "read\00")
(data (i32.const 18210) "cannot pass end iterator to erase\00")
(data (i32.const 18244) "cannot increment end iterator\00")
(data (i32.const 18274) "object passed to erase is not in multi_index\00")
(data (i32.const 18319) "cannot erase objects in table of another contract\00")
(data (i32.const 18369) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18422) "get\00")
(data (i32.const 18426) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18478) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18532) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18580) "eosio.token\00")
(data (i32.const 18592) "string is too long to be a valid name\00")
(data (i32.const 18630) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 18697) "character is not in allowed character set for names\00")
(data (i32.const 18752) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "prints" (func $fimport$0 (param i32)))
(import "env" "printn" (func $fimport$1 (param i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$6 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$7 (param i32 i64 i32)))
(import "env" "require_auth" (func $fimport$8 (param i64)))
(import "env" "is_account" (func $fimport$9 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$13 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "sha256" (func $fimport$14 (param i32 i32 i32)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "__multi3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "tapos_block_prefix" (func $fimport$17 (result i32)))
(import "env" "tapos_block_num" (func $fimport$18 (result i32)))
(import "env" "action_data_size" (func $fimport$19 (result i32)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "db_idx64_lowerbound" (func $fimport$23 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$27 (param i32)))
(import "env" "db_lowerbound_i64" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$30 (param i64 i64 i64) (result i32)))
(import "env" "__lttf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$32 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$33 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$44 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$45 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$48 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$50 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$51 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$52 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $50))
(export "_ZdlPv" (func $94))
(export "_Znwj" (func $92))
(export "_Znaj" (func $93))
(export "_ZdaPv" (func $95))
(export "_ZnwjSt11align_val_t" (func $96))
(export "_ZnajSt11align_val_t" (func $97))
(export "_ZdlPvSt11align_val_t" (func $98))
(export "_ZdaPvSt11align_val_t" (func $99))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $2 $20 $15 $7 $26 $1 $113 $115)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18832))
(global $global$2 i32 (i32.const 18832))


void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $128($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $128($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $122(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $122(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((int_64)$7 >= (int_64)$8) ){ goto $label$9 }
	if ( ((int_64)$6 >= (int_64)$7) ){ goto $label$8 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$7 
	
.LABEL $label$9
	$9 = [0]
	if ( ((int_64)$6 >= (int_64)$7) ){ goto $label$5 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((int_64)$6 >= (int_64)$8) ){ goto $label$6 }
	*($0) = $6
	*($1) = $8
	$9 = [2]
	$7 = *($2)
	$8 = *($3)
	if ( ((int_64)$8 < (int_64)$7) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$8
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((int_64)$7 >= (int_64)$8) ){ goto $label$6 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$7
	$7 = $8
	
.LABEL $label$6
	$8 = *($3)
	if ( ((int_64)$8 >= (int_64)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = $6
	$8 = *($3)
	if ( ((int_64)$8 < (int_64)$7) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = *($3)
	$7 = *($4)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($2) = $8
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$11 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$10 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_64)$7 < (int_64)$6) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$11
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_64)$7 < (int_64)$6) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$10
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_64)$7 < (int_64)$6) ){ goto $label$1 }
	
.LABEL $label$2
	return $9
	
.LABEL $label$1
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$14 }
	*($2) = $7
	*($3) = $6
	$6 = *($1)
	$7 = *($2)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$13 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$12 }
	*($0) = $7
	*($1) = $6
	return ($9 + [4])
	
.LABEL $label$14
	return ($9 + [1])
	
.LABEL $label$13
	return ($9 + [2])
	
.LABEL $label$12
	return ($9 + [3])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = int_32(($1 - $0) >> [3])
	if ( ((uint_32)$3 > (uint_32)[5]) ){ goto $label$21 }
	goto $label$3 
	
.LABEL $label$22
	$5 = *($0)
	$3 = ($1 + [-8])
	$4 = *($3)
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$3 }
	*($0) = $4
	*($3) = $5
	return [1]
	
.LABEL $label$21
	$5 = *($0 + [16])
	$6 = *($0)
	$4 = *($0 + [8])
	if ( ((int_64)$4 >= (int_64)$6) ){ goto $label$17 }
	if ( ((int_64)$5 >= (int_64)$4) ){ goto $label$14 }
	*($0) = $5
	*(($0 + [16])) = $6
	goto $label$13 
	
.LABEL $label$20
	$3 = ($1 + [-8])
	$4 = *($3)
	$6 = *($0)
	$5 = *($0 + [8])
	if ( ((int_64)$5 >= (int_64)$6) ){ goto $label$16 }
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$9 }
	*($0) = $4
	*($3) = $6
	return [1]
	
.LABEL $label$19
	CALL $90($0, ($0 + [8]), ($0 + [16]), ($0 + [24]), ($1 + [-8]), $2)
	return [1]
	
.LABEL $label$18
	$3 = ($1 + [-8])
	$5 = *($0 + [16])
	$6 = *($0)
	$4 = *($0 + [8])
	if ( ((int_64)$4 >= (int_64)$6) ){ goto $label$15 }
	if ( ((int_64)$5 >= (int_64)$4) ){ goto $label$8 }
	*($0) = $5
	*(($0 + [16])) = $6
	goto $label$7 
	
.LABEL $label$17
	if ( ((int_64)$5 >= (int_64)$4) ){ goto $label$11 }
	*(($0 + [16])) = $4
	*(($3 = ($0 + [8]))) = $5
	if ( ((int_64)$5 >= (int_64)$6) ){ goto $label$12 }
	*($0) = $5
	*($3) = $6
	$7 = ($0 + [24])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$16
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$3 }
	*(($2 = ($0 + [8]))) = $4
	*($3) = $5
	$5 = *($0)
	$4 = *($2)
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$3 }
	*($0) = $4
	*($2) = $5
	return [1]
	
.LABEL $label$15
	if ( ((int_64)$5 >= (int_64)$4) ){ goto $label$5 }
	*(($0 + [16])) = $4
	*(($2 = ($0 + [8]))) = $5
	if ( ((int_64)$5 >= (int_64)$6) ){ goto $label$6 }
	*($0) = $5
	*($2) = $6
	$6 = *($3)
	if ( ((int_64)$6 < (int_64)$4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$14
	*($0) = $4
	*(($3 = ($0 + [8]))) = $6
	if ( ((int_64)$5 >= (int_64)$6) ){ goto $label$11 }
	*(($0 + [16])) = $6
	*($3) = $5
	
.LABEL $label$13
	$4 = $6
	
.LABEL $label$12
	$7 = ($0 + [24])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	$4 = $5
	$7 = ($0 + [24])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$10
	$8 = [0]
	$9 = [16]
	$5 = *($7)
	if ( ((int_64)$5 >= (int_64)$4) ){ goto $label$2 }
	$10 = [2]
	goto $label$1 
	
.LABEL $label$9
	*($0) = $5
	*(($2 = ($0 + [8]))) = $6
	$4 = *($3)
	if ( ((int_64)$4 >= (int_64)$6) ){ goto $label$3 }
	*($2) = $4
	*($3) = $6
	return [1]
	
.LABEL $label$8
	*($0) = $4
	*(($2 = ($0 + [8]))) = $6
	if ( ((int_64)$5 >= (int_64)$6) ){ goto $label$5 }
	*(($0 + [16])) = $6
	*($2) = $5
	
.LABEL $label$7
	$4 = $6
	
.LABEL $label$6
	$6 = *($3)
	if ( ((int_64)$6 >= (int_64)$4) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$4 = $5
	$6 = *($3)
	if ( ((int_64)$6 >= (int_64)$4) ){ goto $label$3 }
	
.LABEL $label$4
	*(($2 = ($0 + [16]))) = $6
	*($3) = $4
	$3 = ($0 + [8])
	$5 = *($3)
	$4 = *($2)
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$3 }
	*($2) = $5
	*($3) = $4
	$5 = *($0)
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$3 }
	*($0) = $4
	*(($0 + [8])) = $5
	return [1]
	
.LABEL $label$3
	return [1]
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	
.LOOP $label$23:
	goto $label$34 
	
.LABEL $label$40
	$3 = $9
	$10 = [3]
	goto $label$23 
	
.LABEL $label$39
	*((($2 = ($0 + $3)) + [8])) = $4
	if ( ($3 == 0) ){ goto $label$24 }
	$10 = [4]
	goto $label$23 
	
.LABEL $label$38
	$3 = ($3 + [-8])
	$4 = *(($2 + [-8]))
	if ( ((int_64)$5 < (int_64)$4) ){ goto $label$25 }
	$10 = [5]
	goto $label$23 
	
.LABEL $label$37
	*((($0 + $3) + [8])) = $5
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[8]) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$36
	*($0) = $5
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[8]) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$35
	$9 = ($9 + [8])
	$4 = *($7)
	$7 = $3
	$5 = *($7)
	if ( ((int_64)$5 < (int_64)$4) ){ goto $label$30 }
	$10 = [0]
	goto $label$23 
	
.LABEL $label$34
	$3 = ($7 + [8])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$31 }
	$10 = [8]
	goto $label$23 
	
.LABEL $label$33
	return [1]
	
.LABEL $label$32
	return ((int_32)($7 + [8]) == (int_32)$1)
	
.LABEL $label$31
	$10 = [1]
	goto $label$23 
	
.LABEL $label$30
	$10 = [2]
	goto $label$23 
	
.LABEL $label$29
	$10 = [6]
	goto $label$23 
	
.LABEL $label$28
	$10 = [0]
	goto $label$23 
	
.LABEL $label$27
	$10 = [6]
	goto $label$23 
	
.LABEL $label$26
	$10 = [0]
	goto $label$23 
	
.LABEL $label$25
	$10 = [3]
	goto $label$23 
	
.LABEL $label$24
	$10 = [7]
	goto $label$23 
	$3
	return $10
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $124($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $124($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $124($1)
	
.LABEL $label$2
	*(CALL $108()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $124(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $128($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $108())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $123($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $121 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $120 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17975])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18021])
	*($4 + [72]) = *($1 + [8])
	$5 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [48]))), [17860])
	$6 = ((int_64)*($1 + [40]) + (int_64)*($3))
	*($1 + [40]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [17903])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [17922])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18072])
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $4(($4 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = *(($1 + [8]))
	if ( (CALL $118(($4 + [72]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2187881461846114304, ($4 + [80]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [88]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

int_32 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8492]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8496])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8492]) = [1]
	$2 = ($2 << [16])
	*([0] + [8496]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8496])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8496]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8492]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8492]) = [1]
	$3 = ($3 << [16])
	*([0] + [8496]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8496])
	
.LABEL $label$10
	*([0] + [8496]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18274])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18319])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18369])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7335373859207147520, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [60]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7335373859207147521, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18244])
	$2 = *($0 + [4])
	$3 = *($2 + [56])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)7335373859207147520, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [56]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [18131])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $73($6, CALL $fimport$3(*($6), *($6 + [8]), (int_64)7335373859207147520, $5))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [18131])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [56])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $126($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16903])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $107($0)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = $1
	*($2 + [8]) = ($0 + [152])
	CALL $47(($2 + [24]), ($2 + [8]), ($2 + [16]))
	$0 = *($2 + [28])
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((int_64)*($2 + [16]) != (int_64)*($0 + [8])) ){ goto $label$1 }
	$1 = *($2 + [24])
	*($2) = $1
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($0) == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0 + [8]) != (int_64)*($2 + [16])) ){ goto $label$4 }
	$1 = *($2)
	*($2 + [24]) = $1
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$0) != (int_32)[0]), [18210])
	CALL $48(($2 + [24]))
	CALL $49(*($2 + [8]), $0)
	$1 = *($2 + [24])
	*($2) = $1
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $48($2)
	$0 = *($2 + [4])
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$1
	*($2 + [4]) = [0]
	*($2) = ($2 + [8])
	$global$0 = ($2 + [32])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)7335373859207147520, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [18131])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $73($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)7335373859207147520, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [18131])
	
.LABEL $label$2
	*(($4 + [56])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17975])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18021])
	*($4 + [72]) = *($1 + [8])
	$5 = *($1)
	$6 = *($3)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [16]))), [17860])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($6))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [17903])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [17922])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [17860])
	$7 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [17903])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [17922])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18072])
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $4(($4 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = *(($1 + [8]))
	if ( (CALL $118(($4 + [72]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2187881461846114304, ($4 + [80]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [88]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [288])
	$global$0 = $3
	
.LOOP $label$1:
	$7 = ($1 + [4])
	$10 = *($7)
	$9 = ($0 + [4])
	$4 = *($9)
	$11 = ($4 - $10)
	$12 = int_32($11 >> [3])
	if ( ((uint_32)$12 <= (uint_32)[5]) ){ goto $label$16 }
	if ( ((int_32)$11 <= (int_32)[247]) ){ goto $label$15 }
	$5 = ($10 + [8])
	$13 = ($4 - (($12 << [2]) & [-8]))
	if ( ((int_32)$11 < (int_32)[7993]) ){ goto $label$17 }
	*($3 + [224]) = *($0)
	$11 = (($12 << [1]) & [-8])
	$4 = ($4 - $11)
	*($3 + [232]) = $4
	*($3 + [236]) = $4
	*($3 + [228]) = $13
	$11 = ($13 - $11)
	*($3 + [220]) = $11
	*($3 + [216]) = $11
	*($3 + [212]) = $5
	*($3 + [208]) = *($1)
	$6 = *($0)
	*($3 + [240]) = $6
	*($3 + [96]) = $6
	*($3 + [80]) = *($3 + [224])
	*($3 + [88]) = *($3 + [232])
	*($3 + [72]) = *($3 + [216])
	*($3 + [64]) = *($3 + [208])
	$4 = ($13 + [-8])
	$12 = CALL $71(($3 + [96]), ($3 + [88]), ($3 + [80]), ($3 + [72]), ($3 + [64]), $2)
	goto $label$4 
	
.LABEL $label$17
	$6 = *($10)
	$11 = (*($0 + [4]) + [-8])
	$15 = *($11)
	$4 = ($13 + [-8])
	$16 = *($4)
	if ( ((int_64)$16 >= (int_64)$15) ){ goto $label$20 }
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$19 }
	*($11) = $6
	*($10) = $15
	$12 = [1]
	goto $label$4 
	
.LABEL $label$20
	$12 = [0]
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$4 }
	*($4) = $6
	*($10) = $16
	$12 = [1]
	$16 = *($11)
	$6 = *($4)
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$4 }
	*($11) = $6
	*($4) = $16
	goto $label$18 
	
.LABEL $label$19
	*($11) = $16
	*($4) = $15
	$12 = [1]
	$6 = *($10)
	if ( ((int_64)$6 >= (int_64)$15) ){ goto $label$4 }
	*($4) = $6
	*($10) = $15
	
.LABEL $label$18
	$12 = [2]
	goto $label$4 
	
.LABEL $label$16
	goto $label$3 
	
.LABEL $label$21
	*(($1 + [4])) = ($10 + [8])
	$5 = ($4 + [-8])
	$16 = *($5)
	$6 = *($10)
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$3 }
	*($5) = $6
	*($10) = $16
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$15
	$10 = *($0 + [4])
	$13 = ($10 + [-24])
	$6 = *($13)
	$12 = *($1 + [4])
	$0 = ($10 + [-8])
	$15 = *($0)
	$5 = ($10 + [-16])
	$16 = *($5)
	if ( ((int_64)$16 >= (int_64)$15) ){ goto $label$25 }
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$24 }
	*($13) = $15
	*($0) = $6
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$25
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$23 }
	*($13) = $16
	*($5) = $6
	if ( ((int_64)$6 >= (int_64)$15) ){ goto $label$23 }
	*($5) = $15
	*($0) = $6
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$24
	*($5) = $15
	*($0) = $16
	if ( ((int_64)$6 >= (int_64)$15) ){ goto $label$23 }
	*($13) = $15
	*($5) = $6
	
.LABEL $label$23
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$3 }
	
.LABEL $label$22
	
.LOOP $label$26:
	$6 = *(($5 + [-8]))
	$4 = ($13 + [-8])
	$16 = *($4)
	if ( ((int_64)$16 >= (int_64)$6) ){ goto $label$27 }
	*($4) = $6
	$11 = $0
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$28 }
	$11 = $13
	
.LOOP $label$29:
	$5 = ($11 + [8])
	$6 = *($5)
	if ( ((int_64)$16 >= (int_64)$6) ){ goto $label$28 }
	*(($5 + [-8])) = $6
	$11 = $5
	if ( ((int_32)($5 + [8]) != (int_32)$10) ){ goto $label$29 }
	$11 = $0
	
.LABEL $label$28
	*($11) = $16
	
.LABEL $label$27
	$5 = $13
	$13 = $4
	if ( ((int_32)$4 != (int_32)$12) ){ goto $label$26 }
	goto $label$3 
	
.LABEL $label$14
	*(($1 + [4])) = ($10 + [8])
	$6 = *($10)
	$11 = (*($0 + [4]) + [-8])
	$15 = *($11)
	$5 = ($4 + [-16])
	$16 = *($5)
	if ( ((int_64)$16 >= (int_64)$15) ){ goto $label$11 }
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$9 }
	*($11) = $6
	*($10) = $15
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$13
	*(($1 + [4])) = ($10 + [8])
	*($3 + [280]) = *($0)
	$5 = ($4 + [-8])
	*($3 + [276]) = $5
	*($3 + [272]) = $5
	$5 = ($4 + [-16])
	*($3 + [268]) = $5
	*($3 + [264]) = $5
	$5 = ($4 + [-24])
	*($3 + [256]) = $5
	*($3 + [260]) = $5
	$6 = *($1)
	*($3 + [136]) = *($3 + [280])
	*($3 + [128]) = *($3 + [272])
	*($3 + [120]) = *($3 + [264])
	*($3 + [112]) = *($3 + [256])
	*($3 + [104]) = $6
	*($3 + [248]) = $6
	CALL $71(($3 + [136]), ($3 + [128]), ($3 + [120]), ($3 + [112]), ($3 + [104]), $2)
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$12
	$13 = ($10 + [8])
	*(($1 + [4])) = $13
	$5 = ($4 + [-24])
	$16 = *($5)
	$10 = (*($0 + [4]) + [-8])
	$15 = *($10)
	$11 = ($4 + [-16])
	$6 = *($11)
	if ( ((int_64)$6 >= (int_64)$15) ){ goto $label$10 }
	if ( ((int_64)$16 >= (int_64)$6) ){ goto $label$8 }
	*($10) = $16
	*($5) = $15
	goto $label$7 
	
.LABEL $label$11
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$3 }
	*($5) = $6
	*($10) = $16
	$16 = *($11)
	$6 = *($5)
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$3 }
	*($11) = $6
	*($5) = $16
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$10
	if ( ((int_64)$16 >= (int_64)$6) ){ goto $label$6 }
	*($5) = $6
	*($11) = $16
	$15 = *($10)
	if ( ((int_64)$16 >= (int_64)$15) ){ goto $label$5 }
	*($10) = $16
	*($11) = $15
	$6 = *($5)
	goto $label$5 
	
.LABEL $label$9
	*($11) = $16
	*($5) = $15
	$6 = *($10)
	if ( ((int_64)$6 >= (int_64)$15) ){ goto $label$3 }
	*($5) = $6
	*($10) = $15
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$8
	*($10) = $6
	*($11) = $15
	$6 = *($5)
	if ( ((int_64)$6 >= (int_64)$15) ){ goto $label$5 }
	*($5) = $15
	*($11) = $6
	
.LABEL $label$7
	$6 = $15
	goto $label$5 
	
.LABEL $label$6
	$6 = $16
	
.LABEL $label$5
	$4 = ($13 + [-8])
	$16 = *($4)
	if ( ((int_64)$16 >= (int_64)$6) ){ goto $label$3 }
	*($5) = $16
	*($4) = $6
	$16 = *($11)
	$6 = *($5)
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$3 }
	*($5) = $16
	*($11) = $6
	$16 = *($10)
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$3 }
	*($10) = $6
	*($11) = $16
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$4
	$8 = *($0)
	$6 = *($4)
	$14 = *($9)
	$11 = ($14 + [-8])
	$15 = *($11)
	if ( ((int_64)$15 < (int_64)$6) ){ goto $label$32 }
	$5 = ($14 + [-16])
	
.LOOP $label$33:
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$31 }
	$10 = ($10 + [8])
	$16 = *($10)
	if ( ((int_64)$16 >= (int_64)$6) ){ goto $label$33 }
	*($11) = $16
	*($10) = $15
	$5 = ($10 + [8])
	$12 = ($12 + [1])
	
.LABEL $label$32
	if ( ((uint_32)$11 > (uint_32)$5) ){ goto $label$36 }
	$4 = $11
	if ( ((int_32)$13 != (int_32)$4) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	
.LOOP $label$37:
	$16 = *(($13 + [-8]))
	$10 = ($11 + [-8])
	$15 = *($10)
	if ( ((int_64)$15 >= (int_64)$16) ){ goto $label$39 }
	
.LOOP $label$40:
	$10 = ($11 + [-16])
	$4 = ($11 + [-8])
	$11 = $4
	$15 = *($10)
	if ( ((int_64)$15 < (int_64)$16) ){ goto $label$40 }
	$11 = ($4 + [-8])
	goto $label$38 
	
.LABEL $label$39
	$4 = $11
	$11 = $10
	
.LABEL $label$38
	
.LOOP $label$41:
	$6 = *($5)
	$10 = ($5 + [8])
	$5 = $10
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$41 }
	if ( ((uint_32)$10 > (uint_32)$4) ){ goto $label$42 }
	*($11) = $6
	*(($10 + [-8])) = $15
	$13 = ( $10 ? $13 : ((int_32)$4 == (int_32)$13) )
	$12 = ($12 + [1])
	$5 = $10
	goto $label$37 
	
.LABEL $label$42
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$34 }
	
.LABEL $label$35
	$11 = ($4 + [-8])
	$16 = *($11)
	$5 = ($13 + [-8])
	$6 = *($5)
	if ( ((int_64)$6 >= (int_64)$16) ){ goto $label$34 }
	*($11) = $6
	*($5) = $16
	$12 = ($12 + [1])
	
.LABEL $label$34
	if ( $12 ){ goto $label$2 }
	*($3 + [192]) = $8
	$6 = *($0)
	*($3 + [200]) = $6
	*($3 + [56]) = $6
	*($3 + [196]) = $4
	*($3 + [48]) = *($3 + [192])
	$11 = CALL $72(($3 + [56]), ($3 + [48]), $2)
	$5 = ($4 + [-8])
	*($3 + [188]) = $5
	*($3 + [184]) = $5
	$6 = *($1)
	*($3 + [32]) = $6
	*($3 + [176]) = $6
	*($3 + [40]) = *($3 + [184])
	if ( (CALL $72(($3 + [40]), ($3 + [32]), $2) == 0) ){ goto $label$30 }
	if ( $11 ){ goto $label$3 }
	*($1) = $8
	*($7) = $4
	goto $label$1 
	
.LABEL $label$31
	$10 = $11
	$4 = *($7)
	$16 = *($4)
	if ( ((int_64)$15 < (int_64)$16) ){ goto $label$43 }
	
.LOOP $label$44:
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	$6 = *($5)
	$10 = ($5 + [-8])
	$5 = $10
	if ( ((int_64)$15 >= (int_64)$6) ){ goto $label$44 }
	*(($10 = ($10 + [8]))) = $16
	*($4) = $6
	
.LABEL $label$43
	$5 = ($4 + [8])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$45:
	$6 = *($11)
	
.LOOP $label$46:
	$10 = ($10 + [-8])
	$15 = *($10)
	if ( ((int_64)$6 >= (int_64)$15) ){ goto $label$46 }
	$13 = ($10 + [8])
	
.LOOP $label$47:
	$16 = *($5)
	$4 = ($5 + [8])
	$5 = $4
	if ( ((int_64)$6 < (int_64)$16) ){ goto $label$47 }
	if ( ((uint_32)$4 >= (uint_32)$13) ){ goto $label$48 }
	*($10) = $16
	*(($4 + [-8])) = $15
	$5 = $4
	goto $label$45 
	
.LABEL $label$48
	*($0) = $8
	*($9) = $13
	goto $label$1 
	
.LABEL $label$30
	if ( ($11 == 0) ){ goto $label$2 }
	*($0) = $8
	*($9) = $5
	goto $label$1 
	
.LABEL $label$3
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$2
	if ( ((int_32)(*($9) - $4) < (int_32)($4 - *($7))) ){ goto $label$49 }
	$5 = ($4 + [-8])
	*($3 + [156]) = $5
	*($3 + [152]) = $5
	$6 = *($1)
	*($3 + [16]) = $6
	*($3 + [144]) = $6
	*($3 + [24]) = *($3 + [152])
	CALL $44(($3 + [24]), ($3 + [16]), $2)
	*($7) = $4
	*($1) = $8
	goto $label$1 
	
.LABEL $label$49
	*($3 + [160]) = $8
	$6 = *($0)
	*($3 + [168]) = $6
	*($3 + [8]) = $6
	*($3 + [164]) = $4
	*($3) = *($3 + [160])
	CALL $44(($3 + [8]), $3, $2)
	*($9) = ($4 + [-8])
	*($0) = $8
	goto $label$1 
	$12
}

int_32 .FUNC $124 (int_32 $0)
{
	return CALL $125([8500], $0)
}

void .FUNC $128 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16884])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16692]
	$3 = (((int_32)$1 * (int_32)[12]) + [16692])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [18131])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $12($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [18131])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)7335373859207147521, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [18131])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $73($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)7335373859207147520, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [18131])
	
.LABEL $label$2
	*(($4 + [60])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [208])
	$global$0 = $2
	*($2 + [120]) = $1
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$9($1), [17079])
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [18131])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)-2187881461846114304, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $3($3, $6)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [18131])
	
.LABEL $label$1
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [17079])
	$8 = *(($7 + [16]))
	$9 = *($7 + [8])
	$10 = *($0)
	*(($2 + [112])) = [0]
	*($2 + [104]) = (int_64)0
	$6 = CALL $119([17101])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*($2 + [104]) = ($6 << [1])
	$5 = (($2 + [104]) | [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$11 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($2 + [104]) = ($11 | [1])
	*($2 + [112]) = $5
	*($2 + [108]) = $6
	
.LABEL $label$7
	CALL memcpy($5, [17101], $6)
	
.LABEL $label$6
	*(($5 + $6)) = [0]
	*(($2 + [96])) = [0]
	*($2 + [64]) = (int_64)6138663591592764928
	*($2 + [80]) = (int_64)-1
	$12 = (int_64)0
	*($2 + [88]) = (int_64)0
	*($2 + [72]) = *($0)
	$6 = CALL $119([16989])
	if ( ($6 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [17390])
	goto $label$10 
	
.LABEL $label$11
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$12 = (int_64)0
	
.LOOP $label$12:
	$5 = *(($6 + [16988]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$13
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$12 }
	$12 = ((int_64)$12 & (int_64)72057594037927935)
	
.LABEL $label$9
	$6 = CALL $8(($2 + [64]), $12, [17124])
	CALL eosio_assert(((int_64)*($6) > (int_64)0), [17143])
	CALL eosio_assert(((int_64)*($6) >= (int_64)$9), [17143])
	*($2 + [56]) = ($0 + [152])
	CALL $9(($2 + [128]), ($2 + [56]), ($2 + [120]))
	$6 = *($2 + [132])
	if ( ($6 == 0) ){ goto $label$15 }
	$6 = ((int_64)*($2 + [120]) != (int_64)*($6 + [16]))
	goto $label$14 
	
.LABEL $label$15
	$6 = [1]
	
.LABEL $label$14
	CALL eosio_assert($6, [17161])
	CALL eosio_assert($4, [17940])
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [17975])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$4()), [18021])
	$6 = ($7 + [8])
	*($2 + [184]) = *($6)
	$12 = *($7)
	CALL eosio_assert(((int_64)$8 == (int_64)*(($7 + [16]))), [17703])
	$13 = (int_64)
	*($6) = $13(*($6) - $9))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [17751])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [17773])
	CALL eosio_assert(((int_64)$12 == (int_64)*($7)), [18072])
	*($2 + [24]) = (($2 + [128]) + [56])
	*($2 + [20]) = ($2 + [128])
	*($2 + [16]) = ($2 + [128])
	CALL $4(($2 + [16]), $7)
	CALL db_update_i64(*($7 + [60]), (int_64)0, ($2 + [128]), [56])
	$5 = ($0 + [48])
	if ( (uint_64)($12 <= *($5)) ){ goto $label$16 }
	*($5) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($2) = *($6)
	if ( (CALL $118(($2 + [184]), $2, [8]) == 0) ){ goto $label$17 }
	$5 = ($7 + [64])
	$6 = *($5)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$18 }
	$6 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-2187881461846114304, ($2 + [192]), $12)
	*($5) = $6
	
.LABEL $label$18
	CALL db_idx64_update($6, (int_64)0, $2)
	
.LABEL $label$17
	*($2 + [8]) = (int_64)3617214756542218240
	*($2) = *($0)
	*(($2 + [152])) = $8
	*($2 + [136]) = $1
	*($2 + [128]) = $10
	*($2 + [144]) = $9
	CALL $101(($2 + [160]), ($2 + [104]))
	$6 = CALL $10(($2 + [16]), $2, (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [128]))
	CALL $11(($2 + [192]), $6)
	$5 = *($2 + [192])
	CALL send_inline($5, (*($2 + [196]) - $5))
	$5 = *($2 + [192])
	if ( ($5 == 0) ){ goto $label$19 }
	*($2 + [196]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$5 = *($6 + [28])
	if ( ($5 == 0) ){ goto $label$20 }
	*(($6 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$5 = *($6 + [16])
	if ( ($5 == 0) ){ goto $label$21 }
	*(($6 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$21
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($2 + [168])))
	
.LABEL $label$22
	$7 = *($2 + [88])
	if ( ($7 == 0) ){ goto $label$23 }
	$0 = ($2 + [92])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$25 }
	
.LOOP $label$26:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$27 }
	CALL _ZdlPv($5)
	
.LABEL $label$27
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$26 }
	$6 = *(($2 + [88]))
	goto $label$24 
	
.LABEL $label$25
	$6 = $7
	
.LABEL $label$24
	*($0) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$23
	if ( ((*($2 + [104]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*($2 + [112]))
	
.LABEL $label$28
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$5
	CALL $100(($2 + [104]))
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *($4 + [4])
	*(($1 + [16])) = *(($4 + [8]))
	*($1 + [8]) = *($4)
	$4 = CALL $119([16989])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17390])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($4 + [16988]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [17545])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [17594])
	*(($1 + [32])) = $8
	*($1 + [24]) = (int_64)0
	$4 = CALL $119([17282])
	if ( ($4 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [17390])
	goto $label$14 
	
.LABEL $label$15
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = (int_64)0
	
.LOOP $label$16:
	$7 = *(($4 + [17281]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$17
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$16 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$8 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [17545])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$6 = $9
	$7 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$6 = $9
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $7 ){ goto $label$22 }
	$7 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$7 = [0]
	
.LABEL $label$18
	CALL eosio_assert($7, [17594])
	*(($1 + [48])) = $8
	*($1 + [40]) = (int_64)0
	$7 = $2
	$4 = ($7 + [-64])
	$global$0 = $4
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($7 + [-8])
	CALL $4(($3 + [8]), $1)
	$6 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)-2187881461846114304, *(*($0 + [8])), $6, $4, [56])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$23 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$6 = *(($5 + [8]))
	$9 = *(*(($0 + [8])))
	$8 = *($1)
	*($3 + [24]) = *($1 + [8])
	*($1 + [64]) = CALL db_idx64_store($6, (int_64)-2187881461846114304, $9, $8, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [112])
	$global$0 = $5
	*($5 + [8]) = $1
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	CALL prints([16896])
	CALL printn($1)
	CALL prints([16901])
	$7 = CALL $119([16989])
	if ( ($7 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [17390])
	goto $label$4 
	
.LABEL $label$5
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = (int_64)0
	
.LOOP $label$6:
	$8 = *(($7 + [16988]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$7
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$6 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$2 
	
.LABEL $label$3
	$2 = (int_64)4
	
.LABEL $label$2
	$6 = *($3 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$2), [16993])
	$8 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$2 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$2 = $6
	$8 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$2 = $6
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $8 ){ goto $label$12 }
	$8 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	
.LABEL $label$8
	CALL eosio_assert($8, [17016])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [17033])
	$11 = ($0 + [32])
	$8 = *(($0 + [60]))
	$12 = *(($0 + [56]))
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$15 }
	
.LOOP $label$17:
	$7 = ($8 + [-24])
	$10 = *($7)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$16 }
	$8 = $7
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$11), [18131])
	goto $label$14 
	
.LABEL $label$15
	$7 = CALL db_find_i64(*($11), *(($0 + [40])), (int_64)-2187881461846114304, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $3($11, $7)
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$11), [18131])
	
.LABEL $label$14
	CALL eosio_assert([1], [17940])
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$11), [17975])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$4()), [18021])
	$7 = ($10 + [8])
	*($5 + [88]) = *($7)
	$2 = *($10)
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*(($10 + [16]))), [17860])
	$1 = ((int_64)*($7) + (int_64)*($3))
	*($7) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [17903])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [17922])
	CALL eosio_assert(((int_64)$2 == (int_64)*($10)), [18072])
	*($5 + [80]) = (($5 + [16]) + [56])
	*($5 + [76]) = ($5 + [16])
	*($5 + [72]) = ($5 + [16])
	CALL $4(($5 + [72]), $10)
	CALL db_update_i64(*($10 + [60]), (int_64)0, ($5 + [16]), [56])
	$8 = ($0 + [48])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$18 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*($5 + [104]) = *($7)
	if ( (CALL $118(($5 + [88]), ($5 + [104]), [8]) == 0) ){ goto $label$1 }
	$8 = ($10 + [64])
	$7 = *($8)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$19 }
	$7 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-2187881461846114304, ($5 + [96]), $2)
	*($8) = $7
	
.LABEL $label$19
	CALL db_idx64_update($7, (int_64)0, ($5 + [104]))
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$13
	$2 = *($0)
	*($5 + [108]) = $3
	*($5 + [104]) = ($5 + [8])
	*($5 + [72]) = $2
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$4()), [17494])
	*($5 + [16]) = $11
	*($5 + [20]) = ($5 + [104])
	*($5 + [24]) = ($5 + [72])
	*(($7 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = (int_64)0
	*($7 + [40]) = (int_64)0
	*($7 + [48]) = (int_64)0
	*($7 + [56]) = $11
	CALL $5(($5 + [16]), $7)
	*($5 + [96]) = $7
	$2 = *($7)
	*($5 + [16]) = $2
	$10 = *($7 + [60])
	*($5 + [88]) = $10
	$12 = ($0 + [60])
	$8 = *($12)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [64]))) ){ goto $label$21 }
	*($8 + [8]) = $2
	*($8 + [16]) = $10
	*($5 + [96]) = [0]
	*($8) = $7
	*($12) = ($8 + [24])
	$7 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( $7 ){ goto $label$20 }
	goto $label$1 
	
.LABEL $label$21
	CALL $6(($0 + [56]), ($5 + [96]), ($5 + [16]), ($5 + [88]))
	$7 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$20
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($5 + [112])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18182])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $124($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*($3 + [8]) = $0
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*(($5 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = $0
	CALL $75(($3 + [8]), $5)
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [8]) = $6
	$7 = *($5 + [60])
	*($3 + [4]) = $7
	$8 = ($0 + [28])
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($1 + [8]) = $6
	*($1 + [16]) = $7
	*($3 + [24]) = [0]
	*($1) = $5
	*($8) = ($1 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC memory ()
{
	CALL $88()
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	$1 = *([0] + [8192])
	if ( ($1 == 0) ){ goto $label$1 }
	*([0] + [8196]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $76(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$6 = ($global$0 - [336])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = CALL $119([16989])
	if ( ($7 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17390])
	goto $label$3 
	
.LABEL $label$4
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = (int_64)0
	
.LOOP $label$5:
	$9 = *(($7 + [16988]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$6
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$10 = *($3 + [8])
	CALL eosio_assert(((int_64)$10 == (int_64)$8), [16993])
	$9 = [0]
	$11 = *($3)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $10
	$9 = [1]
	$12 = $7
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$12 = ($7 + [1])
	$7 = $12
	if ( $9 ){ goto $label$11 }
	$9 = [1]
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [17016])
	CALL eosio_assert(((int_64)$11 > (int_64)9999), [17179])
	$13 = ($0 + [72])
	$9 = *(($0 + [100]))
	$12 = *(($0 + [96]))
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$16:
	$7 = ($9 + [-24])
	$14 = *($7)
	if ( ((int_64)*($14) == (int_64)$1) ){ goto $label$15 }
	$9 = $7
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*(($14 + [36])) == (int_32)$13), [18131])
	if ( $14 ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	$7 = CALL db_find_i64(*($13), *(($0 + [80])), (int_64)-4816269947984412672, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $16($13, $7) + [36]) == (int_32)$13), [18131])
	$global$0 = ($6 + [336])
	return 
	
.LABEL $label$13
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$4()), [17494])
	*(($7 = CALL _Znwj([48])) + [36]) = $13
	*($7 + [8]) = $2
	*($7) = $1
	*($7 + [32]) = $4
	*($7 + [16]) = *($3)
	*(($7 + [24])) = *(($3 + [8]))
	*($6 + [232]) = ($6 + [33])
	*($6 + [228]) = $6
	*($6 + [224]) = $6
	CALL $17(($6 + [224]), $7)
	$10 = *($7)
	$9 = ($0 + [80])
	*($7 + [40]) = CALL db_store_i64(*($9), (int_64)-4816269947984412672, $8, $10, $6, [33])
	$12 = ($0 + [88])
	if ( (uint_64)($10 <= *($12)) ){ goto $label$17 }
	*($12) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	$10 = *($9)
	$11 = *($7)
	*($6 + [288]) = *(($7 + [8]))
	*($7 + [44]) = CALL db_idx64_store($10, (int_64)-4816269947984412672, $8, $11, ($6 + [288]))
	*($6 + [224]) = $7
	$8 = *($7)
	*($6) = $8
	$12 = *(($7 + [40]))
	*($6 + [288]) = $12
	$14 = ($0 + [100])
	$9 = *($14)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [104]))) ){ goto $label$20 }
	*($9 + [8]) = $8
	*($9 + [16]) = $12
	*($6 + [224]) = [0]
	*($9) = $7
	*($14) = ($9 + [24])
	$7 = *($6 + [224])
	$9 = [0]
	*($6 + [224]) = [0]
	if ( $7 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL $18(($0 + [96]), ($6 + [224]), $6, ($6 + [288]))
	$7 = *($6 + [224])
	$9 = [0]
	*($6 + [224]) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv($7)
	
.LABEL $label$18
	CALL sha256($5, [32], ($6 + [288]))
	*(($7 = (($6 + [224]) + [24]))) = *(($5 + [24]))
	*(($12 = (($6 + [224]) + [16]))) = *(($5 + [16]))
	*(($14 = ($6 + [264]))) = *($6 + [296])
	*(($13 = (($6 + [224]) + [48]))) = *((($6 + [288]) + [16]))
	*(($15 = ($6 + [280]))) = *((($6 + [288]) + [24]))
	*($6 + [232]) = *(($5 + [8]))
	*($6 + [224]) = *($5)
	*($6 + [256]) = *($6 + [288])
	*(($6 + [52])) = $9
	*(($6 + [32])) = *(($3 + [8]))
	*(($6 + [72])) = *($6 + [232])
	*(($6 + [80])) = *($12)
	*(($6 + [88])) = *($7)
	*(($6 + [96])) = *($6 + [256])
	*(($6 + [104])) = *($14)
	*(($6 + [112])) = *($13)
	*(($6 + [120])) = *($15)
	*($6 + [8]) = $1
	*($6) = $2
	*($6 + [40]) = $4
	*($6 + [44 align=4]) = (int_64)0
	*($6 + [16]) = *($0)
	*($6 + [24]) = *($3)
	*($6 + [64]) = *($6 + [224])
	*(($6 + [184])) = (int_64)0
	*(($6 + [176])) = (int_64)0
	*(($6 + [168])) = (int_64)0
	*(($6 + [160])) = (int_64)0
	*(($6 + [152])) = (int_64)0
	*(($6 + [144])) = (int_64)0
	*(($6 + [136])) = (int_64)0
	*($6 + [128]) = (int_64)0
	*($6 + [192]) = (int_64)0
	*($6 + [200]) = (int_64)0
	*($6 + [208]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = *($0)
	*($6 + [328]) = $6
	CALL $19(($6 + [320]), ($0 + [112]), $8, ($6 + [328]))
	$7 = *($6 + [44])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($6 + [48])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$global$0 = ($6 + [336])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18182])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $124($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [36]) = $0
	CALL $78(($3 + [32]), $5)
	*($5 + [44]) = [-1]
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $18(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $13($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $14(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $13($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17488])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17488])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $63(CALL $62($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18182])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $124($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18205])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18205])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($1, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [8]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [24]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [40]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($1 + [60]) = *(*($0 + [8]))
	*($1 + [64]) = [-1]
	$global$0 = ($2 + [16])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [17494])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([240])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [44 align=4]) = (int_64)0
	*($3 + [52]) = [0]
	*($3 + [200]) = (int_64)0
	*($3 + [216]) = $1
	CALL $64(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [220])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $65(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [44])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [48])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $101(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $101(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$2 = *(($0 + [136]))
	if ( ($2 == 0) ){ goto $label$6 }
	$5 = ($0 + [140])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	$1 = *($4 + [44])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($4 + [48])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $2
	
.LABEL $label$7
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($0 + [96]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$17 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL _ZdlPv($4)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$20 }
	$3 = *(($0 + [56]))
	goto $label$18 
	
.LABEL $label$19
	$3 = $1
	
.LABEL $label$18
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$17
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3 + [32]) = *($3 + [72])
	CALL $51($0, (int_64)6138663591592764928, ($3 + [32]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	if ( ((int_64)$2 > (int_64)3941577298472615935) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)3941571463168917504) ){ goto $label$2 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [16]) = *($3 + [48])
	CALL $52($1, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)3941577298472615936) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421058206947606528) ){ goto $label$2 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [8]) = *($3 + [56])
	CALL $53($1, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3) = *($3 + [64])
	CALL $54($1, $1, $3)
	goto $label$2 
	
.LABEL $label$3
	*($3 + [44]) = [0]
	*($3 + [40]) = [5]
	*($3 + [24]) = *($3 + [40])
	CALL $55($1, $1, ($3 + [24]))
	
.LABEL $label$2
	CALL $109([0])
	$global$0 = ($3 + [80])
}

int_32 .FUNC $51 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [320])
	$global$0 = $3
	*(($4 = $3) + [312]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [288])) = (int_64)0
	*(($4 + [304])) = [0]
	*($4 + [272]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [252]) = $2
	*($4 + [248]) = $2
	*($4 + [256]) = ($2 + $5)
	*($4 + [16]) = ($4 + [248])
	*($4 + [40]) = ($4 + [264])
	CALL $56(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [256])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [248])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $57(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [312])
	CALL $58(($4 + [16]), ($4 + [264]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $128($2)
	
.LABEL $label$4
	CALL $59($3)
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [304])))
	
.LABEL $label$5
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $52 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [256]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18205])
	CALL memcpy(($4 + [248]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [18205])
	CALL memcpy((($4 + [248]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [18205])
	CALL memcpy((($4 + [248]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [24])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $57(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [264])
	$1 = *($4 + [256])
	$9 = *($4 + [248])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	CALL $59($8)
	$global$0 = ($4 + [272])
	return [1]
}

int_32 .FUNC $53 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [272]) + [24]))) = (int_64)0
	*(($8 = ($4 + [344]))) = (int_64)0
	*(($9 = ($4 + [336]))) = (int_64)0
	*(($10 = ($4 + [328]))) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [304]) = [0]
	*($4 + [320]) = (int_64)0
	*($4 + [260]) = $2
	*($4 + [256]) = $2
	*($4 + [264]) = ($2 + $7)
	*($4 + [416]) = ($4 + [256])
	*($4 + [48]) = ($4 + [272])
	CALL $60(($4 + [48]), ($4 + [416]))
	$11 = *($4 + [264])
	*((($4 + [32]) + [8])) = $11
	*((($4 + [16]) + [8])) = $11
	$12 = *($4 + [256])
	*($4 + [16]) = $12
	*($4 + [32]) = $12
	$11 = CALL $57(($4 + [48]), $0, $1, ($4 + [16]))
	*(($13 = (($4 + [384]) + [8]))) = *($3)
	*(($3 = (($4 + [352]) + [16]))) = *($9)
	*(($9 = (($4 + [352]) + [24]))) = *($8)
	*($4 + [384]) = *($4 + [288])
	*($4 + [352]) = *($4 + [320])
	*($4 + [360]) = *($10)
	$0 = *($4 + [280])
	$1 = *($4 + [272])
	$8 = *($4 + [304])
	*((($4 + [416]) + [24])) = *($9)
	*((($4 + [416]) + [16])) = *($3)
	*((($4 + [400]) + [8])) = *($13)
	*($4 + [424]) = *($4 + [360])
	*($4 + [416]) = *($4 + [352])
	*($4 + [400]) = *($4 + [384])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$12 = *((($4 + [400]) + [8]))
	*((($4 + [448]) + [8])) = $12
	*(($4 + [8])) = $12
	$12 = *($4 + [400])
	*($4) = $12
	*($4 + [448]) = $12
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 ($8 & [255])), (int_32 ($4 + [416])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $128($2)
	
.LABEL $label$5
	CALL $59($11)
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [248]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18205])
	CALL memcpy(($4 + [248]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $57(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [248])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	CALL $59($8)
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [4 align=4]) = (int_64)0
	$6 = ($0 + [4])
	*($0) = $6
	if ( (int_64)($4 == 0) ){ goto $label$1 }
	$7 = ($5 | [1])
	$8 = ($0 + [4])
	$9 = ($0 + [8])
	$10 = (int_64)0
	
.LOOP $label$2:
	$11 = ((CASTING uint_32)(uint_64 $10) << [3])
	CALL $106(($5 + [16]), *((*($2) + $11)))
	$15 = (int_64)3
	$16 = (int_64)1
	$17 = *((*($2) + $11))
	if ( ((int_64)$17 == (int_64)1) ){ goto $label$8 }
	$12 = *($5 + [16])
	$12 = ( *($5 + [20]) ? uint_32($12 >> [1]) : ($12 & [1]) )
	if ( ((int_32)$12 != (int_32)[3]) ){ goto $label$9 }
	$15 = ((int_64)(CASTING uint_64)(uint_32 ((int_64)$17 == (int_64)111)) << (int_64)1)
	$16 = $17
	$11 = *($6)
	if ( $11 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$15 = (int_64)0
	$16 = $17
	if ( ((int_32)$12 < (int_32)[4]) ){ goto $label$8 }
	CALL $102($5, ($5 + [16]), ($12 + [-4]), [4], ($5 + [16]))
	$15 = (int_64)0
	$14 = ($5 + [8])
	$12 = CALL $117(( *($14) ? $7 : (*($5) & [1]) ))
	if ( ((int_32)$12 <= (int_32)[1110]) ){ goto $label$13 }
	if ( ((int_32)$12 != (int_32)[1111]) ){ goto $label$14 }
	$15 = (int_64)6
	if ( (*($5) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$14
	if ( ((int_32)$12 != (int_32)[1122]) ){ goto $label$15 }
	$15 = (int_64)1
	if ( (*($5) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$15
	if ( ((int_32)$12 != (int_32)[1234]) ){ goto $label$12 }
	$15 = (int_64)5
	if ( (*($5) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	if ( ((int_32)$12 != (int_32)[111]) ){ goto $label$16 }
	$15 = (int_64)2
	if ( (*($5) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$16
	if ( ((int_32)$12 != (int_32)[1000]) ){ goto $label$12 }
	$15 = (int_64)4
	
.LABEL $label$12
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($14))
	
.LABEL $label$10
	$16 = *((*($2) + $11))
	
.LABEL $label$8
	$11 = *($6)
	if ( ($11 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$12 = $6
	$17 = *($11 + [16])
	if ( ((int_64)$16 >= (int_64)$17) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$11 = $6
	$12 = $6
	$13 = [3]
	goto $label$3 
	
.LABEL $label$5
	$13 = [11]
	goto $label$3 
	
.LABEL $label$4
	$13 = [2]
	
.LABEL $label$3
	
.LOOP $label$17:
	goto $label$32 
	
.LABEL $label$41
	$12 = $11
	if ( *($12) ){ goto $label$21 }
	$13 = [7]
	goto $label$17 
	
.LABEL $label$40
	*(($14 = CALL _Znwj([32]))) = (int_64)0
	*($14 + [8]) = $11
	*($12) = $14
	*($14 + [24]) = $15
	*($14 + [16]) = $16
	$11 = *(*($0))
	if ( ($11 == 0) ){ goto $label$18 }
	$13 = [8]
	goto $label$17 
	
.LABEL $label$39
	*($0) = $11
	$14 = *($12)
	$13 = [9]
	goto $label$17 
	
.LABEL $label$38
	CALL $45(*($8), $14)
	*($9) = (*($9) + [1])
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$19 }
	$13 = [5]
	goto $label$17 
	
.LABEL $label$37
	CALL _ZdlPv(*((($5 + [16]) + [8])))
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)$4) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$36
	$12 = $11
	$11 = $14
	$17 = *($11 + [16])
	if ( ((int_64)$16 >= (int_64)$17) ){ goto $label$28 }
	$13 = [11]
	goto $label$17 
	
.LABEL $label$35
	$14 = *($11)
	if ( $14 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$34
	if ( ((int_64)$17 >= (int_64)$16) ){ goto $label$23 }
	$13 = [10]
	goto $label$17 
	
.LABEL $label$33
	$12 = ($11 + [4])
	$14 = *($11 + [4])
	if ( ($14 == 0) ){ goto $label$26 }
	$13 = [0]
	goto $label$17 
	
.LABEL $label$32
	$11 = $12
	goto $label$27 
	
.LABEL $label$31
	if ( (*($12) == 0) ){ goto $label$22 }
	$13 = [4]
	goto $label$17 
	
.LABEL $label$30
	if ( (*($5 + [16]) & [1]) ){ goto $label$20 }
	$13 = [6]
	goto $label$17 
	
.LABEL $label$29
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)$4) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$28
	$13 = [2]
	goto $label$17 
	
.LABEL $label$27
	$13 = [1]
	goto $label$17 
	
.LABEL $label$26
	$13 = [3]
	goto $label$17 
	
.LABEL $label$25
	$13 = [12]
	goto $label$17 
	
.LABEL $label$24
	$13 = [1]
	goto $label$17 
	
.LABEL $label$23
	$13 = [3]
	goto $label$17 
	
.LABEL $label$22
	$13 = [7]
	goto $label$17 
	
.LABEL $label$21
	$13 = [4]
	goto $label$17 
	
.LABEL $label$20
	$13 = [5]
	goto $label$17 
	
.LABEL $label$19
	$13 = [6]
	goto $label$17 
	
.LABEL $label$18
	$13 = [9]
	goto $label$17 
	
.LABEL $label$1
	$global$0 = ($5 + [32])
	$13
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $86(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($5 = (($4 + [16]) + [8]))) = *(($3 + [8]))
	*($4 + [16]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [32]) + [8])) = $3
	$2 = *($4 + [16])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [32]) = $2
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*(($0 + [68])) = [0]
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*(($0 + [108])) = [0]
	*($0 + [112]) = $1
	*(($0 + [120])) = $1
	*(($0 + [128])) = (int_64)-1
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = [0]
	*(($0 + [150])) = [0]
	*(($0 + [148])) = [0]
	*($0 + [152]) = $1
	*(($0 + [160])) = $1
	*(($0 + [168])) = (int_64)-1
	*(($0 + [176])) = (int_64)0
	*(($0 + [184])) = [0]
	*(($0 + [188])) = [0]
	$3 = CALL $119([16989])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17390])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [16988]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$6
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)4
	
.LABEL $label$1
	*(($0 + [192])) = $1
	*($4 + [8]) = [18580]
	*($4 + [12]) = CALL $119([18580])
	*($4) = *($4 + [8])
	CALL $85(($0 + [200]), $4)
	$global$0 = ($4 + [48])
	return $0
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $112([8], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $117 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [7] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $114($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $114($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $114($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $114($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18752]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $114($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $114($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $114($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $120([8216])
	$3 = *([0] + [8224])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8232]
	*([0] + [8224]) = [8232]
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $127([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8224])
	*([0] + [8224]) = $3
	*([0] + [8228]) = [0]
	
.LABEL $label$2
	*([0] + [8228]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $121([8216])
	return [0]
	
.LABEL $label$1
	CALL $121([8216])
	return [-1]
}

int_64 .FUNC $111 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	float_64 $5
	$1 = ($global$0 - [16])
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ( !(float_64)$0 ? $0 : ((int_64)$2 < (int_64)0) )
	if ( ((uint_32)$3 > (uint_32)[1021]) ){ goto $label$2 }
	*($1 + [8]) = ((float_64)$4 + (float_64)(float_64)4503599627370496)
	return ((float_64)$0 * (float_64)(float_64)0)
	
.LABEL $label$2
	$5 = (float_64)
	if ( ((int_32)((float_64)$5(((float_64)((float_64)$4 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) - $4)) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$4 }
	$0 = ((float_64)((float_64)$4 + (float_64)$5) + (float_64)(float_64)-1)
	goto $label$3 
	
.LABEL $label$4
	$0 = ((float_64)$4 + (float_64)$5)
	if ( ((int_32)((float_64)$5 <= (float_64)(float_64)-0.5) ^ (int_32)[1]) ){ goto $label$3 }
	$0 = ((float_64)$0 + (float_64)(float_64)1)
	
.LABEL $label$3
	$0 = ( !(float_64)$0 ? $0 : ((int_64)$2 < (int_64)0) )
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$6 = ($global$0 - [48])
	$global$0 = $6
	$7 = CALL tapos_block_prefix()
	$8 = CALL tapos_block_num()
	$9 = ((int_64)((int_64))(((int_64)$3 + (int_64)$2) - CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$8 * (int_32)$7))) + (int_64)*($1)
	*($6 + [40]) = $9)
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)*($4 + [4])) ){ goto $label$1 }
	$11 = ($1 + [32])
	$12 = ($1 + [60])
	$13 = ($1 + [56])
	$14 = ($1 + [40])
	$15 = ($4 + [4])
	$16 = [1]
	
.LOOP $label$2:
	$3 = *($10)
	$7 = *($12)
	$17 = *($13)
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$8:
	$4 = ($7 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8) == (int_64)$3) ){ goto $label$7 }
	$7 = $4
	if ( ((int_32)$17 != (int_32)$4) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$11), [18131])
	if ( $8 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = CALL db_find_i64(*($11), *($14), (int_64)-2187881461846114304, $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $3($11, $4)
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$11), [18131])
	
.LABEL $label$5
	$2 = *($8 + [8])
	goto $label$3 
	
.LABEL $label$4
	$2 = (int_64)0
	
.LABEL $label$3
	$9 = ((int_64)( (int_64))($2 - $3) ? (int_64))($3 - $2) : ($16 & [1]) 
	*($6 + [40]) = $9 + (int_64)$9))
	$16 = ($16 + [1])
	$10 = ($10 + [64])
	if ( ((int_32)$10 != (int_32)*($15)) ){ goto $label$2 }
	
.LABEL $label$1
	CALL sha256(($6 + [40]), [4], $6)
	*($0 + [8]) = [0]
	*($0) = [0]
	$7 = CALL _Znwj([256])
	*($0) = $7
	$4 = ($7 + [256])
	*($0 + [8]) = $4
	*($7) = *($6)
	*($7 + [8]) = *($6 + [1])
	*($7 + [16]) = *($6 + [2])
	*($7 + [24]) = *($6 + [3])
	*($7 + [32]) = *($6 + [4])
	*($7 + [40]) = *($6 + [5])
	*($7 + [48]) = *($6 + [6])
	*($7 + [56]) = *($6 + [7])
	*($7 + [64]) = *($6 + [8])
	*($7 + [72]) = *($6 + [9])
	*($7 + [80]) = *($6 + [10])
	*($7 + [88]) = *($6 + [11])
	*($7 + [96]) = *($6 + [12])
	*($7 + [104]) = *($6 + [13])
	*($7 + [112]) = *($6 + [14])
	*($7 + [120]) = *($6 + [15])
	*($7 + [128]) = *($6 + [16])
	*($7 + [136]) = *($6 + [17])
	*($7 + [144]) = *($6 + [18])
	*($7 + [152]) = *($6 + [19])
	*($7 + [160]) = *($6 + [20])
	*($7 + [168]) = *($6 + [21])
	*($7 + [176]) = *($6 + [22])
	*($7 + [184]) = *($6 + [23])
	*($7 + [192]) = *($6 + [24])
	*($7 + [200]) = *($6 + [25])
	*($7 + [208]) = *($6 + [26])
	*($7 + [216]) = *($6 + [27])
	*($7 + [224]) = *($6 + [28])
	*($7 + [232]) = *($6 + [29])
	*($7 + [240]) = *($6 + [30])
	*($7 + [248]) = *($6 + [31])
	*($0 + [4]) = $4
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$9 }
	$4 = ($8 + [-256])
	
.LOOP $label$10:
	*(($8 = ($4 + [256]))) = ((uint_64)*($8) % (uint_64)$5)
	$4 = ($4 + [8])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$9
	CALL $27($1, $0)
	$global$0 = ($6 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $55 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $124($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [296]))) = (int_64)0
	*(($8 = ($4 + [288]))) = (int_64)0
	*(($9 = (($4 + [256]) + [24]))) = (int_64)0
	*(($10 = ($4 + [328]))) = (int_64)0
	*(($11 = ($4 + [320]))) = (int_64)0
	*(($12 = ($4 + [312]))) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [244]) = $2
	*($4 + [240]) = $2
	*($4 + [248]) = ($2 + $7)
	*($4 + [432]) = ($4 + [240])
	*($4 + [32]) = ($4 + [256])
	CALL $61(($4 + [32]), ($4 + [432]))
	$13 = *($4 + [248])
	*((($4 + [16]) + [8])) = $13
	*(($4 + [8])) = $13
	$14 = *($4 + [240])
	*($4) = $14
	*($4 + [16]) = $14
	$13 = CALL $57(($4 + [32]), $0, $1, $4)
	*(($15 = (($4 + [368]) + [16]))) = *($8)
	*(($8 = (($4 + [368]) + [24]))) = *($3)
	*(($3 = (($4 + [336]) + [16]))) = *($11)
	*(($11 = (($4 + [336]) + [24]))) = *($10)
	*($4 + [368]) = *($4 + [272])
	*($4 + [376]) = *($9)
	*($4 + [336]) = *($4 + [304])
	*($4 + [344]) = *($12)
	$0 = *($4 + [264])
	$1 = *($4 + [256])
	*((($4 + [432]) + [24])) = *($11)
	*((($4 + [432]) + [16])) = *($3)
	*((($4 + [400]) + [16])) = *($15)
	*((($4 + [400]) + [24])) = *($8)
	*($4 + [440]) = *($4 + [344])
	*($4 + [432]) = *($4 + [336])
	*($4 + [400]) = *($4 + [368])
	*($4 + [408]) = *($4 + [376])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [400])), (int_32 ($4 + [432])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	CALL $59($13)
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $107 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $106 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $104(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $116(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [17249], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $104(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $104(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18182])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $124($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([240])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [44 align=4]) = (int_64)0
	*($5 + [52]) = [0]
	*($5 + [200]) = (int_64)0
	*($5 + [216]) = $0
	CALL $79(($3 + [32]), $5)
	*($5 + [220]) = $1
	*($5 + [224 align=4]) = (int_64)-1
	*($5 + [232]) = [-1]
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $65(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [120]) = $3
	*($4 + [128]) = $1
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$9($1), [17079])
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$5), [18131])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)-2187881461846114304, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $3($5, $8)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$5), [18131])
	
.LABEL $label$1
	$5 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [17079])
	$10 = ($0 + [112])
	$7 = *(($0 + [140]))
	$6 = *(($0 + [136]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$8:
	$8 = ($7 + [-24])
	$11 = *($8)
	if ( ((int_64)*($11) == (int_64)$3) ){ goto $label$7 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($11 + [216]) == (int_32)$10), [18131])
	$5 = $11
	goto $label$5 
	
.LABEL $label$6
	$8 = CALL db_find_i64(*($10), *(($0 + [120])), (int_64)7035937633859534848, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $21($10, $8)
	CALL eosio_assert(((int_32)*($5 + [216]) == (int_32)$10), [18131])
	
.LABEL $label$5
	$7 = [0]
	$11 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($11, [17216])
	$1 = *($9 + [8])
	*(($4 + [112])) = *(($5 + [32]))
	*($4 + [104]) = *($5 + [24])
	*($4 + [96]) = [0]
	*($4 + [88]) = (int_64)0
	$8 = [0]
	$9 = [0]
	$6 = (*(($5 + [48])) - *($5 + [44]))
	if ( ($6 == 0) ){ goto $label$11 }
	$9 = int_32($6 >> [6])
	if ( ((uint_32)$9 >= (uint_32)[67108864]) ){ goto $label$10 }
	$8 = CALL _Znwj($6)
	*(($4 + [96])) = ($8 + ($9 << [6]))
	*($4 + [88]) = $8
	*($4 + [92]) = $8
	$6 = *(($5 + [44]))
	$9 = (*(($5 + [48])) - $6)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($8, $6, $9)
	$9 = ($8 + $9)
	*($4 + [92]) = $9
	goto $label$11 
	
.LABEL $label$12
	$9 = $8
	
.LABEL $label$11
	$3 = *($5 + [192])
	CALL eosio_assert(((uint_64)*($5 + [40]) > (uint_64)(CASTING uint_64)(uint_32 int_32(($9 - $8) >> [6]))), [17236])
	CALL eosio_assert((int_64)($3 == 0), [17254])
	CALL eosio_assert(((int_64)*($4 + [104]) <= (int_64)$1), [17143])
	$6 = ($0 + [152])
	*($4 + [80]) = $6
	CALL $9(($4 + [16]), ($4 + [80]), ($4 + [128]))
	$8 = *($4 + [20])
	if ( ($8 == 0) ){ goto $label$13 }
	$7 = ( $8 ? [0] : ((int_64)*($4 + [128]) == (int_64)*($8 + [16])) )
	
.LABEL $label$13
	CALL eosio_assert(($7 == 0), [17161])
	$8 = *($4 + [88])
	$7 = ((int_32)*($4 + [92]) == (int_32)$8)
	if ( $7 ){ goto $label$14 }
	if ( $7 ){ goto $label$14 }
	
.LOOP $label$15:
	CALL eosio_assert(((int_64)*($4 + [128]) != (int_64)*($8)), [17268])
	$8 = ($8 + [64])
	if ( ((int_32)$8 != (int_32)*($4 + [92])) ){ goto $label$15 }
	
.LABEL $label$14
	*($4 + [16]) = *($4 + [128])
	$8 = CALL $119([16989])
	if ( ($8 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [17390])
	goto $label$17 
	
.LABEL $label$18
	if ( ($8 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$1 = (int_64)0
	
.LOOP $label$19:
	$7 = *(($8 + [16988]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$20
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$19 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$9 
	
.LABEL $label$16
	$1 = (int_64)4
	goto $label$9 
	
.LABEL $label$10
	CALL $107(($4 + [88]))
	
.LABEL $label$9
	*(($4 + [32])) = $1
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [17545])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$1 = $3
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$1 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$25 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$7 = [0]
	
.LABEL $label$21
	CALL eosio_assert($7, [17594])
	$8 = CALL $119([17282])
	if ( ($8 <= [8]) ){ goto $label$29 }
	CALL eosio_assert([0], [17390])
	goto $label$28 
	
.LABEL $label$29
	if ( ($8 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$1 = (int_64)0
	
.LOOP $label$30:
	$7 = *(($8 + [17281]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$31 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$31
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$30 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$26 
	
.LABEL $label$27
	$1 = (int_64)4
	
.LABEL $label$26
	*(($4 + [48])) = $1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert([1], [17545])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$1 = $3
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$1 = $3
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$36 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$7 = [0]
	
.LABEL $label$32
	CALL eosio_assert($7, [17594])
	$8 = CALL $119([16989])
	if ( ($8 <= [8]) ){ goto $label$40 }
	CALL eosio_assert([0], [17390])
	goto $label$39 
	
.LABEL $label$40
	if ( ($8 == 0) ){ goto $label$38 }
	
.LABEL $label$39
	$1 = (int_64)0
	
.LOOP $label$41:
	$7 = *(($8 + [16988]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$42 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$42
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$41 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$37 
	
.LABEL $label$38
	$1 = (int_64)4
	
.LABEL $label$37
	*(($4 + [64])) = $1
	*($4 + [56]) = (int_64)0
	CALL eosio_assert([1], [17545])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$45:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$44 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$46 }
	$1 = $3
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$46
	$1 = $3
	
.LOOP $label$47:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$44 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$47 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	$7 = [0]
	
.LABEL $label$43
	CALL eosio_assert($7, [17594])
	*($4 + [72]) = [0]
	*($4 + [76]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$8 = *($4 + [92])
	if ( ((int_32)$8 == (int_32)*((($4 + [88]) + [8]))) ){ goto $label$49 }
	*($8) = *($4 + [16])
	*(($8 + [56])) = *((($4 + [16]) + [56]))
	*(($8 + [48])) = *((($4 + [16]) + [48]))
	*(($8 + [40])) = *((($4 + [16]) + [40]))
	*(($8 + [32])) = *((($4 + [16]) + [32]))
	*(($8 + [24])) = *((($4 + [16]) + [24]))
	*(($8 + [16])) = *((($4 + [16]) + [16]))
	*(($8 + [8])) = *((($4 + [16]) + [8]))
	*($4 + [92]) = ($8 + [64])
	goto $label$48 
	
.LABEL $label$49
	CALL $22(($4 + [88]), ($4 + [16]))
	
.LABEL $label$48
	$1 = *($0)
	*($4) = $0
	*($4 + [4]) = ($4 + [120])
	*($4 + [8]) = ($4 + [128])
	*($4 + [12]) = ($4 + [104])
	*($4 + [168]) = $1
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL $fimport$4()), [17494])
	*($4 + [144]) = $6
	*($4 + [148]) = $4
	*($4 + [152]) = ($4 + [168])
	*(($8 = CALL _Znwj([64])) + [32]) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = $6
	CALL $23(($4 + [144]), $8)
	*($4 + [160]) = $8
	$1 = *($8)
	*($4 + [144]) = $1
	$9 = *($8 + [52])
	*($4 + [140]) = $9
	$6 = ($0 + [180])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [184]))) ){ goto $label$52 }
	*($7 + [8]) = $1
	*($7 + [16]) = $9
	*($4 + [160]) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	$8 = *($4 + [160])
	*($4 + [160]) = [0]
	if ( $8 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	CALL $24(($0 + [176]), ($4 + [160]), ($4 + [144]), ($4 + [140]))
	$8 = *($4 + [160])
	*($4 + [160]) = [0]
	if ( ($8 == 0) ){ goto $label$50 }
	
.LABEL $label$51
	CALL _ZdlPv($8)
	
.LABEL $label$50
	*($4) = ($4 + [88])
	CALL eosio_assert($11, [17940])
	CALL $25($10, $5, $4)
	$8 = *($4 + [88])
	if ( ($8 == 0) ){ goto $label$53 }
	*($4 + [92]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$53
	$global$0 = ($4 + [176])
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [168])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [152])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [160])), (int_64)7335373859207147520, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $73($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $83(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [168])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18426])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$11 = *(*($5 + [12]))
	$5 = CALL $119([16989])
	if ( ($5 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [17390])
	goto $label$5 
	
.LABEL $label$6
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$8 = (int_64)0
	
.LOOP $label$7:
	$6 = *(($5 + [16988]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$8
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$12 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$4
	$12 = (int_64)4
	
.LABEL $label$3
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17545])
	$8 = (uint_64)$12 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$13 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$8 = $13
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$8 = $13
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$13 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$6 = [0]
	
.LABEL $label$9
	CALL eosio_assert($6, [17594])
	*(($1 + [40])) = $12
	*($1 + [32]) = $11
	$6 = $2
	$5 = ($6 + [-48])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-4])
	CALL $84(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($4 + [8]), (int_64)7335373859207147520, *(*($0 + [8])), $8, $5, [44])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$14 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$5 = ($4 + [8])
	$8 = *($5)
	$6 = *(($0 + [8]))
	$13 = *($6)
	$11 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [56]) = CALL db_idx64_store($8, (int_64)7335373859207147520, $13, $11, ($3 + [24]))
	$8 = *($6)
	$13 = *($5)
	$11 = *($1)
	*($3 + [24]) = *(($1 + [16]))
	*(($1 + [60])) = CALL db_idx64_store($13, (int_64)7335373859207147521, $8, $11, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [6])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[67108864]) ){ goto $label$3 }
	$6 = [67108863]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [6]) > (uint_32)[33554430]) ){ goto $label$5 }
	$6 = int_32($7 >> [5])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [6]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [6])))) = *($1)
	*(($4 + [56])) = *(($1 + [56]))
	*(($4 + [48])) = *(($1 + [48]))
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [6]))
	$4 = ($4 + [64])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [216]) == (int_32)$0), [17975])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18021])
	*(($4 = $3) + [24]) = *(($1 + [8]))
	*($4 + [32]) = *(($1 + [192]))
	*($4 + [40]) = *(($1 + [208]))
	$5 = *($1)
	$6 = $5
	$2 = *($2)
	$7 = ($1 + [44])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	CALL $66($7, *($2), *($2 + [4]))
	$6 = *($1)
	
.LABEL $label$1
	$8 = ($4 + [40])
	$9 = (($4 + [24]) + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18072])
	$10 = *($1 + [44])
	$7 = *(($1 + [48]))
	$11 = ($7 - $10)
	$6 = (CASTING uint_64)(uint_32 int_32($11 >> [6]))
	$2 = [41]
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$3 }
	$2 = (($11 & [-64]) + $2)
	
.LABEL $label$3
	$7 = ($2 + [152])
	if ( ($7 <= [513]) ){ goto $label$5 }
	$2 = CALL $124($7)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $7)
	CALL $67(($4 + [8]), $1)
	CALL db_update_i64(*(($1 + [220])), (int_64)0, $2, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $128($2)
	
.LABEL $label$6
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($4 + [56]) = *(($1 + [8]))
	if ( (CALL $118(($4 + [24]), ($4 + [56]), [8]) == 0) ){ goto $label$8 }
	$2 = *($1 + [224])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$9 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($4 + [48]), $5)
	*(($1 + [224])) = $2
	
.LABEL $label$9
	CALL db_idx64_update($2, (int_64)0, ($4 + [56]))
	
.LABEL $label$8
	*($4 + [56]) = *(($1 + [192]))
	if ( (CALL $118($9, ($4 + [56]), [8]) == 0) ){ goto $label$10 }
	$7 = ($1 + [228])
	$2 = *($7)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$11 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534849, ($4 + [48]), $5)
	*($7) = $2
	
.LABEL $label$11
	CALL db_idx64_update($2, (int_64)0, ($4 + [56]))
	
.LABEL $label$10
	*($4 + [56]) = *(($1 + [208]))
	if ( (CALL $118($8, ($4 + [56]), [8]) == 0) ){ goto $label$12 }
	$1 = ($1 + [232])
	$2 = *($1)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$13 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534850, ($4 + [48]), $5)
	*($1) = $2
	
.LABEL $label$13
	CALL db_idx64_update($2, (int_64)0, ($4 + [56]))
	
.LABEL $label$12
	$global$0 = ($4 + [64])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [4 align=4]) = (int_64)0
	$3 = ($2 | [4])
	*($2) = $3
	$4 = [0]
	$6 = *($1)
	$5 = *($1 + [4])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	$7 = ($2 + [8])
	$8 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($4 == 0) ){ goto $label$7 }
	$9 = *($6)
	$1 = $4
	
.LOOP $label$8:
	$10 = *($1 + [16])
	if ( (uint_64)($9 <= $10) ){ goto $label$9 }
	if ( ((uint_64)$10 >= (uint_64)$9) ){ goto $label$6 }
	$1 = ($1 + [4])
	
.LABEL $label$9
	$1 = *($1)
	if ( $1 ){ goto $label$8 }
	$1 = $3
	$10 = *($4 + [16])
	if ( ((uint_64)$9 >= (uint_64)$10) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$7
	$4 = $3
	$1 = $3
	$12 = [3]
	goto $label$3 
	
.LABEL $label$6
	$11 = ($6 + [8])
	$1 = ($5 - $11)
	$4 = int_32($1 >> [3])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove($6, $11, $1)
	
.LABEL $label$10
	$5 = ($6 + ($4 << [3]))
	*($8) = $5
	$4 = *($2 + [4])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$12 = [9]
	goto $label$3 
	
.LABEL $label$4
	$12 = [2]
	
.LABEL $label$3
	
.LOOP $label$11:
	goto $label$27 
	
.LABEL $label$31
	$1 = $4
	$4 = $11
	$10 = *($4 + [16])
	if ( ((uint_64)$9 >= (uint_64)$10) ){ goto $label$20 }
	$12 = [9]
	goto $label$11 
	
.LABEL $label$30
	$11 = *($4)
	if ( $11 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$29
	if ( ((uint_64)$10 >= (uint_64)$9) ){ goto $label$15 }
	$12 = [8]
	goto $label$11 
	
.LABEL $label$28
	$1 = ($4 + [4])
	$11 = *($4 + [4])
	if ( ($11 == 0) ){ goto $label$18 }
	$12 = [0]
	goto $label$11 
	
.LABEL $label$27
	$4 = $1
	goto $label$19 
	
.LABEL $label$26
	if ( *($1) ){ goto $label$14 }
	$12 = [5]
	goto $label$11 
	
.LABEL $label$25
	*(($11 = CALL _Znwj([24]))) = (int_64)0
	*($11 + [8]) = $4
	*($1) = $11
	*($11 + [16]) = *($6)
	$4 = *(*($2))
	if ( ($4 == 0) ){ goto $label$12 }
	$12 = [6]
	goto $label$11 
	
.LABEL $label$24
	*($2) = $4
	$11 = *($1)
	$12 = [7]
	goto $label$11 
	
.LABEL $label$23
	CALL $45(*($2 + [4]), $11)
	*($7) = (*($7) + [1])
	$4 = *($2 + [4])
	$6 = ($6 + [8])
	$5 = *($8)
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$22
	$1 = $4
	if ( (*($1) == 0) ){ goto $label$13 }
	$12 = [4]
	goto $label$11 
	
.LABEL $label$21
	$4 = *($2 + [4])
	$6 = ($6 + [8])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$20
	$12 = [2]
	goto $label$11 
	
.LABEL $label$19
	$12 = [1]
	goto $label$11 
	
.LABEL $label$18
	$12 = [3]
	goto $label$11 
	
.LABEL $label$17
	$12 = [10]
	goto $label$11 
	
.LABEL $label$16
	$12 = [1]
	goto $label$11 
	
.LABEL $label$15
	$12 = [3]
	goto $label$11 
	
.LABEL $label$14
	$12 = [4]
	goto $label$11 
	
.LABEL $label$13
	$12 = [5]
	goto $label$11 
	
.LABEL $label$12
	$12 = [7]
	goto $label$11 
	
.LABEL $label$1
	CALL $70($2, $4)
	$global$0 = ($2 + [16])
	$12
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_64 $32
	int_32 $33
	int_64 $34
	float_64 $35
	int_64 $36
	int_64 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_32 $51
	int_32 $52
	$5 = ($global$0 - [976])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = ($0 + [112])
	$8 = *(($0 + [140]))
	$7 = *(($0 + [136]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [216]) == (int_32)$6), [18131])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [120])), (int_64)7035937633859534848, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $21($6, $9)
	CALL eosio_assert(((int_32)*($10 + [216]) == (int_32)$6), [18131])
	
.LABEL $label$1
	$8 = [0]
	$11 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($11, [17216])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)$1), [17286])
	CALL eosio_assert(((int_64)*($10) == (int_64)$2), [17216])
	$12 = *(($10 + [32]))
	$13 = *($10 + [24])
	*($5 + [952]) = [0]
	*($5 + [944]) = (int_64)0
	$9 = [0]
	$7 = [0]
	$14 = (*(($10 + [48])) - *($10 + [44]))
	if ( ($14 == 0) ){ goto $label$9 }
	$7 = int_32($14 >> [6])
	if ( ((uint_32)$7 >= (uint_32)[67108864]) ){ goto $label$8 }
	$9 = CALL _Znwj($14)
	*(($5 + [952])) = ($9 + ($7 << [6]))
	*($5 + [944]) = $9
	*($5 + [948]) = $9
	$14 = *(($10 + [44]))
	$7 = (*(($10 + [48])) - $14)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($9, $14, $7)
	$7 = ($9 + $7)
	*($5 + [948]) = $7
	goto $label$9 
	
.LABEL $label$10
	$7 = $9
	
.LABEL $label$9
	$15 = *($10 + [40])
	$16 = *($10 + [192])
	*((($5 + [880]) + [56])) = *(($10 + [120]))
	*((($5 + [880]) + [48])) = *(($10 + [112]))
	*((($5 + [880]) + [40])) = *(($10 + [104]))
	*((($5 + [880]) + [32])) = *(($10 + [96]))
	*(($14 = (($5 + [880]) + [24]))) = *(($10 + [88]))
	*(($17 = (($5 + [880]) + [16]))) = *(($10 + [80]))
	*($5 + [888]) = *(($10 + [72]))
	*($5 + [880]) = *($10 + [64])
	CALL eosio_assert((int_64)($16 == 0), [17254])
	CALL eosio_assert(((int_32)$15 == (int_32)int_32(($7 - $9) >> [6])), [17306])
	CALL sha256($3, [32], ($5 + [848]))
	*(($9 = (($5 + [784]) + [24]))) = *(($3 + [24]))
	*(($7 = (($5 + [784]) + [16]))) = *(($3 + [16]))
	*((($5 + [784]) + [40])) = *($5 + [856])
	*((($5 + [784]) + [48])) = *((($5 + [848]) + [16]))
	*((($5 + [784]) + [56])) = *((($5 + [848]) + [24]))
	*($5 + [792]) = *(($3 + [8]))
	*($5 + [784]) = *($3)
	*($5 + [816]) = *($5 + [848])
	*(($3 = (($5 + [720]) + [24]))) = *($14)
	*(($14 = (($5 + [720]) + [16]))) = *($17)
	*(($17 = (($5 + [720]) + [40]))) = *($5 + [792])
	*(($18 = (($5 + [720]) + [48]))) = *($7)
	*(($7 = (($5 + [720]) + [56]))) = *($9)
	*($5 + [728]) = *($5 + [888])
	*($5 + [720]) = *($5 + [880])
	*($5 + [752]) = *($5 + [784])
	*(($9 = (($5 + [640]) + [56]))) = *($7)
	*(($7 = (($5 + [640]) + [48]))) = *($18)
	*(($18 = (($5 + [640]) + [40]))) = *($17)
	*(($17 = (($5 + [640]) + [32]))) = *($5 + [752])
	*(($19 = (($5 + [640]) + [24]))) = *($3)
	*(($3 = (($5 + [640]) + [16]))) = *($14)
	*($5 + [648]) = *($5 + [728])
	*($5 + [640]) = *($5 + [720])
	*((($5 + [80]) + [56])) = *($9)
	*((($5 + [80]) + [48])) = *($7)
	*((($5 + [80]) + [40])) = *($18)
	*((($5 + [80]) + [32])) = *($17)
	*((($5 + [80]) + [24])) = *($19)
	*((($5 + [80]) + [16])) = *($3)
	*($5 + [88]) = *($5 + [648])
	*($5 + [80]) = *($5 + [640])
	CALL sha256(($5 + [80]), [64], ($5 + [304]))
	*(($9 = CALL _Znwj([256]))) = *($5 + [304])
	*($9 + [8]) = *($5 + [305])
	*($9 + [16]) = *($5 + [306])
	*($9 + [24]) = *($5 + [307])
	*($9 + [32]) = *($5 + [308])
	*($9 + [40]) = *($5 + [309])
	*($9 + [48]) = *($5 + [310])
	*($9 + [56]) = *($5 + [311])
	*($5 + [704]) = $9
	$7 = ($9 + [256])
	*($5 + [712]) = $7
	*($9 + [64]) = *($5 + [312])
	*($9 + [72]) = *($5 + [313])
	*($9 + [80]) = *($5 + [314])
	*($9 + [88]) = *($5 + [315])
	*($9 + [96]) = *($5 + [316])
	*($9 + [104]) = *($5 + [317])
	*($9 + [112]) = *($5 + [318])
	*($9 + [120]) = *($5 + [319])
	*($9 + [128]) = *($5 + [320])
	*($9 + [136]) = *($5 + [321])
	*($9 + [144]) = *($5 + [322])
	*($9 + [152]) = *($5 + [323])
	*($9 + [160]) = *($5 + [324])
	*($9 + [168]) = *($5 + [325])
	*($9 + [176]) = *($5 + [326])
	*($9 + [184]) = *($5 + [327])
	*($9 + [192]) = *($5 + [328])
	*($9 + [200]) = *($5 + [329])
	*($9 + [208]) = *($5 + [330])
	*($9 + [216]) = *($5 + [331])
	*($9 + [224]) = *($5 + [332])
	*($9 + [232]) = *($5 + [333])
	*($9 + [240]) = *($5 + [334])
	*($9 + [248]) = *($5 + [335])
	*($5 + [708]) = $7
	CALL $27($0, ($5 + [704]))
	$21 = (CASTING uint_64)(uint_32 int_32((*($5 + [708]) - *($5 + [704])) >> [3]))
	$20 = (CASTING uint_64)(uint_32 $15)
	CALL eosio_assert(((uint_64)$20 <= (uint_64)$21), [17323])
	*($5 + [632]) = [0]
	*($5 + [624]) = (int_64)0
	*($5 + [616]) = [0]
	*($5 + [608]) = (int_64)0
	*($5 + [600]) = [0]
	*($5 + [592]) = (int_64)0
	$17 = (($5 + [576]) | [4])
	*($5 + [576]) = $17
	*($5 + [580 align=4]) = (int_64)0
	$18 = (($5 + [560]) | [4])
	*($5 + [560]) = $18
	*($5 + [564 align=4]) = (int_64)0
	*($5 + [88]) = [0]
	*($5 + [80]) = (int_64)0
	$9 = [0]
	$22 = [0]
	if ( ($15 == 0) ){ goto $label$6 }
	$23 = ((int_64)$20 + (int_64)-1)
	$16 = (int_64)0
	$9 = [0]
	*($5 + [304]) = (int_64)0
	if ( ([0] <= [0]) ){ goto $label$7 }
	$24 = [0]
	goto $label$5 
	
.LABEL $label$8
	CALL $107(($5 + [944]))
	
.LABEL $label$7
	$24 = [2]
	goto $label$5 
	
.LABEL $label$6
	$24 = [4]
	
.LABEL $label$5
	
.LOOP $label$11:
	goto $label$345 
	
.LABEL $label$345
	CALL $28(($5 + [80]), ($5 + [304]))
	if ( ((int_64)$23 == (int_64)$16) ){ goto $label$157 }
	$24 = [1]
	goto $label$11 
	
.LABEL $label$344
	$8 = *((($5 + [80]) + [8]))
	$9 = *($5 + [84])
	$16 = ((int_64)$16 + (int_64)1)
	*($5 + [304]) = $16
	if ( ((uint_32)$9 >= (uint_32)$8) ){ goto $label$158 }
	$24 = [2]
	goto $label$11 
	
.LABEL $label$343
	*($9) = $16
	*($5 + [84]) = ($9 + [8])
	if ( ((int_64)$23 != (int_64)$16) ){ goto $label$156 }
	$24 = [3]
	goto $label$11 
	
.LABEL $label$342
	$8 = *(($5 + [88]))
	$9 = *($5 + [84])
	$22 = *($5 + [80])
	$24 = [4]
	goto $label$11 
	
.LABEL $label$341
	*((($5 + [624]) + [8])) = $8
	*($5 + [628]) = $9
	*($5 + [624]) = $22
	*($5 + [552]) = [0]
	*($5 + [544]) = (int_64)0
	$9 = (*($5 + [948]) - *($5 + [944]))
	if ( ($9 == 0) ){ goto $label$155 }
	$24 = [5]
	goto $label$11 
	
.LABEL $label$340
	$8 = int_32($9 >> [6])
	if ( ((uint_32)$8 >= (uint_32)[67108864]) ){ goto $label$154 }
	$24 = [6]
	goto $label$11 
	
.LABEL $label$339
	$9 = CALL _Znwj($9)
	*(($5 + [552])) = ($9 + ($8 << [6]))
	*($5 + [544]) = $9
	*($5 + [548]) = $9
	$7 = *($5 + [944])
	$8 = (*($5 + [948]) - $7)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$153 }
	$24 = [185]
	goto $label$11 
	
.LABEL $label$338
	CALL memcpy($9, $7, $8)
	*($5 + [548]) = (*($5 + [548]) + $8)
	$24 = [7]
	goto $label$11 
	
.LABEL $label$337
	CALL $29(($5 + [80]), $0, $1, $2, ($5 + [544]), $21)
	*(($5 + [616])) = *($5 + [88])
	$25 = *($5 + [80])
	*($5 + [608]) = $25
	$8 = *($5 + [84])
	*($5 + [612]) = $8
	*($5 + [88]) = [0]
	*($5 + [80]) = (int_64)0
	$9 = *($5 + [544])
	if ( ($9 == 0) ){ goto $label$152 }
	$24 = [8]
	goto $label$11 
	
.LABEL $label$336
	*($5 + [548]) = $9
	CALL _ZdlPv($9)
	$24 = [9]
	goto $label$11 
	
.LABEL $label$335
	$9 = ( ($5 + [608]) ? ($5 + [624]) : ((uint_32)int_32(($8 - $25) >> [3]) > (uint_32)$15) )
	CALL $30(($5 + [592]), *($9), *($9 + [4]))
	*($5 + [536]) = [0]
	*($5 + [528]) = (int_64)0
	$9 = (*($5 + [596]) - *($5 + [592]))
	if ( ($9 == 0) ){ goto $label$151 }
	$24 = [10]
	goto $label$11 
	
.LABEL $label$334
	$8 = int_32($9 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$150 }
	$24 = [11]
	goto $label$11 
	
.LABEL $label$333
	$9 = CALL _Znwj($9)
	*(($5 + [536])) = ($9 + ($8 << [3]))
	*($5 + [528]) = $9
	*($5 + [532]) = $9
	$7 = *($5 + [592])
	$8 = (*($5 + [596]) - $7)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$149 }
	$24 = [183]
	goto $label$11 
	
.LABEL $label$332
	CALL memcpy($9, $7, $8)
	*($5 + [532]) = (*($5 + [532]) + $8)
	$24 = [12]
	goto $label$11 
	
.LABEL $label$331
	*($5 + [520]) = [0]
	*($5 + [512]) = (int_64)0
	$9 = (*($5 + [708]) - *($5 + [704]))
	if ( ($9 == 0) ){ goto $label$148 }
	$24 = [13]
	goto $label$11 
	
.LABEL $label$330
	$8 = int_32($9 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$147 }
	$24 = [14]
	goto $label$11 
	
.LABEL $label$329
	$9 = CALL _Znwj($9)
	*(($5 + [520])) = ($9 + ($8 << [3]))
	*($5 + [512]) = $9
	*($5 + [516]) = $9
	$7 = *($5 + [704])
	$8 = (*($5 + [708]) - $7)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$146 }
	$24 = [181]
	goto $label$11 
	
.LABEL $label$328
	CALL memcpy($9, $7, $8)
	*($5 + [516]) = (*($5 + [516]) + $8)
	$24 = [15]
	goto $label$11 
	
.LABEL $label$327
	*(($5 + [72])) = $12
	*($5 + [504]) = $12
	*($5 + [64]) = $13
	*($5 + [496]) = $13
	CALL $31(($5 + [80]), $0, ($5 + [528]), ($5 + [512]), $20, ($5 + [64]))
	*($5 + [88]) = [0]
	$7 = *($5 + [84])
	$26 = *($5 + [80])
	*($5 + [80]) = (int_64)0
	$9 = *($5 + [512])
	if ( ($9 == 0) ){ goto $label$145 }
	$24 = [16]
	goto $label$11 
	
.LABEL $label$326
	*($5 + [516]) = $9
	CALL _ZdlPv($9)
	$24 = [17]
	goto $label$11 
	
.LABEL $label$325
	$9 = *($5 + [528])
	if ( ($9 == 0) ){ goto $label$144 }
	$24 = [18]
	goto $label$11 
	
.LABEL $label$324
	*($5 + [532]) = $9
	CALL _ZdlPv($9)
	$24 = [19]
	goto $label$11 
	
.LABEL $label$323
	*($5 + [488]) = [0]
	*($5 + [480]) = (int_64)0
	$9 = ($7 - $26)
	$3 = int_32($9 >> [3])
	if ( ($9 == 0) ){ goto $label$143 }
	$24 = [20]
	goto $label$11 
	
.LABEL $label$322
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$142 }
	$24 = [21]
	goto $label$11 
	
.LABEL $label$321
	$8 = CALL _Znwj($9)
	*(($5 + [488])) = ($8 + ($3 << [3]))
	*($5 + [480]) = $8
	*($5 + [484]) = $8
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$141 }
	$24 = [179]
	goto $label$11 
	
.LABEL $label$320
	CALL memcpy($8, $26, $9)
	*($5 + [484]) = (*($5 + [484]) + $9)
	$24 = [22]
	goto $label$11 
	
.LABEL $label$319
	CALL $32(($5 + [80]), $0, ($5 + [480]))
	CALL $33(($5 + [576]), *($5 + [580]))
	$14 = *($5 + [88])
	*(($5 + [584])) = $14
	*($5 + [576]) = *($5 + [80])
	$8 = *($5 + [84])
	*($5 + [580]) = $8
	if ( ($14 == 0) ){ goto $label$140 }
	$24 = [23]
	goto $label$11 
	
.LABEL $label$318
	*($8 + [8]) = $17
	*($5 + [80]) = (($5 + [80]) | [4])
	*($5 + [84 align=4]) = (int_64)0
	$8 = [0]
	goto $label$139 
	
.LABEL $label$317
	*($5 + [576]) = $17
	$24 = [24]
	goto $label$11 
	
.LABEL $label$316
	CALL $33(($5 + [80]), $8)
	$8 = *($5 + [480])
	if ( ($8 == 0) ){ goto $label$138 }
	$24 = [25]
	goto $label$11 
	
.LABEL $label$315
	*($5 + [484]) = $8
	CALL _ZdlPv($8)
	$24 = [26]
	goto $label$11 
	
.LABEL $label$314
	*($5 + [472]) = [0]
	*($5 + [464]) = (int_64)0
	if ( ($9 == 0) ){ goto $label$137 }
	$24 = [27]
	goto $label$11 
	
.LABEL $label$313
	$8 = CALL _Znwj($9)
	*(($5 + [472])) = ($8 + ($3 << [3]))
	*($5 + [464]) = $8
	*($5 + [468]) = $8
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$136 }
	$24 = [177]
	goto $label$11 
	
.LABEL $label$312
	CALL memcpy($8, $26, $9)
	*($5 + [468]) = (*($5 + [468]) + $9)
	$24 = [28]
	goto $label$11 
	
.LABEL $label$311
	CALL $34(($5 + [80]), $0, ($5 + [464]), $1, $20)
	CALL $33(($5 + [560]), *($5 + [564]))
	$8 = *($5 + [88])
	*(($5 + [568])) = $8
	*($5 + [560]) = *($5 + [80])
	$9 = *($5 + [84])
	*($5 + [564]) = $9
	if ( ($8 == 0) ){ goto $label$135 }
	$24 = [29]
	goto $label$11 
	
.LABEL $label$310
	*($9 + [8]) = $18
	*($5 + [80]) = (($5 + [80]) | [4])
	*($5 + [84 align=4]) = (int_64)0
	$9 = [0]
	goto $label$134 
	
.LABEL $label$309
	*($5 + [560]) = $18
	$24 = [30]
	goto $label$11 
	
.LABEL $label$308
	CALL $33(($5 + [80]), $9)
	$9 = *($5 + [464])
	if ( ($9 == 0) ){ goto $label$133 }
	$24 = [31]
	goto $label$11 
	
.LABEL $label$307
	*($5 + [468]) = $9
	CALL _ZdlPv($9)
	$24 = [32]
	goto $label$11 
	
.LABEL $label$306
	$8 = $26
	if ( ((int_32)$26 == (int_32)$7) ){ goto $label$132 }
	$24 = [33]
	goto $label$11 
	
.LABEL $label$305
	$8 = $26
	$9 = ($26 + [8])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$131 }
	$24 = [34]
	goto $label$11 
	
.LABEL $label$304
	$8 = $26
	$24 = [35]
	goto $label$11 
	
.LABEL $label$303
	$8 = ( $9 ? $8 : ((int_64)*($9) < (int_64)*($8)) )
	$9 = ($9 + [8])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$130 }
	$24 = [36]
	goto $label$11 
	
.LABEL $label$302
	$27 = *($0)
	*($5 + [456]) = [0]
	*($5 + [448]) = (int_64)0
	$14 = *($5 + [944])
	if ( ((int_32)$14 == (int_32)*($5 + [948])) ){ goto $label$129 }
	$24 = [37]
	goto $label$11 
	
.LABEL $label$301
	$28 = (int_64)((int_64)$1 * (int_64)429496729600) >> (int_64)32)
	$29 = (int_64)((int_64)$1 * (int_64)214748364800) >> (int_64)32)
	$30 = (int_64)((int_64)$1 * (int_64)21474836480) >> (int_64)32)
	$31 = int_32(($8 - $26) >> [3])
	$32 = (CASTING uint_64)(uint_32 $31)
	$21 = (int_64)0
	$33 = [0]
	$19 = [0]
	goto $label$128 
	
.LABEL $label$300
	$20 = (int_64)0
	goto $label$89 
	
.LABEL $label$299
	$23 = (int_64)0
	goto $label$77 
	
.LABEL $label$298
	$23 = (int_64)0
	goto $label$65 
	
.LABEL $label$297
	$34 = $29
	$9 = CALL $119([16989])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$296
	$35 = ((float_64)(CASTING float_64)(int_64 $23) * (float_64)(float_64)0.01)
	if ( ((float_64)(float_64)|$35| < (float_64)(float_64)2147483648) ){ goto $label$112 }
	$24 = [163]
	goto $label$11 
	
.LABEL $label$295
	$34 = (CASTING int_64)(int_32 [-2147483648])
	$9 = CALL $119([16989])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$294
	$34 = (int_64)0
	$9 = CALL $119([16989])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$293
	$34 = (CASTING int_64)(int_32 (CASTING int_32)(float_64 $35))
	$9 = CALL $119([16989])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$292
	$34 = (CASTING int_64)(int_32 (CASTING int_32)(float_64 $35))
	$9 = CALL $119([16989])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$108 }
	goto $label$107 
	
.LABEL $label$291
	$34 = (CASTING int_64)(int_32 (CASTING int_32)(float_64 $35))
	$9 = CALL $119([16989])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$290
	$23 = *(($26 + ($19 << [3])))
	$9 = *($5 + [580])
	if ( ($9 == 0) ){ goto $label$126 }
	$24 = [39]
	goto $label$11 
	
.LABEL $label$289
	$8 = $17
	$24 = [40]
	goto $label$11 
	
.LABEL $label$288
	$7 = ((int_64)*($9 + [16]) < (int_64)$23)
	$8 = ( $8 ? $9 : $7 )
	$9 = *(($9 + ($7 << [2])))
	if ( $9 ){ goto $label$125 }
	$24 = [41]
	goto $label$11 
	
.LABEL $label$287
	if ( ((int_32)$8 == (int_32)$17) ){ goto $label$124 }
	$24 = [42]
	goto $label$11 
	
.LABEL $label$286
	if ( ((int_64)$23 >= (int_64)*($8 + [16])) ){ goto $label$123 }
	$24 = [175]
	goto $label$11 
	
.LABEL $label$285
	$8 = $17
	$24 = [43]
	goto $label$11 
	
.LABEL $label$284
	CALL eosio_assert(((int_32)$8 != (int_32)$17), [17336])
	$9 = *($5 + [564])
	if ( ($9 == 0) ){ goto $label$122 }
	$24 = [44]
	goto $label$11 
	
.LABEL $label$283
	$7 = $18
	$24 = [45]
	goto $label$11 
	
.LABEL $label$282
	$3 = ((int_64)*($9 + [16]) < (int_64)$23)
	$7 = ( $7 ? $9 : $3 )
	$9 = *(($9 + ($3 << [2])))
	if ( $9 ){ goto $label$121 }
	$24 = [46]
	goto $label$11 
	
.LABEL $label$281
	if ( ((int_32)$7 == (int_32)$18) ){ goto $label$120 }
	$24 = [47]
	goto $label$11 
	
.LABEL $label$280
	if ( ((int_64)$23 >= (int_64)*($7 + [16])) ){ goto $label$119 }
	$24 = [174]
	goto $label$11 
	
.LABEL $label$279
	$7 = $18
	$24 = [48]
	goto $label$11 
	
.LABEL $label$278
	CALL eosio_assert(((int_32)$7 != (int_32)$18), [17355])
	$36 = *($8 + [24])
	$3 = *($7 + [24])
	$9 = ($3 + [-1])
	if ( ((uint_32)$9 > (uint_32)[5]) ){ goto $label$118 }
	$24 = [49]
	goto $label$11 
	
.LABEL $label$277
	goto $label$346 
	
.LABEL $label$346
	$24 = [172]
	goto $label$11 
	
.LABEL $label$276
	$34 = $30
	$9 = CALL $119([16989])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$275
	$35 = ((float_64)(CASTING float_64)(int_64 $23) * (float_64)(float_64)0.01)
	if ( ((float_64)(float_64)|$35| < (float_64)(float_64)2147483648) ){ goto $label$13 }
	$24 = [166]
	goto $label$11 
	
.LABEL $label$274
	$34 = (CASTING int_64)(int_32 [-2147483648])
	$9 = CALL $119([16989])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$273
	$34 = $28
	$9 = CALL $119([16989])
	if ( ($9 <= [8]) ){ goto $label$111 }
	$24 = [162]
	goto $label$11 
	
.LABEL $label$272
	CALL eosio_assert([0], [17390])
	goto $label$92 
	
.LABEL $label$271
	$35 = ((float_64)(CASTING float_64)(int_64 $23) * (float_64)(float_64)0.01)
	if ( ((float_64)(float_64)|$35| < (float_64)(float_64)2147483648) ){ goto $label$12 }
	$24 = [169]
	goto $label$11 
	
.LABEL $label$270
	$34 = (CASTING int_64)(int_32 [-2147483648])
	$9 = CALL $119([16989])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$106 }
	$24 = [52]
	goto $label$11 
	
.LABEL $label$269
	if ( ($9 == 0) ){ goto $label$93 }
	$24 = [53]
	goto $label$11 
	
.LABEL $label$268
	$16 = (int_64)0
	$24 = [54]
	goto $label$11 
	
.LABEL $label$267
	$8 = *(($9 + [16988]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$90 }
	$24 = [160]
	goto $label$11 
	
.LABEL $label$266
	CALL eosio_assert([0], [17435])
	$24 = [55]
	goto $label$11 
	
.LABEL $label$265
	$16 = ((int_64)((int_64)$16 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$91 }
	$24 = [56]
	goto $label$11 
	
.LABEL $label$264
	$20 = ((int_64)$16 << (int_64)8)
	$24 = [57]
	goto $label$11 
	
.LABEL $label$263
	$36 = ((int_64)$36 * (int_64)50)
	CALL eosio_assert((uint_64)(((int_64)$23 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17545])
	$16 = (uint_64)$20 >> (uint_64)(int_64)8)
	$37 = ((int_64)$20 | (int_64)4)
	$9 = [0]
	$24 = [58]
	goto $label$11 
	
.LABEL $label$262
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$83 }
	$24 = [154]
	goto $label$11 
	
.LABEL $label$261
	$20 = (uint_64)$16 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$16 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$24 = [155]
	goto $label$11 
	
.LABEL $label$260
	$16 = $20
	$8 = [1]
	$7 = $9
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$259
	$16 = $20
	$24 = [157]
	goto $label$11 
	
.LABEL $label$258
	if ( ((int_64)((int_64)$16 & (int_64)65280) != (int_64)0) ){ goto $label$84 }
	$24 = [158]
	goto $label$11 
	
.LABEL $label$257
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$7 = ($9 + [1])
	$9 = $7
	if ( $8 ){ goto $label$14 }
	$24 = [159]
	goto $label$11 
	
.LABEL $label$256
	$8 = [1]
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$255
	$8 = [0]
	$24 = [60]
	goto $label$11 
	
.LABEL $label$254
	CALL eosio_assert($8, [17594])
	*(($14 + [16])) = $37
	*($14 + [8]) = $23
	$9 = CALL $119([17282])
	if ( ($9 <= [8]) ){ goto $label$82 }
	$24 = [153]
	goto $label$11 
	
.LABEL $label$253
	CALL eosio_assert([0], [17390])
	goto $label$80 
	
.LABEL $label$252
	if ( ($9 == 0) ){ goto $label$81 }
	$24 = [62]
	goto $label$11 
	
.LABEL $label$251
	$16 = (int_64)0
	$24 = [63]
	goto $label$11 
	
.LABEL $label$250
	$8 = *(($9 + [17281]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$78 }
	$24 = [151]
	goto $label$11 
	
.LABEL $label$249
	CALL eosio_assert([0], [17435])
	$24 = [64]
	goto $label$11 
	
.LABEL $label$248
	$16 = ((int_64)((int_64)$16 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$79 }
	$24 = [65]
	goto $label$11 
	
.LABEL $label$247
	$23 = ((int_64)$16 << (int_64)8)
	$24 = [66]
	goto $label$11 
	
.LABEL $label$246
	CALL eosio_assert((uint_64)(((int_64)$36 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17545])
	$16 = (uint_64)$23 >> (uint_64)(int_64)8)
	$20 = ((int_64)$23 | (int_64)4)
	$9 = [0]
	$24 = [67]
	goto $label$11 
	
.LABEL $label$245
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$24 = [145]
	goto $label$11 
	
.LABEL $label$244
	$23 = (uint_64)$16 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$16 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$24 = [146]
	goto $label$11 
	
.LABEL $label$243
	$16 = $23
	$8 = [1]
	$7 = $9
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$242
	$16 = $23
	$24 = [148]
	goto $label$11 
	
.LABEL $label$241
	if ( ((int_64)((int_64)$16 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$24 = [149]
	goto $label$11 
	
.LABEL $label$240
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$7 = ($9 + [1])
	$9 = $7
	if ( $8 ){ goto $label$16 }
	$24 = [150]
	goto $label$11 
	
.LABEL $label$239
	$8 = [1]
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$238
	$8 = [0]
	$24 = [69]
	goto $label$11 
	
.LABEL $label$237
	CALL eosio_assert($8, [17594])
	*(($14 + [32])) = $20
	*($14 + [24]) = $36
	$9 = CALL $119([16989])
	if ( ($9 <= [8]) ){ goto $label$70 }
	$24 = [144]
	goto $label$11 
	
.LABEL $label$236
	CALL eosio_assert([0], [17390])
	goto $label$68 
	
.LABEL $label$235
	if ( ($9 == 0) ){ goto $label$69 }
	$24 = [71]
	goto $label$11 
	
.LABEL $label$234
	$16 = (int_64)0
	$24 = [72]
	goto $label$11 
	
.LABEL $label$233
	$8 = *(($9 + [16988]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$66 }
	$24 = [142]
	goto $label$11 
	
.LABEL $label$232
	CALL eosio_assert([0], [17435])
	$24 = [73]
	goto $label$11 
	
.LABEL $label$231
	$16 = ((int_64)((int_64)$16 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$67 }
	$24 = [74]
	goto $label$11 
	
.LABEL $label$230
	$23 = ((int_64)$16 << (int_64)8)
	$24 = [75]
	goto $label$11 
	
.LABEL $label$229
	CALL eosio_assert((uint_64)(((int_64)$34 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17545])
	$16 = (uint_64)$23 >> (uint_64)(int_64)8)
	$20 = ((int_64)$23 | (int_64)4)
	$9 = [0]
	$24 = [76]
	goto $label$11 
	
.LABEL $label$228
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$59 }
	$24 = [136]
	goto $label$11 
	
.LABEL $label$227
	$23 = (uint_64)$16 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$16 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$24 = [137]
	goto $label$11 
	
.LABEL $label$226
	$16 = $23
	$8 = [1]
	$7 = $9
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$225
	$16 = $23
	$24 = [139]
	goto $label$11 
	
.LABEL $label$224
	if ( ((int_64)((int_64)$16 & (int_64)65280) != (int_64)0) ){ goto $label$60 }
	$24 = [140]
	goto $label$11 
	
.LABEL $label$223
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$7 = ($9 + [1])
	$9 = $7
	if ( $8 ){ goto $label$18 }
	$24 = [141]
	goto $label$11 
	
.LABEL $label$222
	$8 = [1]
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$221
	$8 = [0]
	$24 = [78]
	goto $label$11 
	
.LABEL $label$220
	CALL eosio_assert($8, [17594])
	*(($14 + [48])) = $20
	*($14 + [40]) = $34
	*($14 + [56]) = $3
	if ( ((int_64)$21 != (int_64)$32) ){ goto $label$58 }
	$24 = [135]
	goto $label$11 
	
.LABEL $label$219
	$27 = *($14)
	$24 = [79]
	goto $label$11 
	
.LABEL $label$218
	$8 = *([0] + [8196])
	$9 = *([0] + [8192])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$57 }
	$24 = [80]
	goto $label$11 
	
.LABEL $label$217
	$16 = *($14)
	$24 = [81]
	goto $label$11 
	
.LABEL $label$216
	if ( ((int_64)*($9) == (int_64)$16) ){ goto $label$54 }
	$24 = [82]
	goto $label$11 
	
.LABEL $label$215
	$9 = ($9 + [8])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$55 }
	goto $label$56 
	
.LABEL $label$214
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$53 }
	$24 = [134]
	goto $label$11 
	
.LABEL $label$213
	$33 = (((int_64)$21 == (int_64)$32) | $33)
	goto $label$51 
	
.LABEL $label$212
	*($5 + [80]) = $21
	$9 = *($5 + [452])
	if ( ((uint_32)$9 >= (uint_32)*((($5 + [448]) + [8]))) ){ goto $label$52 }
	$24 = [132]
	goto $label$11 
	
.LABEL $label$211
	*($9) = $21
	*($5 + [452]) = ($9 + [8])
	goto $label$50 
	
.LABEL $label$210
	CALL $35(($5 + [448]), ($5 + [80]))
	$24 = [85]
	goto $label$11 
	
.LABEL $label$209
	$19 = ($19 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$14 = ($14 + [64])
	if ( ((int_32)$14 != (int_32)*($5 + [948])) ){ goto $label$127 }
	$24 = [86]
	goto $label$11 
	
.LABEL $label$208
	if ( (($33 & [1]) == 0) ){ goto $label$48 }
	$24 = [129]
	goto $label$11 
	
.LABEL $label$207
	$9 = *($5 + [448])
	$8 = (*($5 + [452]) - $9)
	if ( ($8 == 0) ){ goto $label$47 }
	$24 = [130]
	goto $label$11 
	
.LABEL $label$206
	$7 = *($5 + [704])
	$7 = (CASTING uint_32)(uint_64 ((uint_64)*((($7 + (int_32((*($5 + [708]) - $7) >> [1]) & [-8])) + [-8])) % (uint_64)(int_64)100))
	if ( ((uint_32)$7 > (uint_32)[25]) ){ goto $label$49 }
	$24 = [131]
	goto $label$11 
	
.LABEL $label$205
	$9 = *(($9 + (((uint_32)$7 % (uint_32)int_32($8 >> [3])) << [3])))
	$3 = *($5 + [944])
	$8 = ($3 + ($31 << [6]))
	$14 = ($8 + [8])
	*(($7 = (($5 + [80]) + [8]))) = *($14)
	$18 = ($8 + [16])
	*(($17 = (($5 + [80]) + [16]))) = *($18)
	$33 = ($8 + [24])
	*(($19 = (($5 + [80]) + [24]))) = *($33)
	$38 = ($8 + [32])
	*(($31 = (($5 + [80]) + [32]))) = *($38)
	$40 = ($8 + [40])
	*(($39 = (($5 + [80]) + [40]))) = *($40)
	$42 = ($8 + [48])
	*(($41 = (($5 + [80]) + [48]))) = *($42)
	*($5 + [80]) = *($8)
	$43 = *($8 + [56])
	$9 = ($3 + ($9 << [6]))
	$3 = ($9 + [48])
	*(($44 = (($5 + [304]) + [48]))) = *($3)
	$46 = ($9 + [40])
	*(($45 = (($5 + [304]) + [40]))) = *($46)
	$48 = ($9 + [32])
	*(($47 = (($5 + [304]) + [32]))) = *($48)
	$50 = ($9 + [24])
	*(($49 = (($5 + [304]) + [24]))) = *($50)
	$51 = ($9 + [16])
	$16 = *($51)
	*((($5 + [304]) + [16])) = $16
	$52 = ($9 + [8])
	$23 = *($52)
	*((($5 + [304]) + [8])) = $23
	*($14) = $23
	*($18) = $16
	*($5 + [304]) = *($9)
	$14 = *($9 + [56])
	*($38) = *($47)
	*($33) = *($49)
	*($8 + [56]) = $14
	*($42) = *($44)
	*($40) = *($45)
	*($51) = *($17)
	*($52) = *($7)
	*($48) = *($31)
	*($50) = *($19)
	*($9 + [56]) = $43
	*($3) = *($41)
	*($46) = *($39)
	$27 = *($9)
	$24 = [87]
	goto $label$11 
	
.LABEL $label$204
	CALL __multi3(($5 + [48]), $13, (int_64)$13 >> (int_64)63), (int_64)10, (int_64)0)
	$23 = *($5 + [48])
	$20 = ((int_64)$23 / (int_64)100)
	CALL __multi3(($5 + [32]), $20, (int_64)$20 >> (int_64)63), (int_64)80, (int_64)0)
	$16 = *((($5 + [48]) + [8]))
	CALL eosio_assert(( (uint_64)($23 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [17614])
	CALL eosio_assert(( ((uint_64)$23 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [17638])
	CALL eosio_assert([1], [17663])
	CALL eosio_assert([1], [17678])
	$16 = *((($5 + [32]) + [8]))
	$23 = *($5 + [32])
	CALL eosio_assert(( (uint_64)($23 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [17614])
	CALL eosio_assert(( ((uint_64)$23 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [17638])
	CALL eosio_assert([1], [17663])
	CALL eosio_assert([1], [17678])
	CALL eosio_assert([1], [17703])
	$23 = ((int_64)$23 / (int_64)100)
	$16 = (int_64)
	CALL eosio_assert(((int_64)$16($20 - $23)) > (int_64)-4611686018427387904), [17751])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [17773])
	CALL $36($0, $23, $16)
	$14 = *($5 + [944])
	if ( ((int_32)$14 == (int_32)*($5 + [948])) ){ goto $label$46 }
	$24 = [88]
	goto $label$11 
	
.LABEL $label$203
	$17 = ($0 + [32])
	$18 = ($0 + [60])
	$19 = ($0 + [56])
	$33 = ($0 + [40])
	$24 = [89]
	goto $label$11 
	
.LABEL $label$202
	$23 = *($14 + [8])
	$16 = *($14)
	*(($9 = (($5 + [432]) + [8]))) = *(($14 + [16]))
	*(($8 = (($5 + [304]) + [8]))) = *(($14 + [32]))
	$20 = *($14 + [24])
	*(($5 + [8])) = $12
	*((($5 + [416]) + [8])) = $12
	*((($5 + [16]) + [8])) = *($9)
	*($5 + [432]) = $23
	*($5 + [304]) = $20
	*($5) = $13
	*($5 + [416]) = $13
	*($5 + [16]) = *($5 + [432])
	CALL $37($0, $16, ($5 + [16]), $5, ((int_64)$27 == (int_64)$16))
	*(($9 = (($5 + [400]) + [8]))) = *($8)
	*($5 + [400]) = *($5 + [304])
	*((($5 + [80]) + [8])) = *($9)
	*($5 + [80]) = *($5 + [400])
	$8 = *($18)
	$3 = *($19)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$42 }
	$24 = [90]
	goto $label$11 
	
.LABEL $label$201
	$9 = ($8 + [-24])
	$7 = *($9)
	if ( ((int_64)*($7) == (int_64)$16) ){ goto $label$41 }
	$24 = [91]
	goto $label$11 
	
.LABEL $label$200
	$8 = $9
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$43 }
	goto $label$44 
	
.LABEL $label$199
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$40 }
	$24 = [128]
	goto $label$11 
	
.LABEL $label$198
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$17), [18131])
	goto $label$38 
	
.LABEL $label$197
	$9 = CALL db_find_i64(*($17), *($33), (int_64)-2187881461846114304, $16)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$39 }
	$24 = [93]
	goto $label$11 
	
.LABEL $label$196
	$7 = CALL $3($17, $9)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$17), [18131])
	$24 = [94]
	goto $label$11 
	
.LABEL $label$195
	*($5 + [368]) = ($5 + [80])
	CALL eosio_assert([1], [17940])
	CALL $38($17, $7, (int_64)0, ($5 + [368]))
	$24 = [95]
	goto $label$11 
	
.LABEL $label$194
	$14 = ($14 + [64])
	if ( ((int_32)$14 != (int_32)*($5 + [948])) ){ goto $label$45 }
	$24 = [96]
	goto $label$11 
	
.LABEL $label$193
	*($5 + [84]) = $0
	*($5 + [80]) = ($5 + [784])
	*($5 + [88]) = ($5 + [944])
	CALL eosio_assert($11, [17940])
	CALL $39($6, $10, ($5 + [80]))
	CALL $40($0, $2)
	$14 = ($0 + [72])
	$8 = *(($0 + [100]))
	$3 = *(($0 + [96]))
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$37 }
	$24 = [97]
	goto $label$11 
	
.LABEL $label$192
	$24 = [98]
	goto $label$11 
	
.LABEL $label$191
	$9 = ($8 + [-24])
	$7 = *($9)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$34 }
	$24 = [99]
	goto $label$11 
	
.LABEL $label$190
	$8 = $9
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$35 }
	goto $label$36 
	
.LABEL $label$189
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$33 }
	$24 = [126]
	goto $label$11 
	
.LABEL $label$188
	CALL eosio_assert(((int_32)*(($7 + [36])) == (int_32)$14), [18131])
	goto $label$31 
	
.LABEL $label$187
	$7 = [0]
	$9 = CALL db_find_i64(*($14), *(($0 + [80])), (int_64)-4816269947984412672, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$32 }
	$24 = [101]
	goto $label$11 
	
.LABEL $label$186
	$7 = CALL $16($14, $9)
	CALL eosio_assert(((int_32)*($7 + [36]) == (int_32)$14), [18131])
	$24 = [102]
	goto $label$11 
	
.LABEL $label$185
	$9 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($9, [17375])
	CALL eosio_assert($9, [17940])
	CALL eosio_assert(((int_32)*($7 + [36]) == (int_32)$14), [17975])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$4()), [18021])
	$9 = ($7 + [8])
	$16 = *($9)
	*($5 + [960]) = $16
	*($9) = ((int_64)$16 + (int_64)1)
	$16 = *($7)
	CALL eosio_assert([1], [18072])
	*($5 + [312]) = (($5 + [80]) + [33])
	*($5 + [308]) = ($5 + [80])
	*($5 + [304]) = ($5 + [80])
	CALL $17(($5 + [304]), $7)
	CALL db_update_i64(*($7 + [40]), (int_64)0, ($5 + [80]), [33])
	$8 = ($0 + [88])
	if ( (uint_64)($16 <= *($8)) ){ goto $label$30 }
	$24 = [103]
	goto $label$11 
	
.LABEL $label$184
	*($8) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	$24 = [104]
	goto $label$11 
	
.LABEL $label$183
	*($5 + [368]) = *($9)
	if ( (CALL $118(($5 + [960]), ($5 + [368]), [8]) == 0) ){ goto $label$29 }
	$24 = [105]
	goto $label$11 
	
.LABEL $label$182
	$9 = *($7 + [44])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$28 }
	$24 = [124]
	goto $label$11 
	
.LABEL $label$181
	$9 = CALL db_idx64_find_primary(*(($0 + [72])), *(($0 + [80])), (int_64)-4816269947984412672, ($5 + [968]), $16)
	*(($7 + [44])) = $9
	$24 = [106]
	goto $label$11 
	
.LABEL $label$180
	CALL db_idx64_update($9, (int_64)0, ($5 + [368]))
	$24 = [107]
	goto $label$11 
	
.LABEL $label$179
	$16 = *($7 + [8])
	CALL sha256($4, [32], ($5 + [368]))
	*(($9 = (($5 + [304]) + [24]))) = *(($4 + [24]))
	*(($8 = (($5 + [304]) + [16]))) = *(($4 + [16]))
	*(($7 = ($5 + [344]))) = *($5 + [376])
	*(($3 = (($5 + [304]) + [48]))) = *((($5 + [368]) + [16]))
	*(($14 = ($5 + [360]))) = *((($5 + [368]) + [24]))
	*($5 + [312]) = *(($4 + [8]))
	*($5 + [304]) = *($4)
	*($5 + [336]) = *($5 + [368])
	*((($5 + [80]) + [32])) = $12
	*(($5 + [132])) = [0]
	*(($5 + [152])) = *($5 + [312])
	*(($5 + [160])) = *($8)
	*(($5 + [168])) = *($9)
	*(($5 + [176])) = *($5 + [336])
	*(($5 + [184])) = *($7)
	*(($5 + [192])) = *($3)
	*(($5 + [200])) = *($14)
	*($5 + [88]) = $1
	*($5 + [80]) = $16
	*($5 + [96]) = $27
	*($5 + [104]) = $13
	*($5 + [120]) = $15
	*($5 + [124 align=4]) = (int_64)0
	*($5 + [144]) = *($5 + [304])
	*(($5 + [264])) = (int_64)0
	*(($5 + [256])) = (int_64)0
	*(($5 + [248])) = (int_64)0
	*(($5 + [240])) = (int_64)0
	*(($5 + [232])) = (int_64)0
	*(($5 + [224])) = (int_64)0
	*(($5 + [216])) = (int_64)0
	*($5 + [208]) = (int_64)0
	*($5 + [272]) = (int_64)0
	*($5 + [280]) = (int_64)0
	*($5 + [288]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$16 = *($0)
	*($5 + [960]) = ($5 + [80])
	CALL $19(($5 + [968]), $6, $16, ($5 + [960]))
	$9 = *($5 + [124])
	if ( ($9 == 0) ){ goto $label$27 }
	$24 = [108]
	goto $label$11 
	
.LABEL $label$178
	*((($5 + [80]) + [48])) = $9
	CALL _ZdlPv($9)
	$24 = [109]
	goto $label$11 
	
.LABEL $label$177
	$9 = *($5 + [448])
	if ( ($9 == 0) ){ goto $label$26 }
	$24 = [110]
	goto $label$11 
	
.LABEL $label$176
	*($5 + [452]) = $9
	CALL _ZdlPv($9)
	$24 = [111]
	goto $label$11 
	
.LABEL $label$175
	CALL $33(($5 + [560]), *($5 + [564]))
	CALL $33(($5 + [576]), *($5 + [580]))
	if ( ($26 == 0) ){ goto $label$25 }
	$24 = [112]
	goto $label$11 
	
.LABEL $label$174
	CALL _ZdlPv($26)
	$24 = [113]
	goto $label$11 
	
.LABEL $label$173
	$9 = *($5 + [592])
	if ( ($9 == 0) ){ goto $label$24 }
	$24 = [114]
	goto $label$11 
	
.LABEL $label$172
	*($5 + [596]) = $9
	CALL _ZdlPv($9)
	$24 = [115]
	goto $label$11 
	
.LABEL $label$171
	if ( ($25 == 0) ){ goto $label$23 }
	$24 = [116]
	goto $label$11 
	
.LABEL $label$170
	*($5 + [612]) = $25
	CALL _ZdlPv($25)
	$24 = [117]
	goto $label$11 
	
.LABEL $label$169
	if ( ($22 == 0) ){ goto $label$22 }
	$24 = [118]
	goto $label$11 
	
.LABEL $label$168
	*($5 + [628]) = $22
	CALL _ZdlPv($22)
	$24 = [119]
	goto $label$11 
	
.LABEL $label$167
	$9 = *($5 + [704])
	if ( ($9 == 0) ){ goto $label$21 }
	$24 = [120]
	goto $label$11 
	
.LABEL $label$166
	*($5 + [708]) = $9
	CALL _ZdlPv($9)
	$24 = [121]
	goto $label$11 
	
.LABEL $label$165
	$9 = *($5 + [944])
	if ( ($9 == 0) ){ goto $label$20 }
	$24 = [122]
	goto $label$11 
	
.LABEL $label$164
	*($5 + [948]) = $9
	CALL _ZdlPv($9)
	$24 = [123]
	goto $label$11 
	
.LABEL $label$163
	$global$0 = ($5 + [976])
	return (unreachable)
	
.LABEL $label$162
	CALL $107(($5 + [544]))
	
.LABEL $label$161
	CALL $107(($5 + [528]))
	
.LABEL $label$160
	CALL $107(($5 + [512]))
	
.LABEL $label$159
	CALL $107(($5 + [480]))
	
.LABEL $label$158
	$24 = [0]
	goto $label$11 
	
.LABEL $label$157
	$24 = [3]
	goto $label$11 
	
.LABEL $label$156
	$24 = [1]
	goto $label$11 
	
.LABEL $label$155
	$24 = [7]
	goto $label$11 
	
.LABEL $label$154
	$24 = [186]
	goto $label$11 
	
.LABEL $label$153
	$24 = [7]
	goto $label$11 
	
.LABEL $label$152
	$24 = [9]
	goto $label$11 
	
.LABEL $label$151
	$24 = [12]
	goto $label$11 
	
.LABEL $label$150
	$24 = [184]
	goto $label$11 
	
.LABEL $label$149
	$24 = [12]
	goto $label$11 
	
.LABEL $label$148
	$24 = [15]
	goto $label$11 
	
.LABEL $label$147
	$24 = [182]
	goto $label$11 
	
.LABEL $label$146
	$24 = [15]
	goto $label$11 
	
.LABEL $label$145
	$24 = [17]
	goto $label$11 
	
.LABEL $label$144
	$24 = [19]
	goto $label$11 
	
.LABEL $label$143
	$24 = [22]
	goto $label$11 
	
.LABEL $label$142
	$24 = [180]
	goto $label$11 
	
.LABEL $label$141
	$24 = [22]
	goto $label$11 
	
.LABEL $label$140
	$24 = [178]
	goto $label$11 
	
.LABEL $label$139
	$24 = [24]
	goto $label$11 
	
.LABEL $label$138
	$24 = [26]
	goto $label$11 
	
.LABEL $label$137
	$24 = [28]
	goto $label$11 
	
.LABEL $label$136
	$24 = [28]
	goto $label$11 
	
.LABEL $label$135
	$24 = [176]
	goto $label$11 
	
.LABEL $label$134
	$24 = [30]
	goto $label$11 
	
.LABEL $label$133
	$24 = [32]
	goto $label$11 
	
.LABEL $label$132
	$24 = [36]
	goto $label$11 
	
.LABEL $label$131
	$24 = [36]
	goto $label$11 
	
.LABEL $label$130
	$24 = [35]
	goto $label$11 
	
.LABEL $label$129
	$24 = [87]
	goto $label$11 
	
.LABEL $label$128
	$24 = [38]
	goto $label$11 
	
.LABEL $label$127
	$24 = [38]
	goto $label$11 
	
.LABEL $label$126
	$24 = [175]
	goto $label$11 
	
.LABEL $label$125
	$24 = [40]
	goto $label$11 
	
.LABEL $label$124
	$24 = [175]
	goto $label$11 
	
.LABEL $label$123
	$24 = [43]
	goto $label$11 
	
.LABEL $label$122
	$24 = [174]
	goto $label$11 
	
.LABEL $label$121
	$24 = [45]
	goto $label$11 
	
.LABEL $label$120
	$24 = [174]
	goto $label$11 
	
.LABEL $label$119
	$24 = [48]
	goto $label$11 
	
.LABEL $label$118
	$24 = [173]
	goto $label$11 
	
.LABEL $label$117
	$24 = [171]
	goto $label$11 
	
.LABEL $label$116
	$24 = [170]
	goto $label$11 
	
.LABEL $label$115
	$24 = [167]
	goto $label$11 
	
.LABEL $label$114
	$24 = [164]
	goto $label$11 
	
.LABEL $label$113
	$24 = [50]
	goto $label$11 
	
.LABEL $label$112
	$24 = [51]
	goto $label$11 
	
.LABEL $label$111
	$24 = [52]
	goto $label$11 
	
.LABEL $label$110
	$24 = [162]
	goto $label$11 
	
.LABEL $label$109
	$24 = [52]
	goto $label$11 
	
.LABEL $label$108
	$24 = [162]
	goto $label$11 
	
.LABEL $label$107
	$24 = [52]
	goto $label$11 
	
.LABEL $label$106
	$24 = [162]
	goto $label$11 
	
.LABEL $label$105
	$24 = [162]
	goto $label$11 
	
.LABEL $label$104
	$24 = [52]
	goto $label$11 
	
.LABEL $label$103
	$24 = [162]
	goto $label$11 
	
.LABEL $label$102
	$24 = [52]
	goto $label$11 
	
.LABEL $label$101
	$24 = [162]
	goto $label$11 
	
.LABEL $label$100
	$24 = [52]
	goto $label$11 
	
.LABEL $label$99
	$24 = [162]
	goto $label$11 
	
.LABEL $label$98
	$24 = [52]
	goto $label$11 
	
.LABEL $label$97
	$24 = [162]
	goto $label$11 
	
.LABEL $label$96
	$24 = [52]
	goto $label$11 
	
.LABEL $label$95
	$24 = [162]
	goto $label$11 
	
.LABEL $label$94
	$24 = [52]
	goto $label$11 
	
.LABEL $label$93
	$24 = [161]
	goto $label$11 
	
.LABEL $label$92
	$24 = [53]
	goto $label$11 
	
.LABEL $label$91
	$24 = [54]
	goto $label$11 
	
.LABEL $label$90
	$24 = [55]
	goto $label$11 
	
.LABEL $label$89
	$24 = [57]
	goto $label$11 
	
.LABEL $label$88
	$24 = [58]
	goto $label$11 
	
.LABEL $label$87
	$24 = [60]
	goto $label$11 
	
.LABEL $label$86
	$24 = [58]
	goto $label$11 
	
.LABEL $label$85
	$24 = [60]
	goto $label$11 
	
.LABEL $label$84
	$24 = [59]
	goto $label$11 
	
.LABEL $label$83
	$24 = [59]
	goto $label$11 
	
.LABEL $label$82
	$24 = [61]
	goto $label$11 
	
.LABEL $label$81
	$24 = [152]
	goto $label$11 
	
.LABEL $label$80
	$24 = [62]
	goto $label$11 
	
.LABEL $label$79
	$24 = [63]
	goto $label$11 
	
.LABEL $label$78
	$24 = [64]
	goto $label$11 
	
.LABEL $label$77
	$24 = [66]
	goto $label$11 
	
.LABEL $label$76
	$24 = [67]
	goto $label$11 
	
.LABEL $label$75
	$24 = [69]
	goto $label$11 
	
.LABEL $label$74
	$24 = [67]
	goto $label$11 
	
.LABEL $label$73
	$24 = [69]
	goto $label$11 
	
.LABEL $label$72
	$24 = [68]
	goto $label$11 
	
.LABEL $label$71
	$24 = [68]
	goto $label$11 
	
.LABEL $label$70
	$24 = [70]
	goto $label$11 
	
.LABEL $label$69
	$24 = [143]
	goto $label$11 
	
.LABEL $label$68
	$24 = [71]
	goto $label$11 
	
.LABEL $label$67
	$24 = [72]
	goto $label$11 
	
.LABEL $label$66
	$24 = [73]
	goto $label$11 
	
.LABEL $label$65
	$24 = [75]
	goto $label$11 
	
.LABEL $label$64
	$24 = [76]
	goto $label$11 
	
.LABEL $label$63
	$24 = [78]
	goto $label$11 
	
.LABEL $label$62
	$24 = [76]
	goto $label$11 
	
.LABEL $label$61
	$24 = [78]
	goto $label$11 
	
.LABEL $label$60
	$24 = [77]
	goto $label$11 
	
.LABEL $label$59
	$24 = [77]
	goto $label$11 
	
.LABEL $label$58
	$24 = [79]
	goto $label$11 
	
.LABEL $label$57
	$24 = [133]
	goto $label$11 
	
.LABEL $label$56
	$24 = [83]
	goto $label$11 
	
.LABEL $label$55
	$24 = [81]
	goto $label$11 
	
.LABEL $label$54
	$24 = [133]
	goto $label$11 
	
.LABEL $label$53
	$24 = [83]
	goto $label$11 
	
.LABEL $label$52
	$24 = [84]
	goto $label$11 
	
.LABEL $label$51
	$24 = [85]
	goto $label$11 
	
.LABEL $label$50
	$24 = [85]
	goto $label$11 
	
.LABEL $label$49
	$24 = [87]
	goto $label$11 
	
.LABEL $label$48
	$24 = [87]
	goto $label$11 
	
.LABEL $label$47
	$24 = [87]
	goto $label$11 
	
.LABEL $label$46
	$24 = [96]
	goto $label$11 
	
.LABEL $label$45
	$24 = [89]
	goto $label$11 
	
.LABEL $label$44
	$24 = [92]
	goto $label$11 
	
.LABEL $label$43
	$24 = [90]
	goto $label$11 
	
.LABEL $label$42
	$24 = [92]
	goto $label$11 
	
.LABEL $label$41
	$24 = [127]
	goto $label$11 
	
.LABEL $label$40
	$24 = [92]
	goto $label$11 
	
.LABEL $label$39
	$24 = [95]
	goto $label$11 
	
.LABEL $label$38
	$24 = [94]
	goto $label$11 
	
.LABEL $label$37
	$24 = [100]
	goto $label$11 
	
.LABEL $label$36
	$24 = [100]
	goto $label$11 
	
.LABEL $label$35
	$24 = [98]
	goto $label$11 
	
.LABEL $label$34
	$24 = [125]
	goto $label$11 
	
.LABEL $label$33
	$24 = [100]
	goto $label$11 
	
.LABEL $label$32
	$24 = [102]
	goto $label$11 
	
.LABEL $label$31
	$24 = [102]
	goto $label$11 
	
.LABEL $label$30
	$24 = [104]
	goto $label$11 
	
.LABEL $label$29
	$24 = [107]
	goto $label$11 
	
.LABEL $label$28
	$24 = [106]
	goto $label$11 
	
.LABEL $label$27
	$24 = [109]
	goto $label$11 
	
.LABEL $label$26
	$24 = [111]
	goto $label$11 
	
.LABEL $label$25
	$24 = [113]
	goto $label$11 
	
.LABEL $label$24
	$24 = [115]
	goto $label$11 
	
.LABEL $label$23
	$24 = [117]
	goto $label$11 
	
.LABEL $label$22
	$24 = [119]
	goto $label$11 
	
.LABEL $label$21
	$24 = [121]
	goto $label$11 
	
.LABEL $label$20
	$24 = [123]
	goto $label$11 
	
.LABEL $label$19
	$24 = [138]
	goto $label$11 
	
.LABEL $label$18
	$24 = [139]
	goto $label$11 
	
.LABEL $label$17
	$24 = [147]
	goto $label$11 
	
.LABEL $label$16
	$24 = [148]
	goto $label$11 
	
.LABEL $label$15
	$24 = [156]
	goto $label$11 
	
.LABEL $label$14
	$24 = [157]
	goto $label$11 
	
.LABEL $label$13
	$24 = [165]
	goto $label$11 
	
.LABEL $label$12
	$24 = [168]
	goto $label$11 
	(unreachable)
	$24
	$9
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $109 (int_32 $0)
{
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17488])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [17488])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [17488])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [6]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [8]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17488])
	CALL memcpy(*($6), ($2 + [8]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	$7 = ($2 + [20])
	$8 = ($2 + [24])
	$5 = ($2 + [28])
	
.LOOP $label$3:
	*($2) = $0
	*($2 + [8]) = $6
	*((($2 + [8]) + [8])) = ($6 + [24])
	*($7) = ($6 + [40])
	*($8) = ($6 + [56])
	*($5) = ($6 + [60])
	*($2 + [12]) = ($6 + [8])
	CALL $69(($2 + [8]), $2)
	$6 = ($6 + [64])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $108 ()
{
	return [8208]
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [44])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	$6 = *($0)
	*(($1 + [32])) = *(($5 + [32]))
	*($1 + [24]) = *($5 + [24])
	$7 = *($4)
	*($1 + [40]) = *($7 + [40])
	$5 = $1
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$1 }
	CALL $66(($1 + [44]), *($7 + [44]), *(($7 + [48])))
	$5 = *($4)
	
.LABEL $label$1
	*($1 + [64]) = *($5 + [64])
	*(($1 + [120])) = *(($5 + [120]))
	*(($1 + [112])) = *(($5 + [112]))
	*(($1 + [104])) = *(($5 + [104]))
	*(($1 + [96])) = *(($5 + [96]))
	*(($1 + [88])) = *(($5 + [88]))
	*(($1 + [80])) = *(($5 + [80]))
	*(($1 + [72])) = *(($5 + [72]))
	*($1 + [192]) = (int_64)0
	*($1 + [208]) = *(*($4) + [208])
	$7 = *($1 + [44])
	$4 = *(($1 + [48]))
	$8 = ($4 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [6]))
	$5 = [41]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	$5 = (($8 & [-64]) + $5)
	
.LABEL $label$3
	$4 = ($5 + [152])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$5 = CALL $124($4)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $4)
	CALL $67(($3 + [8]), $1)
	$9 = *($1)
	*($1 + [220]) = CALL db_store_i64(*($6 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $9, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$6 }
	CALL $128($5)
	
.LABEL $label$6
	if ( (uint_64)($9 <= *($6 + [16])) ){ goto $label$7 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$5 = ($6 + [8])
	$9 = *($5)
	$0 = *(($0 + [8]))
	$10 = *($0)
	$11 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [224]) = CALL db_idx64_store($9, (int_64)7035937633859534848, $10, $11, ($3 + [24]))
	$9 = *($0)
	$10 = *($5)
	$11 = *($1)
	*($3 + [24]) = *(($1 + [192]))
	*(($1 + [228])) = CALL db_idx64_store($10, (int_64)7035937633859534849, $9, $11, ($3 + [24]))
	$9 = *($0)
	$10 = *($5)
	$11 = *($1)
	*($3 + [24]) = *(($1 + [208]))
	*(($1 + [232])) = CALL db_idx64_store($10, (int_64)7035937633859534850, $9, $11, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $68($0, ($1 + [44]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[31]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[31]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[31]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [192]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [200]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [208]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [6])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [6])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[67108864]) ){ goto $label$1 }
	$6 = [67108863]
	if ( ((uint_32)int_32($5 >> [6]) > (uint_32)[33554430]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [5])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[67108864]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [6])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [6])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [6]) << [6]))
	return (unreachable)
	
.LABEL $label$1
	CALL $107($0)
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [18205])
	CALL memcpy(($0 + [16]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[31]), [18205])
	CALL memcpy(($0 + [48]), *($1 + [4]), [32])
	*($1 + [4]) = (*($1 + [4]) + [32])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18205])
	CALL memcpy(($0 + [32]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [18205])
	CALL memcpy(($0 + [48]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17488])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17488])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17488])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17488])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17488])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $100 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $105($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	
.LOOP $label$1:
	$5 = ($1 + [-16])
	$6 = ($1 + [-8])
	
.LOOP $label$6:
	$4 = $0
	$0 = ($1 - $4)
	$7 = int_32($0 >> [3])
	if ( ((uint_32)$7 <= (uint_32)[5]) ){ goto $label$45 }
	if ( ((int_32)$0 <= (int_32)[247]) ){ goto $label$44 }
	$8 = ($4 + (((int_32)$7 / (int_32)[2]) << [3]))
	if ( ((int_32)$0 < (int_32)[7993]) ){ goto $label$46 }
	$0 = (((int_32)$7 / (int_32)[4]) << [3])
	$9 = CALL $90($4, ($4 + $0), $8, ($8 + $0), $6, $2)
	goto $label$16 
	
.LABEL $label$46
	$12 = *($6)
	$10 = *($4)
	$11 = *($8)
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$49 }
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$48 }
	*($4) = $12
	*($6) = $10
	$9 = [1]
	$11 = *($8)
	$10 = *($4)
	if ( ((int_64)$10 < (int_64)$11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$49
	$9 = [0]
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$16 }
	*($8) = $12
	*($6) = $11
	$9 = [1]
	$11 = *($4)
	$12 = *($8)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$16 }
	*($4) = $12
	*($8) = $11
	goto $label$47 
	
.LABEL $label$48
	*($4) = $11
	*($8) = $10
	$9 = [1]
	$12 = *($6)
	if ( ((int_64)$12 >= (int_64)$10) ){ goto $label$16 }
	*($8) = $12
	*($6) = $10
	
.LABEL $label$47
	$9 = [2]
	$11 = *($8)
	$10 = *($4)
	if ( ((int_64)$10 < (int_64)$11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$45
	goto $label$30 
	
.LABEL $label$50
	$11 = *($4)
	$0 = ($1 + [-8])
	$12 = *($0)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$23 }
	*($4) = $12
	*($0) = $11
	return 
	
.LABEL $label$44
	$11 = *($4 + [16])
	$10 = *($4)
	$12 = *($4 + [8])
	if ( ((int_64)$12 >= (int_64)$10) ){ goto $label$56 }
	if ( ((int_64)$11 >= (int_64)$12) ){ goto $label$55 }
	*($4) = $11
	*(($4 + [16])) = $10
	goto $label$54 
	
.LABEL $label$56
	if ( ((int_64)$11 >= (int_64)$12) ){ goto $label$52 }
	*(($4 + [16])) = $12
	*(($0 = ($4 + [8]))) = $11
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$53 }
	*($4) = $11
	*($0) = $10
	$6 = ($4 + [24])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$51 }
	goto $label$21 
	
.LABEL $label$55
	*($4) = $12
	*(($0 = ($4 + [8]))) = $10
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$52 }
	*(($4 + [16])) = $10
	*($0) = $11
	
.LABEL $label$54
	$12 = $10
	
.LABEL $label$53
	$6 = ($4 + [24])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$51 }
	goto $label$22 
	
.LABEL $label$52
	$12 = $11
	$6 = ($4 + [24])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$20 }
	
.LABEL $label$51
	$8 = [16]
	$11 = *($6)
	if ( ((int_64)$11 >= (int_64)$12) ){ goto $label$31 }
	$13 = [2]
	goto $label$3 
	
.LABEL $label$43
	$0 = ($1 + [-8])
	$12 = *($0)
	$10 = *($4)
	$11 = *($4 + [8])
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$40 }
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$38 }
	*($4) = $12
	*($0) = $10
	return 
	
.LABEL $label$42
	CALL $90($4, ($4 + [8]), ($4 + [16]), ($4 + [24]), ($1 + [-8]), $2)
	return 
	
.LABEL $label$41
	$0 = ($1 + [-8])
	$11 = *($4 + [16])
	$10 = *($4)
	$12 = *($4 + [8])
	if ( ((int_64)$12 >= (int_64)$10) ){ goto $label$39 }
	if ( ((int_64)$11 >= (int_64)$12) ){ goto $label$37 }
	*($4) = $11
	*(($4 + [16])) = $10
	goto $label$36 
	
.LABEL $label$40
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$26 }
	*(($7 = ($4 + [8]))) = $12
	*($0) = $11
	$11 = *($4)
	$12 = *($7)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$25 }
	*($4) = $12
	*($7) = $11
	return 
	
.LABEL $label$39
	if ( ((int_64)$11 >= (int_64)$12) ){ goto $label$35 }
	*(($4 + [16])) = $12
	*(($7 = ($4 + [8]))) = $11
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$33 }
	*($4) = $11
	*($7) = $10
	$14 = *($0)
	if ( ((int_64)$14 >= (int_64)$12) ){ goto $label$19 }
	goto $label$32 
	
.LABEL $label$38
	*($4) = $11
	*(($7 = ($4 + [8]))) = $10
	$12 = *($0)
	if ( ((int_64)$12 >= (int_64)$10) ){ goto $label$24 }
	*($7) = $12
	*($0) = $10
	return 
	
.LABEL $label$37
	*($4) = $12
	*(($7 = ($4 + [8]))) = $10
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$34 }
	*(($4 + [16])) = $10
	*($7) = $11
	
.LABEL $label$36
	$12 = $10
	$14 = *($0)
	if ( ((int_64)$14 >= (int_64)$12) ){ goto $label$17 }
	goto $label$32 
	
.LABEL $label$35
	$12 = $11
	$14 = *($0)
	if ( ((int_64)$14 >= (int_64)$12) ){ goto $label$18 }
	goto $label$32 
	
.LABEL $label$34
	$12 = $11
	
.LABEL $label$33
	$14 = *($0)
	if ( ((int_64)$14 >= (int_64)$12) ){ goto $label$29 }
	
.LABEL $label$32
	*(($7 = ($4 + [16]))) = $14
	*($0) = $12
	$0 = ($4 + [8])
	$11 = *($0)
	$12 = *($7)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$28 }
	*($7) = $11
	*($0) = $12
	$11 = *($4)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$27 }
	*($4) = $12
	*(($4 + [8])) = $11
	return $13
	
.LABEL $label$31
	$13 = [0]
	goto $label$3 
	
.LABEL $label$30
	$13 = [7]
	goto $label$3 
	
.LABEL $label$29
	$13 = [7]
	goto $label$3 
	
.LABEL $label$28
	$13 = [7]
	goto $label$3 
	
.LABEL $label$27
	$13 = [7]
	goto $label$3 
	
.LABEL $label$26
	$13 = [7]
	goto $label$3 
	
.LABEL $label$25
	$13 = [7]
	goto $label$3 
	
.LABEL $label$24
	$13 = [7]
	goto $label$3 
	
.LABEL $label$23
	$13 = [7]
	goto $label$3 
	
.LABEL $label$22
	$13 = [7]
	goto $label$3 
	
.LABEL $label$21
	$13 = [7]
	goto $label$3 
	
.LABEL $label$20
	$13 = [7]
	goto $label$3 
	
.LABEL $label$19
	$13 = [7]
	goto $label$3 
	
.LABEL $label$18
	$13 = [7]
	goto $label$3 
	
.LABEL $label$17
	$13 = [7]
	goto $label$3 
	
.LABEL $label$16
	$11 = *($8)
	$10 = *($4)
	if ( ((int_64)$10 >= (int_64)$11) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = $6
	$3 = ($4 + [8])
	if ( ($3 <= $7) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$0 = $5
	
.LOOP $label$57:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	$12 = *($0)
	$7 = ($0 + [-8])
	$0 = $7
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$57 }
	*($4) = $12
	*(($7 = ($7 + [8]))) = $10
	$9 = ($9 + [1])
	$3 = ($4 + [8])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$11 }
	
.LABEL $label$13
	
.LOOP $label$58:
	$0 = ($3 + [-8])
	$12 = *($8)
	
.LOOP $label$59:
	$0 = ($0 + [8])
	$11 = *($0)
	if ( ((int_64)$11 < (int_64)$12) ){ goto $label$59 }
	$3 = ($0 + [8])
	
.LOOP $label$60:
	$7 = ($7 + [-8])
	$10 = *($7)
	if ( ((int_64)$10 >= (int_64)$12) ){ goto $label$60 }
	if ( ((uint_32)$0 > (uint_32)$7) ){ goto $label$61 }
	*($0) = $10
	*($7) = $11
	$8 = ( $7 ? $8 : ((int_32)$8 == (int_32)$0) )
	$9 = ($9 + [1])
	goto $label$58 
	
.LABEL $label$61
	$3 = $0
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$7 = ($4 + [8])
	$11 = *($6)
	if ( ((int_64)$10 < (int_64)$11) ){ goto $label$66 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$65 }
	$7 = ($4 + [16])
	
.LOOP $label$68:
	$0 = ($7 + [-8])
	$12 = *($0)
	if ( ((int_64)$10 < (int_64)$12) ){ goto $label$67 }
	$7 = ($7 + [8])
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$68 }
	goto $label$64 
	
.LABEL $label$67
	*($0) = $11
	*($6) = $12
	
.LABEL $label$66
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$63 }
	
.LOOP $label$69:
	$0 = ($7 + [-8])
	$12 = *($4)
	
.LOOP $label$70:
	$0 = ($0 + [8])
	$11 = *($0)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$70 }
	$7 = ($0 + [8])
	
.LOOP $label$71:
	$6 = ($6 + [-8])
	$10 = *($6)
	if ( ((int_64)$12 < (int_64)$10) ){ goto $label$71 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$72 }
	*($0) = $10
	*($6) = $11
	goto $label$69 
	
.LABEL $label$72
	$7 = ([4] & [7])
	if ( ((uint_32)$7 > (uint_32)[4]) ){ goto $label$62 }
	goto $label$4 
	
.LABEL $label$65
	$13 = [7]
	goto $label$3 
	
.LABEL $label$64
	$13 = [7]
	goto $label$3 
	
.LABEL $label$63
	$13 = [7]
	goto $label$3 
	
.LABEL $label$62
	$13 = [7]
	goto $label$3 
	
.LABEL $label$11
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$10
	$11 = *($3)
	$12 = *($8)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$9 }
	*($3) = $12
	*($8) = $11
	if ( ($9 + [1]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( $9 ){ goto $label$7 }
	
.LABEL $label$8
	$7 = CALL $91($4, $3, $2)
	$0 = ($3 + [8])
	if ( CALL $91($0, $1, $2) ){ goto $label$5 }
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $89($4, $3, $2)
	$0 = ($3 + [8])
	goto $label$6 
	
.LABEL $label$5
	$1 = ( $1 ? $3 : $7 )
	$0 = $4
	$7 = (( [1] ? [2] : $7 ) & [7])
	if ( ((uint_32)$7 <= (uint_32)[4]) ){ goto $label$4 }
	$13 = [7]
	goto $label$3 
	
.LABEL $label$4
	if ( (([1] << $7) & [21]) ){ goto $label$1 }
	$13 = [7]
	
.LABEL $label$3
	
.LOOP $label$73:
	goto $label$81 
	
.LABEL $label$88
	$0 = $8
	$13 = [3]
	goto $label$73 
	
.LABEL $label$87
	*((($7 = ($4 + $0)) + [8])) = $12
	if ( ($0 == 0) ){ goto $label$75 }
	$13 = [4]
	goto $label$73 
	
.LABEL $label$86
	$0 = ($0 + [-8])
	$12 = *(($7 + [-8]))
	if ( ((int_64)$11 < (int_64)$12) ){ goto $label$76 }
	$13 = [5]
	goto $label$73 
	
.LABEL $label$85
	$0 = (($4 + $0) + [8])
	goto $label$74 
	
.LABEL $label$84
	$0 = $4
	$13 = [6]
	goto $label$73 
	
.LABEL $label$83
	*($0) = $11
	$0 = ($6 + [8])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$77 }
	$13 = [1]
	goto $label$73 
	
.LABEL $label$82
	$8 = ($8 + [8])
	$12 = *($6)
	$6 = $0
	$11 = *($6)
	if ( ((int_64)$11 < (int_64)$12) ){ goto $label$79 }
	$13 = [0]
	goto $label$73 
	
.LABEL $label$81
	$0 = ($6 + [8])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$78 }
	$13 = [7]
	goto $label$73 
	
.LABEL $label$80
	return 
	
.LABEL $label$79
	$13 = [2]
	goto $label$73 
	
.LABEL $label$78
	$13 = [1]
	goto $label$73 
	
.LABEL $label$77
	$13 = [7]
	goto $label$73 
	
.LABEL $label$76
	$13 = [3]
	goto $label$73 
	
.LABEL $label$75
	$13 = [8]
	goto $label$73 
	
.LABEL $label$74
	$13 = [6]
	goto $label$73 
	
.LABEL $label$2
	CALL $89(($3 + [8]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$7
}

void .FUNC $88 ()
{
	int_32 $0
	int_32 $1
	*([0] + [8192 align=4]) = (int_64)0
	*([0] + [8200]) = [0]
	$0 = CALL _Znwj([160])
	*([0] + [8192]) = $0
	*($0) = (int_64)7966026871245845728
	*($0 + [8]) = (int_64)-1941920063437458112
	*($0 + [16]) = (int_64)-7945007764922661856
	*($0 + [24]) = (int_64)4344997535148983856
	*($0 + [32]) = (int_64)-8331078201005808880
	*($0 + [40]) = (int_64)8426492058939926400
	*($0 + [48]) = (int_64)-3066507834477231600
	*($0 + [56]) = (int_64)2935026253342522176
	*($0 + [64]) = (int_64)-330540981931516848
	*($0 + [72]) = (int_64)-3665743288950537712
	*($0 + [80]) = (int_64)-3772040269650181616
	*($0 + [88]) = (int_64)2936024155597075760
	*($0 + [96]) = (int_64)4159190476321825696
	*($0 + [104]) = (int_64)-7950552175045527232
	*($0 + [112]) = (int_64)-4343605622849750880
	*($0 + [120]) = (int_64)-4483841899972999632
	*($0 + [128]) = (int_64)2026910387131392048
	$1 = ($0 + [160])
	*([0] + [8200]) = $1
	*($0 + [144]) = (int_64)839804083682125504
	*($0 + [136]) = (int_64)595056349684602560
	*($0 + [152]) = (int_64)-7734351250379488752
	*([0] + [8196]) = $1
	CALL $110([6], [0], [8192])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18422])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $13($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18205])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $87($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $103($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $103($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $100($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [18592])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [18697])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [18630])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [18697])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17488])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18532])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7335373859207147520)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18478])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18478])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $73(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18205])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18205])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [6]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [6])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$4 }
	$3 = [67108863]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [6]) > (uint_32)[33554430]) ){ goto $label$7 }
	$3 = int_32($2 >> [5])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[67108864]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [6]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3 + [56]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	$3 = (*($0) + [64])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $107($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [6]))
	$5 = ($2 + ($5 << [6]))
	$3 = ($5 + [32])
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [-32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [-24])) = (int_64)0
	*(($3 + [-16])) = (int_64)0
	*(($3 + [-8])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	$3 = ($3 + [64])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [6]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [18422])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$4 = (CASTING uint_32)(uint_64 $5)
	$8 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $8) >> [6])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$4 }
	CALL $81($1, ($4 - $7))
	$3 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 <= (uint_32)$4) ){ goto $label$5 }
	$3 = ($8 + ($4 << [6]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($2 + [20])
	$7 = ($2 + [24])
	$6 = ($2 + [28])
	
.LOOP $label$6:
	*($2) = $0
	*($2 + [8]) = $8
	*((($2 + [8]) + [8])) = ($8 + [24])
	*($4) = ($8 + [40])
	*($7) = ($8 + [56])
	*($6) = ($8 + [60])
	*($2 + [12]) = ($8 + [8])
	CALL $82(($2 + [8]), $2)
	$8 = ($8 + [64])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [1]
	$6 = *($1 + [4])
	$5 = *($0 + [4])
	$7 = int_32(($5 - $6) >> [3])
	if ( ((uint_32)$7 > (uint_32)[5]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	*(($1 + [4])) = ($6 + [8])
	$1 = ($5 + [-8])
	$9 = *($1)
	$8 = *($6)
	if ( ((int_64)$8 >= (int_64)$9) ){ goto $label$1 }
	*($1) = $8
	*($6) = $9
	$global$0 = ($3 + [80])
	return [1]
	
.LABEL $label$16
	$6 = ($5 + [-24])
	$8 = *($6)
	$7 = (*($0 + [4]) + [-8])
	$10 = *($7)
	$5 = ($5 + [-16])
	$9 = *($5)
	if ( ((int_64)$9 >= (int_64)$10) ){ goto $label$12 }
	if ( ((int_64)$8 >= (int_64)$9) ){ goto $label$9 }
	*($7) = $8
	*($6) = $10
	goto $label$8 
	
.LABEL $label$15
	*(($1 + [4])) = ($6 + [8])
	$8 = *($6)
	$5 = (*($0 + [4]) + [-8])
	$10 = *($5)
	$1 = ($5 + [-16])
	$9 = *($1)
	if ( ((int_64)$9 >= (int_64)$10) ){ goto $label$11 }
	if ( ((int_64)$8 >= (int_64)$9) ){ goto $label$7 }
	*($5) = $8
	*($6) = $10
	$global$0 = ($3 + [80])
	return [1]
	
.LABEL $label$14
	*(($1 + [4])) = ($6 + [8])
	*($3 + [72]) = *($0)
	$0 = ($5 + [-8])
	*($3 + [68]) = $0
	*($3 + [64]) = $0
	$0 = ($5 + [-16])
	*($3 + [60]) = $0
	*($3 + [56]) = $0
	$5 = ($5 + [-24])
	*($3 + [48]) = $5
	*($3 + [52]) = $5
	$8 = *($1)
	*($3 + [32]) = *($3 + [72])
	*($3 + [24]) = *($3 + [64])
	*($3 + [16]) = *($3 + [56])
	*($3 + [8]) = *($3 + [48])
	*($3) = $8
	*($3 + [40]) = $8
	CALL $71(($3 + [32]), ($3 + [24]), ($3 + [16]), ($3 + [8]), $3, $2)
	$global$0 = ($3 + [80])
	return [1]
	
.LABEL $label$13
	$6 = ($6 + [8])
	*(($1 + [4])) = $6
	$1 = ($5 + [-24])
	$9 = *($1)
	$0 = (*($0 + [4]) + [-8])
	$10 = *($0)
	$5 = ($5 + [-16])
	$8 = *($5)
	if ( ((int_64)$8 >= (int_64)$10) ){ goto $label$10 }
	if ( ((int_64)$9 >= (int_64)$8) ){ goto $label$6 }
	*($0) = $9
	*($1) = $10
	goto $label$5 
	
.LABEL $label$12
	if ( ((int_64)$8 >= (int_64)$9) ){ goto $label$8 }
	*($6) = $9
	*($5) = $8
	$9 = *($7)
	if ( ((int_64)$8 >= (int_64)$9) ){ goto $label$8 }
	*($7) = $8
	*($5) = $9
	goto $label$8 
	
.LABEL $label$11
	if ( ((int_64)$8 >= (int_64)$9) ){ goto $label$1 }
	*($1) = $8
	*($6) = $9
	$9 = *($5)
	$8 = *($1)
	if ( ((int_64)$8 >= (int_64)$9) ){ goto $label$1 }
	*($5) = $8
	*($1) = $9
	$global$0 = ($3 + [80])
	return [1]
	
.LABEL $label$10
	if ( ((int_64)$9 >= (int_64)$8) ){ goto $label$4 }
	*($1) = $8
	*($5) = $9
	$10 = *($0)
	if ( ((int_64)$9 >= (int_64)$10) ){ goto $label$3 }
	*($0) = $9
	*($5) = $10
	$8 = *($1)
	goto $label$3 
	
.LABEL $label$9
	*($7) = $9
	*($5) = $10
	$8 = *($6)
	if ( ((int_64)$8 >= (int_64)$10) ){ goto $label$8 }
	*($6) = $10
	*($5) = $8
	
.LABEL $label$8
	$2 = ($1 + [4])
	$1 = *($2)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$1 }
	$4 = [0]
	$0 = ($0 + [4])
	
.LOOP $label$18:
	$8 = *(($5 + [-8]))
	$7 = ($6 + [-8])
	$9 = *($7)
	if ( ((int_64)$9 >= (int_64)$8) ){ goto $label$19 }
	*(($6 + [-8])) = $8
	if ( ((int_32)$5 == (int_32)*($0)) ){ goto $label$20 }
	$1 = $6
	
.LOOP $label$21:
	$5 = ($1 + [8])
	$8 = *($5)
	if ( ((int_64)$9 >= (int_64)$8) ){ goto $label$20 }
	*($1) = $8
	$5 = ($1 + [16])
	$1 = ($1 + [8])
	if ( ((int_32)$5 != (int_32)*($0)) ){ goto $label$21 }
	$5 = ($1 + [8])
	
.LABEL $label$20
	*(($5 + [-8])) = $9
	$1 = *($2)
	$4 = ($4 + [1])
	if ( ((int_32)$4 == (int_32)[8]) ){ goto $label$2 }
	
.LABEL $label$19
	$5 = $6
	$6 = $7
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$18 }
	$global$0 = ($3 + [80])
	return [1]
	
.LABEL $label$7
	*($5) = $9
	*($1) = $10
	$8 = *($6)
	if ( ((int_64)$8 >= (int_64)$10) ){ goto $label$1 }
	*($1) = $8
	*($6) = $10
	$global$0 = ($3 + [80])
	return [1]
	
.LABEL $label$6
	*($0) = $8
	*($5) = $10
	$8 = *($1)
	if ( ((int_64)$8 >= (int_64)$10) ){ goto $label$3 }
	*($1) = $10
	*($5) = $8
	
.LABEL $label$5
	$8 = $10
	goto $label$3 
	
.LABEL $label$4
	$8 = $9
	
.LABEL $label$3
	$6 = ($6 + [-8])
	$9 = *($6)
	if ( ((int_64)$9 >= (int_64)$8) ){ goto $label$1 }
	*($1) = $9
	*($6) = $8
	$9 = *($5)
	$8 = *($1)
	if ( ((int_64)$8 >= (int_64)$9) ){ goto $label$1 }
	*($1) = $9
	*($5) = $8
	$9 = *($0)
	if ( ((int_64)$8 >= (int_64)$9) ){ goto $label$1 }
	*($0) = $8
	*($5) = $9
	$global$0 = ($3 + [80])
	return [1]
	
.LABEL $label$2
	$4 = ((int_32)$7 == (int_32)$1)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
	$7
	return $4
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18182])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $124($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [32]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	CALL $74(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($5 + [56 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $128($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $70($0, *($1))
	CALL $70($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$6 = (*($2 + [4]) + [-8])
	$7 = *($6)
	$8 = *($3 + [4])
	$11 = (*($0 + [4]) + [-8])
	$12 = *($11)
	$9 = (*($1 + [4]) + [-8])
	$10 = *($9)
	if ( ((int_64)$10 >= (int_64)$12) ){ goto $label$5 }
	if ( ((int_64)$7 >= (int_64)$10) ){ goto $label$4 }
	*($11) = $7
	*($6) = $12
	$13 = [1]
	goto $label$3 
	
.LABEL $label$5
	$13 = [0]
	if ( ((int_64)$7 >= (int_64)$10) ){ goto $label$2 }
	*($9) = $7
	*($6) = $10
	$13 = [1]
	$12 = *($11)
	$7 = *($9)
	if ( ((int_64)$7 >= (int_64)$12) ){ goto $label$1 }
	*($11) = $7
	*($9) = $12
	$10 = *($6)
	$13 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($11) = $10
	*($9) = $12
	$13 = [1]
	$10 = *($6)
	if ( ((int_64)$10 >= (int_64)$12) ){ goto $label$1 }
	*($9) = $10
	*($6) = $12
	$13 = [2]
	
.LABEL $label$3
	$10 = $12
	goto $label$1 
	
.LABEL $label$2
	$10 = $7
	
.LABEL $label$1
	$8 = ($8 + [-8])
	$7 = *($8)
	if ( ((int_64)$7 >= (int_64)$10) ){ goto $label$6 }
	*($6) = $7
	*($8) = $10
	$7 = *($9)
	$10 = *($6)
	if ( ((int_64)$10 >= (int_64)$7) ){ goto $label$8 }
	*($9) = $10
	*($6) = $7
	$7 = *($11)
	$10 = *($9)
	if ( ((int_64)$10 >= (int_64)$7) ){ goto $label$7 }
	*($11) = $10
	*($9) = $7
	$13 = ($13 + [3])
	goto $label$6 
	
.LABEL $label$8
	$13 = ($13 + [1])
	goto $label$6 
	
.LABEL $label$7
	$13 = ($13 + [2])
	
.LABEL $label$6
	$6 = (*($3 + [4]) + [-8])
	$7 = *($6)
	$9 = (*($4 + [4]) + [-8])
	$10 = *($9)
	if ( ((int_64)$10 >= (int_64)$7) ){ goto $label$12 }
	*($6) = $10
	*($9) = $7
	$9 = (*($2 + [4]) + [-8])
	$7 = *($9)
	$10 = *($6)
	if ( ((int_64)$10 >= (int_64)$7) ){ goto $label$11 }
	*($9) = $10
	*($6) = $7
	$6 = (*($1 + [4]) + [-8])
	$7 = *($6)
	$10 = *($9)
	if ( ((int_64)$10 >= (int_64)$7) ){ goto $label$10 }
	*($6) = $10
	*($9) = $7
	$9 = (*($0 + [4]) + [-8])
	$7 = *($9)
	$10 = *($6)
	if ( ((int_64)$10 >= (int_64)$7) ){ goto $label$9 }
	*($9) = $10
	*($6) = $7
	$13 = ($13 + [4])
	
.LABEL $label$12
	return $13
	
.LABEL $label$11
	return ($13 + [1])
	
.LABEL $label$10
	return ($13 + [2])
	
.LABEL $label$9
	return ($13 + [3])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17488])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17488])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [18205])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [216]) == (int_32)$0), [17975])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18021])
	$4 = *($2 + [4])
	$5 = *($2)
	*(($1 + [184])) = *(($5 + [56]))
	*(($1 + [176])) = *(($5 + [48]))
	*(($1 + [168])) = *(($5 + [40]))
	*(($1 + [160])) = *(($5 + [32]))
	*(($1 + [152])) = *(($5 + [24]))
	*(($6 = $3) + [24]) = *(($1 + [8]))
	$7 = ($1 + [192])
	*($6 + [32]) = *($7)
	*($6 + [40]) = *(($1 + [208]))
	*(($1 + [144])) = *(($5 + [16]))
	*(($1 + [136])) = *(($5 + [8]))
	*($1 + [128]) = *($5)
	*($1 + [200]) = *($4)
	$8 = *($1)
	$5 = *($2 + [8])
	$4 = ($1 + [44])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	CALL $66($4, *($5), *($5 + [4]))
	
.LABEL $label$1
	$4 = (($6 + [24]) + [16])
	$9 = (($6 + [24]) + [8])
	*($7) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [18072])
	$7 = *($1 + [44])
	$2 = *(($1 + [48]))
	$10 = ($2 - $7)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [6]))
	$5 = [41]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	$5 = (($10 & [-64]) + $5)
	
.LABEL $label$3
	$2 = ($5 + [152])
	if ( ($2 <= [513]) ){ goto $label$5 }
	$5 = CALL $124($2)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($6 + [12]) = $5
	*($6 + [8]) = $5
	*($6 + [16]) = ($5 + $2)
	CALL $67(($6 + [8]), $1)
	CALL db_update_i64(*(($1 + [220])), (int_64)0, $5, $2)
	if ( ($2 <= [513]) ){ goto $label$6 }
	CALL $128($5)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($6 + [56]) = *(($1 + [8]))
	if ( (CALL $118(($6 + [24]), ($6 + [56]), [8]) == 0) ){ goto $label$8 }
	$5 = *($1 + [224])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$9 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($6 + [48]), $8)
	*(($1 + [224])) = $5
	
.LABEL $label$9
	CALL db_idx64_update($5, (int_64)0, ($6 + [56]))
	
.LABEL $label$8
	*($6 + [56]) = *(($1 + [192]))
	if ( (CALL $118($9, ($6 + [56]), [8]) == 0) ){ goto $label$10 }
	$2 = ($1 + [228])
	$5 = *($2)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$11 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534849, ($6 + [48]), $8)
	*($2) = $5
	
.LABEL $label$11
	CALL db_idx64_update($5, (int_64)0, ($6 + [56]))
	
.LABEL $label$10
	*($6 + [56]) = *(($1 + [208]))
	if ( (CALL $118($4, ($6 + [56]), [8]) == 0) ){ goto $label$12 }
	$1 = ($1 + [232])
	$5 = *($1)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$13 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534850, ($6 + [48]), $8)
	*($1) = $5
	
.LABEL $label$13
	CALL db_idx64_update($5, (int_64)0, ($6 + [56]))
	
.LABEL $label$12
	$global$0 = ($6 + [64])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = CALL $119([16989])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17390])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [16988]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$7 = ((int_64)$5 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17545])
	$5 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_64)$7 | (int_64)4)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $7
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [17594])
	$4 = CALL $119([16989])
	if ( ($4 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [17390])
	goto $label$14 
	
.LABEL $label$15
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$5 = (int_64)0
	
.LOOP $label$16:
	$6 = *(($4 + [16988]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$16 }
	$7 = ((int_64)$5 << (int_64)8)
	goto $label$12 
	
.LABEL $label$13
	$7 = (int_64)0
	
.LABEL $label$12
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17545])
	$5 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_64)$7 | (int_64)4)
	$4 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$5 = $7
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$5 = $7
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$22 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$6 = [0]
	
.LABEL $label$18
	CALL eosio_assert($6, [17594])
	*(($3 + [136])) = [0]
	*($3 + [128]) = (int_64)0
	$4 = CALL $119([17794])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$30 }
	*($3 + [128]) = ($4 << [1])
	$6 = (($3 + [128]) | [1])
	if ( $4 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$9 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($3 + [128]) = ($9 | [1])
	*($3 + [136]) = $6
	*($3 + [132]) = $4
	
.LABEL $label$29
	CALL memcpy($6, [17794], $4)
	
.LABEL $label$28
	*(($6 + $4)) = [0]
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$4 = CALL $119([17830])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$33 }
	*($3 + [112]) = ($4 << [1])
	$6 = (($3 + [112]) | [1])
	if ( $4 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$9 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($3 + [112]) = ($9 | [1])
	*($3 + [120]) = $6
	*($3 + [116]) = $4
	
.LABEL $label$32
	CALL memcpy($6, [17830], $4)
	
.LABEL $label$31
	*(($6 + $4)) = [0]
	*($3 + [64]) = (int_64)3617214756542218240
	*($3 + [56]) = (int_64)7035937868260429120
	*(($3 + [32])) = $8
	*($3 + [16]) = (int_64)-4290654776994968256
	*($3 + [8]) = (int_64)7035937868260429120
	*($3 + [24]) = $1
	CALL $101(($3 + [40]), ($3 + [128]))
	$4 = CALL $10(($3 + [72]), ($3 + [56]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [8]))
	CALL $11(($3 + [144]), $4)
	$6 = *($3 + [144])
	CALL send_inline($6, (*($3 + [148]) - $6))
	$6 = *($3 + [144])
	if ( ($6 == 0) ){ goto $label$34 }
	*($3 + [148]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$34
	$6 = *($4 + [28])
	if ( ($6 == 0) ){ goto $label$35 }
	*(($4 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$35
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$36 }
	*(($4 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$36
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$37
	*($3 + [64]) = (int_64)3617214756542218240
	*($3 + [56]) = (int_64)7035937868260429120
	*(($3 + [32])) = $10
	*($3 + [16]) = (int_64)4932717259859807552
	*($3 + [8]) = (int_64)7035937868260429120
	*($3 + [24]) = $2
	CALL $101(($3 + [40]), ($3 + [112]))
	$4 = CALL $10(($3 + [72]), ($3 + [56]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [8]))
	CALL $11(($3 + [144]), $4)
	$6 = *($3 + [144])
	CALL send_inline($6, (*($3 + [148]) - $6))
	$6 = *($3 + [144])
	if ( ($6 == 0) ){ goto $label$38 }
	*($3 + [148]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$38
	$6 = *($4 + [28])
	if ( ($6 == 0) ){ goto $label$39 }
	*(($4 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$39
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$40 }
	*(($4 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$40
	if ( (*($3 + [40]) & [1]) ){ goto $label$42 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$41 }
	goto $label$25 
	
.LABEL $label$42
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$25 }
	
.LABEL $label$41
	CALL _ZdlPv(*($3 + [120]))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$27
	CALL $100(($3 + [128]))
	
.LABEL $label$26
	CALL $100(($3 + [112]))
	
.LABEL $label$25
	if ( (*($3 + [128]) & [1]) ){ goto $label$23 }
	
.LABEL $label$24
	$global$0 = ($3 + [160])
	return 
	
.LABEL $label$23
	CALL _ZdlPv(*($3 + [136]))
	$global$0 = ($3 + [160])
	(unreachable)
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ($0 + [32])
	$8 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$4 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [18131])
	goto $label$2 
	
.LABEL $label$3
	$9 = CALL db_find_i64(*($6), *(($0 + [40])), (int_64)-2187881461846114304, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $3($6, $9)
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [18131])
	
.LABEL $label$2
	$1 = *($10 + [8])
	$11 = *(($10 + [16]))
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$11), [17860])
	$12 = ((int_64)$1 + (int_64)*($2))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [17903])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [17922])
	$9 = CALL $119([16989])
	if ( ($9 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [17390])
	goto $label$8 
	
.LABEL $label$9
	if ( ($9 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$1 = (int_64)0
	
.LOOP $label$10:
	$8 = *(($9 + [16988]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$11
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$10 }
	$13 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$6 
	
.LABEL $label$7
	$13 = (int_64)4
	
.LABEL $label$6
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $13
	CALL eosio_assert([1], [17545])
	$1 = (uint_64)$13 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$14 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$1 = $14
	$8 = [1]
	$7 = $9
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$1 = $14
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$7 = ($9 + [1])
	$9 = $7
	if ( $8 ){ goto $label$16 }
	$8 = [1]
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$8 = [0]
	
.LABEL $label$12
	CALL eosio_assert($8, [17594])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$13), [17860])
	$1 = *($2)
	*($5 + [16]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [17903])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [17922])
	if ( ($4 == 0) ){ goto $label$17 }
	$15 = *($3 + [8])
	CALL eosio_assert(((int_64)$15 == (int_64)$11), [17703])
	$11 = *($3)
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($12 - $11)) > (int_64)-4611686018427387904), [17751])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [17773])
	if ( ((int_64)$14 <= (int_64)-1) ){ goto $label$18 }
	CALL eosio_assert(((int_64)$15 == (int_64)$13), [17703])
	$1 = (int_64)
	*($5 + [16]) = $1($1 - $11))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [17751])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [17773])
	goto $label$17 
	
.LABEL $label$18
	$9 = CALL $119([16989])
	if ( ($9 <= [8]) ){ goto $label$22 }
	CALL eosio_assert([0], [17390])
	goto $label$21 
	
.LABEL $label$22
	if ( ($9 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$1 = (int_64)0
	
.LOOP $label$23:
	$8 = *(($9 + [16988]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$24 }
	CALL eosio_assert([0], [17435])
	
.LABEL $label$24
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$23 }
	$13 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$19 
	
.LABEL $label$20
	$13 = (int_64)4
	
.LABEL $label$19
	CALL eosio_assert([1], [17545])
	$1 = (uint_64)$13 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$14 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$1 = $14
	$8 = [1]
	$7 = $9
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$1 = $14
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$7 = ($9 + [1])
	$9 = $7
	if ( $8 ){ goto $label$29 }
	$8 = [1]
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$8 = [0]
	
.LABEL $label$25
	CALL eosio_assert($8, [17594])
	*(($5 + [24])) = $13
	*($5 + [16]) = (int_64)0
	
.LABEL $label$17
	*($5 + [12]) = $2
	*($5 + [8]) = ($5 + [16])
	CALL eosio_assert([1], [17940])
	CALL $46($6, $10, (int_64)0, ($5 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [32])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18205])
	CALL memcpy(($1 + [32]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18205])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18205])
	CALL memcpy(($1 + [40]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $80($0, ($1 + [44]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [18205])
	CALL memcpy(($1 + [64]), *($0 + [4]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[31]), [18205])
	CALL memcpy(($1 + [96]), *($0 + [4]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[31]), [18205])
	CALL memcpy(($1 + [128]), *($0 + [4]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[31]), [18205])
	CALL memcpy(($1 + [160]), *($0 + [4]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [192]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [200]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18205])
	CALL memcpy(($1 + [208]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [48]) = [0]
	*($3 + [40]) = (int_64)0
	*($0 + [4 align=4]) = (int_64)0
	$4 = ($0 + [4])
	*($0) = $4
	*($3 + [32]) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((int_32)($3 + [40]) == (int_32)$2) ){ goto $label$1 }
	CALL $43(($3 + [40]), *($2), *($2 + [4]))
	
.LABEL $label$1
	if ( ((int_32)($3 + [24]) == (int_32)$2) ){ goto $label$3 }
	CALL $43(($3 + [24]), *($2), *($2 + [4]))
	$5 = ($2 + [4])
	goto $label$2 
	
.LABEL $label$3
	$5 = ($2 + [4])
	
.LABEL $label$2
	CALL $89(*($3 + [40]), *($3 + [44]), ($3 + [64]))
	$6 = *($3 + [28])
	$7 = *($3 + [24])
	$7 = ((int_64)((int_64)$7 << (int_64)32) | (int_64)$7)
	*($3 + [56]) = $7
	$6 = ((int_64)$6 | (int_64)((int_64)$6 << (int_64)32))
	*($3 + [16]) = $6
	*($3 + [64]) = $6
	*($3 + [8]) = $7
	CALL $44(($3 + [16]), ($3 + [8]), ($3 + [72]))
	$9 = *($2)
	$8 = *($5)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	$10 = [0]
	$11 = ($0 + [4])
	$12 = ($0 + [8])
	
.LOOP $label$5:
	$13 = ($10 << [3])
	$14 = *((*($3 + [24]) + $13))
	$6 = *((*($3 + [40]) + $13))
	$13 = *($4)
	if ( ($13 == 0) ){ goto $label$9 }
	$15 = $4
	$7 = *($13 + [16])
	if ( ((int_64)$6 >= (int_64)$7) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$13 = $4
	$15 = $4
	$17 = [3]
	goto $label$6 
	
.LABEL $label$8
	$17 = [9]
	goto $label$6 
	
.LABEL $label$7
	$17 = [2]
	
.LABEL $label$6
	
.LOOP $label$10:
	goto $label$27 
	
.LABEL $label$31
	$15 = $13
	$13 = $16
	$7 = *($13 + [16])
	if ( ((int_64)$6 >= (int_64)$7) ){ goto $label$20 }
	$17 = [9]
	goto $label$10 
	
.LABEL $label$30
	$16 = *($13)
	if ( $16 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$29
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$15 }
	$17 = [8]
	goto $label$10 
	
.LABEL $label$28
	$15 = ($13 + [4])
	$16 = *($13 + [4])
	if ( ($16 == 0) ){ goto $label$18 }
	$17 = [0]
	goto $label$10 
	
.LABEL $label$27
	$13 = $15
	goto $label$19 
	
.LABEL $label$26
	if ( *($15) ){ goto $label$14 }
	$17 = [5]
	goto $label$10 
	
.LABEL $label$25
	*(($16 = CALL _Znwj([32]))) = (int_64)0
	*($16 + [8]) = $13
	*($15) = $16
	*($16 + [24]) = $14
	*($16 + [16]) = $6
	$13 = *(*($0))
	if ( ($13 == 0) ){ goto $label$11 }
	$17 = [6]
	goto $label$10 
	
.LABEL $label$24
	*($0) = $13
	$16 = *($15)
	$17 = [7]
	goto $label$10 
	
.LABEL $label$23
	CALL $45(*($11), $16)
	*($12) = (*($12) + [1])
	$9 = *($2)
	$8 = *($5)
	goto $label$13 
	
.LABEL $label$22
	$15 = $13
	if ( (*($15) == 0) ){ goto $label$12 }
	$17 = [4]
	goto $label$10 
	
.LABEL $label$21
	$10 = ($10 + [1])
	if ( ($10 <= int_32(($8 - $9) >> [3])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$20
	$17 = [2]
	goto $label$10 
	
.LABEL $label$19
	$17 = [1]
	goto $label$10 
	
.LABEL $label$18
	$17 = [3]
	goto $label$10 
	
.LABEL $label$17
	$17 = [10]
	goto $label$10 
	
.LABEL $label$16
	$17 = [1]
	goto $label$10 
	
.LABEL $label$15
	$17 = [3]
	goto $label$10 
	
.LABEL $label$14
	$17 = [4]
	goto $label$10 
	
.LABEL $label$13
	$17 = [4]
	goto $label$10 
	
.LABEL $label$12
	$17 = [5]
	goto $label$10 
	
.LABEL $label$11
	$17 = [7]
	goto $label$10 
	
.LABEL $label$4
	$13 = *($3 + [24])
	if ( ($13 == 0) ){ goto $label$32 }
	*($3 + [28]) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$32
	$13 = *($3 + [40])
	if ( ($13 == 0) ){ goto $label$33 }
	*($3 + [44]) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$33
	$global$0 = ($3 + [80])
	$17
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $33($0, *($1))
	CALL $33($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $107($0)
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	float_64 $14
	int_64 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$6 = ($global$0 - [64])
	$global$0 = $6
	$7 = (int_64)0
	*($0) = (int_64)0
	$8 = [0]
	*($0 + [8]) = [0]
	*($6 + [56]) = [0]
	*($6 + [48]) = (int_64)0
	$9 = (int_64)($4 == 0)
	if ( $9 ){ goto $label$2 }
	$10 = ((int_64)$4 + (int_64)-1)
	$11 = [0]
	$12 = [0]
	
.LOOP $label$4:
	$13 = *((*($3) + (*((*($2) + $8)) << [3])))
	*($6 + [40]) = $13
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$6 }
	*($12) = $13
	*($6 + [52]) = ($12 + [8])
	$7 = ((int_64)*($6 + [40]) + (int_64)$7)
	if ( ((int_64)($10 == 0) == 0) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	CALL $41(($6 + [48]), ($6 + [40]))
	$7 = ((int_64)*($6 + [40]) + (int_64)$7)
	if ( (int_64)($10 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$10 = ((int_64)$10 + (int_64)-1)
	$8 = ($8 + [8])
	$11 = *((($6 + [48]) + [8]))
	$12 = *($6 + [52])
	goto $label$4 
	
.LABEL $label$3
	$14 = (CASTING float_64)(uint_64 $7)
	goto $label$1 
	
.LABEL $label$2
	$14 = (float_64)0
	
.LABEL $label$1
	$7 = *($5)
	CALL __multi3(($6 + [16]), $7, (int_64)$7 >> (int_64)63), (int_64)10, (int_64)0)
	$10 = *((($6 + [16]) + [8]))
	$13 = *($6 + [16])
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$10 < (int_64)0) : (int_64)($10 == 0) ), [17614])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$10 > (int_64)-1) : ((int_64)$10 == (int_64)-1) ), [17638])
	CALL eosio_assert([1], [17663])
	CALL eosio_assert([1], [17678])
	CALL eosio_assert([1], [17703])
	$15 = (int_64)
	CALL eosio_assert(((int_64)$15($7 - ((int_64)$13 / (int_64)100))) > (int_64)-4611686018427387904), [17751])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [17773])
	*($6 + [40]) = $15
	if ( $9 ){ goto $label$11 }
	$16 = ($0 + [4])
	$13 = $4
	$8 = [0]
	$5 = [0]
	$11 = [0]
	$2 = [0]
	$3 = [0]
	
.LOOP $label$12:
	$12 = $5
	$7 = (int_64)$15 >> (int_64)63)
	$17 = CALL $111(((float_64)((float_64)(CASTING float_64)(uint_64 *((*($6 + [48]) + $8))) / (float_64)$14) * (float_64)(float_64)1e5))
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)9223372036854775808) ){ goto $label$14 }
	$10 = (int_64)-9223372036854775808
	goto $label$13 
	
.LABEL $label$14
	$10 = (Rounds 0)($17)
	
.LABEL $label$13
	CALL __multi3($6, $10, (int_64)$10 >> (int_64)63), $15, $7)
	$7 = *(($6 + [8]))
	$10 = *($6)
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [17614])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [17638])
	CALL eosio_assert([1], [17663])
	CALL eosio_assert([1], [17678])
	$7 = ((int_64)$10 / (int_64)100000)
	*($6 + [32]) = $7
	$5 = ($12 + [1])
	$18 = ( $5 ? [0] : (uint_64)(((int_64)$10 + (int_64)99999) <= (int_64)199999) )
	$19 = (uint_64)(((int_64)$10 + (int_64)-100000) <= (int_64)100000)
	$20 = ( $12 ? [0] : $19 )
	$21 = *(($0 + [8]))
	$12 = *($16)
	if ( ((int_64)$13 != (int_64)1) ){ goto $label$18 }
	if ( ((int_32)$12 == (int_32)$21) ){ goto $label$17 }
	*($12) = *($6 + [40])
	*($16) = ($12 + [8])
	goto $label$15 
	
.LABEL $label$18
	if ( ((int_32)$12 == (int_32)$21) ){ goto $label$16 }
	*($12) = $7
	*($16) = ($12 + [8])
	goto $label$15 
	
.LABEL $label$17
	CALL $42($0, ($6 + [40]))
	goto $label$15 
	
.LABEL $label$16
	CALL $42($0, ($6 + [32]))
	
.LABEL $label$15
	$11 = ($18 + $11)
	$3 = ($3 + $19)
	$2 = ($20 + $2)
	*($6 + [40]) = (int_64))(*($6 + [40]) - *($6 + [32]))
	$8 = ($8 + [8])
	$13 = ((int_64)$13 + (int_64)-1)
	if ( ((int_64)($13 == 0) == 0) ){ goto $label$12 }
	if ( ((uint_32)$3 >= (uint_32)[2]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$2 = [0]
	$11 = [0]
	if ( ([1] == 0) ){ goto $label$9 }
	
.LABEL $label$10
	if ( $11 ){ goto $label$9 }
	$12 = *($6 + [48])
	if ( ($12 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$5 = *($0)
	$8 = $5
	$3 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$19 }
	$12 = ($5 + [8])
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$20 }
	$8 = $5
	
.LOOP $label$21:
	$8 = ( $12 ? $8 : ((int_64)*($8) < (int_64)*($12)) )
	$12 = ($12 + [8])
	if ( ((int_32)$3 != (int_32)$12) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$8 = $5
	
.LABEL $label$19
	$11 = ($11 + $2)
	CALL eosio_assert(((int_32)(*($8) - $11) > (int_32)[1]), [17323])
	$2 = int_32(($8 - $5) >> [3])
	$8 = *($0)
	if ( $9 ){ goto $label$22 }
	$10 = (int_64)0
	$12 = $8
	
.LOOP $label$23:
	$7 = *($12)
	if ( (int_64)($7 == 0) ){ goto $label$25 }
	if ( ((int_64)$7 != (int_64)1) ){ goto $label$24 }
	
.LABEL $label$25
	$10 = ((int_64)$10 + (int_64)1)
	*($12) = $10
	$12 = ($12 + [8])
	if ( ((int_64)$10 != (int_64)$4) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$12 = ($12 + [8])
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)$4) ){ goto $label$23 }
	
.LABEL $label$22
	*(($12 = ($8 + ($2 << [3])))) = (int_64))(*($12) - (CASTING uint_64)(uint_32 $11))
	$12 = *($6 + [48])
	if ( ($12 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	*($6 + [52]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$7
	$global$0 = ($6 + [64])
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $125([8500], $1)
	CALL memset($0, [0], $1)
	return $0
}