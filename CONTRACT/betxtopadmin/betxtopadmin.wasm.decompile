(data (i32.const 8193) "stake\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8285) "bet\00")
(data (i32.const 8289) "Contract has been suspended\00")
(data (i32.const 8317) "error\00")
(data (i32.const 8323) "quantity error\00")
(data (i32.const 8338) "betxtoptoken\00")
(data (i32.const 8351) "BTX\00")
(data (i32.const 8355) "active\00")
(data (i32.const 8362) "symbol does not exist\00")
(data (i32.const 8384) "contract name error\00")
(data (i32.const 8404) "no admin\00")
(data (i32.const 8413) "Not enough token\00")
(data (i32.const 8430) "total error(1)\00")
(data (i32.const 8445) "total error(2)\00")
(data (i32.const 8460) "refund id already exists\00")
(data (i32.const 8485) "refund\00")
(data (i32.const 8492) "not exist\00")
(data (i32.const 8502) "transfer\00")
(data (i32.const 8511) "unstake\00")
(data (i32.const 8519) "already exist\00")
(data (i32.const 8533) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8593) "issue\00")
(data (i32.const 8599) "Welcome to BetX.top\00")
(data (i32.const 8619) "Not found symbol\00")
(data (i32.const 8636) ", \00")
(data (i32.const 8639) "betxtopsign1\00")
(data (i32.const 8652) "payout::payout::error(0)\00")
(data (i32.const 8677) "[ \00")
(data (i32.const 8680) "], \00")
(data (i32.const 8684) "not find paused object\00")
(data (i32.const 8707) "apply, \00")
(data (i32.const 8715) "betxtopadmin\00")
(data (i32.const 8728) "The receiver is not \00")
(data (i32.const 8749) "invalid call\00")
(data (i32.const 8762) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8811) "invalid symbol name\00")
(data (i32.const 8831) "string is too long to be a valid name\00")
(data (i32.const 8869) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8936) "character is not in allowed character set for names\00")
(data (i32.const 8988) "write\00")
(data (i32.const 8994) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9053) "string is too long to be a valid symbol_code\00")
(data (i32.const 9098) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9151) "divide by zero\00")
(data (i32.const 9166) "signed division overflow\00")
(data (i32.const 9191) "multiplication overflow\00")
(data (i32.const 9215) "multiplication underflow\00")
(data (i32.const 9240) "attempt to add asset with different symbol\00")
(data (i32.const 9283) "addition underflow\00")
(data (i32.const 9302) "addition overflow\00")
(data (i32.const 9320) "attempt to subtract asset with different symbol\00")
(data (i32.const 9368) "subtraction underflow\00")
(data (i32.const 9390) "subtraction overflow\00")
(data (i32.const 9411) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9462) "error reading iterator\00")
(data (i32.const 9485) "read\00")
(data (i32.const 9490) "cannot create objects in table of another contract\00")
(data (i32.const 9541) "cannot pass end iterator to modify\00")
(data (i32.const 9576) "object passed to modify is not in multi_index\00")
(data (i32.const 9622) "cannot modify objects in table of another contract\00")
(data (i32.const 9673) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9732) "cannot pass end iterator to erase\00")
(data (i32.const 9766) "cannot increment end iterator\00")
(data (i32.const 9796) "object passed to erase is not in multi_index\00")
(data (i32.const 9841) "cannot erase objects in table of another contract\00")
(data (i32.const 9891) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9944) ".\00")
(data (i32.const 9946) " \00")
(data (i32.const 9948) "get\00")
(data (i32.const 18368) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 18384) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 18400) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "memcpy" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$3 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "send_deferred" (func $fimport$10 (param i32 i64 i32 i32 i32)))
(import "env" "cancel_deferred" (func $fimport$11 (param i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multi3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "printn" (func $fimport$14 (param i64)))
(import "env" "prints" (func $fimport$15 (param i32)))
(import "env" "printi" (func $fimport$16 (param i64)))
(import "env" "require_recipient" (func $fimport$17 (param i64)))
(import "env" "action_data_size" (func $fimport$18 (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "prints_l" (func $fimport$22 (param i32 i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$36 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$37 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$40 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$42 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$43 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$44 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $72))
(export "_ZdlPv" (func $107))
(export "_Znwj" (func $105))
(export "_Znaj" (func $106))
(export "_ZdaPv" (func $108))
(export "_ZnwjSt11align_val_t" (func $109))
(export "_ZnajSt11align_val_t" (func $110))
(export "_ZdlPvSt11align_val_t" (func $111))
(export "_ZdaPvSt11align_val_t" (func $112))
(table $0 18 18 anyfunc)
(elem (i32.const 1) $3 $61 $37 $47 $39 $28 $41 $21 $46 $69 $71 $32 $58 $48 $33 $16 $35)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18416))
(global $global$2 i32 (i32.const 18416))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9485])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9485])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [9948])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = int_32(($6 - $3) >> [4])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $100($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ($8 << [4]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$4 = *($8)
	
.LOOP $label$6:
	$7 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [9485])
	CALL memcpy($3, *($8), [8])
	$4 = (*($8) + [8])
	*($8) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [9485])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [8])) = *($2 + [8])
	$4 = (*($8) + [8])
	*($8) = $4
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8988])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8988])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8988])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $91(CALL $90($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8988])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8988])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $91($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9485])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9485])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8988])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8988])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8988])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8988])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8988])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8988])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8988])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8988])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8988])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8988])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8988])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18356])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18164]
	$3 = (((int_32)$1 * (int_32)[12]) + [18164])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $123 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $122 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $124())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $134($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $135($1)
	
.LABEL $label$2
	*(CALL $124()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $135(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $138($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $131(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $137($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8199])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $137 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9964]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9968])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9964]) = [1]
	$2 = ($2 << [16])
	*([0] + [9968]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9968])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9968]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9964]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9964]) = [1]
	$3 = ($3 << [16])
	*([0] + [9968]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9968])
	
.LABEL $label$10
	*([0] + [9968]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $130(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC $126 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9485])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9485])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $50(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [208])
	$global$0 = $5
	CALL require_auth($1)
	CALL eosio_assert(CALL $10($0, $1), [8317])
	*((($5 + [88]) + [32])) = [0]
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	$1 = *($0)
	*($5 + [88]) = $1
	*($5 + [96]) = $1
	$6 = *($3 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = CALL db_find_i64($1, $1, (int_64)-5915276470426533888, $7)
	if ( ((int_32)$8) < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $49(($5 + [88]), $8)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [88])), [9411])
	$9 = *($0)
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [88])), [9576])
	CALL eosio_assert(((int_64)*($5 + [88]) == (int_64)CALL $fimport$5()), [9622])
	$1 = *($8 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [9240])
	$10 = ((int_64)*($8) + (int_64)*($3))
	*($8) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9283])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [9302])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8)), [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($5 + [128]), $8, [8])
	*($5 + [48]) = *($8 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($5 + [128]) | [8]), ($5 + [48]), [8])
	CALL db_update_i64(*($8 + [20]), $9, ($5 + [128]), [16])
	$8 = (($5 + [88]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$1 }
	*($8) = ((int_64)$1 + (int_64)1)
	goto $label$1 
	
.LABEL $label$2
	$9 = *($0)
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$5()), [9490])
	*(($8 = CALL _Znwj([32])) + [16]) = ($5 + [88])
	*($8 + [8]) = *(($3 + [8]))
	*($8) = *($3)
	CALL eosio_assert([1], [8988])
	CALL memcpy(($5 + [128]), $8, [8])
	*($5 + [48]) = *($8 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($5 + [128]) | [8]), ($5 + [48]), [8])
	$1 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8
	$11 = CALL db_store_i64(*((($5 + [88]) + [8])), (int_64)-5915276470426533888, $9, $1), ($5 + [128]), [16]
	*($8 + [20]) = $11)
	$12 = (($5 + [88]) + [16])
	if ( (uint_64)($1 <= *($12)) ){ goto $label$3 }
	*($12) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$3
	*($5 + [48]) = $8
	$1 = (uint_64)*(($8 + [8])) >> (uint_64)(int_64)8
	*($5 + [128]) = $1)
	*($5 + [8]) = $11
	$13 = ($5 + [116])
	$12 = *($13)
	if ( ((uint_32)$12 >= (uint_32)*(($5 + [120]))) ){ goto $label$5 }
	*($12 + [8]) = $1
	*($12 + [16]) = $11
	*($5 + [48]) = [0]
	*($12) = $8
	*($13) = ($12 + [24])
	$8 = *($5 + [48])
	*($5 + [48]) = [0]
	if ( $8 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	CALL $50(($5 + [112]), ($5 + [48]), ($5 + [128]), ($5 + [8]))
	$8 = *($5 + [48])
	*($5 + [48]) = [0]
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL _ZdlPv($8)
	
.LABEL $label$1
	*(($5 + [80])) = [0]
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	$1 = *($0)
	*($5 + [48]) = $1
	*($5 + [56]) = $1
	$8 = CALL db_find_i64($1, $1, (int_64)3680914790898728960, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$12 = CALL $42(($5 + [48]), $8)
	CALL eosio_assert(((int_32)*($12 + [16]) == (int_32)($5 + [48])), [9411])
	*($5 + [8]) = [8192]
	*($5 + [12]) = CALL $132([8192])
	*($5) = *($5 + [8])
	$8 = CALL $5(($5 + [128]), $5)
	$1 = *($12 + [8])
	if ( ((int_64)$1 == (int_64)*($8)) ){ goto $label$6 }
	*((($5 + [8]) + [32])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$2 = *($0)
	*($5 + [8]) = $2
	*($5 + [16]) = $7
	$8 = CALL db_find_i64($2, $7, (int_64)3680915164365566464, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$9 }
	$8 = CALL $51(($5 + [8]), $8)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($5 + [8])), [9411])
	$2 = *($0)
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($5 + [8])), [9576])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)CALL $fimport$5()), [9622])
	$1 = *($8)
	CALL eosio_assert(((int_64)$6 == (int_64)*(($8 + [16]))), [9240])
	$6 = ((int_64)*($8 + [8]) + (int_64)*($3))
	*($8 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9283])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [9302])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($8 + [32]))), [9240])
	$6 = ((int_64)*($8 + [24]) + (int_64)*($4))
	*($8 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9283])
	CALL eosio_assert(((int_64)*($8 + [24]) < (int_64)4611686018427387904), [9302])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [9673])
	*($5 + [176]) = (($5 + [128]) + [40])
	*($5 + [172]) = ($5 + [128])
	*($5 + [168]) = ($5 + [128])
	*($5 + [184]) = ($5 + [168])
	*($5 + [196]) = ($8 + [8])
	*($5 + [192]) = $8
	*($5 + [200]) = ($8 + [24])
	CALL $52(($5 + [192]), ($5 + [184]))
	CALL db_update_i64(*($8 + [44]), $2, ($5 + [128]), [40])
	$8 = (($5 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$8 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$3 = *($5 + [32])
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$2 = *($0)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)CALL $fimport$5()), [9490])
	*(($8 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = ($5 + [8])
	$1 = *(($12 + [8]))
	*($8 + [8]) = *($3)
	*($8) = $1
	*($8 + [16]) = *(($3 + [8]))
	*($8 + [24]) = *($4)
	*($8 + [32]) = *(($4 + [8]))
	*($5 + [176]) = (($5 + [128]) + [40])
	*($5 + [172]) = ($5 + [128])
	*($5 + [168]) = ($5 + [128])
	*($5 + [184]) = ($5 + [168])
	*($5 + [196]) = ($8 + [8])
	*($5 + [192]) = $8
	*($5 + [200]) = ($8 + [24])
	CALL $52(($5 + [192]), ($5 + [184]))
	$1 = *($8)
	$3 = CALL db_store_i64(*((($5 + [8]) + [8])), (int_64)3680915164365566464, $2, $1, ($5 + [128]), [40])
	*($8 + [44]) = $3
	$0 = ($5 + [24])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$10 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($5 + [192]) = $8
	$1 = *($8)
	*($5 + [128]) = $1
	*($5 + [168]) = $3
	$4 = ($5 + [36])
	$0 = *($4)
	if ( ((uint_32)$0 >= (uint_32)*(($5 + [40]))) ){ goto $label$12 }
	*($0 + [8]) = $1
	*($0 + [16]) = $3
	*($5 + [192]) = [0]
	*($0) = $8
	*($4) = ($0 + [24])
	$8 = *($5 + [192])
	*($5 + [192]) = [0]
	if ( $8 ){ goto $label$11 }
	goto $label$8 
	
.LABEL $label$12
	CALL $53(($5 + [32]), ($5 + [192]), ($5 + [128]), ($5 + [168]))
	$8 = *($5 + [192])
	*($5 + [192]) = [0]
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$11
	CALL _ZdlPv($8)
	
.LABEL $label$8
	$3 = *($5 + [32])
	if ( ($3 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = ($5 + [36])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	CALL _ZdlPv($0)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$15 }
	$8 = *(($5 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$8 = $3
	
.LABEL $label$13
	*($4) = $3
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$3 = *($5 + [72])
	if ( ($3 == 0) ){ goto $label$17 }
	$4 = ($5 + [76])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$21 }
	CALL _ZdlPv($0)
	
.LABEL $label$21
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$20 }
	$8 = *(($5 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$8 = $3
	
.LABEL $label$18
	*($4) = $3
	CALL _ZdlPv($8)
	
.LABEL $label$17
	$3 = *($5 + [112])
	if ( ($3 == 0) ){ goto $label$22 }
	$4 = ($5 + [116])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$24 }
	
.LOOP $label$25:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$26 }
	CALL _ZdlPv($0)
	
.LABEL $label$26
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$25 }
	$8 = *(($5 + [112]))
	goto $label$23 
	
.LABEL $label$24
	$8 = $3
	
.LABEL $label$23
	*($4) = $3
	CALL _ZdlPv($8)
	
.LABEL $label$22
	$global$0 = ($5 + [208])
}

void .FUNC $125 (int_32 $0)
{
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9485])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9485])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL require_auth($1)
	CALL eosio_assert(CALL $10($0, $1), [8317])
	CALL eosio_assert(((int_64)$2 != (int_64)$3), [8317])
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$1 = *($0)
	*($4 + [8]) = $1
	*($4 + [16]) = $1
	$5 = CALL db_find_i64($1, $1, (int_64)3680914790898728960, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $42(($4 + [8]), $5) + [16]) == (int_32)($4 + [8])), [9411])
	$6 = *($4 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = *($0)
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$5()), [9490])
	*(($0 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($0) = $3
	*($0 + [8]) = $2
	CALL eosio_assert([1], [8988])
	CALL memcpy(($4 + [64]), $0, [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($4 + [64]) | [8]), ($0 + [8]), [8])
	$1 = *($0)
	$6 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3680914790898728960, $7, $1, ($4 + [64]), [16])
	*($0 + [20]) = $6
	$5 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$4 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [56]) = $0
	$1 = *($0)
	*($4 + [64]) = $1
	*($4 + [52]) = $6
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($5 + [8]) = $1
	*($5 + [16]) = $6
	*($4 + [56]) = [0]
	*($5) = $0
	*($8) = ($5 + [24])
	$0 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $43(($4 + [32]), ($4 + [56]), ($4 + [64]), ($4 + [52]))
	$0 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $6
	
.LABEL $label$8
	*($8) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9841])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9891])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [176])
	$global$0 = $5
	CALL require_auth($1)
	if ( (CALL $10($0, $1) == 0) ){ goto $label$2 }
	CALL eosio_assert([1], [8317])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [8317])
	
.LABEL $label$1
	$6 = *($3 + [8])
	*((($5 + [120]) + [32])) = [0]
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	$1 = *($0)
	*($5 + [120]) = $1
	*($5 + [128]) = $1
	$7 = [0]
	$8 = CALL db_find_i64($1, $1, (int_64)-4060986531504979968, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$8) < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $11(($5 + [120]), $8)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($5 + [120])), [9411])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8619])
	$1 = *($0)
	*($5 + [80]) = [8355]
	*($5 + [84]) = CALL $132([8355])
	*($5 + [8]) = *($5 + [80])
	*($5 + [72]) = *(CALL $5(($5 + [16]), ($5 + [8])))
	*($5 + [64]) = $1
	$1 = *($7 + [16])
	*($5 + [80]) = [8502]
	*($5 + [84]) = CALL $132([8502])
	*($5) = *($5 + [80])
	$6 = *(CALL $5(($5 + [16]), $5))
	*(($5 + [40])) = *(($3 + [8]))
	*($5 + [24]) = $2
	*($5 + [16]) = *($0)
	*($5 + [32]) = *($3)
	CALL $114((($5 + [16]) + [32]), $4)
	$0 = CALL $29(($5 + [80]), ($5 + [64]), $1, $6, ($5 + [16]))
	CALL $9(($5 + [160]), $0)
	$3 = *($5 + [160])
	CALL send_inline($3, (*($5 + [164]) - $3))
	$3 = *($5 + [160])
	if ( ($3 == 0) ){ goto $label$4 }
	*($5 + [164]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($0 + [28])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($0 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($0 + [16])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($0 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$7
	$7 = *($5 + [144])
	if ( ($7 == 0) ){ goto $label$8 }
	$4 = ($5 + [148])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($5 + [144]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $7
	
.LABEL $label$9
	*($4) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($5 + [176])
}

void .FUNC $46 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL require_auth($1)
	CALL eosio_assert(CALL $10($0, $1), [8317])
	$5 = *($3)
	$3 = CALL $132([8351])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9053])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($3 + [8350]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9098])
	
.LABEL $label$6
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$7 = ((int_64)$1 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8762])
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_64)$7 | (int_64)4)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $7
	$6 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$1 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [8811])
	$3 = CALL $44($3)
	if ( ((int_32)$3 > (int_32)[50]) ){ goto $label$15 }
	$1 = ((int_64)$5 * (int_64)10)
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$3 > (int_32)[60]) ){ goto $label$16 }
	$1 = ((int_64)$5 * (int_64)5)
	goto $label$14 
	
.LABEL $label$16
	if ( ((int_32)$3 > (int_32)[70]) ){ goto $label$17 }
	$1 = ((int_64)((int_64)$5 * (int_64)5) / (int_64)2)
	goto $label$14 
	
.LABEL $label$17
	if ( ((int_32)$3 > (int_32)[80]) ){ goto $label$18 }
	$1 = ((int_64)((int_64)$5 * (int_64)5) / (int_64)4)
	goto $label$14 
	
.LABEL $label$18
	if ( ((int_32)$3 > (int_32)[90]) ){ goto $label$19 }
	$1 = ((int_64)((int_64)$5 * (int_64)5) / (int_64)8)
	goto $label$14 
	
.LABEL $label$19
	if ( ((int_32)$3 > (int_32)[99]) ){ goto $label$13 }
	$1 = ((int_64)((int_64)$5 * (int_64)5) / (int_64)16)
	
.LABEL $label$14
	$7 = *($0)
	*($4 + [48]) = [8355]
	*($4 + [52]) = CALL $132([8355])
	*($4 + [24]) = *($4 + [48])
	*($4 + [112]) = *(CALL $5(($4 + [120]), ($4 + [24])))
	*($4 + [104]) = $7
	*($4 + [88]) = [8338]
	*($4 + [92]) = CALL $132([8338])
	*($4 + [16]) = *($4 + [88])
	$9 = CALL $5(($4 + [96]), ($4 + [16]))
	*($4 + [48]) = [8593]
	*($4 + [52]) = CALL $132([8593])
	*($4 + [8]) = *($4 + [48])
	$7 = *(CALL $5(($4 + [120]), ($4 + [8])))
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$3 = CALL $132([8599])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$22 }
	*($4 + [32]) = ($3 << [1])
	$6 = (($4 + [32]) | [1])
	if ( $3 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$0 = (($3 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*($4 + [32]) = ($0 | [1])
	*($4 + [40]) = $6
	*($4 + [36]) = $3
	
.LABEL $label$21
	CALL memcpy($6, [8599], $3)
	
.LABEL $label$20
	*(($6 + $3)) = [0]
	*(($4 + [64])) = $8
	$3 = ($4 + [40])
	*(($4 + [80])) = *($3)
	*($3) = [0]
	*($4 + [56]) = $1
	*($4 + [48]) = $2
	*($4 + [72]) = *($4 + [32])
	*($4 + [32]) = (int_64)0
	$3 = CALL $12(($4 + [120]), ($4 + [104]), *($9), $7, ($4 + [48]))
	CALL $9(($4 + [160]), $3)
	$6 = *($4 + [160])
	CALL send_inline($6, (*($4 + [164]) - $6))
	$6 = *($4 + [160])
	if ( ($6 == 0) ){ goto $label$23 }
	*($4 + [164]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$23
	$6 = *($3 + [28])
	if ( ($6 == 0) ){ goto $label$24 }
	*(($3 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$24
	$6 = *($3 + [16])
	if ( ($6 == 0) ){ goto $label$25 }
	*(($3 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$25
	if ( ((*(($4 + [72])) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$26
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$13
	$global$0 = ($4 + [176])
	return (unreachable)
	
.LABEL $label$12
	CALL $113(($4 + [32]))
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $96(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $97(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [64])
	$global$0 = $1
	$2 = CALL $132([8351])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9053])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8350]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9098])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	*($1 + [8]) = [8338]
	*($1 + [12]) = CALL $132([8338])
	*($1) = *($1 + [8])
	$2 = CALL $5(($1 + [16]), $1)
	*(($1 + [56])) = [0]
	*($1 + [40]) = (int_64)-1
	*($1 + [48]) = (int_64)0
	$5 = *($2)
	*($1 + [24]) = $5
	*($1 + [32]) = $3
	$2 = [0]
	$4 = CALL db_find_i64($5, $3, (int_64)-4157508551318700032, $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $45(($1 + [24]), $4)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)($1 + [24])), [9411])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8533])
	$6 = (CASTING uint_32)(uint_64 ((int_64)((int_64)*($2) * (int_64)100) / (int_64)*($2 + [16])))
	$7 = *($1 + [48])
	if ( ($7 == 0) ){ goto $label$8 }
	$8 = ($1 + [52])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($1 + [48]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $7
	
.LABEL $label$9
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$global$0 = ($1 + [64])
	return $6
}

int_32 .FUNC $124 ()
{
	return [9956]
}

int_64 .FUNC $128 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $122($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $8($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8988])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8988])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $91(CALL $90($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [176])
	$global$0 = $6
	CALL require_auth($2)
	CALL eosio_assert(((int_32)CALL $7($0) ^ (int_32)[1]), [8289])
	CALL eosio_assert(((int_64)*($0) == (int_64)$3), [8317])
	CALL eosio_assert(((int_64)*($4) > (int_64)0), [8323])
	CALL eosio_assert(CALL $10($0, $1), [8317])
	$7 = *($4 + [8])
	*(($6 + [152])) = [0]
	*($6 + [136]) = (int_64)-1
	*($6 + [144]) = (int_64)0
	$3 = *($0)
	*($6 + [120]) = $3
	*($6 + [128]) = $3
	$8 = [0]
	$9 = CALL db_find_i64($3, $3, (int_64)-4060986531504979968, (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_32)$9) < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $11(($6 + [120]), $9)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($6 + [120])), [9411])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8362])
	CALL eosio_assert(((int_64)*($8 + [16]) == (int_64)*($0 + [8])), [8384])
	$3 = *($0)
	*($6 + [24]) = [8355]
	*($6 + [28]) = CALL $132([8355])
	*($6 + [16]) = *($6 + [24])
	*($6 + [72]) = *(CALL $5(($6 + [80]), ($6 + [16])))
	*($6 + [64]) = $3
	*($6 + [24]) = [8285]
	*($6 + [28]) = CALL $132([8285])
	*($6 + [8]) = *($6 + [24])
	$3 = *(CALL $5(($6 + [80]), ($6 + [8])))
	*(($6 + [40])) = *(($4 + [8]))
	*($6 + [24]) = $2
	*($6 + [32]) = *($4)
	CALL $114(($6 + [48]), $5)
	$0 = CALL $12(($6 + [80]), ($6 + [64]), $1, $3, ($6 + [24]))
	CALL $9(($6 + [160]), $0)
	$4 = *($6 + [160])
	CALL send_inline($4, (*($6 + [164]) - $4))
	$4 = *($6 + [160])
	if ( ($4 == 0) ){ goto $label$2 }
	*($6 + [164]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$4 = *($0 + [28])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($0 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$4 = *($0 + [16])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($0 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($6 + [56])))
	
.LABEL $label$5
	$8 = *($6 + [144])
	if ( ($8 == 0) ){ goto $label$6 }
	$5 = ($6 + [148])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($6 + [144]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $8
	
.LABEL $label$7
	*($5) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($6 + [176])
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	*($1 + [32]) = (int_64)0
	$0 = [0]
	$3 = CALL db_find_i64($2, $2, (int_64)-6217917320849784832, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $13(($1 + [8]), $3)
	CALL eosio_assert(((int_32)*($0 + [4]) == (int_32)($1 + [8])), [9411])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [8684])
	$4 = *($0)
	$5 = *($1 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($1 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($1 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($1 + [48])
	return ((int_32)($4 & [255]) != (int_32)[0])
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL require_auth($1)
	CALL eosio_assert(((int_32)CALL $7($0) ^ (int_32)[1]), [8289])
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [8317])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8323])
	*($5 + [88]) = [8338]
	*($5 + [92]) = CALL $132([8338])
	*($5 + [16]) = *($5 + [88])
	CALL eosio_assert(((int_64)*(CALL $5(($5 + [48]), ($5 + [16]))) == (int_64)*($0 + [8])), [8317])
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	if ( (int_64)($2) == 0) ){ goto $label$4 }
	$6 = [0]
	
.LOOP $label$6:
	*((($5 + [24]) + ($7 = $6))) = $2
	$6 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[5]) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($5 + [56])) = [0]
	*($5 + [48]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$3 }
	*($5 + [48]) = ($6 << [1])
	$8 = (($5 + [48]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($5 + [56])) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [48]) = [0]
	$6 = (($5 + [48]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [48]) = ($9 | [1])
	*($5 + [56]) = $8
	*($5 + [52]) = $6
	
.LABEL $label$2
	$9 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$7:
	*(($8 + $7)) = *((($5 + [24]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$7 }
	$6 = ($8 + $6)
	
.LABEL $label$1
	$7 = [0]
	*($6) = [0]
	$6 = *($5 + [48])
	$8 = CALL $132([8351])
	if ( ((int_32)$8 != (int_32)( *($5 + [52]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$8 }
	$7 = (CALL $121(($5 + [48]), [0], [-1], [8351], $8) == 0)
	
.LABEL $label$8
	CALL eosio_assert($7, [8317])
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($5 + [56]))
	
.LABEL $label$9
	$2 = *($0)
	*($5 + [24]) = [8355]
	*($5 + [28]) = CALL $132([8355])
	*($5 + [8]) = *($5 + [24])
	$10 = *(CALL $5(($5 + [48]), ($5 + [8])))
	$11 = *($0)
	*($5 + [24]) = [8193]
	*($5 + [28]) = CALL $132([8193])
	*($5) = *($5 + [24])
	$12 = *(CALL $5(($5 + [48]), $5))
	*(($8 = (($5 + [24]) + [16]))) = *(($3 + [8]))
	*($5 + [24]) = $1
	*($5 + [48]) = $11
	*($5 + [56]) = $12
	*($5 + [32]) = *($3)
	*(($7 = CALL _Znwj([16]))) = $2
	*($7 + [8]) = $10
	*(($5 + [84])) = [0]
	$6 = ($7 + [16])
	*((($5 + [48]) + [24])) = $6
	*(($5 + [68])) = $6
	*($5 + [64]) = $7
	*($5 + [76 align=4]) = (int_64)0
	CALL $8(($5 + [76]), [24])
	$7 = *($5 + [76])
	$6 = (*(($5 + [80])) - $7)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [8988])
	CALL memcpy($7, ($5 + [24]), [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [8988])
	CALL memcpy(($7 + [8]), (($5 + [24]) + [8]), [8])
	*($5 + [96]) = *($8)
	CALL eosio_assert(((int_32)($6 + [-16]) > (int_32)[7]), [8988])
	CALL memcpy(($7 + [16]), ($5 + [96]), [8])
	CALL $9(($5 + [96]), ($5 + [48]))
	$7 = *($5 + [96])
	CALL send_inline($7, (*($5 + [100]) - $7))
	$7 = *($5 + [96])
	if ( ($7 == 0) ){ goto $label$10 }
	*($5 + [100]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$7 = *($5 + [76])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($5 + [80])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$7 = *($5 + [64])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($5 + [68])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$global$0 = ($5 + [112])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8831])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8936])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8869])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8936])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [160])
	$global$0 = $5
	$7 = *($4)
	$6 = CALL $132([8192])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	if ( (CALL $121($4, [0], [-1], [8192], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($5 + [152]) = [0]
	*($5 + [144]) = (int_64)0
	$7 = CALL $114(($5 + [128]), $4)
	CALL $1($7, [0], ($5 + [144]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$3
	$6 = *($5 + [144])
	if ( ((int_32)*($5 + [148]) == (int_32)$6) ){ goto $label$4 }
	$7 = *($6)
	$8 = CALL $132([8193])
	if ( ((int_32)$8 != (int_32)( *($6 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$9 }
	if ( (CALL $121($6, [0], [-1], [8193], $8) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = *($5 + [144])
	$6 = *($7)
	$8 = CALL $132([8285])
	if ( ((int_32)$8 != (int_32)( *($7 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$5 }
	if ( CALL $121($7, [0], [-1], [8285], $8) ){ goto $label$5 }
	$6 = *($5 + [144])
	if ( (((int_32)(*($5 + [148]) - $6) / (int_32)[12]) <= [3]) ){ goto $label$4 }
	$7 = *($6 + [12])
	if ( ($7 & [1]) ){ goto $label$7 }
	$7 = uint_32($7 >> [1])
	$6 = (($6 + [12]) + [1])
	goto $label$6 
	
.LABEL $label$8
	*(($7 = (($5 + [112]) + [8]))) = *(($3 + [8]))
	*($5 + [112]) = *($3)
	$4 = CALL $114(($5 + [96]), $4)
	*((($5 + [8]) + [8])) = *($7)
	*($5 + [8]) = *($5 + [112])
	CALL $4($0, $1, $2, ($5 + [8]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($4 + [8]))
	goto $label$5 
	
.LABEL $label$7
	$7 = *(($6 + [16]))
	$6 = *(($6 + [20]))
	
.LABEL $label$6
	*($5 + [84]) = $7
	*($5 + [80]) = $6
	*($5 + [40]) = *($5 + [80])
	$7 = CALL $5(($5 + [88]), ($5 + [40]))
	*(($6 = (($5 + [64]) + [8]))) = *(($3 + [8]))
	*($5 + [64]) = *($3)
	$4 = CALL $114(($5 + [48]), $4)
	$9 = *($7)
	*((($5 + [24]) + [8])) = *($6)
	*($5 + [24]) = *($5 + [64])
	CALL $6($0, $9, $1, $2, ($5 + [24]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$5
	$6 = *($5 + [144])
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = *($5 + [148])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($7 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$13
	$7 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	$4 = *($5 + [144])
	goto $label$10 
	
.LABEL $label$11
	$4 = $6
	
.LABEL $label$10
	*($5 + [148]) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($5 + [160])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$6 }
	$5 = uint_32($5 >> [1])
	$6 = ($0 + [1])
	$7 = ($6 + $5)
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	$7 = ($6 + $5)
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $123(*($6)) ){ goto $label$4 }
	$6 = ($6 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$6 = $7
	$5 = [1]
	$8 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$8 }
	$5 = ($6 + [1])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $123(*($5)) == 0) ){ goto $label$10 }
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($6) = *($5)
	$6 = ($6 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	$5 = [1]
	$8 = *($0)
	if ( ($8 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + $5)
	$5 = ($7 + uint_32($8 >> $5))
	goto $label$1 
	
.LABEL $label$2
	$7 = *($0 + [8])
	$5 = ($7 + *($0 + [4]))
	
.LABEL $label$1
	CALL $119($0, ($6 - $7), ($5 - $6))
	$6 = *($0)
	if ( ($6 & [1]) ){ goto $label$14 }
	$5 = ($0 + [1])
	$7 = uint_32($6 >> [1])
	if ( ($7 == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$5 = *($0 + [8])
	$7 = *($0 + [4])
	if ( $7 ){ goto $label$12 }
	
.LABEL $label$13
	$5 = ($3 + [-16])
	$global$0 = $5
	$6 = [0]
	*($5) = [0]
	$7 = [1]
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LOOP $label$15:
	$10 = *($5)
	$9 = $6
	$6 = ($9 + ((int_32)$10 == (int_32)[44]))
	$5 = ($5 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$15 }
	$7 = ($6 + [1])
	$5 = ($3 - ((($7 << [2]) + [15]) & [-16]))
	$global$0 = $5
	$8 = [0]
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	$3 = ($5 + [4])
	$9 = ($9 + ((int_32)$10 == (int_32)[44]))
	
.LOOP $label$16:
	$8 = (CALL $120($0, [44], $8) + [1])
	*($3) = $8
	$3 = ($3 + [4])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$16 }
	
.LABEL $label$11
	$11 = ($5 + ($6 << [2]))
	$12 = ($0 + [4])
	$10 = ($2 + [8])
	
.LOOP $label$17:
	if ( ($6 == 0) ){ goto $label$19 }
	$3 = *($5)
	$8 = ((*(($5 + [4])) + [-1]) - $3)
	goto $label$18 
	
.LABEL $label$19
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$21 }
	$8 = uint_32($3 >> [1])
	goto $label$20 
	
.LABEL $label$21
	$8 = *($12)
	
.LABEL $label$20
	$3 = *($11)
	$8 = ($8 - $3)
	
.LABEL $label$18
	$9 = CALL $115($4, $0, $3, $8, $0)
	$3 = ($2 + [4])
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)*($10)) ){ goto $label$23 }
	*($8) = *($4)
	$8 = ($4 + [8])
	*(($8 + [8])) = *($8)
	*($8) = [0]
	*($3) = (*($3) + [12])
	*($4) = (int_64)0
	$5 = ($5 + [4])
	$6 = ($6 + [-1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$17 }
	goto $label$22 
	
.LABEL $label$23
	CALL $2($2, $9)
	if ( ((*($4) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$24
	$5 = ($5 + [4])
	$6 = ($6 + [-1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$17 }
	
.LABEL $label$22
	$global$0 = ($4 + [16])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9485])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8988])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8988])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = *($2)
	CALL eosio_assert(((int_64)$4 > (int_64)0), [8323])
	$5 = *($0)
	*(($3 + [80])) = [0]
	*($3 + [56]) = $5
	*($3 + [48]) = $5
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$6 = CALL db_find_i64($5, $5, (int_64)-4157661228816138240, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $17(($3 + [48]), $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($3 + [48])), [9411])
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($3 + [48])), [9576])
	CALL eosio_assert(((int_64)*($3 + [48]) == (int_64)CALL $fimport$5()), [9622])
	$1 = *($6)
	$7 = ($6 + [16])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($7)), [9240])
	$8 = ((int_64)*($6 + [8]) + (int_64)$4)
	*($6 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9283])
	CALL eosio_assert(((int_64)*($6 + [8]) < (int_64)4611686018427387904), [9302])
	CALL eosio_assert(((int_64)$1 == (int_64)*($6)), [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy($3, $6, [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 | [8]), ($6 + [8]), [8])
	*($3 + [96]) = *($7)
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 + [16]), ($3 + [96]), [8])
	CALL db_update_i64(*($6 + [28]), $5, $3, [24])
	$6 = (($3 + [48]) + [16])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$1 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$5()), [9490])
	*(($6 = CALL _Znwj([40])) + [24]) = ($3 + [48])
	*($6) = $1
	*($6 + [8]) = *($2)
	*($6 + [16]) = *(($2 + [8]))
	CALL eosio_assert([1], [8988])
	CALL memcpy($3, $6, [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 | [8]), ($6 + [8]), [8])
	*($3 + [96]) = *($6 + [16])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 + [16]), ($3 + [96]), [8])
	$1 = *($6)
	$9 = CALL db_store_i64(*((($3 + [48]) + [8])), (int_64)-4157661228816138240, $5, $1, $3, [24])
	*($6 + [28]) = $9
	$7 = (($3 + [48]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($3 + [96]) = $6
	$1 = *($6)
	*($3) = $1
	*($3 + [120]) = $9
	$10 = ($3 + [76])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($3 + [80]))) ){ goto $label$5 }
	*($7 + [8]) = $1
	*($7 + [16]) = $9
	*($3 + [96]) = [0]
	*($7) = $6
	*($10) = ($7 + [24])
	$6 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $6 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	CALL $18(($3 + [72]), ($3 + [96]), $3, ($3 + [120]))
	$6 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL _ZdlPv($6)
	
.LABEL $label$1
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	$1 = *($0)
	*($3) = $1
	*($3 + [8]) = $1
	*($3 + [24]) = (int_64)0
	$6 = CALL db_find_i64($1, $1, (int_64)-3660748222285835776, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $19($3, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$3), [9411])
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$3), [9576])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$5()), [9622])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($6 + [8])), [9240])
	$1 = ((int_64)*($6) + (int_64)$4)
	*($6) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9283])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [9302])
	CALL eosio_assert([1], [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 + [96]), $6, [8])
	*($3 + [120]) = *($6 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($3 + [96]) | [8]), ($3 + [120]), [8])
	CALL db_update_i64(*($6 + [20]), $5, ($3 + [96]), [16])
	$6 = ($3 + [16])
	if ( ((int_64)(*($6) == 0) == 0) ){ goto $label$8 }
	*($6) = (int_64)1
	$0 = *($3 + [24])
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$5()), [9490])
	*(($6 = CALL _Znwj([32])) + [16]) = $3
	*($6 + [8]) = *(($2 + [8]))
	*($6) = *($2)
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 + [96]), $6, [8])
	*($3 + [120]) = *($6 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($3 + [96]) | [8]), ($3 + [120]), [8])
	$0 = CALL db_store_i64(*(($3 + [8])), (int_64)-3660748222285835776, $5, (int_64)0, ($3 + [96]), [16])
	*($6 + [20]) = $0
	$2 = ($3 + [16])
	if ( ((int_64)*($2) != (int_64)0) ){ goto $label$10 }
	*($2) = (int_64)1
	
.LABEL $label$10
	*($3 + [120]) = $6
	*($3 + [96]) = (int_64)0
	*($3 + [92]) = $0
	$7 = ($3 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($3 + [32]))) ){ goto $label$12 }
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = $0
	*($3 + [120]) = [0]
	*($2) = $6
	*($7) = ($2 + [24])
	$6 = *($3 + [120])
	*($3 + [120]) = [0]
	if ( $6 ){ goto $label$11 }
	goto $label$8 
	
.LABEL $label$12
	CALL $20(($3 + [24]), ($3 + [120]), ($3 + [96]), ($3 + [92]))
	$6 = *($3 + [120])
	*($3 + [120]) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$11
	CALL _ZdlPv($6)
	
.LABEL $label$8
	$0 = *($3 + [24])
	if ( ($0 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$7 = ($3 + [28])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$15 }
	$6 = *(($3 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$6 = $0
	
.LABEL $label$13
	*($7) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$0 = *($3 + [72])
	if ( ($0 == 0) ){ goto $label$17 }
	$7 = ($3 + [76])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$19 }
	
.LOOP $label$20:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	CALL _ZdlPv($2)
	
.LABEL $label$21
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$20 }
	$6 = *(($3 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$6 = $0
	
.LABEL $label$18
	*($7) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$global$0 = ($3 + [128])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9485])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9485])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9485])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $18(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $10 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)7035924439720001536, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $14(($2 + [8]), $0) + [8]) == (int_32)($2 + [8])), [9411])
	$3 = [1]
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	CALL _ZdlPv($7)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
	return $3
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9485])
	CALL memcpy(($3 + [24]), $2, [8])
	*($5) = *($3 + [24])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [9485])
	CALL memcpy(($5 + [8]), ($2 + [8]), [1])
	CALL eosio_assert(((uint_32)($4 + [-9]) > (uint_32)[7]), [9485])
	CALL memcpy(($5 + [16]), ($2 + [9]), [8])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$6 = *($5)
	*($3 + [24]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $34(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $12 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $8($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	$1 = ($1 - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [8988])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [8988])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [24]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [8988])
	CALL memcpy(($7 + [16]), ($5 + [24]), [8])
	*($5 + [12]) = ($7 + [24])
	CALL $15(($5 + [8]), $6)
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([16])) + [4]) = $0
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9485])
	CALL memcpy(($3 + [16]), $2, [1])
	*($4) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($4 + [8]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)0
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $70(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

int_32 .FUNC $75 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9485])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $138($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9485])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9485])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	*($5 + [8]) = *($3 + [24])
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)0
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = $1
	*($3 + [16]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $58 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	float_64 $19
	float_64 $20
	float_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_32 $26
	int_64 $27
	$2 = ($global$0 - [240])
	$global$0 = $2
	CALL require_auth($1)
	CALL eosio_assert(((int_32)CALL $7($0) ^ (int_32)[1]), [8289])
	$3 = [0]
	*((($2 + [184]) + [32])) = [0]
	*($2 + [192]) = $1
	*($2 + [200]) = (int_64)-1
	$4 = *($0)
	*($2 + [184]) = $4
	*($2 + [208]) = (int_64)0
	$5 = CALL db_lowerbound_i64($4, $1, (int_64)5455799419175698432, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = (($2 + [32]) + [32])
	$7 = (($2 + [16]) | [1])
	$8 = (($2 + [32]) | [8])
	$9 = CALL $55(($2 + [184]), $5)
	$10 = (($2 + [144]) + [16])
	$11 = (($2 + [144]) + [24])
	$12 = (($2 + [104]) + [28])
	$13 = ($2 + [72])
	$14 = (($2 + [104]) + [20])
	
.LOOP $label$3:
	$15 = *($9 + [8])
	*($10) = (int_64)-1
	*($11) = (int_64)0
	*((($2 + [144]) + [32])) = [0]
	$4 = *($0)
	*((($2 + [144]) + [8])) = $4
	*($2 + [144]) = $4
	$16 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-4060986531504979968, (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_32)$3) < (int_32)[0]) ){ goto $label$4 }
	$16 = CALL $11(($2 + [144]), $3)
	CALL eosio_assert(((int_32)*($16 + [24]) == (int_32)($2 + [144])), [9411])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [8317])
	$17 = ($9 + [8])
	$4 = *($17)
	$15 = *($9)
	$18 = *($16 + [8])
	$19 = (CASTING float_64)(uint_32 $18)
	$20 = CALL $127((float_64)10, $19)
	$21 = (CASTING float_64)(int_64 $15)
	$3 = ((CASTING uint_32)(uint_64 $4) & [255])
	if ( ((uint_32)$18 <= (uint_32)$3) ){ goto $label$6 }
	$20 = ((float_64)((float_64)$20 / (float_64)CALL $127((float_64)10, (CASTING float_64)(uint_32 $3))) * (float_64)$21)
	goto $label$5 
	
.LABEL $label$6
	$20 = ((float_64)((float_64)$20 * (float_64)$21) / (float_64)CALL $127((float_64)10, (CASTING float_64)(uint_32 $3)))
	
.LABEL $label$5
	$15 = (CASTING uint_64)(uint_32 $18)
	if ( (((float_64)$20 < (float_64)(float_64)18446744073709551615) & ((float_64)$20 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$22 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$22 = (Rounds 0)($20)
	
.LABEL $label$7
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8762])
	$23 = ((int_64)$4 & (int_64)-256)
	$24 = ((int_64)$23 | (int_64)$15)
	$3 = [0]
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	$15 = $4)
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$25 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$15 = $25
	$5 = [1]
	$26 = $3
	$3 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$15 = $25
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$26 = ($3 + [1])
	$3 = $26
	if ( $5 ){ goto $label$13 }
	$5 = [1]
	$3 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$5 = [0]
	
.LABEL $label$9
	CALL eosio_assert($5, [8811])
	$20 = (CASTING float_64)(int_64 $22)
	$21 = CALL $127((float_64)10, (float_64)10)
	if ( ((uint_32)$18 > (uint_32)[9]) ){ goto $label$15 }
	$20 = ((float_64)((float_64)$21 / (float_64)CALL $127((float_64)10, $19)) * (float_64)$20)
	goto $label$14 
	
.LABEL $label$15
	$20 = ((float_64)((float_64)$21 * (float_64)$20) / (float_64)CALL $127((float_64)10, $19))
	
.LABEL $label$14
	if ( (((float_64)$20 < (float_64)(float_64)18446744073709551615) & ((float_64)$20 >= (float_64)(float_64)0)) ){ goto $label$17 }
	$25 = (int_64)0
	goto $label$16 
	
.LABEL $label$17
	$25 = (Rounds 0)($20)
	
.LABEL $label$16
	CALL eosio_assert((uint_64)(((int_64)$25 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8762])
	$23 = ((int_64)$23 | (int_64)10)
	$3 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$15 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$4 = $15
	$5 = [1]
	$26 = $3
	$3 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$4 = $15
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$26 = ($3 + [1])
	$3 = $26
	if ( $5 ){ goto $label$22 }
	$5 = [1]
	$3 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	
.LABEL $label$18
	CALL eosio_assert($5, [8811])
	$4 = *($9)
	$15 = *($17)
	CALL eosio_assert(((int_64)$23 == (int_64)$15), [9320])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($4 - $25)) > (int_64)-4611686018427387904), [9368])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [9390])
	if ( ((int_64)$22 < (int_64)1) ){ goto $label$23 }
	$25 = *($0)
	*($2 + [104]) = [8355]
	*($2 + [108]) = CALL $132([8355])
	*($2 + [8]) = *($2 + [104])
	CALL $5(($2 + [32]), ($2 + [8]))
	*((($2 + [88]) + [8])) = *($2 + [32])
	*($2 + [88]) = $25
	$25 = *($16 + [16])
	*($2 + [104]) = [8502]
	*($2 + [108]) = CALL $132([8502])
	*($2) = *($2 + [104])
	CALL $5(($2 + [32]), $2)
	$23 = *($2 + [32])
	$27 = *($0)
	*(($5 = (($2 + [16]) + [8]))) = [0]
	*($2 + [16]) = (int_64)0
	$3 = CALL $132([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$26 }
	*($2 + [16]) = ($3 << [1])
	$26 = $7
	if ( $3 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$16 = (($3 + [16]) & [-16])
	$26 = CALL _Znwj($16)
	*($5) = $26
	*($2 + [16]) = ($16 | [1])
	*($2 + [20]) = $3
	
.LABEL $label$25
	CALL memcpy($26, [8192], $3)
	
.LABEL $label$24
	*(($26 + $3)) = [0]
	*((($2 + [32]) + [8])) = $1
	*((($2 + [32]) + [16])) = $22
	*((($2 + [32]) + [24])) = $24
	*($6) = *($2 + [16])
	*(($6 + [8])) = *($5)
	*($5) = [0]
	*($2 + [32]) = $27
	*($2 + [16]) = (int_64)0
	CALL $9(($2 + [224]), CALL $29(($2 + [104]), ($2 + [88]), $25, $23, ($2 + [32])))
	$3 = *($2 + [224])
	CALL send_inline($3, (*($2 + [228]) - $3))
	$3 = *($2 + [224])
	if ( ($3 == 0) ){ goto $label$27 }
	*($2 + [228]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$27
	$3 = *($12)
	if ( ($3 == 0) ){ goto $label$28 }
	*((($2 + [104]) + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$3 = *((($2 + [104]) + [16]))
	if ( ($3 == 0) ){ goto $label$29 }
	*($14) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$29
	if ( ((*($6) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($13))
	
.LABEL $label$30
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$23
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$32 }
	$25 = *($0)
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($2 + [184])), [9576])
	CALL eosio_assert(((int_64)*($2 + [184]) == (int_64)CALL $fimport$5()), [9622])
	*($9) = $4
	$4 = *($9 + [8])
	*($9 + [8]) = $15
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)$15 >> (uint_64)(int_64)8)), [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($2 + [32]), $9, [8])
	*($2 + [104]) = *($9 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy($8, ($2 + [104]), [8])
	CALL db_update_i64(*($9 + [20]), $25, ($2 + [32]), [16])
	$3 = (($2 + [184]) + [16])
	if ( (uint_64)($4 <= *($3)) ){ goto $label$33 }
	*($3) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$33
	CALL eosio_assert([1], [9766])
	$3 = ($9 + [20])
	$9 = [0]
	$3 = CALL db_next_i64(*($3), ($2 + [32]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$31 }
	$9 = CALL $55(($2 + [184]), $3)
	goto $label$31 
	
.LABEL $label$32
	$3 = [0]
	$5 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($5, [9732])
	CALL eosio_assert($5, [9766])
	$5 = CALL db_next_i64(*($9 + [20]), ($2 + [32]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$34 }
	$3 = CALL $55(($2 + [184]), $5)
	
.LABEL $label$34
	CALL $59(($2 + [184]), $9)
	$9 = $3
	
.LABEL $label$31
	$4 = *($9 + [8])
	CALL printn(*($0))
	CALL prints([8636])
	CALL printn($1)
	CALL prints([8636])
	CALL $60($9)
	CALL printi($4)
	$26 = *($11)
	if ( ($26 == 0) ){ goto $label$35 }
	$16 = (($2 + [144]) + [28])
	$3 = *($16)
	if ( ((int_32)$3 == (int_32)$26) ){ goto $label$37 }
	
.LOOP $label$38:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$39 }
	CALL _ZdlPv($5)
	
.LABEL $label$39
	if ( ((int_32)$26 != (int_32)$3) ){ goto $label$38 }
	$3 = *($11)
	goto $label$36 
	
.LABEL $label$37
	$3 = $26
	
.LABEL $label$36
	*($16) = $26
	CALL _ZdlPv($3)
	
.LABEL $label$35
	if ( $9 ){ goto $label$3 }
	$3 = [1]
	
.LABEL $label$2
	CALL eosio_assert($3, [8317])
	$26 = *($2 + [208])
	if ( ($26 == 0) ){ goto $label$40 }
	$9 = ($2 + [212])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$26) ){ goto $label$42 }
	
.LOOP $label$43:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$44 }
	CALL _ZdlPv($5)
	
.LABEL $label$44
	if ( ((int_32)$26 != (int_32)$3) ){ goto $label$43 }
	$3 = *(($2 + [208]))
	goto $label$41 
	
.LABEL $label$42
	$3 = $26
	
.LABEL $label$41
	*($9) = $26
	CALL _ZdlPv($3)
	
.LABEL $label$40
	$global$0 = ($2 + [240])
	return (unreachable)
	
.LABEL $label$1
	CALL $113(($2 + [16]))
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9841])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9891])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	CALL $98(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $53(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8988])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8988])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8988])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8988])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [8988])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	float_64 $20
	float_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	$1 = ($global$0 - [176])
	$global$0 = $1
	*((($1 + [104]) + [32])) = [0]
	*($1 + [120]) = (int_64)-1
	$2 = *($0)
	*($1 + [104]) = $2
	*($1 + [112]) = $2
	*($1 + [128]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-4060986531504979968, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = (($1 + [24]) + [24])
	$5 = (($1 + [144]) | [8])
	$6 = CALL $11(($1 + [104]), $3)
	$7 = (($1 + [64]) + [16])
	$8 = (($1 + [64]) + [32])
	$9 = (($1 + [64]) + [28])
	
.LOOP $label$2:
	$10 = *($6 + [8])
	$11 = *($6)
	CALL eosio_assert([1], [8762])
	$2 = ((int_64)$11 & (int_64)72057594037927935)
	$12 = ((int_64)$10 | (int_64)((int_64)$11 << (int_64)8))
	$3 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$11 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$2 = $11
	$13 = [1]
	$14 = $3
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$2 = $11
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$13 = ((int_32)$3 < (int_32)[6])
	$14 = ($3 + [1])
	$3 = $14
	if ( $13 ){ goto $label$7 }
	$13 = [1]
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$13 = [0]
	
.LABEL $label$3
	CALL eosio_assert($13, [8811])
	*($7) = (int_64)-1
	$15 = (int_64)0
	*(($16 = (($1 + [64]) + [24]))) = (int_64)0
	*($8) = [0]
	$2 = *($6)
	*((($1 + [64]) + [8])) = $2
	$11 = *($0)
	*($1 + [64]) = $11
	$3 = CALL db_lowerbound_i64($11, $2, (int_64)3680915164365566464, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$17 = CALL $51(($1 + [64]), $3)
	$15 = (int_64)0
	
.LOOP $label$9:
	$2 = *($17 + [8])
	if ( ((int_64)$2 <= (int_64)0) ){ goto $label$11 }
	$18 = $17
	goto $label$10 
	
.LABEL $label$11
	$18 = $17
	
.LOOP $label$12:
	CALL eosio_assert([1], [9766])
	$3 = CALL db_next_i64(*($18 + [44]), ($1 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$18 = CALL $51(($1 + [64]), $3)
	$2 = *($18 + [8])
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$12 }
	
.LABEL $label$10
	CALL __multi3(($1 + [8]), ( (int_64)20 ? (int_64)10 : ((int_64)$2 > (int_64)10000000) ), (int_64)0, $2, (int_64)$2 >> (int_64)63))
	$10 = *(($18 + [16]))
	$2 = *((($1 + [8]) + [8]))
	$11 = *($1 + [8])
	CALL eosio_assert(( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [9191])
	CALL eosio_assert(( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [9215])
	CALL eosio_assert([1], [9151])
	CALL eosio_assert([1], [9166])
	$19 = ((int_64)$11 / (int_64)100)
	$20 = (CASTING float_64)(int_64 $19)
	$21 = CALL $127((float_64)10, (float_64)10)
	$3 = ((CASTING uint_32)(uint_64 $10) & [255])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$14 }
	$20 = ((float_64)((float_64)$21 / (float_64)CALL $127((float_64)10, (CASTING float_64)(uint_32 $3))) * (float_64)$20)
	goto $label$13 
	
.LABEL $label$14
	$20 = ((float_64)((float_64)$21 * (float_64)$20) / (float_64)CALL $127((float_64)10, (CASTING float_64)(uint_32 $3)))
	
.LABEL $label$13
	if ( (((float_64)$20 < (float_64)(float_64)18446744073709551615) & ((float_64)$20 >= (float_64)(float_64)0)) ){ goto $label$16 }
	$22 = (int_64)0
	goto $label$15 
	
.LABEL $label$16
	$22 = (Rounds 0)($20)
	
.LABEL $label$15
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8762])
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$23 = ((int_64)((int_64)$10 & (int_64)-256) | (int_64)10)
	$3 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$11 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$2 = $11
	$13 = [1]
	$14 = $3
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$2 = $11
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$13 = ((int_32)$3 < (int_32)[6])
	$14 = ($3 + [1])
	$3 = $14
	if ( $13 ){ goto $label$21 }
	$13 = [1]
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$13 = [0]
	
.LABEL $label$17
	CALL eosio_assert($13, [8811])
	*(($13 = (($1 + [24]) + [16]))) = (int_64)-1
	*($4) = (int_64)0
	*(($14 = (($1 + [24]) + [32]))) = [0]
	$2 = *($18)
	*(($17 = (($1 + [24]) + [8]))) = $2
	$11 = *($0)
	*($1 + [24]) = $11
	$3 = CALL db_find_i64($11, $2, (int_64)5455799419175698432, *($6))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$23 }
	$3 = CALL $55(($1 + [24]), $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [24])), [9411])
	$11 = *($0)
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [24])), [9576])
	CALL eosio_assert(((int_64)*($1 + [24]) == (int_64)CALL $fimport$5()), [9622])
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$23 == (int_64)$2), [9240])
	$22 = ((int_64)*($3) + (int_64)$22)
	*($3) = $22
	CALL eosio_assert(((int_64)$22 > (int_64)-4611686018427387904), [9283])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [9302])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$2) == (int_64)(uint_64)*($3 + [8]) >> (uint_64)(int_64)8)), [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($1 + [144]), $3, [8])
	*($1 + [168]) = *($3 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy($5, ($1 + [168]), [8])
	CALL db_update_i64(*($3 + [20]), $11, ($1 + [144]), [16])
	if ( (uint_64)($2 <= *($13)) ){ goto $label$22 }
	*($13) = ((int_64)$2 + (int_64)1)
	goto $label$22 
	
.LABEL $label$23
	$11 = *($0)
	CALL eosio_assert(((int_64)*($1 + [24]) == (int_64)CALL $fimport$5()), [9490])
	*(($3 = CALL _Znwj([32])) + [16]) = ($1 + [24])
	*($3 + [8]) = $23
	*($3) = $22
	CALL eosio_assert([1], [8988])
	CALL memcpy(($1 + [144]), $3, [8])
	*($1 + [168]) = *($3 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy($5, ($1 + [168]), [8])
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	$17 = CALL db_store_i64(*($17), (int_64)5455799419175698432, $11, $2), ($1 + [144]), [16]
	*($3 + [20]) = $17)
	if ( (uint_64)($2 <= *($13)) ){ goto $label$24 }
	*($13) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$24
	*($1 + [168]) = $3
	$2 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8
	*($1 + [144]) = $2)
	*($1 + [164]) = $17
	$24 = (($1 + [24]) + [28])
	$13 = *($24)
	if ( ((uint_32)$13 >= (uint_32)*($14)) ){ goto $label$26 }
	*($13 + [8]) = $2
	*($13 + [16]) = $17
	*($1 + [168]) = [0]
	*($13) = $3
	*($24) = ($13 + [24])
	$3 = *($1 + [168])
	*($1 + [168]) = [0]
	if ( $3 ){ goto $label$25 }
	goto $label$22 
	
.LABEL $label$26
	CALL $56($4, ($1 + [168]), ($1 + [144]), ($1 + [164]))
	$3 = *($1 + [168])
	*($1 + [168]) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	
.LABEL $label$25
	CALL _ZdlPv($3)
	
.LABEL $label$22
	CALL eosio_assert([1], [9732])
	CALL eosio_assert([1], [9766])
	$17 = [0]
	$3 = CALL db_next_i64(*($18 + [44]), ($1 + [144]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$27 }
	$17 = CALL $51(($1 + [64]), $3)
	
.LABEL $label$27
	CALL $57(($1 + [64]), $18)
	CALL eosio_assert(((int_64)$10 == (int_64)$12), [9240])
	$15 = ((int_64)$19 + (int_64)$15)
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [9283])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [9302])
	$14 = *($4)
	if ( ($14 == 0) ){ goto $label$28 }
	$18 = (($1 + [24]) + [28])
	$3 = *($18)
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$30 }
	
.LOOP $label$31:
	$3 = ($3 + [-24])
	$13 = *($3)
	*($3) = [0]
	if ( ($13 == 0) ){ goto $label$32 }
	CALL _ZdlPv($13)
	
.LABEL $label$32
	if ( ((int_32)$14 != (int_32)$3) ){ goto $label$31 }
	$3 = *($4)
	goto $label$29 
	
.LABEL $label$30
	$3 = $14
	
.LABEL $label$29
	*($18) = $14
	CALL _ZdlPv($3)
	
.LABEL $label$28
	if ( $17 ){ goto $label$9 }
	
.LABEL $label$8
	$2 = *($0)
	*((($1 + [24]) + [8])) = $2
	*(($13 = (($1 + [24]) + [16]))) = (int_64)-1
	*($4) = (int_64)0
	*((($1 + [24]) + [32])) = [0]
	*($1 + [24]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)-5915276470426533888, *($6))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$36 }
	$3 = CALL $49(($1 + [24]), $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [24])), [9411])
	if ( ((int_64)$15 <= (int_64)0) ){ goto $label$35 }
	$11 = *($0)
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*(($3 + [16])) == (int_32)($1 + [24])), [9576])
	CALL eosio_assert(((int_64)*($1 + [24]) == (int_64)CALL $fimport$5()), [9622])
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$12 == (int_64)$2), [9320])
	$10 = (int_64)
	*($3) = $10(*($3) - $15))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9368])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [9390])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$2) == (int_64)(uint_64)*($3 + [8]) >> (uint_64)(int_64)8)), [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($1 + [144]), $3, [8])
	*($1 + [168]) = *($3 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy($5, ($1 + [168]), [8])
	CALL db_update_i64(*($3 + [20]), $11, ($1 + [144]), [16])
	if ( (uint_64)($2 <= *($13)) ){ goto $label$35 }
	*($13) = ((int_64)$2 + (int_64)1)
	$14 = *($4)
	if ( $14 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	CALL eosio_assert(((int_64)$15 < (int_64)1), [8317])
	
.LABEL $label$35
	$14 = *($4)
	if ( ($14 == 0) ){ goto $label$33 }
	
.LABEL $label$34
	$18 = (($1 + [24]) + [28])
	$3 = *($18)
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$38 }
	
.LOOP $label$39:
	$3 = ($3 + [-24])
	$13 = *($3)
	*($3) = [0]
	if ( ($13 == 0) ){ goto $label$40 }
	CALL _ZdlPv($13)
	
.LABEL $label$40
	if ( ((int_32)$14 != (int_32)$3) ){ goto $label$39 }
	$3 = *($4)
	goto $label$37 
	
.LABEL $label$38
	$3 = $14
	
.LABEL $label$37
	*($18) = $14
	CALL _ZdlPv($3)
	
.LABEL $label$33
	$14 = *($16)
	if ( ($14 == 0) ){ goto $label$41 }
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$43 }
	
.LOOP $label$44:
	$3 = ($3 + [-24])
	$13 = *($3)
	*($3) = [0]
	if ( ($13 == 0) ){ goto $label$45 }
	CALL _ZdlPv($13)
	
.LABEL $label$45
	if ( ((int_32)$14 != (int_32)$3) ){ goto $label$44 }
	$3 = *($16)
	goto $label$42 
	
.LABEL $label$43
	$3 = $14
	
.LABEL $label$42
	*($9) = $14
	CALL _ZdlPv($3)
	
.LABEL $label$41
	CALL eosio_assert([1], [9766])
	$3 = CALL db_next_i64(*($6 + [28]), ($1 + [64]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $11(($1 + [104]), $3)
	goto $label$2 
	
.LABEL $label$1
	$14 = *($1 + [128])
	if ( ($14 == 0) ){ goto $label$46 }
	$18 = ($1 + [132])
	$3 = *($18)
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$48 }
	
.LOOP $label$49:
	$3 = ($3 + [-24])
	$13 = *($3)
	*($3) = [0]
	if ( ($13 == 0) ){ goto $label$50 }
	CALL _ZdlPv($13)
	
.LABEL $label$50
	if ( ((int_32)$14 != (int_32)$3) ){ goto $label$49 }
	$3 = *(($1 + [128]))
	goto $label$47 
	
.LABEL $label$48
	$3 = $14
	
.LABEL $label$47
	*($18) = $14
	CALL _ZdlPv($3)
	
.LABEL $label$46
	$global$0 = ($1 + [176])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9841])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9891])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $35 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-4060986531504979968, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $11($2, $4)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$2), [9411])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [8492])
	CALL eosio_assert($4, [9732])
	CALL eosio_assert($4, [9766])
	$4 = CALL db_next_i64(*($0 + [28]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $11($2, $4)
	
.LABEL $label$2
	CALL $36($2, $0)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $113 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $138($0)
	
.LABEL $label$1
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $132($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $116($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $8($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $31(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [208])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [200])) = [0]
	*($2 + [176]) = $1
	*($2 + [184]) = (int_64)-1
	$3 = *($0)
	*($2 + [168]) = $3
	*($2 + [192]) = (int_64)0
	$4 = [0]
	$5 = CALL db_find_i64($3, $1, (int_64)-5001342339331915776, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $23(($2 + [168]), $5)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($2 + [168])), [9411])
	
.LABEL $label$1
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [8492])
	$3 = *($0)
	*($2 + [128]) = [8355]
	*($2 + [132]) = CALL $132([8355])
	*($2 + [24]) = *($2 + [128])
	*($2 + [120]) = *(CALL $5(($2 + [48]), ($2 + [24])))
	*($2 + [112]) = $3
	*($2 + [96]) = [8338]
	*($2 + [100]) = CALL $132([8338])
	*($2 + [16]) = *($2 + [96])
	$7 = CALL $5(($2 + [104]), ($2 + [16]))
	*($2 + [128]) = [8502]
	*($2 + [132]) = CALL $132([8502])
	*($2 + [8]) = *($2 + [128])
	$3 = *(CALL $5(($2 + [48]), ($2 + [8])))
	$8 = *($0)
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$0 = CALL $132([8511])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [32]) = ($0 << [1])
	$5 = (($2 + [32]) | [1])
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = (($0 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [32]) = ($9 | [1])
	*($2 + [40]) = $5
	*($2 + [36]) = $0
	
.LABEL $label$4
	CALL memcpy($5, [8511], $0)
	
.LABEL $label$3
	*(($5 + $0)) = [0]
	*($2 + [56]) = $1
	*($2 + [48]) = $8
	*(($2 + [72])) = *(($4 + [8]))
	$1 = *($4)
	$0 = (($2 + [32]) + [8])
	*(($5 = ($2 + [88]))) = *($0)
	*($0) = [0]
	*($2 + [64]) = $1
	*($2 + [80]) = *($2 + [32])
	*($2 + [32]) = (int_64)0
	$0 = CALL $29(($2 + [128]), ($2 + [112]), *($7), $3, ($2 + [48]))
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$6
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$7
	CALL $9(($2 + [48]), $0)
	$5 = *($2 + [48])
	CALL send_inline($5, (*($2 + [52]) - $5))
	$5 = *($2 + [48])
	if ( ($5 == 0) ){ goto $label$8 }
	*($2 + [52]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$8
	CALL eosio_assert($6, [9732])
	CALL eosio_assert($6, [9766])
	$5 = CALL db_next_i64(*($4 + [28]), ($2 + [48]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	CALL $23(($2 + [168]), $5)
	
.LABEL $label$9
	CALL $30(($2 + [168]), $4)
	$4 = *($0 + [28])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($0 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($0 + [16])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($0 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$5 = *($2 + [192])
	if ( ($5 == 0) ){ goto $label$12 }
	$6 = ($2 + [196])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	CALL _ZdlPv($0)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($2 + [192]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $5
	
.LABEL $label$13
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $113(($2 + [32]))
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9485])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9485])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $56(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $138($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL require_auth($1)
	CALL eosio_assert(((int_32)CALL $7($0) ^ (int_32)[1]), [8289])
	$4 = *($2)
	CALL eosio_assert(((int_64)$4 > (int_64)0), [8323])
	$5 = *($0)
	*(($3 + [248])) = [0]
	*($3 + [224]) = $5
	*($3 + [216]) = $5
	*($3 + [232]) = (int_64)-1
	*($3 + [240]) = (int_64)0
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)-4157661228816138240, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $17(($3 + [216]), $7)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($3 + [216])), [9411])
	
.LABEL $label$1
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [8404])
	$9 = *($2 + [8])
	$7 = ($6 + [16])
	CALL eosio_assert(((int_64)*($7) == (int_64)$9), [8994])
	CALL eosio_assert(((int_64)*($6 + [8]) >= (int_64)$4), [8413])
	CALL eosio_assert(((int_64)$9 == (int_64)*($7)), [8994])
	if ( ((int_64)*($6 + [8]) <= (int_64)$4) ){ goto $label$3 }
	CALL eosio_assert($8, [9541])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($3 + [216])), [9576])
	CALL eosio_assert(((int_64)*($3 + [216]) == (int_64)CALL $fimport$5()), [9622])
	$10 = *($6)
	CALL eosio_assert(((int_64)$9 == (int_64)*($7)), [9320])
	$4 = (int_64)
	*($6 + [8]) = $4(*($6 + [8]) - $4))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9368])
	CALL eosio_assert(((int_64)*($6 + [8]) < (int_64)4611686018427387904), [9390])
	CALL eosio_assert(((int_64)$10 == (int_64)*($6)), [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 + [64]), $6, [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($3 + [64]) | [8]), ($6 + [8]), [8])
	*($3 + [176]) = *($7)
	CALL eosio_assert([1], [8988])
	CALL memcpy((($3 + [64]) + [16]), ($3 + [176]), [8])
	CALL db_update_i64(*($6 + [28]), $5, ($3 + [64]), [24])
	if ( (uint_64)($10 <= *((($3 + [216]) + [16]))) ){ goto $label$2 }
	*(($3 + [232])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert($8, [9732])
	CALL eosio_assert($8, [9766])
	$7 = CALL db_next_i64(*($6 + [28]), ($3 + [64]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	CALL $17(($3 + [216]), $7)
	
.LABEL $label$4
	CALL $22(($3 + [216]), $6)
	
.LABEL $label$2
	*(($3 + [208])) = [0]
	*($3 + [192]) = (int_64)-1
	$4 = *($0)
	*($3 + [176]) = $4
	*($3 + [184]) = $4
	*($3 + [200]) = (int_64)0
	$6 = [0]
	$7 = CALL db_find_i64($4, $4, (int_64)-3660748222285835776, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $19(($3 + [176]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [176])), [9411])
	
.LABEL $label$5
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [8430])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)$9), [8994])
	$4 = *($2)
	CALL eosio_assert(((int_64)*($6) >= (int_64)$4), [8445])
	CALL eosio_assert($7, [9541])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [176])), [9576])
	CALL eosio_assert(((int_64)*($3 + [176]) == (int_64)CALL $fimport$5()), [9622])
	CALL eosio_assert(((int_64)$9 == (int_64)*($6 + [8])), [9320])
	$9 = (int_64)
	*($6) = $9(*($6) - $4))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9368])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [9390])
	$7 = [1]
	CALL eosio_assert([1], [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 + [64]), $6, [8])
	*($3 + [136]) = *($6 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($3 + [64]) | [8]), ($3 + [136]), [8])
	CALL db_update_i64(*($6 + [20]), $5, ($3 + [64]), [16])
	$6 = (($3 + [176]) + [16])
	if ( ((int_64)*($6) != (int_64)0) ){ goto $label$6 }
	*($6) = (int_64)1
	
.LABEL $label$6
	*(($3 + [168])) = [0]
	*($3 + [152]) = (int_64)-1
	$9 = *($0)
	*($3 + [136]) = $9
	*($3 + [144]) = $1
	*($3 + [160]) = (int_64)0
	$6 = CALL db_find_i64($9, $1, (int_64)-5001342339331915776, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $23(($3 + [136]), $6) + [24]) == (int_32)($3 + [136])), [9411])
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8460])
	CALL eosio_assert(((int_64)*($3 + [136]) == (int_64)CALL $fimport$5()), [9490])
	*(($6 = CALL _Znwj([40])) + [24]) = ($3 + [136])
	*($6 + [8]) = *(($2 + [8]))
	*($6) = *($2)
	*($6 + [16]) = CALL current_time()
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 + [64]), $6, [8])
	*($3 + [16]) = *($6 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($3 + [64]) | [8]), ($3 + [16]), [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($3 + [64]) + [16]), ($6 + [16]), [8])
	$7 = CALL db_store_i64(*((($3 + [136]) + [8])), (int_64)-5001342339331915776, $5, (int_64)0, ($3 + [64]), [24])
	*($6 + [28]) = $7
	$2 = (($3 + [136]) + [16])
	if ( ((int_64)*($2) != (int_64)0) ){ goto $label$8 }
	*($2) = (int_64)1
	
.LABEL $label$8
	*($3 + [16]) = $6
	*($3 + [64]) = (int_64)0
	*($3 + [256]) = $7
	$8 = ($3 + [164])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($3 + [168]))) ){ goto $label$11 }
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = $7
	*($3 + [16]) = [0]
	*($2) = $6
	*($8) = ($2 + [24])
	$2 = *($3 + [16])
	$6 = [0]
	*($3 + [16]) = [0]
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $24(($3 + [160]), ($3 + [16]), ($3 + [64]), ($3 + [256]))
	$2 = *($3 + [16])
	$6 = [0]
	*($3 + [16]) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$5 = CALL current_time()
	*((($3 + [64]) + [28])) = (int_64)0
	*(($7 = ($3 + [108]))) = (int_64)0
	*(($3 + [116])) = (int_64)0
	*($3 + [76]) = $6
	*($3 + [80]) = $6
	*($3 + [84 align=4]) = (int_64)0
	*($3 + [100 align=4]) = (int_64)0
	*($3 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	$5 = *($0)
	*($3 + [256]) = [8355]
	*($3 + [260]) = CALL $132([8355])
	*($3 + [8]) = *($3 + [256])
	$9 = *(CALL $5(($3 + [16]), ($3 + [8])))
	$4 = *($0)
	*($3 + [256]) = [8485]
	*($3 + [260]) = CALL $132([8485])
	*($3) = *($3 + [256])
	$10 = *(CALL $5(($3 + [16]), $3))
	*(($2 = (($3 + [16]) + [24]))) = $6
	*($3 + [16]) = $4
	*($3 + [256]) = $1
	*($3 + [24]) = $10
	*($3 + [32]) = (int_64)0
	*(($0 = CALL _Znwj([16]))) = $5
	*($0 + [8]) = $9
	*(($8 = (($3 + [16]) + [36]))) = $6
	$6 = ($0 + [16])
	*($2) = $6
	*(($11 = (($3 + [16]) + [20]))) = $6
	*($3 + [32]) = $0
	*($3 + [44 align=4]) = (int_64)0
	$0 = (($3 + [16]) + [28])
	CALL $8($0, [8])
	$6 = *($3 + [44])
	$12 = (($3 + [16]) + [32])
	CALL eosio_assert(((int_32)(*($12) - $6) > (int_32)[7]), [8988])
	CALL memcpy($6, ($3 + [256]), [8])
	$13 = (($3 + [64]) + [40])
	$6 = *($13)
	if ( ((uint_32)$6 >= (uint_32)*($7)) ){ goto $label$14 }
	*($6) = *($3 + [16])
	*($6 + [16]) = [0]
	*(($6 + [8])) = *((($3 + [16]) + [8]))
	*(($7 = ($6 + [20]))) = (int_64)0
	$14 = (($3 + [16]) + [16])
	*($6 + [16]) = *($14)
	*($7) = *($11)
	*(($6 + [24])) = *($2)
	*($2) = [0]
	*($6 + [28 align=4]) = (int_64)0
	*($11) = [0]
	*($14) = [0]
	*(($2 = ($6 + [36]))) = [0]
	*($6 + [28]) = *($0)
	*(($6 + [32])) = *($12)
	*($2) = *($8)
	*($12) = [0]
	*($0) = [0]
	*($8) = [0]
	*($13) = (*($13) + [40])
	$6 = *($3 + [32])
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $25((($3 + [64]) + [36]), ($3 + [16]))
	$6 = *($3 + [44])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($3 + [48])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	*(($3 + [36])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($3 + [84])) = [86400]
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = $1
	CALL $26(($3 + [256]), ($3 + [64]))
	$6 = *($3 + [256])
	CALL send_deferred(($3 + [16]), $1, $6, (*($3 + [260]) - $6), [0])
	$6 = *($3 + [256])
	if ( ($6 == 0) ){ goto $label$16 }
	*($3 + [260]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	CALL $27(($3 + [64]))
	$2 = *($3 + [160])
	if ( ($2 == 0) ){ goto $label$17 }
	$7 = ($3 + [164])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$19 }
	
.LOOP $label$20:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$21 }
	CALL _ZdlPv($0)
	
.LABEL $label$21
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$20 }
	$6 = *(($3 + [160]))
	goto $label$18 
	
.LABEL $label$19
	$6 = $2
	
.LABEL $label$18
	*($7) = $2
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$2 = *($3 + [200])
	if ( ($2 == 0) ){ goto $label$22 }
	$7 = ($3 + [204])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$24 }
	
.LOOP $label$25:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$26 }
	CALL _ZdlPv($0)
	
.LABEL $label$26
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$25 }
	$6 = *(($3 + [200]))
	goto $label$23 
	
.LABEL $label$24
	$6 = $2
	
.LABEL $label$23
	*($7) = $2
	CALL _ZdlPv($6)
	
.LABEL $label$22
	$2 = *($3 + [240])
	if ( ($2 == 0) ){ goto $label$27 }
	$7 = ($3 + [244])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$29 }
	
.LOOP $label$30:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$31 }
	CALL _ZdlPv($0)
	
.LABEL $label$31
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$30 }
	$6 = *(($3 + [240]))
	goto $label$28 
	
.LABEL $label$29
	$6 = $2
	
.LABEL $label$28
	*($7) = $2
	CALL _ZdlPv($6)
	
.LABEL $label$27
	$global$0 = ($3 + [272])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9485])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9485])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	*($5 + [8]) = *($3 + [24])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9485])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)0
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($7) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9841])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9891])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1 + [16 align=4])
	*($1 + [16 align=4]) = (int_64)0
	$4 = ($1 + [24])
	$7 = *($4)
	*($4) = (int_64)0
	$4 = ($1 + [32])
	$8 = *($4)
	*($4) = (int_64)0
	*(($9 = ($2 + ((int_32)$3 * (int_32)[40])))) = *($1)
	*($9 + [16 align=4]) = $6
	*(($9 + [8])) = *(($1 + [8]))
	*(($9 + [24])) = $7
	*(($9 + [32])) = $8
	$10 = ($2 + ((int_32)$5 * (int_32)[40]))
	$11 = ($9 + [40])
	$1 = *($0)
	$12 = *(($0 + [4]))
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$6 }
	$13 = ($1 - $12)
	$2 = [0]
	
.LOOP $label$7:
	$5 = ($12 + $2)
	*((($1 = ($9 + $2)) + [-32])) = *(($5 + [-32]))
	*(($1 + [-40])) = *(($5 + [-40]))
	*(($3 = ($1 + [-24]))) = (int_64)0
	*(($4 = ($1 + [-16]))) = [0]
	$14 = ($5 + [-24])
	*($3) = *($14)
	$3 = ($5 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($1 + [-12]))) = (int_64)0
	*(($1 = ($1 + [-4]))) = [0]
	$4 = ($5 + [-12])
	*($3) = *($4)
	*($14) = (int_64)0
	$5 = ($5 + [-4])
	*($1) = *($5)
	*($5) = [0]
	*($4) = (int_64)0
	$2 = ($2 + [-40])
	if ( ((int_32)$13 != (int_32)$2) ){ goto $label$7 }
	$9 = ($9 + $2)
	$1 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $1
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = *(($1 + [-12]))
	if ( ($5 == 0) ){ goto $label$10 }
	*(($1 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = ($1 + [-40])
	$2 = *(($1 + [-24]))
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$1 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $92($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $8($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $93($2, $1)
	CALL $95(CALL $94(CALL $94($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $133(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9952])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $133(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $135 (int_32 $0)
{
	return CALL $136([9972], $0)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = CALL db_find_i64($3, $3, (int_64)-6217917320849784832, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $13(($2 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)($2 + [8])), [9411])
	$3 = *($0)
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)($2 + [8])), [9576])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$5()), [9622])
	*($4) = $1
	CALL eosio_assert([1], [9673])
	*($2 + [56]) = *($4)
	CALL eosio_assert([1], [8988])
	CALL memcpy(($2 + [64]), ($2 + [56]), [1])
	CALL db_update_i64(*($4 + [8]), $3, ($2 + [64]), [1])
	$0 = ($2 + [24])
	if ( ((int_64)*($0) != (int_64)0) ){ goto $label$3 }
	*($0) = (int_64)1
	$1 = *($2 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$5()), [9490])
	*(($0 = CALL _Znwj([16])) + [4]) = ($2 + [8])
	*($0) = $1
	*($2 + [56]) = $1
	CALL eosio_assert([1], [8988])
	CALL memcpy(($2 + [64]), ($2 + [56]), [1])
	$1 = CALL db_store_i64(*(($2 + [16])), (int_64)-6217917320849784832, $5, (int_64)0, ($2 + [64]), [1])
	*($0 + [8]) = $1
	$4 = (($2 + [8]) + [16])
	if ( ((int_64)*($4) != (int_64)0) ){ goto $label$5 }
	*($4) = (int_64)1
	
.LABEL $label$5
	*($2 + [64]) = $0
	*($2 + [56]) = (int_64)0
	*($2 + [52]) = $1
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($2 + [40]))) ){ goto $label$7 }
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = $1
	*($2 + [64]) = [0]
	*($4) = $0
	*($6) = ($4 + [24])
	$0 = *($2 + [64])
	*($2 + [64]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $70(($2 + [32]), ($2 + [64]), ($2 + [56]), ($2 + [52]))
	$0 = *($2 + [64])
	*($2 + [64]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $1
	
.LABEL $label$8
	*($6) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	float_64 $6
	float_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $127((float_64)10, (float_64)10)
	$7 = (CASTING float_64)(int_64 $5)
	$1 = ((CASTING uint_32)(uint_64 $4) & [255])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$2 }
	$6 = ((float_64)((float_64)$6 / (float_64)CALL $127((float_64)10, (CASTING float_64)(uint_32 $1))) * (float_64)$7)
	goto $label$1 
	
.LABEL $label$2
	$6 = ((float_64)((float_64)$6 * (float_64)$7) / (float_64)CALL $127((float_64)10, (CASTING float_64)(uint_32 $1)))
	
.LABEL $label$1
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$8 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$8 = (Rounds 0)($6)
	
.LABEL $label$3
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8762])
	$1 = [0]
	$9 = (uint_64)$4 >> (uint_64)(int_64)8
	$5 = $9)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$5 = $10
	$11 = [1]
	$12 = $1
	$1 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $10
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$1 < (int_32)[6])
	$12 = ($1 + [1])
	$1 = $12
	if ( $11 ){ goto $label$9 }
	$11 = [1]
	$1 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	
.LABEL $label$5
	CALL eosio_assert($11, [8811])
	*((($3 + [56]) + [32])) = [0]
	*($3 + [72]) = (int_64)-1
	$5 = *($0)
	*($3 + [56]) = $5
	*($3 + [64]) = $5
	*($3 + [80]) = (int_64)0
	$1 = CALL db_lowerbound_i64($5, $5, (int_64)-4157661228816138240, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$10 }
	$13 = ((int_64)((int_64)$4 & (int_64)-256) | (int_64)10)
	$14 = CALL $17(($3 + [56]), $1)
	$15 = ($3 + [24])
	$16 = (($3 + [96]) | [8])
	$7 = (CASTING float_64)(int_64 $8)
	$17 = (CASTING float_64)(int_64 *($2))
	$18 = ($3 + [16])
	$19 = ($3 + [32])
	$20 = ($3 + [28])
	
.LOOP $label$11:
	$5 = *($14 + [8])
	*(($2 = (($3 + [40]) + [8]))) = $13
	$6 = ((float_64)((float_64)(CASTING float_64)(int_64 $5) / (float_64)$17) * (float_64)$7)
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$13 }
	$5 = (int_64)0
	goto $label$12 
	
.LABEL $label$13
	$5 = (Rounds 0)($6)
	
.LABEL $label$12
	*($3 + [40]) = $5
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8762])
	$5 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$5 = $10
	$11 = [1]
	$12 = $1
	$1 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$5 = $10
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = ((int_32)$1 < (int_32)[6])
	$12 = ($1 + [1])
	$1 = $12
	if ( $11 ){ goto $label$18 }
	$11 = [1]
	$1 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$11 = [0]
	
.LABEL $label$14
	CALL eosio_assert($11, [8811])
	CALL prints([8677])
	CALL printn(*($14))
	CALL prints([8636])
	CALL $60(($3 + [40]))
	CALL prints([8680])
	*($18) = (int_64)-1
	*($15) = (int_64)0
	*($19) = [0]
	$5 = *($14)
	*(($11 = ($3 + [8]))) = $5
	$10 = *($0)
	*($3) = $10
	$1 = CALL db_find_i64($10, $5, (int_64)5455799419175698432, $9)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$22 }
	$1 = CALL $55($3, $1)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$3), [9411])
	$10 = *($0)
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$3), [9576])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$5()), [9622])
	$5 = *($1 + [8])
	CALL eosio_assert(((int_64)*($2) == (int_64)$5), [9240])
	$4 = ((int_64)*($1) + (int_64)*($3 + [40]))
	*($1) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9283])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9302])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 + [96]), $1, [8])
	*($3 + [120]) = *($1 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy($16, ($3 + [120]), [8])
	CALL db_update_i64(*($1 + [20]), $10, ($3 + [96]), [16])
	if ( (uint_64)($5 <= *($18)) ){ goto $label$21 }
	*($18) = ((int_64)$5 + (int_64)1)
	$12 = *($15)
	if ( ($12 == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$22
	$10 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$5()), [9490])
	*(($1 = CALL _Znwj([32])) + [16]) = $3
	*($1 + [8]) = *($2)
	*($1) = *($3 + [40])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($3 + [96]), $1, [8])
	*($3 + [120]) = *($1 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy($16, ($3 + [120]), [8])
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	$12 = CALL db_store_i64(*($11), (int_64)5455799419175698432, $10, $5), ($3 + [96]), [16]
	*($1 + [20]) = $12)
	if ( (uint_64)($5 <= *($18)) ){ goto $label$23 }
	*($18) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$23
	*($3 + [120]) = $1
	$5 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8
	*($3 + [96]) = $5)
	*($3 + [116]) = $12
	$11 = *($20)
	if ( ((uint_32)$11 >= (uint_32)*($19)) ){ goto $label$25 }
	*($11 + [8]) = $5
	*($11 + [16]) = $12
	*($3 + [120]) = [0]
	*($11) = $1
	*($20) = ($11 + [24])
	$1 = *($3 + [120])
	*($3 + [120]) = [0]
	if ( $1 ){ goto $label$24 }
	goto $label$21 
	
.LABEL $label$25
	CALL $56($15, ($3 + [120]), ($3 + [96]), ($3 + [116]))
	$1 = *($3 + [120])
	*($3 + [120]) = [0]
	if ( ($1 == 0) ){ goto $label$21 }
	
.LABEL $label$24
	CALL _ZdlPv($1)
	
.LABEL $label$21
	$12 = *($15)
	if ( ($12 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$1 = *($20)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$27 }
	
.LOOP $label$28:
	$1 = ($1 + [-24])
	$11 = *($1)
	*($1) = [0]
	if ( ($11 == 0) ){ goto $label$29 }
	CALL _ZdlPv($11)
	
.LABEL $label$29
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$28 }
	$1 = *($15)
	goto $label$26 
	
.LABEL $label$27
	$1 = $12
	
.LABEL $label$26
	*($20) = $12
	CALL _ZdlPv($1)
	
.LABEL $label$19
	CALL eosio_assert([1], [9766])
	$1 = CALL db_next_i64(*($14 + [28]), $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$10 }
	$14 = CALL $17(($3 + [56]), $1)
	goto $label$11 
	
.LABEL $label$10
	$12 = *($3 + [80])
	if ( ($12 == 0) ){ goto $label$30 }
	$14 = ($3 + [84])
	$1 = *($14)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$32 }
	
.LOOP $label$33:
	$1 = ($1 + [-24])
	$11 = *($1)
	*($1) = [0]
	if ( ($11 == 0) ){ goto $label$34 }
	CALL _ZdlPv($11)
	
.LABEL $label$34
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$33 }
	$1 = *(($3 + [80]))
	goto $label$31 
	
.LABEL $label$32
	$1 = $12
	
.LABEL $label$31
	*($14) = $12
	CALL _ZdlPv($1)
	
.LABEL $label$30
	$global$0 = ($3 + [128])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9841])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9891])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [24]))
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9462])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9485])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $99(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $138($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = CALL current_time()
	$6 = [8]
	$5 = *($5)
	$7 = ($1 + [8])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$1 }
	CALL $101($7, *($5), *($5 + [4]))
	
.LABEL $label$1
	$8 = *($1 + [8])
	$5 = *(($1 + [12]))
	$9 = ($5 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [4]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$3 }
	$6 = (($9 & [-16]) + $6)
	
.LABEL $label$3
	if ( ($6 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($6)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3) = $2
	*($3 + [8]) = ($2 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [8988])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $102($3, $7)
	$10 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($4 + [8]), (int_64)5455799419175987392, *(*($0 + [8])), $10, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$10 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $138($2)
	if ( (uint_64)($10 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [176])
	$global$0 = $1
	*($1 + [120]) = [8639]
	*($1 + [124]) = CALL $132([8639])
	*($1 + [8]) = *($1 + [120])
	CALL require_auth(*(CALL $5(($1 + [128]), ($1 + [8]))))
	*($1 + [112]) = [0]
	*($1 + [104]) = (int_64)0
	*((($1 + [64]) + [32])) = [0]
	*($1 + [80]) = (int_64)-1
	*($1 + [88]) = (int_64)0
	$2 = *($0)
	*($1 + [64]) = $2
	*($1 + [72]) = $2
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-5915276470426533888, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$4 = (($1 + [104]) + [8])
	$3 = CALL $49(($1 + [64]), $3)
	if ( ((int_64)*($3) >= (int_64)1) ){ goto $label$3 }
	$5 = [1]
	goto $label$1 
	
.LABEL $label$3
	$5 = [3]
	goto $label$1 
	
.LABEL $label$2
	$5 = [5]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$78 
	
.LABEL $label$80
	$3 = CALL $49(($1 + [64]), $3)
	if ( ((int_64)*($3) < (int_64)1) ){ goto $label$32 }
	$5 = [3]
	goto $label$4 
	
.LABEL $label$79
	$6 = *($1 + [108])
	if ( ((int_32)$6 == (int_32)*($4)) ){ goto $label$33 }
	$5 = [0]
	goto $label$4 
	
.LABEL $label$78
	*($6) = *($3)
	*(($6 + [8])) = *(($3 + [8]))
	*($1 + [108]) = ($6 + [16])
	goto $label$34 
	
.LABEL $label$77
	CALL $62(($1 + [104]), $3)
	$5 = [1]
	goto $label$4 
	
.LABEL $label$76
	CALL eosio_assert([1], [9766])
	$3 = CALL db_next_i64(*($3 + [20]), ($1 + [24]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$31 }
	$5 = [5]
	goto $label$4 
	
.LABEL $label$75
	CALL $54($0)
	CALL $63($0)
	*((($1 + [24]) + [32])) = [0]
	*($1 + [40]) = (int_64)-1
	$2 = *($0)
	*($1 + [24]) = $2
	*($1 + [32]) = $2
	*($1 + [48]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)5455799419175987392, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$30 }
	$5 = [6]
	goto $label$4 
	
.LABEL $label$74
	$6 = CALL $64(($1 + [24]), $3)
	CALL eosio_assert([1], [9766])
	$3 = [0]
	$6 = CALL db_next_i64(*($6 + [24]), ($1 + [144]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$29 }
	$5 = [7]
	goto $label$4 
	
.LABEL $label$73
	$3 = [0]
	$5 = [8]
	goto $label$4 
	
.LABEL $label$72
	$6 = CALL $64(($1 + [24]), $6)
	CALL eosio_assert([1], [9766])
	$3 = ($3 + [1])
	$6 = CALL db_next_i64(*($6 + [24]), ($1 + [144]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$28 }
	$5 = [9]
	goto $label$4 
	
.LABEL $label$71
	$7 = ($1 + [24])
	if ( ($3 <= [9]) ){ goto $label$27 }
	$5 = [39]
	goto $label$4 
	
.LABEL $label$70
	$6 = ($3 + [-8])
	$8 = ($1 + [32])
	$5 = [40]
	goto $label$4 
	
.LABEL $label$69
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($1 + [24]), *($8), (int_64)5455799419175987392, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$5 = [41]
	goto $label$4 
	
.LABEL $label$68
	$3 = CALL $64(($1 + [24]), $4)
	$5 = [42]
	goto $label$4 
	
.LABEL $label$67
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [9732])
	CALL eosio_assert($4, [9766])
	$4 = CALL db_next_i64(*($3 + [24]), ($1 + [144]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$5 = [43]
	goto $label$4 
	
.LABEL $label$66
	CALL $64(($1 + [24]), $4)
	$5 = [44]
	goto $label$4 
	
.LABEL $label$65
	CALL $65(($1 + [24]), $3)
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$64
	$7 = ($1 + [24])
	$5 = [10]
	goto $label$4 
	
.LABEL $label$63
	$2 = *($0)
	*($1 + [16]) = ($1 + [104])
	*($1 + [168]) = $2
	CALL eosio_assert(((int_64)*($1 + [24]) == (int_64)CALL $fimport$5()), [9490])
	*($1 + [148]) = ($1 + [16])
	*($1 + [144]) = ($1 + [24])
	*($1 + [152]) = ($1 + [168])
	*(($3 = CALL _Znwj([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $7
	CALL $66(($1 + [144]), $3)
	*($1 + [160]) = $3
	$2 = *($3)
	*($1 + [144]) = $2
	$4 = *($3 + [24])
	*($1 + [140]) = $4
	$8 = ($1 + [52])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*((($1 + [24]) + [32]))) ){ goto $label$24 }
	$5 = [38]
	goto $label$4 
	
.LABEL $label$62
	*($6 + [8]) = $2
	*($6 + [16]) = $4
	*($1 + [160]) = [0]
	*($6) = $3
	*($8) = ($6 + [24])
	$3 = *($1 + [160])
	*($1 + [160]) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	$5 = [12]
	goto $label$4 
	
.LABEL $label$61
	$6 = *($3 + [8])
	if ( ($6 == 0) ){ goto $label$21 }
	$5 = [13]
	goto $label$4 
	
.LABEL $label$60
	*(($3 + [12])) = $6
	CALL _ZdlPv($6)
	$5 = [14]
	goto $label$4 
	
.LABEL $label$59
	CALL _ZdlPv($3)
	$8 = *($1 + [48])
	if ( $8 ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$58
	CALL $67(($1 + [48]), ($1 + [160]), ($1 + [144]), ($1 + [140]))
	$3 = *($1 + [160])
	*($1 + [160]) = [0]
	if ( $3 ){ goto $label$23 }
	$5 = [37]
	goto $label$4 
	
.LABEL $label$57
	$8 = *($1 + [48])
	if ( ($8 == 0) ){ goto $label$20 }
	$5 = [15]
	goto $label$4 
	
.LABEL $label$56
	$0 = ($1 + [52])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$17 }
	$5 = [16]
	goto $label$4 
	
.LABEL $label$55
	$5 = [17]
	goto $label$4 
	
.LABEL $label$54
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	$5 = [18]
	goto $label$4 
	
.LABEL $label$53
	$4 = *($6 + [8])
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = [19]
	goto $label$4 
	
.LABEL $label$52
	*(($6 + [12])) = $4
	CALL _ZdlPv($4)
	$5 = [20]
	goto $label$4 
	
.LABEL $label$51
	CALL _ZdlPv($6)
	$5 = [21]
	goto $label$4 
	
.LABEL $label$50
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$16 }
	$5 = [22]
	goto $label$4 
	
.LABEL $label$49
	$3 = *(($1 + [48]))
	goto $label$13 
	
.LABEL $label$48
	$3 = $8
	$5 = [23]
	goto $label$4 
	
.LABEL $label$47
	*($0) = $8
	CALL _ZdlPv($3)
	$5 = [24]
	goto $label$4 
	
.LABEL $label$46
	$4 = *($1 + [88])
	if ( ($4 == 0) ){ goto $label$12 }
	$5 = [25]
	goto $label$4 
	
.LABEL $label$45
	$8 = ($1 + [92])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$11 }
	$5 = [26]
	goto $label$4 
	
.LABEL $label$44
	$5 = [27]
	goto $label$4 
	
.LABEL $label$43
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	$5 = [28]
	goto $label$4 
	
.LABEL $label$42
	CALL _ZdlPv($6)
	$5 = [29]
	goto $label$4 
	
.LABEL $label$41
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$10 }
	$5 = [30]
	goto $label$4 
	
.LABEL $label$40
	$3 = *(($1 + [88]))
	goto $label$8 
	
.LABEL $label$39
	$3 = $4
	$5 = [31]
	goto $label$4 
	
.LABEL $label$38
	*($8) = $4
	CALL _ZdlPv($3)
	$5 = [32]
	goto $label$4 
	
.LABEL $label$37
	$3 = *($1 + [104])
	if ( ($3 == 0) ){ goto $label$7 }
	$5 = [33]
	goto $label$4 
	
.LABEL $label$36
	*($1 + [108]) = $3
	CALL _ZdlPv($3)
	$5 = [34]
	goto $label$4 
	
.LABEL $label$35
	$global$0 = ($1 + [176])
	return 
	
.LABEL $label$34
	$5 = [1]
	goto $label$4 
	
.LABEL $label$33
	$5 = [4]
	goto $label$4 
	
.LABEL $label$32
	$5 = [1]
	goto $label$4 
	
.LABEL $label$31
	$5 = [2]
	goto $label$4 
	
.LABEL $label$30
	$5 = [45]
	goto $label$4 
	
.LABEL $label$29
	$5 = [9]
	goto $label$4 
	
.LABEL $label$28
	$5 = [8]
	goto $label$4 
	
.LABEL $label$27
	$5 = [10]
	goto $label$4 
	
.LABEL $label$26
	$5 = [10]
	goto $label$4 
	
.LABEL $label$25
	$5 = [40]
	goto $label$4 
	
.LABEL $label$24
	$5 = [11]
	goto $label$4 
	
.LABEL $label$23
	$5 = [12]
	goto $label$4 
	
.LABEL $label$22
	$5 = [37]
	goto $label$4 
	
.LABEL $label$21
	$5 = [14]
	goto $label$4 
	
.LABEL $label$20
	$5 = [24]
	goto $label$4 
	
.LABEL $label$19
	$5 = [24]
	goto $label$4 
	
.LABEL $label$18
	$5 = [15]
	goto $label$4 
	
.LABEL $label$17
	$5 = [36]
	goto $label$4 
	
.LABEL $label$16
	$5 = [17]
	goto $label$4 
	
.LABEL $label$15
	$5 = [21]
	goto $label$4 
	
.LABEL $label$14
	$5 = [20]
	goto $label$4 
	
.LABEL $label$13
	$5 = [23]
	goto $label$4 
	
.LABEL $label$12
	$5 = [32]
	goto $label$4 
	
.LABEL $label$11
	$5 = [35]
	goto $label$4 
	
.LABEL $label$10
	$5 = [27]
	goto $label$4 
	
.LABEL $label$9
	$5 = [29]
	goto $label$4 
	
.LABEL $label$8
	$5 = [31]
	goto $label$4 
	
.LABEL $label$7
	$5 = [34]
	goto $label$4 
	
.LABEL $label$6
	$5 = [42]
	goto $label$4 
	
.LABEL $label$5
	$5 = [44]
	goto $label$4 
	$5
}

void .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = *($0 + [8])
	$4 = (CASTING uint_32)(uint_64 $3)
	$5 = ((int_64)$3 & (int_64)255)
	$6 = (int_64)($5 == 0)
	if ( $6 ){ goto $label$2 }
	$3 = ((int_64)$5 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$3:
	$7 = ((int_64)$7 * (int_64)10)
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)1
	
.LABEL $label$1
	$4 = ($4 & [255])
	$8 = ($1 - (($4 + [16]) & [496]))
	$global$0 = $8
	*(($1 = ($8 + $4))) = [0]
	$9 = *($0)
	if ( $6 ){ goto $label$4 }
	$5 = ((int_64)$5 + (int_64)1)
	$3 = ((int_64)$9 % (int_64)$7)
	$1 = ($1 + [-1])
	
.LOOP $label$5:
	$10 = ((int_64)$3 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$10 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$3 = $10
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$9 / (int_64)$7))
	CALL prints([9944])
	CALL prints_l($8, $4)
	CALL prints([9946])
	$3 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$6 }
	$1 = [0]
	
.LOOP $label$8:
	*((($2 + [9]) + $1)) = $3
	$0 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$7 }
	$1 = $0
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	CALL prints_l(($2 + [9]), $0)
	
.LABEL $label$6
	$global$0 = ($2 + [16])
}

void .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$1 = ($global$0 - [192])
	$global$0 = $1
	*((($1 + [120]) + [32])) = [0]
	*($1 + [136]) = (int_64)-1
	$2 = *($0)
	*($1 + [120]) = $2
	*($1 + [128]) = $2
	*($1 + [144]) = (int_64)0
	$3 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)-3660748222285835776, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $19(($1 + [120]), $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [120])), [9411])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8652])
	*(($5 = (($1 + [104]) + [8]))) = *(($3 + [8]))
	*($1 + [104]) = *($3)
	*((($1 + [64]) + [32])) = [0]
	*($1 + [80]) = (int_64)-1
	$2 = *($0)
	*($1 + [64]) = $2
	*($1 + [72]) = $2
	*($1 + [88]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-5915276470426533888, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$6 = (($1 + [160]) | [8])
	$3 = CALL $49(($1 + [64]), $3)
	if ( ((int_64)*($3) > (int_64)0) ){ goto $label$4 }
	$7 = [1]
	goto $label$2 
	
.LABEL $label$4
	$7 = [3]
	goto $label$2 
	
.LABEL $label$3
	$7 = [4]
	
.LABEL $label$2
	
.LOOP $label$5:
	goto $label$39 
	
.LABEL $label$41
	$3 = CALL $49(($1 + [64]), $3)
	if ( ((int_64)*($3) <= (int_64)0) ){ goto $label$17 }
	$7 = [3]
	goto $label$5 
	
.LABEL $label$40
	$4 = ($3 + [8])
	$8 = *($4)
	*((($1 + [48]) + [8])) = $8
	$9 = *($5)
	*((($1 + [32]) + [8])) = $9
	$2 = *($3)
	*((($1 + [16]) + [8])) = $8
	*(($1 + [8])) = $9
	$8 = *($1 + [104])
	*($1 + [32]) = $8
	*($1 + [48]) = $2
	*($1 + [16]) = $2
	*($1) = $8
	CALL $68($0, ($1 + [16]), $1)
	$8 = *($0)
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [64])), [9576])
	CALL eosio_assert(((int_64)*($1 + [64]) == (int_64)CALL $fimport$5()), [9622])
	*($3) = (int_64)0
	$2 = *($4)
	CALL eosio_assert([1], [8762])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$2) == (int_64)(uint_64)*($4) >> (uint_64)(int_64)8)), [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($1 + [160]), $3, [8])
	*($1 + [184]) = *($4)
	CALL eosio_assert([1], [8988])
	CALL memcpy($6, ($1 + [184]), [8])
	CALL db_update_i64(*($3 + [20]), $8, ($1 + [160]), [16])
	$4 = (($1 + [64]) + [16])
	if ( (uint_64)($2 <= *($4)) ){ goto $label$18 }
	$7 = [0]
	goto $label$5 
	
.LABEL $label$39
	*($4) = ((int_64)$2 + (int_64)1)
	$7 = [1]
	goto $label$5 
	
.LABEL $label$38
	CALL eosio_assert([1], [9766])
	$3 = CALL db_next_i64(*(($3 + [20])), ($1 + [160]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$16 }
	$7 = [4]
	goto $label$5 
	
.LABEL $label$37
	$0 = *($1 + [88])
	if ( ($0 == 0) ){ goto $label$15 }
	$7 = [5]
	goto $label$5 
	
.LABEL $label$36
	$5 = ($1 + [92])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$14 }
	$7 = [6]
	goto $label$5 
	
.LABEL $label$35
	$7 = [7]
	goto $label$5 
	
.LABEL $label$34
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	$7 = [8]
	goto $label$5 
	
.LABEL $label$33
	CALL _ZdlPv($4)
	$7 = [9]
	goto $label$5 
	
.LABEL $label$32
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$13 }
	$7 = [10]
	goto $label$5 
	
.LABEL $label$31
	$3 = *(($1 + [88]))
	goto $label$11 
	
.LABEL $label$30
	$3 = $0
	$7 = [11]
	goto $label$5 
	
.LABEL $label$29
	*($5) = $0
	CALL _ZdlPv($3)
	$7 = [12]
	goto $label$5 
	
.LABEL $label$28
	$0 = *($1 + [144])
	if ( ($0 == 0) ){ goto $label$10 }
	$7 = [13]
	goto $label$5 
	
.LABEL $label$27
	$5 = ($1 + [148])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$9 }
	$7 = [14]
	goto $label$5 
	
.LABEL $label$26
	$7 = [15]
	goto $label$5 
	
.LABEL $label$25
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	$7 = [16]
	goto $label$5 
	
.LABEL $label$24
	CALL _ZdlPv($4)
	$7 = [17]
	goto $label$5 
	
.LABEL $label$23
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$8 }
	$7 = [18]
	goto $label$5 
	
.LABEL $label$22
	$3 = *(($1 + [144]))
	goto $label$6 
	
.LABEL $label$21
	$3 = $0
	$7 = [19]
	goto $label$5 
	
.LABEL $label$20
	*($5) = $0
	CALL _ZdlPv($3)
	$7 = [20]
	goto $label$5 
	
.LABEL $label$19
	$global$0 = ($1 + [192])
	return 
	
.LABEL $label$18
	$7 = [1]
	goto $label$5 
	
.LABEL $label$17
	$7 = [1]
	goto $label$5 
	
.LABEL $label$16
	$7 = [2]
	goto $label$5 
	
.LABEL $label$15
	$7 = [12]
	goto $label$5 
	
.LABEL $label$14
	$7 = [22]
	goto $label$5 
	
.LABEL $label$13
	$7 = [7]
	goto $label$5 
	
.LABEL $label$12
	$7 = [9]
	goto $label$5 
	
.LABEL $label$11
	$7 = [11]
	goto $label$5 
	
.LABEL $label$10
	$7 = [20]
	goto $label$5 
	
.LABEL $label$9
	$7 = [21]
	goto $label$5 
	
.LABEL $label$8
	$7 = [15]
	goto $label$5 
	
.LABEL $label$7
	$7 = [17]
	goto $label$5 
	
.LABEL $label$6
	$7 = [19]
	goto $label$5 
	$7
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $122($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [4])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = [268435455]
	if ( ((uint_32)int_32($5 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [4])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [4]) << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $122($0)
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $122($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9948])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $8($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9485])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8988])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8988])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [8]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8988])
	CALL memcpy(*($6), $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $135($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9952])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $135($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $104 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = ($global$0 - [48])
	$global$0 = $5
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$4 = CALL $114($5, $4)
	$3 = CALL $114(($5 + [16]), $3)
	$2 = CALL $114(($5 + [32]), $2)
	CALL void $7((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $0))
	if ( (*($4) & [1]) ){ goto $label$6 }
	if ( (*($3) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($2) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($5 + [48])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	$1 = CALL $114($2, ($1 + [32]))
	$4 = CALL $114(($2 + [16]), ($1 + [20]))
	$3 = CALL $114(($2 + [32]), ($1 + [8]))
	CALL $104($0, *($1), $3, $4, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $103($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $117($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $117($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $113($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9485])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9485])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [40])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9485])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $114(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $114(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9485])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9485])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $88(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $83 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9485])
	CALL memcpy($4, $2, [8])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $138($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

int_32 .FUNC $82 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = [0]
	*($4 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9485])
	CALL memcpy(($4 + [8]), $2, [8])
	*($4 + [40]) = *($4 + [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [9485])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [1])
	CALL eosio_assert(((uint_32)($7 + [-9]) > (uint_32)[7]), [9485])
	CALL memcpy(($4 + [56]), ($2 + [9]), [8])
	*(($4 + [28])) = ($2 + [17])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$8 = *($4 + [48])
	$1 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 ($8 & [255])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $138($2)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $81 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [96]) + [24]))) = (int_64)0
	*(($8 = ($4 + [136]))) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = ($2 + $7)
	*($4 + [224]) = ($4 + [80])
	*($4 + [48]) = ($4 + [96])
	CALL $87(($4 + [48]), ($4 + [224]))
	*(($9 = (($4 + [32]) + [8]))) = *($4 + [88])
	*($4 + [32]) = *($4 + [80])
	*(($10 = (($4 + [208]) + [8]))) = *($9)
	*($4 + [208]) = *($4 + [32])
	$9 = *($10)
	*((($4 + [224]) + [8])) = $9
	*((($4 + [48]) + [24])) = $9
	*($4 + [48]) = $0
	*($4 + [56]) = $1
	$0 = *($4 + [208])
	*($4 + [64]) = $0
	*($4 + [224]) = $0
	*(($9 = (($4 + [160]) + [8]))) = *($3)
	*(($3 = (($4 + [144]) + [8]))) = *($8)
	*($4 + [160]) = *($4 + [112])
	*($4 + [144]) = *($4 + [128])
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	*((($4 + [192]) + [8])) = *($3)
	*((($4 + [176]) + [8])) = *($9)
	*($4 + [192]) = *($4 + [144])
	*($4 + [176]) = *($4 + [160])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [176]) + [8]))
	*((($4 + [224]) + [8])) = $11
	$12 = *((($4 + [192]) + [8]))
	*((($4 + [208]) + [8])) = $12
	*((($4 + [16]) + [8])) = $11
	*(($4 + [8])) = $12
	$11 = *($4 + [176])
	*($4 + [224]) = $11
	$12 = *($4 + [192])
	*($4 + [208]) = $12
	*($4 + [16]) = $11
	*($4) = $12
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [16])), (int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $138($2)
	
.LABEL $label$6
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $80 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9485])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	CALL $88(($4 + [56]), (($4 + [72]) + [8]))
	CALL $88(($4 + [56]), ($4 + [92]))
	CALL $88(($4 + [56]), ($4 + [104]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $89(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$10 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $138($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [112])))
	if ( ((*($4 + [92]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [92]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [100])))
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [352])
	$global$0 = $3
	CALL memory()
	CALL prints([8707])
	CALL printn($0)
	CALL prints([8636])
	CALL printn($1)
	CALL prints([8636])
	CALL printn($2)
	CALL prints([8636])
	*($3 + [336]) = [8715]
	*($3 + [340]) = CALL $132([8715])
	*($3 + [152]) = *($3 + [336])
	CALL $5(($3 + [344]), ($3 + [152]))
	*(($3 + [312])) = [0]
	*($3 + [304]) = (int_64)0
	$4 = CALL $132([8728])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	$5 = ((int_64)$0 == (int_64)4229967272322309424)
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [304]) = ($4 << [1])
	$6 = (($3 + [304]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3 + [304]) = ($7 | [1])
	*($3 + [312]) = $6
	*($3 + [308]) = $4
	
.LABEL $label$4
	CALL memcpy($6, [8728], $4)
	
.LABEL $label$3
	*(($6 + $4)) = [0]
	$4 = CALL $118(($3 + [304]), [8715])
	$7 = ($4 + [8])
	*(($6 = (($3 + [320]) + [8]))) = *($7)
	*($3 + [320]) = *($4)
	*($4) = (int_64)0
	*($7) = [0]
	CALL eosio_assert($5, ( *($6) ? (($3 + [320]) | [1]) : (*($3 + [320]) & [1]) ))
	if ( ((*($3 + [320]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$6
	if ( ((*($3 + [304]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($3 + [312]))
	
.LABEL $label$7
	*($3 + [296]) = [8502]
	*($3 + [300]) = CALL $132([8502])
	*($3 + [144]) = *($3 + [296])
	CALL $5(($3 + [320]), ($3 + [144]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$8 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [1]
	*($3 + [8]) = *($3 + [288])
	CALL $73($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$0 != (int_64)$1) ){ goto $label$17 }
	if ( ((int_64)$2 > (int_64)-2115976827699724289) ){ goto $label$24 }
	if ( ((int_64)$2 > (int_64)-4994048603321270273) ){ goto $label$23 }
	if ( ((int_64)$2 > (int_64)-5915276470426533889) ){ goto $label$21 }
	if ( ((int_64)$2 == (int_64)-6217917475468607488) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)-6215726818809348096) ){ goto $label$17 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [2]
	*($3 + [112]) = *($3 + [184])
	CALL $74($0, $0, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$24
	if ( ((int_64)$2 > (int_64)4921564679018381311) ){ goto $label$22 }
	if ( ((int_64)$2 > (int_64)3626399668466352127) ){ goto $label$20 }
	if ( ((int_64)$2 == (int_64)-2115976827699724288) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)3626175369360441344) ){ goto $label$17 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [3]
	*($3 + [64]) = *($3 + [232])
	CALL $75($0, $0, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$23
	if ( ((int_64)$2 > (int_64)-4157661383434960897) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)-4994048603321270272) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-4420673558282764288) ){ goto $label$17 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [4]
	*($3 + [96]) = *($3 + [200])
	CALL $73($0, $0, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$22
	if ( ((int_64)$2 > (int_64)5378299923513475071) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)5378075624407564288) ){ goto $label$17 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [5]
	*($3 + [72]) = *($3 + [224])
	CALL $75($0, $0, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$21
	if ( ((int_64)$2 == (int_64)-5915276470426533888) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-5001342339331915776) ){ goto $label$17 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [6]
	*($3 + [32]) = *($3 + [264])
	CALL $75($0, $0, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$20
	if ( ((int_64)$2 == (int_64)3626399668466352128) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)4298284734440013824) ){ goto $label$17 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [7]
	*($3 + [80]) = *($3 + [216])
	CALL $76($0, $0, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)-4157661383434960896) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-3102536759825661952) ){ goto $label$17 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [8]
	*($3 + [24]) = *($3 + [272])
	CALL $77($0, $0, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)5378299923513475072) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$17 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [9]
	*($3 + [88]) = *($3 + [208])
	CALL $78($0, $0, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$17
	CALL eosio_assert([0], [8749])
	goto $label$1 
	
.LABEL $label$16
	*($3 + [172]) = [0]
	*($3 + [168]) = [10]
	*($3 + [128]) = *($3 + [168])
	CALL $79($0, $0, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$15
	*($3 + [164]) = [0]
	*($3 + [160]) = [11]
	*($3 + [136]) = *($3 + [160])
	CALL $80($0, $0, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [260]) = [0]
	*($3 + [256]) = [12]
	*($3 + [40]) = *($3 + [256])
	CALL $75($0, $0, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$13
	*($3 + [180]) = [0]
	*($3 + [176]) = [13]
	*($3 + [120]) = *($3 + [176])
	CALL $75($0, $0, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [196]) = [0]
	*($3 + [192]) = [14]
	*($3 + [104]) = *($3 + [192])
	CALL $81($0, $0, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [252]) = [0]
	*($3 + [248]) = [15]
	*($3 + [48]) = *($3 + [248])
	CALL $82($0, $0, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [284]) = [0]
	*($3 + [280]) = [16]
	*($3 + [16]) = *($3 + [280])
	CALL $77($0, $0, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [244]) = [0]
	*($3 + [240]) = [17]
	*($3 + [56]) = *($3 + [240])
	CALL $83($0, $0, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$2
	CALL $113(($3 + [304]))
	
.LABEL $label$1
	CALL $125([0])
	$global$0 = ($3 + [352])
	(unreachable)
}

int_32 .FUNC $73 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $84(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $85(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $138($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($5 + [16]) = [8639]
	*($5 + [20]) = CALL $132([8639])
	*($5 + [8]) = *($5 + [16])
	CALL require_auth(*(CALL $5(($5 + [24]), ($5 + [8]))))
	CALL require_recipient($1)
	$global$0 = ($5 + [32])
}

int_32 .FUNC $76 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9485])
	CALL memcpy(($4 + [40]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9485])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9485])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $138($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $77 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9485])
	CALL memcpy(($4 + [56]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9485])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [9485])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [96])
	*($4 + [8]) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $138($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $74 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $138($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $39 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)7035924439720001536, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $14($2, $4)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$2), [9411])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [8492])
	CALL eosio_assert($4, [9732])
	CALL eosio_assert($4, [9766])
	$4 = CALL db_next_i64(*($0 + [12]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $14($2, $4)
	
.LABEL $label$2
	CALL $40($2, $0)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9841])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9891])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $37 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [1]
	$5 = CALL db_find_i64($3, $3, (int_64)7035924439720001536, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $14(($2 + [8]), $5) + [8]) == (int_32)($2 + [8])), [9411])
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8519])
	$6 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$5()), [9490])
	*(($0 = CALL _Znwj([24])) + [8]) = ($2 + [8])
	*($0) = $1
	CALL eosio_assert([1], [8988])
	CALL memcpy(($2 + [64]), $0, [8])
	$3 = *($0)
	$5 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)7035924439720001536, $6, $3, ($2 + [64]), [8])
	*($0 + [12]) = $5
	$4 = ($2 + [24])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($2 + [56]) = $0
	$3 = *($0)
	*($2 + [64]) = $3
	*($2 + [52]) = $5
	$7 = ($2 + [36])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($2 + [40]))) ){ goto $label$5 }
	*($4 + [8]) = $3
	*($4 + [16]) = $5
	*($2 + [56]) = [0]
	*($4) = $0
	*($7) = ($4 + [24])
	$0 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $38(($2 + [32]), ($2 + [56]), ($2 + [64]), ($2 + [52]))
	$0 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$6 }
	$7 = ($2 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($7) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($2 + [80])
}

int_32 .FUNC $78 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [80]) + [24]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [144]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $86(($4 + [32]), ($4 + [144]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4 + [16])
	$9 = *($3)
	*((($4 + [144]) + [8])) = $9
	*((($4 + [32]) + [24])) = $9
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [128])
	*($4 + [48]) = $0
	*($4 + [144]) = $0
	*(($9 = (($4 + [112]) + [8]))) = *($8)
	*($4 + [112]) = *($4 + [96])
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	*($3) = *($9)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$10 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $10
	*(($4 + [8])) = $10
	$10 = *($4 + [128])
	*($4) = $10
	*($4 + [144]) = $10
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $138($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $79 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9485])
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $138($2)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $32 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [176])
	$global$0 = $2
	CALL require_auth($1)
	CALL eosio_assert(((int_32)CALL $7($0) ^ (int_32)[1]), [8289])
	*(($2 + [128])) = [0]
	*($2 + [104]) = $1
	*($2 + [112]) = (int_64)-1
	$3 = *($0)
	*($2 + [96]) = $3
	*($2 + [120]) = (int_64)0
	$4 = [0]
	$5 = CALL db_find_i64($3, $1, (int_64)-5001342339331915776, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $23(($2 + [96]), $5)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($2 + [96])), [9411])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8492])
	CALL eosio_assert($5, [9732])
	CALL eosio_assert($5, [9766])
	$5 = CALL db_next_i64(*($4 + [28]), ($2 + [48]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $23(($2 + [96]), $5)
	
.LABEL $label$2
	CALL $30(($2 + [96]), $4)
	*($2 + [56]) = (int_64)0
	*($2 + [48]) = $1
	CALL cancel_deferred(($2 + [48]))
	$3 = *($0)
	*(($2 + [80])) = [0]
	*($2 + [56]) = $3
	*($2 + [48]) = $3
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	$5 = CALL db_find_i64($3, $3, (int_64)-4157661228816138240, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $17(($2 + [48]), $5)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($2 + [48])), [9411])
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($2 + [48])), [9576])
	CALL eosio_assert(((int_64)*($2 + [48]) == (int_64)CALL $fimport$5()), [9622])
	$1 = *($5)
	$6 = ($5 + [16])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*($6)), [9240])
	$7 = ((int_64)*($5 + [8]) + (int_64)*($4))
	*($5 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9283])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [9302])
	CALL eosio_assert(((int_64)$1 == (int_64)*($5)), [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy($2, $5, [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($2 | [8]), ($5 + [8]), [8])
	*($2 + [144]) = *($6)
	CALL eosio_assert([1], [8988])
	CALL memcpy(($2 + [16]), ($2 + [144]), [8])
	CALL db_update_i64(*($5 + [28]), $3, $2, [24])
	$5 = (($2 + [48]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$3 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($2 + [48]) == (int_64)CALL $fimport$5()), [9490])
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = ($2 + [48])
	*($5) = $1
	*($5 + [16]) = *(($4 + [8]))
	*($5 + [8]) = *($4)
	CALL eosio_assert([1], [8988])
	CALL memcpy($2, $5, [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($2 | [8]), ($5 + [8]), [8])
	*($2 + [144]) = *($5 + [16])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($2 + [16]), ($2 + [144]), [8])
	$1 = *($5)
	$8 = CALL db_store_i64(*((($2 + [48]) + [8])), (int_64)-4157661228816138240, $3, $1, $2, [24])
	*($5 + [28]) = $8
	$6 = (($2 + [48]) + [16])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [144]) = $5
	$1 = *($5)
	*($2) = $1
	*($2 + [168]) = $8
	$9 = ($2 + [76])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*(($2 + [80]))) ){ goto $label$7 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($2 + [144]) = [0]
	*($6) = $5
	*($9) = ($6 + [24])
	$5 = *($2 + [144])
	*($2 + [144]) = [0]
	if ( $5 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $18(($2 + [72]), ($2 + [144]), $2, ($2 + [168]))
	$5 = *($2 + [144])
	*($2 + [144]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($5)
	
.LABEL $label$3
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$1 = *($0)
	*($2) = $1
	*($2 + [8]) = $1
	*($2 + [24]) = (int_64)0
	$5 = CALL db_find_i64($1, $1, (int_64)-3660748222285835776, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$5 = CALL $19($2, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$2), [9411])
	CALL eosio_assert([1], [9541])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$2), [9576])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$5()), [9622])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*($5 + [8])), [9240])
	$1 = ((int_64)*($5) + (int_64)*($4))
	*($5) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9283])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [9302])
	CALL eosio_assert([1], [9673])
	CALL eosio_assert([1], [8988])
	CALL memcpy(($2 + [144]), $5, [8])
	*($2 + [168]) = *($5 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($2 + [144]) | [8]), ($2 + [168]), [8])
	CALL db_update_i64(*($5 + [20]), $3, ($2 + [144]), [16])
	$4 = ($2 + [16])
	if ( ((int_64)(*($4) == 0) == 0) ){ goto $label$10 }
	*($4) = (int_64)1
	$0 = *($2 + [24])
	if ( $0 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$5()), [9490])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $2
	*($5 + [8]) = *(($4 + [8]))
	*($5) = *($4)
	CALL eosio_assert([1], [8988])
	CALL memcpy(($2 + [144]), $5, [8])
	*($2 + [168]) = *($5 + [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($2 + [144]) | [8]), ($2 + [168]), [8])
	$0 = CALL db_store_i64(*(($2 + [8])), (int_64)-3660748222285835776, $3, (int_64)0, ($2 + [144]), [16])
	*($5 + [20]) = $0
	$4 = ($2 + [16])
	if ( ((int_64)*($4) != (int_64)0) ){ goto $label$12 }
	*($4) = (int_64)1
	
.LABEL $label$12
	*($2 + [168]) = $5
	*($2 + [144]) = (int_64)0
	*($2 + [140]) = $0
	$6 = ($2 + [28])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($2 + [32]))) ){ goto $label$14 }
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = $0
	*($2 + [168]) = [0]
	*($4) = $5
	*($6) = ($4 + [24])
	$4 = *($2 + [168])
	*($2 + [168]) = [0]
	if ( $4 ){ goto $label$13 }
	goto $label$10 
	
.LABEL $label$14
	CALL $20(($2 + [24]), ($2 + [168]), ($2 + [144]), ($2 + [140]))
	$4 = *($2 + [168])
	*($2 + [168]) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	
.LABEL $label$13
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$0 = *($2 + [24])
	if ( ($0 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$6 = ($2 + [28])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$17 }
	$4 = *(($2 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $0
	
.LABEL $label$15
	*($6) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$0 = *($2 + [72])
	if ( ($0 == 0) ){ goto $label$19 }
	$6 = ($2 + [76])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$23 }
	CALL _ZdlPv($5)
	
.LABEL $label$23
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($2 + [72]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $0
	
.LABEL $label$20
	*($6) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$0 = *($2 + [120])
	if ( ($0 == 0) ){ goto $label$24 }
	$6 = ($2 + [124])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$28 }
	CALL _ZdlPv($5)
	
.LABEL $label$28
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($2 + [120]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $0
	
.LABEL $label$25
	*($6) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$24
	$global$0 = ($2 + [176])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$5 = *($0)
	*($4) = $5
	*($4 + [8]) = $5
	$6 = [1]
	$7 = CALL db_find_i64($5, $5, (int_64)-4060986531504979968, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $11($4, $7) + [24]) == (int_32)$4), [9411])
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8519])
	$5 = *($0)
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$5()), [9490])
	*(($0 = CALL _Znwj([40])) + [24]) = $4
	*($0 + [8]) = $2
	*($0) = $1
	*($0 + [16]) = $3
	*($4 + [72]) = $1
	CALL eosio_assert([1], [8988])
	CALL memcpy(($4 + [48]), ($4 + [72]), [8])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($4 + [48]) | [8]), ($0 + [8]), [1])
	CALL eosio_assert([1], [8988])
	CALL memcpy((($4 + [48]) | [9]), ($0 + [16]), [8])
	$1 = *($0)
	$2 = CALL db_store_i64(*(($4 + [8])), (int_64)-4060986531504979968, $5, $1, ($4 + [48]), [17])
	*($0 + [28]) = $2
	$6 = ($4 + [16])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$2 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($4 + [72]) = $0
	$1 = *($0)
	*($4 + [48]) = $1
	*($4 + [44]) = $2
	$7 = ($4 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($4 + [32]))) ){ goto $label$5 }
	*($6 + [8]) = $1
	*($6 + [16]) = $2
	*($4 + [72]) = [0]
	*($6) = $0
	*($7) = ($6 + [24])
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $34(($4 + [24]), ($4 + [72]), ($4 + [48]), ($4 + [44]))
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$2 = *($4 + [24])
	if ( ($2 == 0) ){ goto $label$6 }
	$7 = ($4 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($4 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $2
	
.LABEL $label$7
	*($7) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($4 + [80])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9841])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [9891])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8988])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8988])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8988])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8988])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $15(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_64 .FUNC $129 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_64 .FUNC $127 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $129($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $126($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [18384])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [18368]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [18400]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $128($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}