(data (i32.const 4) "\f0i\00\00")
(data (i32.const 16) "\00")
(data (i32.const 288) "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\00")
(data (i32.const 352) "EOS\00")
(data (i32.const 368) "PUB_R1_\00")
(data (i32.const 384) "unrecognized public key format\00")
(data (i32.const 416) "invalid base-58 value\00")
(data (i32.const 448) "base-58 value is out of range\00")
(data (i32.const 480) "eosio\00")
(data (i32.const 496) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 560) "RAMCORE market not found\00")
(data (i32.const 592) "invalid symbol name\00")
(data (i32.const 624) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 688) "error reading iterator\00")
(data (i32.const 720) "read\00")
(data (i32.const 736) "onerror\00")
(data (i32.const 752) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 816) "eosio.token\00")
(data (i32.const 832) "cannot pass end iterator to erase\00")
(data (i32.const 880) "cannot increment end iterator\00")
(data (i32.const 912) "object passed to erase is not in multi_index\00")
(data (i32.const 960) "cannot erase objects in table of another contract\00")
(data (i32.const 1024) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1088) "get\00")
(data (i32.const 1104) "unexpected error in fixed_key constructor\00")
(data (i32.const 1152) "cannot pass end iterator to modify\00")
(data (i32.const 1200) "cannot create objects in table of another contract\00")
(data (i32.const 1264) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1328) "write\00")
(data (i32.const 1344) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1408) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1456) "object passed to modify is not in multi_index\00")
(data (i32.const 1504) "cannot modify objects in table of another contract\00")
(data (i32.const 1568) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1632) "chinesegamer\00")
(data (i32.const 1648) "Invalid token transfer\00")
(data (i32.const 1680) "Quantity must be positive\00")
(data (i32.const 1712) "unable to find secondary key\00")
(data (i32.const 1744) "Malformed Memo (not right length)\00")
(data (i32.const 1792) "Malformed Memo [12] == : or -\00")
(data (i32.const 1824) "attempt to add asset with different symbol\00")
(data (i32.const 1872) "addition underflow\00")
(data (i32.const 1904) "addition overflow\00")
(data (i32.const 1936) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 2000) "Not enough money\00")
(data (i32.const 2032) "attempt to subtract asset with different symbol\00")
(data (i32.const 2080) "subtraction underflow\00")
(data (i32.const 2112) "subtraction overflow\00")
(data (i32.const 2144) "active\00")
(data (i32.const 2160) "savepoorsvip\00")
(data (i32.const 2176) "Account creation fee\00")
(data (i32.const 2208) "Initial balance\00")
(data (i32.const 2224) "Must be CORE_SYMBOL\00")
(data (i32.const 10640) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx256_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_idx256_remove" (func $fimport$9 (param i32)))
(import "env" "db_idx256_store" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx256_update" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$12 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$13 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$15 (param i32)))
(import "env" "db_idx64_store" (func $fimport$16 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$17 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_store_i64" (func $fimport$22 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$23 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$24 (param i32 i32)))
(import "env" "memcpy" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$29 (param i64)))
(import "env" "require_auth2" (func $fimport$30 (param i64 i64)))
(import "env" "send_inline" (func $fimport$31 (param i32 i32)))
(import "env" "sha256" (func $fimport$32 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN6abieos14get_base58_mapEv" (func $5))
(export "_ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE" (func $6))
(export "_ZN5eosio11buyrambytesEm" (func $8))
(export "apply" (func $13))
(export "malloc" (func $62))
(export "free" (func $65))
(export "memcmp" (func $74))
(export "strlen" (func $75))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $76 $14 $16 $18)



void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	*([0] + [4]) = $14
	*($14 + [32]) = [0]
	*($14 + [24]) = (int_64)0
	$2 = ($0 + [16])
	*($14 + [16]) = $2
	*($14 + [40]) = (int_64)0
	CALL $20(($14 + [8]), ($14 + [16]), ($14 + [40]))
	$12 = *($14 + [12])
	if ( ($12 == 0) ){ goto $label$1 }
	$13 = ($14 + [32])
	
.LOOP $label$3:
	if ( ((uint_32)*($12 + [8]) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$2 }
	$5 = *($14 + [28])
	if ( ((int_32)$5 == (int_32)*($13)) ){ goto $label$5 }
	*($14 + [28]) = (CALL memcpy($5, $12, [128]) + [128])
	goto $label$4 
	
.LABEL $label$5
	CALL $21(($14 + [24]), $12)
	
.LABEL $label$4
	CALL $22(($14 + [8]))
	$12 = *($14 + [12])
	if ( $12 ){ goto $label$3 }
	
.LABEL $label$2
	$10 = *($14 + [28])
	$11 = *($14 + [24])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$6 }
	$6 = ($0 + [40])
	$7 = ($0 + [44])
	$8 = ($0 + [24])
	$9 = ($0 + [16])
	
.LOOP $label$7:
	$3 = *($11)
	$4 = *($6)
	$13 = *($7)
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$8 }
	$12 = ($13 + [-24])
	$0 = ([0] - $4)
	
.LOOP $label$9:
	if ( ((int_64)*(*($12)) == (int_64)$3) ){ goto $label$8 }
	$13 = $12
	$5 = ($12 + [-24])
	$12 = $5
	if ( ((int_32)($5 + $0) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$11 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [128]) == (int_32)$2), [496])
	goto $label$10 
	
.LABEL $label$11
	$12 = [0]
	$5 = CALL db_find_i64(*($9), *($8), (int_64)-6497942746098040832, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$12 = CALL $23($2, $5)
	CALL eosio_assert(((int_32)*($12 + [128]) == (int_32)$2), [496])
	
.LABEL $label$10
	$5 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($5, [832])
	CALL eosio_assert($5, [880])
	$5 = CALL db_next_i64(*($12 + [132]), ($14 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	CALL $23($2, $5)
	
.LABEL $label$12
	CALL $24($2, $12)
	$11 = ($11 + [128])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$7 }
	$10 = *($14 + [24])
	
.LABEL $label$6
	if ( ($10 == 0) ){ goto $label$1 }
	*($14 + [28]) = $10
	CALL $67($10)
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [48])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $63([2244], $0)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [720])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $76 ()
{
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10732])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10628])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10436]
	$1 = (((int_32)$2 * (int_32)[12]) + [10436])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [8])) = (int_64)0
	*($0 + [4]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [8])) - *($1 + [4]))
	$3 = ((int_32)$2 / (int_32)[44])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[97612894]) ){ goto $label$3 }
	$2 = CALL $66($2)
	*(($0 + [4])) = $2
	*(($0 + [12])) = ($2 + ((int_32)$3 * (int_32)[44]))
	*(($3 = ($0 + [8]))) = $2
	$4 = *(($1 + [4]))
	$5 = (*(($1 + [8])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[44]) * (int_32)[44]))
	
.LABEL $label$4
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$2 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$2 = CALL $66($2)
	*(($0 + [16])) = $2
	*(($0 + [24])) = ($2 + ((int_32)$3 * (int_32)[24]))
	*(($3 = ($0 + [20]))) = $2
	$4 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$2 = (*(($1 + [32])) - *($1 + [28]))
	$3 = int_32($2 >> [3])
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL $66($2)
	*(($0 + [28])) = $2
	*(($0 + [36])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [32]))) = $2
	$5 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL $72(($0 + [4]))
	
.LABEL $label$2
	CALL $72(($0 + [16]))
	
.LABEL $label$1
	CALL $72(($0 + [28]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $66($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $67 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = (int_64)0
	*(($10 + [24])) = *(($2 + [24]))
	*(($10 + [16])) = *(($2 + [16]))
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx256_lowerbound(*($8), *($8 + [8]), (int_64)-6497942746098040832, $10, [2], ($10 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [40])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$4), [496])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $23($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)-6497942746098040832, $5))
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$4), [496])
	
.LABEL $label$4
	*(($2 + [136])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$6 = *($0)
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($6, *($8 + [4]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$2 = *($0)
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[31]), [720])
	CALL memcpy(($2 + [16]), *($8 + [4]), [32])
	*($8 + [4]) = (*($8 + [4]) + [32])
	$3 = *($1)
	$8 = *($3 + [4])
	$6 = [0]
	$7 = (int_64)0
	$4 = ($3 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($8 <= *(($3 + [8]))), [1088])
	$8 = *($4)
	$0 = *($8)
	$8 = ($8 + [1])
	*($4) = $8
	$6 = ($6 & [255])
	$7 = ((int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $6)) | (int_64)$7)
	$6 = ($6 + [7])
	if ( uint_32($0 >> [7]) ){ goto $label$1 }
	*(($2 + [48])) = $7
	$4 = ($2 + [52])
	$0 = [0]
	$5 = ($3 + [8])
	$6 = ($3 + [4])
	
.LOOP $label$2:
	CALL eosio_assert(((int_32)*($5) != (int_32)$8), [720])
	CALL memcpy(($4 + $0), *($6), [1])
	$8 = (*($6) + [1])
	*($6) = $8
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[33]) ){ goto $label$2 }
	$5 = *($1)
	$8 = *($5 + [4])
	$6 = [0]
	$7 = (int_64)0
	$3 = ($5 + [8])
	$4 = ($5 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(($8 <= *($3)), [1088])
	$8 = *($4)
	$0 = *($8)
	$8 = ($8 + [1])
	*($4) = $8
	$6 = ($6 & [255])
	$7 = ((int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $6)) | (int_64)$7)
	$6 = ($6 + [7])
	if ( uint_32($0 >> [7]) ){ goto $label$3 }
	*(($2 + [88])) = $7
	$4 = ($2 + [92])
	$0 = [0]
	$3 = ($5 + [8])
	$6 = ($5 + [4])
	
.LOOP $label$4:
	CALL eosio_assert(((int_32)*($3) != (int_32)$8), [720])
	CALL memcpy(($4 + $0), *($6), [1])
	$8 = (*($6) + [1])
	*($6) = $8
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[33]) ){ goto $label$4 }
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [7])
	$7 = ($2 + [1])
	if ( ((uint_32)$7 >= (uint_32)[33554432]) ){ goto $label$3 }
	$4 = [33554431]
	$3 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($3 >> [7]) > (uint_32)[16777214]) ){ goto $label$5 }
	$4 = int_32($3 >> [6])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[33554432]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $66(($4 << [7]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $72($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$6 = ($6 - $5)
	$2 = CALL memcpy(($7 + ($2 << [7])), $1, [128])
	$1 = ($2 - $6)
	$4 = ($7 + ($4 << [7]))
	$7 = ($2 + [128])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $67($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6497942746098040831, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$4), [496])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $23($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)-6497942746098040832, $5))
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$4), [496])
	
.LABEL $label$4
	*(($2 + [140])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [688])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $66([144])) + [88]) = [0]
	*($6 + [48]) = [0]
	*($6 + [128]) = $0
	CALL $26(($8 + [32]), $6)
	*($6 + [136]) = [-1]
	*($6 + [132]) = $1
	*($6 + [140]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [132])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $67($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [880])
	$6 = *($0 + [4])
	$7 = *(($6 + [140]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6497942746098040831, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [140])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$2), [496])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $23($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)-6497942746098040832, $3))
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$2), [496])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [140])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = *($0)
	$3 = *($4 + [4])
	$5 = *($3 + [136])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = *($4)
	*(($6 + [24])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	$5 = CALL db_idx256_find_primary(*($5), *($5 + [8]), (int_64)-6497942746098040832, $6, [2], *($3))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx256_remove($5)
	
.LABEL $label$1
	$5 = *($0)
	$4 = *($5 + [4])
	$0 = *(($4 + [140]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = *($5)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942746098040831, $6, *($4))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [960])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1024])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $67($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $67($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [132]))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $25(($9 + [8]), ($0 + [36]), ($0 + [37]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $66(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $67($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $67($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($1, *($0 + [4]), [8])
	$7 = (*($0 + [4]) + [8])
	*($0 + [4]) = $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $7) > (uint_32)[3]), [720])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$7 = (*($0 + [4]) + [4])
	*($0 + [4]) = $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $7) > (uint_32)[31]), [720])
	CALL memcpy(($1 + [16]), *($0 + [4]), [32])
	$7 = (*($0 + [4]) + [32])
	*($0 + [4]) = $7
	$3 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *(($0 + [8]))), [1088])
	$4 = ($0 + [4])
	$7 = *($4)
	$6 = *($7)
	$7 = ($7 + [1])
	*($4) = $7
	$3 = ($3 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($6 & [127]) << $3)) | (int_64)$5)
	$3 = ($3 + [7])
	if ( uint_32($6 >> [7]) ){ goto $label$1 }
	*(($1 + [48])) = $5
	$4 = ($1 + [52])
	$6 = [0]
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$2:
	CALL eosio_assert(((int_32)*($2) != (int_32)$7), [720])
	CALL memcpy(($4 + $6), *($3), [1])
	$7 = (*($3) + [1])
	*($3) = $7
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[33]) ){ goto $label$2 }
	$3 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(($7 <= *($2)), [1088])
	$7 = *($4)
	$6 = *($7)
	$7 = ($7 + [1])
	*($4) = $7
	$3 = ($3 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($6 & [127]) << $3)) | (int_64)$5)
	$3 = ($3 + [7])
	if ( uint_32($6 >> [7]) ){ goto $label$3 }
	*(($1 + [88])) = $5
	$4 = ($1 + [92])
	$6 = [0]
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$4:
	CALL eosio_assert(((int_32)*($2) != (int_32)$7), [720])
	CALL memcpy(($4 + $6), *($3), [1])
	$7 = (*($3) + [1])
	*($3) = $7
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[33]) ){ goto $label$4 }
	return $0
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1328])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1328])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1328])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1328])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $70($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $68 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $43 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $66($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*((($9 + [24]) + [32])) = [0]
	*((($9 + [24]) + [36])) = [0]
	$8 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($9 + [52])
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $44($2, $8)
	$2 = *(($9 + [56]))
	$8 = *(($9 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$8 = [0]
	
.LABEL $label$5
	*($9 + [84]) = $8
	*($9 + [80]) = $8
	*($9 + [88]) = $2
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $45(($9 + [72]), ($9 + [64]))
	CALL $46(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [84]) = $8
	CALL $67($8)
	
.LABEL $label$7
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($9 + [56])) = $8
	CALL $67($8)
	
.LABEL $label$8
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($9 + [44])) = $8
	CALL $67($8)
	
.LABEL $label$9
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*($9 + [12]) = $8
	CALL $67($8)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $72(($9 + [8]))
}

void .FUNC $42 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $66($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($8 = ($9 + [56]))) = [0]
	*(($9 + [60])) = [0]
	CALL $44(($9 + [52]), [49])
	$8 = *($8)
	$2 = *($9 + [52])
	*($9 + [84]) = $2
	*($9 + [80]) = $2
	*($9 + [88]) = $8
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $50(($9 + [72]), ($9 + [64]))
	CALL $46(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [84]) = $8
	CALL $67($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $67($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $67($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $67($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $72(($9 + [8]))
}

void .FUNC $41 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $66($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($8 = (($9 + [24]) + [32]))) = [0]
	*(($9 + [60])) = [0]
	CALL $44(($9 + [52]), [32])
	$8 = *($8)
	$2 = *($9 + [52])
	*($9 + [84]) = $2
	*($9 + [80]) = $2
	*($9 + [88]) = $8
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $51(($9 + [72]), ($9 + [64]))
	CALL $46(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [84]) = $8
	CALL $67($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $67($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $67($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $67($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $72(($9 + [8]))
}

void .FUNC $40 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$3 = *($1 + [8])
	*($1 + [8]) = [0]
	$4 = *($1)
	*($1 + [4]) = [0]
	*($8 + [96]) = $4
	*($8 + [104]) = $3
	*($1) = [0]
	*($8) = *($2)
	*($8 + [8]) = *($2 + [8])
	*($8 + [16]) = *($2 + [16])
	$1 = ($2 + [20])
	*(($8 + [20])) = *($1)
	$3 = ($2 + [24])
	*(($8 + [24])) = *($3)
	*($3) = [0]
	$3 = ($2 + [28])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [28])) = $5
	*($1) = [0]
	$1 = ($2 + [32])
	*(($8 + [32])) = *($1)
	$3 = ($2 + [36])
	*(($8 + [36])) = *($3)
	*($3) = [0]
	$3 = ($2 + [40])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [40])) = $5
	*($1) = [0]
	$1 = ($2 + [44])
	*(($8 + [44])) = *($1)
	$3 = ($2 + [48])
	*(($8 + [48])) = *($3)
	*($3) = [0]
	$3 = ($2 + [52])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [52])) = $5
	*($1) = [0]
	*($8 + [56]) = *($2 + [56])
	$1 = ($2 + [60])
	*(($8 + [60])) = *($1)
	$3 = ($2 + [64])
	*(($8 + [64])) = *($3)
	*($3) = [0]
	$3 = ($2 + [68])
	$5 = *($3)
	*($3) = [0]
	*(($8 + [68])) = $5
	*($1) = [0]
	$3 = ($2 + [72])
	*(($1 = ($8 + [72]))) = *($3)
	$5 = ($2 + [76])
	*(($8 + [76])) = *($5)
	*($5) = [0]
	$5 = ($2 + [80])
	$6 = *($5)
	*($5) = [0]
	*(($8 + [80])) = $6
	*($3) = [0]
	$5 = ($2 + [84])
	*(($3 = ($8 + [84]))) = *($5)
	$6 = ($2 + [88])
	*(($7 = ($8 + [88]))) = *($6)
	*($6) = [0]
	$2 = ($2 + [92])
	$6 = *($2)
	*($2) = [0]
	*(($8 + [92])) = $6
	*($5) = [0]
	CALL $52($0, (int_64)-7297973096368160768, ($8 + [96]), $8)
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$1 }
	*($7) = $2
	CALL $67($2)
	
.LABEL $label$1
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$2 }
	*(($8 + [76])) = $2
	CALL $67($2)
	
.LABEL $label$2
	$2 = *(($8 + [60]))
	if ( ($2 == 0) ){ goto $label$3 }
	*(($8 + [64])) = $2
	CALL $67($2)
	
.LABEL $label$3
	$2 = *(($8 + [44]))
	if ( ($2 == 0) ){ goto $label$4 }
	*(($8 + [48])) = $2
	CALL $67($2)
	
.LABEL $label$4
	$2 = *(($8 + [32]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($8 + [36])) = $2
	CALL $67($2)
	
.LABEL $label$5
	$2 = *(($8 + [20]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($8 + [24])) = $2
	CALL $67($2)
	
.LABEL $label$6
	$2 = *($8 + [96])
	if ( ($2 == 0) ){ goto $label$7 }
	*($8 + [100]) = $2
	CALL $67($2)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1328])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1328])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1328])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $44($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1328])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1328])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $48(CALL $47($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $49(*($1), ($0 + [32]))
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $66($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $72($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $67($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $72 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $66($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $67($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $61($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $71($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $66($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $71($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $67($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $68($7)
	return (unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $66(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $67($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZN5eosio11buyrambytesEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [480]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [480]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$12 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	$4 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	*($10 + [16]) = $9
	*($10 + [8]) = $7
	$2 = [0]
	$3 = CALL db_find_i64($7, $9, (int_64)-5069606918720847872, (int_64)4995142087184830980)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $9(($10 + [8]), $3) + [64]) == (int_32)($10 + [8])), [496])
	$2 = [1]
	
.LABEL $label$13
	CALL eosio_assert($2, [560])
	*($0 + [8]) = (int_64)1397703940
	*($0) = (CASTING uint_64)(uint_32 $1)
	CALL eosio_assert([1], [624])
	$6 = (int_64)5459781
	
.LOOP $label$15:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert($2, [592])
	$0 = *($10 + [32])
	if ( ($0 == 0) ){ goto $label$18 }
	$1 = ($10 + [36])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$22 }
	CALL $67($2)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$21 }
	$4 = *(($10 + [32]))
	goto $label$19 
	
.LABEL $label$20
	$4 = $0
	
.LABEL $label$19
	*($1) = $0
	CALL $67($4)
	
.LABEL $label$18
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [688])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [8]) = $0
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	$6 = CALL $66([80])
	CALL $10($6)
	*($6 + [64]) = $0
	CALL $11(($8 + [8]), $6)
	*($8 + [24]) = $6
	$5 = *($6 + [8])
	*($8 + [8]) = $5
	$7 = *($6 + [68])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $12(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $67($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	if ( ($2 <= [3]) ){ goto $label$2 }
	$1 = *($1)
	if ( ((int_32)CALL strlen([352]) != (int_32)[3]) ){ goto $label$4 }
	if ( (CALL memcmp($1, [352], [3]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($2 <= [7]) ){ goto $label$2 }
	if ( ((int_32)CALL strlen([368]) != (int_32)[7]) ){ goto $label$2 }
	if ( CALL memcmp($1, [368], [7]) ){ goto $label$2 }
	*($3 + [36]) = ($2 + [-7])
	*($3 + [32]) = ($1 + [7])
	*($3 + [16 align=4]) = *($3 + [32])
	CALL $7(($3 + [40]), ($3 + [16]))
	*($0) = [1]
	CALL memcpy(CALL $fimport$27(($0 + [1]), [0], [33]), ($3 + [40]), [33])
	goto $label$1 
	
.LABEL $label$3
	*($3 + [28]) = ($2 + [-3])
	*($3 + [24]) = ($1 + [3])
	*($3 + [8 align=4]) = *($3 + [24])
	CALL $7(($3 + [40]), ($3 + [8]))
	*($0) = [0]
	CALL memcpy(CALL $fimport$27(($0 + [1]), [0], [33]), ($3 + [40]), [33])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [384])
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [80])
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [256])
	*([0] + [4]) = $7
	$2 = CALL memset($0, [0], [37])
	$6 = *($1 + [4])
	if ( ($6 == 0) ){ goto $label$1 }
	$5 = *($1)
	$3 = ($5 + $6)
	
.LOOP $label$2:
	if ( *([0] + [16]) ){ goto $label$3 }
	$1 = [-256]
	
.LOOP $label$4:
	*(($1 + [288])) = [255]
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$4 }
	$1 = [0]
	
.LOOP $label$5:
	*((*(($1 + [288])) + [32])) = $1
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[59]) ){ goto $label$5 }
	*([0] + [16]) = [1]
	
.LABEL $label$3
	$6 = *((CALL memcpy($7, [32], [256]) + *($5)))
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [416])
	
.LABEL $label$6
	$1 = [0]
	
.LOOP $label$7:
	$6 = (((int_32)*($4) * (int_32)[58]) + $6)
	*(($4 = ($2 + $1))) = $6
	$6 = int_32($6 >> [8])
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[37]) ){ goto $label$7 }
	if ( ($6 == 0) ){ goto $label$8 }
	CALL eosio_assert([0], [448])
	
.LABEL $label$8
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($2 + [36])
	
.LOOP $label$9:
	$6 = *($0)
	*($0) = *($1)
	*($1) = $6
	$1 = ($1 + [-1])
	$0 = ($0 + [1])
	if ( ($0 <= $1) ){ goto $label$9 }
	*([0] + [4]) = ($7 + [256])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN6abieos14get_base58_mapEv (int_32 $0)
{
	int_32 $1
	if ( *([0] + [16]) ){ goto $label$1 }
	$1 = [-256]
	
.LOOP $label$2:
	*(($1 + [288])) = [255]
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$2 }
	$1 = [0]
	
.LOOP $label$3:
	*((*(($1 + [288])) + [32])) = $1
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[59]) ){ goto $label$3 }
	*([0] + [16]) = [1]
	
.LABEL $label$1
	CALL memcpy($0, [32], [256])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [880])
	*([0] + [4]) = $20
	CALL $38(($20 + [656]))
	$14 = *($0)
	$18 = *($20 + [656])
	if ( ((int_64)$18 == (int_64)$14) ){ goto $label$3 }
	if ( ((int_64)*($20 + [664]) != (int_64)$14) ){ goto $label$3 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1632]
	$15 = (int_64)0
	
.LOOP $label$4:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$5 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$17 = ($17 + [165])
	goto $label$6 
	
.LABEL $label$7
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$5
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$4 }
	if ( ((int_64)$18 == (int_64)$15) ){ goto $label$3 }
	$12 = (($20 + [656]) + [24])
	CALL eosio_assert(((int_64)*($12) == (int_64)1397703940), [2224])
	$11 = [0]
	$17 = [0]
	if ( ((uint_64)((int_64)*($20 + [672]) + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$8 }
	$14 = (uint_64)*($12) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$17 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$17 = [0]
	
.LABEL $label$8
	CALL eosio_assert($17, [1648])
	CALL eosio_assert(((int_64)*((($20 + [656]) + [16])) > (int_64)0), [1680])
	$12 = *($20 + [688])
	$17 = ($12 & [1])
	$6 = ($20 + [689])
	CALL sha256(( *((($20 + [656]) + [40])) ? $6 : $17 ), ( *(($20 + [692])) ? uint_32($12 >> [1]) : $17 ), ($20 + [624]))
	$3 = ($0 + [16])
	*($20 + [616]) = $3
	$14 = *($20 + [648])
	$13 = *($20 + [640])
	$16 = *($20 + [632])
	$15 = *($20 + [624])
	CALL eosio_assert([1], [1104])
	*($20 + [536]) = $15
	*($20 + [528]) = $16
	CALL eosio_assert([1], [1104])
	*((($20 + [528]) + [24])) = $13
	*($20 + [544]) = $14
	CALL $29(($20 + [816]), ($20 + [616]), ($20 + [528]))
	$12 = *($20 + [820])
	if ( ($12 == 0) ){ goto $label$13 }
	$16 = *(($12 + [40]))
	$15 = *(($12 + [32]))
	$14 = *(($12 + [24]))
	$13 = *($12 + [16])
	CALL eosio_assert([1], [1104])
	CALL eosio_assert([1], [1104])
	if ( ((int_64)((int_64)((int_64)$14 ^ (int_64)*($20 + [528])) | (int_64)((int_64)$13 ^ (int_64)*($20 + [536]))) != (int_64)0) ){ goto $label$13 }
	if ( ((int_64)((int_64)((int_64)*(($20 + [544])) ^ (int_64)$16) | (int_64)((int_64)*((($20 + [528]) + [24])) ^ (int_64)$15)) != (int_64)0) ){ goto $label$13 }
	$11 = *($20 + [820])
	
.LABEL $label$13
	$12 = (($20 + [656]) + [32])
	if ( ($11 == 0) ){ goto $label$15 }
	$14 = *((($20 + [624]) + [24]))
	$13 = *(($20 + [640]))
	$16 = *($20 + [632])
	$15 = *($20 + [624])
	$4 = [1]
	CALL eosio_assert([1], [1104])
	*($20 + [824]) = $15
	*($20 + [816]) = $16
	CALL eosio_assert([1], [1104])
	*((($20 + [816]) + [24])) = $13
	*($20 + [832]) = $14
	CALL $29(($20 + [528]), ($20 + [616]), ($20 + [816]))
	$17 = [0]
	$11 = *($20 + [532])
	if ( ($11 == 0) ){ goto $label$16 }
	$16 = *(($11 + [40]))
	$15 = *(($11 + [32]))
	$14 = *(($11 + [24]))
	$13 = *($11 + [16])
	CALL eosio_assert([1], [1104])
	CALL eosio_assert([1], [1104])
	$17 = [0]
	if ( ((int_64)((int_64)((int_64)$14 ^ (int_64)*($20 + [816])) | (int_64)((int_64)$13 ^ (int_64)*($20 + [824]))) != (int_64)0) ){ goto $label$16 }
	$17 = [0]
	if ( ((int_64)((int_64)((int_64)*(($20 + [832])) ^ (int_64)$16) | (int_64)((int_64)*(($20 + [840])) ^ (int_64)$15)) != (int_64)0) ){ goto $label$16 }
	$17 = *($20 + [532])
	
.LABEL $label$16
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [1712])
	$5 = *($17)
	CALL memcpy(($20 + [528]), ($17 + [8]), [77])
	CALL memcpy(($20 + [488]), ($17 + [85]), [40])
	CALL memcpy(($20 + [744]), ($20 + [572]), [33])
	CALL memcpy(($20 + [704]), ($20 + [495]), [33])
	goto $label$14 
	
.LABEL $label$15
	$17 = ($20 + [688])
	$11 = *($17)
	$11 = ( *(($20 + [692])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	CALL eosio_assert((((int_32)$11 == (int_32)[120]) | ((int_32)$11 == (int_32)[66])), [1744])
	$11 = ($20 + [696])
	$4 = *(( *($11) ? $6 : (*($17) & [1]) ) + [12])
	CALL eosio_assert((((int_32)$4 == (int_32)[58]) | ((int_32)$4 == (int_32)[45])), [1792])
	CALL $73(($20 + [488]), $12, [13], [53], $12)
	*($20 + [424]) = [0]
	*($20 + [416]) = (int_64)0
	$17 = *(( *($11) ? $6 : (*($17) & [1]) ) + [66])
	if ( ((int_32)$17 == (int_32)[58]) ){ goto $label$21 }
	if ( ((int_32)$17 != (int_32)[45]) ){ goto $label$20 }
	
.LABEL $label$21
	CALL $73(($20 + [528]), $12, [67], [53], $12)
	if ( (*($20 + [416]) & [1]) ){ goto $label$19 }
	*($20 + [416]) = [0]
	goto $label$18 
	
.LABEL $label$20
	CALL $69(($20 + [416]), ($20 + [488]))
	goto $label$17 
	
.LABEL $label$19
	*(*(($20 + [424]))) = [0]
	*($20 + [420]) = [0]
	
.LABEL $label$18
	CALL $71(($20 + [416]), [0])
	*((($20 + [416]) + [8])) = *((($20 + [528]) + [8]))
	*($20 + [416]) = *($20 + [528])
	
.LABEL $label$17
	$17 = ($17 & [1])
	$17 = *($20 + [488])
	*($20 + [484]) = ( *($20 + [492]) ? uint_32($17 >> [1]) : $17 )
	*($20 + [480]) = ( *($20 + [496]) ? (($20 + [488]) | [1]) : $17 )
	*($20 + [136 align=4]) = *($20 + [480])
	CALL _ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE(($20 + [528]), ($20 + [136]))
	$17 = ($17 & [1])
	$17 = *($20 + [416])
	*($20 + [476]) = ( *($20 + [420]) ? uint_32($17 >> [1]) : $17 )
	$11 = (($20 + [416]) + [8])
	*($20 + [472]) = ( *($11) ? (($20 + [416]) | [1]) : $17 )
	*($20 + [128 align=4]) = *($20 + [472])
	CALL _ZN6abieos20string_to_public_keyENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE(($20 + [816]), ($20 + [128]))
	*($20 + [745]) = *($20 + [530])
	*($20 + [744]) = *($20 + [529])
	*($20 + [746]) = *($20 + [531])
	*($20 + [747]) = *($20 + [532])
	*($20 + [748]) = *($20 + [533])
	*($20 + [749]) = *($20 + [534])
	*($20 + [750]) = *($20 + [535])
	*($20 + [751]) = *((($20 + [528]) + [8]))
	*($20 + [752]) = *((($20 + [528]) + [9]))
	*($20 + [753]) = *((($20 + [528]) + [10]))
	*($20 + [754]) = *((($20 + [528]) + [11]))
	*($20 + [755]) = *((($20 + [528]) + [12]))
	*($20 + [756]) = *((($20 + [528]) + [13]))
	*($20 + [757]) = *((($20 + [528]) + [14]))
	*($20 + [758]) = *((($20 + [528]) + [15]))
	*($20 + [759]) = *((($20 + [528]) + [16]))
	*($20 + [760]) = *((($20 + [528]) + [17]))
	*($20 + [761]) = *((($20 + [528]) + [18]))
	*($20 + [762]) = *((($20 + [528]) + [19]))
	*($20 + [763]) = *((($20 + [528]) + [20]))
	*($20 + [764]) = *((($20 + [528]) + [21]))
	*($20 + [765]) = *((($20 + [528]) + [22]))
	*($20 + [766]) = *((($20 + [528]) + [23]))
	*($20 + [767]) = *((($20 + [528]) + [24]))
	*($20 + [768]) = *((($20 + [528]) + [25]))
	*($20 + [769]) = *((($20 + [528]) + [26]))
	*($20 + [770]) = *((($20 + [528]) + [27]))
	*($20 + [771]) = *((($20 + [528]) + [28]))
	*($20 + [772]) = *((($20 + [528]) + [29]))
	*($20 + [773]) = *((($20 + [528]) + [30]))
	*($20 + [774]) = *((($20 + [528]) + [31]))
	*($20 + [775]) = *((($20 + [528]) + [32]))
	*($20 + [776]) = *((($20 + [528]) + [33]))
	*($20 + [704]) = *($20 + [817])
	*($20 + [705]) = *($20 + [818])
	*($20 + [706]) = *($20 + [819])
	*($20 + [707]) = *($20 + [820])
	*($20 + [708]) = *($20 + [821])
	*($20 + [709]) = *($20 + [822])
	*($20 + [710]) = *($20 + [823])
	*($20 + [711]) = *((($20 + [816]) + [8]))
	*($20 + [712]) = *((($20 + [816]) + [9]))
	*($20 + [713]) = *((($20 + [816]) + [10]))
	*($20 + [714]) = *((($20 + [816]) + [11]))
	*($20 + [715]) = *((($20 + [816]) + [12]))
	*($20 + [716]) = *((($20 + [816]) + [13]))
	*($20 + [717]) = *((($20 + [816]) + [14]))
	*($20 + [718]) = *((($20 + [816]) + [15]))
	*($20 + [719]) = *((($20 + [816]) + [16]))
	*($20 + [720]) = *((($20 + [816]) + [17]))
	*($20 + [721]) = *((($20 + [816]) + [18]))
	*($20 + [722]) = *((($20 + [816]) + [19]))
	*($20 + [723]) = *((($20 + [816]) + [20]))
	*($20 + [724]) = *((($20 + [816]) + [21]))
	*($20 + [725]) = *((($20 + [816]) + [22]))
	*($20 + [726]) = *((($20 + [816]) + [23]))
	*($20 + [727]) = *((($20 + [816]) + [24]))
	*($20 + [728]) = *((($20 + [816]) + [25]))
	*($20 + [729]) = *((($20 + [816]) + [26]))
	*($20 + [730]) = *((($20 + [816]) + [27]))
	*($20 + [731]) = *((($20 + [816]) + [28]))
	*($20 + [732]) = *((($20 + [816]) + [29]))
	*($20 + [733]) = *((($20 + [816]) + [30]))
	*($20 + [734]) = *((($20 + [816]) + [31]))
	*($20 + [735]) = *((($20 + [816]) + [32]))
	*($20 + [736]) = *((($20 + [816]) + [33]))
	if ( ((*($20 + [416]) & [1]) == 0) ){ goto $label$22 }
	CALL $67(*($11))
	
.LABEL $label$22
	if ( ((*($20 + [488]) & [1]) == 0) ){ goto $label$23 }
	CALL $67(*(($20 + [496])))
	
.LABEL $label$23
	$4 = [0]
	
.LABEL $label$14
	CALL $73(($20 + [456]), $12, [0], [12], $12)
	$12 = ( *($20 + [464]) ? (($20 + [456]) | [1]) : (*($20 + [456]) & [1]) )
	$17 = [-1]
	
.LOOP $label$24:
	$11 = ($12 + $17)
	$6 = ($17 + [1])
	$17 = $6
	if ( *(($11 + [1])) ){ goto $label$24 }
	$18 = (CASTING uint_64)(uint_32 $6)
	$14 = (int_64)0
	$13 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$25:
	$16 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$18) ){ goto $label$26 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$17 = ($17 + [165])
	goto $label$27 
	
.LABEL $label$28
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$30 }
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$29 
	
.LABEL $label$30
	$16 = ((int_64)$16 & (int_64)15)
	
.LABEL $label$29
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$25 }
	*($20 + [416]) = [1]
	*($20 + [816]) = [0]
	$17 = CALL memcpy((($20 + [816]) | [4]), ($20 + [744]), [33])
	*(($11 = (($20 + [416]) + [12]))) = [0]
	*($20 + [856]) = [1]
	*($20 + [420 align=4]) = (int_64)0
	$12 = CALL $66([44])
	$6 = ($12 + [44])
	*($11) = $6
	*($20 + [420]) = $12
	CALL memcpy($12, ($20 + [816]), [44])
	*((($20 + [416]) + [8])) = $6
	*((($20 + [416]) + [20])) = [0]
	*((($20 + [416]) + [24])) = [0]
	*((($20 + [416]) + [32])) = [0]
	*((($20 + [416]) + [36])) = [0]
	*($20 + [432]) = [0]
	*($20 + [444]) = [0]
	*($20 + [376]) = [1]
	*($20 + [816]) = [0]
	CALL memcpy($17, ($20 + [704]), [33])
	*(($17 = (($20 + [376]) + [12]))) = [0]
	*($20 + [856]) = [1]
	*($20 + [380 align=4]) = (int_64)0
	$12 = CALL $66([44])
	$11 = ($12 + [44])
	*($17) = $11
	*($20 + [380]) = $12
	CALL memcpy($12, ($20 + [816]), [44])
	*((($20 + [376]) + [8])) = $11
	*((($20 + [376]) + [20])) = [0]
	*((($20 + [376]) + [24])) = [0]
	*((($20 + [376]) + [32])) = [0]
	*((($20 + [376]) + [36])) = [0]
	*($20 + [392]) = [0]
	*($20 + [404]) = [0]
	CALL _ZN5eosio11buyrambytesEm(($20 + [360]), [4096])
	CALL _ZN5eosio11buyrambytesEm(($20 + [344]), [256])
	CALL eosio_assert([1], [624])
	$14 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$17 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$17 = [0]
	
.LABEL $label$31
	CALL eosio_assert($17, [592])
	CALL eosio_assert([1], [624])
	$14 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$17 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$17 = [0]
	
.LABEL $label$36
	CALL eosio_assert($17, [592])
	$14 = *(($20 + [672]))
	CALL eosio_assert([1], [624])
	$14 = ((int_64)((int_64)$14 + (int_64)119) / (int_64)200)
	$10 = ( $14 ? (int_64)1000 : ((int_64)$14 > (int_64)1000) )
	$14 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	
.LOOP $label$45:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$45 }
	
.LABEL $label$44
	$17 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$17 = [0]
	
.LABEL $label$41
	CALL eosio_assert($17, [592])
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [1824])
	CALL eosio_assert([1], [1872])
	CALL eosio_assert([1], [1904])
	$13 = *($20 + [368])
	CALL eosio_assert(((int_64)$13 == (int_64)1397703940), [1824])
	$16 = *($20 + [360])
	$14 = ((int_64)$16 + (int_64)2011)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1872])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1904])
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [1824])
	$14 = ((int_64)$14 + (int_64)$10)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1872])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1904])
	$18 = *($20 + [352])
	CALL eosio_assert(((int_64)$18 == (int_64)1397703940), [1824])
	$19 = *($20 + [344])
	$14 = ((int_64)$19 + (int_64)$14)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1872])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1904])
	$12 = ($20 + [680])
	CALL eosio_assert(((int_64)1397703940 == (int_64)*($12)), [1936])
	$17 = ($20 + [672])
	CALL eosio_assert(((int_64)$14 <= (int_64)*($17)), [2000])
	$14 = *($17)
	$7 = *($12)
	CALL eosio_assert(((int_64)1397703940 == (int_64)$7), [2032])
	$8 = ((int_64)$14 + (int_64)-1500)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [2080])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [2112])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [2032])
	$14 = ((int_64)$14 + (int_64)-2011)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [2080])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [2112])
	CALL eosio_assert(((int_64)$13 == (int_64)$7), [2032])
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($14 - $16)) > (int_64)-4611686018427387904), [2080])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [2112])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [2032])
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($14 - $10)) > (int_64)-4611686018427387904), [2080])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [2112])
	CALL eosio_assert(((int_64)$18 == (int_64)$7), [2032])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($14 - $19)) > (int_64)-4611686018427387904), [2080])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [2112])
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [480]
	$18 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$51 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$17 = ($17 + [165])
	goto $label$49 
	
.LABEL $label$51
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$47
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$18 = ((int_64)$13 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$46 }
	$9 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2144]
	$19 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$57 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$17 = ($17 + [165])
	goto $label$55 
	
.LABEL $label$57
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$53
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$52 }
	*($20 + [824]) = $19
	*($20 + [816]) = $9
	*($20 + [336]) = [0]
	*($20 + [328]) = (int_64)0
	*((($12 = CALL $66([16])) + [12])) = *((($20 + [816]) + [12]))
	*(($12 + [4])) = *($20 + [820])
	*($20 + [328]) = $12
	*($12) = *($20 + [816])
	$17 = ($12 + [16])
	*($20 + [336]) = $17
	*(($12 + [8])) = *($20 + [824])
	*($20 + [332]) = $17
	*($20 + [232]) = *($0)
	*($20 + [240]) = $15
	CALL $39((($20 + [232]) + [16]), ($20 + [416]))
	CALL $39(($20 + [288]), ($20 + [376]))
	CALL $40($18, ($20 + [328]), ($20 + [232]))
	$12 = *(($20 + [316]))
	if ( ($12 == 0) ){ goto $label$58 }
	*(($20 + [320])) = $12
	CALL $67($12)
	
.LABEL $label$58
	$12 = *(($20 + [304]))
	if ( ($12 == 0) ){ goto $label$59 }
	*(($20 + [308])) = $12
	CALL $67($12)
	
.LABEL $label$59
	$12 = *(($20 + [292]))
	if ( ($12 == 0) ){ goto $label$60 }
	*(($20 + [296])) = $12
	CALL $67($12)
	
.LABEL $label$60
	$12 = *(($20 + [276]))
	if ( ($12 == 0) ){ goto $label$61 }
	*(($20 + [280])) = $12
	CALL $67($12)
	
.LABEL $label$61
	$12 = *(($20 + [264]))
	if ( ($12 == 0) ){ goto $label$62 }
	*(($20 + [268])) = $12
	CALL $67($12)
	
.LABEL $label$62
	$12 = *(($20 + [252]))
	if ( ($12 == 0) ){ goto $label$63 }
	*(($20 + [256])) = $12
	CALL $67($12)
	
.LABEL $label$63
	$12 = *($20 + [328])
	if ( ($12 == 0) ){ goto $label$64 }
	*($20 + [332]) = $12
	CALL $67($12)
	
.LABEL $label$64
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [480]
	$18 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$70 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$17 = ($17 + [165])
	goto $label$68 
	
.LABEL $label$70
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$66
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$18 = ((int_64)$13 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$65 }
	$9 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2144]
	$19 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$76 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$17 = ($17 + [165])
	goto $label$74 
	
.LABEL $label$76
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$72
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$71 }
	*($20 + [224]) = $19
	*($20 + [216]) = $9
	*((($12 = CALL $66([16])) + [8])) = *($20 + [224])
	*($12) = *($20 + [216])
	*(($17 = (($20 + [200]) + [8]))) = *((($20 + [360]) + [8]))
	*($20 + [200]) = *($20 + [360])
	$14 = *($0)
	*(($11 = (($20 + [784]) + [8]))) = *($17)
	*($20 + [784]) = *($20 + [200])
	*($20 + [800]) = $12
	$12 = ($12 + [16])
	*($20 + [808]) = $12
	*($20 + [804]) = $12
	*($20 + [824]) = $15
	*($20 + [816]) = $14
	*(($12 = (($20 + [816]) + [24]))) = *($11)
	*((($20 + [96]) + [8])) = *($20 + [824])
	*($20 + [832]) = *($20 + [784])
	*((($20 + [96]) + [24])) = *($12)
	*((($20 + [96]) + [16])) = *($20 + [832])
	*($20 + [96]) = *($20 + [816])
	CALL $41($18, (int_64)4520896354024685568, ($20 + [800]), ($20 + [96]))
	$12 = *($20 + [800])
	if ( ($12 == 0) ){ goto $label$77 }
	*($20 + [804]) = $12
	CALL $67($12)
	
.LABEL $label$77
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [480]
	$18 = (int_64)0
	
.LOOP $label$78:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$83 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$17 = ($17 + [165])
	goto $label$81 
	
.LABEL $label$83
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$82
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$80
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$79
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$18 = ((int_64)$13 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$78 }
	$9 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2144]
	$19 = (int_64)0
	
.LOOP $label$84:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$89 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$17 = ($17 + [165])
	goto $label$87 
	
.LABEL $label$89
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$88
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$86
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$85
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$84 }
	*($20 + [224]) = $19
	*($20 + [216]) = $9
	*((($12 = CALL $66([16])) + [8])) = *($20 + [224])
	*($12) = *($20 + [216])
	*(($17 = (($20 + [184]) + [8]))) = *((($20 + [344]) + [8]))
	*($20 + [184]) = *($20 + [344])
	$14 = *($0)
	*(($11 = (($20 + [784]) + [8]))) = *($17)
	*($20 + [784]) = *($20 + [184])
	*($20 + [800]) = $12
	$12 = ($12 + [16])
	*($20 + [808]) = $12
	*($20 + [804]) = $12
	*($20 + [824]) = $14
	*($20 + [816]) = $14
	*(($12 = (($20 + [816]) + [24]))) = *($11)
	*((($20 + [64]) + [8])) = *($20 + [824])
	*($20 + [832]) = *($20 + [784])
	*((($20 + [64]) + [24])) = *($12)
	*((($20 + [64]) + [16])) = *($20 + [832])
	*($20 + [64]) = *($20 + [816])
	CALL $41($18, (int_64)4520896354024685568, ($20 + [800]), ($20 + [64]))
	$12 = *($20 + [800])
	if ( ($12 == 0) ){ goto $label$90 }
	*($20 + [804]) = $12
	CALL $67($12)
	
.LABEL $label$90
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [480]
	$18 = (int_64)0
	
.LOOP $label$91:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$96 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$17 = ($17 + [165])
	goto $label$94 
	
.LABEL $label$96
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$95
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$93
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$92
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$18 = ((int_64)$13 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$91 }
	$9 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2144]
	$19 = (int_64)0
	
.LOOP $label$97:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$102 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$101 }
	$17 = ($17 + [165])
	goto $label$100 
	
.LABEL $label$102
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$101
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$100
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$99
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$98
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$97 }
	*($20 + [792]) = $19
	*($20 + [784]) = $9
	*((($12 = CALL $66([16])) + [8])) = *($20 + [792])
	*($12) = *($20 + [784])
	$14 = *($0)
	*(($17 = (($20 + [800]) + [6]))) = *((($20 + [177]) + [6]))
	*(($11 = (($20 + [800]) + [4]))) = *((($20 + [177]) + [4]))
	*($20 + [800]) = *($20 + [177 align=1])
	$6 = ($12 + [16])
	*($20 + [220]) = $6
	*($20 + [216]) = $12
	*($20 + [224]) = $6
	*($20 + [816]) = $14
	*($20 + [824]) = $15
	*($20 + [832]) = (int_64)511
	*(($20 + [840])) = (int_64)1397703940
	*($20 + [848]) = (int_64)1500
	*(($20 + [856])) = (int_64)1397703940
	*($20 + [864]) = [1]
	*(($20 + [871])) = *($17)
	*(($20 + [869])) = *($11)
	*($20 + [865 align=1]) = *($20 + [800])
	CALL memcpy(($20 + [8]), ($20 + [816]), [56])
	CALL $42($18, (int_64)5378043540636893184, ($20 + [216]), ($20 + [8]))
	$12 = *($20 + [216])
	if ( ($12 == 0) ){ goto $label$103 }
	*($20 + [220]) = $12
	CALL $67($12)
	
.LABEL $label$103
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [816]
	$18 = (int_64)0
	
.LOOP $label$104:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$109 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$108 }
	$17 = ($17 + [165])
	goto $label$107 
	
.LABEL $label$109
	$13 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$108
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$107
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$106
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$105
	$12 = ($12 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$18 = ((int_64)$13 | (int_64)$18)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$104 }
	$9 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2144]
	$19 = (int_64)0
	
.LOOP $label$110:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$115 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$114 }
	$17 = ($17 + [165])
	goto $label$113 
	
.LABEL $label$115
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$114
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$113
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$112
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$111
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$110 }
	*($20 + [792]) = $19
	*($20 + [784]) = $9
	*((($12 = CALL $66([16])) + [12])) = *((($20 + [784]) + [12]))
	*(($12 + [4])) = *($20 + [788])
	*($20 + [160]) = $12
	*($12) = *($20 + [784])
	$17 = ($12 + [16])
	*($20 + [168]) = $17
	*(($12 + [8])) = *($20 + [792])
	*($20 + [164]) = $17
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [2160]
	$19 = (int_64)0
	
.LOOP $label$116:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$117 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$119 }
	$17 = ($17 + [165])
	goto $label$118 
	
.LABEL $label$119
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$118
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($17 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$117
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$16 | (int_64)$19)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$116 }
	*(($20 + [808])) = [0]
	*($20 + [800]) = (int_64)0
	$12 = CALL strlen([2176])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$122 }
	*($20 + [800]) = ($12 << [1])
	$17 = (($20 + [800]) | [1])
	if ( $12 ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$122
	$11 = (($12 + [16]) & [-16])
	$17 = CALL $66($11)
	*($20 + [800]) = ($11 | [1])
	*($20 + [808]) = $17
	*($20 + [804]) = $12
	
.LABEL $label$121
	CALL memcpy($17, [2176], $12)
	
.LABEL $label$120
	*(($17 + $12)) = [0]
	$12 = *($20 + [800])
	*($20 + [800]) = [0]
	$17 = *($20 + [804])
	*($20 + [804]) = [0]
	$11 = *($20 + [808])
	*($20 + [808]) = [0]
	$14 = *($0)
	$6 = ($20 + [168])
	*($20 + [224]) = *($6)
	*($6) = [0]
	*($20 + [216]) = *($20 + [160])
	*($20 + [220]) = *($20 + [164])
	*($20 + [164]) = [0]
	*($20 + [160]) = [0]
	*($20 + [824]) = $19
	*($20 + [816]) = $14
	*($20 + [832]) = $10
	*(($20 + [840])) = (int_64)1397703940
	*($20 + [848]) = $12
	*(($20 + [852])) = $17
	*(($12 = ($20 + [856]))) = $11
	CALL $43($18, (int_64)-3617168760277827584, ($20 + [216]), ($20 + [816]))
	if ( ((*($20 + [848]) & [1]) == 0) ){ goto $label$123 }
	CALL $67(*($12))
	
.LABEL $label$123
	$12 = *($20 + [216])
	if ( ($12 == 0) ){ goto $label$124 }
	*($20 + [220]) = $12
	CALL $67($12)
	
.LABEL $label$124
	if ( ((*($20 + [800]) & [1]) == 0) ){ goto $label$125 }
	CALL $67(*(($20 + [808])))
	
.LABEL $label$125
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$126 }
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [816]
	$18 = (int_64)0
	
.LOOP $label$127:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$132 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$131 }
	$17 = ($17 + [165])
	goto $label$130 
	
.LABEL $label$132
	$13 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$129 }
	goto $label$128 
	
.LABEL $label$131
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$130
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$129
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$128
	$12 = ($12 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$18 = ((int_64)$13 | (int_64)$18)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$127 }
	$10 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2144]
	$19 = (int_64)0
	
.LOOP $label$133:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$138 }
	$17 = *($12)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$137 }
	$17 = ($17 + [165])
	goto $label$136 
	
.LABEL $label$138
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$137
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$136
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$135
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$134
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$19 = ((int_64)$13 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$133 }
	*($20 + [792]) = $19
	*($20 + [784]) = $10
	*((($12 = CALL $66([16])) + [12])) = *((($20 + [784]) + [12]))
	*(($12 + [4])) = *($20 + [788])
	*($20 + [144]) = $12
	*($12) = *($20 + [784])
	$17 = ($12 + [16])
	*($20 + [152]) = $17
	*(($12 + [8])) = *($20 + [792])
	*($20 + [148]) = $17
	*((($20 + [800]) + [8])) = [0]
	*($20 + [800]) = (int_64)0
	$12 = CALL strlen([2208])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$141 }
	*($20 + [800]) = ($12 << [1])
	$17 = (($20 + [800]) | [1])
	if ( $12 ){ goto $label$140 }
	goto $label$139 
	
.LABEL $label$141
	$11 = (($12 + [16]) & [-16])
	$17 = CALL $66($11)
	*($20 + [800]) = ($11 | [1])
	*($20 + [808]) = $17
	*($20 + [804]) = $12
	
.LABEL $label$140
	CALL memcpy($17, [2208], $12)
	
.LABEL $label$139
	*(($17 + $12)) = [0]
	$12 = *($20 + [800])
	*($20 + [800]) = [0]
	$17 = *($20 + [804])
	*($20 + [804]) = [0]
	$11 = *($20 + [808])
	*($20 + [808]) = [0]
	$14 = *($0)
	$6 = ($20 + [152])
	*($20 + [224]) = *($6)
	*($6) = [0]
	*($20 + [216]) = *($20 + [144])
	*($20 + [220]) = *($20 + [148])
	*($20 + [148]) = [0]
	*($20 + [144]) = [0]
	*($20 + [824]) = $15
	*($20 + [816]) = $14
	*($20 + [832]) = $8
	*(($20 + [840])) = $7
	*($20 + [848]) = $12
	*(($20 + [852])) = $17
	*(($12 = ($20 + [856]))) = $11
	CALL $43($18, (int_64)-3617168760277827584, ($20 + [216]), ($20 + [816]))
	if ( ((*($20 + [848]) & [1]) == 0) ){ goto $label$142 }
	CALL $67(*($12))
	
.LABEL $label$142
	$12 = *($20 + [216])
	if ( ($12 == 0) ){ goto $label$143 }
	*($20 + [220]) = $12
	CALL $67($12)
	
.LABEL $label$143
	if ( ((*($20 + [800]) & [1]) == 0) ){ goto $label$126 }
	CALL $67(*(($20 + [808])))
	
.LABEL $label$126
	if ( ($4 == 0) ){ goto $label$144 }
	$4 = *(($0 + [40]))
	$11 = *(($0 + [44]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$145 }
	$12 = ($11 + [-24])
	$6 = ([0] - $4)
	
.LOOP $label$146:
	if ( ((int_64)*(*($12)) == (int_64)$5) ){ goto $label$145 }
	$11 = $12
	$17 = ($12 + [-24])
	$12 = $17
	if ( ((int_32)($17 + $6) != (int_32)[-24]) ){ goto $label$146 }
	
.LABEL $label$145
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$148 }
	$12 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [128]) == (int_32)$3), [496])
	goto $label$147 
	
.LABEL $label$148
	$12 = [0]
	$17 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-6497942746098040832, $5)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$147 }
	$12 = CALL $23($3, $17)
	CALL eosio_assert(((int_32)*($12 + [128]) == (int_32)$3), [496])
	
.LABEL $label$147
	$17 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($17, [832])
	CALL eosio_assert($17, [880])
	$17 = CALL db_next_i64(*($12 + [132]), ($20 + [816]))
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$149 }
	CALL $23($3, $17)
	
.LABEL $label$149
	CALL $24($3, $12)
	
.LABEL $label$144
	$12 = *(($20 + [404]))
	if ( ($12 == 0) ){ goto $label$150 }
	*(($20 + [408])) = $12
	CALL $67($12)
	
.LABEL $label$150
	$12 = *(($20 + [392]))
	if ( ($12 == 0) ){ goto $label$151 }
	*(($20 + [396])) = $12
	CALL $67($12)
	
.LABEL $label$151
	$12 = *($20 + [380])
	if ( ($12 == 0) ){ goto $label$152 }
	*(($20 + [384])) = $12
	CALL $67($12)
	
.LABEL $label$152
	$12 = *(($20 + [444]))
	if ( ($12 == 0) ){ goto $label$153 }
	*(($20 + [448])) = $12
	CALL $67($12)
	
.LABEL $label$153
	$12 = *(($20 + [432]))
	if ( ($12 == 0) ){ goto $label$154 }
	*(($20 + [436])) = $12
	CALL $67($12)
	
.LABEL $label$154
	$12 = *($20 + [420])
	if ( ($12 == 0) ){ goto $label$155 }
	*(($20 + [424])) = $12
	CALL $67($12)
	
.LABEL $label$155
	if ( ((*($20 + [456]) & [1]) == 0) ){ goto $label$3 }
	CALL $67(*(($20 + [464])))
	
.LABEL $label$3
	if ( ((*($20 + [688]) & [1]) == 0) ){ goto $label$156 }
	CALL $67(*(($20 + [696])))
	
.LABEL $label$156
	*([0] + [4]) = ($20 + [880])
	return (unreachable)
	
.LABEL $label$2
	CALL $68(($20 + [800]))
	
.LABEL $label$1
	CALL $68(($20 + [800]))
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [720])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [720])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL require_auth($1)
	$5 = ($0 + [16])
	*($10 + [32]) = $5
	$1 = *($2 + [24])
	$7 = *($2 + [16])
	$8 = *($2 + [8])
	$9 = *($2)
	CALL eosio_assert([1], [1104])
	*($10 + [8]) = $9
	*($10) = $8
	CALL eosio_assert([1], [1104])
	*(($10 + [24])) = $7
	*($10 + [16]) = $1
	CALL $29(($10 + [40]), ($10 + [32]), $10)
	$6 = *($10 + [44])
	if ( ($6 == 0) ){ goto $label$2 }
	$8 = *(($6 + [40]))
	$9 = *(($6 + [32]))
	$1 = *(($6 + [24]))
	$7 = *($6 + [16])
	CALL eosio_assert([1], [1104])
	CALL eosio_assert([1], [1104])
	if ( ((int_64)((int_64)((int_64)$1 ^ (int_64)*($10)) | (int_64)((int_64)$7 ^ (int_64)*($10 + [8]))) != (int_64)0) ){ goto $label$2 }
	if ( ((int_64)(((int_64)((int_64)*(($10 + [16])) ^ (int_64)$8) | (int_64)((int_64)*(($10 + [24])) ^ (int_64)$9)) == 0) == 0) ){ goto $label$2 }
	$6 = *($10 + [44])
	if ( ($6 == 0) ){ goto $label$2 }
	*($10) = $0
	CALL eosio_assert([1], [1152])
	CALL $30(*($10 + [32]), $6, (int_64)0, $10)
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	*($10 + [4]) = $2
	*($10) = $0
	*($10 + [8]) = $3
	*($10 + [12]) = $4
	CALL $31(($10 + [40]), $5, $1, $10)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [576])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*((($7 + [112]) + [40])) = (int_64)0
	*(($7 + [144])) = (int_64)0
	*((($7 + [112]) + [24])) = (int_64)0
	*($7 + [128]) = (int_64)0
	*($7 + [112]) = (int_64)0
	CALL memset(($7 + [164]), [0], [36])
	*($7 + [160]) = [0]
	CALL memset(($7 + [204]), [0], [36])
	*($7 + [200]) = [0]
	*($7 + [508]) = $5
	*($7 + [504]) = $5
	*($7 + [512]) = ($5 + $3)
	*($7 + [424]) = ($7 + [504])
	*($7 + [464]) = ($7 + [112])
	CALL $28(($7 + [464]), ($7 + [424]))
	$1 = (($7 + [112]) + [16])
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	*(($5 = (($7 + [320]) + [24]))) = *(($1 + [24]))
	*(($3 = (($7 + [320]) + [16]))) = *(($1 + [16]))
	*($7 + [332]) = *(($1 + [12]))
	*($7 + [328]) = *(($1 + [8]))
	$4 = *($7 + [112])
	*($7 + [320]) = *($1)
	CALL memcpy(($7 + [280]), ($7 + [160]), [40])
	CALL memcpy(($7 + [240]), ($7 + [200]), [40])
	CALL memcpy(($7 + [424]), ($7 + [240]), [40])
	CALL memcpy(($7 + [384]), ($7 + [280]), [40])
	*((($7 + [352]) + [24])) = *($5)
	*((($7 + [352]) + [16])) = *($3)
	*($7 + [360]) = *($7 + [328])
	*($7 + [352]) = *($7 + [320])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	*(($5 = (($7 + [544]) + [24]))) = *((($7 + [352]) + [24]))
	*(($3 = (($7 + [544]) + [16]))) = *((($7 + [352]) + [16]))
	*($7 + [552]) = *($7 + [360])
	*($7 + [544]) = *($7 + [352])
	CALL memcpy(($7 + [504]), ($7 + [384]), [40])
	CALL memcpy(($7 + [464]), ($7 + [424]), [40])
	*((($7 + [80]) + [24])) = *($5)
	*((($7 + [80]) + [16])) = *($3)
	*($7 + [88]) = *($7 + [552])
	*($7 + [80]) = *($7 + [544])
	CALL memcpy(($7 + [40]), ($7 + [504]), [40])
	$7 = CALL memcpy($7, ($7 + [464]), [40])
	CALL void $1((int_32 $4), (int_64 ($7 + [80])), (int_32 ($7 + [40])), (int_32 $7), (int_32 $6))
	*([0] + [4]) = ($7 + [576])
	return [1]
}

int_32 .FUNC $10 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [624])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [592])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [624])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [592])
	*($0 + [40]) = (int_64)0
	*(($0 + [32])) = (int_64)4602678819172646912
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [624])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [592])
	*(($0 + [56])) = (int_64)4602678819172646912
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($1, *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [8]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [16]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [24]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [32]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [40]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($1 + [68]) = *(*($0 + [8]))
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $66(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $67($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $67($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [112])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [736]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [480]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [752])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [816]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$16 }
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [736]
	$9 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$27 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$22 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [80])) = $0
	*(($11 + [88])) = (int_64)-1
	*(($11 + [96])) = [0]
	*(($11 + [100])) = [0]
	*($11 + [64]) = [10800]
	*($11 + [56]) = $0
	*($11 + [72]) = $0
	*(($11 + [104])) = [0]
	*(($11 + [108])) = [0]
	if ( ((int_64)$2 == (int_64)-5001137286409207808) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)4923678677850772624) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$28 }
	*($11 + [52]) = [0]
	*($11 + [48]) = [1]
	*($11 + [8 align=4]) = *($11 + [48])
	CALL $15(($11 + [56]), ($11 + [8]))
	goto $label$28 
	
.LABEL $label$30
	*($11 + [44]) = [0]
	*($11 + [40]) = [2]
	*($11 + [16 align=4]) = *($11 + [40])
	CALL $17(($11 + [56]), ($11 + [16]))
	goto $label$28 
	
.LABEL $label$29
	*($11 + [36]) = [0]
	*($11 + [32]) = [3]
	*($11 + [24 align=4]) = *($11 + [32])
	CALL $19(($11 + [56]), ($11 + [24]))
	
.LABEL $label$28
	$4 = *(($11 + [96]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [100])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$32 }
	
.LOOP $label$33:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$34 }
	CALL $67($3)
	
.LABEL $label$34
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$33 }
	$6 = *(($11 + [96]))
	goto $label$31 
	
.LABEL $label$32
	$6 = $4
	
.LABEL $label$31
	*($5) = $4
	CALL $67($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [112])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL $37(*($0), $1)
	$0 = *($0)
	$3 = *($0)
	*($4 + [8]) = *(*($0 + [4]) + [8])
	if ( (CALL memcmp((*($0 + [8]) + [32]), ($4 + [8]), [8]) == 0) ){ goto $label$1 }
	$1 = *((*($0 + [12]) + [140]))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6497942746098040831, $4, *(*($0 + [16])))
	*((*(($0 + [12])) + [140])) = $1
	
.LABEL $label$2
	CALL db_idx64_update($1, *(*($0 + [20])), ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *(($3 + [40]))
	$5 = *(($3 + [32]))
	$6 = *(($3 + [24]))
	$7 = *($3 + [16])
	CALL eosio_assert([1], [1104])
	*($8 + [40]) = $7
	*($8 + [32]) = $6
	CALL eosio_assert([1], [1104])
	*((($8 + [32]) + [24])) = $5
	*($8 + [48]) = $4
	if ( (CALL memcmp(*($0 + [8]), ($8 + [32]), [32]) == 0) ){ goto $label$1 }
	$3 = *(*($0 + [12]) + [136])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$2 }
	*(($8 + [24])) = (int_64)0
	*(($8 + [16])) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	$3 = CALL db_idx256_find_primary(*($2), *($2 + [8]), (int_64)-6497942746098040832, $8, [2], *(*($0 + [16])))
	*(*(($0 + [12])) + [136]) = $3
	
.LABEL $label$2
	CALL db_idx256_update($3, *(*($0 + [20])), ($8 + [32]), [2])
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $35(CALL $35($0, ($1 + [48])), ($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [1328])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [32])
	return *($0 + [4]) = (*($0 + [4]) + [32])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	$6 = *($1)
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $7) > (int_32)[0]), [1328])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$7 = (*($4) + [1])
	*($4) = $7
	if ( $2 ){ goto $label$1 }
	$2 = ($0 + [8])
	$4 = [4]
	
.LOOP $label$2:
	CALL eosio_assert(((int_32)(*($2) - $7) > (int_32)[0]), [1328])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ($1 + $4), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[37]) ){ goto $label$2 }
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [48])
	$15 = $16
	*([0] + [4]) = $16
	$2 = *($0)
	$13 = *($0 + [4])
	$14 = *($13)
	$5 = ($14 + [32])
	$12 = *($5)
	if ( ((int_64)$12 != (int_64)-1) ){ goto $label$1 }
	$12 = (int_64)0
	$3 = ($14 + [16])
	$4 = CALL db_lowerbound_i64(*($3), *(($14 + [24])), (int_64)-6497942746098040832, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $23($3, $4)
	*($15 + [20]) = [0]
	*($15 + [16]) = $3
	$12 = *(*(CALL $33(($15 + [16])) + [4]))
	$12 = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($14 + [32])) = $12
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($12 <= (int_64)-2), [1264])
	*($1) = *($5)
	*($1 + [8]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + *($14 + [8]))
	$14 = *($13 + [4])
	*($1 + [16]) = *($14)
	*(($1 + [40])) = *(($14 + [24]))
	*(($1 + [32])) = *(($14 + [16]))
	*(($1 + [24])) = *(($14 + [8]))
	CALL memcpy(($1 + [48]), *($13 + [8]), [37])
	CALL memcpy(($1 + [88]), *($13 + [12]), [37])
	$12 = *($1 + [48])
	$13 = [110]
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$3 }
	$12 = *($1 + [88])
	
.LOOP $label$4:
	$13 = ($13 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$4 }
	if ( ($13 <= [513]) ){ goto $label$6 }
	$14 = CALL malloc($13)
	goto $label$5 
	
.LABEL $label$6
	$14 = ($16 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $14
	
.LABEL $label$5
	*($15 + [4]) = $14
	*($15) = $14
	*($15 + [8]) = ($14 + $13)
	CALL $34($15, $1)
	$12 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($2 + [8]), (int_64)-6497942746098040832, *(*($0 + [8])), $12, $14, $13)
	if ( ($13 <= [513]) ){ goto $label$7 }
	CALL free($14)
	
.LABEL $label$7
	if ( (uint_64)($12 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$13 = ($2 + [8])
	$12 = *($13)
	$14 = *(($0 + [8]))
	$6 = *($14)
	$7 = *($1)
	$8 = *(($1 + [40]))
	$9 = *(($1 + [32]))
	$10 = *(($1 + [24]))
	$11 = *($1 + [16])
	CALL eosio_assert([1], [1104])
	*($15 + [24]) = $11
	*($15 + [16]) = $10
	CALL eosio_assert([1], [1104])
	*((($15 + [16]) + [24])) = $9
	*($15 + [32]) = $8
	*($1 + [136]) = CALL db_idx256_store($12, (int_64)-6497942746098040832, $6, $7, ($15 + [16]), [2])
	$12 = *($14)
	$6 = *($13)
	$7 = *($1)
	*($15 + [16]) = *(($1 + [8]))
	*(($1 + [140])) = CALL db_idx64_store($6, (int_64)-6497942746098040831, $12, $7, ($15 + [16]))
	*([0] + [4]) = ($15 + [48])
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [132]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1408])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6497942746098040832)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1344])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1344])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $23(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	*(($10 = $8) + [96]) = $2
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1456])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1504])
	$7 = *(($1 + [40]))
	$9 = *(($1 + [24]))
	$5 = *(($1 + [32]))
	$6 = *($1 + [16])
	CALL eosio_assert([1], [1104])
	CALL eosio_assert([1], [1104])
	*((($10 + [48]) + [24])) = $5
	*($10 + [56]) = $6
	*($10 + [48]) = $9
	*($10 + [64]) = $7
	*($10 + [80]) = *($1 + [8])
	$9 = *($1)
	*($10 + [40]) = $9
	$3 = *($3)
	*($1 + [8]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + *($3 + [8]))
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [1568])
	$7 = *($1 + [48])
	$3 = [110]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$4 = ($0 + [36])
	$7 = *($1 + [88])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($10 + [28]) = $8
	*($10 + [24]) = $8
	*($10 + [32]) = ($8 + $3)
	CALL $34(($10 + [24]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($8)
	$9 = *($10 + [40])
	
.LABEL $label$5
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($10 + [4]) = $1
	*($10) = $0
	*($10 + [12]) = $1
	*($10 + [8]) = ($10 + [48])
	*($10 + [16]) = ($10 + [40])
	*($10 + [20]) = ($10 + [96])
	*($10 + [104]) = $10
	CALL $36(($10 + [104]), $4, ($4 + [1]))
	*([0] + [4]) = ($10 + [112])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $66([144])) + [88]) = [0]
	*($3 + [48]) = [0]
	*($3 + [128]) = $1
	CALL $32(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [132])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $27(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $67($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1328])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1328])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1328])
	CALL memcpy(*($4), ($7 + [4]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $60($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1088])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $44($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [720])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $64($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10640])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10726]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10728])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10726]) = [1]
	$7 = ($7 << [16])
	*([0] + [10728]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10728])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10728]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10726]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10726]) = [1]
	$3 = ($3 << [16])
	*([0] + [10728]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10728])
	
.LABEL $label$8
	*([0] + [10728]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	*($4 + [15]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [1328])
	CALL memcpy(*($3 + [4]), ($4 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [624])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [592])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $59($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $52 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $66($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	CALL $53(($9 + [52]), $3)
	CALL $46(($9 + [64]), ($9 + [24]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [68]) = $8
	CALL $67($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $67($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $67($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $67($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $72(($9 + [8]))
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [16]
	*($4 + [8]) = $4
	*($4 + [20]) = ($1 + [20])
	*($4 + [16]) = ($1 + [16])
	*($4 + [24]) = ($1 + [32])
	*($4 + [28]) = ($1 + [44])
	CALL $54(($4 + [16]), ($4 + [8]))
	*($4 + [8]) = $4
	*($4 + [20]) = ($1 + [60])
	*($4 + [16]) = ($1 + [56])
	*($4 + [24]) = ($1 + [72])
	*($4 + [28]) = ($1 + [84])
	CALL $54(($4 + [16]), ($4 + [8]))
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $44($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $0
	*($4 + [16]) = $0
	*($4 + [24]) = $3
	*($4) = ($4 + [16])
	*($4 + [8]) = $1
	CALL $55(($4 + [8]), $4)
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	*(($6 = *($1))) = (*($6) + [4])
	$5 = *($6)
	$6 = *($0 + [4])
	$3 = *($6 + [4])
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $5) / (int_32)[44]))
	$2 = *($1)
	$6 = *($2)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($2) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = ($6 + [35])
	$7 = *($5)
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	$5 = ($5 + [44])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$3 }
	*($2) = $6
	
.LABEL $label$2
	$3 = *($6)
	$6 = *($0 + [8])
	$5 = *($6 + [4])
	$4 = ($5 - $3)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$4 / (int_32)[24]))
	$2 = *($1)
	$6 = *($2)
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$6 = ((((int_32)((uint_32)($4 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $6) + [18])
	
.LABEL $label$6
	*($2) = $6
	$3 = *($6)
	$6 = *($0 + [12])
	$5 = *($6 + [4])
	$0 = ($5 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($0 >> [3]))
	$1 = *($1)
	$6 = *($1)
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = ((((int_32)uint_32(($0 + [-8]) >> [3]) * (int_32)[6]) + $6) + [6])
	
.LABEL $label$8
	*($1) = $6
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1328])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1328])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $56($0, ($3 + [20]))
	CALL $57($0, ($3 + [32]))
	CALL $58($0, ($3 + [44]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1328])
	CALL memcpy(*($0 + [4]), ($3 + [56]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $56($0, ($3 + [60]))
	CALL $57($0, ($3 + [72]))
	CALL $58($0, ($3 + [84]))
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[44]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [1328])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = CALL $35($0, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[1]), [1328])
	CALL memcpy(*($5 + [4]), ($7 + [40]), [2])
	*($5 + [4]) = (*($5 + [4]) + [2])
	$7 = ($7 + [44])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1328])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1328])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1328])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1328])
	CALL memcpy(*($4), ($7 + [16]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}