(data (i32.const 8192) "duplicated channel name\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8225) "channel not found\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8334) "channel not erased\00")
(data (i32.const 8353) "player not found\00")
(data (i32.const 8370) "invalid core symbol or precision\00")
(data (i32.const 8403) "invalid bet symbol name\00")
(data (i32.const 8427) "bet must be greater than zero\00")
(data (i32.const 8457) "can\'t find channel\00")
(data (i32.const 8476) "player\'s bet is not matched with channel\'s bet\00")
(data (i32.const 8528) "Solitaire Duel Bet\00")
(data (i32.const 8560) "Solitaire Duel Play Bonus\00")
(data (i32.const 8586) "can\'t find the bet with given match id\00")
(data (i32.const 8625) "can\'t find the bet with given join id\00")
(data (i32.const 8663) "invalid host player name\00")
(data (i32.const 8688) "invalid guest player name\00")
(data (i32.const 8714) "host\'s channel id is not matched with guest\'s channel id\00")
(data (i32.const 8771) "host\'s channel name is not matched with guest\'s channel name\00%llu\00")
(data (i32.const 8837) "host\'s channel bets is not matched with guest\'s channel bets\00")
(data (i32.const 8898) "host\'s channel fee is not matched with guest\'s channel fee\00")
(data (i32.const 8957) "host\'s channel prize is not matched with guest\'s channel prize\00")
(data (i32.const 9020) "host\'s channel play_reward is not matched with guest\'s channel play_reward\00")
(data (i32.const 9095) "host\'s channel win_reward is not matched with guest\'s channel win_reward\00")
(data (i32.const 9168) "host\'s channel play_time_in_sec is not matched with guest\'s channel play_time_in_sec\00")
(data (i32.const 9253) "host\'s channel expiry_in_sec is not matched with guest\'s channel expiry_in_sec\00")
(data (i32.const 9332) "host\'s bet is not matched with channel\'s bet\00")
(data (i32.const 9377) "guest\'s bet is not matched with channel\'s bet\00")
(data (i32.const 9424) "\90\ebT\90\e6c\e2\99")
(data (i32.const 9440) "Solitaire Duel Draw\00")
(data (i32.const 9472) "Solitaire Duel Win\00")
(data (i32.const 9504) "Solitaire Duel Win Bonus\00")
(data (i32.const 9536) "Solitaire Duel Fee\00")
(data (i32.const 9555) "ids arry must not be empty\00")
(data (i32.const 9582) "bet not found\00: no conversion\00")
(data (i32.const 9616) "Solitaire Duel Expired\00")
(data (i32.const 9639) "referrer\'s account name is not in EOS network\00: out of range\00")
(data (i32.const 9700) "referrer is already in reflist\00")
(data (i32.const 9731) "referrer not found\00")
(data (i32.const 9750) "player is in blacklist\00")
(data (i32.const 9773) "unable to find key\00")
(data (i32.const 9792) "player:\00")
(data (i32.const 9800) ",referrer:\00")
(data (i32.const 9811) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9860) "invalid symbol name\00")
(data (i32.const 9880) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9939) "write\00")
(data (i32.const 9945) "multiplication overflow\00")
(data (i32.const 9969) "multiplication underflow\00")
(data (i32.const 9996) "\10\'\00\00")
(data (i32.const 10000) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10033) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10084) "error reading iterator\00")
(data (i32.const 10107) "read\00")
(data (i32.const 10112) "object passed to modify is not in multi_index\00")
(data (i32.const 10158) "cannot modify objects in table of another contract\00")
(data (i32.const 10209) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10268) "cannot create objects in table of another contract\00")
(data (i32.const 10319) "cannot pass end iterator to erase\00")
(data (i32.const 10353) "cannot increment end iterator\00")
(data (i32.const 10383) "object passed to erase is not in multi_index\00")
(data (i32.const 10428) "cannot erase objects in table of another contract\00")
(data (i32.const 10478) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10531) "get\00")
(data (i32.const 10535) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10587) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10641) "cannot decrement iterator at beginning of table\00")
(data (i32.const 19120) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19200) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "transaction_size" (func $fimport$9 (result i32)))
(import "env" "read_transaction" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$11 (param i32 i32 i32)))
(import "env" "is_account" (func $fimport$12 (param i64) (result i32)))
(import "env" "__multi3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "db_previous_i64" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$22 (param i64 i64 i64) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_idx256_store" (func $fimport$24 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$25 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_idx256_find_primary" (func $fimport$26 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_next" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_idx256_remove" (func $fimport$28 (param i32)))
(import "env" "memset" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$30 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $53))
(export "_Znwj" (func $97))
(export "_ZdlPv" (func $99))
(export "_Znaj" (func $98))
(export "_ZdaPv" (func $100))
(export "_ZnwjSt11align_val_t" (func $101))
(export "_ZnajSt11align_val_t" (func $102))
(export "_ZdlPvSt11align_val_t" (func $103))
(export "_ZdaPvSt11align_val_t" (func $104))
(table $0 17 17 anyfunc)
(elem (i32.const 1) $50 $41 $17 $14 $1 $30 $12 $8 $19 $6 $46 $21 $44 $40 $125 $127)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19457))
(global $global$2 i32 (i32.const 19457))


int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $142($0)
	
.LABEL $label$1
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $121($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $64(*($1), *($0 + [12]))
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10107])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [5])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$4 }
	$3 = [134217727]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$3 = int_32($2 >> [4])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [32])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $121($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [5]))
	$5 = ($2 + ($5 << [5]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [5]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $139($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10692])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $139($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]) ){ goto $label$2 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [16])
	*($2) = *($1)
	*($2 + [12]) = ($4 + [8])
	*($2 + [8]) = $4
	*($2 + [16]) = ($4 + [20])
	*($2 + [20]) = ($4 + [32])
	*($2 + [24]) = ($4 + [48])
	*($2 + [28]) = ($4 + [64])
	*($2 + [32]) = ($4 + [80])
	*($2 + [36]) = ($4 + [96])
	*($2 + [40]) = ($4 + [104])
	CALL $78(($2 + [8]), $2)
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$5 = *($0 + [24])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10107])
	$0 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [48])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = (*($2) + [32])
	*(($2 = *($1))) = $1
	$3 = *($0 + [224])
	$0 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *($0 + [228]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($0 + [224]))
	$3 = ( *(($0 + [228])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [40])
	*($2) = $1
	$3 = *($0 + [280])
	$4 = (CASTING uint_64)(uint_32 ( *($0 + [284]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *(($0 + [280]))
	$3 = ( *(($0 + [284])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [8])
	*($2) = $1
	$3 = *($0 + [304])
	$4 = (CASTING uint_64)(uint_32 ( *($0 + [308]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [304]))
	$0 = ( *(($0 + [308])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $85(*($1), *($0 + [12]))
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9939])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [56])
	$6 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $6) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10107])
	$6 = *(($5 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $6, [8])
	$4 = (*($6) + [8])
	*(($6 = ($5 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($5 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10107])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*(($3 + [64])) = *($2 + [8])
	*($6) = (*($6) + [8])
	$5 = *($0)
	$0 = ($5 + [72])
	$4 = *($6 + [4])
	$6 = *($1)
	if ( ((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10107])
	$4 = *(($6 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $4, [8])
	$0 = (*($4) + [8])
	*(($4 = ($6 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($6 + [8])) - $0) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10107])
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [80])) = *($2 + [8])
	*($4) = (*($4) + [8])
	$0 = ($5 + [88])
	$4 = *($6 + [4])
	$6 = *($1)
	if ( ((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10107])
	$4 = *(($6 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $4, [8])
	*(($6 = ($6 + [4]))) = (*($6) + [8])
	$0 = ($5 + [96])
	$4 = *($6 + [4])
	$6 = *($1)
	if ( ((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10107])
	$4 = *(($6 + [4]))
	
.LABEL $label$6
	CALL memcpy($0, $4, [8])
	*(($6 = ($6 + [4]))) = (*($6) + [8])
	CALL $64(*($1), ($5 + [104]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $139($1)
	
.LABEL $label$2
	*(CALL $122()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $139(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $142($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $123 (int_32 $0)
{
}

void .FUNC $115 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $118($1, $0, [9685])
	CALL $119()
	(unreachable)
}

int_32 .FUNC $122 ()
{
	return [10696]
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $129($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $131 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $132 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $130($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_64 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $132($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $122()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $132($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19201]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $131($0, (int_64)0)
	*(CALL $122()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $132($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $132($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $132($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $132($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19201])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $132($0)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $132($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8216]))
	$8 = (int_64)0
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $132($0)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $132($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $131($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19201]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19201]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $132($0) + [19201]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $122()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $122()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $122()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $131($3, (int_64)0)
	$4 = CALL $133($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

void .FUNC $121 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $122())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $138($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $120 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$4 = (*($3) + [64])
	*(($3 = *($1))) = $4
	$5 = *($0 + [64])
	$0 = *($0)
	$6 = (CASTING uint_64)(uint_32 ( *($0 + [68]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$5 = *(($0 + [64]))
	$5 = ( *(($0 + [68])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$2 }
	$4 = ($5 + $4)
	*($3) = $4
	
.LABEL $label$2
	$4 = ($4 + [8])
	*($3) = $4
	$5 = *($0 + [88])
	$6 = (CASTING uint_64)(uint_32 ( *($0 + [92]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($3) = $4
	$5 = *(($0 + [88]))
	$5 = ( *(($0 + [92])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($5 + $4)
	*($3) = $4
	
.LABEL $label$4
	$7 = *(($0 + [100]))
	$5 = *($0 + [104])
	$8 = ($5 - $7)
	$6 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$6 }
	$4 = (($8 & [-16]) + $4)
	
.LABEL $label$6
	*($3) = ($4 + [80])
	*($2 + [8]) = $0
	CALL $91(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)1
	$4 = *($0)
	$5 = ($1 + [8])
	CALL $107($5, *(*($0 + [4])))
	$6 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($6)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $6)
	$7 = $2
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9939])
	$7 = *($3 + [4])
	
.LABEL $label$4
	CALL memcpy($7, $1, [8])
	*($3 + [4]) = ($7 + [8])
	CALL $85($3, $5)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159551873908736, *(*($0 + [8])), $8, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $142($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$5 = $2
	CALL $117($5, *(*($3 + [4])))
	$6 = ($1 + [8])
	if ( (*($1 + [8]) & [1]) ){ goto $label$2 }
	*($6) = [0]
	$3 = ($1 + [12])
	goto $label$1 
	
.LABEL $label$2
	*(*(($1 + [16]))) = [0]
	*(($3 = ($1 + [12]))) = [0]
	
.LABEL $label$1
	CALL $109($6, [0])
	*(($6 + [8])) = *(($5 + [8]))
	*($6) = *($5)
	$3 = *($6)
	$7 = ( *($3) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($3 <= [513]) ){ goto $label$5 }
	$2 = CALL $139($3)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = ($2 + $3)
	$7 = $2
	if ( ((int_32)$3 > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9939])
	$7 = *($5 + [4])
	
.LABEL $label$6
	CALL memcpy($7, $1, [8])
	*($5 + [4]) = ($7 + [8])
	CALL $85($5, $6)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($4 + [8]), (int_64)-5001503146665574400, *(*($0 + [8])), $8, $2, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $142($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [8]) = $2
	*($3 + [16]) = $1
	CALL require_auth((int_64)-7101989278066649744)
	CALL eosio_assert(CALL eosio_assert2($1), [9639])
	$4 = ($0 + [192])
	$6 = *(($0 + [220]))
	$5 = *(($0 + [216]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*($8 + [20]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [200])), (int_64)-5001503146665574400, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $36($4, $7)
	if ( ((int_32)*($8 + [20]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$1
	CALL eosio_assert(($8 == 0), [9700])
	$1 = *($0)
	*($3 + [4]) = ($3 + [8])
	*($3) = ($3 + [16])
	*($3 + [56]) = $1
	if ( ((int_64)*(($0 + [192])) == (int_64)CALL current_receiver()) ){ goto $label$5 }
	CALL eosio_assert([0], [10268])
	
.LABEL $label$5
	*($3 + [32]) = $4
	*($3 + [36]) = $3
	*($3 + [40]) = ($3 + [56])
	*(($7 = CALL _Znwj([32]))) = (int_64)0
	*($7 + [8 align=4]) = (int_64)0
	*($7 + [16]) = [0]
	*($7 + [20]) = $4
	CALL $42(($3 + [32]), $7)
	*($3 + [48]) = $7
	$1 = *($7)
	*($3 + [32]) = $1
	$8 = *($7 + [24])
	*($3 + [28]) = $8
	$5 = ($0 + [220])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [224]))) ){ goto $label$8 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [48]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [216]), ($3 + [48]), ($3 + [32]), ($3 + [28]))
	$7 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$6
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$9
	CALL _ZdlPv($7)
	$global$0 = ($3 + [64])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth((int_64)-7101989278066649744)
	CALL eosio_assert(((int_32)*($1 + [4]) != (int_32)*($1)), [9555])
	*($3 + [56]) = ($0 + [152])
	$5 = *($1 + [4])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	$6 = ($3 | [1])
	$7 = ($3 | [1])
	$8 = (($3 + [16]) | [1])
	$9 = (($3 + [16]) + [16])
	
.LOOP $label$4:
	*((($3 + [16]) + [24])) = *(($4 + [24]))
	*($9) = *($4 + [16])
	*($3 + [24]) = *(($4 + [8]))
	*($3 + [16]) = *($4)
	CALL $31(($3 + [48]), ($3 + [56]), ($3 + [16]))
	CALL eosio_assert(((int_32)*($3 + [52]) != (int_32)[0]), [9582])
	$1 = *($3 + [52])
	$10 = *(($1 + [64]))
	if ( ((int_64)$10 == (int_64)1414288128) ){ goto $label$12 }
	if ( ((int_64)$10 != (int_64)1397703940) ){ goto $label$5 }
	$10 = *(( [9424] ? ($1 + [48]) : *($1 + [184]) ))
	$11 = *($0)
	*(($12 = (($3 + [16]) + [8]))) = [0]
	*($3 + [16]) = (int_64)0
	$13 = CALL $136([9616])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$1 }
	$14 = ($1 + [56])
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$11 }
	*($3 + [16]) = ($13 << [1])
	$1 = $8
	if ( $13 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	*((($3 + [16]) + [8])) = (int_64)1397703940
	$10 = *($1 + [56])
	*($3 + [16]) = $10
	if ( (uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$13 }
	CALL eosio_assert([0], [9811])
	
.LABEL $label$13
	$10 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$10 = $11
	$13 = $1
	$1 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$10 = $11
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$13 = ((int_32)$1 < (int_32)[6])
	$12 = ($1 + [1])
	$1 = $12
	if ( $13 ){ goto $label$18 }
	$1 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([0], [9860])
	
.LABEL $label$14
	$10 = *($0)
	*(($13 = ($3 + [8]))) = [0]
	*($3) = (int_64)0
	$1 = CALL $136([9616])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$8 }
	*($3) = ($1 << [1])
	$12 = $7
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	$15 = (($13 + [16]) & [-16])
	$1 = CALL _Znwj($15)
	*($12) = $1
	*($3 + [16]) = ($15 | [1])
	*($3 + [20]) = $13
	
.LABEL $label$10
	CALL memcpy($1, [9616], $13)
	
.LABEL $label$9
	*(($1 + $13)) = [0]
	CALL $23($1, $11, $10, $14, ($3 + [16]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($12))
	goto $label$5 
	
.LABEL $label$8
	$14 = (($1 + [16]) & [-16])
	$12 = CALL _Znwj($14)
	*($13) = $12
	*($3) = ($14 | [1])
	*($3 + [4]) = $1
	
.LABEL $label$7
	CALL memcpy($12, [9616], $1)
	
.LABEL $label$6
	*(($12 + $1)) = [0]
	CALL $23($1, $10, (int_64)-7358208999254862384, ($3 + [16]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($13))
	
.LABEL $label$19
	$12 = *($3 + [52])
	$10 = *(( [9424] ? ($12 + [48]) : *($12 + [184]) ))
	*($13) = [0]
	*($3) = (int_64)0
	$1 = CALL $136([9616])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	$14 = ($12 + [56])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$22 }
	*($3) = ($1 << [1])
	$12 = $6
	if ( $1 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$15 = (($1 + [16]) & [-16])
	$12 = CALL _Znwj($15)
	*($13) = $12
	*($3) = ($15 | [1])
	*($3 + [4]) = $1
	
.LABEL $label$21
	CALL memcpy($12, [9616], $1)
	
.LABEL $label$20
	*(($12 + $1)) = [0]
	CALL $24($1, (int_64)-7358208999254862384, $10, $14, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($13))
	
.LABEL $label$5
	$10 = *($3 + [48])
	*($3 + [16]) = $10
	$1 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32)
	if ( $1) ){ goto $label$23 }
	CALL eosio_assert([0], [10319])
	$1 = *($3 + [20])
	
.LABEL $label$23
	CALL $34(($3 + [16]))
	CALL $35(*($3 + [56]), $1)
	$4 = ($4 + [32])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($3 + [64])
	return (unreachable)
	
.LABEL $label$2
	CALL $105($3)
	
.LABEL $label$1
	CALL $105(($3 + [16]))
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10112])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10158])
	
.LABEL $label$2
	$6 = *($1)
	$7 = ($1 + [8])
	CALL $107($7, *($3))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [10209])
	
.LABEL $label$3
	$3 = *($7)
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [8])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $139($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	$8 = $4
	if ( ((int_32)$3 > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9939])
	$8 = *($5 + [4])
	
.LABEL $label$7
	CALL memcpy($8, $1, [8])
	*($5 + [4]) = ($8 + [8])
	CALL $85($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $142($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth((int_64)-7101989278066649744)
	$3 = ($0 + [232])
	$5 = *(($0 + [260]))
	$4 = *(($0 + [256]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($7 + [20]) == (int_32)$3) ){ goto $label$6 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$6
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [240])), (int_64)7235159551873908736, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $37($3, $6)
	if ( ((int_32)*($7 + [20]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$2
	$8 = *($0)
	*($2 + [16]) = $1
	CALL $47($3, $7, $8, ($2 + [16]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	$8 = *($0)
	*($2 + [8]) = $1
	*($2 + [40]) = $8
	if ( ((int_64)*(($0 + [232])) == (int_64)CALL current_receiver()) ){ goto $label$7 }
	CALL eosio_assert([0], [10268])
	
.LABEL $label$7
	*($2 + [16]) = $3
	*($2 + [20]) = ($2 + [8])
	*($2 + [24]) = ($2 + [40])
	*(($6 = CALL _Znwj([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $3
	CALL $48(($2 + [16]), $6)
	*($2 + [32]) = $6
	$8 = *($6)
	*($2 + [16]) = $8
	$7 = *($6 + [24])
	*($2 + [12]) = $7
	$4 = ($0 + [260])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [264]))) ){ goto $label$10 }
	*($5 + [8]) = $8
	*($5 + [16]) = $7
	*($2 + [32]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $49(($0 + [256]), ($2 + [32]), ($2 + [16]), ($2 + [12]))
	$6 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( $6 ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$8
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($6)
	$global$0 = ($2 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10383])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10428])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10478])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($8 + [16])))
	
.LABEL $label$16
	CALL _ZdlPv($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $44 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth((int_64)-7101989278066649744)
	$4 = ($0 + [192])
	$6 = *(($0 + [220]))
	$5 = *(($0 + [216]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*($8 + [20]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [200])), (int_64)-5001503146665574400, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $36($4, $7)
	if ( ((int_32)*($8 + [20]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9731])
	if ( $8 ){ goto $label$5 }
	CALL eosio_assert([0], [10319])
	CALL eosio_assert([0], [10353])
	
.LABEL $label$5
	$7 = CALL db_next_i64(*($8 + [24]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	CALL $36($4, $7)
	
.LABEL $label$6
	CALL $45($4, $8)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [15] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $126($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $126($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $126($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $126($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19120]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $126($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $126($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $126($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $124([16], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$10 = ($global$0 - [96])
	$global$0 = $10
	*($10 + [40]) = $8
	*($10 + [48]) = $7
	CALL require_auth((int_64)-7101989278066649744)
	$11 = ($0 + [72])
	$12 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)4849595776591986688, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$13 = ($1 + [1])
	$14 = CALL $9($11, $12)
	$15 = ($1 + [4])
	
.LOOP $label$2:
	$16 = [1]
	$20 = ($12 & [1])
	$12 = *($1)
	$18 = ($12 & [1])
	$12 = *($14 + [8])
	$17 = uint_32($12 >> [1])
	$19 = ( *(($14 + [12])) ? $17 : $18 )
	if ( ((int_32)$19 != (int_32)( *($15) ? uint_32($12 >> [1]) : $20 )) ){ goto $label$3 }
	$12 = (($14 + [8]) + [1])
	$20 = ( *(($1 + [8])) ? $13 : $20 )
	if ( $18 ){ goto $label$5 }
	$16 = [0]
	if ( ($19 == 0) ){ goto $label$3 }
	$18 = ([0] - $17)
	
.LOOP $label$6:
	if ( ((int_32)*($12) != (int_32)*($20)) ){ goto $label$4 }
	$20 = ($20 + [1])
	$12 = ($12 + [1])
	$18 = ($18 + [1])
	if ( $18 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	if ( ($19 == 0) ){ goto $label$7 }
	$16 = ((int_32)CALL $135(( *(($14 + [16])) ? $12 : $18 ), $20, $19) != (int_32)[0])
	goto $label$3 
	
.LABEL $label$7
	$16 = [0]
	goto $label$3 
	
.LABEL $label$4
	$16 = [1]
	
.LABEL $label$3
	CALL eosio_assert($16, [8192])
	$12 = CALL db_next_i64(*($14 + [116]), $10)
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$1 }
	$14 = CALL $9($11, $12)
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	*($10 + [4]) = $1
	*($10) = $0
	*($10 + [8]) = $2
	*($10 + [12]) = $3
	*($10 + [16]) = $4
	*($10 + [20]) = $5
	*($10 + [24]) = $6
	*($10 + [28]) = ($10 + [48])
	*($10 + [32]) = ($10 + [40])
	*($10 + [88]) = $7
	if ( ((int_64)*($11) == (int_64)CALL current_receiver()) ){ goto $label$8 }
	CALL eosio_assert([0], [10268])
	
.LABEL $label$8
	*($10 + [64]) = $11
	*($10 + [68]) = $10
	*($10 + [72]) = ($10 + [88])
	*(($12 = CALL _Znwj([128])) + [8 align=4]) = (int_64)0
	*($12 + [16 align=4]) = (int_64)0
	*($12 + [24 align=4]) = (int_64)0
	*($12 + [32]) = (int_64)0
	*($12 + [40]) = (int_64)0
	*($12 + [48]) = (int_64)0
	*($12 + [56]) = (int_64)0
	*($12 + [64]) = (int_64)0
	*($12 + [72]) = (int_64)0
	*($12 + [80]) = (int_64)0
	*($12 + [88]) = (int_64)0
	*($12 + [112]) = $11
	CALL $10(($10 + [64]), $12)
	*($10 + [80]) = $12
	$7 = *($12)
	*($10 + [64]) = $7
	$18 = *($12 + [116])
	*($10 + [60]) = $18
	$14 = ($0 + [100])
	$20 = *($14)
	if ( ((uint_32)$20 >= (uint_32)*(($0 + [104]))) ){ goto $label$11 }
	*($20 + [8]) = $7
	*($20 + [16]) = $18
	*($10 + [80]) = [0]
	*($20) = $12
	*($14) = ($20 + [24])
	$12 = *($10 + [80])
	*($10 + [80]) = [0]
	if ( ($12 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $11(($0 + [96]), ($10 + [80]), ($10 + [64]), ($10 + [60]))
	$12 = *($10 + [80])
	*($10 + [80]) = [0]
	if ( $12 ){ goto $label$9 }
	
.LABEL $label$10
	$global$0 = ($10 + [96])
	return 
	
.LABEL $label$9
	$20 = *($12 + [20])
	if ( ($20 == 0) ){ goto $label$12 }
	*(($12 + [24])) = $20
	CALL _ZdlPv($20)
	
.LABEL $label$12
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($12 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($12)
	$global$0 = ($10 + [96])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10084])
	
.LABEL $label$5
	$4 = CALL $139($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL _Znwj([128])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [112]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [20])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [104])
	CALL $78(($3 + [40]), ($3 + [32]))
	*($5 + [116]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $11(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $142($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth((int_64)-7101989278066649744)
	$3 = ($0 + [32])
	$4 = *(($0 + [60]))
	if ( ((int_32)$4 == (int_32)*(($0 + [56]))) ){ goto $label$3 }
	$0 = *(($4 + [-24]))
	if ( ((int_32)*($0 + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$4
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $3($3, $0)
	if ( ((int_32)*($0 + [8]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$2
	$4 = CALL db_next_i64(*($0 + [12]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL $3($3, $4)
	
.LABEL $label$5
	CALL $7($3, $0)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10383])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10428])
	
.LABEL $label$2
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$5 }
	$4 = ($3 + [-24])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [10478])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$2 = $3
	
.LOOP $label$7:
	$4 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $4
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$7 }
	$4 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ($3 + [-24])
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $4
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $4 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10112])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10158])
	
.LABEL $label$2
	*($1) = *(*($3))
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $3, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [10268])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, (int_64)4982871454518345728, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)4982871454518345728
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)4982871454518345728
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $77(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $2 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $3($0, $4)
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$2
	*($3) = $1
	CALL $4($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $5($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10084])
	
.LABEL $label$5
	$2 = CALL $139($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10107])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)4982871454518345728
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = (int_64)4982871454518345728
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $77(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $142($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth((int_64)-7101989278066649744)
	*($3 + [8]) = $1
	CALL $2(($0 + [32]), ($3 + [8]), *($0))
	$global$0 = ($3 + [16])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth((int_64)-7101989278066649744)
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*($8 + [8]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)4344997574076792832, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $15($4, $7) + [8]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$5
	$9 = *($0)
	if ( ((int_64)*(($0 + [112])) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [10268])
	
.LABEL $label$6
	*(($7 = CALL _Znwj([24])) + [8]) = $4
	*($7) = $1
	CALL memcpy(($3 + [16]), $7, [8])
	$1 = *($7)
	$5 = CALL db_store_i64(*(($0 + [120])), (int_64)4344997574076792832, $9, $1, ($3 + [16]), [8])
	*($7 + [12]) = $5
	$6 = ($0 + [128])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$7 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($3 + [8]) = $7
	$1 = *($7)
	*($3 + [16]) = $1
	*($3 + [4]) = $5
	$8 = ($0 + [140])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [144]))) ){ goto $label$9 }
	*($6 + [8]) = $1
	*($6 + [16]) = $5
	*($3 + [8]) = [0]
	*($6) = $7
	*($8) = ($6 + [24])
	$7 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( $7 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL $16(($0 + [136]), ($3 + [8]), ($3 + [16]), ($3 + [4]))
	$7 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10084])
	
.LABEL $label$5
	$2 = CALL $139($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10107])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($8) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $16(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $142($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth((int_64)-7101989278066649744)
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*($8 + [8]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)4344997574076792832, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $15($4, $7)
	if ( ((int_32)*($8 + [8]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8353])
	if ( $8 ){ goto $label$5 }
	CALL eosio_assert([0], [10319])
	CALL eosio_assert([0], [10353])
	
.LABEL $label$5
	$7 = CALL db_next_i64(*($8 + [12]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	CALL $15($4, $7)
	
.LABEL $label$6
	CALL $18($4, $8)
	$global$0 = ($3 + [16])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *(($6 + [88]))
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = ($6 + [72])
	$9 = CALL db_lowerbound_i64(*($8), *(($6 + [80])), (int_64)4849595776591986688, (int_64)0)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $9($8, $9)
	*($3 + [28]) = [0]
	*($3 + [24]) = $8
	$7 = *(*(CALL $82(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [88])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [10535])
	$7 = *(($6 + [88]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [88])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	$8 = ($1 + [8])
	CALL $107($8, *($5 + [4]))
	$6 = *($5 + [8])
	$9 = ($1 + [20])
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	CALL $83($9, *($6), *($6 + [4]))
	
.LABEL $label$5
	$6 = *($5 + [12])
	*($1 + [32]) = *($6)
	*(($1 + [40])) = *(($6 + [8]))
	$6 = *($5 + [16])
	*($1 + [48]) = *($6)
	*(($1 + [56])) = *(($6 + [8]))
	$6 = *($5 + [20])
	*($1 + [64]) = *($6)
	*(($1 + [72])) = *(($6 + [8]))
	$6 = *($5 + [24])
	*($1 + [80]) = *($6)
	*(($1 + [88])) = *(($6 + [8]))
	*($1 + [96]) = *(*($5 + [28]))
	*($1 + [104]) = *(*($5 + [32]))
	$5 = *($8)
	$6 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [8])
	$7 = (CASTING uint_64)(uint_32 $6)
	$10 = ($1 + [104])
	$11 = ($1 + [96])
	$12 = ($1 + [80])
	$13 = ($1 + [64])
	$14 = ($1 + [48])
	$15 = ($1 + [32])
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	$16 = *($1 + [20])
	$6 = *(($1 + [24]))
	$17 = ($6 - $16)
	$7 = (CASTING uint_64)(uint_32 int_32($17 >> [4]))
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$16 == (int_32)$6) ){ goto $label$8 }
	$5 = (($17 & [-16]) + $5)
	
.LABEL $label$8
	$6 = ($5 + [80])
	if ( ($6 <= [513]) ){ goto $label$10 }
	$5 = CALL $139($6)
	goto $label$9 
	
.LABEL $label$10
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$9
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $6)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $15
	*($3 + [40]) = $14
	*($3 + [44]) = $13
	*($3 + [48]) = $12
	*($3 + [52]) = $11
	*($3 + [56]) = $10
	CALL $84(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($4 + [8]), (int_64)4849595776591986688, *(*($0 + [8])), $7, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$13 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $142($5)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$11 }
	
.LABEL $label$12
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$11
	$global$0 = ($3 + [64])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [20])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [24])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth((int_64)-7101989278066649744)
	$5 = *($1 + [4])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = ($0 + [72])
	$7 = ($0 + [100])
	$8 = ($0 + [96])
	$9 = ($0 + [80])
	
.LOOP $label$2:
	$10 = *($4)
	$1 = *($7)
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$7:
	$0 = ($1 + [-24])
	$12 = *($0)
	if ( ((int_64)*($12) == (int_64)$10) ){ goto $label$6 }
	$1 = $0
	if ( ((int_32)$11 != (int_32)$0) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$11 == (int_32)$1) ){ goto $label$5 }
	if ( ((int_32)*($12 + [112]) != (int_32)$6) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$12 = [0]
	$0 = CALL db_find_i64(*($6), *($9), (int_64)4849595776591986688, $10)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $9($6, $0)
	if ( ((int_32)*($12 + [112]) == (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [10033])
	
.LABEL $label$3
	$0 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($0, [8225])
	if ( $12 ){ goto $label$8 }
	CALL eosio_assert([0], [10319])
	CALL eosio_assert([0], [10353])
	
.LABEL $label$8
	$1 = CALL db_next_i64(*($12 + [116]), ($3 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$9 }
	CALL $9($6, $1)
	
.LABEL $label$9
	CALL $13($6, $12)
	CALL eosio_assert($0, [8334])
	$4 = ($4 + [8])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [112]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10383])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10428])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10478])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	$7 = *($5 + [20])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($5 + [24])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$14
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$2 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$16 }
	$7 = *($8 + [20])
	if ( ($7 == 0) ){ goto $label$17 }
	*(($8 + [24])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($8 + [16])))
	
.LABEL $label$18
	CALL _ZdlPv($8)
	
.LABEL $label$16
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $2
	CALL db_remove_i64(*($1 + [116]))
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9939])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9939])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9939])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10383])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10428])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10478])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_auth($1)
	CALL $20($0, $1)
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [576])
	$global$0 = $3
	*(($4 = $3) + [520]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [304]) + [24])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*((($4 + [304]) + [56])) = (int_64)0
	*((($4 + [304]) + [48])) = (int_64)0
	*((($4 + [304]) + [40])) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [376]) = [0]
	*($4 + [408]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [392]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [416]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [424]) = [0]
	*($4 + [480]) = (int_64)0
	*($4 + [472]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [440]) = (int_64)0
	*($4 + [448]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [472]) = [0]
	*($4 + [476]) = [0]
	*($4 + [480]) = [0]
	*($4 + [488]) = (int_64)0
	*($4 + [496]) = [0]
	*($4 + [500]) = [0]
	*($4 + [504]) = [0]
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $5)
	*($4 + [560]) = ($4 + [288])
	*($4 + [16]) = ($4 + [304])
	CALL $71(($4 + [16]), ($4 + [560]))
	*(($3 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$3 = *($3)
	*((($4 + [528]) + [8])) = $3
	*(($6 = (($4 + [544]) + [8]))) = $3
	$7 = *($4)
	*($4 + [544]) = $7
	*($4 + [528]) = $7
	$3 = *($6)
	*((($4 + [560]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [544])
	*($4 + [32]) = $1
	*($4 + [560]) = $1
	*((($4 + [16]) + [40])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [564]) = ($4 + [520])
	*($4 + [560]) = ($4 + [16])
	CALL $72(($4 + [560]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $142($2)
	
.LABEL $label$4
	CALL $65(($4 + [16]))
	if ( ((*(($4 + [496])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [504])))
	
.LABEL $label$5
	if ( ((*(($4 + [472])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [480])))
	
.LABEL $label$6
	if ( ((*(($4 + [416])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [424])))
	
.LABEL $label$7
	if ( ((*(($4 + [368])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [376])))
	
.LABEL $label$8
	$global$0 = ($4 + [576])
	return [1]
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [384])
	$global$0 = $3
	*(($4 = $3) + [328]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [320])) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $5)
	CALL $68(($4 + [288]), ($4 + [304]))
	CALL $64(($4 + [288]), ($4 + [316]))
	*(($3 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$3 = *($3)
	*((($4 + [336]) + [8])) = $3
	*(($6 = (($4 + [352]) + [8]))) = $3
	$7 = *($4)
	*($4 + [352]) = $7
	*($4 + [336]) = $7
	$3 = *($6)
	*((($4 + [368]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [352])
	*($4 + [32]) = $1
	*($4 + [368]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [372]) = ($4 + [328])
	*($4 + [368]) = ($4 + [16])
	CALL $69(($4 + [368]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $142($2)
	
.LABEL $label$4
	CALL $65(($4 + [16]))
	if ( ((*($4 + [316]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [324])))
	
.LABEL $label$5
	$2 = *($4 + [304])
	if ( ($2 == 0) ){ goto $label$6 }
	*($4 + [308]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $50 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth((int_64)-7101989278066649744)
	$3 = ($0 + [232])
	$5 = *(($0 + [260]))
	$4 = *(($0 + [256]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($7 + [20]) == (int_32)$3) ){ goto $label$6 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$6
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [240])), (int_64)7235159551873908736, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $37($3, $6)
	if ( ((int_32)*($7 + [20]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$2
	$6 = CALL db_next_i64(*($7 + [24]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL $37($3, $6)
	
.LABEL $label$7
	CALL $51($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10383])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10428])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10478])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($8 + [16])))
	
.LABEL $label$16
	CALL _ZdlPv($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [24]))
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $76(CALL $75($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9939])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9939])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-4417057682011717633) ){ goto $label$14 }
	if ( ((int_64)$2 <= (int_64)-4859151664184557569) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)-4850757479467319297) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4859151664184557568) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-4856822012060258816) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [1]
	*($3 + [104]) = *($3 + [112])
	CALL $54($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 <= (int_64)3626108647904657407) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)4730614989642530815) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)3626108647904657408) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)3626370966177071104) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [2]
	*($3 + [80]) = *($3 + [136])
	CALL $55($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-8279611178955571200) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4997502822907192128) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4859644435866701312) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [3]
	*($3 + [40]) = *($3 + [176])
	CALL $56($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-4417057682011717632) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-4157529865748217856) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)3626093248789590416) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [4]
	*($3 + [32]) = *($3 + [184])
	CALL $56($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4850757479467319296) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4417316219328135168) ){ goto $label$1 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [5]
	*($3) = *($3 + [216])
	CALL $57($1, $1, $3)
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)4730614989642530816) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)6604225621445450240) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [6]
	*($3 + [64]) = *($3 + [152])
	CALL $58($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [196]) = [0]
	*($3 + [192]) = [7]
	*($3 + [24]) = *($3 + [192])
	CALL $59($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [204]) = [0]
	*($3 + [200]) = [8]
	*($3 + [16]) = *($3 + [200])
	CALL $60($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [172]) = [0]
	*($3 + [168]) = [9]
	*($3 + [48]) = *($3 + [168])
	CALL $56($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [212]) = [0]
	*($3 + [208]) = [10]
	*($3 + [8]) = *($3 + [208])
	CALL $61($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [124]) = [0]
	*($3 + [120]) = [11]
	*($3 + [96]) = *($3 + [120])
	CALL $61($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [164]) = [0]
	*($3 + [160]) = [12]
	*($3 + [56]) = *($3 + [160])
	CALL $62($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [132]) = [0]
	*($3 + [128]) = [13]
	*($3 + [88]) = *($3 + [128])
	CALL $56($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [148]) = [0]
	*($3 + [144]) = [14]
	*($3 + [72]) = *($3 + [144])
	CALL $63($1, $1, ($3 + [72]))
	
.LABEL $label$1
	CALL $123([0])
	$global$0 = ($3 + [224])
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10107])
	
.LABEL $label$5
	CALL memcpy(($4 + [280]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [196])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = [0]
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [268])) = (int_64)0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $142($2)
	
.LABEL $label$7
	CALL $65(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [208])
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [10353])
	$2 = *(($0 + [4]))
	$3 = *($2 + [208])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	*(($1 + [16])) = (int_64)0
	*(($1 + [24])) = (int_64)0
	*($1) = (int_64)0
	*($1 + [8]) = (int_64)0
	$3 = *(*($0))
	$3 = CALL db_idx256_find_primary(*($3), *($3 + [8]), (int_64)4229443000054317056, $1, [2], *($2))
	*(*(($0 + [4])) + [208]) = $3
	
.LABEL $label$1
	*($1) = (int_64)0
	$4 = [0]
	$5 = CALL db_idx256_next($3, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$6 = *($1)
	$2 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$8:
	$3 = ($2 + [-24])
	$4 = *($3)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$7 }
	$2 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)*($4 + [200]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [10033])
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	$3 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)4229443000054317056, $6)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $87($7, $3)
	if ( ((int_32)*($4 + [200]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$5
	*($4 + [208]) = $5
	
.LABEL $label$4
	*(($0 + [4])) = $4
	$global$0 = ($1 + [32])
	return $0
}

int_32 .FUNC $56 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [328])) = [0]
	*($4 + [312]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [300]) = $2
	*($4 + [296]) = $2
	*($4 + [304]) = ($2 + $7)
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10107])
	$3 = *($4 + [300])
	
.LABEL $label$4
	CALL memcpy(($4 + [312]), $3, [8])
	*($4 + [300]) = ($3 + [8])
	$8 = (($4 + [312]) + [8])
	CALL $64(($4 + [296]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *((($4 + [296]) + [8]))
	*($4 + [8]) = *($4 + [296])
	$3 = *($3)
	*((($4 + [336]) + [8])) = $3
	*(($9 = (($4 + [352]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [352]) = $10
	*($4 + [336]) = $10
	$3 = *($9)
	*((($4 + [368]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [352])
	*($4 + [40]) = $1
	*($4 + [368]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [212])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [312])
	$8 = CALL $106(($4 + [368]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( ((*($4 + [368]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$6
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $142($2)
	
.LABEL $label$7
	CALL $65(($4 + [24]))
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [328])))
	
.LABEL $label$8
	$global$0 = ($4 + [384])
	return [1]
}

int_32 .FUNC $57 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [328])) = [0]
	*($4 + [312]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [300]) = $2
	*($4 + [296]) = $2
	*($4 + [304]) = ($2 + $7)
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10107])
	$3 = *($4 + [300])
	
.LABEL $label$4
	CALL memcpy(($4 + [312]), $3, [8])
	*($4 + [300]) = ($3 + [8])
	$8 = (($4 + [312]) + [8])
	CALL $64(($4 + [296]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *((($4 + [296]) + [8]))
	*($4 + [8]) = *($4 + [296])
	$3 = *($3)
	*((($4 + [336]) + [8])) = $3
	*(($9 = (($4 + [352]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [352]) = $10
	*($4 + [336]) = $10
	$3 = *($9)
	*((($4 + [368]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [352])
	*($4 + [40]) = $1
	*($4 + [368]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [212])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [312])
	$8 = CALL $106(($4 + [368]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( ((*($4 + [368]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$6
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $142($2)
	
.LABEL $label$7
	CALL $65(($4 + [24]))
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [328])))
	
.LABEL $label$8
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $116 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $118($1, $0, [9596])
	CALL $120()
	(unreachable)
}

void .FUNC $117 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $110(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $128(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8832], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $110(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $110(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $136([8243])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8243], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $122())
	*(CALL $122()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $134($4, ($3 + [12]), $2)
	$5 = CALL $122()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $115($3)
	
.LABEL $label$1
	CALL $116($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	if ( ((int_32)*($1 + [200]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10383])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10428])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10478])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	$8 = *(($6 + [92]))
	if ( ($8 == 0) ){ goto $label$13 }
	*(($6 + [96])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	if ( ((*(($6 + [80])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [88])))
	
.LABEL $label$14
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$3 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$16 }
	$8 = *(($9 + [92]))
	if ( ($8 == 0) ){ goto $label$17 }
	*(($9 + [96])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$17
	if ( ((*(($9 + [80])) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($9 + [88])))
	
.LABEL $label$18
	CALL _ZdlPv($9)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $3
	CALL db_remove_i64(*(($1 + [204])))
	$9 = *($1 + [208])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$9 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)4229443000054317056, $2, [2], *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx256_remove($9)
	
.LABEL $label$19
	$global$0 = ($2 + [32])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $136($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $108($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $108($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $139 (int_32 $0)
{
	return CALL $140([10712], $0)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $136($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $108($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $119 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $27($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $52(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9939])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9939])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9939])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $85(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $55 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10107])
	
.LABEL $label$5
	$3 = ($2 + $7)
	$8 = (($4 + [272]) + [8])
	CALL memcpy(($4 + [272]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10107])
	
.LABEL $label$6
	CALL memcpy($8, $9, [8])
	*(($4 + [24])) = $3
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [16])
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [260])) = (int_64)0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *((($4 + [272]) + [8]))
	$1 = *($4 + [272])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $142($2)
	
.LABEL $label$8
	CALL $65($4)
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $108($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [128])
	$global$0 = $6
	*($6 + [79]) = $4
	*($6 + [80]) = $1
	CALL require_auth((int_64)-4241567753542733872)
	CALL $20($0, $1)
	$1 = *($2 + [8])
	CALL eosio_assert((((int_64)$1 == (int_64)1397703940) | ((int_64)$1 == (int_64)1414288128)), [8370])
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8403])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [8427])
	$10 = ($0 + [72])
	$8 = *(($0 + [100]))
	$11 = *(($0 + [96]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$9:
	$4 = ($8 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$8 }
	$8 = $4
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$7 }
	if ( ((int_32)*($9 + [112]) == (int_32)$10) ){ goto $label$6 }
	CALL eosio_assert([0], [10033])
	goto $label$6 
	
.LABEL $label$7
	$4 = CALL db_find_i64(*($10), *(($0 + [80])), (int_64)4849595776591986688, $3)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$10 }
	$9 = CALL $9($10, $4)
	if ( ((int_32)*($9 + [112]) == (int_32)$10) ){ goto $label$6 }
	CALL eosio_assert([0], [10033])
	goto $label$6 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$6
	*($6 + [68]) = $9
	*($6 + [64]) = $10
	$11 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8457])
	$8 = *(($9 + [24]))
	$4 = *($9 + [20])
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$11 }
	$1 = *(($2 + [8]))
	$3 = *($2)
	
.LOOP $label$13:
	if ( ((int_64)*(($4 + [8])) != (int_64)$1) ){ goto $label$14 }
	if ( ((int_64)*($4) == (int_64)$3) ){ goto $label$12 }
	
.LABEL $label$14
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$11 = [1]
	
.LABEL $label$11
	CALL eosio_assert($11, [8476])
	CALL $22(($6 + [32]))
	*($6 + [28]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ((int_64)*(($2 + [8])) != (int_64)1414288128) ){ goto $label$29 }
	*($6 + [8]) = (int_64)1397703940
	$1 = *($2)
	*($6) = $1
	if ( (uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$30 }
	CALL eosio_assert([0], [9811])
	
.LABEL $label$30
	$1 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$1 = $3
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$31 }
	goto $label$27 
	
.LABEL $label$32
	$1 = $3
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$33 }
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$31 }
	goto $label$27 
	
.LABEL $label$29
	$1 = *($0)
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$4 = CALL $136([8528])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$26 }
	*($6) = ($4 << [1])
	$8 = ($6 | [1])
	if ( $4 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$28
	CALL eosio_assert([0], [9860])
	
.LABEL $label$27
	*(($6 + [104])) = [0]
	*($6 + [96]) = (int_64)0
	$4 = CALL $136([8528])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$23 }
	*($6 + [96]) = ($4 << [1])
	$8 = (($6 + [96]) | [1])
	if ( $4 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$26
	$9 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6) = ($9 | [1])
	*($6 + [8]) = $8
	*($6 + [4]) = $4
	
.LABEL $label$25
	CALL memcpy($8, [8528], $4)
	
.LABEL $label$24
	*(($8 + $4)) = [0]
	CALL $23($4, (int_64)-4241567753542733872, $1, $2, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($6 + [8]))
	goto $label$20 
	
.LABEL $label$23
	$9 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [96]) = ($9 | [1])
	*($6 + [104]) = $8
	*($6 + [100]) = $4
	
.LABEL $label$22
	CALL memcpy($8, [8528], $4)
	
.LABEL $label$21
	*(($8 + $4)) = [0]
	CALL $24($4, (int_64)-4241567753542733872, (int_64)-7358208999254862384, $2, ($6 + [96]))
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($6 + [104]))
	
.LABEL $label$34
	$1 = *($0)
	*(($6 + [104])) = [0]
	*($6 + [96]) = (int_64)0
	$4 = CALL $136([8528])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$37 }
	*($6 + [96]) = ($4 << [1])
	$8 = (($6 + [96]) | [1])
	if ( $4 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$9 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [96]) = ($9 | [1])
	*($6 + [104]) = $8
	*($6 + [100]) = $4
	
.LABEL $label$36
	CALL memcpy($8, [8528], $4)
	
.LABEL $label$35
	*(($8 + $4)) = [0]
	CALL $23($4, (int_64)-7358208999254862384, $1, $6, ($6 + [96]))
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($6 + [104]))
	
.LABEL $label$20
	$1 = *($0)
	*($6) = $0
	*($6 + [12]) = $2
	*($6 + [4]) = ($6 + [32])
	*($6 + [8]) = ($6 + [80])
	*($6 + [16]) = ($6 + [64])
	*($6 + [20]) = ($6 + [79])
	*($6 + [24]) = ($6 + [28])
	*($6 + [120]) = $1
	$8 = ($0 + [152])
	if ( ((int_64)*($0 + [152]) == (int_64)CALL current_receiver()) ){ goto $label$38 }
	CALL eosio_assert([0], [10268])
	
.LABEL $label$38
	*($6 + [96]) = $8
	*($6 + [100]) = $6
	*($6 + [104]) = ($6 + [120])
	*(($4 = CALL _Znwj([224])) + [56]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80 align=4]) = (int_64)0
	*($4 + [88 align=4]) = (int_64)0
	*($4 + [96 align=4]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [200]) = $8
	CALL $25(($6 + [96]), $4)
	*($6 + [112]) = $4
	$1 = *($4)
	*($6 + [96]) = $1
	$9 = *($4 + [204])
	*($6 + [92]) = $9
	$11 = ($0 + [180])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [184]))) ){ goto $label$39 }
	*($8 + [8]) = $1
	*($8 + [16]) = $9
	*($6 + [112]) = [0]
	*($8) = $4
	*($11) = ($8 + [24])
	$4 = *($6 + [112])
	*($6 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$39
	CALL $26(($0 + [176]), ($6 + [112]), ($6 + [96]), ($6 + [92]))
	$4 = *($6 + [112])
	*($6 + [112]) = [0]
	if ( $4 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	CALL $105(($6 + [96]))
	
.LABEL $label$18
	CALL $105(($6 + [96]))
	
.LABEL $label$17
	$8 = *(($4 + [92]))
	if ( ($8 == 0) ){ goto $label$40 }
	*(($4 + [96])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$40
	if ( ((*(($4 + [80])) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$41
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = *($6 + [68])
	if ( ((int_64)*($4 + [64]) < (int_64)1) ){ goto $label$42 }
	if ( ((int_64)*(($4 + [72])) != (int_64)1414288128) ){ goto $label$42 }
	$1 = *($6 + [80])
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$8 = CALL $136([8560])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$15 }
	$9 = ($4 + [64])
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$45 }
	*($6) = ($8 << [1])
	$4 = ($6 | [1])
	if ( $8 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$0 = (($8 + [16]) & [-16])
	$4 = CALL _Znwj($0)
	*($6) = ($0 | [1])
	*($6 + [8]) = $4
	*($6 + [4]) = $8
	
.LABEL $label$44
	CALL memcpy($4, [8560], $8)
	
.LABEL $label$43
	*(($4 + $8)) = [0]
	CALL $24($4, (int_64)-7358208999254856816, $1, $9, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$42
	$global$0 = ($6 + [128])
	return (unreachable)
	
.LABEL $label$15
	CALL $105($6)
	(unreachable)
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [112])
	$4 = *(($0 + [140]))
	$3 = *(($0 + [136]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*($6 + [8]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	CALL eosio_assert(($6 == 0), [9750])
	return 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [120])), (int_64)4344997574076792832, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $15($2, $5)
	if ( ((int_32)*($6 + [8]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$1
	CALL eosio_assert(($6 == 0), [9750])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [128])
	$global$0 = $5
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $1
	*($5 + [24]) = *($3)
	$4 = CALL $106((($5 + [8]) + [32]), $4)
	*($5 + [64]) = (int_64)-3617168760277827584
	*($5 + [56]) = (int_64)6138663591592764928
	*(($3 = CALL _Znwj([16]))) = $1
	*($3 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$6 = ($3 + [16])
	*((($5 + [56]) + [24])) = $6
	*(($5 + [76])) = $6
	*($5 + [72]) = $3
	*($5 + [84 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($5 + [8]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$1 = (CASTING uint_64)(uint_32 $4)
	$4 = ($5 + [84])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $27($4, $3)
	$4 = *(($5 + [88]))
	$3 = *(($5 + [84]))
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($5 + [100]) = $3
	*($5 + [96]) = $3
	*($5 + [104]) = $4
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = ($5 + [8])
	CALL $28(($5 + [120]), ($5 + [112]))
	CALL $29(($5 + [56]))
	$3 = *($5 + [84])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($5 + [88])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($5 + [72])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [76])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = $global$0
	$2 = ($1 - ((CALL transaction_size() + [15]) & [-16]))
	$global$0 = $2
	CALL read_transaction($2, CALL $fimport$9())
	CALL sha256($2, CALL $fimport$9(), $0)
	$global$0 = $1
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *(($6 + [168]))
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = ($6 + [152])
	$9 = CALL db_lowerbound_i64(*($8), *(($6 + [160])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $87($8, $9)
	*($3 + [36]) = [0]
	*($3 + [32]) = $8
	$7 = *(*(CALL $88(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [168])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [10535])
	$7 = *(($6 + [168]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [168])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	$6 = *($5 + [4])
	*($1 + [16]) = *($6)
	*(($1 + [40])) = *(($6 + [24]))
	*(($1 + [32])) = *(($6 + [16]))
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [48]) = *(*($5 + [8]))
	$6 = *($5 + [12])
	*(($1 + [64])) = *(($6 + [8]))
	*($1 + [56]) = *($6)
	$6 = *(*($5 + [16]) + [4])
	*($1 + [72]) = *($6)
	$8 = ($1 + [80])
	CALL $107($8, ($6 + [8]))
	$9 = ($1 + [72])
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$5 }
	CALL $83(($1 + [92]), *($6 + [20]), *(($6 + [24])))
	
.LABEL $label$5
	$10 = ($1 + [56])
	$11 = ($1 + [16])
	CALL memcpy(($1 + [104]), ($6 + [32]), [80])
	*($1 + [184]) = *(*($5 + [20]))
	*($1 + [192]) = *(*($5 + [24]))
	$5 = *($8)
	$6 = ( *(($1 + [84])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [72])
	$7 = (CASTING uint_64)(uint_32 $6)
	$8 = ($1 + [192])
	$12 = ($1 + [184])
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	$13 = *(($1 + [92]))
	$6 = *(($1 + [96]))
	$14 = ($6 - $13)
	$7 = (CASTING uint_64)(uint_32 int_32($14 >> [4]))
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$8 }
	$5 = (($14 & [-16]) + $5)
	
.LABEL $label$8
	$6 = ($5 + [89])
	if ( ($6 <= [513]) ){ goto $label$10 }
	$5 = CALL $139($6)
	goto $label$9 
	
.LABEL $label$10
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$9
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $11
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [48])
	*($3 + [44]) = $10
	*($3 + [48]) = $9
	*($3 + [52]) = $12
	*($3 + [56]) = $8
	CALL $89(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [204]) = CALL db_store_i64(*($4 + [8]), (int_64)4229443000054317056, *(*($0 + [8])), $7, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$11 }
	CALL $142($5)
	
.LABEL $label$11
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$12 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$7 = *(($4 + [8]))
	$15 = *(*(($0 + [8])))
	$16 = *($1)
	*((($3 + [32]) + [24])) = *(($1 + [40]))
	*($3 + [40]) = *(($1 + [24]))
	*($3 + [32]) = *($1 + [16])
	*($3 + [48]) = *(($1 + [32]))
	*($1 + [208]) = CALL db_idx256_store($7, (int_64)4229443000054317056, $15, $16, ($3 + [32]), [2])
	$global$0 = ($3 + [64])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [128])
	$global$0 = $5
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $1
	*($5 + [24]) = *($3)
	$4 = CALL $106((($5 + [8]) + [32]), $4)
	*($5 + [64]) = (int_64)-3617168760277827584
	*($5 + [56]) = (int_64)-7358208999254855296
	*(($3 = CALL _Znwj([16]))) = $1
	*($3 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$6 = ($3 + [16])
	*((($5 + [56]) + [24])) = $6
	*(($5 + [76])) = $6
	*($5 + [72]) = $3
	*($5 + [84 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($5 + [8]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$1 = (CASTING uint_64)(uint_32 $4)
	$4 = ($5 + [84])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $27($4, $3)
	$4 = *(($5 + [88]))
	$3 = *(($5 + [84]))
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($5 + [100]) = $3
	*($5 + [96]) = $3
	*($5 + [104]) = $4
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = ($5 + [8])
	CALL $28(($5 + [120]), ($5 + [112]))
	CALL $29(($5 + [56]))
	$3 = *($5 + [84])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($5 + [88])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($5 + [72])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [76])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $121($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *(($1 + [92]))
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [96])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((*(($1 + [80])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [88])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($2 + [24])) = ($3 + ($4 << [3]))
	*($2 + [16]) = $3
	*($2 + [20]) = $3
	$5 = *($1)
	$4 = (*(($1 + [4])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $4)
	*($2 + [20]) = ($3 + $4)
	
.LABEL $label$3
	$1 = CALL $106($2, ($1 + [12]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$4 = (*($0) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$4 }
	$0 = *((*($4) + $0))
	
.LABEL $label$4
	*($2 + [40]) = [0]
	*($2 + [32]) = (int_64)0
	$3 = (*($2 + [20]) - *($2 + [16]))
	if ( ($3 == 0) ){ goto $label$5 }
	$5 = int_32($3 >> [3])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [40])) = ($3 + ($5 << [3]))
	*($2 + [32]) = $3
	*($2 + [36]) = $3
	$6 = *($2 + [16])
	$5 = (*($2 + [20]) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $6, $5)
	*($2 + [36]) = ($3 + $5)
	
.LABEL $label$5
	CALL void $4((int_32 ($2 + [32])), (int_32 $1), (int_32 $0))
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$6 }
	*($2 + [36]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((*($1) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$7
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$8 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $121(($2 + [16]))
	
.LABEL $label$1
	CALL $121(($2 + [32]))
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10531])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [3])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $94($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10107])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [8])
	$2 = (*($6) + [8])
	*($6) = $2
	$7 = ($7 + [8])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [256]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [260])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [256]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($0 + [216]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$2 = *(($0 + [176]))
	if ( ($2 == 0) ){ goto $label$13 }
	$5 = ($0 + [180])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$17 }
	$1 = *(($3 + [92]))
	if ( ($1 == 0) ){ goto $label$18 }
	*(($3 + [96])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$18
	if ( ((*(($3 + [80])) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$19
	CALL _ZdlPv($3)
	
.LABEL $label$17
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$16 }
	$3 = *(($0 + [176]))
	goto $label$14 
	
.LABEL $label$15
	$3 = $2
	
.LABEL $label$14
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$20 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$22 }
	
.LOOP $label$23:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	CALL _ZdlPv($4)
	
.LABEL $label$24
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$23 }
	$3 = *(($0 + [136]))
	goto $label$21 
	
.LABEL $label$22
	$3 = $1
	
.LABEL $label$21
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$2 = *(($0 + [96]))
	if ( ($2 == 0) ){ goto $label$25 }
	$5 = ($0 + [100])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$27 }
	
.LOOP $label$28:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$29 }
	$1 = *($3 + [20])
	if ( ($1 == 0) ){ goto $label$30 }
	*(($3 + [24])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$30
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$31
	CALL _ZdlPv($3)
	
.LABEL $label$29
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$28 }
	$3 = *(($0 + [96]))
	goto $label$26 
	
.LABEL $label$27
	$3 = $2
	
.LABEL $label$26
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$25
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$32 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$34 }
	
.LOOP $label$35:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$36 }
	CALL _ZdlPv($4)
	
.LABEL $label$36
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$35 }
	$3 = *(($0 + [56]))
	goto $label$33 
	
.LABEL $label$34
	$3 = $1
	
.LABEL $label$33
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$32
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $80($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $109($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $109($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $105($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [192])
	$global$0 = $2
	$3 = CALL $106(($2 + [96]), $1)
	*($2 + [88]) = [0]
	*($2 + [80]) = (int_64)0
	$4 = (*(($1 + [16])) - *($1 + [12]))
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = int_32($4 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$4 }
	$4 = CALL _Znwj($4)
	*(($2 + [88])) = ($4 + ($5 << [4]))
	*($2 + [80]) = $4
	*($2 + [84]) = $4
	$6 = *(($1 + [12]))
	$5 = (*(($1 + [16])) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($4, $6, $5)
	*($2 + [84]) = (*($2 + [84]) + $5)
	
.LABEL $label$5
	*(($4 = (($2 + [64]) + [8]))) = *(($1 + [32]))
	*(($5 = (($2 + [48]) + [8]))) = *(($1 + [48]))
	*(($6 = (($2 + [32]) + [8]))) = *(($1 + [64]))
	*(($7 = (($2 + [16]) + [8]))) = *(($1 + [80]))
	*($2 + [64]) = *($1 + [24])
	*($2 + [48]) = *($1 + [40])
	*($2 + [32]) = *($1 + [56])
	*($2 + [16]) = *($1 + [72])
	$8 = *($1 + [96])
	$9 = *($1 + [88])
	$1 = CALL $106($2, ($1 + [104]))
	*((($2 + [112]) + [8])) = *($4)
	*((($2 + [160]) + [8])) = *($7)
	*((($2 + [144]) + [8])) = *($6)
	*((($2 + [128]) + [8])) = *($5)
	*($2 + [112]) = *($2 + [64])
	*($2 + [160]) = *($2 + [16])
	*($2 + [144]) = *($2 + [32])
	*($2 + [128]) = *($2 + [48])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$4 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$0 = *((*($4) + $0))
	
.LABEL $label$6
	$5 = CALL $106(($2 + [176]), $3)
	CALL void $4((int_32 $5), (int_32 ($2 + [80])), (int_32 ($2 + [112])), (int_32 ($2 + [128])), (int_32 ($2 + [144])), (int_32 ($2 + [160])), (int_32 $9), (int_64 $8), (int_64 $1), (int_32 $0))
	if ( (*($2 + [176]) & [1]) ){ goto $label$8 }
	if ( (*($1) & [1]) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [8]))
	$1 = *($2 + [80])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $121(($2 + [80]))
	
.LABEL $label$3
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($2 + [84]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$9
	$global$0 = ($2 + [192])
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $64(*($1), *($0))
	$0 = *($0)
	CALL $79(*($1), ($0 + [12]))
	$3 = ($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10107])
	$3 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $3, [8])
	*(($0 + [32])) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = ($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10107])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($0 + [48])) = *($2 + [8])
	*($5) = (*($5) + [8])
	*($2 + [8]) = $0
	CALL $93(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [312]) = [0]
	*($4 + [304]) = (int_64)0
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $7)
	CALL $64(($4 + [288]), ($4 + [304]))
	*(($3 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$3 = *($3)
	*((($4 + [320]) + [8])) = $3
	*(($8 = (($4 + [336]) + [8]))) = $3
	$9 = *($4)
	*($4 + [336]) = $9
	*($4 + [320]) = $9
	$3 = *($8)
	*((($4 + [352]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [336])
	*($4 + [32]) = $1
	*($4 + [352]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = CALL $106(($4 + [352]), ($4 + [304]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_32 $6))
	if ( ((*($4 + [352]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $142($2)
	
.LABEL $label$6
	CALL $65(($4 + [16]))
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [312])))
	
.LABEL $label$7
	$global$0 = ($4 + [368])
	return [1]
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [480])
	$global$0 = $3
	*(($4 = $3) + [424]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [320])) = (int_64)0
	*(($4 + [336])) = (int_64)0
	*((($4 + [304]) + [48])) = (int_64)0
	*((($4 + [304]) + [64])) = (int_64)0
	*((($4 + [304]) + [80])) = (int_64)0
	*(($4 + [416])) = [0]
	*($4 + [304]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [392]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $5)
	*($4 + [464]) = ($4 + [288])
	*($4 + [16]) = ($4 + [304])
	CALL $66(($4 + [16]), ($4 + [464]))
	*(($3 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$3 = *($3)
	*((($4 + [432]) + [8])) = $3
	*(($6 = (($4 + [448]) + [8]))) = $3
	$7 = *($4)
	*($4 + [448]) = $7
	*($4 + [432]) = $7
	$3 = *($6)
	*((($4 + [464]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [448])
	*($4 + [32]) = $1
	*($4 + [464]) = $1
	*(($4 + [56])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*((($4 + [16]) + [80])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [468]) = ($4 + [424])
	*($4 + [464]) = ($4 + [16])
	CALL $67(($4 + [464]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $142($2)
	
.LABEL $label$4
	CALL $65(($4 + [16]))
	if ( ((*($4 + [408]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [416])))
	
.LABEL $label$5
	$2 = *(($4 + [316]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [320])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [312])))
	
.LABEL $label$7
	$global$0 = ($4 + [480])
	return [1]
}

int_32 .FUNC $63 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [384])
	$global$0 = $3
	*(($4 = $3) + [328]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [320])) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $5)
	CALL $73(($4 + [288]), ($4 + [304]))
	CALL $64(($4 + [288]), ($4 + [316]))
	*(($3 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$3 = *($3)
	*((($4 + [336]) + [8])) = $3
	*(($6 = (($4 + [352]) + [8]))) = $3
	$7 = *($4)
	*($4 + [352]) = $7
	*($4 + [336]) = $7
	$3 = *($6)
	*((($4 + [368]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [352])
	*($4 + [32]) = $1
	*($4 + [368]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [372]) = ($4 + [328])
	*($4 + [368]) = ($4 + [16])
	CALL $74(($4 + [368]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $142($2)
	
.LABEL $label$4
	CALL $65(($4 + [16]))
	if ( ((*($4 + [316]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [324])))
	
.LABEL $label$5
	$2 = *($4 + [304])
	if ( ($2 == 0) ){ goto $label$6 }
	*($4 + [308]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [384])
	return [1]
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [400])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $139($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [320]))) = (int_64)0
	*(($4 + [348])) = [0]
	*($4 + [312]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [336]) = [0]
	*($4 + [340 align=4]) = (int_64)0
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $7)
	*($4 + [384]) = ($4 + [288])
	*($4 + [16]) = ($4 + [304])
	CALL $70(($4 + [16]), ($4 + [384]))
	*(($3 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$9 = *($3)
	*((($4 + [352]) + [8])) = $9
	*(($3 = (($4 + [368]) + [8]))) = $9
	$10 = *($4)
	*($4 + [368]) = $10
	*($4 + [352]) = $10
	$11 = *($3)
	*(($9 = (($4 + [384]) + [8]))) = $11
	*(($4 + [40])) = $11
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [368])
	*($4 + [32]) = $1
	*($4 + [384]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($3) = *($8)
	*($4 + [368]) = *($4 + [312])
	$0 = *($4 + [304])
	$1 = *($4 + [328])
	$11 = *($4 + [336])
	$8 = CALL $106(($4 + [352]), ($4 + [340]))
	*($9) = *($3)
	*($4 + [384]) = *($4 + [368])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($4 + [384])), (int_32 $1), (int_64 ((int_32)($11 & [255]) != (int_32)[0])), (int_32 $8), (int_32 $6))
	if ( ((*($4 + [352]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $142($2)
	
.LABEL $label$6
	CALL $65(($4 + [16]))
	if ( ((*($4 + [340]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [348])))
	
.LABEL $label$7
	$global$0 = ($4 + [400])
	return [1]
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $137(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10692])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $137(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $142($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $105 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[31]) ){ goto $label$2 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [16])
	*($2) = *($1)
	*($2 + [12]) = ($4 + [8])
	*($2 + [8]) = $4
	*($2 + [16]) = ($4 + [20])
	*($2 + [20]) = ($4 + [32])
	*($2 + [24]) = ($4 + [48])
	*($2 + [28]) = ($4 + [64])
	*($2 + [32]) = ($4 + [80])
	*($2 + [36]) = ($4 + [96])
	*($2 + [40]) = ($4 + [104])
	CALL $84(($2 + [8]), $2)
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [20]))
	$5 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, ($2 + [8]), [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$5 = *($0 + [24])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9939])
	$0 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($0, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [48])
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [204]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10641])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229443000054317056)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $87(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10084])
	
.LABEL $label$5
	$4 = CALL $139($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL _Znwj([224])) + [56]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [80 align=4]) = (int_64)0
	*($5 + [88 align=4]) = (int_64)0
	*($5 + [96 align=4]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [144]) = (int_64)0
	*($5 + [152]) = (int_64)0
	*($5 + [160]) = (int_64)0
	*($5 + [200]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [48])
	*($3 + [44]) = ($5 + [56])
	*($3 + [48]) = ($5 + [72])
	*($3 + [52]) = ($5 + [184])
	*($3 + [56]) = ($5 + [192])
	CALL $90(($3 + [32]), ($3 + [24]))
	*($5 + [208]) = [-1]
	*($5 + [204]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $26(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $142($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$4 = *(($1 + [92]))
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [96])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((*(($1 + [80])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [88])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9939])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9939])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [8]))
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9939])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9939])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9939])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $85(*($1), *($0 + [4]))
	CALL $86(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [9939])
	$1 = *(($0 + [4]))
	
.LABEL $label$11
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [4])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = [268435455]
	if ( ((uint_32)int_32($5 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [4])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [4]) << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $121($0)
}

int_32 .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [116]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10641])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4849595776591986688)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10587])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10587])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $9(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $121($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10531])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $27($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [10107])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10704]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10708])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10704]) = [1]
	$2 = ($2 << [16])
	*([0] + [10708]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10708])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10708]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10704]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10704]) = [1]
	$3 = ($3 << [16])
	*([0] + [10708]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10708])
	
.LABEL $label$10
	*([0] + [10708]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $141($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8248])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $142 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19096])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18904]
	$3 = (((int_32)$1 * (int_32)[12]) + [18904])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [384])
	$global$0 = $2
	*(($3 = (($2 + [176]) + [24]))) = *(($1 + [24]))
	*(($4 = (($2 + [176]) + [16]))) = *(($1 + [16]))
	*(($5 = (($2 + [144]) + [16]))) = *(($1 + [48]))
	*(($6 = (($2 + [144]) + [24]))) = *(($1 + [56]))
	*($2 + [176]) = *($1)
	*($2 + [144]) = *($1 + [32])
	*($2 + [184]) = *(($1 + [8]))
	*($2 + [152]) = *(($1 + [40]))
	$7 = CALL $106(($2 + [128]), ($1 + [64]))
	*((($2 + [72]) + [24])) = *(($1 + [104]))
	*((($2 + [72]) + [16])) = *(($1 + [96]))
	*((($2 + [72]) + [8])) = *(($1 + [88]))
	*($2 + [72]) = *($1 + [80])
	$8 = CALL $106((($2 + [72]) + [32]), ($1 + [112]))
	*((($2 + [16]) + [8])) = *(($1 + [144]))
	*((($2 + [16]) + [16])) = *(($1 + [152]))
	*((($2 + [16]) + [24])) = *(($1 + [160]))
	*($2 + [120]) = *($1 + [128])
	*($2 + [16]) = *($1 + [136])
	$9 = CALL $106((($2 + [16]) + [32]), ($1 + [168]))
	*($2 + [64]) = *($1 + [184])
	$1 = CALL $106($2, ($1 + [192]))
	*((($2 + [208]) + [24])) = *($3)
	*((($2 + [208]) + [16])) = *($4)
	*((($2 + [240]) + [24])) = *($6)
	*((($2 + [240]) + [16])) = *($5)
	*($2 + [216]) = *($2 + [184])
	*($2 + [208]) = *($2 + [176])
	*($2 + [248]) = *($2 + [152])
	*($2 + [240]) = *($2 + [144])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*((($2 + [328]) + [24])) = *((($2 + [72]) + [24]))
	*((($2 + [328]) + [16])) = *((($2 + [72]) + [16]))
	*((($2 + [328]) + [8])) = *((($2 + [72]) + [8]))
	*($2 + [328]) = *($2 + [72])
	$4 = CALL $106((($2 + [328]) + [32]), $8)
	*((($2 + [272]) + [8])) = *((($2 + [16]) + [8]))
	*((($2 + [272]) + [16])) = *((($2 + [16]) + [16]))
	*((($2 + [272]) + [24])) = *((($2 + [16]) + [24]))
	*($2 + [376]) = *((($2 + [72]) + [48]))
	*($2 + [272]) = *($2 + [16])
	$5 = CALL $106((($2 + [272]) + [32]), $9)
	*($2 + [320]) = *((($2 + [16]) + [48]))
	CALL void $3((int_32 ($2 + [208])), (int_32 ($2 + [240])), (int_32 $7), (int_32 ($2 + [328])), (int_32 ($2 + [272])), (int_32 $1), (int_32 $0))
	if ( (*($5) & [1]) ){ goto $label$12 }
	if ( (*($4) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($2 + [312])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($2 + [368])))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($9) & $0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($9) & $0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($2 + [56])))
	$1 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($8) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($7) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*(($2 + [112])))
	if ( ((*($7) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($7 + [8]))
	$global$0 = ($2 + [384])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [384])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10531])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [5])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $96($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [5]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [10107])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [32])
	$2 = (*($6) + [32])
	*($6) = $2
	$7 = ($7 + [32])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*(($0 + [16])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [7]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*(($0 + [32])) = ((int_32)*($2 + [7]) != (int_32)[0])
	CALL $64(*($1), ($0 + [36]))
	$global$0 = ($2 + [16])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$4 = *($0)
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[31]) ){ goto $label$2 }
	CALL eosio_assert([0], [10107])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [32])
	*(($0 = ($0 + [4]))) = (*($0) + [32])
	CALL $64(*($1), ($4 + [64]))
	*($2) = *($1)
	*($2 + [12]) = ($4 + [88])
	*($2 + [8]) = ($4 + [80])
	*($2 + [16]) = ($4 + [104])
	*($2 + [20]) = ($4 + [112])
	*($2 + [24]) = ($4 + [128])
	CALL $95(($2 + [8]), $2)
	*($2) = *($1)
	*($2 + [12]) = ($4 + [144])
	*($2 + [8]) = ($4 + [136])
	*($2 + [16]) = ($4 + [160])
	*($2 + [20]) = ($4 + [168])
	*($2 + [24]) = ($4 + [184])
	CALL $95(($2 + [8]), $2)
	CALL $64(*($1), ($4 + [192]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9939])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9939])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [5])
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($2 + [24])) = ($3 + ($4 << [5]))
	*($2 + [16]) = $3
	*($2 + [20]) = $3
	$5 = *($1)
	$4 = (*(($1 + [4])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $4)
	*($2 + [20]) = ($3 + $4)
	
.LABEL $label$3
	$1 = CALL $106($2, ($1 + [12]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$4 = (*($0) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$4 }
	$0 = *((*($4) + $0))
	
.LABEL $label$4
	*($2 + [40]) = [0]
	*($2 + [32]) = (int_64)0
	$3 = (*($2 + [20]) - *($2 + [16]))
	if ( ($3 == 0) ){ goto $label$5 }
	$5 = int_32($3 >> [5])
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [40])) = ($3 + ($5 << [5]))
	*($2 + [32]) = $3
	*($2 + [36]) = $3
	$6 = *($2 + [16])
	$5 = (*($2 + [20]) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $6, $5)
	*($2 + [36]) = ($3 + $5)
	
.LABEL $label$5
	CALL void $4((int_32 ($2 + [32])), (int_32 $1), (int_32 $0))
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$6 }
	*($2 + [36]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((*($1) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$7
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$8 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $121(($2 + [16]))
	
.LABEL $label$1
	CALL $121(($2 + [32]))
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [9939])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$4 = *($0)
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[31]) ){ goto $label$2 }
	CALL eosio_assert([0], [9939])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [32])
	*(($0 = ($0 + [4]))) = (*($0) + [32])
	CALL $85(*($1), ($4 + [64]))
	*($2) = *($1)
	*($2 + [12]) = ($4 + [88])
	*($2 + [8]) = ($4 + [80])
	*($2 + [16]) = ($4 + [100])
	*($2 + [20]) = ($4 + [112])
	*($2 + [24]) = ($4 + [128])
	*($2 + [28]) = ($4 + [144])
	*($2 + [32]) = ($4 + [160])
	*($2 + [36]) = ($4 + [176])
	*($2 + [40]) = ($4 + [184])
	CALL $84(($2 + [8]), $2)
	*($2) = *($1)
	*($2 + [12]) = ($4 + [200])
	*($2 + [8]) = ($4 + [192])
	*($2 + [16]) = ($4 + [216])
	*($2 + [20]) = ($4 + [224])
	*($2 + [24]) = ($4 + [240])
	CALL $92(($2 + [8]), $2)
	*($2) = *($1)
	*($2 + [12]) = ($4 + [256])
	*($2 + [8]) = ($4 + [248])
	*($2 + [16]) = ($4 + [272])
	*($2 + [20]) = ($4 + [280])
	*($2 + [24]) = ($4 + [296])
	CALL $92(($2 + [8]), $2)
	CALL $85(*($1), ($4 + [304]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10084])
	
.LABEL $label$5
	$4 = CALL $139($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $6)
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [20]) = $0
	$8 = ($5 + [8])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10107])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $64(($3 + [32]), $8)
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $43(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $142($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [10084])
	
.LABEL $label$5
	$4 = CALL $139($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $6)
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	$8 = ($5 + [8])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10107])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $64(($3 + [32]), $8)
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $49(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $142($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $64(*($1), *($0 + [4]))
	CALL $79(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [10107])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [10107])
	$1 = *(($0 + [4]))
	
.LABEL $label$11
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	$7 = [0]
	
.LOOP $label$1:
	if ( ($3 <= *($5)) ){ goto $label$2 }
	CALL eosio_assert([0], [10531])
	$3 = *($6)
	
.LABEL $label$2
	$8 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$7 = ($7 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $7)))
	$7 = ($7 + [7])
	$3 = $3
	if ( ($8 & [128]) ){ goto $label$1 }
	$3 = (CASTING uint_32)(uint_64 $4)
	$8 = *($1)
	$5 = *($1 + [4])
	$7 = int_32(($5 - $8) >> [4])
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	CALL $81($1, ($3 - $7))
	$5 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$6 }
	$5 = ($8 + ($3 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = ($0 + [4])
	$7 = *($3)
	$6 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($6) - $7) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10107])
	$7 = *($3)
	
.LABEL $label$8
	CALL memcpy($8, $7, [8])
	$7 = (*($3) + [8])
	*($3) = $7
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $7) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [10107])
	$7 = *($3)
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $7, [8])
	*(($8 + [8])) = *($2 + [8])
	$7 = (*($3) + [8])
	*($3) = $7
	$8 = ($8 + [16])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = ($0 + [192])
	$7 = *(($0 + [220]))
	$6 = *(($0 + [216]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	if ( ((int_32)*($9 + [20]) == (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [200])), (int_64)-5001503146665574400, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $36($5, $8)
	if ( ((int_32)*($9 + [20]) == (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$1
	$10 = ($0 + [232])
	$7 = *(($0 + [260]))
	$6 = *(($0 + [256]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$14:
	$8 = ($7 + [-24])
	$5 = *($8)
	if ( ((int_64)*($5) == (int_64)1) ){ goto $label$13 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$12 }
	if ( ((int_32)*($5 + [20]) == (int_32)$10) ){ goto $label$11 }
	CALL eosio_assert([0], [10033])
	goto $label$11 
	
.LABEL $label$12
	$8 = CALL db_find_i64(*($10), *(($0 + [240])), (int_64)7235159551873908736, (int_64)1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	if ( ((int_32)*(CALL $37($10, $8) + [20]) == (int_32)$10) ){ goto $label$11 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$11
	$7 = *(($0 + [260]))
	$5 = *(($0 + [256]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$15:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)1) ){ goto $label$9 }
	$7 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$15 }
	goto $label$8 
	
.LABEL $label$10
	$11 = (int_64)0
	if ( $9 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$8 }
	if ( ((int_32)*($6 + [20]) == (int_32)$10) ){ goto $label$7 }
	CALL eosio_assert([0], [10033])
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	$8 = CALL db_find_i64(*(($0 + [232])), *(($0 + [240])), (int_64)7235159551873908736, (int_64)1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$16 }
	$6 = CALL $37($10, $8)
	if ( ((int_32)*($6 + [20]) == (int_32)$10) ){ goto $label$7 }
	CALL eosio_assert([0], [10033])
	goto $label$7 
	
.LABEL $label$16
	CALL eosio_assert([0], [9773])
	
.LABEL $label$7
	*($4 + [56]) = *($6)
	$8 = CALL $106((($4 + [56]) + [8]), ($6 + [8]))
	$7 = CALL $114($8, [0], [10])
	if ( ((*($8) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$17
	$11 = (CASTING int_64)(int_32 $7)
	if ( ($9 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$11 = (int_64)0
	$8 = CALL $114(($9 + [8]), [0], [10])
	if ( ($8 <= [123456789]) ){ goto $label$5 }
	$11 = ((uint_64)((int_64)(CASTING int_64)(int_32 $8) + (int_64)-123456789) / (uint_64)(int_64)123456789)
	
.LABEL $label$5
	$12 = *($3)
	CALL __multi3(($4 + [8]), $12, (int_64)$12 >> (int_64)63), $11, (int_64)$11 >> (int_64)63))
	$13 = *($3 + [8])
	$14 = *(($4 + [16]))
	$12 = *($4 + [8])
	if ( (( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$14 < (int_64)0) : (int_64)($14 == 0) ) == 0) ){ goto $label$19 }
	if ( ( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$14 > (int_64)-1) : ((int_64)$14 == (int_64)-1) ) ){ goto $label$18 }
	CALL eosio_assert([0], [9969])
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert([0], [9945])
	
.LABEL $label$18
	*($4 + [64]) = $13
	*($4 + [56]) = ((int_64)$12 / (int_64)100)
	if ( ((uint_64)$11 > (uint_64)(int_64)99) ){ goto $label$21 }
	if ( ((int_64)$12 < (int_64)100) ){ goto $label$21 }
	*(($4 + [48])) = [0]
	*($4 + [40]) = (int_64)0
	$8 = CALL $136([9792])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$24 }
	*($4 + [40]) = ($8 << [1])
	$9 = (($4 + [40]) | [1])
	if ( $8 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$7 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($7)
	*($4 + [40]) = ($7 | [1])
	*($4 + [48]) = $9
	*($4 + [44]) = $8
	
.LABEL $label$23
	CALL memcpy($9, [9792], $8)
	
.LABEL $label$22
	$7 = [0]
	*(($9 + $8)) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$28 }
	$9 = *([0] + [9996])
	
.LOOP $label$30:
	*((($4 + [83]) + ($8 = $7))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$29 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$30 }
	
.LABEL $label$29
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$27 }
	*($4 + [24]) = ($7 << [1])
	$9 = (($4 + [24]) | [1])
	goto $label$26 
	
.LABEL $label$28
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	*($4 + [24]) = [0]
	$8 = (($4 + [24]) | [1])
	$7 = $8
	goto $label$25 
	
.LABEL $label$27
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($4 + [24]) = ($6 | [1])
	*($4 + [32]) = $9
	*($4 + [28]) = $7
	
.LABEL $label$26
	$6 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$31:
	*(($9 + $8)) = *((($4 + [83]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$31 }
	$7 = ($9 + $7)
	$8 = (($4 + [24]) | [1])
	
.LABEL $label$25
	*($7) = [0]
	$7 = *($4 + [24])
	$9 = ($7 & [1])
	CALL $113(($4 + [40]), ( *($4 + [32]) ? $8 : $9 ), ( *($4 + [28]) ? uint_32($7 >> [1]) : $9 ))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$32
	CALL $112(($4 + [40]), [9800])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$36 }
	$7 = [0]
	$9 = *([0] + [9996])
	$1 = $2
	
.LOOP $label$38:
	*((($4 + [83]) + ($8 = $7))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$37 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$38 }
	
.LABEL $label$37
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$35 }
	*($4 + [24]) = ($7 << [1])
	$9 = (($4 + [24]) | [1])
	goto $label$34 
	
.LABEL $label$36
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	*($4 + [24]) = [0]
	$8 = (($4 + [24]) | [1])
	$7 = $8
	goto $label$33 
	
.LABEL $label$35
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($4 + [24]) = ($6 | [1])
	*($4 + [32]) = $9
	*($4 + [28]) = $7
	
.LABEL $label$34
	$6 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$39:
	*(($9 + $8)) = *((($4 + [83]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$39 }
	$7 = ($9 + $7)
	$8 = (($4 + [24]) | [1])
	
.LABEL $label$33
	*($7) = [0]
	$7 = *($4 + [24])
	$9 = ($7 & [1])
	CALL $113(($4 + [40]), ( *($4 + [32]) ? $8 : $9 ), ( *($4 + [28]) ? uint_32($7 >> [1]) : $9 ))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$40
	CALL $23($4, (int_64)-4241567753542904672, $2, ($4 + [56]), ($4 + [40]))
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($4 + [48]))
	
.LABEL $label$21
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$20
	CALL $105(($4 + [40]))
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_32 $10
	$8 = ($global$0 - [400])
	$global$0 = $8
	$9 = *($0)
	*(($8 + [24])) = *(($1 + [24]))
	*(($8 + [16])) = *(($1 + [16]))
	*(($8 + [40])) = *(($2 + [8]))
	*(($8 + [48])) = *(($2 + [16]))
	*(($8 + [56])) = *(($2 + [24]))
	*($8 + [8]) = *(($1 + [8]))
	*($8) = *($1)
	*($8 + [32]) = *($2)
	CALL $106(($8 + [64]), $3)
	*($8 + [80]) = *($4)
	CALL $106(($8 + [88]), ($4 + [8]))
	$2 = [0]
	*($8 + [108]) = [0]
	*($8 + [100 align=4]) = (int_64)0
	$1 = (*(($4 + [24])) - *($4 + [20]))
	if ( ($1 == 0) ){ goto $label$2 }
	$0 = int_32($1 >> [4])
	if ( ((uint_32)$0 >= (uint_32)[268435456]) ){ goto $label$1 }
	$1 = CALL _Znwj($1)
	*(($8 + [100])) = $1
	*(($3 = ($8 + [104]))) = $1
	*(($8 + [108])) = ($1 + ($0 << [4]))
	$10 = *(($4 + [20]))
	$0 = (*(($4 + [24])) - $10)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($1, $10, $0)
	*($3) = (*($3) + $0)
	
.LABEL $label$2
	CALL memcpy(($8 + [112]), ($4 + [32]), [80])
	*(($8 + [216])) = *(($5 + [24]))
	*(($8 + [208])) = *(($5 + [16]))
	*(($8 + [200])) = *(($5 + [8]))
	*($8 + [192]) = *($5)
	CALL $106(($8 + [224]), ($5 + [32]))
	*(($8 + [256])) = *(($6 + [8]))
	*(($8 + [264])) = *(($6 + [16]))
	*(($8 + [272])) = *(($6 + [24]))
	*($8 + [240]) = *($5 + [48])
	*($8 + [248]) = *($6)
	CALL $106(($8 + [280]), ($6 + [32]))
	*($8 + [296]) = *($6 + [48])
	CALL $106(($8 + [304]), $7)
	*($8 + [336]) = (int_64)-5003134533507606016
	*($8 + [328]) = (int_64)-4241567753542801216
	*(($4 = CALL _Znwj([16]))) = $9
	*($4 + [8]) = (int_64)3617214756542218240
	*(($8 + [364])) = [0]
	$5 = ($4 + [16])
	*((($8 + [328]) + [24])) = $5
	*(($8 + [348])) = $5
	*($8 + [344]) = $4
	*($8 + [356 align=4]) = (int_64)0
	*($8 + [384]) = [0]
	*($8 + [392]) = ($8 + [384])
	*($8 + [368]) = $8
	CALL $38(($8 + [368]), ($8 + [392]))
	$4 = *($8 + [384])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($8 + [356])
	CALL $27($5, $4)
	$2 = *((($8 + [328]) + [32]))
	$4 = *($5)
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	
.LABEL $label$3
	*($8 + [372]) = $4
	*($8 + [368]) = $4
	*($8 + [376]) = $2
	*($8 + [384]) = ($8 + [368])
	*($8 + [392]) = $8
	CALL $39(($8 + [392]), ($8 + [384]))
	CALL $29(($8 + [328]))
	$4 = *($8 + [356])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($8 + [360])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($8 + [344])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($8 + [348])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*(($8 + [304])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($8 + [312]))
	
.LABEL $label$7
	if ( ((*(($8 + [280])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($8 + [288]))
	
.LABEL $label$8
	if ( ((*(($8 + [224])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($8 + [232]))
	
.LABEL $label$9
	$4 = *(($8 + [100]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [104])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((*(($8 + [88])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($8 + [96]))
	
.LABEL $label$11
	if ( ((*(($8 + [64])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($8 + [72]))
	
.LABEL $label$12
	$global$0 = ($8 + [400])
	return (unreachable)
	
.LABEL $label$1
	CALL $121(($8 + [100]))
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$7 = ($global$0 - [304])
	$global$0 = $7
	CALL require_auth((int_64)-7101989278066649744)
	*($7 + [296]) = ($0 + [152])
	*(($8 = (($7 + [256]) + [24]))) = *(($1 + [24]))
	*($7 + [264]) = *(($1 + [8]))
	*($7 + [256]) = *($1)
	*($7 + [272]) = *($1 + [16])
	CALL $31(($7 + [288]), ($7 + [296]), ($7 + [256]))
	$9 = [0]
	CALL eosio_assert(((int_32)*($7 + [292]) != (int_32)[0]), [8586])
	*($8) = *(($2 + [24]))
	*($7 + [264]) = *(($2 + [8]))
	*($7 + [256]) = *($2)
	*($7 + [272]) = *($2 + [16])
	CALL $31(($7 + [248]), ($7 + [296]), ($7 + [256]))
	CALL eosio_assert(((int_32)*($7 + [252]) != (int_32)[0]), [8625])
	CALL eosio_assert(((int_64)*(*($7 + [292]) + [48]) == (int_64)*($4)), [8663])
	CALL eosio_assert(((int_64)*(*($7 + [252]) + [48]) == (int_64)*($5)), [8688])
	CALL eosio_assert(((int_64)*(*($7 + [292]) + [72]) == (int_64)*(*($7 + [252]) + [72])), [8714])
	$10 = [0]
	$17 = ($17 & [1])
	$16 = ($8 + [80])
	$17 = *($16)
	$8 = *($7 + [252])
	$14 = ($8 & [1])
	$12 = ($11 + [80])
	$8 = *($12)
	$13 = uint_32($8 >> [1])
	$11 = *($7 + [292])
	$15 = ( *(($11 + [84])) ? $13 : $14 )
	if ( ((int_32)$15 != (int_32)( *(($8 + [84])) ? uint_32($17 >> [1]) : $17 )) ){ goto $label$1 }
	$8 = ( *(($8 + [88])) ? ($16 + [1]) : $17 )
	$17 = ($12 + [1])
	if ( $14 ){ goto $label$4 }
	if ( ($15 == 0) ){ goto $label$3 }
	$11 = ([0] - $13)
	
.LOOP $label$5:
	if ( ((int_32)*($17) != (int_32)*($8)) ){ goto $label$2 }
	$10 = [1]
	$8 = ($8 + [1])
	$17 = ($17 + [1])
	$11 = ($11 + [1])
	if ( $11 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	if ( ($15 == 0) ){ goto $label$3 }
	$10 = (CALL $135(( *(($11 + [88])) ? $17 : $14 ), $8, $15) == 0)
	goto $label$1 
	
.LABEL $label$3
	$10 = [1]
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8771])
	$17 = *(($17 + [92]))
	$17 = *($7 + [252])
	$8 = *(($8 + [92]))
	$8 = *($7 + [292])
	$11 = *(($8 + [96]))
	if ( ((int_32)($11 - $8) != (int_32)(*(($17 + [96])) - $17)) ){ goto $label$6 }
	$9 = [1]
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$6 }
	
.LOOP $label$7:
	if ( ((int_64)*(($8 + [8])) == (int_64)*(($17 + [8]))) ){ goto $label$8 }
	CALL eosio_assert([0], [9880])
	
.LABEL $label$8
	if ( ((int_64)*($8) != (int_64)*($17)) ){ goto $label$9 }
	$17 = ($17 + [16])
	$8 = ($8 + [16])
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8837])
	$17 = *($7 + [252])
	$8 = *($7 + [292])
	if ( ((int_64)*(($8 + [112])) == (int_64)*(($17 + [112]))) ){ goto $label$10 }
	CALL eosio_assert([0], [9880])
	
.LABEL $label$10
	CALL eosio_assert(((int_64)*(($8 + [104])) == (int_64)*(($17 + [104]))), [8898])
	$17 = *($7 + [252])
	$8 = *($7 + [292])
	if ( ((int_64)*(($8 + [128])) == (int_64)*(($17 + [128]))) ){ goto $label$11 }
	CALL eosio_assert([0], [9880])
	
.LABEL $label$11
	CALL eosio_assert(((int_64)*(($8 + [120])) == (int_64)*(($17 + [120]))), [8957])
	$17 = *($7 + [252])
	$8 = *($7 + [292])
	if ( ((int_64)*(($8 + [144])) == (int_64)*(($17 + [144]))) ){ goto $label$12 }
	CALL eosio_assert([0], [9880])
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*(($8 + [136])) == (int_64)*(($17 + [136]))), [9020])
	$17 = *($7 + [252])
	$8 = *($7 + [292])
	if ( ((int_64)*(($8 + [160])) == (int_64)*(($17 + [160]))) ){ goto $label$13 }
	CALL eosio_assert([0], [9880])
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*(($8 + [152])) == (int_64)*(($17 + [152]))), [9095])
	CALL eosio_assert(((int_64)*((*($7 + [292]) + [168])) == (int_64)*((*($7 + [252]) + [168]))), [9168])
	CALL eosio_assert(((int_64)*((*($7 + [292]) + [176])) == (int_64)*((*($7 + [252]) + [176]))), [9253])
	$17 = [0]
	$11 = [0]
	$10 = *(($10 + [96]))
	$10 = *($7 + [292])
	$8 = *(($10 + [92]))
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$14 }
	$18 = *(($4 + [16]))
	$11 = [0]
	
.LOOP $label$15:
	if ( ((int_64)*(($8 + [8])) != (int_64)$18) ){ goto $label$16 }
	$11 = ($11 | ((int_64)*($8) == (int_64)*(($4 + [8]))))
	
.LABEL $label$16
	$8 = ($8 + [16])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert(($11 & [1]), [9332])
	$11 = *(($11 + [96]))
	$11 = *($7 + [252])
	$8 = *(($11 + [92]))
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$17 }
	$18 = *(($5 + [16]))
	$17 = [0]
	
.LOOP $label$18:
	if ( ((int_64)*(($8 + [8])) != (int_64)$18) ){ goto $label$19 }
	$17 = ($17 | ((int_64)*($8) == (int_64)*(($5 + [8]))))
	
.LABEL $label$19
	$8 = ($8 + [16])
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$18 }
	
.LABEL $label$17
	CALL eosio_assert(($17 & [1]), [9377])
	$19 = *($5 + [24])
	$18 = *($4 + [24])
	if ( ((int_64)$18 != (int_64)$19) ){ goto $label$60 }
	$8 = *($7 + [292])
	$18 = *(($8 + [64]))
	if ( ((int_64)$18 == (int_64)1414288128) ){ goto $label$59 }
	if ( ((int_64)$18 != (int_64)1397703940) ){ goto $label$45 }
	$18 = *(( [9424] ? ($8 + [48]) : *($8 + [184]) ))
	$19 = *($0)
	*(($7 + [264])) = [0]
	*($7 + [256]) = (int_64)0
	$17 = CALL $136([9440])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$30 }
	$11 = ($8 + [56])
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$51 }
	*($7 + [256]) = ($17 << [1])
	$8 = (($7 + [256]) | [1])
	if ( $17 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$60
	$20 = *($0)
	if ( ((uint_64)$18 <= (uint_64)$19) ){ goto $label$61 }
	$18 = *($4)
	$17 = *($7 + [292])
	*(($7 + [264])) = [0]
	*($7 + [256]) = (int_64)0
	$8 = CALL $136([9472])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$32 }
	$11 = ($17 + [120])
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$58 }
	*($7 + [256]) = ($8 << [1])
	$17 = (($7 + [256]) | [1])
	if ( $8 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$61
	$18 = *($5)
	$17 = *($7 + [292])
	*(($7 + [264])) = [0]
	*($7 + [256]) = (int_64)0
	$8 = CALL $136([9472])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$31 }
	$11 = ($17 + [120])
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$55 }
	*($7 + [256]) = ($8 << [1])
	$17 = (($7 + [256]) | [1])
	if ( $8 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$59
	*($7 + [264]) = (int_64)1397703940
	$18 = *($8 + [56])
	*($7 + [256]) = $18
	if ( (uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$62 }
	CALL eosio_assert([0], [9811])
	
.LABEL $label$62
	$18 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$65:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$64 }
	$19 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$66 }
	$18 = $19
	$17 = $8
	$8 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$66
	$18 = $19
	
.LOOP $label$67:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$64 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$17 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $17 ){ goto $label$67 }
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$64
	CALL eosio_assert([0], [9860])
	
.LABEL $label$63
	$18 = *($0)
	*(($7 + [240])) = [0]
	*($7 + [232]) = (int_64)0
	$8 = CALL $136([9440])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$48 }
	*($7 + [232]) = ($8 << [1])
	$17 = (($7 + [232]) | [1])
	if ( $8 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$58
	$10 = (($8 + [16]) & [-16])
	$17 = CALL _Znwj($10)
	*($7 + [256]) = ($10 | [1])
	*($7 + [264]) = $17
	*($7 + [260]) = $8
	
.LABEL $label$57
	CALL memcpy($17, [9472], $8)
	
.LABEL $label$56
	*(($17 + $8)) = [0]
	CALL $23($7, $20, $18, $11, ($7 + [256]))
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*($7 + [264]))
	goto $label$52 
	
.LABEL $label$55
	$10 = (($8 + [16]) & [-16])
	$17 = CALL _Znwj($10)
	*($7 + [256]) = ($10 | [1])
	*($7 + [264]) = $17
	*($7 + [260]) = $8
	
.LABEL $label$54
	CALL memcpy($17, [9472], $8)
	
.LABEL $label$53
	*(($17 + $8)) = [0]
	CALL $23($7, $20, $18, $11, ($7 + [256]))
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*($7 + [264]))
	
.LABEL $label$52
	$8 = *($7 + [292])
	if ( ((int_64)*(($8 + [152])) < (int_64)1) ){ goto $label$37 }
	if ( ((int_64)*(($8 + [160])) != (int_64)1414288128) ){ goto $label$37 }
	if ( ((uint_64)*(($4 + [24])) <= (uint_64)*(($5 + [24]))) ){ goto $label$44 }
	$18 = *($4)
	*(($7 + [264])) = [0]
	*($7 + [256]) = (int_64)0
	$17 = CALL $136([9504])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$24 }
	$11 = ($8 + [152])
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$43 }
	*($7 + [256]) = ($17 << [1])
	$8 = (($7 + [256]) | [1])
	if ( $17 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$51
	$10 = (($17 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($7 + [256]) = ($10 | [1])
	*($7 + [264]) = $8
	*($7 + [260]) = $17
	
.LABEL $label$50
	CALL memcpy($8, [9440], $17)
	
.LABEL $label$49
	*(($8 + $17)) = [0]
	CALL $23($7, $19, $18, $11, ($7 + [256]))
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*($7 + [264]))
	goto $label$45 
	
.LABEL $label$48
	$11 = (($8 + [16]) & [-16])
	$17 = CALL _Znwj($11)
	*($7 + [232]) = ($11 | [1])
	*($7 + [240]) = $17
	*($7 + [236]) = $8
	
.LABEL $label$47
	CALL memcpy($17, [9440], $8)
	
.LABEL $label$46
	*(($17 + $8)) = [0]
	CALL $23($7, $18, (int_64)-7358208999254862384, ($7 + [256]), ($7 + [232]))
	if ( ((*($7 + [232]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*($7 + [240]))
	
.LABEL $label$68
	$17 = *($7 + [292])
	$18 = *(( [9424] ? ($17 + [48]) : *($17 + [184]) ))
	*(($7 + [240])) = [0]
	*($7 + [232]) = (int_64)0
	$8 = CALL $136([9440])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$28 }
	$11 = ($17 + [56])
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$71 }
	*($7 + [232]) = ($8 << [1])
	$17 = (($7 + [232]) | [1])
	if ( $8 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	$10 = (($8 + [16]) & [-16])
	$17 = CALL _Znwj($10)
	*($7 + [232]) = ($10 | [1])
	*($7 + [240]) = $17
	*($7 + [236]) = $8
	
.LABEL $label$70
	CALL memcpy($17, [9440], $8)
	
.LABEL $label$69
	*(($17 + $8)) = [0]
	CALL $24($7, (int_64)-7358208999254862384, $18, $11, ($7 + [232]))
	if ( ((*($7 + [232]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*($7 + [240]))
	
.LABEL $label$45
	$8 = *($7 + [252])
	$18 = *(($8 + [64]))
	if ( ((int_64)$18 == (int_64)1414288128) ){ goto $label$78 }
	if ( ((int_64)$18 != (int_64)1397703940) ){ goto $label$36 }
	$18 = *(( [9424] ? ($8 + [48]) : *($8 + [184]) ))
	$19 = *($0)
	*(($7 + [264])) = [0]
	*($7 + [256]) = (int_64)0
	$17 = CALL $136([9440])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$27 }
	$11 = ($8 + [56])
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$77 }
	*($7 + [256]) = ($17 << [1])
	$8 = (($7 + [256]) | [1])
	if ( $17 ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$78
	*($7 + [264]) = (int_64)1397703940
	$18 = *($8 + [56])
	*($7 + [256]) = $18
	if ( (uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$79 }
	CALL eosio_assert([0], [9811])
	
.LABEL $label$79
	$18 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$82:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$81 }
	$19 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$83 }
	$18 = $19
	$17 = $8
	$8 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$83
	$18 = $19
	
.LOOP $label$84:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$81 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$17 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $17 ){ goto $label$84 }
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$81
	CALL eosio_assert([0], [9860])
	
.LABEL $label$80
	$18 = *($0)
	*(($7 + [240])) = [0]
	*($7 + [232]) = (int_64)0
	$8 = CALL $136([9440])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$74 }
	*($7 + [232]) = ($8 << [1])
	$17 = (($7 + [232]) | [1])
	if ( $8 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$77
	$10 = (($17 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($7 + [256]) = ($10 | [1])
	*($7 + [264]) = $8
	*($7 + [260]) = $17
	
.LABEL $label$76
	CALL memcpy($8, [9440], $17)
	
.LABEL $label$75
	*(($8 + $17)) = [0]
	CALL $23($7, $19, $18, $11, ($7 + [256]))
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($7 + [264]))
	if ( *(*($7 + [292]) + [184]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$74
	$11 = (($8 + [16]) & [-16])
	$17 = CALL _Znwj($11)
	*($7 + [232]) = ($11 | [1])
	*($7 + [240]) = $17
	*($7 + [236]) = $8
	
.LABEL $label$73
	CALL memcpy($17, [9440], $8)
	
.LABEL $label$72
	*(($17 + $8)) = [0]
	CALL $23($7, $18, (int_64)-7358208999254862384, ($7 + [256]), ($7 + [232]))
	if ( ((*($7 + [232]) & [1]) == 0) ){ goto $label$85 }
	CALL _ZdlPv(*($7 + [240]))
	
.LABEL $label$85
	$17 = *($7 + [252])
	$18 = *(( [9424] ? ($17 + [48]) : *($17 + [184]) ))
	*(($7 + [240])) = [0]
	*($7 + [232]) = (int_64)0
	$8 = CALL $136([9440])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$25 }
	$11 = ($17 + [56])
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$88 }
	*($7 + [232]) = ($8 << [1])
	$17 = (($7 + [232]) | [1])
	if ( $8 ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$88
	$10 = (($8 + [16]) & [-16])
	$17 = CALL _Znwj($10)
	*($7 + [232]) = ($10 | [1])
	*($7 + [240]) = $17
	*($7 + [236]) = $8
	
.LABEL $label$87
	CALL memcpy($17, [9440], $8)
	
.LABEL $label$86
	*(($17 + $8)) = [0]
	CALL $24($7, (int_64)-7358208999254862384, $18, $11, ($7 + [232]))
	if ( ((*($7 + [232]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($7 + [240]))
	if ( *(*($7 + [292]) + [184]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$44
	$18 = *($5)
	*(($7 + [264])) = [0]
	*($7 + [256]) = (int_64)0
	$17 = CALL $136([9504])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$23 }
	$11 = ($8 + [152])
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$40 }
	*($7 + [256]) = ($17 << [1])
	$8 = (($7 + [256]) | [1])
	if ( $17 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$43
	$10 = (($17 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($7 + [256]) = ($10 | [1])
	*($7 + [264]) = $8
	*($7 + [260]) = $17
	
.LABEL $label$42
	CALL memcpy($8, [9504], $17)
	
.LABEL $label$41
	*(($8 + $17)) = [0]
	CALL $24($7, (int_64)-7358208999254856816, $18, $11, ($7 + [256]))
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($7 + [264]))
	goto $label$37 
	
.LABEL $label$40
	$10 = (($17 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($7 + [256]) = ($10 | [1])
	*($7 + [264]) = $8
	*($7 + [260]) = $17
	
.LABEL $label$39
	CALL memcpy($8, [9504], $17)
	
.LABEL $label$38
	*(($8 + $17)) = [0]
	CALL $24($7, (int_64)-7358208999254856816, $18, $11, ($7 + [256]))
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($7 + [264]))
	
.LABEL $label$37
	$11 = (*($7 + [292]) + [104])
	if ( ((int_64)*($11) < (int_64)1) ){ goto $label$36 }
	$18 = *($0)
	*(($7 + [264])) = [0]
	*($7 + [256]) = (int_64)0
	$8 = CALL $136([9536])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$91 }
	*($7 + [256]) = ($8 << [1])
	$17 = (($7 + [256]) | [1])
	if ( $8 ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	$10 = (($8 + [16]) & [-16])
	$17 = CALL _Znwj($10)
	*($7 + [256]) = ($10 | [1])
	*($7 + [264]) = $17
	*($7 + [260]) = $8
	
.LABEL $label$90
	CALL memcpy($17, [9536], $8)
	
.LABEL $label$89
	*(($17 + $8)) = [0]
	CALL $23($7, $18, (int_64)-4241567753542904672, $11, ($7 + [256]))
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$92 }
	CALL _ZdlPv(*($7 + [264]))
	
.LABEL $label$92
	if ( (CALL is_account(*($4 + [48])) == 0) ){ goto $label$93 }
	$8 = *($7 + [292])
	if ( ((int_64)*(($8 + [64])) != (int_64)1397703940) ){ goto $label$93 }
	CALL $32($0, *($8 + [48]), *(($4 + [48])), ($8 + [56]))
	
.LABEL $label$93
	if ( (CALL is_account(*($5 + [48])) == 0) ){ goto $label$36 }
	$8 = *($7 + [252])
	if ( ((int_64)*(($8 + [64])) != (int_64)1397703940) ){ goto $label$36 }
	CALL $32($0, *($8 + [48]), *(($5 + [48])), ($8 + [56]))
	
.LABEL $label$36
	if ( (*(*($7 + [292]) + [184]) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	$18 = (int_64)5524563
	$8 = [0]
	
.LOOP $label$96:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$95 }
	$19 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$97 }
	$18 = $19
	$17 = $8
	$8 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$96 }
	goto $label$94 
	
.LABEL $label$97
	$18 = $19
	
.LOOP $label$98:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$95 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$17 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $17 ){ goto $label$98 }
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$96 }
	goto $label$94 
	
.LABEL $label$95
	CALL eosio_assert([0], [9860])
	
.LABEL $label$94
	*($4 + [8]) = (int_64)0
	*(($4 + [16])) = (int_64)1414288128
	
.LABEL $label$34
	if ( (*(*($7 + [252]) + [184]) == 0) ){ goto $label$99 }
	$18 = (int_64)5524563
	$8 = [0]
	
.LOOP $label$102:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$101 }
	$19 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$103 }
	$18 = $19
	$17 = $8
	$8 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$103
	$18 = $19
	
.LOOP $label$104:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$101 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$17 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $17 ){ goto $label$104 }
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$101
	CALL eosio_assert([0], [9860])
	
.LABEL $label$100
	*($5 + [8]) = (int_64)0
	*(($5 + [16])) = (int_64)1414288128
	
.LABEL $label$99
	$8 = *($7 + [292])
	*($7 + [120]) = *($8 + [72])
	$11 = CALL $106((($7 + [120]) + [8]), ($8 + [80]))
	*(($7 + [148])) = [0]
	*($7 + [140 align=4]) = (int_64)0
	$17 = (*(($8 + [96])) - *(($8 + [92])))
	if ( ($17 == 0) ){ goto $label$106 }
	$10 = int_32($17 >> [4])
	if ( ((uint_32)$10 >= (uint_32)[268435456]) ){ goto $label$105 }
	$17 = CALL _Znwj($17)
	*(($7 + [140])) = $17
	*(($7 + [148])) = ($17 + ($10 << [4]))
	*(($10 = ($7 + [144]))) = $17
	$14 = *(($8 + [92]))
	$9 = (*(($8 + [96])) - $14)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$106 }
	CALL memcpy($17, $14, $9)
	*($10) = (*($10) + $9)
	
.LABEL $label$106
	CALL memcpy((($7 + [120]) + [32]), ($8 + [104]), [80])
	*((($7 + [64]) + [24])) = *(($4 + [24]))
	*((($7 + [64]) + [16])) = *(($4 + [16]))
	*((($7 + [64]) + [8])) = *(($4 + [8]))
	*($7 + [64]) = *($4)
	$8 = CALL $106((($7 + [64]) + [32]), ($4 + [32]))
	*((($7 + [8]) + [8])) = *(($5 + [8]))
	*((($7 + [8]) + [16])) = *(($5 + [16]))
	*((($7 + [8]) + [24])) = *(($5 + [24]))
	*($7 + [112]) = *($4 + [48])
	*($7 + [8]) = *($5)
	$17 = CALL $106((($7 + [8]) + [32]), ($5 + [32]))
	*($7 + [56]) = *($5 + [48])
	CALL $33($0, $1, $2, $3, ($7 + [120]), ($7 + [64]), ($7 + [8]), $6)
	if ( (*($17) & [1]) ){ goto $label$108 }
	if ( (*($8) & [1]) ){ goto $label$107 }
	goto $label$22 
	
.LABEL $label$108
	CALL _ZdlPv(*(($7 + [48])))
	if ( ((*($8) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$107
	CALL _ZdlPv(*(($7 + [104])))
	$8 = *($7 + [140])
	if ( $8 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$105
	CALL $121(($7 + [140]))
	
.LABEL $label$33
	CALL $105(($7 + [256]))
	
.LABEL $label$32
	CALL $105(($7 + [256]))
	
.LABEL $label$31
	CALL $105(($7 + [256]))
	
.LABEL $label$30
	CALL $105(($7 + [256]))
	
.LABEL $label$29
	CALL $105(($7 + [232]))
	
.LABEL $label$28
	CALL $105(($7 + [232]))
	
.LABEL $label$27
	CALL $105(($7 + [256]))
	
.LABEL $label$26
	CALL $105(($7 + [232]))
	
.LABEL $label$25
	CALL $105(($7 + [232]))
	
.LABEL $label$24
	CALL $105(($7 + [256]))
	
.LABEL $label$23
	CALL $105(($7 + [256]))
	
.LABEL $label$22
	$8 = *($7 + [140])
	if ( ($8 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	*(($7 + [144])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$20
	if ( ((*($11) & [1]) == 0) ){ goto $label$109 }
	CALL _ZdlPv(*(($7 + [136])))
	
.LABEL $label$109
	$18 = *($7 + [288])
	*($7 + [256]) = $18
	$8 = (CASTING uint_32)(uint_64 (uint_64)$18 >> (uint_64)(int_64)32)
	if ( $8) ){ goto $label$110 }
	CALL eosio_assert([0], [10319])
	$8 = *($7 + [260])
	
.LABEL $label$110
	CALL $34(($7 + [256]))
	CALL $35(*($7 + [296]), $8)
	$18 = *($7 + [248])
	*($7 + [256]) = $18
	$8 = (CASTING uint_32)(uint_64 (uint_64)$18 >> (uint_64)(int_64)32)
	if ( $8) ){ goto $label$111 }
	CALL eosio_assert([0], [10319])
	$8 = *($7 + [260])
	
.LABEL $label$111
	CALL $34(($7 + [256]))
	CALL $35(*($7 + [296]), $8)
	$global$0 = ($7 + [304])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = *($1)
	$5 = CALL db_idx256_lowerbound(*($4), *($4 + [8]), (int_64)4229443000054317056, $3, [2], ($3 + [40]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	$6 = *($3 + [40])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	
.LOOP $label$7:
	$4 = ($9 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$6) ){ goto $label$5 }
	$9 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [0]
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	if ( ((int_32)*($10 + [200]) == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert([0], [10033])
	*($10 + [208]) = $5
	$4 = [0]
	if ( $10 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$10 = CALL $87($7, CALL $fimport$2(*($7), *($7 + [8]), (int_64)4229443000054317056, $6))
	if ( ((int_32)*($10 + [200]) == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert([0], [10033])
	
.LABEL $label$3
	*($10 + [208]) = $5
	$4 = [0]
	if ( ($10 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_64)((int_64)((int_64)*($2) ^ (int_64)*($10 + [16])) | (int_64)((int_64)*(($2 + [8])) ^ (int_64)*(($10 + [24])))) != (int_64)0) ){ goto $label$1 }
	$4 = ( $10 ? [0] : (int_64)(((int_64)((int_64)*($2 + [16]) ^ (int_64)*(($10 + [32]))) | (int_64)((int_64)*(($2 + [24])) ^ (int_64)*(($10 + [40])))) == 0) )
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}