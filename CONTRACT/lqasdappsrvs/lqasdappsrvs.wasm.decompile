(data (i32.const 8192) "DAPP\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8283) "active\00")
(data (i32.const 8290) "string is too long to be a valid name\00")
(data (i32.const 8328) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8395) "character is not in allowed character set for names\00")
(data (i32.const 8447) "string is too long to be a valid symbol_code\00")
(data (i32.const 8492) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8545) "write\00")
(data (i32.const 8551) "{\00")
(data (i32.const 8553) "version\00")
(data (i32.const 8561) "1.4\00")
(data (i32.const 8565) ",\00")
(data (i32.const 8567) "etype\00")
(data (i32.const 8573) "usage_report\00")
(data (i32.const 8586) "payer\00")
(data (i32.const 8592) "service\00")
(data (i32.const 8600) "provider\00")
(data (i32.const 8609) "quantity\00")
(data (i32.const 8618) "success\00")
(data (i32.const 8626) "package\00")
(data (i32.const 8634) "}\n\00")
(data (i32.const 8637) "token with symbol does not exist\00")
(data (i32.const 8670) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8721) "error reading iterator\00")
(data (i32.const 8744) "read\00")
(data (i32.const 8749) "cannot create objects in table of another contract\00")
(data (i32.const 8800) "cannot pass end iterator to modify\00")
(data (i32.const 8835) "object passed to modify is not in multi_index\00")
(data (i32.const 8881) "cannot modify objects in table of another contract\00")
(data (i32.const 8932) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8991) "attempt to add asset with different symbol\00")
(data (i32.const 9034) "addition underflow\00")
(data (i32.const 9053) "addition overflow\00")
(data (i32.const 9071) "unexpected error in fixed_key constructor\00")
(data (i32.const 9114) "get\00")
(data (i32.const 9118) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9177) "token with symbol does not exist, create token before issue\00")
(data (i32.const 9237) "invalid quantity\00")
(data (i32.const 9254) "must issue positive quantity\00")
(data (i32.const 9283) "symbol precision mismatch\00")
(data (i32.const 9309) "quantity exceeds available supply\00")
(data (i32.const 9343) "no quota for this provider\00")
(data (i32.const 9370) "not enough quota for this provider\00")
(data (i32.const 9405) "attempt to subtract asset with different symbol\00")
(data (i32.const 9453) "subtraction underflow\00")
(data (i32.const 9475) "subtraction overflow\00")
(data (i32.const 9496) ".\00")
(data (i32.const 9498) " \00")
(data (i32.const 9500) "true\00")
(data (i32.const 9505) "false\00")
(data (i32.const 9511) "must choose package first\00")
(data (i32.const 9537) "no balance object found\00")
(data (i32.const 9561) "overdrawn balance\00")
(data (i32.const 9579) "must stake positive quantity\00")
(data (i32.const 9608) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9660) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9714) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9762) "refund\00")
(data (i32.const 9769) "refund request not found\00")
(data (i32.const 9794) "no balance object for provider\00")
(data (i32.const 9825) "must unstake positive quantity\00")
(data (i32.const 9856) "cannot pass end iterator to erase\00")
(data (i32.const 9890) "cannot increment end iterator\00")
(data (i32.const 9920) "object passed to erase is not in multi_index\00")
(data (i32.const 9965) "cannot erase objects in table of another contract\00")
(data (i32.const 10015) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10068) "no pending rewards\00")
(data (i32.const 10087) "already claimed in the last 24h\00")
(data (i32.const 10119) "transfer\00")
(data (i32.const 10128) "rewards\00")
(data (i32.const 10136) "max-supply must be positive\00")
(data (i32.const 10164) "token with symbol already exists\00")
(data (i32.const 10197) "invalid symbol name\00")
(data (i32.const 10217) "memo has more than 256 bytes\00")
(data (i32.const 10246) "cannot transfer to self\00")
(data (i32.const 10270) "to account does not exist\00")
(data (i32.const 10296) "unable to find key\00")
(data (i32.const 10315) "must transfer positive quantity\00")
(data (i32.const 10347) "symbol does not exist\00")
(data (i32.const 10369) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10418) "Balance row already deleted or never existed. Action won\'t have any effect.\00")
(data (i32.const 10494) "Cannot close because the balance is not zero.\00")
(data (i32.const 10540) "must retire positive quantity\00")
(data (i32.const 10570) "QUOTA\00")
(data (i32.const 10576) "already exists\00")
(data (i32.const 10591) "wrong symbol\00")
(data (i32.const 10604) "1.1\00")
(data (i32.const 10608) "service_signal\00")
(data (i32.const 10623) "action\00")
(data (i32.const 10630) "data\00")
(data (i32.const 10635) "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\00")
(data (i32.const 19120) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 19136) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 19152) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$1 (result i64)))
(import "env" "send_inline" (func $fimport$2 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$3 (param i32)))
(import "env" "action_data_size" (func $fimport$4 (result i32)))
(import "env" "read_action_data" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "require_recipient" (func $fimport$7 (param i64)))
(import "env" "prints" (func $fimport$8 (param i32)))
(import "env" "prints_l" (func $fimport$9 (param i32 i32)))
(import "env" "printn" (func $fimport$10 (param i64)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "is_account" (func $fimport$14 (param i64) (result i32)))
(import "env" "has_auth" (func $fimport$15 (param i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$20 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$21 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$22 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$23 (param i32 i64 i32)))
(import "env" "db_idx256_find_primary" (func $fimport$24 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_update" (func $fimport$25 (param i32 i64 i32 i32)))
(import "env" "printi" (func $fimport$26 (param i64)))
(import "env" "cancel_deferred" (func $fimport$27 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$28 (param i32 i64 i32 i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx256_store" (func $fimport$30 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$32 (param i64 i64 i64) (result i32)))
(import "env" "db_idx256_next" (func $fimport$33 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$34 (param i32)))
(import "env" "db_idx256_remove" (func $fimport$35 (param i32)))
(import "env" "db_idx128_store" (func $fimport$36 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$37 (param i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$38 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$39))
(import "env" "db_idx128_next" (func $fimport$40 (param i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$41 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$45 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$48 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$49 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$50 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$51 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$52 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$53 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$54 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$55 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$56 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$57 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$58 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$59 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$60 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $4))
(export "_ZdlPv" (func $155))
(export "_Znwj" (func $153))
(export "_Znaj" (func $154))
(export "_ZdaPv" (func $156))
(export "_ZnwjSt11align_val_t" (func $157))
(export "_ZnajSt11align_val_t" (func $158))
(export "_ZdlPvSt11align_val_t" (func $159))
(export "_ZdaPvSt11align_val_t" (func $160))
(table $0 16 16 anyfunc)
(elem (i32.const 1) $5 $7 $9 $11 $13 $15 $17 $19 $21 $23 $25 $27 $29 $31 $32)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19168))
(global $global$2 i32 (i32.const 19168))


int_32 .FUNC $174 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $167())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $175($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [112]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $73(($4 + [16]), ($4 + [112]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4)
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	$10 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $179($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $176 (int_32 $0)
{
	return CALL $177([10720], $0)
}

int_32 .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $178($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8197])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_64 .FUNC $170 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $171 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $172 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$6 = ($global$0 - [48])
	$global$0 = $6
	CALL require_auth(*($0 + [8]))
	*(($6 + [24])) = [0]
	*($6 + [16]) = (int_64)0
	$5 = *($5)
	$7 = *($5 + [4])
	$8 = ($7 - $5)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$6 }
	*($6 + [16]) = ($8 << [1])
	$9 = (($6 + [16]) | [1])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($6 + [16]) = ($10 | [1])
	*($6 + [24]) = $9
	*($6 + [20]) = $8
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$4 }
	
.LABEL $label$5
	$10 = $9
	
.LOOP $label$7:
	*($10) = *($5)
	$10 = ($10 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	$9 = ($9 + $8)
	
.LABEL $label$4
	*($9) = [0]
	$8 = *($6 + [24])
	$10 = *($6 + [20])
	$5 = *($6 + [16])
	*(($6 + [40])) = [0]
	*($6 + [32]) = (int_64)0
	$7 = CALL $173([10635])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	$11 = ($5 & [1])
	$10 = ( $10 ? uint_32($5 >> [1]) : $11 )
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$10 }
	*($6 + [32]) = ($7 << [1])
	$9 = (($6 + [32]) | [1])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($5)
	*($6 + [32]) = ($5 | [1])
	*($6 + [40]) = $9
	*($6 + [36]) = $7
	
.LABEL $label$9
	CALL memcpy($9, [10635], $7)
	
.LABEL $label$8
	$5 = [0]
	*(($9 + $7)) = [0]
	$9 = CALL $176([3])
	$12 = CALL $176([4])
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	if ( ($10 == 0) ){ goto $label$11 }
	$7 = ( $8 ? (($6 + [16]) | [1]) : $11 )
	$8 = (($6 + [32]) | [1])
	$11 = ($6 + [40])
	
.LOOP $label$13:
	*(($9 + $5)) = *($7)
	$10 = ($10 + [-1])
	$5 = ($5 + [1])
	if ( ((int_32)$5 == (int_32)[3]) ){ goto $label$14 }
	$7 = ($7 + [1])
	if ( $10 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$5 = uint_32(*($9) >> [2])
	*($12) = $5
	$14 = ($9 + [1])
	*(($13 = ($12 + [1]))) = (((*($9) << [4]) & [48]) | uint_32(*($14) >> [4]))
	$14 = ($9 + [2])
	*(($15 = ($12 + [2]))) = (((*($14) << [2]) & [60]) | uint_32(*($14) >> [6]))
	*(($16 = ($12 + [3]))) = (*($14) & [63])
	CALL $165($6, *((( *($11) ? $8 : (*($6 + [32]) & [1]) ) + $5)))
	CALL $165($6, *((( *($11) ? $8 : (*($6 + [32]) & [1]) ) + *($13))))
	CALL $165($6, *((( *($11) ? $8 : (*($6 + [32]) & [1]) ) + *($15))))
	CALL $165($6, *((( *($11) ? $8 : (*($6 + [32]) & [1]) ) + *($16))))
	$5 = [0]
	$7 = ($7 + [1])
	if ( $10 ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 > (int_32)[2]) ){ goto $label$15 }
	$10 = $5
	
.LOOP $label$16:
	*(($9 + $10)) = [0]
	$7 = ((int_32)$10 < (int_32)[2])
	$10 = ($10 + [1])
	if ( $7 ){ goto $label$16 }
	
.LABEL $label$15
	$11 = uint_32(*($9) >> [2])
	*($12) = $11
	$7 = ($9 + [1])
	*(($10 = ($12 + [1]))) = (((*($9) << [4]) & [48]) | uint_32(*($7) >> [4]))
	$7 = ($9 + [2])
	*(($12 + [2])) = (((*($7) << [2]) & [60]) | uint_32(*($7) >> [6]))
	*(($12 + [3])) = (*($7) & [63])
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$17 }
	$9 = ($6 + [40])
	CALL $165($6, *((( *($9) ? $8 : (*($6 + [32]) & [1]) ) + ($11 & [255]))))
	$7 = $5
	
.LOOP $label$18:
	CALL $165($6, *((( *($9) ? $8 : (*($6 + [32]) & [1]) ) + *($10))))
	$10 = ($10 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$18 }
	
.LABEL $label$17
	if ( ((int_32)$5 > (int_32)[2]) ){ goto $label$11 }
	$5 = ($5 + [-1])
	
.LOOP $label$19:
	CALL $165($6, [61])
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[2]) ){ goto $label$19 }
	
.LABEL $label$11
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($6 + [40]))
	
.LABEL $label$20
	CALL prints([8551])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8553])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [58]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([10604])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8565])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8567])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [58]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([10608])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8565])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8586])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [58]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL printn(*(($0 + [8])))
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8565])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8592])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [58]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL printn($1)
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8565])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([10623])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [58]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL printn($2)
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8565])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8600])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [58]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL printn($3)
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8565])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8626])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [58]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL printn($4)
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8565])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([10630])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [58]
	CALL prints_l(($6 + [32]), [1])
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	$5 = ($6 + [8])
	CALL prints(( *($5) ? ($6 | [1]) : (*($6) & [1]) ))
	*($6 + [32]) = [34]
	CALL prints_l(($6 + [32]), [1])
	CALL prints([8634])
	CALL require_recipient($1)
	CALL require_recipient($3)
	if ( (*($6) & [1]) ){ goto $label$22 }
	if ( (*($6 + [16]) & [1]) ){ goto $label$21 }
	goto $label$1 
	
.LABEL $label$22
	CALL _ZdlPv(*($5))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$21
	CALL _ZdlPv(*(($6 + [24])))
	$global$0 = ($6 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $161(($6 + [16]))
	
.LABEL $label$2
	CALL $161(($6 + [32]))
	
.LABEL $label$1
	$global$0 = ($6 + [48])
	(unreachable)
}

int_32 .FUNC $178 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10712]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10716])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10712]) = [1]
	$2 = ($2 << [16])
	*([0] + [10716]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10716])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10716]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10712]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10712]) = [1]
	$3 = ($3 << [16])
	*([0] + [10716]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10716])
	
.LABEL $label$10
	*([0] + [10716]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)-3102536759825661953) ){ goto $label$14 }
	if ( ((int_64)$2 <= (int_64)-4993669930013425665) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)-4157661383434960897) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4993669930013425664) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-4421791123171704832) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [1]
	*($3 + [88]) = *($3 + [144])
	CALL $6($1, $1, ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	if ( ((int_64)$2 != (int_64)-1288933729535787008) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [2]
	*($3 + [112]) = *($3 + [120])
	CALL $8($0, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 <= (int_64)4929617502180212735) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)4929617502180212736) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)4929617875758481408) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [3]
	*($3 + [104]) = *($3 + [128])
	CALL $10($1, $1, ($3 + [104]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-5000868948036550656) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [4]
	*($3 + [96]) = *($3 + [136])
	CALL $12($1, $1, ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-3022824646081773568) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4921565079997371264) ){ goto $label$1 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [5]
	*($3 + [32]) = *($3 + [200])
	CALL $14($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4157661383434960896) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [6]
	*($3 + [56]) = *($3 + [176])
	CALL $16($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [7]
	*($3 + [48]) = *($3 + [184])
	CALL $18($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [156]) = [0]
	*($3 + [152]) = [8]
	*($3 + [80]) = *($3 + [152])
	CALL $20($1, $1, ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [164]) = [0]
	*($3 + [160]) = [9]
	*($3 + [72]) = *($3 + [160])
	CALL $22($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [172]) = [0]
	*($3 + [168]) = [10]
	*($3 + [64]) = *($3 + [168])
	CALL $24($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [212]) = [0]
	*($3 + [208]) = [11]
	*($3 + [24]) = *($3 + [208])
	CALL $26($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [220]) = [0]
	*($3 + [216]) = [12]
	*($3 + [16]) = *($3 + [216])
	CALL $28($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [236]) = [0]
	*($3 + [232]) = [13]
	*($3) = *($3 + [232])
	CALL $30($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [228]) = [0]
	*($3 + [224]) = [14]
	*($3 + [8]) = *($3 + [224])
	CALL $28($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [196]) = [0]
	*($3 + [192]) = [15]
	*($3 + [40]) = *($3 + [192])
	CALL $33($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$1
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	CALL require_auth($1)
	CALL $74($0, $1, $3, $2, $4)
	CALL require_recipient($2)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $176($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	CALL $128(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $123(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $179($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $2($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8545])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8545])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $83(CALL $82($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $49 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = *($0)
	$0 = CALL $173([8192])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($0 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	*(($5 + [80])) = [0]
	*($5 + [56]) = $7
	*($5 + [48]) = $6
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	*($5 + [84]) = [0]
	CALL eosio_assert([1], [9071])
	*($5 + [24]) = (int_64)0
	*($5 + [16]) = $1
	CALL eosio_assert([1], [9071])
	*(($5 + [40])) = $2
	*($5 + [32]) = $3
	*($5 + [8]) = ($5 + [48])
	CALL $48(($5 + [88]), ($5 + [8]), ($5 + [16]))
	$0 = [0]
	$8 = *($5 + [92])
	if ( ($8 == 0) ){ goto $label$7 }
	$1 = *($8 + [24])
	$2 = *($8 + [16])
	$7 = *($8 + [8])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	$0 = [0]
	if ( ((int_64)((int_64)((int_64)$7 ^ (int_64)*($5 + [16])) | (int_64)*($5 + [24])) != (int_64)0) ){ goto $label$7 }
	$0 = [0]
	if ( ((int_64)((int_64)((int_64)*(($5 + [32])) ^ (int_64)$1) | (int_64)((int_64)*(($5 + [40])) ^ (int_64)$2)) != (int_64)0) ){ goto $label$7 }
	$0 = *($5 + [92])
	
.LABEL $label$7
	$8 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($8, [9794])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)*($4 + [8])), [9118])
	CALL eosio_assert(((int_64)*($0 + [48]) >= (int_64)*($4)), [9561])
	*($5 + [88]) = $4
	CALL eosio_assert($8, [8800])
	CALL $136(*($5 + [8]), $0, (int_64)0, ($5 + [88]))
	$4 = *($5 + [72])
	if ( ($4 == 0) ){ goto $label$8 }
	$9 = ($5 + [76])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$12 }
	CALL _ZdlPv($8)
	
.LABEL $label$12
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($5 + [72]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $4
	
.LABEL $label$9
	*($9) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($5 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx256_lowerbound(*($2), *($2 + [8]), (int_64)3607749778918490112, $3, [2], ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [40])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8670])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $100($7, CALL $fimport$13(*($7), *($7 + [8]), (int_64)3607749778918490112, $6))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8670])
	
.LABEL $label$2
	*(($4 + [120])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx256_lowerbound(*($2), *($2 + [8]), (int_64)-5001342326804578304, $3, [2], ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [40])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [8670])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $127($7, CALL $fimport$13(*($7), *($7 + [8]), (int_64)-5001342326804578304, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [8670])
	
.LABEL $label$2
	*(($4 + [56])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

int_64 .FUNC $42 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [176])
	$global$0 = $4
	$5 = CALL $173([8192])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$6 = ((int_64)$6 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LABEL $label$1
	$8 = CALL current_time()
	*(($4 + [160])) = [0]
	*($4 + [136]) = $6
	*($4 + [144]) = (int_64)-1
	$6 = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [164]) = [0]
	*($4 + [128]) = *($0)
	CALL eosio_assert([1], [9071])
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = $1
	CALL eosio_assert([1], [9071])
	*(($4 + [120])) = $3
	*($4 + [112]) = $2
	$8 = ((uint_64)$8 / (uint_64)(int_64)1000)
	*($4 + [88]) = ($4 + [128])
	CALL $48(($4 + [48]), ($4 + [88]), ($4 + [96]))
	$5 = *($4 + [52])
	if ( ($5 == 0) ){ goto $label$7 }
	$9 = *($5 + [24])
	$10 = *($5 + [16])
	$1 = *($5 + [8])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	if ( ((int_64)((int_64)((int_64)$1 ^ (int_64)*($4 + [96])) | (int_64)*($4 + [104])) != (int_64)0) ){ goto $label$7 }
	if ( ((int_64)(((int_64)((int_64)*(($4 + [112])) ^ (int_64)$9) | (int_64)((int_64)*(($4 + [120])) ^ (int_64)$10)) == 0) == 0) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = *($4 + [52])
	if ( ($5 == 0) ){ goto $label$7 }
	*($4 + [16]) = [9113]
	*($4 + [20]) = CALL $173([9113])
	*($4) = *($4 + [16])
	$7 = CALL $1(($4 + [48]), $4)
	$1 = *($5 + [80])
	if ( ((int_64)$1 == (int_64)*($7)) ){ goto $label$7 }
	$6 = *($5 + [104])
	*(($4 + [80])) = [0]
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	*($4 + [84]) = [0]
	$9 = *($0)
	*($4 + [48]) = $9
	*($4 + [56]) = $9
	CALL eosio_assert([1], [9071])
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $1
	CALL eosio_assert([1], [9071])
	*(($4 + [40])) = $3
	*($4 + [32]) = $2
	$6 = (int_64))($6 - $8)
	*($4 + [8]) = ($4 + [48])
	CALL $76(($4 + [168]), ($4 + [8]), ($4 + [16]))
	$5 = *($4 + [172])
	if ( ($5 == 0) ){ goto $label$8 }
	$3 = *($5 + [48])
	$1 = *($5 + [40])
	$2 = *($5 + [32])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	if ( ((int_64)((int_64)((int_64)$2 ^ (int_64)*($4 + [16])) | (int_64)*($4 + [24])) != (int_64)0) ){ goto $label$8 }
	if ( ((int_64)(((int_64)((int_64)*(($4 + [32])) ^ (int_64)$3) | (int_64)((int_64)*(($4 + [40])) ^ (int_64)$1)) == 0) == 0) ){ goto $label$8 }
	$5 = *($4 + [172])
	if ( ($5 == 0) ){ goto $label$8 }
	$5 = *($5 + [96])
	if ( ((uint_64)$6 >= (uint_64)(CASTING uint_64)(uint_32 $5)) ){ goto $label$8 }
	$6 = (CASTING uint_64)(uint_32 ((int_32)$5 * (int_32)[1000]))
	
.LABEL $label$8
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$7 }
	$11 = (($4 + [48]) + [28])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$13
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$14
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$11 }
	$5 = *(($4 + [72]))
	goto $label$9 
	
.LABEL $label$10
	$5 = $0
	
.LABEL $label$9
	*($11) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$0 = *($4 + [152])
	if ( ($0 == 0) ){ goto $label$15 }
	$11 = ($4 + [156])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$19 }
	CALL _ZdlPv($7)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($4 + [152]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $0
	
.LABEL $label$16
	*($11) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$global$0 = ($4 + [176])
	return $6
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	$4 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($2 + [16]) = $4)
	$0 = [0]
	$5 = CALL db_find_i64($3, $4, (int_64)-4157502542122582016, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $58(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($2 + [8])), [8670])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [8637])
	CALL eosio_assert(((int_64)*($1) > (int_64)0), [9579])
	*($2) = $1
	CALL $119(($2 + [8]), $0, (int_64)0, $2)
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [36])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$0 = CALL $117(($3 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [9537]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)*($2)), [9561])
	*($3) = $2
	CALL $118(($3 + [8]), $0, $1, $3)
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($3 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$1 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($1 + [4]), [8])
	*($0 + [24]) = *($2 + [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	$6 = ($global$0 - [160])
	$global$0 = $6
	$7 = CALL current_time()
	*(($6 + [116])) = (int_64)0
	*(($6 + [132])) = (int_64)0
	*(($6 + [140])) = (int_64)0
	*($6 + [100]) = [0]
	*($6 + [104]) = [0]
	*($6 + [108 align=4]) = (int_64)0
	*($6 + [124 align=4]) = (int_64)0
	*($6 + [88]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$7 = CALL current_receiver()
	*($6 + [56]) = [8283]
	*($6 + [60]) = CALL $173([8283])
	*($6 + [8]) = *($6 + [56])
	*($6 + [64]) = *(CALL $1(($6 + [16]), ($6 + [8])))
	*($6 + [56]) = $7
	*(($8 = CALL _Znwj([16]))) = *($6 + [56])
	*(($8 + [8])) = *($6 + [64])
	*($6 + [72]) = $8
	$8 = ($8 + [16])
	*($6 + [80]) = $8
	*($6 + [76]) = $8
	*($6 + [152]) = [9762]
	*($6 + [156]) = CALL $173([9762])
	*($6) = *($6 + [152])
	*($6 + [152]) = *(CALL $1(($6 + [16]), $6))
	*($6 + [24]) = $3
	*($6 + [16]) = $2
	*($6 + [32]) = $4
	*($6 + [40]) = $5
	CALL $124(($6 + [124]), ($6 + [72]), $0, ($6 + [152]), ($6 + [16]))
	$8 = *($6 + [72])
	if ( ($8 == 0) ){ goto $label$1 }
	*($6 + [76]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	*(($6 + [108])) = $1
	*($6 + [24]) = (int_64)0
	*($6 + [16]) = $2
	CALL cancel_deferred(($6 + [16]))
	*($6 + [24]) = (int_64)0
	*($6 + [16]) = $2
	$2 = *($0)
	CALL $125(($6 + [56]), ($6 + [88]))
	$8 = *($6 + [56])
	CALL send_deferred(($6 + [16]), $2, $8, (*($6 + [60]) - $8), [1])
	$8 = *($6 + [56])
	if ( ($8 == 0) ){ goto $label$2 }
	*($6 + [60]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$2
	CALL $126(($6 + [88]))
	$global$0 = ($6 + [160])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$1()), [8749])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [48]) = $1
	CALL $122(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $123(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$5 = ($1 + [16])
	$6 = *($5)
	$7 = *($1 + [24])
	$8 = *($1 + [32])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	*((($4 + [64]) + [24])) = $8
	*($4 + [80]) = $7
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (uint_64)$6 >> (uint_64)(int_64)8)
	*($1 + [40]) = *(*($3))
	$6 = *($1)
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5)), [8991])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9034])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9053])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8932])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [96]) = ($4 + [48])
	*($4 + [132]) = ($1 + [8])
	*($4 + [128]) = $1
	$3 = ($1 + [24])
	*($4 + [136]) = $3
	$9 = ($1 + [32])
	*($4 + [140]) = $9
	*($4 + [144]) = ($1 + [40])
	CALL $129(($4 + [128]), ($4 + [96]))
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$7 = *($3)
	$8 = *($9)
	$10 = *($5)
	CALL eosio_assert([1], [9071])
	*($4 + [136]) = (int_64)0
	*($4 + [128]) = (uint_64)$10 >> (uint_64)(int_64)8)
	CALL eosio_assert([1], [9071])
	*((($4 + [128]) + [24])) = $8
	*($4 + [144]) = $7
	if ( (CALL $172(($4 + [64]), ($4 + [128]), [32]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	*(($4 + [120])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)0
	$1 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)-5001342326804578304, ($4 + [96]), [2], $6)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx256_update($1, $2, ($4 + [128]), [2])
	
.LABEL $label$2
	$global$0 = ($4 + [160])
}

int_32 .FUNC $167 ()
{
	return [10704]
}

void .FUNC $166 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $164($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $161 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_64 .FUNC $169 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $171($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $168($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [19136])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [19120]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [19152]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $170($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $168 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $176($1)
	
.LABEL $label$2
	*(CALL $167()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $176(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $179($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $176($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	CALL $103(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $104(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $179($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$1()), [8749])
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = $1
	*($5 + [8]) = *(*($3) + [8])
	*($5 + [16]) = *(*($3 + [4]))
	*($5 + [24]) = *(*($3 + [8]))
	*($4 + [48]) = ($4 + [32])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [16])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [24])
	CALL $95(($4 + [64]), ($4 + [56]))
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-4157502542122582016, $2, $6), $4, [32]
	*($5 + [36]) = $7)
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($4) = $6)
	*($4 + [40]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $104(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	$4 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($2 + [16]) = $4)
	$0 = [0]
	$5 = CALL db_find_i64($3, $4, (int_64)-4157502542122582016, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $58(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($2 + [8])), [8670])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [8637])
	$4 = *($1)
	CALL eosio_assert(((int_64)$4 > (int_64)0), [9825])
	CALL eosio_assert(((int_64)$4 <= (int_64)*($0)), [9309])
	*($2) = $1
	CALL $137(($2 + [8]), $0, (int_64)0, $2)
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0)
	*($4 + [24]) = $5
	$6 = *($2 + [8])
	*($4 + [32]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $68(($4 + [24]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [24])), [8670])
	*($4 + [8]) = $2
	CALL eosio_assert([1], [8800])
	CALL $92(($4 + [24]), $0, (int_64)0, ($4 + [8]))
	$7 = *($4 + [48])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [16]) = $2
	CALL $93(($4 + [8]), ($4 + [24]), $3, ($4 + [16]))
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [52])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($2)
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9890])
	$2 = *($0 + [4])
	$3 = *($2 + [56])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	*(($1 + [24])) = (int_64)0
	*(($1 + [16])) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1) = (int_64)0
	$3 = *(*($0))
	$3 = CALL db_idx256_find_primary(*($3), *($3 + [8]), (int_64)-5001342326804578304, $1, [2], *($2))
	*(*(($0 + [4])) + [56]) = $3
	
.LABEL $label$1
	*($1) = (int_64)0
	$4 = CALL db_idx256_next($3, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1)
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [32])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [8670])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $127($6, CALL $fimport$13(*($6), *($6 + [8]), (int_64)-5001342326804578304, $5))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [8670])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [56])) = $4
	$global$0 = ($1 + [32])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [9965])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10015])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$6 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)-5001342326804578304, $2, [2], *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx256_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = CALL $173([8192])
	if ( ($5 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [8447])
	goto $label$6 
	
.LABEL $label$7
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = (int_64)0
	
.LOOP $label$8:
	$7 = *(($5 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$9
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$8 }
	if ( ((int_64)((int_64)$6 & (int_64)72057594037927935) == (int_64)$2) ){ goto $label$1 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_64)0 == (int_64)$2) ){ goto $label$1 }
	
.LABEL $label$4
	$4 = ($4 + [-24])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	$4 = $3
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)*(($1 + [24]))) ){ goto $label$10 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$1), [8670])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$10
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4992121834821386240, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$11 }
	$5 = CALL $108($1, $5)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$1), [8670])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$11
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$6 = CALL $173([8192])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	*(($6 = *($3))) = *($1)
	$6 = ($1 + [8])
	*(($6 + [8])) = *($6)
	*($1 + [16]) = *(*($3 + [4]))
	$8 = *($3)
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*($6)), [9405])
	$7 = (int_64)
	*($1) = $7(*($1) - *($8)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9453])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9475])
	$3 = ($1 + [16])
	$6 = CALL $173([8192])
	if ( ($6 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8447])
	goto $label$9 
	
.LABEL $label$10
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = (int_64)0
	
.LOOP $label$11:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$12
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$11 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$7 
	
.LABEL $label$8
	$7 = (int_64)0
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$9 == (int_64)$7), [8932])
	$6 = $4
	$8 = ($6 + [-32])
	$global$0 = $8
	CALL eosio_assert([1], [8545])
	CALL memcpy($8, $1, [8])
	*($5 + [8]) = *(($1 + [8]))
	CALL eosio_assert([1], [8545])
	CALL memcpy(($6 + [-24]), ($5 + [8]), [8])
	CALL eosio_assert([1], [8545])
	CALL memcpy(($6 + [-16]), $3, [8])
	CALL db_update_i64(*($1 + [28]), $2, $8, [24])
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$13
	$global$0 = ($5 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $140(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $176($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $96(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $97(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $179($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $173 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4 + [4])
	$6 = *($5 + [120])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($4)
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	$6 = CALL db_idx256_find_primary(*($6), *($6 + [8]), (int_64)3607749778918490112, $3, [2], *($5))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx256_remove($6)
	
.LABEL $label$1
	$6 = *($0)
	$4 = *($6 + [4])
	$0 = *(($4 + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = *($6)
	$0 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)3607749778918490113, $3, *($4))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx128_remove($0)
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $176($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10700])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $176($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [108]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9714])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6228193299614662656)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9660])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9660])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $105(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $140(*($1), *($0 + [4]))
	CALL $140(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8545])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8545])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$1 = *($1)
	*($2 + [8]) = *(*($0 + [40]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [8545])
	CALL memcpy(*($1 + [4]), ($2 + [8]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $174(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10700])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $174(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $179($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $179($0)
	
.LABEL $label$1
}

void .FUNC $179 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19104])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18912]
	$3 = (((int_32)$1 * (int_32)[12]) + [18912])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$1()), [8749])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = $1
	CALL $141(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $99(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $176($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8744])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8744])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $99(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $179($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $61(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_64 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	float_64 $11
	$1 = ($global$0 - [144])
	$global$0 = $1
	$2 = CALL $173([8192])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	*((($1 + [104]) + [32])) = [0]
	*($1 + [120]) = (int_64)-1
	*($1 + [128]) = (int_64)0
	$5 = *($0)
	*($1 + [104]) = $5
	$6 = ((int_64)$3 & (int_64)72057594037927935)
	*($1 + [112]) = $6
	*((($1 + [64]) + [32])) = [0]
	*($1 + [72]) = $6
	*($1 + [64]) = $5
	*($1 + [80]) = (int_64)-1
	*($1 + [88]) = (int_64)0
	$7 = [0]
	$2 = CALL db_find_i64($5, $6, (int_64)-4157502542122582016, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $58(($1 + [104]), $2)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($1 + [104])), [8670])
	$4 = *(($1 + [92]))
	$8 = *(($1 + [88]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$10:
	$2 = ($4 + [-24])
	$9 = *($2)
	if ( ((int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8) == (int_64)$6) ){ goto $label$9 }
	$4 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($1 + [64])), [8670])
	goto $label$7 
	
.LABEL $label$8
	$2 = CALL db_find_i64(*($1 + [64]), *(($1 + [72])), (int_64)-4157508551318700032, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$11 }
	$9 = CALL $57(($1 + [64]), $2)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($1 + [64])), [8670])
	goto $label$7 
	
.LABEL $label$11
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8637])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8637])
	$10 = *($7 + [16])
	$6 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	*($1 + [56]) = $6
	$5 = *($7 + [24])
	if ( ((uint_64)$6 <= (uint_64)((int_64)$5 + (int_64)500)) ){ goto $label$12 }
	$6 = (int_64)
	if ( (uint_64)($6($6 - $5)) <= (int_64)500) ){ goto $label$12 }
	$10 = CALL $169(((float_64)$10 + (float_64)(float_64)1), (CASTING float_64)(int_64 ((uint_64)$6 / (uint_64)(int_64)500)))
	$6 = *($9)
	*($1 + [48]) = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$10 = ((float_64)((float_64)$10 + (float_64)(float_64)-1) * (float_64)(CASTING float_64)(int_64 $6))
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)9223372036854775808) ){ goto $label$14 }
	*($1 + [40]) = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 >= (int_64)1) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$3 = (Rounds 0)($10)
	*($1 + [40]) = $3
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$12 }
	
.LABEL $label$13
	$6 = *((($1 + [40]) + [8]))
	*((($1 + [24]) + [8])) = $6
	$3 = *($0)
	*(($1 + [8])) = $6
	$6 = *($1 + [40])
	*($1 + [24]) = $6
	*($1) = $6
	CALL $51($0, $3, $1, $3)
	*($1 + [16]) = ($1 + [40])
	CALL $88(($1 + [64]), $9, (int_64)0, ($1 + [16]))
	*($1 + [16]) = ($1 + [56])
	CALL $89(($1 + [104]), $7, (int_64)0, ($1 + [16]))
	
.LABEL $label$12
	$10 = (CASTING float_64)(int_64 *($7))
	$11 = (CASTING float_64)(int_64 *($9))
	$9 = *($1 + [88])
	if ( ($9 == 0) ){ goto $label$15 }
	$8 = ($1 + [92])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$17 }
	
.LOOP $label$18:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$18 }
	$2 = *(($1 + [88]))
	goto $label$16 
	
.LABEL $label$17
	$2 = $9
	
.LABEL $label$16
	*($8) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$15
	$10 = ((float_64)$11 / (float_64)$10)
	$9 = *($1 + [128])
	if ( ($9 == 0) ){ goto $label$20 }
	$8 = ($1 + [132])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	CALL _ZdlPv($4)
	
.LABEL $label$24
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($1 + [128]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $9
	
.LABEL $label$21
	*($8) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$20
	$global$0 = ($1 + [144])
	return $10
}

int_32 .FUNC $67 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [8670])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $57($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [8670])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $162(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $162(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $107($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $163($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $163($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $161($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$1()), [8749])
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $1
	$6 = *($3)
	*($5 + [8]) = *($6 + [8])
	*($5 + [24]) = *($6 + [8])
	*($5 + [16]) = *($6)
	*($5 + [32]) = *(*($3 + [4]))
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [16])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [32])
	CALL $94(($4 + [64]), ($4 + [56]))
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157508551318700032, $2, $7), $4, [40]
	*($5 + [44]) = $6)
	if ( (uint_64)($7 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$1
	*($4 + [64]) = $5
	$7 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($4) = $7)
	*($4 + [40]) = $6
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $97(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [8991])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9034])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9053])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8932])
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [32])
	CALL $94(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $162(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $162(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8290])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8395])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8328])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8395])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	*($1 + [24]) = *(*($3))
	$5 = *($1 + [8])
	CALL eosio_assert([1], [8932])
	*($4 + [48]) = ($4 + [32])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [24])
	CALL $95(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [8991])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9034])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9053])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8932])
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [32])
	CALL $94(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [256])
	$global$0 = $4
	*($4 + [192]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$2 = *($1 + [24])
	$5 = *($1 + [8])
	$6 = *($1 + [16])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	*((($4 + [144]) + [24])) = $6
	*((($4 + [144]) + [40])) = *($1 + [8])
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = $5
	*($4 + [160]) = $2
	*($4 + [176]) = *($1 + [16])
	$2 = *($1)
	*($4 + [136]) = $2
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [40]))), [9405])
	$5 = (int_64)
	*($1 + [32]) = $5(*($1 + [32]) - *($3)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9453])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9475])
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [8932])
	*($4 + [128]) = ($4 + [112])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	*($4 + [200]) = ($4 + [120])
	*($4 + [212]) = ($1 + [8])
	*($4 + [208]) = $1
	*($4 + [216]) = ($1 + [16])
	*($4 + [220]) = ($1 + [24])
	*($4 + [224]) = ($1 + [32])
	*($4 + [228]) = ($1 + [48])
	*($4 + [232]) = ($1 + [64])
	*($4 + [236]) = ($1 + [72])
	*($4 + [240]) = ($1 + [80])
	*($4 + [244]) = ($1 + [88])
	*($4 + [248]) = ($1 + [96])
	*($4 + [252]) = ($1 + [104])
	CALL $111(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($1 + [116]), *($4 + [192]), $4, [112])
	$3 = ($0 + [36])
	$2 = *($4 + [136])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [212]) = $1
	*($4 + [208]) = $0
	*($4 + [220]) = $1
	*($4 + [216]) = ($4 + [144])
	*($4 + [224]) = ($4 + [136])
	*($4 + [228]) = ($4 + [192])
	*($4 + [200]) = ($4 + [208])
	CALL $114(($4 + [200]), $3, ($3 + [1]))
	$global$0 = ($4 + [256])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [256])
	$global$0 = $4
	*($4 + [192]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$2 = *($1 + [24])
	$5 = *($1 + [8])
	$6 = *($1 + [16])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	*((($4 + [144]) + [24])) = $6
	*((($4 + [144]) + [40])) = *($1 + [8])
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = $5
	*($4 + [160]) = $2
	*($4 + [176]) = *($1 + [16])
	$7 = *($3)
	*($1 + [32]) = *($7 + [32])
	*(($1 + [40])) = *(($7 + [40]))
	$7 = *($3)
	*($1 + [96]) = *($7 + [96])
	*($1 + [80]) = *($7 + [80])
	*($1 + [104]) = *($7 + [104])
	*($1 + [72]) = *($7 + [72])
	*($4 + [136]) = *($1)
	*($1 + [64]) = *(*($3 + [4]))
	CALL eosio_assert([1], [8932])
	*($4 + [128]) = ($4 + [112])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	*($4 + [200]) = ($4 + [120])
	*($4 + [212]) = ($1 + [8])
	*($4 + [208]) = $1
	*($4 + [216]) = ($1 + [16])
	*($4 + [220]) = ($1 + [24])
	*($4 + [224]) = ($1 + [32])
	*($4 + [228]) = ($1 + [48])
	*($4 + [232]) = ($1 + [64])
	*($4 + [236]) = ($1 + [72])
	*($4 + [240]) = ($1 + [80])
	*($4 + [244]) = ($1 + [88])
	*($4 + [248]) = ($1 + [96])
	*($4 + [252]) = ($1 + [104])
	CALL $111(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($1 + [116]), *($4 + [192]), $4, [112])
	$3 = ($0 + [36])
	$2 = *($4 + [136])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [212]) = $1
	*($4 + [208]) = $0
	*($4 + [220]) = $1
	*($4 + [216]) = ($4 + [144])
	*($4 + [224]) = ($4 + [136])
	*($4 + [228]) = ($4 + [192])
	*($4 + [200]) = ($4 + [208])
	CALL $112(($4 + [200]), $3, ($3 + [1]))
	$global$0 = ($4 + [256])
}

void .FUNC $85 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = CALL $173([8192])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$6 = ((int_64)$6 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LABEL $label$1
	$7 = [0]
	*(($4 + [104])) = [0]
	*($4 + [88]) = (int_64)-1
	*($4 + [96]) = (int_64)0
	$8 = *($0)
	*($4 + [72]) = $8
	*($4 + [80]) = $6
	$9 = [0]
	$5 = CALL db_find_i64($8, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $57(($4 + [72]), $5)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)($4 + [72])), [8670])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9177])
	$10 = *($3 + [8])
	$11 = *($3)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$6 = $8
	$7 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$6 = $8
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [9237])
	$6 = (int_64)0
	CALL eosio_assert(((int_64)$11 > (int_64)0), [9254])
	CALL eosio_assert(((int_64)$10 == (int_64)*($9 + [8])), [9283])
	CALL eosio_assert(((int_64)$11 <= (int_64))(*($9 + [16]) - *($9))), [9309])
	*(($4 + [64])) = [0]
	*($4 + [40]) = $1
	*($4 + [48]) = (int_64)-1
	*($4 + [56]) = (int_64)0
	*($4 + [32]) = *($0)
	$5 = CALL $173([8192])
	if ( ($5 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8447])
	goto $label$14 
	
.LABEL $label$15
	if ( ($5 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = (int_64)0
	
.LOOP $label$16:
	$7 = *(($5 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$17
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$16 }
	$6 = ((int_64)$6 & (int_64)72057594037927935)
	
.LABEL $label$13
	CALL $54(($4 + [24]), ($4 + [32]), $6)
	if ( (*($4 + [28]) == 0) ){ goto $label$20 }
	$6 = *($0)
	$5 = *($4 + [28])
	*($4 + [8]) = $3
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8800])
	CALL $90(($4 + [32]), $5, $6, ($4 + [8]))
	$12 = *($4 + [56])
	if ( $12 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$6 = *($0)
	*($4 + [16]) = $3
	CALL $91(($4 + [8]), ($4 + [32]), $6, ($4 + [16]))
	$12 = *($4 + [56])
	if ( ($12 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$9 = ($4 + [60])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$22 }
	
.LOOP $label$23:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$24 }
	CALL _ZdlPv($7)
	
.LABEL $label$24
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$23 }
	$5 = *(($4 + [56]))
	goto $label$21 
	
.LABEL $label$22
	$5 = $12
	
.LABEL $label$21
	*($9) = $12
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$12 = *($4 + [96])
	if ( ($12 == 0) ){ goto $label$25 }
	$9 = ($4 + [100])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$27 }
	
.LOOP $label$28:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$29 }
	CALL _ZdlPv($7)
	
.LABEL $label$29
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$28 }
	$5 = *(($4 + [96]))
	goto $label$26 
	
.LABEL $label$27
	$5 = $12
	
.LABEL $label$26
	*($9) = $12
	CALL _ZdlPv($5)
	
.LABEL $label$25
	$global$0 = ($4 + [112])
}

void .FUNC $84 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$5 = ($global$0 - [208])
	$global$0 = $5
	$6 = CALL current_time()
	$6 = ((uint_64)$6 / (uint_64)(int_64)1000)
	if ( ((uint_64)*($4 + [104]) > (uint_64)$6) ){ goto $label$1 }
	*($4 + [32]) = (int_64)0
	*($4 + [96]) = $6
	*($5 + [168]) = [9113]
	*($5 + [172]) = CALL $173([9113])
	*($5 + [8]) = *($5 + [168])
	*($4 + [80]) = *(CALL $1(($5 + [16]), ($5 + [8])))
	*(($4 + [104])) = *($4 + [96])
	*($5 + [168]) = [9113]
	*($5 + [172]) = CALL $173([9113])
	*($5) = *($5 + [168])
	$7 = CALL $1(($5 + [16]), $5)
	$6 = *($4 + [88])
	if ( ((int_64)$6 == (int_64)*($7)) ){ goto $label$1 }
	*(($5 + [200])) = [0]
	*($5 + [184]) = (int_64)-1
	*($5 + [192]) = (int_64)0
	*($5 + [204]) = [0]
	$8 = *($0)
	*($5 + [168]) = $8
	*($5 + [176]) = $8
	CALL eosio_assert([1], [9071])
	*($5 + [136]) = (int_64)0
	*($5 + [128]) = $6
	CALL eosio_assert([1], [9071])
	*(($5 + [152])) = $3
	*($5 + [144]) = $2
	*($5 + [120]) = ($5 + [168])
	CALL $76(($5 + [16]), ($5 + [120]), ($5 + [128]))
	$0 = *($5 + [20])
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *($0 + [48])
	$3 = *($0 + [40])
	$6 = *($0 + [32])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	if ( ((int_64)((int_64)((int_64)$6 ^ (int_64)*($5 + [128])) | (int_64)*($5 + [136])) != (int_64)0) ){ goto $label$2 }
	if ( ((int_64)(((int_64)((int_64)*(($5 + [144])) ^ (int_64)$2) | (int_64)((int_64)*(($5 + [152])) ^ (int_64)$3)) == 0) == 0) ){ goto $label$2 }
	$0 = *($5 + [20])
	if ( ($0 == 0) ){ goto $label$2 }
	*($5 + [16]) = *($0)
	$7 = CALL $162((($5 + [16]) + [8]), ($0 + [8]))
	$9 = CALL $162((($5 + [16]) + [20]), ($0 + [20]))
	CALL memcpy((($5 + [16]) + [32]), ($0 + [32]), [69])
	CALL eosio_assert(((int_64)*((($5 + [16]) + [88])) == (int_64)*(($4 + [56]))), [9118])
	if ( ((int_64)*($5 + [96]) <= (int_64)*($4 + [48])) ){ goto $label$6 }
	$4 = [1]
	if ( (*($9) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*(($4 + [32])) = *($5 + [72])
	*(($4 + [80])) = *(($4 + [88]))
	*(($4 + [104])) = ((int_64)*(($4 + [96])) + (int_64)(CASTING uint_64)(uint_32 ((int_32)*($5 + [88]) * (int_32)[1000])))
	$4 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($5 + [44])))
	if ( (*($7) & $4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((*($7) & $4) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$2
	$7 = *($5 + [192])
	if ( ($7 == 0) ){ goto $label$1 }
	$9 = (($5 + [168]) + [28])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$11
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$9 }
	$4 = *(($5 + [192]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $7
	
.LABEL $label$7
	*($9) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($5 + [208])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8545])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8545])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8545])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8545])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8545])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = (int_64)0
	$3 = [0]
	*($2 + [8]) = [0]
	$4 = *($1 + [24])
	$5 = *($1 + [16])
	$6 = *($1 + [8])
	$7 = *($1)
	$8 = (*(($1 + [36])) - *($1 + [32]))
	if ( ($8 == 0) ){ goto $label$6 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$9 = CALL _Znwj($8)
	*(($2 + [8])) = ($9 + $8)
	*($2) = $9
	*($2 + [4]) = $9
	$3 = *(($1 + [32]))
	$1 = (*(($1 + [36])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($9, $3, $1)
	$3 = ($9 + $1)
	*($2 + [4]) = $3
	goto $label$4 
	
.LABEL $label$6
	$9 = [0]
	$8 = [0]
	goto $label$3 
	
.LABEL $label$5
	$3 = $9
	
.LABEL $label$4
	$8 = $9
	
.LABEL $label$3
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$10 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($10) + $1))
	
.LABEL $label$7
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$0 = ($3 - $8)
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$8 = CALL _Znwj($0)
	*(($2 + [24])) = ($8 + $0)
	*($2 + [16]) = $8
	*($2 + [20]) = $8
	$3 = ($3 - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($8, $9, $3)
	*($2 + [20]) = ($8 + $3)
	
.LABEL $label$8
	CALL void $10((int_32 $7), (int_64 $6), (int_64 $5), (int_64 $4), (int_64 ($2 + [16])), (int_32 $1))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $166($2)
	
.LABEL $label$1
	CALL $166(($2 + [16]))
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $107(*($1), ($3 + [32]))
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	*($1 + [100]) = [1]
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-6228193299614662656, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $105($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $150(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	$8 = ($1 + [100])
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9608])
	*($1) = *(($6 + [16]))
	$6 = *($5 + [4])
	*($1 + [48]) = *($6 + [48])
	*($1 + [40]) = *($6 + [40])
	*($1 + [32]) = *($6 + [32])
	*(($1 + [64])) = *(($6 + [64]))
	*($1 + [56]) = *($6 + [56])
	$6 = *($5 + [4])
	*($1 + [80]) = *($6 + [80])
	*(($1 + [88])) = *(($6 + [88]))
	$6 = *($5 + [4])
	*($1 + [96]) = *($6 + [96])
	*($1 + [72]) = *($6 + [72])
	$6 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [73])
	$7 = (CASTING uint_64)(uint_32 $5)
	$9 = ($1 + [8])
	$10 = ($1 + [72])
	$11 = ($1 + [96])
	$12 = ($1 + [80])
	$13 = ($1 + [56])
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$5 = *($1 + [20])
	$5 = ( *(($1 + [24])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$6 = ($5 + $6)
	$7 = (CASTING uint_64)(uint_32 $5)
	$14 = ($1 + [20])
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($6 <= [513]) ){ goto $label$6 }
	$5 = CALL $176($6)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	*($3 + [40]) = $14
	*($3 + [44]) = ($1 + [32])
	*($3 + [48]) = ($1 + [40])
	*($3 + [52]) = ($1 + [48])
	*($3 + [56]) = $13
	*($3 + [60]) = $10
	*($3 + [64]) = $12
	*($3 + [68]) = $11
	*($3 + [72]) = $8
	CALL $151(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($4 + [8]), (int_64)-6228193299614662656, *(*($0 + [8])), $7, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL $179($5)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$8 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$7 = *(($4 + [8]))
	$15 = *(*(($0 + [8])))
	$16 = *($1)
	$17 = *(($1 + [48]))
	$18 = *(($1 + [40]))
	$19 = *(($1 + [32]))
	CALL eosio_assert([1], [9071])
	*($3 + [40]) = (int_64)0
	*($3 + [32]) = $19
	CALL eosio_assert([1], [9071])
	*(($3 + [56])) = $18
	*($3 + [48]) = $17
	*($1 + [112]) = CALL db_idx256_store($7, (int_64)-6228193299614662656, $15, $16, ($3 + [32]), [2])
	$global$0 = ($3 + [80])
}

int_32 .FUNC $148 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [116]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9714])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)3607749778918490112)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9660])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9660])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $100(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $146(*($0), $1)
	$0 = *($0)
	$4 = *($0)
	$1 = *($0 + [4])
	*($3 + [16]) = *($1 + [16])
	*($3 + [24]) = *($1 + [8])
	if ( (CALL $172((*($0 + [8]) + [32]), ($3 + [16]), [16]) == 0) ){ goto $label$1 }
	$1 = *((*($0 + [12]) + [124]))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL db_idx128_find_primary(*($4), *($4 + [8]), (int_64)3607749778918490113, $3, *(*($0 + [16])))
	*((*(($0 + [12])) + [124])) = $1
	
.LABEL $label$2
	CALL db_idx128_update($1, *(*($0 + [20])), ($3 + [16]))
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [192])
	$global$0 = $2
	$3 = *($0)
	CALL $147(*($0 + [4]), $1)
	*($2 + [128]) = ($2 + [112])
	*($2 + [124]) = $2
	*($2 + [120]) = $2
	*($2 + [136]) = ($2 + [120])
	*($2 + [148]) = ($1 + [8])
	*($2 + [144]) = $1
	*($2 + [152]) = ($1 + [16])
	*($2 + [156]) = ($1 + [24])
	*($2 + [160]) = ($1 + [32])
	*($2 + [164]) = ($1 + [48])
	*($2 + [168]) = ($1 + [64])
	*($2 + [172]) = ($1 + [72])
	*($2 + [176]) = ($1 + [80])
	*($2 + [180]) = ($1 + [88])
	*($2 + [184]) = ($1 + [96])
	*($2 + [188]) = ($1 + [104])
	CALL $111(($2 + [144]), ($2 + [136]))
	$4 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($3 + [8]), (int_64)3607749778918490112, *(*($0 + [8])), $4, $2, [112])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = ($3 + [8])
	$4 = *($3)
	$0 = *(($0 + [8]))
	$5 = *($0)
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = *($1 + [16])
	$9 = *($1 + [8])
	CALL eosio_assert([1], [9071])
	*($2 + [152]) = (int_64)0
	*($2 + [144]) = $9
	CALL eosio_assert([1], [9071])
	*((($2 + [144]) + [24])) = $8
	*($2 + [160]) = $7
	*($1 + [120]) = CALL db_idx256_store($4, (int_64)3607749778918490112, $5, $6, ($2 + [144]), [2])
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [152]) = *($1 + [8])
	*($2 + [144]) = *($1 + [16])
	*(($1 + [124])) = CALL db_idx128_store($5, (int_64)3607749778918490113, $4, $6, ($2 + [144]))
	$global$0 = ($2 + [192])
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)3607749778918490112, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $100($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $148(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [9608])
	*($1) = *(($3 + [16]))
	*($1 + [88]) = *(*($0 + [4]))
	*($1 + [24]) = *(*($0 + [8]))
	*($1 + [16]) = *(*($0 + [12]))
	*($1 + [8]) = *(*($0 + [16]))
	$0 = CALL $173([8192])
	if ( ($0 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8447])
	goto $label$5 
	
.LABEL $label$6
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = (int_64)0
	
.LOOP $label$7:
	$3 = *(($0 + [8191]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$8
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$7 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$4
	$4 = (int_64)4
	
.LABEL $label$3
	*(($1 + [56])) = $4
	$0 = CALL $173([10570])
	if ( ($0 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [8447])
	goto $label$11 
	
.LABEL $label$12
	if ( ($0 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$4 = (int_64)0
	
.LOOP $label$13:
	$3 = *(($0 + [10569]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$14
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$13 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$9 
	
.LABEL $label$10
	$4 = (int_64)4
	
.LABEL $label$9
	*(($1 + [40])) = $4
	$global$0 = ($2 + [16])
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4 + [24])
	$6 = *($4 + [16])
	$7 = *($4 + [8])
	CALL eosio_assert([1], [9071])
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = $7
	CALL eosio_assert([1], [9071])
	*(($2 + [56])) = $6
	*($2 + [48]) = $5
	if ( (CALL $172(*($0 + [8]), ($2 + [32]), [32]) == 0) ){ goto $label$1 }
	$4 = *(*($0 + [12]) + [120])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$2 }
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$4 = CALL db_idx256_find_primary(*($3), *($3 + [8]), (int_64)3607749778918490112, $2, [2], *(*($0 + [16])))
	*(*(($0 + [12])) + [120]) = $4
	
.LABEL $label$2
	CALL db_idx256_update($4, *(*($0 + [20])), ($2 + [32]), [2])
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*(*($0 + [4])) + [8])
	CALL eosio_assert([1], [10369])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [10197])
	*($1 + [8]) = $5
	*($1) = (int_64)0
	$9 = $2
	$7 = ($9 + [-16])
	$global$0 = $7
	CALL eosio_assert([1], [8545])
	CALL memcpy($7, $1, [8])
	*($3 + [8]) = *($1 + [8])
	CALL eosio_assert([1], [8545])
	CALL memcpy(($9 + [-8]), ($3 + [8]), [8])
	$6 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $6), $7, [16])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8545])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8545])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $143 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$1()), [8749])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([128])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [112]) = $1
	CALL $144(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [116])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $102(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [256])
	$global$0 = $4
	*($4 + [192]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$2 = *($1 + [24])
	$5 = *($1 + [8])
	$6 = *($1 + [16])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	*((($4 + [144]) + [24])) = $6
	*(($4 + [184])) = *($1 + [8])
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = $5
	*($4 + [160]) = $2
	*($4 + [176]) = *($1 + [16])
	$2 = *($1)
	*($4 + [136]) = $2
	*($1 + [88]) = *(*($3))
	CALL eosio_assert([1], [8932])
	*($4 + [128]) = ($4 + [112])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	*($4 + [200]) = ($4 + [120])
	*($4 + [212]) = ($1 + [8])
	*($4 + [208]) = $1
	*($4 + [216]) = ($1 + [16])
	*($4 + [220]) = ($1 + [24])
	*($4 + [224]) = ($1 + [32])
	*($4 + [228]) = ($1 + [48])
	*($4 + [232]) = ($1 + [64])
	*($4 + [236]) = ($1 + [72])
	*($4 + [240]) = ($1 + [80])
	*($4 + [244]) = ($1 + [88])
	*($4 + [248]) = ($1 + [96])
	*($4 + [252]) = ($1 + [104])
	CALL $111(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($1 + [116]), *($4 + [192]), $4, [112])
	$3 = ($0 + [36])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [212]) = $1
	*($4 + [208]) = $0
	*($4 + [220]) = $1
	*($4 + [216]) = ($4 + [144])
	*($4 + [224]) = ($4 + [136])
	*($4 + [228]) = ($4 + [192])
	*($4 + [200]) = ($4 + [208])
	CALL $145(($4 + [200]), $3, ($3 + [1]))
	$global$0 = ($4 + [256])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9405])
	$6 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9453])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9475])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8932])
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [32])
	CALL $94(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [9965])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10015])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [8]))
	*($2 + [32]) = *($1)
	$1 = CALL $162(($2 + [16]), ($1 + [16]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($5 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$4 = CALL $162(($2 + [64]), $1)
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx256_lowerbound(*($2), *($2 + [8]), (int_64)-6228193299614662656, $3, [2], ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [40])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)$7), [8670])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $105($7, CALL $fimport$13(*($7), *($7 + [8]), (int_64)-6228193299614662656, $6))
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)$7), [8670])
	
.LABEL $label$2
	*($4 + [112]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$1()), [8749])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([120])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [104]) = $1
	CALL $149(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [108])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $106(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $74 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [160])
	$global$0 = $5
	*($5 + [144]) = $2
	*($5 + [152]) = $1
	*($5 + [136]) = $3
	*($5 + [128]) = $4
	$6 = *($0)
	$0 = CALL $173([8192])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($0 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	*(($5 + [120])) = [0]
	*($5 + [96]) = $4
	*($5 + [88]) = $6
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	*($5 + [124]) = [0]
	CALL eosio_assert([1], [9071])
	*($5 + [56]) = (int_64)0
	*($5 + [48]) = $1
	CALL eosio_assert([1], [9071])
	*(($5 + [72])) = $2
	*($5 + [64]) = $3
	*($5 + [40]) = ($5 + [88])
	CALL $48(($5 + [16]), ($5 + [40]), ($5 + [48]))
	$0 = *($5 + [20])
	if ( ($0 == 0) ){ goto $label$9 }
	$3 = *($0 + [24])
	$1 = *($0 + [16])
	$4 = *($0 + [8])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	if ( ((int_64)((int_64)((int_64)$4 ^ (int_64)*($5 + [48])) | (int_64)*($5 + [56])) != (int_64)0) ){ goto $label$9 }
	if ( ((int_64)(((int_64)((int_64)*(($5 + [64])) ^ (int_64)$3) | (int_64)((int_64)*(($5 + [72])) ^ (int_64)$1)) == 0) == 0) ){ goto $label$9 }
	$0 = *($5 + [20])
	if ( ($0 == 0) ){ goto $label$9 }
	*($5 + [16]) = ($5 + [128])
	CALL eosio_assert([1], [8800])
	CALL $142(*($5 + [40]), $0, (int_64)0, ($5 + [16]))
	$8 = *($5 + [112])
	if ( $8 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = *($5 + [152])
	*($5 + [20]) = ($5 + [128])
	*($5 + [16]) = ($5 + [88])
	*($5 + [24]) = ($5 + [136])
	*($5 + [28]) = ($5 + [144])
	*($5 + [32]) = ($5 + [152])
	CALL $143(($5 + [8]), ($5 + [88]), $4, ($5 + [16]))
	$8 = *($5 + [112])
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$9 = ($5 + [116])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	CALL _ZdlPv($7)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($5 + [112]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $8
	
.LABEL $label$10
	*($9) = $8
	CALL _ZdlPv($0)
	$global$0 = ($5 + [160])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [160])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $61(*($1), *($0 + [4]))
	CALL $61(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8744])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8744])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8744])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9890])
	$2 = *($0 + [4])
	$3 = *($2 + [120])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	*(($1 + [24])) = (int_64)0
	*(($1 + [16])) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1) = (int_64)0
	$3 = *(*($0))
	$3 = CALL db_idx256_find_primary(*($3), *($3 + [8]), (int_64)3607749778918490112, $1, [2], *($2))
	*(*(($0 + [4])) + [120]) = $3
	
.LABEL $label$1
	*($1) = (int_64)0
	$4 = CALL db_idx256_next($3, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1)
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [32])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [8670])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $100($6, CALL $fimport$13(*($6), *($6 + [8]), (int_64)3607749778918490112, $5))
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [8670])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [120])) = $4
	$global$0 = ($1 + [32])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [9920])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [9965])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10015])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [116]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $152(($2 + [8]), ($0 + [36]), ($0 + [37]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2)
	$4 = *(*($2 + [4]))
	*($0) = *($4)
	*($0 + [8]) = *(($4 + [8]))
	CALL eosio_assert([1], [8545])
	CALL memcpy($3, $0, [8])
	*($3 + [24]) = *($0 + [8])
	CALL eosio_assert([1], [8545])
	CALL memcpy(($3 | [8]), ($3 + [24]), [8])
	$5 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, *(*($2 + [8])), $5), $3, [16])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$6 = CALL $173([8192])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	$6 = *($3)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*($1 + [8])), [8991])
	$7 = ((int_64)*($1) + (int_64)*($6))
	*($1) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9034])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9053])
	$6 = CALL $173([8192])
	if ( ($6 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8447])
	goto $label$9 
	
.LABEL $label$10
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = (int_64)0
	
.LOOP $label$11:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$12
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$11 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$7 
	
.LABEL $label$8
	$7 = (int_64)0
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$9 == (int_64)$7), [8932])
	$6 = $4
	$8 = ($6 + [-32])
	$global$0 = $8
	CALL eosio_assert([1], [8545])
	CALL memcpy($8, $1, [8])
	*($5 + [8]) = *(($1 + [8]))
	CALL eosio_assert([1], [8545])
	CALL memcpy(($6 + [-24]), ($5 + [8]), [8])
	CALL eosio_assert([1], [8545])
	CALL memcpy(($6 + [-16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $8, [24])
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$13
	$global$0 = ($5 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$1()), [8749])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$2 = (int_64)0
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = $1
	CALL $109(($4 + [16]), $5)
	*($4 + [32]) = $5
	$3 = CALL $173([8192])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($3 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$2 = ((int_64)$2 & (int_64)72057594037927935)
	$6 = *($4 + [32])
	goto $label$1 
	
.LABEL $label$2
	$6 = $5
	
.LABEL $label$1
	*($4 + [16]) = $2
	$7 = *($6 + [28])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $6
	*($8) = ($3 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $110(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$global$0 = ($4 + [48])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [8991])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9034])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9053])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8932])
	CALL eosio_assert([1], [8545])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [8545])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$1()), [8749])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $98($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $99(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $139(*($0), $1)
	$0 = *($0)
	$4 = *($0)
	$1 = *($0 + [4])
	*($3 + [16]) = *($1 + [16])
	*($3 + [24]) = *($1 + [8])
	if ( (CALL $172((*($0 + [8]) + [32]), ($3 + [16]), [16]) == 0) ){ goto $label$1 }
	$1 = *((*($0 + [12]) + [124]))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL db_idx128_find_primary(*($4), *($4 + [8]), (int_64)3607749778918490113, $3, *(*($0 + [16])))
	*((*(($0 + [12])) + [124])) = $1
	
.LABEL $label$2
	CALL db_idx128_update($1, *(*($0 + [20])), ($3 + [16]))
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4 + [24])
	$6 = *($4 + [16])
	$7 = *($4 + [8])
	CALL eosio_assert([1], [9071])
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = $7
	CALL eosio_assert([1], [9071])
	*(($2 + [56])) = $6
	*($2 + [48]) = $5
	if ( (CALL $172(*($0 + [8]), ($2 + [32]), [32]) == 0) ){ goto $label$1 }
	$4 = *(*($0 + [12]) + [120])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$2 }
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$4 = CALL db_idx256_find_primary(*($3), *($3 + [8]), (int_64)3607749778918490112, $2, [2], *(*($0 + [16])))
	*(*(($0 + [12])) + [120]) = $4
	
.LABEL $label$2
	CALL db_idx256_update($4, *(*($0 + [20])), ($2 + [32]), [2])
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9714])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5001342326804578304)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9660])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9660])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $127(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$1 = *($1)
	*($2 + [8]) = *($0 + [24])
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($1 + [4]), ($2 + [8]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8545])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8545])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8545])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8545])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8545])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8545])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8545])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8545])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8545])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $83(CALL $82($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8545])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8545])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $83($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $136 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [256])
	$global$0 = $4
	*($4 + [192]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$2 = *($1 + [24])
	$5 = *($1 + [8])
	$6 = *($1 + [16])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	*((($4 + [144]) + [24])) = $6
	*(($4 + [184])) = *($1 + [8])
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = $5
	*($4 + [160]) = $2
	*($4 + [176]) = *($1 + [16])
	$2 = *($1)
	*($4 + [136]) = $2
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [9405])
	$5 = (int_64)
	*($1 + [48]) = $5(*($1 + [48]) - *($3)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9453])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [9475])
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [8932])
	*($4 + [128]) = ($4 + [112])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	*($4 + [200]) = ($4 + [120])
	*($4 + [212]) = ($1 + [8])
	*($4 + [208]) = $1
	*($4 + [216]) = ($1 + [16])
	*($4 + [220]) = ($1 + [24])
	*($4 + [224]) = ($1 + [32])
	*($4 + [228]) = ($1 + [48])
	*($4 + [232]) = ($1 + [64])
	*($4 + [236]) = ($1 + [72])
	*($4 + [240]) = ($1 + [80])
	*($4 + [244]) = ($1 + [88])
	*($4 + [248]) = ($1 + [96])
	*($4 + [252]) = ($1 + [104])
	CALL $111(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($1 + [116]), *($4 + [192]), $4, [112])
	$3 = ($0 + [36])
	$2 = *($4 + [136])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [212]) = $1
	*($4 + [208]) = $0
	*($4 + [220]) = $1
	*($4 + [216]) = ($4 + [144])
	*($4 + [224]) = ($4 + [136])
	*($4 + [228]) = ($4 + [192])
	*($4 + [200]) = ($4 + [208])
	CALL $138(($4 + [200]), $3, ($3 + [1]))
	$global$0 = ($4 + [256])
}

void .FUNC $137 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9405])
	$6 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9453])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9475])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8932])
	*($4 + [48]) = ($4 + [32])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [24])
	CALL $95(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $80(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $81(($4 + [144]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $179($2)
	
.LABEL $label$4
	$2 = *(($4 + [104]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [108])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = *($0)
	$0 = CALL $173([8192])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($0 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	$6 = ((int_64)$6 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LABEL $label$1
	*(($4 + [80])) = [0]
	*($4 + [56]) = $6
	*($4 + [48]) = $5
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	*($4 + [84]) = [0]
	CALL eosio_assert([1], [9071])
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $1
	CALL eosio_assert([1], [9071])
	*(($4 + [40])) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = ($4 + [48])
	CALL $48(($4 + [88]), ($4 + [8]), ($4 + [16]))
	$7 = ($4 + [8])
	$0 = *($4 + [92])
	if ( ($0 == 0) ){ goto $label$8 }
	$1 = *($0 + [24])
	$2 = *($0 + [16])
	$6 = *($0 + [8])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	if ( ((int_64)((int_64)((int_64)$6 ^ (int_64)*($4 + [16])) | (int_64)*($4 + [24])) != (int_64)0) ){ goto $label$8 }
	$0 = [0]
	if ( ((int_64)((int_64)((int_64)*(($4 + [32])) ^ (int_64)$1) | (int_64)((int_64)*(($4 + [40])) ^ (int_64)$2)) != (int_64)0) ){ goto $label$7 }
	$0 = *($4 + [92])
	$7 = *($4 + [88])
	goto $label$7 
	
.LABEL $label$8
	$0 = [0]
	
.LABEL $label$7
	$8 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($8, [10418])
	CALL eosio_assert((int_64)(*($0 + [48]) == 0), [10494])
	*($4 + [88]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $7))
	CALL eosio_assert($8, [9856])
	CALL $78(($4 + [88]))
	CALL $79(*($4 + [8]), $0)
	$8 = *($4 + [72])
	if ( ($8 == 0) ){ goto $label$9 }
	$9 = ($4 + [76])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	CALL _ZdlPv($7)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($4 + [72]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $8
	
.LABEL $label$10
	*($9) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$global$0 = ($4 + [96])
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-5001342326804578304, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $127($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $130(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9608])
	*($1) = *(($6 + [16]))
	*($1 + [40]) = *(*($5 + [4]))
	$8 = *($5 + [8])
	*(($6 = ($1 + [16]))) = *(($8 + [8]))
	*($1 + [8]) = *($8)
	*($1 + [24]) = *(*($5 + [12]))
	*($1 + [32]) = *(*($5 + [16]))
	$2 = $2
	$5 = ($2 + [-48])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $2
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	$2 = ($1 + [24])
	*($3 + [40]) = $2
	$8 = ($1 + [32])
	*($3 + [44]) = $8
	*($3 + [48]) = ($1 + [40])
	CALL $129(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($4 + [8]), (int_64)-5001342326804578304, *(*($0 + [8])), $7, $5, [48])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$7 = *(($4 + [8]))
	$9 = *(*(($0 + [8])))
	$10 = *($1)
	$11 = *($2)
	$12 = *($8)
	$13 = *($6)
	CALL eosio_assert([1], [9071])
	*($3 + [40]) = (int_64)0
	*($3 + [32]) = (uint_64)$13 >> (uint_64)(int_64)8)
	CALL eosio_assert([1], [9071])
	*((($3 + [32]) + [24])) = $12
	*($3 + [48]) = $11
	*($1 + [56]) = CALL db_idx256_store($7, (int_64)-5001342326804578304, $9, $10, ($3 + [32]), [2])
	$global$0 = ($3 + [64])
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4 + [24])
	$6 = *($4 + [16])
	$7 = *($4 + [8])
	CALL eosio_assert([1], [9071])
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = $7
	CALL eosio_assert([1], [9071])
	*(($2 + [56])) = $6
	*($2 + [48]) = $5
	if ( (CALL $172(*($0 + [8]), ($2 + [32]), [32]) == 0) ){ goto $label$1 }
	$4 = *(*($0 + [12]) + [120])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$2 }
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$4 = CALL db_idx256_find_primary(*($3), *($3 + [8]), (int_64)3607749778918490112, $2, [2], *(*($0 + [16])))
	*(*(($0 + [12])) + [120]) = $4
	
.LABEL $label$2
	CALL db_idx256_update($4, *(*($0 + [20])), ($2 + [32]), [2])
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $121(*($0), $1)
	$0 = *($0)
	$4 = *($0)
	$1 = *($0 + [4])
	*($3 + [16]) = *($1 + [16])
	*($3 + [24]) = *($1 + [8])
	if ( (CALL $172((*($0 + [8]) + [32]), ($3 + [16]), [16]) == 0) ){ goto $label$1 }
	$1 = *((*($0 + [12]) + [124]))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL db_idx128_find_primary(*($4), *($4 + [8]), (int_64)3607749778918490113, $3, *(*($0 + [16])))
	*((*(($0 + [12])) + [124])) = $1
	
.LABEL $label$2
	CALL db_idx128_update($1, *(*($0 + [20])), ($3 + [16]))
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $166($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $132($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $2($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $133($2, $1)
	CALL $135(CALL $134(CALL $134($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$8 = *($1 + [8])
	*($1 + [8]) = [0]
	$10 = *($1)
	*($1) = (int_64)0
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40]))) + [16 align=4]) = $10
	*($7 + [28 align=4]) = (int_64)0
	*($7) = *($2)
	*($7 + [8]) = *($3)
	*(($7 + [24])) = $8
	*(($7 + [36])) = [0]
	CALL $2(($7 + [28]), [32])
	$1 = *(($7 + [32]))
	$2 = *($7 + [28])
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$12 = ($7 + [40])
	CALL $131(($5 + [24]), ($5 + [16]))
	$1 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$6 }
	$13 = ($1 - $8)
	$6 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $6)
	*((($1 = ($7 + $6)) + [-32])) = *(($9 + [-32]))
	*(($1 + [-40])) = *(($9 + [-40]))
	*(($2 = ($1 + [-24]))) = (int_64)0
	*(($3 = ($1 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($2) = *($4)
	$2 = ($9 + [-16])
	*($3) = *($2)
	*($2) = [0]
	*(($2 = ($1 + [-12]))) = (int_64)0
	*(($1 = ($1 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($2) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($1) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$6 = ($6 + [-40])
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$7 }
	$7 = ($7 + $6)
	$1 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $1
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($1 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($1 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($1 + [-40])
	$6 = *(($1 + [-24]))
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [-20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	$1 = $9
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $179($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [10246])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$14($2), [10270])
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [104])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $8)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$9 = CALL $67(($5 + [72]), $8, [10296])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $12
	$7 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9237])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [10315])
	CALL eosio_assert(((int_64)$6 == (int_64)*($9 + [8])), [9283])
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [10217])
	$11 = CALL has_auth($2)
	CALL $64($0)
	$7 = ($3 + [8])
	$12 = *($7)
	*((($5 + [56]) + [8])) = $12
	$8 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $8
	*($5 + [56]) = $8
	CALL $40($0, $1, ($5 + [24]))
	$12 = *($7)
	*((($5 + [40]) + [8])) = $12
	$8 = *($3)
	*((($5 + [8]) + [8])) = $12
	*($5 + [8]) = $8
	*($5 + [40]) = $8
	CALL $51($0, $2, ($5 + [8]), ( $2 ? $1 : $11 ))
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$11 }
	$11 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$11 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $65(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $66(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $179($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [10197])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [10217])
	$9 = [0]
	*(($4 + [168])) = [0]
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$7 = *($0)
	*($4 + [136]) = $7
	*($4 + [144]) = $6
	$11 = [0]
	$5 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $57(($4 + [136]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [136])), [8670])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9177])
	CALL require_auth(*($11 + [32]))
	$12 = ($2 + [8])
	$13 = *($12)
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$7 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$13 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$9
	CALL eosio_assert($9, [9237])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [9254])
	CALL eosio_assert(((int_64)$13 == (int_64)*($11 + [8])), [9283])
	CALL eosio_assert(((int_64)$6 <= (int_64))(*($11 + [16]) - *($11))), [9309])
	*($4 + [32]) = $2
	CALL $63(($4 + [136]), $11, (int_64)0, ($4 + [32]))
	$5 = ($11 + [32])
	$7 = *($5)
	*(($9 = (($4 + [120]) + [8]))) = *($12)
	$8 = *($2)
	*((($4 + [16]) + [8])) = *($9)
	*($4 + [120]) = $8
	*($4 + [16]) = *($4 + [120])
	CALL $51($0, $7, ($4 + [16]), $7)
	CALL $64($0)
	$7 = *($5)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$14 }
	*($4 + [80]) = [8283]
	*($4 + [84]) = CALL $173([8283])
	*($4 + [8]) = *($4 + [80])
	$8 = *(CALL $1(($4 + [32]), ($4 + [8])))
	$6 = *($0)
	*($4 + [80]) = [10119]
	*($4 + [84]) = CALL $173([10119])
	*($4) = *($4 + [80])
	$13 = *(CALL $1(($4 + [32]), $4))
	$14 = *($5)
	*((($4 + [32]) + [24])) = *(($2 + [8]))
	*($4 + [40]) = $1
	*($4 + [32]) = $14
	*($4 + [48]) = *($2)
	$9 = CALL $162((($4 + [32]) + [32]), $3)
	*($4 + [88]) = $13
	*($4 + [80]) = $6
	*(($5 = CALL _Znwj([16]))) = $7
	*($5 + [8]) = $8
	*((($4 + [80]) + [36])) = [0]
	$10 = ($5 + [16])
	*((($4 + [80]) + [24])) = $10
	*(($4 + [100])) = $10
	*($4 + [96]) = $5
	*($4 + [108 align=4]) = (int_64)0
	$5 = *($9)
	$9 = ( *((($4 + [32]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($9 + [32])
	$7 = (CASTING uint_64)(uint_32 $9)
	$9 = ($4 + [108])
	
.LOOP $label$15:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$15 }
	if ( ($5 == 0) ){ goto $label$17 }
	CALL $2($9, $5)
	$9 = *(($4 + [112]))
	$5 = *(($4 + [108]))
	goto $label$16 
	
.LABEL $label$17
	$9 = [0]
	$5 = [0]
	
.LABEL $label$16
	*($4 + [180]) = $5
	*($4 + [176]) = $5
	*($4 + [184]) = $9
	*($4 + [192]) = ($4 + [176])
	*($4 + [200]) = ($4 + [32])
	CALL $56(($4 + [200]), ($4 + [192]))
	CALL $3(($4 + [176]), ($4 + [80]))
	$5 = *($4 + [176])
	CALL send_inline($5, (*($4 + [180]) - $5))
	$5 = *($4 + [176])
	if ( ($5 == 0) ){ goto $label$18 }
	*($4 + [180]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$5 = *($4 + [108])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($4 + [112])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$5 = *($4 + [96])
	if ( ($5 == 0) ){ goto $label$20 }
	*(($4 + [100])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$20
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$14
	$10 = *($4 + [160])
	if ( ($10 == 0) ){ goto $label$21 }
	$11 = ($4 + [164])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$25 }
	CALL _ZdlPv($9)
	
.LABEL $label$25
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($4 + [160]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $10
	
.LABEL $label$22
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$global$0 = ($4 + [208])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [40]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8744])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8744])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $179($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL require_auth(*($1 + [48]))
	*(($2 + [80])) = [0]
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	*($2 + [84]) = [0]
	$3 = *($0)
	*($2 + [48]) = $3
	*($2 + [56]) = $3
	$3 = *($1 + [48])
	$4 = *($1 + [40])
	$5 = *($1 + [32])
	$6 = [1]
	CALL eosio_assert([1], [9071])
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = $5
	CALL eosio_assert([1], [9071])
	*(($2 + [40])) = $4
	*($2 + [32]) = $3
	*($2 + [8]) = ($2 + [48])
	CALL $76(($2 + [88]), ($2 + [8]), ($2 + [16]))
	$0 = *($2 + [92])
	if ( ($0 == 0) ){ goto $label$1 }
	$4 = *($0 + [48])
	$5 = *($0 + [40])
	$3 = *($0 + [32])
	$6 = [1]
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	if ( ((int_64)((int_64)((int_64)$3 ^ (int_64)*($2 + [16])) | (int_64)*($2 + [24])) != (int_64)0) ){ goto $label$1 }
	if ( ((int_64)((int_64)((int_64)*(($2 + [32])) ^ (int_64)$4) | (int_64)((int_64)*(($2 + [40])) ^ (int_64)$5)) != (int_64)0) ){ goto $label$1 }
	$6 = (*($2 + [92]) == 0)
	
.LABEL $label$1
	CALL eosio_assert($6, [10576])
	$0 = CALL $173([10570])
	if ( ($0 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8447])
	goto $label$4 
	
.LABEL $label$5
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($0 + [10569]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$7
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$6 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$2 
	
.LABEL $label$3
	$3 = (int_64)4
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*(($1 + [64])) == (int_64)$3), [10591])
	$3 = *(($1 + [48]))
	*($2 + [92]) = $1
	*($2 + [88]) = ($2 + [48])
	CALL $77($2, ($2 + [48]), $3, ($2 + [88]))
	$1 = *($2 + [72])
	if ( ($1 == 0) ){ goto $label$8 }
	$7 = (($2 + [48]) + [28])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($0 + [28])))
	
.LABEL $label$13
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($0 + [16])))
	
.LABEL $label$14
	CALL _ZdlPv($0)
	
.LABEL $label$12
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$11 }
	$0 = *(($2 + [72]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $1
	
.LABEL $label$9
	*($7) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($2 + [96])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memset(($4 + [72]), [0], [104])
	*(($4 + [88])) = (int_64)0
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [136])) = (int_64)0
	*(($4 + [160])) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [176]) = ($4 + [56])
	$8 = (($4 + [72]) + [32])
	*($4 + [292]) = $8
	*($4 + [296]) = ($4 + [112])
	*($4 + [300]) = ($4 + [120])
	*($4 + [304]) = ($4 + [128])
	*($4 + [308]) = ($4 + [144])
	*($4 + [312]) = ($4 + [152])
	*($4 + [316]) = ($4 + [168])
	*($4 + [320]) = ($4 + [172])
	*($4 + [280]) = ($4 + [72])
	$9 = (($4 + [72]) + [20])
	*($4 + [288]) = $9
	$10 = (($4 + [72]) + [8])
	*($4 + [284]) = $10
	CALL $75(($4 + [280]), ($4 + [176]))
	*(($11 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($3 = (($4 + [176]) + [8]))) = *($11)
	*($4 + [176]) = *($4 + [8])
	$11 = *($3)
	*((($4 + [280]) + [8])) = $11
	*((($4 + [24]) + [24])) = $11
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [176])
	*($4 + [40]) = $0
	*($4 + [280]) = $0
	*($4 + [176]) = *($4 + [72])
	$3 = CALL $162($3, $10)
	$9 = CALL $162((($4 + [176]) + [20]), $9)
	$10 = CALL memcpy((($4 + [176]) + [32]), $8, [69])
	$8 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	*($4 + [280]) = *($4 + [176])
	$11 = CALL $162(($4 + [288]), $3)
	$5 = CALL $162(($4 + [300]), $9)
	CALL memcpy(($4 + [312]), $10, [69])
	CALL void $8((int_32 ($4 + [280])), (int_32 $6))
	if ( (*($5) & [1]) ){ goto $label$13 }
	if ( (*($11) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [308])))
	if ( ((*($11) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [296])))
	$5 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = [1]
	if ( (*($9) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3) & $5) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [204])))
	if ( ((*($3) & $5) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [192])))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $179($2)
	
.LABEL $label$5
	if ( ((*(($4 + [92])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [100])))
	
.LABEL $label$14
	if ( ((*(($4 + [80])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$15
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [224])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	*($2 + [184]) = $3
	*(($2 + [176])) = [0]
	*($2 + [152]) = $1
	*($2 + [160]) = (int_64)-1
	$4 = (int_64)0
	*($2 + [168]) = (int_64)0
	*($2 + [144]) = *($0)
	$5 = CALL $173([8192])
	if ( ($5 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [8447])
	goto $label$2 
	
.LABEL $label$3
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = (int_64)0
	
.LOOP $label$4:
	$6 = *(($5 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$5
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$4 }
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	
.LABEL $label$1
	CALL $54(($2 + [136]), ($2 + [144]), $4)
	CALL eosio_assert(((int_32)*($2 + [140]) != (int_32)[0]), [10068])
	CALL eosio_assert((uint_64)(((int_64)*(*($2 + [140]) + [16]) + (int_64)86400000) <= $3), [10087])
	*($2 + [128]) = (int_64)0
	*($2 + [120]) = (int_64)0
	$5 = *($2 + [140])
	*($2 + [36]) = ($2 + [184])
	*($2 + [32]) = ($2 + [120])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8800])
	CALL $55(($2 + [144]), $5, (int_64)0, ($2 + [32]))
	$4 = *($0)
	*($2 + [80]) = [8283]
	*($2 + [84]) = CALL $173([8283])
	*($2 + [8]) = *($2 + [80])
	$3 = *(CALL $1(($2 + [32]), ($2 + [8])))
	$7 = *($0)
	*($2 + [80]) = [10119]
	*($2 + [84]) = CALL $173([10119])
	*($2) = *($2 + [80])
	$8 = *(CALL $1(($2 + [32]), $2))
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$5 = CALL $173([10128])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$12 }
	*($2 + [16]) = ($5 << [1])
	$6 = (($2 + [16]) | [1])
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$9 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($2 + [16]) = ($9 | [1])
	*($2 + [24]) = $6
	*($2 + [20]) = $5
	
.LABEL $label$11
	CALL memcpy($6, [10128], $5)
	
.LABEL $label$10
	*(($6 + $5)) = [0]
	*((($2 + [32]) + [24])) = *((($2 + [120]) + [8]))
	$5 = (($2 + [16]) + [8])
	*(($2 + [72])) = *($5)
	*($5) = [0]
	*($2 + [40]) = $1
	*($2 + [80]) = $7
	*($2 + [88]) = $8
	*($2 + [32]) = *($0)
	*($2 + [48]) = *($2 + [120])
	*($2 + [64]) = *($2 + [16])
	*($2 + [16]) = (int_64)0
	*(($5 = CALL _Znwj([16]))) = $4
	*($5 + [8]) = $3
	*((($2 + [80]) + [36])) = [0]
	$6 = ($5 + [16])
	*((($2 + [80]) + [24])) = $6
	*(($2 + [100])) = $6
	*($2 + [96]) = $5
	*($2 + [108 align=4]) = (int_64)0
	$5 = *($2 + [64])
	$6 = ( *((($2 + [32]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [32])
	$4 = (CASTING uint_64)(uint_32 $6)
	$6 = ($2 + [108])
	
.LOOP $label$13:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$13 }
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $2($6, $5)
	$6 = *(($2 + [112]))
	$5 = *(($2 + [108]))
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	$5 = [0]
	
.LABEL $label$14
	*($2 + [196]) = $5
	*($2 + [192]) = $5
	*($2 + [200]) = $6
	*($2 + [208]) = ($2 + [192])
	*($2 + [216]) = ($2 + [32])
	CALL $56(($2 + [216]), ($2 + [208]))
	CALL $3(($2 + [192]), ($2 + [80]))
	$5 = *($2 + [192])
	CALL send_inline($5, (*($2 + [196]) - $5))
	$5 = *($2 + [192])
	if ( ($5 == 0) ){ goto $label$16 }
	*($2 + [196]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($2 + [108])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($2 + [112])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$5 = *($2 + [96])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($2 + [100])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( (*(($2 + [64])) & [1]) ){ goto $label$20 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$19 }
	goto $label$8 
	
.LABEL $label$20
	CALL _ZdlPv(*(($2 + [72])))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$19
	CALL _ZdlPv(*(($2 + [24])))
	$0 = *($2 + [168])
	if ( ($0 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	CALL $161(($2 + [16]))
	
.LABEL $label$8
	$0 = *($2 + [168])
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$6
	$9 = ($2 + [172])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$22 }
	
.LOOP $label$23:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$24 }
	CALL _ZdlPv($6)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$23 }
	$5 = *(($2 + [168]))
	goto $label$21 
	
.LABEL $label$22
	$5 = $0
	
.LABEL $label$21
	*($9) = $0
	CALL _ZdlPv($5)
	$global$0 = ($2 + [224])
	(unreachable)
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [64]) + [16]))) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [64]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8744])
	CALL memcpy((($4 + [64]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8744])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [52]) = ($2 + [24])
	CALL $61(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $62(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $179($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [0]
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	$6 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [10197])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$7 }
	$4 = uint_32($4 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$4 = *($2 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($4 <= [257]), [10217])
	$8 = [0]
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$6 = *($0)
	*($3 + [40]) = $6
	*($3 + [48]) = $5
	$2 = [0]
	$4 = CALL db_find_i64($6, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$2 = CALL $57(($3 + [40]), $4)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)($3 + [40])), [8670])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8637])
	CALL require_auth(*($2 + [32]))
	$10 = ($1 + [8])
	$5 = *($10)
	$11 = *($1)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$6 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$6 = $7
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$13 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$9
	CALL eosio_assert($8, [9237])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [10540])
	CALL eosio_assert(((int_64)$5 == (int_64)*($2 + [8])), [9283])
	*($3 + [32]) = $1
	CALL $72(($3 + [40]), $2, (int_64)0, ($3 + [32]))
	$6 = *(($2 + [32]))
	*(($4 = (($3 + [16]) + [8]))) = *($10)
	$7 = *($1)
	*(($3 + [8])) = *($4)
	*($3 + [16]) = $7
	*($3) = *($3 + [16])
	CALL $40($0, $6, $3)
	$9 = *($3 + [64])
	if ( ($9 == 0) ){ goto $label$14 }
	$2 = ($3 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$17 }
	$4 = *(($3 + [64]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $9
	
.LABEL $label$15
	*($2) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$global$0 = ($3 + [80])
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [256])
	$global$0 = $4
	*($4 + [192]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$2 = *($1 + [24])
	$5 = *($1 + [8])
	$6 = *($1 + [16])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	*((($4 + [144]) + [24])) = $6
	*(($4 + [184])) = *($1 + [8])
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = $5
	*($4 + [160]) = $2
	*($4 + [176]) = *($1 + [16])
	$2 = *($1)
	*($4 + [136]) = $2
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [8991])
	$5 = ((int_64)*($1 + [48]) + (int_64)*($3))
	*($1 + [48]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9034])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [9053])
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [8932])
	*($4 + [128]) = ($4 + [112])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	*($4 + [200]) = ($4 + [120])
	*($4 + [212]) = ($1 + [8])
	*($4 + [208]) = $1
	*($4 + [216]) = ($1 + [16])
	*($4 + [220]) = ($1 + [24])
	*($4 + [224]) = ($1 + [32])
	*($4 + [228]) = ($1 + [48])
	*($4 + [232]) = ($1 + [64])
	*($4 + [236]) = ($1 + [72])
	*($4 + [240]) = ($1 + [80])
	*($4 + [244]) = ($1 + [88])
	*($4 + [248]) = ($1 + [96])
	*($4 + [252]) = ($1 + [104])
	CALL $111(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($1 + [116]), *($4 + [192]), $4, [112])
	$3 = ($0 + [36])
	$2 = *($4 + [136])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [212]) = $1
	*($4 + [208]) = $0
	*($4 + [220]) = $1
	*($4 + [216]) = ($4 + [144])
	*($4 + [224]) = ($4 + [136])
	*($4 + [228]) = ($4 + [192])
	*($4 + [200]) = ($4 + [208])
	CALL $120(($4 + [200]), $3, ($3 + [1]))
	$global$0 = ($4 + [256])
}

int_32 .FUNC $117 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8670])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $68($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8670])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $115(*($0), $1)
	$0 = *($0)
	$4 = *($0)
	$1 = *($0 + [4])
	*($3 + [16]) = *($1 + [16])
	*($3 + [24]) = *($1 + [8])
	if ( (CALL $172((*($0 + [8]) + [32]), ($3 + [16]), [16]) == 0) ){ goto $label$1 }
	$1 = *((*($0 + [12]) + [124]))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL db_idx128_find_primary(*($4), *($4 + [8]), (int_64)3607749778918490113, $3, *(*($0 + [16])))
	*((*(($0 + [12])) + [124])) = $1
	
.LABEL $label$2
	CALL db_idx128_update($1, *(*($0 + [20])), ($3 + [16]))
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4 + [24])
	$6 = *($4 + [16])
	$7 = *($4 + [8])
	CALL eosio_assert([1], [9071])
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = $7
	CALL eosio_assert([1], [9071])
	*(($2 + [56])) = $6
	*($2 + [48]) = $5
	if ( (CALL $172(*($0 + [8]), ($2 + [32]), [32]) == 0) ){ goto $label$1 }
	$4 = *(*($0 + [12]) + [120])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$2 }
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$4 = CALL db_idx256_find_primary(*($3), *($3 + [8]), (int_64)3607749778918490112, $2, [2], *(*($0 + [16])))
	*(*(($0 + [12])) + [120]) = $4
	
.LABEL $label$2
	CALL db_idx256_update($4, *(*($0 + [20])), ($2 + [32]), [2])
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $113(*($0), $1)
	$0 = *($0)
	$4 = *($0)
	$1 = *($0 + [4])
	*($3 + [16]) = *($1 + [16])
	*($3 + [24]) = *($1 + [8])
	if ( (CALL $172((*($0 + [8]) + [32]), ($3 + [16]), [16]) == 0) ){ goto $label$1 }
	$1 = *((*($0 + [12]) + [124]))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL db_idx128_find_primary(*($4), *($4 + [8]), (int_64)3607749778918490113, $3, *(*($0 + [16])))
	*((*(($0 + [12])) + [124])) = $1
	
.LABEL $label$2
	CALL db_idx128_update($1, *(*($0 + [20])), ($3 + [16]))
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4 + [24])
	$6 = *($4 + [16])
	$7 = *($4 + [8])
	CALL eosio_assert([1], [9071])
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = $7
	CALL eosio_assert([1], [9071])
	*(($2 + [56])) = $6
	*($2 + [48]) = $5
	if ( (CALL $172(*($0 + [8]), ($2 + [32]), [32]) == 0) ){ goto $label$1 }
	$4 = *(*($0 + [12]) + [120])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$2 }
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$4 = CALL db_idx256_find_primary(*($3), *($3 + [8]), (int_64)3607749778918490112, $2, [2], *(*($0 + [16])))
	*(*(($0 + [12])) + [120]) = $4
	
.LABEL $label$2
	CALL db_idx256_update($4, *(*($0 + [20])), ($2 + [32]), [2])
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8545])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9405])
	$6 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9453])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9475])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8932])
	CALL eosio_assert([1], [8545])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [8545])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8835])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [8881])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [8991])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9034])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9053])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8932])
	*($4 + [48]) = ($4 + [32])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [24])
	CALL $95(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($1 + [32])
	CALL require_auth($3)
	$4 = *($1 + [24])
	$5 = *($1 + [16])
	*(($6 = (($2 + [32]) + [8]))) = *(($1 + [8]))
	*($2 + [32]) = *($1)
	CALL require_recipient($5)
	CALL require_recipient($3)
	CALL require_recipient($4)
	*(($7 = (($2 + [16]) + [8]))) = *($6)
	*($2 + [16]) = *($2 + [32])
	*(($6 = (($2 + [48]) + [8]))) = *($7)
	*($2 + [48]) = *($2 + [16])
	CALL $35($0, $4, $5, $3)
	$8 = *($6)
	*((($2 + [64]) + [8])) = $8
	*(($2 + [8])) = $8
	$8 = *($2 + [48])
	*($2) = $8
	*($2 + [64]) = $8
	*($1 + [48]) = CALL $36($0, $4, $3, $5, $2)
	CALL prints([8551])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8553])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [58]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8561])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8565])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8567])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [58]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8573])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8565])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8586])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [58]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL printn($4)
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8565])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8592])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [58]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL printn(*($1 + [32]))
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8565])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8600])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [58]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL printn(*($1 + [16]))
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8565])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8609])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [58]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL $37($1)
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8565])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8618])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [58]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints(( [9500] ? [9505] : *($1 + [48]) ))
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8565])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8626])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [58]
	CALL prints_l(($2 + [64]), [1])
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL printn(*($1 + [40]))
	*($2 + [64]) = [34]
	CALL prints_l(($2 + [64]), [1])
	CALL prints([8634])
	$global$0 = ($2 + [80])
}

int_32 .FUNC $28 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [120]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [160]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $38(($4 + [40]), ($4 + [160]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	*(($3 = (($4 + [144]) + [8]))) = *($9)
	*($4 + [144]) = *($4 + [24])
	$9 = *($3)
	*((($4 + [160]) + [8])) = $9
	*(($4 + [64])) = $9
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [144])
	*($4 + [56]) = $0
	*($4 + [160]) = $0
	*(($9 = (($4 + [128]) + [8]))) = *($8)
	*($4 + [128]) = *($4 + [112])
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	$10 = *($4 + [88])
	*($3) = *($9)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $11
	*((($4 + [8]) + [8])) = $11
	$11 = *($4 + [144])
	*($4 + [8]) = $11
	*($4 + [160]) = $11
	CALL void $3((int_32 $10), (int_64 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $179($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$4 = *($0)
	*($3) = $4
	$0 = [0]
	$5 = CALL db_find_i64($4, $1, (int_64)3607749779137757184, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $68($3, $5)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$3), [8670])
	
.LABEL $label$1
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [10418])
	CALL eosio_assert((int_64)(*($0) == 0), [10494])
	CALL eosio_assert($5, [9856])
	CALL eosio_assert($5, [9890])
	$5 = CALL db_next_i64(*($0 + [20]), ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $68($3, $5)
	
.LABEL $label$2
	CALL $70($3, $0)
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($3 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8744])
	CALL memcpy(($4 + [24]), ($2 + [8]), [8])
	*($4 + [60]) = ($2 + [16])
	*($4 + [80]) = *($4 + [24])
	CALL $61(($4 + [56]), (($4 + [72]) + [16]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $71(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $179($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL require_auth($3)
	*((($4 + [56]) + [32])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [56]) = *($0)
	*($4 + [64]) = $2
	$5 = CALL $67(($4 + [56]), $2, [10347])
	CALL eosio_assert(((int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8) == (int_64)$2), [9283])
	*((($4 + [16]) + [32])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$6 = *($0)
	*($4 + [16]) = $6
	*($4 + [24]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $68(($4 + [16]), $0) + [16]) == (int_32)($4 + [16])), [8670])
	$7 = *($4 + [40])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [8]) = $5
	CALL $69($4, ($4 + [16]), $3, ($4 + [8]))
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [44])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$8 }
	$8 = ($4 + [84])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($4 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $7
	
.LABEL $label$9
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($4 + [96])
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [32]), $2, [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8744])
	CALL memcpy($4, ($2 + [8]), [8])
	$8 = *($4)
	*($4 + [40]) = $8
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $8), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $179($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [272])
	$global$0 = $5
	CALL require_recipient($2)
	CALL require_recipient($3)
	$6 = CALL current_time()
	*(($5 + [256])) = [0]
	*($5 + [232]) = $1
	*($5 + [240]) = (int_64)-1
	*($5 + [248]) = (int_64)0
	*($5 + [260]) = [0]
	*($5 + [224]) = *($0)
	CALL eosio_assert([1], [9071])
	*($5 + [200]) = (int_64)0
	*($5 + [192]) = $4
	CALL eosio_assert([1], [9071])
	*(($5 + [216])) = $3
	*($5 + [208]) = $2
	$6 = ((uint_64)$6 / (uint_64)(int_64)1000)
	*($5 + [184]) = ($5 + [224])
	CALL $43(($5 + [144]), ($5 + [184]), ($5 + [192]))
	$7 = ($5 + [184])
	$8 = *($5 + [148])
	if ( ($8 == 0) ){ goto $label$2 }
	$9 = *(($8 + [16]))
	$10 = *($8 + [24])
	$11 = *($8 + [32])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	if ( ((int_64)((int_64)((int_64)*($5 + [192]) ^ (int_64)(uint_64)$9 >> (uint_64)(int_64)8)) | (int_64)*($5 + [200])) != (int_64)0) ){ goto $label$2 }
	$12 = [0]
	if ( ((int_64)((int_64)((int_64)*((($5 + [192]) + [16])) ^ (int_64)$10) | (int_64)((int_64)*(($5 + [216])) ^ (int_64)$11)) != (int_64)0) ){ goto $label$1 }
	$12 = *($5 + [148])
	$7 = *($5 + [144])
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [9769])
	CALL $35($0, $1, $2, $3)
	$9 = *($12 + [40])
	if ( (uint_64)($9 <= $6) ){ goto $label$5 }
	$6 = (int_64)
	if ( (uint_64)($6($9 - $6)) <= (int_64)1000) ){ goto $label$5 }
	CALL $46($0, (CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000)), $1, $2, $3, $4)
	$12 = *($5 + [248])
	if ( $12 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = *(($12 + [16]))
	$10 = *($12 + [8])
	$4 = *($0)
	$8 = CALL $173([8192])
	if ( ($8 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8447])
	goto $label$8 
	
.LABEL $label$9
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = (int_64)0
	
.LOOP $label$10:
	$13 = *(($8 + [8191]))
	if ( ((($13 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$11
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$10 }
	$6 = ((int_64)$6 & (int_64)72057594037927935)
	goto $label$6 
	
.LABEL $label$7
	$6 = (int_64)0
	
.LABEL $label$6
	*(($5 + [176])) = [0]
	*($5 + [152]) = $6
	*($5 + [144]) = $4
	*($5 + [160]) = (int_64)-1
	*($5 + [168]) = (int_64)0
	*($5 + [180]) = [0]
	CALL eosio_assert([1], [9071])
	*($5 + [120]) = (int_64)0
	*($5 + [112]) = $1
	CALL eosio_assert([1], [9071])
	*(($5 + [136])) = $3
	*($5 + [128]) = $2
	*($5 + [104]) = ($5 + [144])
	CALL $48(($5 + [264]), ($5 + [104]), ($5 + [112]))
	$8 = *($5 + [268])
	if ( ($8 == 0) ){ goto $label$12 }
	$4 = *($8 + [24])
	$11 = *($8 + [16])
	$6 = *($8 + [8])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	if ( ((int_64)((int_64)((int_64)$6 ^ (int_64)*($5 + [112])) | (int_64)*($5 + [120])) != (int_64)0) ){ goto $label$12 }
	if ( ((int_64)(((int_64)((int_64)*(($5 + [128])) ^ (int_64)$4) | (int_64)((int_64)*(($5 + [136])) ^ (int_64)$11)) == 0) == 0) ){ goto $label$12 }
	$8 = *($5 + [268])
	if ( ($8 == 0) ){ goto $label$12 }
	$13 = ($8 + [56])
	CALL eosio_assert(((int_64)$9 == (int_64)*($13)), [9118])
	$6 = *($8 + [48])
	if ( ((int_64)$10 <= (int_64)$6) ){ goto $label$13 }
	$9 = *($13)
	$10 = $6
	
.LABEL $label$13
	*((($5 + [40]) + [8])) = $9
	*($5 + [96]) = $9
	*($5 + [40]) = $10
	*($5 + [88]) = $10
	CALL $49($0, $1, $3, $2, ($5 + [40]))
	*((($5 + [24]) + [8])) = $9
	*($5 + [80]) = $9
	*($5 + [24]) = $10
	*($5 + [72]) = $10
	CALL $50($0, ($5 + [24]))
	*((($5 + [8]) + [8])) = $9
	*($5 + [64]) = $9
	*($5 + [8]) = $10
	*($5 + [56]) = $10
	CALL $51($0, $1, ($5 + [8]), $1)
	
.LABEL $label$12
	*($5 + [264]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $7))
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [9856])
	CALL $52(($5 + [264]))
	CALL $53(*($5 + [184]), $12)
	$12 = *($5 + [168])
	if ( ($12 == 0) ){ goto $label$14 }
	$0 = ($5 + [172])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$16 }
	
.LOOP $label$17:
	$8 = ($8 + [-24])
	$13 = *($8)
	*($8) = [0]
	if ( ($13 == 0) ){ goto $label$18 }
	CALL _ZdlPv($13)
	
.LABEL $label$18
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$17 }
	$8 = *(($5 + [168]))
	goto $label$15 
	
.LABEL $label$16
	$8 = $12
	
.LABEL $label$15
	*($0) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$12 = *($5 + [248])
	if ( ($12 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$0 = ($5 + [252])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$20 }
	
.LOOP $label$21:
	$8 = ($8 + [-24])
	$13 = *($8)
	*($8) = [0]
	if ( ($13 == 0) ){ goto $label$22 }
	CALL _ZdlPv($13)
	
.LABEL $label$22
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$21 }
	$8 = *(($5 + [248]))
	goto $label$19 
	
.LABEL $label$20
	$8 = $12
	
.LABEL $label$19
	*($0) = $12
	CALL _ZdlPv($8)
	$global$0 = ($5 + [272])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [272])
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [40]), $2, [8])
	*($4 + [8]) = (int_64)0
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8744])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	*($4 + [48]) = *($4 + [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8744])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $179($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [128]) = $3
	*($5 + [136]) = $2
	CALL require_auth($1)
	CALL require_recipient($2)
	CALL require_recipient($3)
	CALL $35($0, $1, $2, $3)
	$6 = CALL current_time()
	$6 = ((uint_64)$6 / (uint_64)(int_64)1000)
	*($5 + [120]) = ((int_64)CALL $42($0, $1, $2, $3) + (int_64)$6)
	*(($5 + [112])) = [0]
	*($5 + [88]) = $1
	*($5 + [96]) = (int_64)-1
	*($5 + [104]) = (int_64)0
	*($5 + [116]) = [0]
	*($5 + [80]) = *($0)
	$7 = *($4 + [8])
	CALL eosio_assert([1], [9071])
	*($5 + [56]) = (int_64)0
	*($5 + [48]) = (uint_64)$7 >> (uint_64)(int_64)8)
	CALL eosio_assert([1], [9071])
	*(($5 + [72])) = $3
	*($5 + [64]) = $2
	*($5 + [40]) = ($5 + [80])
	CALL $43(($5 + [16]), ($5 + [40]), ($5 + [48]))
	$8 = *($5 + [20])
	if ( ($8 == 0) ){ goto $label$2 }
	$2 = *(($8 + [16]))
	$3 = *($8 + [24])
	$7 = *($8 + [32])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	if ( ((int_64)((int_64)((int_64)*($5 + [48]) ^ (int_64)(uint_64)$2 >> (uint_64)(int_64)8)) | (int_64)*($5 + [56])) != (int_64)0) ){ goto $label$2 }
	if ( ((int_64)(((int_64)((int_64)*((($5 + [48]) + [16])) ^ (int_64)$3) | (int_64)((int_64)*(($5 + [72])) ^ (int_64)$7)) == 0) == 0) ){ goto $label$2 }
	$8 = *($5 + [20])
	if ( ($8 == 0) ){ goto $label$2 }
	*($5 + [20]) = $4
	*($5 + [16]) = ($5 + [120])
	CALL eosio_assert([1], [8800])
	CALL $44(*($5 + [40]), $8, (int_64)0, ($5 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [24]) = $4
	*($5 + [20]) = ($5 + [120])
	*($5 + [16]) = ($5 + [80])
	*($5 + [28]) = ($5 + [136])
	*($5 + [32]) = ($5 + [128])
	CALL $45(($5 + [8]), ($5 + [80]), $1, ($5 + [16]))
	
.LABEL $label$1
	$2 = *($5 + [120])
	$3 = (int_64)
	CALL $46($0, ( [1] ? ( [1] ? (CASTING uint_32)(uint_64 ((uint_64)$3($2 - $6)) / (uint_64)(int_64)1000)) : (uint_64)($3 <= (int_64)1000) ) : (uint_64)($2 <= $6) ), $1, *($5 + [136]), *($5 + [128]), (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8))
	$8 = *($5 + [104])
	if ( ($8 == 0) ){ goto $label$3 }
	$9 = ($5 + [108])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [104]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $8
	
.LABEL $label$4
	*($9) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($5 + [144])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [112]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $47(($4 + [16]), ($4 + [112]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4)
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	$10 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $179($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $176($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [112]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [72])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [88])
	*($3 + [72]) = ($5 + [96])
	*($3 + [76]) = ($5 + [104])
	CALL $101(($3 + [32]), ($3 + [24]))
	*($5 + [116]) = $1
	*($5 + [120 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $102(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $179($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $176($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([120])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [104]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [20])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [72])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [100])
	CALL $75(($3 + [32]), ($3 + [24]))
	*($5 + [112]) = [-1]
	*($5 + [108]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $179($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9114])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $2($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8744])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [8]))) = *(($4 + [8]))
	CALL eosio_assert([1], [8545])
	CALL memcpy($2, $1, [8])
	*($2 + [24]) = *($5)
	CALL eosio_assert([1], [8545])
	CALL memcpy(($2 | [8]), ($2 + [24]), [8])
	CALL eosio_assert([1], [8545])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	$4 = CALL $173([8192])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($4 + [8191]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$6 = ((int_64)$6 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LABEL $label$1
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-4992121834821386240, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$7 }
	*(($3 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($2 + [32])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [8721])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$2 = CALL $176($6)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $6)
	$7 = (int_64)0
	*(($4 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [24]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [8744])
	CALL memcpy($4, $2, [8])
	*($3 + [24]) = (int_64)0
	$5 = ($6 & [-8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [8744])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	*($4 + [8]) = *($3 + [24])
	CALL eosio_assert(((int_32)$5 != (int_32)[16]), [8744])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($4 + [28]) = $1
	*($3 + [16]) = $4
	$5 = CALL $173([8192])
	if ( ($5 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8447])
	goto $label$8 
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = (int_64)0
	
.LOOP $label$10:
	$1 = *(($5 + [8191]))
	if ( ((($1 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$10 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	$1 = *($3 + [16])
	goto $label$6 
	
.LABEL $label$7
	$1 = $4
	
.LABEL $label$6
	*($3 + [24]) = $7
	$8 = *($1 + [28])
	*($3 + [12]) = $8
	$9 = ($0 + [28])
	$5 = *($9)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $8
	*($3 + [16]) = [0]
	*($5) = $1
	*($9) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $110(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $179($2)
	
.LABEL $label$12
	$5 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [24]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($1 + [4]), [8])
	*(($4 + [32])) = *($2 + [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = *($0)
	$0 = CALL $173([8192])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($0 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	*(($5 + [80])) = [0]
	*($5 + [56]) = $7
	*($5 + [48]) = $6
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	*($5 + [84]) = [0]
	CALL eosio_assert([1], [9071])
	*($5 + [24]) = (int_64)0
	*($5 + [16]) = $1
	CALL eosio_assert([1], [9071])
	*(($5 + [40])) = $2
	*($5 + [32]) = $3
	*($5 + [8]) = ($5 + [48])
	CALL $48(($5 + [88]), ($5 + [8]), ($5 + [16]))
	$0 = [0]
	$8 = *($5 + [92])
	if ( ($8 == 0) ){ goto $label$7 }
	$1 = *($8 + [24])
	$2 = *($8 + [16])
	$7 = *($8 + [8])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	$0 = [0]
	if ( ((int_64)((int_64)((int_64)$7 ^ (int_64)*($5 + [16])) | (int_64)*($5 + [24])) != (int_64)0) ){ goto $label$7 }
	$0 = [0]
	if ( ((int_64)((int_64)((int_64)*(($5 + [32])) ^ (int_64)$1) | (int_64)((int_64)*(($5 + [40])) ^ (int_64)$2)) != (int_64)0) ){ goto $label$7 }
	$0 = *($5 + [92])
	
.LABEL $label$7
	$8 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($8, [9511])
	*($5 + [88]) = $4
	CALL eosio_assert($8, [8800])
	CALL $116(*($5 + [8]), $0, (int_64)0, ($5 + [88]))
	$4 = *($5 + [72])
	if ( ($4 == 0) ){ goto $label$8 }
	$9 = ($5 + [76])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$12 }
	CALL _ZdlPv($8)
	
.LABEL $label$12
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($5 + [72]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $4
	
.LABEL $label$9
	*($9) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($5 + [96])
}

int_32 .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = *($0)
	$0 = CALL $173([8192])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8447])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($0 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	$9 = [0]
	*(($5 + [80])) = [0]
	*($5 + [56]) = $7
	*($5 + [48]) = $6
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	*($5 + [84]) = [0]
	CALL eosio_assert([1], [9071])
	*($5 + [24]) = (int_64)0
	*($5 + [16]) = $1
	CALL eosio_assert([1], [9071])
	*(($5 + [40])) = $2
	*($5 + [32]) = $3
	*($5 + [8]) = ($5 + [48])
	CALL $48(($5 + [88]), ($5 + [8]), ($5 + [16]))
	$0 = [0]
	$8 = *($5 + [92])
	if ( ($8 == 0) ){ goto $label$7 }
	$1 = *($8 + [24])
	$2 = *($8 + [16])
	$7 = *($8 + [8])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	$0 = [0]
	if ( ((int_64)((int_64)((int_64)$7 ^ (int_64)*($5 + [16])) | (int_64)*($5 + [24])) != (int_64)0) ){ goto $label$7 }
	$0 = [0]
	if ( ((int_64)((int_64)((int_64)*(($5 + [32])) ^ (int_64)$1) | (int_64)((int_64)*(($5 + [40])) ^ (int_64)$2)) != (int_64)0) ){ goto $label$7 }
	$0 = *($5 + [92])
	
.LABEL $label$7
	$10 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($10, [9343])
	$7 = *($4 + [8])
	$8 = ($0 + [40])
	CALL eosio_assert(((int_64)*($8) == (int_64)$7), [9118])
	$1 = *($4)
	CALL eosio_assert(((int_64)*($0 + [32]) >= (int_64)$1), [9370])
	CALL eosio_assert(((int_64)$7 == (int_64)*($8)), [9118])
	if ( ((int_64)*($0 + [32]) < (int_64)$1) ){ goto $label$8 }
	*($5 + [88]) = $4
	CALL eosio_assert($10, [8800])
	CALL $87(*($5 + [8]), $0, (int_64)0, ($5 + [88]))
	$9 = [1]
	
.LABEL $label$8
	$4 = *($5 + [72])
	if ( ($4 == 0) ){ goto $label$9 }
	$10 = ($5 + [76])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$13 }
	CALL _ZdlPv($8)
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($5 + [72]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $4
	
.LABEL $label$10
	*($10) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$global$0 = ($5 + [96])
	return $9
}

void .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = *($0 + [8])
	$4 = (CASTING uint_32)(uint_64 $3)
	$5 = ((int_64)$3 & (int_64)255)
	$6 = (int_64)($5 == 0)
	if ( $6 ){ goto $label$2 }
	$3 = ((int_64)$5 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$3:
	$7 = ((int_64)$7 * (int_64)10)
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)1
	
.LABEL $label$1
	$4 = ($4 & [255])
	$8 = ($1 - (($4 + [16]) & [496]))
	$global$0 = $8
	*(($1 = ($8 + $4))) = [0]
	$9 = *($0)
	if ( $6 ){ goto $label$4 }
	$5 = ((int_64)$5 + (int_64)1)
	$3 = ((int_64)$9 % (int_64)$7)
	$1 = ($1 + [-1])
	
.LOOP $label$5:
	$10 = ((int_64)$3 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$10 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$3 = $10
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$9 / (int_64)$7))
	CALL prints([9496])
	CALL prints_l($8, $4)
	CALL prints([9498])
	$3 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$6 }
	$1 = [0]
	
.LOOP $label$8:
	*((($2 + [9]) + $1)) = $3
	$0 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$7 }
	$1 = $0
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	CALL prints_l(($2 + [9]), $0)
	
.LABEL $label$6
	$global$0 = ($2 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8744])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8744])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8744])
	CALL memcpy(($2 + [7]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0) = ((int_32)*($2 + [7]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $35 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	float_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	float_64 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [160])
	$global$0 = $4
	$5 = CALL $64($0)
	if ( ((float_64)$5 == (float_64)(float_64)0) ){ goto $label$1 }
	$6 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	*($4 + [152]) = $6
	$7 = *($0)
	$8 = CALL $173([8192])
	if ( ($8 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8447])
	goto $label$4 
	
.LABEL $label$5
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$9 = (int_64)0
	
.LOOP $label$6:
	$10 = *(($8 + [8191]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$7
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$9 = (int_64)0
	
.LABEL $label$2
	*(($4 + [144])) = [0]
	*($4 + [112]) = $7
	*($4 + [128]) = (int_64)-1
	*($4 + [136]) = (int_64)0
	*($4 + [148]) = [0]
	*($4 + [120]) = ((int_64)$9 & (int_64)72057594037927935)
	CALL eosio_assert([1], [9071])
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = $1
	CALL eosio_assert([1], [9071])
	*(($4 + [104])) = $3
	*($4 + [96]) = $2
	*($4 + [72]) = ($4 + [112])
	CALL $48(($4 + [32]), ($4 + [72]), ($4 + [80]))
	$8 = *($4 + [36])
	if ( ($8 == 0) ){ goto $label$8 }
	$7 = *($8 + [24])
	$11 = *($8 + [16])
	$9 = *($8 + [8])
	CALL eosio_assert([1], [9071])
	CALL eosio_assert([1], [9071])
	if ( ((int_64)((int_64)((int_64)$9 ^ (int_64)*($4 + [80])) | (int_64)*($4 + [88])) != (int_64)0) ){ goto $label$8 }
	if ( ((int_64)(((int_64)((int_64)*(($4 + [96])) ^ (int_64)$7) | (int_64)((int_64)*(($4 + [104])) ^ (int_64)$11)) == 0) == 0) ){ goto $label$8 }
	$12 = *($4 + [36])
	if ( ($12 == 0) ){ goto $label$8 }
	$13 = (float_64)0
	$7 = *($12 + [72])
	if ( ((uint_64)$6 <= (uint_64)$7) ){ goto $label$9 }
	if ( (int_64)($7 == 0) ){ goto $label$9 }
	$11 = *($12 + [48])
	$8 = CALL $173([8192])
	if ( ($8 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [8447])
	goto $label$12 
	
.LABEL $label$13
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$9 = (int_64)0
	
.LOOP $label$14:
	$10 = *(($8 + [8191]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$14 }
	$9 = ((int_64)$9 & (int_64)72057594037927935)
	goto $label$10 
	
.LABEL $label$11
	$9 = (int_64)0
	
.LABEL $label$10
	$7 = (int_64))($6 - $7)
	*(($4 + [64])) = [0]
	*($4 + [48]) = (int_64)-1
	*($4 + [56]) = (int_64)0
	$6 = *($0)
	*($4 + [32]) = $6
	*($4 + [40]) = $9
	$8 = [0]
	$10 = CALL db_find_i64($6, $9, (int_64)-4157502542122582016, $9)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$16 }
	$8 = CALL $58(($4 + [32]), $10)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($4 + [32])), [8670])
	
.LABEL $label$16
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8637])
	$13 = (float_64)0
	if ( (uint_64)($7 <= (int_64)500) ){ goto $label$17 }
	$13 = ((float_64)((float_64)$5 * (float_64)(CASTING float_64)(int_64 $11)) * (float_64)((float_64)CALL $169(((float_64)*($8 + [16]) + (float_64)(float_64)1), (CASTING float_64)(int_64 ((uint_64)$7 / (uint_64)(int_64)500))) + (float_64)(float_64)-1))
	
.LABEL $label$17
	$14 = *($4 + [56])
	if ( ($14 == 0) ){ goto $label$9 }
	$15 = ($4 + [60])
	$8 = *($15)
	if ( ((int_32)$8 == (int_32)$14) ){ goto $label$19 }
	
.LOOP $label$20:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$21 }
	CALL _ZdlPv($10)
	
.LABEL $label$21
	if ( ((int_32)$14 != (int_32)$8) ){ goto $label$20 }
	$8 = *(($4 + [56]))
	goto $label$18 
	
.LABEL $label$19
	$8 = $14
	
.LABEL $label$18
	*($15) = $14
	CALL _ZdlPv($8)
	
.LABEL $label$9
	CALL $84($0, $1, $2, $3, $12)
	$8 = ($12 + [72])
	if ( ((int_64)*($8) != (int_64)0) ){ goto $label$22 }
	*($8) = *($4 + [152])
	$13 = (float_64)0
	
.LABEL $label$22
	$8 = CALL $173([8192])
	if ( ($8 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [8447])
	goto $label$25 
	
.LABEL $label$26
	if ( ($8 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$9 = (int_64)0
	
.LOOP $label$27:
	$10 = *(($8 + [8191]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$28
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$27 }
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$9 = (int_64)4
	
.LABEL $label$23
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$31 }
	$1 = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 >= (int_64)1) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$1 = (Rounds 0)($13)
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$29 }
	
.LABEL $label$30
	*(($12 + [72])) = *($4 + [152])
	*(($4 + [8])) = $9
	*($4 + [24]) = $9
	*($4) = $1
	*($4 + [16]) = $1
	CALL $85($0, $2, $3, $4)
	
.LABEL $label$29
	*($4 + [32]) = $12
	*($4 + [36]) = ($4 + [152])
	CALL eosio_assert([1], [8800])
	CALL $86(*($4 + [72]), $12, (int_64)0, ($4 + [32]))
	
.LABEL $label$8
	$0 = *($4 + [136])
	if ( ($0 == 0) ){ goto $label$1 }
	$12 = ($4 + [140])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$33 }
	
.LOOP $label$34:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$35 }
	CALL _ZdlPv($10)
	
.LABEL $label$35
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$34 }
	$8 = *(($4 + [136]))
	goto $label$32 
	
.LABEL $label$33
	$8 = $0
	
.LABEL $label$32
	*($12) = $0
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($4 + [160])
}

void .FUNC $32 (int_32 $0, int_64 $1, float_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [144])
	$global$0 = $4
	*($4 + [128]) = $3
	*($4 + [136]) = $2
	CALL require_auth(*($0))
	$3 = (int_64)0
	CALL eosio_assert(((int_64)$1 != (int_64)0), [10136])
	*($4 + [120]) = *($0)
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	$5 = CALL $173([8192])
	if ( ($5 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [8447])
	goto $label$2 
	
.LABEL $label$3
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = (int_64)0
	
.LOOP $label$4:
	$6 = *(($5 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [8492])
	
.LABEL $label$5
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$4 }
	
.LABEL $label$1
	*((($4 + [104]) + [8])) = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	*($4 + [104]) = $1
	*((($4 + [64]) + [32])) = [0]
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	*($4 + [72]) = $3
	*($4 + [80]) = (int_64)-1
	*($4 + [88]) = (int_64)0
	$1 = *($0)
	*($4 + [64]) = $1
	*((($4 + [24]) + [32])) = [0]
	*($4 + [32]) = $3
	*($4 + [24]) = $1
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$7 = [0]
	$5 = CALL db_find_i64($1, $3, (int_64)-4157508551318700032, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $57(($4 + [64]), $5)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($4 + [64])), [8670])
	$6 = *(($4 + [52]))
	$8 = *(($4 + [48]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$5 = ($6 + [-24])
	$9 = *($5)
	if ( ((int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8) == (int_64)$3) ){ goto $label$8 }
	$6 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)($4 + [24])), [8670])
	goto $label$6 
	
.LABEL $label$7
	$5 = CALL db_find_i64(*($4 + [24]), *((($4 + [24]) + [8])), (int_64)-4157502542122582016, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$9 = CALL $58(($4 + [24]), $5)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)($4 + [24])), [8670])
	goto $label$6 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert(($7 == 0), [10164])
	CALL eosio_assert(($9 == 0), [10164])
	$3 = *($0)
	*($4 + [12]) = ($4 + [136])
	*($4 + [8]) = ($4 + [104])
	*($4 + [16]) = ($4 + [128])
	CALL $59($4, ($4 + [24]), $3, ($4 + [8]))
	$3 = *($0)
	*($4 + [12]) = ($4 + [120])
	*($4 + [8]) = ($4 + [104])
	CALL $60($4, ($4 + [64]), $3, ($4 + [8]))
	$9 = *($4 + [48])
	if ( ($9 == 0) ){ goto $label$11 }
	$8 = ($4 + [52])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	CALL _ZdlPv($6)
	
.LABEL $label$15
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($4 + [48]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $9
	
.LABEL $label$12
	*($8) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$9 = *($4 + [88])
	if ( ($9 == 0) ){ goto $label$16 }
	$8 = ($4 + [92])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL _ZdlPv($6)
	
.LABEL $label$20
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($4 + [88]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $9
	
.LABEL $label$17
	*($8) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$global$0 = ($4 + [144])
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8744])
	CALL memcpy(($4 + [40]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8744])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8744])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$8 = *($4 + [48])
	$1 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $8), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $179($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	$3 = ($global$0 - [352])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [128]) + [48]))) = (int_64)0
	*(($8 = (($4 + [128]) + [8]))) = (int_64)0
	*(($9 = (($4 + [128]) + [16]))) = (int_64)0
	*(($10 = (($4 + [128]) + [24]))) = (int_64)0
	*(($11 = (($4 + [128]) + [32]))) = (int_64)0
	*(($12 = (($4 + [128]) + [40]))) = (int_64)0
	*($3) = [0]
	*($4 + [128]) = (int_64)0
	*($4 + [116]) = $2
	*($4 + [112]) = $2
	*($4 + [120]) = ($2 + $7)
	*($4 + [240]) = ($4 + [112])
	*($4 + [300]) = $9
	*($4 + [304]) = $10
	*($4 + [308]) = $11
	*($4 + [312]) = $12
	*($4 + [316]) = $3
	*($4 + [296]) = ($4 + [128])
	CALL $34(($4 + [296]), ($4 + [240]))
	*(($13 = (($4 + [64]) + [8]))) = *($4 + [120])
	*($4 + [64]) = *($4 + [112])
	*(($14 = (($4 + [240]) + [8]))) = *($13)
	*($4 + [240]) = *($4 + [64])
	$13 = *($14)
	*((($4 + [296]) + [8])) = $13
	*((($4 + [80]) + [24])) = $13
	*($4 + [80]) = $0
	*($4 + [88]) = $1
	$0 = *($4 + [240])
	*($4 + [96]) = $0
	*($4 + [296]) = $0
	*(($13 = (($4 + [184]) + [48]))) = *($3)
	*(($3 = (($4 + [184]) + [40]))) = *($12)
	*(($12 = (($4 + [184]) + [32]))) = *($11)
	*(($11 = (($4 + [184]) + [24]))) = *($10)
	*(($10 = (($4 + [184]) + [16]))) = *($9)
	*(($9 = (($4 + [184]) + [8]))) = *($8)
	*($4 + [184]) = *($4 + [128])
	*((($4 + [240]) + [48])) = *($13)
	*((($4 + [240]) + [40])) = *($3)
	*((($4 + [240]) + [32])) = *($12)
	*((($4 + [240]) + [24])) = *($11)
	*((($4 + [240]) + [16])) = *($10)
	*($14) = *($9)
	*($4 + [240]) = *($4 + [184])
	$3 = (($4 + [80]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$0 = *((($4 + [240]) + [48]))
	*((($4 + [296]) + [48])) = $0
	$1 = *((($4 + [240]) + [40]))
	*((($4 + [296]) + [40])) = $1
	$15 = *((($4 + [240]) + [32]))
	*((($4 + [296]) + [32])) = $15
	$16 = *((($4 + [240]) + [24]))
	*((($4 + [296]) + [24])) = $16
	$17 = *((($4 + [240]) + [16]))
	*((($4 + [296]) + [16])) = $17
	$18 = *((($4 + [240]) + [8]))
	*((($4 + [296]) + [8])) = $18
	*((($4 + [8]) + [8])) = $18
	*((($4 + [8]) + [16])) = $17
	*((($4 + [8]) + [24])) = $16
	*((($4 + [8]) + [32])) = $15
	*((($4 + [8]) + [40])) = $1
	*((($4 + [8]) + [48])) = $0
	$0 = *($4 + [240])
	*($4 + [8]) = $0
	*($4 + [296]) = $0
	CALL void $3((int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $179($2)
	
.LABEL $label$5
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$5 = ($global$0 - [96])
	$global$0 = $5
	CALL require_auth($1)
	CALL require_recipient($2)
	CALL require_recipient($3)
	CALL $35($0, $1, $2, $3)
	$6 = ($4 + [8])
	$7 = *($6)
	*((($5 + [80]) + [8])) = $7
	$8 = *($4)
	*((($5 + [32]) + [8])) = $7
	*($5 + [32]) = $8
	*($5 + [80]) = $8
	CALL $39($0, $1, $3, $2, ($5 + [32]))
	$2 = *($6)
	*((($5 + [64]) + [8])) = $2
	$3 = *($4)
	*((($5 + [16]) + [8])) = $2
	*($5 + [16]) = $3
	*($5 + [64]) = $3
	CALL $40($0, $1, ($5 + [16]))
	$3 = *($6)
	*((($5 + [48]) + [8])) = $3
	$1 = *($4)
	*(($5 + [8])) = $3
	*($5) = $1
	*($5 + [48]) = $1
	CALL $41($0, $5)
	$global$0 = ($5 + [96])
}