(data (i32.const 8192) "thebetxtoken\00")
(data (i32.const 8205) "eosio.token\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8303) "transfer\00")
(data (i32.const 8312) "Must transfer EOS or BETX token\00")
(data (i32.const 8344) "string is too long to be a valid name\00")
(data (i32.const 8382) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8449) "character is not in allowed character set for names\00")
(data (i32.const 8501) "Contract is init\00")
(data (i32.const 8518) "error reading iterator\00")
(data (i32.const 8541) "read\00")
(data (i32.const 8546) "cannot create objects in table of another contract\00")
(data (i32.const 8597) "write\00")
(data (i32.const 8603) "Input val can only be 0 or 1\00")
(data (i32.const 8632) "Not found GLOBAL_ID_CLAIM_ENABLED in globalvars\00%llu\00")
(data (i32.const 8685) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8736) "cannot pass end iterator to modify\00")
(data (i32.const 8771) "object passed to modify is not in multi_index\00")
(data (i32.const 8817) "cannot modify objects in table of another contract\00")
(data (i32.const 8868) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8927) "Record does not exist\00")
(data (i32.const 8949) "cannot pass end iterator to erase\00")
(data (i32.const 8983) "cannot increment end iterator\00")
(data (i32.const 9013) "object passed to erase is not in multi_index\00")
(data (i32.const 9058) "cannot erase objects in table of another contract\00")
(data (i32.const 9108) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9161) "Not found user\00")
(data (i32.const 9176) "Invalid asset\00")
(data (i32.const 9190) "Not found GLOBAL_ID_NEW_DIVIDEND entry in globalvars\00")
(data (i32.const 9243) "Must transfer BETX token\00")
(data (i32.const 9268) "Stake must be greater than \00")
(data (i32.const 9296) "Not found GLOBAL_ID_STAKE_TOTAL entry in globalvars\00")
(data (i32.const 9348) "Invalid unstake asset\00")
(data (i32.const 9370) "Unstake asset can only be BETX token\00")
(data (i32.const 9407) "Unstake amount has to be positive\00")
(data (i32.const 9441) "user not found in table; no action.\00")
(data (i32.const 9477) "Unstake amount greater than balance.\00")
(data (i32.const 9514) "Insufficient balance to unstake from the contract.\00")
(data (i32.const 9565) "Not found GLOBAL_ID_FREEZE_DURATION in globalvars\00")
(data (i32.const 9615) "Invalid speed input\00")
(data (i32.const 9635) "Not found GLOBAL_ID_UNSTAKE_REQUEST in globalvars\00")
(data (i32.const 9685) "thebetxburnt\00")
(data (i32.const 9698) "user: \00")
(data (i32.const 9705) ", amount: \00")
(data (i32.const 9716) ", speed: \00")
(data (i32.const 9726) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9775) "invalid symbol name\00")
(data (i32.const 9796) "H&\00\00")
(data (i32.const 9800) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9833) "Invalid withdraw asset\00")
(data (i32.const 9856) "Withdraw asset can only be BETX token\00")
(data (i32.const 9894) "Withdraw amount has to be positive\00")
(data (i32.const 9929) "user not found in stakers table; no action.\00")
(data (i32.const 9973) "Withdraw amount greater than balance.\00")
(data (i32.const 10011) "Insufficient balance to withdraw from the contract.\00")
(data (i32.const 10063) "Withdraw BETX -- Play: betx.fun\00")
(data (i32.const 10095) "Not found GLOBAL_ID_NEW_DIVIDEND in globalvars\00")
(data (i32.const 10142) "Input amount is greater than available dividend.\00")
(data (i32.const 10191) "Not found any snapshot\00")
(data (i32.const 10214) "Not found GLOBAL_ID_TOTAL_DIVIDEND in globalvars\00")
(data (i32.const 10263) "Claim dividend is disabled for now\00")
(data (i32.const 10298) "Invalid claim asset\00")
(data (i32.const 10318) "Claim asset can only be EOS token\00")
(data (i32.const 10352) "Claim amount has to be positive\00")
(data (i32.const 10384) "Claim amount greater than dividend.\00")
(data (i32.const 10420) "Insufficient balance to claim from the contract.\00")
(data (i32.const 10469) "Claim dividend -- Play: betx.fun\00")
(data (i32.const 10502) "Id GLOBAL_ID_SNAPSHOT_INTERVAL not found in globalvars\00")
(data (i32.const 10557) "Can\'t take snapshot in less than 20 hours.\00")
(data (i32.const 10600) "Id GLOBAL_ID_SNAPSHOT_CAP_TIMES not found in globalvars\00")
(data (i32.const 10656) " snapshotTotal:\00")
(data (i32.const 10672) " snapshotEffectiveTotal:\00")
(data (i32.const 10697) "Id not found in globalvars\00")
(data (i32.const 10724) "thebetxdivid\00")
(data (i32.const 10737) "thebetxowner\00")
(data (i32.const 10750) "betxresolver\00")
(data (i32.const 10763) "EOS\00")
(data (i32.const 10767) "BETX\00")
(data (i32.const 10772) "string is too long to be a valid symbol_code\00")
(data (i32.const 10817) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 10870) "get\00")
(data (i32.const 19296) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "prints" (func $fimport$10 (param i32)))
(import "env" "printui" (func $fimport$11 (param i64)))
(import "env" "current_receiver" (func $fimport$12 (result i64)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$20 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$31 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$32 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$35 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$37 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$38 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$39 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $107))
(export "_Znwj" (func $105))
(export "_Znaj" (func $106))
(export "_ZdaPv" (func $108))
(export "_ZnwjSt11align_val_t" (func $109))
(export "_ZnajSt11align_val_t" (func $110))
(export "_ZdlPvSt11align_val_t" (func $111))
(export "_ZdaPvSt11align_val_t" (func $112))
(table $0 19 19 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $13 $14 $15 $16 $18 $20 $21 $22 $23 $24 $25 $125 $127)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19376))
(global $global$2 i32 (i32.const 19376))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8597])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8597])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8597])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8597])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8597])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $121($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8597])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8597])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8597])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8597])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $97(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8597])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8597])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	CALL eosio_assert([1], [8597])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($0 + [16]) = [0]
	*($0 + [8]) = (int_64)0
	*($0 + [48]) = [0]
	*($0 + [52]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	*($0 + [24]) = *(*($1 + [8]))
	$4 = *($1 + [16])
	*($0 + [16]) = *($4)
	*($0 + [32]) = *(*($1 + [12]))
	$5 = *($2)
	*($0 + [40]) = *(*($1 + [20]))
	*($0 + [48]) = (*($4) + *(*($1 + [24])))
	*($3 + [56]) = ($3 + [48])
	*($3 + [52]) = $3
	*($3 + [48]) = $3
	CALL $94(($3 + [48]), $0)
	$6 = *($0)
	*($0 + [56]) = CALL db_store_i64(*($5 + [8]), (int_64)-3102536759434170368, *(*($2 + [8])), $6, $3, [48])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$1 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [64])
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	CALL eosio_assert([1], [8597])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $123 (int_32 $0)
{
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $122 ()
{
	return [10880]
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $122())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $131($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $132($1)
	
.LABEL $label$2
	*(CALL $122()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $132(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $135($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $132 (int_32 $0)
{
	return CALL $133([10896], $0)
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $134($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8217])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10888]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10892])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10888]) = [1]
	$2 = ($2 << [16])
	*([0] + [10892]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10892])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10892]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10888]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10888]) = [1]
	$3 = ($3 << [16])
	*([0] + [10892]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10892])
	
.LABEL $label$10
	*([0] + [10892]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $121 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $120 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $117(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $128(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8680], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $117(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $117(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $81($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	*($4 + [72]) = ($4 + [64])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $84(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $114(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $114(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8518])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $132($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [16]) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [52]) = $0
	CALL $85(($3 + [32]), $5)
	*($5 + [56]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $86(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $135($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [56]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	*($4 + [72]) = ($4 + [64])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $84(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9013])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9058])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9108])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8518])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $132($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [64]) = $0
	*($5) = (int_64)0
	CALL $82(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $83(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $135($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8541])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8541])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8541])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8541])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $103(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9013])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9058])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9108])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8518])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $132($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	*($5 + [8]) = [0]
	CALL $87(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $88(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $135($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9013])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9058])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9108])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [17] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $126($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $126($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $126($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $126($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19296]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $126($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $126($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $126($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $124([18], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [376]) = (int_64)0
	*($4 + [368]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8541])
	CALL memcpy(($4 + [368]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8541])
	CALL memcpy((($4 + [368]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $27(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [376])
	$1 = *($4 + [368])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $135($2)
	
.LABEL $label$6
	CALL $28($8)
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0 + [192]))
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8685])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)-4157660975413067776, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $40($3, $6)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8685])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8927])
	CALL eosio_assert($6, [8949])
	CALL eosio_assert($6, [8983])
	$6 = CALL db_next_i64(*($7 + [68]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $40($3, $6)
	
.LABEL $label$5
	CALL $41($3, $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [376]) = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8541])
	CALL memcpy(($4 + [376]), $2, [1])
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = ($2 + [1])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$9 = *($4 + [376])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($9 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $135($2)
	
.LABEL $label$5
	CALL $28($8)
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = $2
	CALL require_auth(*($0 + [192]))
	$4 = ($0 + [72])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8685])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)7235159551874301952, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $29($4, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8685])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [10697])
	$1 = *($0)
	*($3) = ($3 + [8])
	CALL eosio_assert($7, [8736])
	CALL $71($4, $8, $1, $3)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $27(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $135($2)
	
.LABEL $label$6
	CALL $28($8)
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [15]) = $1
	CALL require_auth(*($0 + [192]))
	CALL eosio_assert(($1 <= [2]), [8603])
	$3 = ($0 + [72])
	$4 = *($0 + [280])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [8685])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)7235159551874301952, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $29($3, $1)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [8685])
	
.LABEL $label$1
	$1 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($1, [8632])
	$4 = *($0)
	*($2 + [8]) = ($2 + [15])
	CALL eosio_assert($1, [8736])
	CALL $39($3, $7, $4, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8344])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8449])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8382])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8449])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_32 $35
	int_64 $36
	int_64 $37
	$1 = ($global$0 - [320])
	$global$0 = $1
	CALL require_auth(*($0 + [192]))
	$2 = ($0 + [152])
	$3 = CALL db_lowerbound_i64(*($0 + [152]), *(($0 + [160])), (int_64)-3102536759434170368, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$3 = CALL $43($2, $3)
	*($1 + [300]) = $3
	*($1 + [296]) = $2
	$4 = ($0 + [32])
	$5 = (($1 + [16]) | [1])
	$6 = (($1 + [32]) | [1])
	$7 = (($1 + [48]) | [1])
	$8 = (($1 + [64]) | [1])
	$9 = (($1 + [80]) | [1])
	$10 = (($1 + [96]) | [1])
	$11 = ($0 + [60])
	$12 = ($0 + [56])
	$13 = ($0 + [40])
	$14 = (($1 + [240]) + [8])
	$15 = ($0 + [216])
	$16 = ($0 + [240])
	$17 = (($1 + [192]) + [16])
	$18 = ($1 + [284])
	$19 = ($1 + [276])
	
.LOOP $label$6:
	if ( (int_64)(*($3 + [32]) == 0) ){ goto $label$10 }
	$23 = CALL current_time()
	$3 = *($1 + [300])
	if ( ((uint_32)*($3 + [48]) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$23 / (uint_64)(int_64)1000000))) ){ goto $label$10 }
	$23 = *($3 + [8])
	$20 = *($11)
	$24 = *($12)
	if ( ((int_32)$24 == (int_32)$20) ){ goto $label$12 }
	
.LOOP $label$14:
	$3 = ($20 + [-24])
	$22 = *($3)
	if ( ((int_64)*($22) == (int_64)$23) ){ goto $label$13 }
	$20 = $3
	if ( ((int_32)$24 != (int_32)$3) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$24 == (int_32)$20) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($22 + [64]) == (int_32)$4), [8685])
	goto $label$11 
	
.LABEL $label$12
	$3 = CALL db_find_i64(*($4), *($13), (int_64)-4157660975413067776, $23)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$22 = CALL $40($4, $3)
	CALL eosio_assert(((int_32)*($22 + [64]) == (int_32)$4), [8685])
	
.LABEL $label$11
	$23 = *($0)
	*($1 + [192]) = ($1 + [296])
	CALL eosio_assert([1], [8736])
	CALL $59($4, $22, $23, ($1 + [192]))
	$3 = *($1 + [300])
	if ( (uint_64)((int_64))(*($3 + [24]) - *($3 + [32])) <= (int_64)1001) ){ goto $label$7 }
	*($14) = (int_64)3617214756542218240
	*($1 + [240]) = *($0)
	$36 = *($15)
	*($1 + [176]) = [9685]
	*($1 + [180]) = CALL $129([9685])
	*($1 + [8]) = *($1 + [176])
	CALL $2(($1 + [184]), ($1 + [8]))
	$34 = *($16)
	$3 = *($1 + [300])
	$33 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$33(*($3 + [24]) - *($3 + [32]))) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9726])
	$23 = (uint_64)$34 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$37 = (uint_64)$23 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$23 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$23 = $37
	$20 = [1]
	$22 = $3
	$3 = ($22 + [1])
	if ( ((int_32)$22 < (int_32)[6]) ){ goto $label$15 }
	goto $label$8 
	
.LABEL $label$16
	$23 = $37
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$23 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8)
	$20 = ((int_32)$3 < (int_32)[6])
	$22 = ($3 + [1])
	$3 = $22
	if ( $20 ){ goto $label$17 }
	$20 = [1]
	$3 = ($22 + [1])
	if ( ((int_32)$22 < (int_32)[6]) ){ goto $label$15 }
	goto $label$8 
	
.LABEL $label$10
	$3 = [0]
	CALL eosio_assert(((int_32)*($1 + [300]) != (int_32)[0]), [8983])
	$20 = CALL db_next_i64(*(*($1 + [300]) + [56]), ($1 + [192]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$18 }
	$3 = CALL $43(*($1 + [296]), $20)
	
.LABEL $label$18
	*($1 + [300]) = $3
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	$20 = [0]
	
.LABEL $label$8
	CALL eosio_assert($20, [9775])
	*(($21 = (($1 + [96]) + [8]))) = [0]
	*($1 + [96]) = (int_64)0
	$3 = CALL $129([9698])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$21 }
	*($1 + [96]) = ($3 << [1])
	$20 = $10
	if ( $3 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$22 = (($3 + [16]) & [-16])
	$20 = CALL _Znwj($22)
	*($21) = $20
	*($1 + [96]) = ($22 | [1])
	*($1 + [100]) = $3
	
.LABEL $label$20
	CALL memcpy($20, [9698], $3)
	
.LABEL $label$19
	*(($20 + $3)) = [0]
	$23 = *(*($1 + [300]) + [8])
	if ( ((int_64)$23 == (int_64)0) ){ goto $label$25 }
	$20 = [0]
	$22 = *([0] + [9796])
	
.LOOP $label$27:
	*((($1 + [192]) + ($3 = $20))) = *(($22 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$23 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$3 == (int_32)[12]) )))))
	$20 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[11]) ){ goto $label$26 }
	$23 = ((int_64)$23 << (int_64)5)
	if ( ((int_64)$23 != (int_64)0) ){ goto $label$27 }
	
.LABEL $label$26
	*(($24 = (($1 + [80]) + [8]))) = [0]
	*($1 + [80]) = (int_64)0
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$24 }
	*($1 + [80]) = ($20 << [1])
	$22 = $9
	goto $label$23 
	
.LABEL $label$25
	*((($1 + [80]) + [8])) = [0]
	*($1 + [80]) = (int_64)0
	*($1 + [80]) = [0]
	$3 = $9
	goto $label$22 
	
.LABEL $label$24
	$25 = (($20 + [16]) & [-16])
	$22 = CALL _Znwj($25)
	*($24) = $22
	*($1 + [80]) = ($25 | [1])
	*($1 + [84]) = $20
	
.LABEL $label$23
	$24 = ($3 + [1])
	$3 = [0]
	
.LOOP $label$28:
	*(($22 + $3)) = *((($1 + [192]) + $3))
	$3 = ($3 + [1])
	if ( ((int_32)$24 != (int_32)$3) ){ goto $label$28 }
	$3 = ($22 + $20)
	
.LABEL $label$22
	*($3) = [0]
	$3 = *($1 + [80])
	$20 = ($3 & [1])
	$27 = (($1 + [80]) + [8])
	$3 = CALL $119(($1 + [96]), ( *($27) ? $9 : $20 ), ( *($1 + [84]) ? uint_32($3 >> [1]) : $20 ))
	$20 = ($3 + [8])
	*(($26 = (($1 + [112]) + [8]))) = *($20)
	*($1 + [112]) = *($3)
	*($3) = (int_64)0
	*($20) = [0]
	*(($20 = (($1 + [64]) + [8]))) = [0]
	*($1 + [64]) = (int_64)0
	$3 = CALL $129([9705])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$31 }
	*($1 + [64]) = ($3 << [1])
	$22 = $8
	if ( $3 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$24 = (($3 + [16]) & [-16])
	$22 = CALL _Znwj($24)
	*($20) = $22
	*($1 + [64]) = ($24 | [1])
	*($1 + [68]) = $3
	
.LABEL $label$30
	CALL memcpy($22, [9705], $3)
	
.LABEL $label$29
	*(($22 + $3)) = [0]
	$3 = *($1 + [64])
	$22 = ($3 & [1])
	$3 = CALL $119(($1 + [112]), ( *($20) ? $8 : $22 ), ( *($1 + [68]) ? uint_32($3 >> [1]) : $22 ))
	$22 = ($3 + [8])
	*(($28 = (($1 + [128]) + [8]))) = *($22)
	*($1 + [128]) = *($3)
	*($3) = (int_64)0
	*($22) = [0]
	CALL $120(($1 + [48]), *(*($1 + [300]) + [24]))
	$3 = *($1 + [48])
	$22 = ($3 & [1])
	$30 = (($1 + [48]) + [8])
	$3 = CALL $119(($1 + [128]), ( *($30) ? $7 : $22 ), ( *($1 + [52]) ? uint_32($3 >> [1]) : $22 ))
	$22 = ($3 + [8])
	*(($29 = (($1 + [144]) + [8]))) = *($22)
	*($1 + [144]) = *($3)
	*($3) = (int_64)0
	*($22) = [0]
	*(($22 = (($1 + [32]) + [8]))) = [0]
	*($1 + [32]) = (int_64)0
	$3 = CALL $129([9716])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$34 }
	*($1 + [32]) = ($3 << [1])
	$24 = $6
	if ( $3 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$25 = (($3 + [16]) & [-16])
	$24 = CALL _Znwj($25)
	*($22) = $24
	*($1 + [32]) = ($25 | [1])
	*($1 + [36]) = $3
	
.LABEL $label$33
	CALL memcpy($24, [9716], $3)
	
.LABEL $label$32
	*(($24 + $3)) = [0]
	$3 = *($1 + [32])
	$24 = ($3 & [1])
	$3 = CALL $119(($1 + [144]), ( *($22) ? $6 : $24 ), ( *($1 + [36]) ? uint_32($3 >> [1]) : $24 ))
	$24 = ($3 + [8])
	*(($31 = (($1 + [160]) + [8]))) = *($24)
	*($1 + [160]) = *($3)
	*($3) = (int_64)0
	*($24) = [0]
	CALL $120(($1 + [16]), *(*($1 + [300]) + [40]))
	$3 = *($1 + [16])
	$24 = ($3 & [1])
	$32 = (($1 + [16]) + [8])
	$3 = CALL $119(($1 + [160]), ( *($32) ? $5 : $24 ), ( *($1 + [20]) ? uint_32($3 >> [1]) : $24 ))
	$23 = *($3)
	*($3) = (int_64)0
	$24 = *($3 + [8])
	*($3 + [8]) = [0]
	*((($1 + [192]) + [8])) = *($1 + [184])
	*($17) = $33
	*((($1 + [192]) + [24])) = $34
	*(($25 = (($1 + [192]) + [32]))) = $23
	*(($35 = (($1 + [192]) + [40]))) = $24
	*($1 + [192]) = *($0)
	CALL $61(($1 + [304]), CALL $60(($1 + [256]), ($1 + [240]), $36, (int_64)-3617168760277827584, ($1 + [192])))
	$3 = *($1 + [304])
	CALL send_inline($3, (*($1 + [308]) - $3))
	$3 = *($1 + [304])
	if ( ($3 == 0) ){ goto $label$35 }
	*($1 + [308]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$35
	$3 = *($18)
	if ( ($3 == 0) ){ goto $label$36 }
	*((($1 + [256]) + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$36
	$3 = *((($1 + [256]) + [16]))
	if ( ($3 == 0) ){ goto $label$37 }
	*($19) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$37
	if ( (*($25) & [1]) ){ goto $label$57 }
	if ( (*($1 + [16]) & [1]) ){ goto $label$55 }
	goto $label$56 
	
.LABEL $label$57
	CALL _ZdlPv(*($35))
	if ( (*($1 + [16]) & [1]) ){ goto $label$55 }
	
.LABEL $label$56
	if ( (*($1 + [160]) & [1]) ){ goto $label$53 }
	goto $label$54 
	
.LABEL $label$55
	CALL _ZdlPv(*($32))
	if ( (*($1 + [160]) & [1]) ){ goto $label$53 }
	
.LABEL $label$54
	if ( (*($1 + [32]) & [1]) ){ goto $label$51 }
	goto $label$52 
	
.LABEL $label$53
	CALL _ZdlPv(*($31))
	if ( (*($1 + [32]) & [1]) ){ goto $label$51 }
	
.LABEL $label$52
	if ( (*($1 + [144]) & [1]) ){ goto $label$49 }
	goto $label$50 
	
.LABEL $label$51
	CALL _ZdlPv(*($22))
	if ( (*($1 + [144]) & [1]) ){ goto $label$49 }
	
.LABEL $label$50
	if ( (*($1 + [48]) & [1]) ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$49
	CALL _ZdlPv(*($29))
	if ( (*($1 + [48]) & [1]) ){ goto $label$47 }
	
.LABEL $label$48
	if ( (*($1 + [128]) & [1]) ){ goto $label$45 }
	goto $label$46 
	
.LABEL $label$47
	CALL _ZdlPv(*($30))
	if ( (*($1 + [128]) & [1]) ){ goto $label$45 }
	
.LABEL $label$46
	if ( (*($1 + [64]) & [1]) ){ goto $label$43 }
	goto $label$44 
	
.LABEL $label$45
	CALL _ZdlPv(*($28))
	if ( (*($1 + [64]) & [1]) ){ goto $label$43 }
	
.LABEL $label$44
	if ( (*($1 + [112]) & [1]) ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$43
	CALL _ZdlPv(*($20))
	if ( (*($1 + [112]) & [1]) ){ goto $label$41 }
	
.LABEL $label$42
	if ( (*($1 + [80]) & [1]) ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$41
	CALL _ZdlPv(*($26))
	if ( (*($1 + [80]) & [1]) ){ goto $label$39 }
	
.LABEL $label$40
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$7 }
	goto $label$38 
	
.LABEL $label$39
	CALL _ZdlPv(*($27))
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$38
	CALL _ZdlPv(*($21))
	
.LABEL $label$7
	$3 = [0]
	$23 = *($1 + [296])
	$20 = (CASTING uint_32)(uint_64 (uint_64)$23 >> (uint_64)(int_64)32)
	$22 = ((int_32)$20) != (int_32)[0]
	CALL eosio_assert($22), [8949])
	CALL eosio_assert($22, [8983])
	$22 = CALL db_next_i64(*($20 + [56]), ($1 + [192]))
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$58 }
	$3 = CALL $43((CASTING uint_32)(uint_64 $23), $22)
	
.LABEL $label$58
	CALL $44($2, $20)
	*($1 + [296]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)32) | (int_64)((int_64)$23 & (int_64)4294967295))
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$5
	$global$0 = ($1 + [320])
	return (unreachable)
	
.LABEL $label$4
	CALL $113(($1 + [96]))
	
.LABEL $label$3
	CALL $113(($1 + [64]))
	
.LABEL $label$2
	CALL $113(($1 + [32]))
	
.LABEL $label$1
	*($1 + [300]) = [0]
	*($1 + [296]) = $2
	$global$0 = ($1 + [320])
	(unreachable)
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [352])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	*($3 + [336]) = [8192]
	*($3 + [340]) = CALL $129([8192])
	*($3 + [160]) = *($3 + [336])
	CALL $2(($3 + [344]), ($3 + [160]))
	if ( ((int_64)$1 == (int_64)-3795279497609865936) ){ goto $label$2 }
	*($3 + [320]) = [8205]
	*($3 + [324]) = CALL $129([8205])
	*($3 + [152]) = *($3 + [320])
	CALL $2(($3 + [328]), ($3 + [152]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [312]) = [8303]
	*($3 + [316]) = CALL $129([8303])
	*($3 + [144]) = *($3 + [312])
	CALL $2(($3 + [344]), ($3 + [144]))
	if ( ((int_64)$2 > (int_64)4921564841613869055) ){ goto $label$19 }
	if ( ((int_64)$2 > (int_64)-3102536759825661953) ){ goto $label$18 }
	if ( ((int_64)$2 > (int_64)-3917942229808486001) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)-4994301895150227584) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-4994130327958978560) ){ goto $label$1 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [1]
	*($3 + [80]) = *($3 + [224])
	CALL $4($0, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$19
	if ( ((int_64)$2 > (int_64)5378293677622637439) ){ goto $label$17 }
	if ( ((int_64)$2 > (int_64)4923678691801343487) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)4921564841613869056) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)4921564861122237584) ){ goto $label$1 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [2]
	*($3 + [32]) = *($3 + [280])
	CALL $6($0, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$18
	if ( ((int_64)$2 > (int_64)-2039333636196532225) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-3075276119992054512) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [3]
	*($3 + [136]) = *($3 + [168])
	CALL $8($0, $1, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$17
	if ( ((int_64)$2 > (int_64)8421049960203129231) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)5378293677622637440) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)5378296973243580416) ){ goto $label$1 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [4]
	*($3 + [40]) = *($3 + [272])
	CALL $10($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)-3917942229808486000) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [304]) = [8192]
	*($3 + [308]) = CALL $129([8192])
	*($3 + [16]) = *($3 + [304])
	CALL $2(($3 + [344]), ($3 + [16]))
	if ( ((int_64)$1 != (int_64)-3795279497609865936) ){ goto $label$4 }
	CALL eosio_assert([1], [8312])
	goto $label$3 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)4923678691801343488) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)5378271413712977920) ){ goto $label$1 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [5]
	*($3 + [56]) = *($3 + [256])
	CALL $12($0, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)3626181449533095936) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [6]
	*($3 + [128]) = *($3 + [176])
	CALL $4($0, $1, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)8421049960203129232) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)8516769952340901888) ){ goto $label$1 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [7]
	*($3 + [104]) = *($3 + [200])
	CALL $12($0, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [268]) = [0]
	*($3 + [264]) = [8]
	*($3 + [48]) = *($3 + [264])
	CALL $10($0, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [196]) = [0]
	*($3 + [192]) = [9]
	*($3 + [112]) = *($3 + [192])
	CALL $17($0, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [236]) = [0]
	*($3 + [232]) = [10]
	*($3 + [72]) = *($3 + [232])
	CALL $19($0, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [252]) = [0]
	*($3 + [248]) = [11]
	*($3 + [64]) = *($3 + [248])
	CALL $12($0, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [188]) = [0]
	*($3 + [184]) = [12]
	*($3 + [120]) = *($3 + [184])
	CALL $4($0, $1, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [212]) = [0]
	*($3 + [208]) = [13]
	*($3 + [96]) = *($3 + [208])
	CALL $4($0, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [220]) = [0]
	*($3 + [216]) = [14]
	*($3 + [88]) = *($3 + [216])
	CALL $17($0, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [292]) = [0]
	*($3 + [288]) = [15]
	*($3 + [24]) = *($3 + [288])
	CALL $4($0, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [296]) = [8205]
	*($3 + [300]) = CALL $129([8205])
	*($3 + [8]) = *($3 + [296])
	CALL $2(($3 + [328]), ($3 + [8]))
	CALL eosio_assert(((int_64)$1 == (int_64)6138663591592764928), [8312])
	
.LABEL $label$3
	*($3 + [244]) = [0]
	*($3 + [240]) = [16]
	*($3) = *($3 + [240])
	CALL $26($0, $1, $3)
	
.LABEL $label$1
	CALL $123([0])
	$global$0 = ($3 + [352])
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = $1
	CALL require_auth(*($0 + [192]))
	$3 = ($0 + [72])
	$4 = *($0 + [264])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [8685])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)7235159551874301952, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $29($3, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [8685])
	
.LABEL $label$1
	$5 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($5, [10095])
	CALL eosio_assert(((uint_64)*($8 + [8]) >= (uint_64)$1), [10142])
	$6 = ($0 + [112])
	$7 = [0]
	$9 = ($0 + [120])
	$10 = CALL db_lowerbound_i64(*($0 + [112]), *($9), (int_64)-4265651882472505344, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	CALL $45($6, $10)
	$7 = [1]
	
.LABEL $label$5
	CALL eosio_assert($7, [10191])
	$4 = *($6)
	$1 = *($9)
	*($2 + [8]) = (int_64)0
	$7 = CALL db_lowerbound_i64($4, $1, (int_64)-4265651882472505344, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $45($6, $7)
	*($2 + [8]) = *($7 + [24])
	CALL eosio_assert([1], [8983])
	$7 = CALL db_next_i64(*($7 + [60]), ($2 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = CALL $45($6, $7)
	*($2 + [8]) = *($7 + [24])
	CALL eosio_assert([1], [8983])
	$7 = CALL db_next_i64(*($7 + [60]), ($2 + [24]))
	if ( ((int_32)$7 >= (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-4157660975413067776, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$8 }
	$6 = ($0 + [32])
	$7 = CALL $40($6, $7)
	
.LOOP $label$9:
	$4 = *($0)
	*($2 + [28]) = ($2 + [16])
	*($2 + [24]) = ($2 + [8])
	CALL eosio_assert([1], [8736])
	CALL $64($6, $7, $4, ($2 + [24]))
	CALL eosio_assert([1], [8983])
	$7 = CALL db_next_i64(*($7 + [68]), ($2 + [24]))
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL $40($6, $7)
	goto $label$9 
	
.LABEL $label$8
	$4 = *($0)
	*($2 + [24]) = ($2 + [16])
	CALL eosio_assert($5, [8736])
	CALL $65($3, $8, $4, ($2 + [24]))
	$4 = *($0 + [304])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$13:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$12 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [8685])
	goto $label$10 
	
.LABEL $label$11
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [72])), *(($0 + [80])), (int_64)7235159551874301952, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $29($3, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [8685])
	
.LABEL $label$10
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [10214])
	$4 = *($0)
	*($2 + [24]) = ($2 + [16])
	CALL eosio_assert($7, [8736])
	CALL $66($3, $8, $4, ($2 + [24]))
	$global$0 = ($2 + [32])
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0 + [192]))
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8685])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)-4157660975413067776, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $40($3, $6)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8685])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9161])
	$1 = *($0)
	CALL eosio_assert($6, [8736])
	CALL $42($3, $7, $1, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [72])
	$5 = *($0 + [280])
	$7 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$4), [8685])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)7235159551874301952, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $29($4, $8)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$4), [8685])
	
.LABEL $label$1
	$7 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8632])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)1), [10263])
	$10 = *($2 + [8])
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$5 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$12 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$5 = $12
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $12
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$9 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	
.LABEL $label$5
	CALL eosio_assert($7, [10298])
	CALL eosio_assert(((int_64)$10 == (int_64)*($0 + [232])), [10318])
	*($3 + [120]) = $11
	CALL eosio_assert(((int_64)$11 != (int_64)0), [10352])
	$4 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$13:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$12 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$4), [8685])
	goto $label$10 
	
.LABEL $label$11
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)-4157660975413067776, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$9 = CALL $40($4, $8)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$4), [8685])
	
.LABEL $label$10
	$6 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($6, [9929])
	CALL eosio_assert(((uint_64)$11 <= (uint_64)*($9 + [56])), [10384])
	CALL eosio_assert(((uint_64)$11 <= (uint_64)CALL $54($0, *($0 + [224]), *(($0 + [232])))), [10420])
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = *($0)
	$5 = *($0 + [224])
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$8 = CALL $129([10469])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$17 }
	*($3) = ($8 << [1])
	$7 = ($3 | [1])
	if ( $8 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$13 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($13)
	*($3) = ($13 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $8
	
.LABEL $label$16
	CALL memcpy($7, [10469], $8)
	
.LABEL $label$15
	*(($7 + $8)) = [0]
	*(($3 + [40])) = *(($2 + [8]))
	$8 = ($3 + [8])
	*(($3 + [56])) = *($8)
	*($8) = [0]
	*($3 + [24]) = $1
	*($3 + [16]) = *($0)
	*($3 + [32]) = *($2)
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$8 = CALL $60(($3 + [80]), ($3 + [64]), $5, (int_64)-3617168760277827584, ($3 + [16]))
	CALL $61(($3 + [128]), $8)
	$7 = *($3 + [128])
	CALL send_inline($7, (*($3 + [132]) - $7))
	$7 = *($3 + [128])
	if ( ($7 == 0) ){ goto $label$18 }
	*($3 + [132]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$18
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$19 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$19
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$20 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$20
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$21
	if ( ((*($3) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$22
	$5 = *($0)
	*($3 + [16]) = ($3 + [120])
	CALL eosio_assert($6, [8736])
	CALL $67($4, $9, $5, ($3 + [16]))
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$14
	CALL $113($3)
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [392]) + [16]))) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [392]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8541])
	CALL memcpy(($4 + [392]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8541])
	CALL memcpy((($4 + [392]) + [8]), ($2 + [8]), [8])
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8541])
	CALL memcpy(($4 + [56]), ($2 + [16]), [8])
	*($3) = *($4 + [56])
	$8 = ($2 + $7)
	*((($4 + [24]) + [8])) = $8
	*($4 + [44]) = ($2 + [24])
	*($4 + [40]) = $2
	*($4 + [48]) = $8
	*($4 + [24]) = *($4 + [40])
	$8 = CALL $27(($4 + [56]), $0, $1, ($4 + [24]))
	*(($9 = (($4 + [416]) + [8]))) = *($3)
	*($4 + [416]) = *($4 + [400])
	$0 = *($4 + [392])
	*((($4 + [432]) + [8])) = *($9)
	*($4 + [432]) = *($4 + [416])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [432]) + [8]))
	*((($4 + [448]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [432])
	*($4 + [8]) = $1
	*($4 + [448]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $135($2)
	
.LABEL $label$6
	CALL $28($8)
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [376]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8541])
	CALL memcpy(($4 + [376]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [376])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $135($2)
	
.LABEL $label$6
	CALL $28($8)
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0 + [192]))
	$3 = ($0 + [152])
	$5 = *(($0 + [180]))
	$4 = *(($0 + [176]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$3), [8685])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [160])), (int_64)-3102536759434170368, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $43($3, $6)
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$3), [8685])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8927])
	CALL eosio_assert($6, [8949])
	CALL eosio_assert($6, [8983])
	$6 = CALL db_next_i64(*($7 + [56]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $43($3, $6)
	
.LABEL $label$5
	CALL $44($3, $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [376]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8541])
	CALL memcpy(($4 + [376]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [376])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $135($2)
	
.LABEL $label$6
	CALL $28($8)
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_64 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0 + [192]))
	$2 = *($0)
	*($1 + [8]) = $0
	CALL $70($1, ($0 + [72]), $2, ($1 + [8]))
	$global$0 = ($1 + [16])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)0
	*($0) = *(*(*($2 + [4])) + [272])
	$1 = *($2)
	CALL eosio_assert([1], [8597])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [80]) = $3
	*($4 + [88]) = $1
	CALL require_auth($1)
	$5 = *($2 + [8])
	$6 = [0]
	$7 = *($2)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$6 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9348])
	CALL eosio_assert(((int_64)$5 == (int_64)*($0 + [240])), [9370])
	*($4 + [72]) = $7
	CALL eosio_assert(((int_64)$7 != (int_64)0), [9407])
	CALL eosio_assert((((int_64)$3 == (int_64)999) | (uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)2)), [9615])
	$11 = ($0 + [32])
	$6 = *(($0 + [60]))
	$12 = *(($0 + [56]))
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$2 = ($6 + [-24])
	$10 = *($2)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$8 }
	$6 = $2
	if ( ((int_32)$12 != (int_32)$2) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$11), [8685])
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	$2 = CALL db_find_i64(*($11), *(($0 + [40])), (int_64)-4157660975413067776, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $40($11, $2)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$11), [8685])
	
.LABEL $label$6
	$13 = [0]
	$14 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($14, [9441])
	CALL eosio_assert(((uint_64)$7 <= (uint_64)*($10 + [8])), [9477])
	CALL eosio_assert(((uint_64)$7 <= (uint_64)CALL $54($0, *($0 + [216]), *(($0 + [240])))), [9514])
	$15 = ($0 + [72])
	$8 = *($0 + [312])
	$6 = *(($0 + [100]))
	$12 = *(($0 + [96]))
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$13:
	$2 = ($6 + [-24])
	$16 = *($2)
	if ( ((int_64)*($16) == (int_64)$8) ){ goto $label$12 }
	$6 = $2
	if ( ((int_32)$12 != (int_32)$2) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)$15), [8685])
	$13 = $16
	goto $label$10 
	
.LABEL $label$11
	$2 = CALL db_find_i64(*($15), *(($0 + [80])), (int_64)7235159551874301952, $8)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$13 = CALL $29($15, $2)
	CALL eosio_assert(((int_32)*($13 + [16]) == (int_32)$15), [8685])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [9565])
	$1 = *($13 + [8])
	*($4 + [64]) = $1
	$8 = (int_64)0
	if ( ((int_64)$3 == (int_64)999) ){ goto $label$15 }
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$14 }
	*($4 + [64]) = (uint_64)$1 >> (uint_64)(int_64)1)
	$17 = ((float_64)(CASTING float_64)(uint_64 $7) * (float_64)(float_64)0.2)
	if ( ((((float_64)$17 < (float_64)(float_64)18446744073709551615) & ((float_64)$17 >= (float_64)(float_64)0)) == 0) ){ goto $label$14 }
	$8 = (Rounds 0)($17)
	goto $label$14 
	
.LABEL $label$15
	*($4 + [64]) = (int_64)0
	$17 = ((float_64)(CASTING float_64)(uint_64 $7) * (float_64)(float_64)0.4)
	if ( (((float_64)$17 < (float_64)(float_64)18446744073709551615) & ((float_64)$17 >= (float_64)(float_64)0)) ){ goto $label$16 }
	$8 = (int_64)0
	goto $label$14 
	
.LABEL $label$16
	$8 = (Rounds 0)($17)
	
.LABEL $label$14
	*($4 + [56]) = (int_64))($7 - $8)
	$8 = *($0)
	*($4 + [12]) = ($4 + [56])
	*($4 + [8]) = ($4 + [72])
	CALL eosio_assert($14, [8736])
	CALL $55($11, $10, $8, ($4 + [8]))
	*($4 + [48]) = CALL $56($0)
	*($4 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$8 = *($0)
	*($4 + [12]) = ($4 + [88])
	*($4 + [8]) = ($4 + [48])
	*($4 + [16]) = ($4 + [72])
	*($4 + [20]) = ($4 + [56])
	*($4 + [24]) = ($4 + [40])
	*($4 + [28]) = ($4 + [80])
	*($4 + [32]) = ($4 + [64])
	CALL $57($4, ($0 + [152]), $8, ($4 + [8]))
	CALL $58($0, *($4 + [72]))
	$global$0 = ($4 + [96])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [416]))) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [388]) = $2
	*($4 + [384]) = $2
	*($4 + [392]) = ($2 + $7)
	*($4 + [464]) = ($4 + [384])
	*($4 + [48]) = ($4 + [400])
	CALL $53(($4 + [48]), ($4 + [464]))
	$8 = *($4 + [392])
	*((($4 + [32]) + [8])) = $8
	*((($4 + [16]) + [8])) = $8
	$9 = *($4 + [384])
	*($4 + [16]) = $9
	*($4 + [32]) = $9
	$8 = CALL $27(($4 + [48]), $0, $1, ($4 + [16]))
	*(($10 = (($4 + [432]) + [8]))) = *($3)
	*($4 + [432]) = *($4 + [408])
	$0 = *($4 + [400])
	$1 = *($4 + [424])
	*((($4 + [448]) + [8])) = *($10)
	*($4 + [448]) = *($4 + [432])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$9 = *((($4 + [448]) + [8]))
	*((($4 + [464]) + [8])) = $9
	*(($4 + [8])) = $9
	$9 = *($4 + [448])
	*($4) = $9
	*($4 + [464]) = $9
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $135($2)
	
.LABEL $label$6
	CALL $28($8)
	$global$0 = ($4 + [480])
	return [1]
}

void .FUNC $58 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $1
	$3 = ($0 + [72])
	$1 = *($0 + [272])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [8685])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)7235159551874301952, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $29($3, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [8685])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9296])
	$1 = *($0)
	*($2) = ($2 + [8])
	CALL eosio_assert($6, [8736])
	CALL $92($3, $7, $1, $2)
	$global$0 = ($2 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	$5 = *(*(*($3) + [4]) + [32])
	*($1 + [16]) = (int_64))(*($1 + [16]) - $5)
	*($1 + [24]) = ((int_64)$5 + (int_64)*($1 + [24]))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	*($4 + [72]) = ($4 + [64])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $84(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*(($5 = CALL _Znwj([80])) + [64]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	*($5 + [8]) = *(*($3 + [4]))
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($4 + [88]) = (($4 + [16]) + [64])
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	CALL $84(($4 + [80]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-4157660975413067776, $2, $6, ($4 + [16]), [64])
	*($5 + [68]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [80]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [80]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $83(($1 + [24]), ($4 + [80]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	CALL eosio_assert([1], [8597])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [8]) = ((int_64)*(*($3)) + (int_64)*($1 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	CALL eosio_assert([1], [8597])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8541])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8541])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8541])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8541])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $54 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	$4 = (int_64)0
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [16]) = $5
	*($3 + [8]) = $1
	$0 = CALL db_find_i64($1, $5, (int_64)3607749779137757184, (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $89(($3 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [8685])
	$4 = *($0)
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	CALL _ZdlPv($8)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $77($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_64 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ($0 + [72])
	$3 = *($0 + [256])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$2), [8685])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)7235159551874301952, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $29($2, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$2), [8685])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9635])
	$3 = *($7 + [8])
	$8 = *($0)
	CALL eosio_assert($6, [8736])
	CALL $90($2, $7, $8, ($1 + [8]))
	$global$0 = ($1 + [16])
	return $3
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([64])
	CALL $91($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [56])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $86(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $118($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $78($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $113 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $135($0)
	
.LABEL $label$1
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $115($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8518])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $132($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8541])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8541])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $73(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $135($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [56]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3 + [4])))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	*($4 + [72]) = ($4 + [64])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $84(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $135($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL require_auth(*($0 + [192]))
	$2 = ($0 + [112])
	$3 = ($0 + [120])
	$4 = *($3)
	$5 = *($0 + [112])
	*($1 + [88]) = (int_64)0
	$6 = CALL db_lowerbound_i64($5, $4, (int_64)-4265651882472505344, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	CALL $45($2, $6)
	$7 = [0]
	$3 = CALL db_lowerbound_i64(*($2), *($3), (int_64)-4265651882472505344, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $45($2, $3)
	$7 = *($3 + [8])
	$4 = *($3)
	CALL eosio_assert([1], [8983])
	$3 = CALL db_next_i64(*($3 + [60]), ($1 + [16]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = CALL $45($2, $3)
	$7 = *($3 + [8])
	$4 = *($3)
	CALL eosio_assert([1], [8983])
	$3 = CALL db_next_i64(*($3 + [60]), ($1 + [16]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ((int_64)$4 + (int_64)1)
	goto $label$2 
	
.LABEL $label$4
	$8 = ($0 + [72])
	goto $label$1 
	
.LABEL $label$3
	$4 = (int_64)1
	
.LABEL $label$2
	*($1 + [88]) = $4
	$8 = ($0 + [72])
	$4 = *($0 + [296])
	$6 = *(($0 + [100]))
	$9 = *(($0 + [96]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$10:
	$3 = ($6 + [-24])
	$10 = *($3)
	if ( ((int_64)*($10) == (int_64)$4) ){ goto $label$9 }
	$6 = $3
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$8), [8685])
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	$3 = CALL db_find_i64(*(($0 + [72])), *(($0 + [80])), (int_64)7235159551874301952, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $29($8, $3)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$8), [8685])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [10502])
	CALL eosio_assert(((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$8() / (uint_64)(int_64)1000000)) - *($10 + [8])) > (uint_32)$7), [10557])
	
.LABEL $label$1
	*($1 + [80]) = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [64]) = (int_64)0
	$4 = *($0 + [320])
	$6 = *(($0 + [100]))
	$10 = *(($0 + [96]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$14:
	$3 = ($6 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$13 }
	$6 = $3
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$8), [8685])
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	$3 = CALL db_find_i64(*($0 + [72]), *(($0 + [80])), (int_64)7235159551874301952, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	$7 = CALL $29($8, $3)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$8), [8685])
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10600])
	*($1 + [56]) = *($7 + [8])
	$3 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-4157660975413067776, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	$6 = ($0 + [32])
	$3 = CALL $40($6, $3)
	$7 = ($1 + [24])
	$10 = ($1 + [28])
	
.LOOP $label$16:
	$4 = *($0)
	*($7) = ($1 + [72])
	*($10) = ($1 + [64])
	*($1 + [20]) = ($1 + [80])
	*($1 + [16]) = ($1 + [56])
	CALL eosio_assert([1], [8736])
	CALL $68($6, $3, $4, ($1 + [16]))
	CALL eosio_assert([1], [8983])
	$3 = CALL db_next_i64(*($3 + [68]), ($1 + [16]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$15 }
	$3 = CALL $40($6, $3)
	goto $label$16 
	
.LABEL $label$15
	CALL prints([10656])
	CALL printui(*($1 + [72]))
	CALL prints([10672])
	CALL printui(*($1 + [64]))
	*($1 + [48]) = CALL $54($0, *($0 + [224]), *($0 + [232]))
	*($1 + [40]) = CALL $54($0, *($0 + [216]), *($0 + [240]))
	$4 = *($0)
	*($1 + [20]) = ($1 + [80])
	*($1 + [16]) = ($1 + [88])
	*($1 + [24]) = ($1 + [40])
	*($1 + [28]) = ($1 + [48])
	*($1 + [32]) = ($1 + [72])
	*($1 + [36]) = ($1 + [64])
	CALL $69(($1 + [8]), $2, $4, ($1 + [16]))
	$global$0 = ($1 + [96])
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0 + [192]))
	$3 = ($0 + [112])
	$5 = *(($0 + [140]))
	$4 = *(($0 + [136]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [8685])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)-4265651882472505344, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $45($3, $6)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [8685])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8927])
	CALL eosio_assert($6, [8949])
	CALL eosio_assert($6, [8983])
	$6 = CALL db_next_i64(*($7 + [60]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $45($3, $6)
	
.LABEL $label$5
	CALL $46($3, $7)
	$global$0 = ($2 + [16])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth($1)
	$4 = *($2 + [8])
	$5 = [0]
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$5 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [9833])
	CALL eosio_assert(((int_64)$4 == (int_64)*($0 + [240])), [9856])
	*($3 + [120]) = $6
	CALL eosio_assert(((int_64)$6 != (int_64)0), [9894])
	$11 = ($0 + [32])
	$5 = *(($0 + [60]))
	$12 = *(($0 + [56]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$8 = ($5 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$8 }
	$5 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$11), [8685])
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	$8 = CALL db_find_i64(*($11), *(($0 + [40])), (int_64)-4157660975413067776, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $40($11, $8)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$11), [8685])
	
.LABEL $label$6
	$12 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($12, [9929])
	CALL eosio_assert(((uint_64)$6 <= (uint_64)*($10 + [24])), [9973])
	CALL eosio_assert(((uint_64)$6 <= (uint_64)CALL $54($0, *($0 + [216]), *(($0 + [240])))), [10011])
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = *($0)
	$7 = *($0 + [216])
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$8 = CALL $129([10063])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$13 }
	*($3) = ($8 << [1])
	$5 = ($3 | [1])
	if ( $8 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$13 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($13)
	*($3) = ($13 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $8
	
.LABEL $label$12
	CALL memcpy($5, [10063], $8)
	
.LABEL $label$11
	*(($5 + $8)) = [0]
	*(($3 + [40])) = *(($2 + [8]))
	$8 = ($3 + [8])
	*(($3 + [56])) = *($8)
	*($8) = [0]
	*($3 + [24]) = $1
	*($3 + [16]) = *($0)
	*($3 + [32]) = *($2)
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$8 = CALL $60(($3 + [80]), ($3 + [64]), $7, (int_64)-3617168760277827584, ($3 + [16]))
	CALL $61(($3 + [128]), $8)
	$5 = *($3 + [128])
	CALL send_inline($5, (*($3 + [132]) - $5))
	$5 = *($3 + [128])
	if ( ($5 == 0) ){ goto $label$14 }
	*($3 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$5 = *($8 + [28])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($8 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$5 = *($8 + [16])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($8 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$17
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$18
	$7 = *($0)
	*($3 + [16]) = ($3 + [120])
	CALL eosio_assert($12, [8736])
	CALL $62($11, $10, $7, ($3 + [16]))
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$10
	CALL $113($3)
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0 + [192]))
	$2 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-4157660975413067776, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [32])
	$2 = CALL $40($3, $2)
	
.LOOP $label$2:
	$4 = *($0)
	CALL eosio_assert([1], [8736])
	CALL $63($3, $2, $4, $1)
	CALL eosio_assert([1], [8983])
	$2 = CALL db_next_i64(*($2 + [68]), ($1 + [8]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = CALL $40($3, $2)
	goto $label$2 
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($5 + [56]) = $1
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$5 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$5 }
	$7 = [0]
	$8 = *($3)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $6
	$7 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9176])
	*($5 + [48]) = $8
	$2 = *($0 + [8])
	if ( ((int_64)$2 != (int_64)*($0 + [224])) ){ goto $label$11 }
	if ( ((int_64)*($0 + [200]) != (int_64)$1) ){ goto $label$12 }
	$10 = ($0 + [72])
	$2 = *($0 + [264])
	$7 = *(($0 + [100]))
	$11 = *(($0 + [96]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$13:
	$3 = ($7 + [-24])
	$9 = *($3)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$4 }
	$7 = $3
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$13 }
	goto $label$3 
	
.LABEL $label$12
	if ( ((int_64)*($0 + [208]) == (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$11
	CALL eosio_assert(((int_64)$2 == (int_64)*($0 + [216])), [9243])
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$3 = CALL $129([9268])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$16 }
	*($5 + [16]) = ($3 << [1])
	$7 = (($5 + [16]) | [1])
	if ( $3 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = (($3 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($5 + [16]) = ($9 | [1])
	*($5 + [24]) = $7
	*($5 + [20]) = $3
	
.LABEL $label$15
	CALL memcpy($7, [9268], $3)
	
.LABEL $label$14
	*(($7 + $3)) = [0]
	CALL $120($5, *($0 + [328]))
	$3 = *($5)
	$7 = ($3 & [1])
	$3 = CALL $119(($5 + [16]), ( *($5 + [8]) ? ($5 | [1]) : $7 ), ( *($5 + [4]) ? uint_32($3 >> [1]) : $7 ))
	$7 = ($3 + [8])
	*((($5 + [32]) + [8])) = *($7)
	*($5 + [32]) = *($3)
	*($3) = (int_64)0
	*($7) = [0]
	if ( ((*($5) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$17
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$18
	CALL eosio_assert(((uint_64)*($5 + [48]) >= (uint_64)*(($0 + [328]))), ( *($5 + [40]) ? (($5 + [32]) | [1]) : (*($5 + [32]) & [1]) ))
	$10 = ($0 + [32])
	$2 = *($5 + [56])
	$7 = *(($0 + [60]))
	$11 = *(($0 + [56]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$22 }
	
.LOOP $label$24:
	$3 = ($7 + [-24])
	$9 = *($3)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$23 }
	$7 = $3
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$22 }
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$10), [8685])
	goto $label$21 
	
.LABEL $label$22
	$3 = CALL db_find_i64(*($10), *(($0 + [40])), (int_64)-4157660975413067776, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$20 }
	$9 = CALL $40($10, $3)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$10), [8685])
	
.LABEL $label$21
	$2 = *($0)
	*($5 + [16]) = ($5 + [48])
	CALL eosio_assert([1], [8736])
	CALL $49($10, $9, $2, ($5 + [16]))
	goto $label$19 
	
.LABEL $label$20
	$2 = *($0)
	*($5 + [20]) = ($5 + [48])
	*($5 + [16]) = ($5 + [56])
	CALL $50($5, $10, $2, ($5 + [16]))
	
.LABEL $label$19
	$10 = ($0 + [72])
	$2 = *($0 + [272])
	$7 = *(($0 + [100]))
	$11 = *(($0 + [96]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$26 }
	
.LOOP $label$28:
	$3 = ($7 + [-24])
	$9 = *($3)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$27 }
	$7 = $3
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$10), [8685])
	goto $label$25 
	
.LABEL $label$26
	$9 = [0]
	$3 = CALL db_find_i64(*($10), *(($0 + [80])), (int_64)7235159551874301952, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$25 }
	$9 = CALL $29($10, $3)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$10), [8685])
	
.LABEL $label$25
	$3 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($3, [9296])
	$2 = *($0)
	*($5 + [16]) = ($5 + [48])
	CALL eosio_assert($3, [8736])
	CALL $51($10, $9, $2, ($5 + [16]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$5
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$4
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$10), [8685])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$3 = CALL db_find_i64(*($10), *(($0 + [80])), (int_64)7235159551874301952, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $29($10, $3)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$10), [8685])
	
.LABEL $label$2
	$3 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($3, [9190])
	$2 = *($0)
	*($5 + [32]) = ($5 + [48])
	CALL eosio_assert($3, [8736])
	CALL $52($10, $9, $2, ($5 + [32]))
	$global$0 = ($5 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $113(($5 + [16]))
}

void .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0 + [192]))
	$2 = ($0 + [72])
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7235159551874301952, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $29($2, $4)
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8501])
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $30($1, $2, $5, ($1 + [8]))
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $31($1, $2, $5, ($1 + [8]))
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $32($1, $2, $5, ($1 + [8]))
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $33($1, $2, $5, ($1 + [8]))
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $34($1, $2, $5, ($1 + [8]))
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $35($1, $2, $5, ($1 + [8]))
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $36($1, $2, $5, ($1 + [8]))
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $37($1, $2, $5, ($1 + [8]))
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $38($1, $2, $5, ($1 + [8]))
	$global$0 = ($1 + [16])
}

int_32 .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = (($4 + [80]) + [8]))) = *(($3 + [8]))
	*($4 + [80]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [96]) + [8])) = $3
	$2 = *($4 + [80])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [96]) = $2
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*($0 + [112]) = $1
	*(($0 + [120])) = $1
	*(($0 + [128])) = (int_64)-1
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = [0]
	*($0 + [152]) = $1
	*(($0 + [160])) = $1
	*(($0 + [168])) = (int_64)-1
	*(($0 + [184])) = [0]
	*(($0 + [176])) = (int_64)0
	*($4 + [72]) = [10724]
	*($4 + [76]) = CALL $129([10724])
	*($4 + [32]) = *($4 + [72])
	CALL $2(($0 + [192]), ($4 + [32]))
	*($4 + [64]) = [10737]
	*($4 + [68]) = CALL $129([10737])
	*($4 + [24]) = *($4 + [64])
	CALL $2(($0 + [200]), ($4 + [24]))
	*($4 + [56]) = [10750]
	*($4 + [60]) = CALL $129([10750])
	*($4 + [16]) = *($4 + [56])
	CALL $2(($0 + [208]), ($4 + [16]))
	*($4 + [48]) = [8192]
	*($4 + [52]) = CALL $129([8192])
	*($4 + [8]) = *($4 + [48])
	CALL $2(($0 + [216]), ($4 + [8]))
	*($4 + [40]) = [8205]
	*($4 + [44]) = CALL $129([8205])
	*($4) = *($4 + [40])
	CALL $2(($0 + [224]), $4)
	$3 = CALL $129([10763])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10772])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [10762]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10817])
	
.LABEL $label$6
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)4
	
.LABEL $label$1
	*(($0 + [232])) = $1
	$3 = CALL $129([10767])
	if ( ($3 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [10772])
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = (int_64)0
	
.LOOP $label$11:
	$5 = *(($3 + [10766]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [10817])
	
.LABEL $label$12
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$11 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$1 = (int_64)4
	
.LABEL $label$7
	*($0 + [248]) = [1638430]
	*($0 + [256]) = (int_64)1
	*($0 + [264]) = (int_64)2
	*($0 + [272]) = (int_64)3
	*($0 + [280]) = (int_64)4
	*($0 + [288]) = (int_64)5
	*($0 + [296]) = (int_64)6
	*($0 + [304]) = (int_64)7
	*($0 + [312]) = (int_64)8
	*($0 + [320]) = (int_64)9
	*($0 + [328]) = (int_64)10000000
	*(($0 + [240])) = $1
	$global$0 = ($4 + [112])
	return $0
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [448])
	$global$0 = $3
	*(($4 = $3) + [440]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [416])) = (int_64)0
	*(($4 + [432])) = [0]
	*($4 + [400]) = (int_64)0
	*($4 + [392]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [380]) = $2
	*($4 + [376]) = $2
	*($4 + [384]) = ($2 + $5)
	*($4 + [16]) = ($4 + [376])
	*($4 + [40]) = ($4 + [392])
	CALL $47(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [384])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [376])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $27(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [440])
	CALL $48(($4 + [16]), ($4 + [392]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $135($2)
	
.LABEL $label$4
	CALL $28($3)
	if ( ((*($4 + [424]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [432])))
	
.LABEL $label$5
	$global$0 = ($4 + [448])
	return [1]
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $130(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10876])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $130(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19280])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19088]
	$3 = (((int_32)$1 * (int_32)[12]) + [19088])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([72])
	CALL $100($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $88(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	$6 = *($1 + [8])
	$7 = ((int_64)*($1 + [32]) + (int_64)$6)
	*($1 + [32]) = $7
	$8 = *($1)
	$6 = ((int_64)$6 * (int_64)*(*($3)))
	if ( ((uint_64)$7 <= (uint_64)$6) ){ goto $label$3 }
	*(($1 + [40])) = $6
	goto $label$2 
	
.LABEL $label$3
	*(($1 + [40])) = $7
	$6 = $8
	if ( (int_64)($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($9 = *($3 + [4]))) = ((int_64)*($9) + (int_64)1)
	*(($9 = *($3 + [8]))) = ((int_64)*($9) + (int_64)*(($1 + [32])))
	*(($3 = *($3 + [12]))) = ((int_64)*($3) + (int_64)*(($1 + [40])))
	$6 = *($1)
	
.LABEL $label$1
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	CALL eosio_assert(((int_64)$8 == (int_64)$6), [8868])
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $4
	CALL $84($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $3, [64])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	CALL eosio_assert([1], [8597])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	float_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	$5 = ((float_64)((float_64)(CASTING float_64)(uint_64 *($1 + [40])) / (float_64)(CASTING float_64)(uint_64 *(*($3)))) * (float_64)(CASTING float_64)(uint_64 *(*($3 + [4]))))
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (Rounds 0)($5)
	
.LABEL $label$1
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)$6)
	$6 = *($1)
	CALL eosio_assert([1], [8868])
	*($4 + [72]) = ($4 + [64])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $84(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [80])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [56]) = (int_64))(*($1 + [56]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	*($4 + [72]) = ($4 + [64])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $84(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	CALL eosio_assert([1], [8597])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $95($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8597])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8597])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $99(CALL $98($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $95($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $96(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	*($4 + [72]) = ($4 + [64])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $84(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [24]) = (int_64))(*($1 + [24]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	*($4 + [72]) = ($4 + [64])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $84(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($0 + [56]) = $1
	*($0 + [8]) = [0]
	$1 = *($2 + [4])
	*($0) = *(*($1))
	$4 = *($2)
	$5 = CALL current_time()
	*($0 + [32]) = *(*($1 + [4]))
	*($0 + [40]) = *(*($1 + [8]))
	*($0 + [48]) = *(*($1 + [12]))
	*($0 + [16]) = *(*($1 + [16]))
	*($0 + [8]) = ((uint_64)$5 / (uint_64)(int_64)1000000)
	*($0 + [24]) = *(*($1 + [20]))
	*($3 + [72]) = ($3 + [52])
	*($3 + [68]) = $3
	*($3 + [64]) = $3
	CALL $101(($3 + [64]), $0)
	$5 = *($0)
	*($0 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-4265651882472505344, *(*($2 + [8])), $5, $3, [52])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [80])
	return $0
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $104($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $116($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $116($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $113($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)1
	*($0) = *(*(*($2 + [4])) + [320])
	$1 = *($2)
	CALL eosio_assert([1], [8597])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $132($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10876])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $132($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10870])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $95($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8541])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8518])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $132($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8541])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8541])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $93(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $135($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8541])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8541])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8541])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8541])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8541])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8597])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8541])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8541])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)1
	*($0) = *(*(*($2 + [4])) + [320])
	$1 = *($2)
	CALL eosio_assert([1], [8597])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)259203
	*($0) = *(*(*($2 + [4])) + [312])
	$1 = *($2)
	CALL eosio_assert([1], [8597])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)0
	*($0) = *(*(*($2 + [4])) + [256])
	$1 = *($2)
	CALL eosio_assert([1], [8597])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $102($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	CALL eosio_assert([1], [8597])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)0
	*($0) = *(*(*($2 + [4])) + [280])
	$1 = *($2)
	CALL eosio_assert([1], [8597])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)86400
	*($0) = *(*(*($2 + [4])) + [288])
	$1 = *($2)
	CALL eosio_assert([1], [8597])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)0
	*($0) = *(*(*($2 + [4])) + [264])
	$1 = *($2)
	CALL eosio_assert([1], [8597])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8771])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8817])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8868])
	CALL eosio_assert([1], [8597])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $79($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $80($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)57600
	*($0) = *(*(*($2 + [4])) + [296])
	$1 = *($2)
	CALL eosio_assert([1], [8597])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)0
	*($0) = *(*(*($2 + [4])) + [304])
	$1 = *($2)
	CALL eosio_assert([1], [8597])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8597])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $75($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $76($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $72($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8546])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $74($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}