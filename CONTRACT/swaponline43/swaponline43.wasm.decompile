(data (i32.const 4) "\b0g\00\00")
(data (i32.const 16) "cannot create objects in table of another contract\00")
(data (i32.const 80) "Between participants already exists open swap\00")
(data (i32.const 128) "cannot increment end iterator\00")
(data (i32.const 160) "invalid symbol name\00")
(data (i32.const 192) "next primary key in table is at autoincrement limit\00")
(data (i32.const 256) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 320) "write\00")
(data (i32.const 336) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 400) "cannot decrement iterator at beginning of table\00")
(data (i32.const 448) "error reading iterator\00")
(data (i32.const 480) "read\00")
(data (i32.const 496) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 560) "Swap not found\00")
(data (i32.const 576) "EOS Owner should deposit funds\00")
(data (i32.const 608) "Funds was already withdrawn\00")
(data (i32.const 640) "Funds was refunded\00")
(data (i32.const 672) "Refund phase\00")
(data (i32.const 688) "active\00")
(data (i32.const 704) "eosio.token\00")
(data (i32.const 720) "transfer\00")
(data (i32.const 752) "cannot pass end iterator to modify\00")
(data (i32.const 800) "object passed to modify is not in multi_index\00")
(data (i32.const 848) "cannot modify objects in table of another contract\00")
(data (i32.const 912) "updater cannot change primary key when modifying an object\00")
(data (i32.const 976) "Refund is allowed only after full deposit\00")
(data (i32.const 1024) "Funds was withdrawn\00")
(data (i32.const 1056) "Funds was already refunded\00")
(data (i32.const 1088) "Withdraw phase\00")
(data (i32.const 1104) "Swap was processed already\00")
(data (i32.const 1136) "attempt to add asset with different symbol\00")
(data (i32.const 1184) "addition underflow\00")
(data (i32.const 1216) "addition overflow\00")
(data (i32.const 1248) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1312) "get\00")
(data (i32.const 9712) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 9808) "stoll\00")
(data (i32.const 9824) ": no conversion\00")
(data (i32.const 9840) ": out of range\00")
(data (i32.const 9872) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 10144) "\00\01\02\04\07\03\06\05\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "assert_sha256" (func $fimport$2 (param i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$9 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$10 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$16 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$17 (param i32)))
(import "env" "memcpy" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$20 (param i64)))
(import "env" "require_auth2" (func $fimport$21 (param i64 i64)))
(import "env" "send_inline" (func $fimport$22 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio10swaponline4openEyyNS_5assetER11checksum256" (func $5))
(export "_ZN5eosio10swaponline8withdrawEyR11checksum256" (func $13))
(export "_ZN5eosio10swaponline6refundEy" (func $21))
(export "_ZN5eosio10swaponline7depositERKNS_8currency8transferEy" (func $23))
(export "_ZN5eosio10swaponline5applyEyy" (func $25))
(export "apply" (func $34))
(export "malloc" (func $35))
(export "free" (func $38))
(export "_ZNSt3__15stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $43))
(export "__errno_location" (func $50))
(export "strtoll" (func $51))
(export "__shlim" (func $52))
(export "__intscan" (func $53))
(export "__shgetc" (func $54))
(export "__uflow" (func $55))
(export "__toread" (func $56))
(export "memcmp" (func $57))
(export "strlen" (func $58))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $59 $5 $21 $13)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [320])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [320])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [320])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [320])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [320])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9804])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [480])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [112])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($7 + [40])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [480])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((uint_32)($3 + [-8]) > (uint_32)[31]), [480])
	$1 = ($7 + [16])
	CALL memcpy($1, ($5 + [8]), [32])
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($3 = (($7 + [48]) + [24]))) = *(($1 + [24]))
	*(($5 = (($7 + [48]) + [16]))) = *(($1 + [16]))
	$4 = *($7)
	*($7 + [48]) = *($1)
	*($7 + [60]) = *(($1 + [12]))
	*($7 + [56]) = *(($1 + [8]))
	*((($7 + [80]) + [24])) = *($3)
	*((($7 + [80]) + [16])) = *($5)
	*($7 + [88]) = *($7 + [56])
	*($7 + [80]) = *($7 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 ($7 + [80])), (int_32 $6))
	*([0] + [4]) = ($7 + [112])
	return [1]
}

void .FUNC _ZN5eosio10swaponline6refundEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [144])
	*([0] + [4]) = $16
	$3 = *(($0 + [32]))
	$9 = *(($0 + [36]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$1 }
	$10 = ($9 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$9 = $10
	$7 = ($10 + [-24])
	$10 = $7
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [8])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$4 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$2), [496])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4103535724534431744, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $6($2, $10)
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$2), [496])
	
.LABEL $label$3
	$3 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($3, [560])
	CALL eosio_assert(((int_32)*($9 + [128]) != (int_32)[0]), [976])
	CALL eosio_assert(((int_32)*($9 + [128]) != (int_32)[2]), [1024])
	CALL eosio_assert(((int_32)*($9 + [128]) != (int_32)[3]), [1056])
	CALL require_auth(*($9 + [8]))
	CALL eosio_assert(((*($0 + [56]) + *($9 + [132])) <= (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000))), [1088])
	$4 = ($9 + [40])
	$5 = *($9 + [8])
	$6 = *($0)
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [688]
	$12 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$10 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [165])
	goto $label$8 
	
.LABEL $label$10
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$6
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$5 }
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [704]
	$14 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$16 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$7 = ($7 + [165])
	goto $label$14 
	
.LABEL $label$16
	$13 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$12
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$14 = ((int_64)$13 | (int_64)$14)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$11 }
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [720]
	$15 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$22 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$7 = ($7 + [165])
	goto $label$20 
	
.LABEL $label$22
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$18
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$17 }
	*(($16 + [16])) = [0]
	*($16 + [8]) = (int_64)0
	$10 = CALL strlen([736])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$26 }
	*($16 + [8]) = ($10 << [1])
	$7 = (($16 + [8]) | [1])
	if ( $10 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$8 = (($10 + [16]) & [-16])
	$7 = CALL $39($8)
	*($16 + [8]) = ($8 | [1])
	*($16 + [16]) = $7
	*($16 + [12]) = $10
	
.LABEL $label$25
	CALL memcpy($7, [736], $10)
	
.LABEL $label$24
	*(($7 + $10)) = [0]
	*((($16 + [24]) + [28])) = *(($4 + [12]))
	*((($16 + [24]) + [24])) = *(($4 + [8]))
	*((($16 + [24]) + [20])) = *(($4 + [4]))
	*($16 + [32]) = $5
	*($16 + [24]) = *($0)
	*($16 + [40]) = *($4)
	$10 = (($16 + [8]) + [8])
	*(($16 + [64])) = *($10)
	*($16 + [56]) = *($16 + [8])
	*($16 + [8]) = [0]
	*($16 + [12]) = [0]
	*($10) = [0]
	*($16 + [72]) = $14
	*($16 + [80]) = $15
	*(($10 = CALL $39([16]))) = $6
	*($10 + [8]) = $12
	*((($16 + [72]) + [32])) = [0]
	$7 = ($10 + [16])
	*((($16 + [72]) + [24])) = $7
	*((($16 + [72]) + [20])) = $7
	*($16 + [88]) = $10
	*($16 + [100]) = [0]
	*((($16 + [72]) + [36])) = [0]
	$10 = *($16 + [56])
	$7 = ( *((($16 + [24]) + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($7 + [32])
	$1 = (CASTING uint_64)(uint_32 $7)
	$7 = (($16 + [72]) + [28])
	
.LOOP $label$27:
	$10 = ($10 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$27 }
	if ( ($10 == 0) ){ goto $label$29 }
	CALL $14($7, $10)
	$7 = *(($16 + [104]))
	$10 = *(($16 + [100]))
	goto $label$28 
	
.LABEL $label$29
	$7 = [0]
	$10 = [0]
	
.LABEL $label$28
	*($16 + [116]) = $10
	*($16 + [112]) = $10
	*($16 + [120]) = $7
	*($16 + [128]) = ($16 + [112])
	*($16 + [136]) = ($16 + [24])
	CALL $15(($16 + [136]), ($16 + [128]))
	CALL $16(($16 + [112]), ($16 + [72]))
	$10 = *($16 + [112])
	CALL send_inline($10, (*($16 + [116]) - $10))
	$10 = *($16 + [112])
	if ( ($10 == 0) ){ goto $label$30 }
	*($16 + [116]) = $10
	CALL $40($10)
	
.LABEL $label$30
	$10 = *($16 + [100])
	if ( ($10 == 0) ){ goto $label$31 }
	*(($16 + [104])) = $10
	CALL $40($10)
	
.LABEL $label$31
	$10 = *($16 + [88])
	if ( ($10 == 0) ){ goto $label$32 }
	*(($16 + [92])) = $10
	CALL $40($10)
	
.LABEL $label$32
	if ( ((*(($16 + [56])) & [1]) == 0) ){ goto $label$33 }
	CALL $40(*(($16 + [64])))
	
.LABEL $label$33
	if ( ((*($16 + [8]) & [1]) == 0) ){ goto $label$34 }
	CALL $40(*(($16 + [16])))
	
.LABEL $label$34
	$1 = *(($9 + [8]))
	CALL eosio_assert($3, [752])
	CALL $22($2, $9, $1)
	*([0] + [4]) = ($16 + [144])
	return (unreachable)
	
.LABEL $label$23
	CALL $41(($16 + [8]))
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [320])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [320])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN5eosio10swaponline7depositERKNS_8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	if ( ((int_64)*($1) == (int_64)*($0 + [48])) ){ goto $label$1 }
	if ( ((int_64)*(($1 + [24])) != (int_64)1397703940) ){ goto $label$1 }
	$3 = CALL _ZNSt3__15stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($1 + [32]), [0], [10])
	$4 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$2 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$3:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$2 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$6 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)$6), [496])
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4103535724534431744, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $6($6, $8)
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)$6), [496])
	
.LABEL $label$4
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [560])
	CALL eosio_assert((*($7 + [128]) == 0), [1104])
	$3 = *($7 + [8])
	*($9 + [8]) = $1
	CALL eosio_assert($8, [752])
	CALL $24($6, $7, $3, ($9 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	*($1 + [128]) = [3]
	$3 = ($1 + [8])
	*(($11 = $12) + [16]) = *($3)
	$4 = ($1 + [16])
	*($11 + [24]) = *($4)
	$6 = *($1)
	CALL eosio_assert([1], [256])
	$7 = ($1 + [128])
	$5 = (($11 + [16]) + [8])
	$8 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [160])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [912])
	$10 = $12
	$9 = ($10 + [-128])
	*([0] + [4]) = $9
	*($11 + [4]) = $9
	*($11) = $9
	*($11 + [8]) = ($10 + [-3])
	*($11 + [32]) = $11
	*($11 + [44]) = $3
	*($11 + [40]) = $1
	*($11 + [48]) = $4
	*($11 + [52]) = ($1 + [24])
	*($11 + [56]) = ($1 + [40])
	*($11 + [60]) = ($1 + [64])
	*($11 + [64]) = ($1 + [96])
	*($11 + [68]) = $7
	*($11 + [72]) = ($1 + [132])
	CALL $11(($11 + [40]), ($11 + [32]))
	CALL db_update_i64(*(($1 + [140])), $2, $9, [125])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($11 + [40]) = *($3)
	if ( (CALL memcmp(($11 + [16]), ($11 + [40]), [8]) == 0) ){ goto $label$7 }
	$9 = *($1 + [144])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4103535724534431744, ($11 + [32]), $6)
	*(($1 + [144])) = $9
	
.LABEL $label$8
	CALL db_idx64_update($9, $2, ($11 + [40]))
	
.LABEL $label$7
	*($11 + [40]) = *($4)
	if ( (CALL memcmp($5, ($11 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [148])
	$9 = *($1)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$10 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4103535724534431743, ($11 + [32]), $6)
	*($1) = $9
	
.LABEL $label$10
	CALL db_idx64_update($9, $2, ($11 + [40]))
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [80])
}

void .FUNC _ZN5eosio10swaponline5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [704]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$8 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [720]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $26(($9 + [48]))
	CALL _ZN5eosio10swaponline7depositERKNS_8currency8transferEy($0, ($9 + [48]), $6)
	if ( ((*($9 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $40(*(($9 + [88])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)-6533262907872903168) ){ goto $label$7 }
	*($9 + [44]) = [0]
	*($9 + [40]) = [1]
	*($9) = *($9 + [40])
	CALL $27($0, $9)
	goto $label$7 
	
.LABEL $label$16
	*($9 + [28]) = [0]
	*($9 + [24]) = [2]
	*($9 + [16 align=4]) = *($9 + [24])
	CALL $29($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$15
	*($9 + [36]) = [0]
	*($9 + [32]) = [3]
	*($9 + [8 align=4]) = *($9 + [32])
	CALL $28($0, ($9 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	$4 = ($1 + [8])
	*(($10 = $9) + [16]) = *($4)
	$5 = ($1 + [16])
	*($10 + [24]) = *($5)
	$6 = *($1)
	$7 = ($1 + [48])
	$3 = *($3)
	CALL eosio_assert(((int_64)*(($3 + [24])) == (int_64)*($7)), [1136])
	$8 = ((int_64)*($1 + [40]) + (int_64)*($3 + [16]))
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [1216])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($1 + [32]))), [1248])
	$3 = ($1 + [128])
	if ( ((int_64)*($1 + [40]) < (int_64)*($1 + [24])) ){ goto $label$1 }
	*($3) = [1]
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [912])
	$7 = $9
	$9 = ($7 + [-128])
	*([0] + [4]) = $9
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($7 + [-3])
	*($10 + [32]) = $10
	*($10 + [44]) = $4
	*($10 + [40]) = $1
	*($10 + [48]) = $5
	*($10 + [52]) = ($1 + [24])
	*($10 + [56]) = ($1 + [40])
	*($10 + [60]) = ($1 + [64])
	*($10 + [64]) = ($1 + [96])
	*($10 + [68]) = $3
	*($10 + [72]) = ($1 + [132])
	CALL $11(($10 + [40]), ($10 + [32]))
	CALL db_update_i64(*(($1 + [140])), $2, $9, [125])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$9 = (($10 + [16]) + [8])
	*($10 + [40]) = *($4)
	if ( (CALL memcmp(($10 + [16]), ($10 + [40]), [8]) == 0) ){ goto $label$3 }
	$4 = *($1 + [144])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$4 }
	$4 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4103535724534431744, ($10 + [32]), $6)
	*(($1 + [144])) = $4
	
.LABEL $label$4
	CALL db_idx64_update($4, $2, ($10 + [40]))
	
.LABEL $label$3
	*($10 + [40]) = *($5)
	if ( (CALL memcmp($9, ($10 + [40]), [8]) == 0) ){ goto $label$5 }
	$9 = ($1 + [148])
	$1 = *($9)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4103535724534431743, ($10 + [32]), $6)
	*($9) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($10 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [80])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [192])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1398362884
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [256])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [160])
	*(($10 + [72])) = (int_64)0
	*(($10 + [64])) = (int_64)0
	*(($10 + [56])) = (int_64)0
	*($10 + [48]) = (int_64)0
	*($10 + [148]) = $6
	*($10 + [144]) = $6
	*($10 + [152]) = ($6 + $3)
	*($10 + [176]) = ($10 + [144])
	*($10 + [80]) = ($10 + [16])
	CALL $30(($10 + [80]), ($10 + [176]))
	$1 = ($10 + [48])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	*(($10 + [124])) = *(($10 + [44]))
	*(($8 = (($10 + [112]) + [8]))) = *((($10 + [16]) + [24]))
	*($10 + [116]) = *(($10 + [36]))
	$7 = *($10 + [16])
	*($10 + [112]) = *($10 + [32])
	$4 = *($10 + [24])
	*(($6 = (($10 + [80]) + [24]))) = *(($1 + [24]))
	*(($3 = (($10 + [80]) + [16]))) = *(($1 + [16]))
	*($10 + [88]) = *(($1 + [8]))
	*($10 + [80]) = *($1)
	*((($10 + [144]) + [24])) = *($6)
	*((($10 + [144]) + [16])) = *($3)
	*($10 + [152]) = *($10 + [88])
	*($10 + [144]) = *($10 + [80])
	*((($10 + [128]) + [8])) = *($8)
	*($10 + [128]) = *($10 + [112])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [128]) + [8]))
	*((($10 + [176]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [128])
	*($10 + [176]) = $5
	*($10) = $5
	CALL void $1((int_32 $7), (int_64 $4), (int_64 $10), (int_32 ($10 + [144])), (int_32 $9))
	*([0] + [4]) = ($10 + [192])
	return [1]
}

void .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [256])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [160])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $31($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $49 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $39($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $40($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_64 .FUNC _ZNSt3__15stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$3 = CALL strlen([9808])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($3 << [1])
	$6 = ($7 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$6 = CALL $39($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($6, [9808], $3)
	
.LABEL $label$4
	*(($6 + $3)) = [0]
	*($7 + [12]) = [0]
	$3 = *($0 + [8])
	$6 = *($0)
	$5 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($6 & [1]) )
	$4 = CALL strtoll($3, ($7 + [12]), $2)
	$0 = CALL __errno_location()
	$6 = *($0)
	*($0) = $5
	if ( ((int_32)$6 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($7 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $40(*($7 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [16])
	return $4
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $44($7)
	
.LABEL $label$1
	CALL $45($7)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $39(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $40($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $41 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $40 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $48($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $39($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $47($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $45 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $46($1, $0, [9824])
	CALL abort()
	(unreachable)
}

void .FUNC $44 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $46($1, $0, [9840])
	CALL abort()
	(unreachable)
}

int_64 .FUNC strtoll (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-9223372036854775808)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	$12 = $13
	*([0] + [4]) = $13
	$2 = *($0)
	$3 = *($0 + [4])
	$10 = *($3)
	$11 = ($10 + [24])
	$9 = *($11)
	if ( ((int_64)$9 != (int_64)-1) ){ goto $label$1 }
	$9 = (int_64)0
	$6 = ($10 + [8])
	$5 = CALL db_lowerbound_i64(*($6), *(($10 + [16])), (int_64)-4103535724534431744, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $6($6, $5)
	*($12 + [28]) = [0]
	*($12 + [24]) = $6
	$9 = *(*(CALL $10(($12 + [24])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($10 + [24])) = $9
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [192])
	*($1) = *($11)
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$10 = *($3 + [12])
	*($1 + [24]) = *($10)
	*(($1 + [32])) = *(($10 + [8]))
	CALL eosio_assert([1], [256])
	$6 = ($1 + [24])
	$5 = ($1 + [16])
	$4 = ($1 + [8])
	$9 = (int_64)5459781
	$10 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$11 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	
.LABEL $label$3
	CALL eosio_assert($11, [160])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	$10 = *($3 + [16])
	*($1 + [64]) = *($10)
	$9 = *(($10 + [8]))
	$7 = *(($10 + [16]))
	$8 = *(($10 + [24]))
	*($1 + [128]) = [0]
	*(($1 + [88])) = $8
	*(($1 + [80])) = $7
	*(($1 + [72])) = $9
	*($1 + [132]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$11 = $13
	$10 = ($11 + [-128])
	*([0] + [4]) = $10
	*($12 + [4]) = $10
	*($12) = $10
	*($12 + [8]) = ($11 + [-3])
	*($12 + [16]) = $12
	*($12 + [28]) = $4
	*($12 + [24]) = $1
	*($12 + [32]) = $5
	*($12 + [36]) = $6
	*($12 + [40]) = ($1 + [40])
	*($12 + [44]) = ($1 + [64])
	*($12 + [48]) = ($1 + [96])
	*($12 + [52]) = ($1 + [128])
	*($12 + [56]) = ($1 + [132])
	CALL $11(($12 + [24]), ($12 + [16]))
	$9 = *($1)
	*($1 + [140]) = CALL db_store_i64(*($2 + [8]), (int_64)-4103535724534431744, *(*($0 + [8])), $9, $10, [125])
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$10 = ($2 + [8])
	$9 = *($10)
	$11 = *(($0 + [8]))
	$7 = *($11)
	$8 = *($1)
	*($12 + [24]) = *(($1 + [8]))
	*($1 + [144]) = CALL db_idx64_store($9, (int_64)-4103535724534431744, $7, $8, ($12 + [24]))
	$9 = *($11)
	$7 = *($10)
	$8 = *($1)
	*($12 + [24]) = *(($1 + [16]))
	*(($1 + [148])) = CALL db_idx64_store($7, (int_64)-4103535724534431743, $9, $8, ($12 + [24]))
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $39(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $49($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $40($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $40($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [448])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $39([160])
	CALL $7($6)
	*($6 + [136]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [40])
	*($8 + [60]) = ($6 + [64])
	*($8 + [64]) = ($6 + [96])
	*($8 + [68]) = ($6 + [128])
	*($8 + [72]) = ($6 + [132])
	CALL $12(($8 + [40]), ($8 + [32]))
	*($6 + [144]) = [-1]
	*($6 + [140]) = $1
	*($6 + [148]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [140])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $40($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

int_32 .FUNC $7 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [160])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [160])
	*($0 + [128]) = [0]
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN5eosio10swaponline4openEyyNS_5assetER11checksum256 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [32]) = $1
	*($7 + [24]) = $2
	CALL require_auth($1)
	$5 = ($0 + [8])
	$6 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4103535724534431744, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $6($5, $6)
	
.LOOP $label$2:
	if ( ((int_64)*($6 + [8]) != (int_64)$1) ){ goto $label$3 }
	if ( ((int_64)*($6 + [16]) != (int_64)*($7 + [24])) ){ goto $label$3 }
	CALL eosio_assert(((int_32)((*($6 + [128]) | [1]) & [255]) == (int_32)[3]), [80])
	
.LABEL $label$3
	CALL eosio_assert([1], [128])
	$6 = CALL db_next_i64(*($6 + [140]), $7)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $6($5, $6)
	$1 = *($7 + [32])
	goto $label$2 
	
.LABEL $label$4
	$1 = *($7 + [32])
	
.LABEL $label$1
	*($7 + [12]) = $3
	*($7 + [16]) = $4
	*($7 + [4]) = ($7 + [32])
	*($7 + [8]) = ($7 + [24])
	*($7) = $0
	*($7 + [72]) = $1
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$3()), [16])
	*($7 + [48]) = $5
	*($7 + [52]) = $7
	*($7 + [56]) = ($7 + [72])
	$6 = CALL $39([160])
	CALL $7($6)
	*($6 + [136]) = $5
	CALL $8(($7 + [48]), $6)
	*($7 + [64]) = $6
	$1 = *($6)
	*($7 + [48]) = $1
	$3 = *($6 + [140])
	*($7 + [44]) = $3
	$4 = ($0 + [36])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [40]))) ){ goto $label$6 }
	*($5 + [8]) = $1
	*($5 + [16]) = $3
	*($7 + [64]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $9(($0 + [32]), ($7 + [64]), ($7 + [48]), ($7 + [44]))
	
.LABEL $label$5
	$6 = *($7 + [64])
	*($7 + [64]) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	CALL $40($6)
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [80])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $39($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $49($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $40($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [320])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $20(*($1), ($0 + [32]))
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $14($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [320])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [320])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $19(CALL $18($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	*($1 + [128]) = [2]
	$4 = ($1 + [8])
	*(($12 = $13) + [16]) = *($4)
	$5 = ($1 + [16])
	*($12 + [24]) = *($5)
	$7 = *($1)
	$3 = *($3)
	*($1 + [96]) = *($3)
	*(($1 + [120])) = *(($3 + [24]))
	*(($1 + [112])) = *(($3 + [16]))
	*(($1 + [104])) = *(($3 + [8]))
	CALL eosio_assert([1], [256])
	$9 = ($1 + [96])
	$8 = ($1 + [128])
	$6 = (($12 + [16]) + [8])
	$10 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$11 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [160])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [912])
	$11 = $13
	$3 = ($11 + [-128])
	*([0] + [4]) = $3
	*($12 + [4]) = $3
	*($12) = $3
	*($12 + [8]) = ($11 + [-3])
	*($12 + [32]) = $12
	*($12 + [44]) = $4
	*($12 + [40]) = $1
	*($12 + [48]) = $5
	*($12 + [52]) = ($1 + [24])
	*($12 + [56]) = ($1 + [40])
	*($12 + [60]) = ($1 + [64])
	*($12 + [64]) = $9
	*($12 + [68]) = $8
	*($12 + [72]) = ($1 + [132])
	CALL $11(($12 + [40]), ($12 + [32]))
	CALL db_update_i64(*(($1 + [140])), $2, $3, [125])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($12 + [40]) = *($4)
	if ( (CALL memcmp(($12 + [16]), ($12 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [144])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4103535724534431744, ($12 + [32]), $7)
	*(($1 + [144])) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($12 + [40]))
	
.LABEL $label$7
	*($12 + [40]) = *($5)
	if ( (CALL memcmp($6, ($12 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [148])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4103535724534431743, ($12 + [32]), $7)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($12 + [40]))
	
.LABEL $label$9
	*([0] + [4]) = ($12 + [80])
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [140]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [400])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4103535724534431744)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [336])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [336])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $6(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [320])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [320])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [320])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[31]), [320])
	CALL memcpy(*($2 + [4]), $3, [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[31]), [320])
	CALL memcpy(*($2 + [4]), $3, [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [320])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [320])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [480])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [480])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [480])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [480])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [480])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [480])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [480])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[31]), [480])
	CALL memcpy($3, *($2 + [4]), [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[31]), [480])
	CALL memcpy($3, *($2 + [4]), [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [480])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [480])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC _ZN5eosio10swaponline8withdrawEyR11checksum256 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [144])
	*([0] + [4]) = $17
	$4 = *(($0 + [32]))
	$10 = *(($0 + [36]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$1 }
	$11 = ($10 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$1 }
	$10 = $11
	$8 = ($11 + [-24])
	$11 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [8])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$4 }
	$10 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [136]) == (int_32)$3), [496])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$11 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4103535724534431744, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $6($3, $11)
	CALL eosio_assert(((int_32)*($10 + [136]) == (int_32)$3), [496])
	
.LABEL $label$3
	$4 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($4, [560])
	CALL require_auth(*($10 + [16]))
	CALL eosio_assert(((int_32)*($10 + [128]) != (int_32)[0]), [576])
	CALL eosio_assert(((int_32)*($10 + [128]) != (int_32)[2]), [608])
	CALL eosio_assert(((int_32)*($10 + [128]) != (int_32)[3]), [640])
	CALL eosio_assert(((uint_32)(*($0 + [56]) + *($10 + [132])) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000))), [672])
	CALL assert_sha256($2, [32], ($10 + [64]))
	$5 = ($10 + [40])
	$6 = *($10 + [16])
	$7 = *($0)
	$1 = (int_64)0
	$12 = (int_64)59
	$11 = [688]
	$13 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$10 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$8 = ($8 + [165])
	goto $label$8 
	
.LABEL $label$10
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$6
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$5 }
	$1 = (int_64)0
	$12 = (int_64)59
	$11 = [704]
	$15 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$16 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$8 = ($8 + [165])
	goto $label$14 
	
.LABEL $label$16
	$14 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$12
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$15 = ((int_64)$14 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$11 }
	$1 = (int_64)0
	$12 = (int_64)59
	$11 = [720]
	$16 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$22 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$8 = ($8 + [165])
	goto $label$20 
	
.LABEL $label$22
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$18
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$17 }
	*(($17 + [16])) = [0]
	*($17 + [8]) = (int_64)0
	$11 = CALL strlen([736])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$26 }
	*($17 + [8]) = ($11 << [1])
	$8 = (($17 + [8]) | [1])
	if ( $11 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$9 = (($11 + [16]) & [-16])
	$8 = CALL $39($9)
	*($17 + [8]) = ($9 | [1])
	*($17 + [16]) = $8
	*($17 + [12]) = $11
	
.LABEL $label$25
	CALL memcpy($8, [736], $11)
	
.LABEL $label$24
	*(($8 + $11)) = [0]
	*((($17 + [24]) + [28])) = *(($5 + [12]))
	*((($17 + [24]) + [24])) = *(($5 + [8]))
	*((($17 + [24]) + [20])) = *(($5 + [4]))
	*($17 + [32]) = $6
	*($17 + [24]) = *($0)
	*($17 + [40]) = *($5)
	$11 = (($17 + [8]) + [8])
	*(($17 + [64])) = *($11)
	*($17 + [56]) = *($17 + [8])
	*($17 + [8]) = [0]
	*($17 + [12]) = [0]
	*($11) = [0]
	*($17 + [72]) = $15
	*($17 + [80]) = $16
	*(($11 = CALL $39([16]))) = $7
	*($11 + [8]) = $13
	*((($17 + [72]) + [32])) = [0]
	$8 = ($11 + [16])
	*((($17 + [72]) + [24])) = $8
	*((($17 + [72]) + [20])) = $8
	*($17 + [88]) = $11
	*($17 + [100]) = [0]
	*((($17 + [72]) + [36])) = [0]
	$11 = *($17 + [56])
	$8 = ( *((($17 + [24]) + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$11 = ($8 + [32])
	$1 = (CASTING uint_64)(uint_32 $8)
	$8 = (($17 + [72]) + [28])
	
.LOOP $label$27:
	$11 = ($11 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$27 }
	if ( ($11 == 0) ){ goto $label$29 }
	CALL $14($8, $11)
	$8 = *(($17 + [104]))
	$11 = *(($17 + [100]))
	goto $label$28 
	
.LABEL $label$29
	$8 = [0]
	$11 = [0]
	
.LABEL $label$28
	*($17 + [116]) = $11
	*($17 + [112]) = $11
	*($17 + [120]) = $8
	*($17 + [128]) = ($17 + [112])
	*($17 + [136]) = ($17 + [24])
	CALL $15(($17 + [136]), ($17 + [128]))
	CALL $16(($17 + [112]), ($17 + [72]))
	$11 = *($17 + [112])
	CALL send_inline($11, (*($17 + [116]) - $11))
	$11 = *($17 + [112])
	if ( ($11 == 0) ){ goto $label$30 }
	*($17 + [116]) = $11
	CALL $40($11)
	
.LABEL $label$30
	$11 = *($17 + [100])
	if ( ($11 == 0) ){ goto $label$31 }
	*(($17 + [104])) = $11
	CALL $40($11)
	
.LABEL $label$31
	$11 = *($17 + [88])
	if ( ($11 == 0) ){ goto $label$32 }
	*(($17 + [92])) = $11
	CALL $40($11)
	
.LABEL $label$32
	if ( ((*(($17 + [56])) & [1]) == 0) ){ goto $label$33 }
	CALL $40(*(($17 + [64])))
	
.LABEL $label$33
	if ( ((*($17 + [8]) & [1]) == 0) ){ goto $label$34 }
	CALL $40(*(($17 + [16])))
	
.LABEL $label$34
	$1 = *($10 + [8])
	*($17 + [24]) = $2
	CALL eosio_assert($4, [752])
	CALL $17($3, $10, $1, ($17 + [24]))
	*([0] + [4]) = ($17 + [144])
	return (unreachable)
	
.LABEL $label$23
	CALL $41(($17 + [8]))
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $37($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9712])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9798]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9800])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9798]) = [1]
	$7 = ($7 << [16])
	*([0] + [9800]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9800])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9800]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9798]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9798]) = [1]
	$3 = ($3 << [16])
	*([0] + [9800]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9800])
	
.LABEL $label$8
	*([0] + [9800]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($3 + [16])) = $0
	*(($3 + [24])) = (int_64)-1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = [0]
	*($3 + [8]) = $0
	*($3) = $0
	*(($3 + [44])) = [0]
	*($3 + [48]) = $0
	*($3 + [56]) = [300]
	CALL _ZN5eosio10swaponline5applyEyy($3, $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $36([1316], $0)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $33($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $42($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $39($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $42($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $40($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $41($7)
	return (unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1312])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $14($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [480])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [480])
	CALL memcpy(($0 + [32]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $32($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [480])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [480])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $59 ()
{
	(unreachable)
}

int_32 .FUNC __errno_location ()
{
	return [9856]
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9700])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9508]
	$1 = (((int_32)$2 * (int_32)[12]) + [9508])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [9873])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [9873])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [9873]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [9873]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [10144]))
	$10 = *(($13 + [9873]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [9873]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [9873]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [9873]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [9873])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [9873])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}