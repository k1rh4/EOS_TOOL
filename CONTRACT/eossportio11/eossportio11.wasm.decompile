(data (i32.const 4) "@j\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "transfer\00")
(data (i32.const 48) "must pay with EOS token\00")
(data (i32.const 80) "Send Bonus OK\00")
(data (i32.const 96) "buy\00")
(data (i32.const 112) ",seller:\00")
(data (i32.const 128) ",index:\00")
(data (i32.const 144) "sell\00")
(data (i32.const 160) "call sell\00")
(data (i32.const 176) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 240) "inning not found\00")
(data (i32.const 272) "firstchance size error\00")
(data (i32.const 304) "min coins 100 EOS\00")
(data (i32.const 336) "max coins 100000 EOS\00")
(data (i32.const 368) "time error\00")
(data (i32.const 384) "macauIndex value error,must be between 91 and 109\00")
(data (i32.const 448) "macauValue value error,must be between 3333 and 6667\00")
(data (i32.const 512) "sum must less then 10000\00")
(data (i32.const 544) "sum must large then 9000\00")
(data (i32.const 576) "sell() totalamount.size()=\00")
(data (i32.const 608) " sell(): \00")
(data (i32.const 624) ",\00")
(data (i32.const 640) " is added\00")
(data (i32.const 656) "<(<\14\14")
(data (i32.const 672) "\03\02\1f\08\02")
(data (i32.const 688) "cannot create objects in table of another contract\00")
(data (i32.const 752) "write\00")
(data (i32.const 768) "error reading iterator\00")
(data (i32.const 800) "read\00")
(data (i32.const 816) "get\00")
(data (i32.const 832) "min buy 0.1 EOS\00")
(data (i32.const 848) "amount out of sell.maxbuy\00")
(data (i32.const 880) " is updated\00")
(data (i32.const 896) " buy(): \00")
(data (i32.const 912) "cannot pass end iterator to modify\00")
(data (i32.const 960) "object passed to modify is not in multi_index\00")
(data (i32.const 1008) "cannot modify objects in table of another contract\00")
(data (i32.const 1072) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1136) "the inning is not found\00")
(data (i32.const 1168) "the inning is no result now\00")
(data (i32.const 1200) "the sells is not found\00")
(data (i32.const 1232) "the ratio must between 0.95 ~ 0.99\00")
(data (i32.const 1280) "the sells was finished\00")
(data (i32.const 1312) "result \00")
(data (i32.const 1328) ":\00")
(data (i32.const 1344) " => \00")
(data (i32.const 1360) " overflow: \00")
(data (i32.const 1376) " is not equal about \00")
(data (i32.const 1408) " bonus = \00")
(data (i32.const 1424) "invalid symbol name\00")
(data (i32.const 1456) "active\00")
(data (i32.const 1472) "http://www.eosSport.io,getbonus\00")
(data (i32.const 1504) "cannot increment end iterator\00")
(data (i32.const 1536) " buybonus = \00")
(data (i32.const 1552) " sellbonus = \00")
(data (i32.const 1568) "http://football.guess.one,bonus\00")
(data (i32.const 1600) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1664) " inningresult(): \00")
(data (i32.const 1696) " is not found\00")
(data (i32.const 1712) "cannot pass end iterator to erase\00")
(data (i32.const 1760) "object passed to erase is not in multi_index\00")
(data (i32.const 1808) "cannot erase objects in table of another contract\00")
(data (i32.const 1872) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1936) "the buys is not found\00")
(data (i32.const 1968) "the bonus is send\00")
(data (i32.const 2000) " no error\00")
(data (i32.const 2016) " addinning(): \00")
(data (i32.const 2032) " error round\00")
(data (i32.const 2048) " addseasonround(): \00")
(data (i32.const 2080) ".\00")
(data (i32.const 2096) "o12345btsq\00")
(data (i32.const 2108) "@\08\00\00")
(data (i32.const 2112) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 2160) " addseasonteam(): \00")
(data (i32.const 2192) " error number\00")
(data (i32.const 2208) " addseason(): \00")
(data (i32.const 2224) "no\00")
(data (i32.const 2240) " delteam(): \00")
(data (i32.const 2256) " is deleted\00")
(data (i32.const 2272) " addteam(): \00")
(data (i32.const 2288) " delcomp(): \00")
(data (i32.const 2304) " addcomp(): \00")
(data (i32.const 10720) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$12 (param i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "printdf" (func $fimport$16 (param f64)))
(import "env" "printn" (func $fimport$17 (param i64)))
(import "env" "prints" (func $fimport$18 (param i32)))
(import "env" "printui" (func $fimport$19 (param i64)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$21 (param i64)))
(import "env" "require_auth2" (func $fimport$22 (param i64 i64)))
(import "env" "send_inline" (func $fimport$23 (param i32 i32)))
(import "env" "sha256" (func $fimport$24 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "now" (func $0))
(export "_ZeqRK11checksum256S1_" (func $1))
(export "_ZeqRK11checksum160S1_" (func $2))
(export "_ZneRK11checksum160S1_" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN12sportlottery5applyEyy" (func $5))
(export "apply" (func $140))
(export "malloc" (func $141))
(export "free" (func $144))
(export "memcmp" (func $157))
(export "strlen" (func $158))
(table $0 14 14 anyfunc)
(elem (i32.const 0) $159 $13 $20 $9 $16 $26 $24 $28 $7 $11 $29 $18 $14 $22)



void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($0 + [24]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [688])
	*(($4 = CALL $145([64])) + [48]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = *(*($3 + [4]))
	*($4 + [16]) = *(*($3 + [8]))
	*($4 + [24]) = *(*($3 + [12]))
	*($4 + [32]) = *(*($3 + [16]))
	*($4 + [36]) = [0]
	*($4 + [40]) = (int_64)0
	*($8 + [72]) = (($8 + [16]) + [48])
	*($8 + [68]) = ($8 + [16])
	*($8 + [64]) = ($8 + [16])
	CALL $90(($8 + [64]), $4)
	$5 = *($4)
	*($4 + [52]) = CALL db_store_i64(*($1 + [8]), (int_64)8423677108051509248, $2, $5, ($8 + [16]), [48])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [64]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [64]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $62(($1 + [24]), ($8 + [64]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [64])
	*($8 + [64]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $146($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[1]), [800])
	CALL memcpy(($0 + [24]), *($1 + [4]), [2])
	*($1 + [4]) = (*($1 + [4]) + [2])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	*($1 + [56]) = *(*($3))
	$4 = *($1)
	*($1 + [64]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1072])
	*($5 + [72]) = ($5 + [58])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $69(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [58])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	*($1 + [56]) = *(*($3))
	$4 = *($1)
	*($1 + [64]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1072])
	*($5 + [72]) = ($5 + [58])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $69(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [58])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [132]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [120]) = (*($1 + [120]) + [1])
	CALL eosio_assert([1], [1072])
	*(($3 = $6)) = [0]
	CALL $46($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $47($3, $1)
	CALL db_update_i64(*($1 + [136]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [132]) == (int_32)$0), [1760])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1808])
	$3 = *($0 + [24])
	$6 = ($0 + [28])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$7 = ([0] - $3)
	$5 = ($4 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$1 }
	$4 = $5
	$8 = ($5 + [-24])
	$5 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [1872])
	$8 = ($4 + [-24])
	$5 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	$3 = ([0] - $5)
	$5 = $8
	
.LOOP $label$5:
	$8 = ($5 + [24])
	$7 = *($8)
	*($8) = [0]
	$4 = *($5)
	*($5) = $7
	if ( ($4 == 0) ){ goto $label$6 }
	$7 = *($4 + [76])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [80])) = $7
	CALL $146($7)
	
.LABEL $label$7
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [68])) = $7
	CALL $146($7)
	
.LABEL $label$8
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [56])) = $7
	CALL $146($7)
	
.LABEL $label$9
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [44])) = $7
	CALL $146($7)
	
.LABEL $label$10
	CALL $146($4)
	
.LABEL $label$6
	*(($5 + [16])) = *(($5 + [40]))
	*(($5 + [8])) = *(($5 + [32]))
	$5 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$7 = *($5 + [76])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($5 + [80])) = $7
	CALL $146($7)
	
.LABEL $label$13
	$7 = *($5 + [64])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($5 + [68])) = $7
	CALL $146($7)
	
.LABEL $label$14
	$7 = *($5 + [52])
	if ( ($7 == 0) ){ goto $label$15 }
	*(($5 + [56])) = $7
	CALL $146($7)
	
.LABEL $label$15
	$7 = *($5 + [40])
	if ( ($7 == 0) ){ goto $label$16 }
	*(($5 + [44])) = $7
	CALL $146($7)
	
.LABEL $label$16
	CALL $146($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [136]))
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [1760])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1808])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1872])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $146($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $146($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [1760])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1808])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1872])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $146($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $146($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $139($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $148($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $145($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $148($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $146($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $147($7)
	return (unreachable)
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [25]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	$4 = *($1)
	$5 = *(*($3))
	*($1) = $5
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [20]) = *(*($3 + [12]))
	*($1 + [24]) = *(*($3 + [16]))
	CALL eosio_assert(((int_64)$4 == (int_64)$5), [1072])
	*($6 + [40]) = ($6 + [26])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	CALL $123(($6 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $6, [26])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [768])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $145([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [800])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [800])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $132(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $146($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	$4 = *($1)
	$5 = *(*($3))
	*($1) = $5
	*($1 + [8]) = *(*($3 + [4]))
	CALL eosio_assert(((int_64)$4 == (int_64)$5), [1072])
	CALL eosio_assert([1], [752])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [752])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $6, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $145(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $146($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $146($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [752])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [752])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-3851373727820283904, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [688])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $145([40])) + [24]) = $1
	CALL $136(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $128(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $146($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $145([48])) + [32]) = $0
	CALL $124(($8 + [32]), $6)
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $125(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $146($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($4 + [8]))
	CALL eosio_assert([1], [752])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [752])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [752])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)4982482458683713024, *(*($0 + [8])), $3, $5, [24])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $138($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [688])
	*(($4 = CALL $145([48])) + [32]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = *(*($3 + [4]))
	*($4 + [16]) = *(*($3 + [8]))
	*($4 + [20]) = *(*($3 + [12]))
	*($4 + [24]) = *(*($3 + [16]))
	*($8 + [56]) = (($8 + [16]) + [26])
	*($8 + [52]) = ($8 + [16])
	*($8 + [48]) = ($8 + [16])
	CALL $123(($8 + [48]), $4)
	$5 = *($4)
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)-4427730786728280064, $2, $5, ($8 + [16]), [26])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [48]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [48]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $125(($1 + [24]), ($8 + [48]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $146($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [64])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $145(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $146($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [768])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $145([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [800])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [800])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [800])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $128(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $146($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [1]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [752])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[1]), [752])
	CALL memcpy(*($2), $5, [2])
	$7 = (*($2) + [2])
	*($2) = $7
	$5 = ($5 + [2])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [752])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [752])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $145(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $146($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $146($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $145(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $44(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$2 = *($0)
	CALL $45(*($0 + [4]), $1)
	*(($6 = $5)) = [0]
	CALL $46($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $47($6, $1)
	$4 = *($1)
	*($1 + [136]) = CALL db_store_i64(*($2 + [8]), (int_64)-4421659622822117376, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [76])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [80])) = $3
	CALL $146($3)
	
.LABEL $label$6
	$3 = *($2 + [64])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [68])) = $3
	CALL $146($3)
	
.LABEL $label$7
	$3 = *($2 + [52])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [56])) = $3
	CALL $146($3)
	
.LABEL $label$8
	$3 = *($2 + [40])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($2 + [44])) = $3
	CALL $146($3)
	
.LABEL $label$9
	CALL $146($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $146($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $145(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $146($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $48(CALL $50(CALL $49(CALL $48($0, ($1 + [40])), ($1 + [52])), ($1 + [64])), ($1 + [76]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [92]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [100]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [124]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*($0) + [40])
	*($0) = $6
	$3 = *($1 + [40])
	$2 = *(($1 + [44]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$2
	*($0) = $6
	$3 = *($1 + [52])
	$2 = *(($1 + [56]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [1]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	$6 = (($4 & [-2]) + $6)
	
.LABEL $label$4
	*($0) = $6
	$3 = *($1 + [64])
	$2 = *(($1 + [68]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [2]))
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	$6 = (($4 & [-4]) + $6)
	
.LABEL $label$6
	*($0) = $6
	$1 = *($1 + [76])
	$2 = *(($1 + [80]))
	$3 = ($2 - $1)
	$5 = (CASTING uint_64)(uint_32 int_32($3 >> [3]))
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$6 = (($3 & [-8]) + $6)
	
.LABEL $label$8
	*($0) = ($6 + [44])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = *($0)
	$3 = ($1 + [40])
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$1 }
	CALL $51($3, *($2), *($2 + [4]))
	
.LABEL $label$1
	*($1) = *(*($0 + [4]))
	*($1 + [8]) = *(*($0 + [8]))
	*($1 + [16]) = *(*($0 + [12]))
	*($1 + [24]) = [31]
	*($1 + [28]) = [9700]
	*($1 + [32]) = *(*($0 + [16]))
	$2 = *($0 + [20])
	$3 = ($1 + [52])
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	CALL $52($3, *($2), *($2 + [4]))
	
.LABEL $label$2
	$2 = *($0 + [24])
	$3 = ($1 + [64])
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$3 }
	CALL $53($3, *($2), *($2 + [4]))
	
.LABEL $label$3
	$2 = *($0 + [28])
	$3 = ($1 + [76])
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	CALL $51($3, *($2), *($2 + [4]))
	
.LABEL $label$4
	$4 = CALL current_time()
	*($1 + [92]) = [0]
	*($1 + [96]) = [0]
	*($1 + [100]) = [0]
	*($1 + [88]) = ((uint_64)$4 / (uint_64)(int_64)1000000)
	*($1 + [104]) = ((uint_64)((int_64)*(($1 + [28])) * (int_64)*(*(($0 + [16])))) / (uint_64)(int_64)10000)
	*($1 + [112]) = (int_64)0
	$0 = *(*($0 + [32]))
	*($1 + [120]) = [0]
	*($1 + [124]) = $0
	*($1 + [128]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [76])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($2 + [80])) = $3
	CALL $146($3)
	
.LABEL $label$4
	$3 = *($2 + [64])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [68])) = $3
	CALL $146($3)
	
.LABEL $label$5
	$3 = *($2 + [52])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [56])) = $3
	CALL $146($3)
	
.LABEL $label$6
	$3 = *($2 + [40])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [44])) = $3
	CALL $146($3)
	
.LABEL $label$7
	CALL $146($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $146($2)
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $145(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $146($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $146($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [48])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	$7 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $1)
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [800])
	CALL memcpy($9, $7, [8])
	$3 = ($1 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [800])
	$4 = ($9 + [8])
	CALL memcpy($4, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [800])
	$3 = ($9 + [16])
	CALL memcpy($3, ($7 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	$5 = *($3)
	$6 = *($4)
	*($9 + [40]) = *($9)
	*($9 + [32]) = $6
	*($9 + [24]) = $5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	CALL void $1((int_32 ($9 + [40])), (int_32 ($9 + [32])), (int_32 ($9 + [24])), (int_32 $8))
	*([0] + [4]) = ($9 + [48])
	return [1]
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$3 = *($0)
	*($5) = $3
	*($5 + [8]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)4982482458683713024, *($1))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $126($5, $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$5), [176])
	CALL eosio_assert([1], [1712])
	CALL eosio_assert([1], [1504])
	$2 = CALL db_next_i64(*($0 + [28]), ($5 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	CALL $126($5, $2)
	
.LABEL $label$4
	CALL $127($5, $0)
	CALL prints([2288])
	CALL printui(*($1))
	CALL prints([2256])
	$2 = *($5 + [24])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL prints([2288])
	CALL printui(*($1))
	CALL prints([1696])
	$2 = *($5 + [24])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $146($1)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($5 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $2
	
.LABEL $label$5
	*($4) = $2
	CALL $146($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1600])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1424])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $137($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [56])) = [0]
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$5 = *($0)
	*($6 + [24]) = $5
	*($6 + [32]) = $5
	$4 = CALL db_find_i64($5, $5, (int_64)4982482458683713024, *($1))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL $126(($6 + [24]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($6 + [24])), [176])
	$5 = *($0)
	*($6 + [12]) = $2
	*($6 + [16]) = $3
	*($6 + [8]) = $1
	CALL eosio_assert([1], [912])
	CALL $135(($6 + [24]), $4, $5, ($6 + [8]))
	CALL prints([2304])
	CALL printui(*($1))
	CALL prints([880])
	$2 = *($6 + [48])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($6 + [12]) = $2
	*($6 + [16]) = $3
	*($6 + [8]) = $1
	CALL $134($6, ($6 + [24]), $5, ($6 + [8]))
	CALL prints([2304])
	CALL printui(*($1))
	CALL prints([640])
	$2 = *($6 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($6 + [52])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $146($1)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($3) = $2
	CALL $146($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN12sportlottery5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [256])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$8 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $6(($9 + [208]))
	CALL eosio_assert(((int_64)*(($9 + [232])) == (int_64)1397703940), [48])
	CALL $30($0, ($9 + [208]))
	if ( ((*($9 + [240]) & [1]) == 0) ){ goto $label$7 }
	CALL $146(*(($9 + [248])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 <= (int_64)3626406064938811391) ){ goto $label$26 }
	if ( ((int_64)$2 <= (int_64)5378050755650142207) ){ goto $label$25 }
	if ( ((int_64)$2 > (int_64)7111881242768834559) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)5378050755650142208) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)5378306319985934336) ){ goto $label$7 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [1]
	*($9 + [24 align=4]) = *($9 + [176])
	CALL $10($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$26
	if ( ((int_64)$2 > (int_64)3626376722410110975) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)-4420683452005744640) ){ goto $label$21 }
	if ( ((int_64)$2 == (int_64)3626112703103238144) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)3626217720210522112) ){ goto $label$7 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [2]
	*($9 + [56 align=4]) = *($9 + [144])
	CALL $21($0, ($9 + [56]))
	goto $label$7 
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)3626406064938811392) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)3680915208907784192) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)5378012958150361088) ){ goto $label$7 }
	*($9 + [196]) = [0]
	*($9 + [192]) = [3]
	*($9 + [8 align=4]) = *($9 + [192])
	CALL $10($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$24
	if ( ((int_64)$2 == (int_64)3626376722410110976) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)3626388476319498240) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)3626396781668990976) ){ goto $label$7 }
	*($9 + [164]) = [0]
	*($9 + [160]) = [4]
	*($9 + [40 align=4]) = *($9 + [160])
	CALL $17($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$23
	if ( ((int_64)$2 == (int_64)7111881242768834560) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)8423677107695428496) ){ goto $label$7 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [5]
	*($9 + [80 align=4]) = *($9 + [120])
	CALL $27($0, ($9 + [80]))
	goto $label$7 
	
.LABEL $label$22
	*($9 + [132]) = [0]
	*($9 + [128]) = [6]
	*($9 + [72 align=4]) = *($9 + [128])
	CALL $25($0, ($9 + [72]))
	goto $label$7 
	
.LABEL $label$21
	*($9 + [116]) = [0]
	*($9 + [112]) = [7]
	*($9 + [88 align=4]) = *($9 + [112])
	CALL $25($0, ($9 + [88]))
	goto $label$7 
	
.LABEL $label$20
	*($9 + [204]) = [0]
	*($9 + [200]) = [8]
	*($9) = *($9 + [200])
	CALL $8($0, $9)
	goto $label$7 
	
.LABEL $label$19
	*($9 + [188]) = [0]
	*($9 + [184]) = [9]
	*($9 + [16 align=4]) = *($9 + [184])
	CALL $12($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$18
	*($9 + [108]) = [0]
	*($9 + [104]) = [10]
	*($9 + [96 align=4]) = *($9 + [104])
	CALL $25($0, ($9 + [96]))
	goto $label$7 
	
.LABEL $label$17
	*($9 + [156]) = [0]
	*($9 + [152]) = [11]
	*($9 + [48 align=4]) = *($9 + [152])
	CALL $19($0, ($9 + [48]))
	goto $label$7 
	
.LABEL $label$16
	*($9 + [172]) = [0]
	*($9 + [168]) = [12]
	*($9 + [32 align=4]) = *($9 + [168])
	CALL $15($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$15
	*($9 + [140]) = [0]
	*($9 + [136]) = [13]
	*($9 + [64 align=4]) = *($9 + [136])
	CALL $23($0, ($9 + [64]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [256])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC memory ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 _ZeqRK11checksum256S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*($7 + [94]) = $2
	*($7 + [88]) = $3
	*($7 + [84]) = $4
	CALL require_auth(*($0))
	CALL eosio_assert(((($2 + [-1]) & [65535]) <= [9999]), [2192])
	*(($7 + [72])) = [0]
	*($7 + [56]) = (int_64)-1
	*($7 + [64]) = (int_64)0
	$5 = *($0)
	*($7 + [40]) = $5
	*($7 + [48]) = $5
	$6 = CALL $119($1, $2)
	*($7 + [32]) = $6
	$2 = CALL db_find_i64($5, $5, (int_64)-4427730786728280064, $6)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $121(($7 + [40]), $2)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($7 + [40])), [176])
	$5 = *($0)
	*($7 + [12]) = $1
	*($7 + [8]) = ($7 + [32])
	*($7 + [16]) = ($7 + [94])
	*($7 + [20]) = ($7 + [88])
	*($7 + [24]) = ($7 + [84])
	CALL eosio_assert([1], [912])
	CALL $122(($7 + [40]), $2, $5, ($7 + [8]))
	$5 = *($7 + [32])
	CALL prints([2208])
	CALL printn($5)
	CALL prints([880])
	$1 = *($7 + [64])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($7 + [12]) = $1
	*($7 + [8]) = ($7 + [32])
	*($7 + [16]) = ($7 + [94])
	*($7 + [20]) = ($7 + [88])
	*($7 + [24]) = ($7 + [84])
	CALL $120($7, ($7 + [40]), $5, ($7 + [8]))
	$5 = *($7 + [32])
	CALL prints([2208])
	CALL printn($5)
	CALL prints([640])
	$1 = *($7 + [64])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($7 + [68])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $146($0)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($7 + [64]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $1
	
.LABEL $label$4
	*($4) = $1
	CALL $146($2)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [16]) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [20 align=4]) = (int_64)0
	*($6 + [36]) = $1
	*($6 + [32]) = $1
	*($6 + [40]) = ($1 + $3)
	*($6 + [48]) = ($6 + [32])
	*($6 + [56]) = ($6 + [8])
	CALL $118(($6 + [56]), ($6 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$3 = *(($6 + [24]))
	$7 = *(($6 + [20]))
	$4 = *(($6 + [16]))
	*($6 + [32]) = *($6 + [8])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 + [32])), (int_32 ($4 & [65535])), (int_32 $7), (int_32 $3), (int_32 $5))
	*([0] + [4]) = ($6 + [64])
	return [1]
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	*($7 + [63]) = $3
	*($7 + [62]) = $4
	CALL require_auth(*($0))
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0)
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	*($7 + [64]) = *($1)
	*($7 + [72]) = *($2)
	CALL sha256(($7 + [64]), [16], ($7 + [80]))
	$6 = *($7 + [80])
	*($7 + [64]) = $6
	$4 = CALL db_find_i64($5, $5, (int_64)-4427730786020184064, $6)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL $113(($7 + [16]), $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($7 + [16])), [176])
	$5 = *($0)
	*($7 + [84]) = $1
	*($7 + [88]) = $2
	*($7 + [80]) = ($7 + [64])
	*($7 + [92]) = ($7 + [63])
	*($7 + [96]) = ($7 + [62])
	CALL eosio_assert([1], [912])
	CALL $114(($7 + [16]), $4, $5, ($7 + [80]))
	CALL prints([2160])
	CALL printui(*($7 + [64]))
	CALL prints([880])
	$1 = *($7 + [40])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($7 + [84]) = $1
	*($7 + [88]) = $2
	*($7 + [80]) = ($7 + [64])
	*($7 + [92]) = ($7 + [63])
	*($7 + [96]) = ($7 + [62])
	CALL $112(($7 + [8]), ($7 + [16]), $5, ($7 + [80]))
	CALL prints([2160])
	CALL printui(*($7 + [64]))
	CALL prints([640])
	$1 = *($7 + [40])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($7 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $146($2)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $1
	
.LABEL $label$4
	*($4) = $1
	CALL $146($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [112])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = [0]
	*($6 + [36]) = $1
	*($6 + [32]) = $1
	*($6 + [40]) = ($1 + $3)
	*($6 + [48]) = ($6 + [32])
	*($6 + [56]) = ($6 + [8])
	CALL $111(($6 + [56]), ($6 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$3 = *(($6 + [25]))
	$7 = *(($6 + [24]))
	$4 = *(($6 + [16]))
	*($6 + [32]) = *($6 + [8])
	*($6 + [56]) = $4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 + [32])), (int_32 ($6 + [56])), (int_32 ($7 & [255])), (int_32 ($3 & [255])), (int_32 $5))
	*([0] + [4]) = ($6 + [64])
	return [1]
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [800])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$4 = *($0)
	*($5 + [24]) = $4
	*($5 + [32]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)-3851373727820283904, *($1))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL $130(($5 + [24]), $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($5 + [24])), [176])
	$4 = *($0)
	*($5 + [20]) = $2
	*($5 + [16]) = $1
	CALL eosio_assert([1], [912])
	CALL $131(($5 + [24]), $3, $4, ($5 + [16]))
	CALL prints([2272])
	CALL printui(*($1))
	CALL prints([880])
	$2 = *($5 + [48])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0)
	*($5 + [20]) = $2
	*($5 + [16]) = $1
	CALL $129(($5 + [8]), ($5 + [24]), $4, ($5 + [16]))
	CALL prints([2272])
	CALL printui(*($1))
	CALL prints([640])
	$2 = *($5 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($5 + [52])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $146($1)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($3) = $2
	CALL $146($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [800])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [800])
	$3 = ($7 + [8])
	CALL memcpy($3, ($5 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	$4 = *($3)
	*($7 + [24]) = *($7)
	*($7 + [16]) = $4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 ($7 + [24])), (int_32 ($7 + [16])), (int_32 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$3 = *($0)
	*($5) = $3
	*($5 + [8]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)4982482458683713024, *($1))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $126($5, $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$5), [176])
	CALL eosio_assert([1], [1712])
	CALL eosio_assert([1], [1504])
	$2 = CALL db_next_i64(*($0 + [28]), ($5 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	CALL $126($5, $2)
	
.LABEL $label$4
	CALL $127($5, $0)
	CALL prints([2240])
	CALL printui(*($1))
	CALL prints([2256])
	$2 = *($5 + [24])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL prints([2240])
	CALL printui(*($1))
	CALL prints([1696])
	$2 = *($5 + [24])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $146($1)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($5 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $2
	
.LABEL $label$5
	*($4) = $2
	CALL $146($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $145(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $146($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $146($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*($7 + [95]) = $2
	CALL require_auth(*($0))
	CALL eosio_assert(($2 <= [100]), [2032])
	*(($7 + [80])) = [0]
	*($7 + [64]) = (int_64)-1
	*($7 + [72]) = (int_64)0
	$5 = *($0)
	*($7 + [48]) = $5
	*($7 + [56]) = $5
	$6 = CALL $102($1, $2)
	*($7 + [40]) = $6
	$2 = CALL db_find_i64($5, $5, (int_64)-4427730786915658880, $6)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $104(($7 + [48]), $2)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)($7 + [48])), [176])
	$5 = *($0)
	*($7 + [20]) = $1
	*($7 + [28]) = $3
	*($7 + [32]) = $4
	*($7 + [16]) = ($7 + [40])
	*($7 + [24]) = ($7 + [95])
	CALL eosio_assert([1], [912])
	CALL $105(($7 + [48]), $2, $5, ($7 + [16]))
	$5 = *($7 + [40])
	CALL prints([2048])
	CALL printn($5)
	CALL prints([880])
	$1 = *($7 + [72])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($7 + [20]) = $1
	*($7 + [28]) = $3
	*($7 + [32]) = $4
	*($7 + [16]) = ($7 + [40])
	*($7 + [24]) = ($7 + [95])
	CALL $103(($7 + [8]), ($7 + [48]), $5, ($7 + [16]))
	$5 = *($7 + [40])
	CALL prints([2048])
	CALL printn($5)
	CALL prints([640])
	$1 = *($7 + [72])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($7 + [76])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $146($0)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($7 + [72]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $1
	
.LABEL $label$4
	*($3) = $1
	CALL $146($2)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [36]) = $1
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + $3)
	*($7 + [48]) = ($7 + [32])
	*($7 + [56]) = $7
	CALL $101(($7 + [56]), ($7 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$3 = *(($7 + [8]))
	$4 = *(($7 + [24]))
	$5 = *(($7 + [16]))
	*($7 + [32]) = *($7)
	*($7 + [56]) = $5
	*($7 + [48]) = $4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 ($7 + [32])), (int_32 ($3 & [255])), (int_32 ($7 + [56])), (int_32 ($7 + [48])), (int_32 $6))
	*([0] + [4]) = ($7 + [64])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [2])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($7 >> [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $145(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [2]))
	$2 = ($7 + ($4 << [2]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [2]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $146($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [1]) >= (uint_32)$1) ){ goto $label$3 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [1])
	$2 = ($4 + $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [0]
	$7 = ($7 - $3)
	$7 = ( ( $2 ? $7 : ($7 <= $2) ) ? [2147483647] : (int_32($7 >> [1]) <= [1073741823]) )
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL $145(($7 << [1]))
	
.LABEL $label$4
	$3 = ($6 + ($7 << [1]))
	$2 = ($6 + ($4 << [1]))
	$6 = $2
	$7 = $1
	
.LOOP $label$5:
	*($6) = [0]
	$6 = ($6 + [2])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$5 }
	$4 = ($2 + ($1 << [1]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$7 }
	CALL $146($6)
	
.LABEL $label$7
	return (unreachable)
	
.LABEL $label$3
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [2])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	*(($0 + [4])) = ($2 + ($1 << [1]))
	return (unreachable)
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [752])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [752])
	$2 = ($0 + [4])
	CALL memcpy(*($2), $5, [4])
	$7 = (*($2) + [4])
	*($2) = $7
	$5 = ($5 + [4])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $146($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($8 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL $145($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $154($0)
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [1])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [1])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $146($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = ( ( $4 ? $8 : ($8 <= $4) ) ? [2147483647] : (int_32($8 >> [1]) <= [1073741823]) )
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = ($5 << [1])
	$5 = CALL $145($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$8 = int_32($8 >> [1])
	$8 = (*($0 + [4]) - $5)
	$3 = ( ($1 + $8) ? $2 : ((uint_32)$4 > (uint_32)$8) )
	$6 = ($3 - $1)
	$7 = int_32($6 >> [1])
	if ( ($7 == 0) ){ goto $label$6 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$6
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$2 }
	$1 = ($2 - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $3, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [1]))
	return (unreachable)
	
.LABEL $label$1
	CALL $154($0)
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [2])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [2])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $146($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = [1073741823]
	if ( ((uint_32)int_32($8 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [1])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [2])
	$5 = CALL $145($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [2])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [2])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [2]))
	return (unreachable)
	
.LABEL $label$1
	CALL $154($0)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $55(CALL $57(CALL $56(CALL $55($0, ($1 + [40])), ($1 + [52])), ($1 + [64])), ($1 + [76]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [88]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [92]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [96]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [100]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [120]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [124]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [128]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = ($6 - $5)
	if ( ((int_32)$3 <= (int_32)[-3]) ){ goto $label$2 }
	$3 = (*($0 + [8]) - $5)
	$2 = int_32($3 >> [1])
	$4 = ($2 + [1])
	$3 = ( ( $4 ? $3 : ($3 <= $4) ) ? [2147483647] : (int_32($3 >> [1]) <= [1073741823]) )
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$7 = CALL $145(($3 << [1]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	*(($4 = ($7 + ($2 << [1])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($4 - $6)
	$3 = ($7 + ($3 << [1]))
	$4 = ($4 + [2])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $4
	*(($0 + [8])) = $3
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $146($5)
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	CALL abort()
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [816])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [1])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $59($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [1]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[1]), [800])
	CALL memcpy($4, *($5), [2])
	$7 = (*($5) + [2])
	*($5) = $7
	$4 = ($4 + [2])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [816])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [2])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $58($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [2]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[3]), [800])
	CALL memcpy($4, *($5), [4])
	$7 = (*($5) + [4])
	*($5) = $7
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [800])
	CALL memcpy(($1 + [25]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $145(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $146($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $146($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	$4 = *($1)
	$5 = *(*($3))
	*($1) = $5
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	*($1 + [25]) = *(*($3 + [16]))
	CALL eosio_assert(((int_64)$4 == (int_64)$5), [1072])
	*($6 + [40]) = ($6 + [26])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	CALL $115(($6 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $6, [26])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $145([64])) + [48]) = $0
	CALL $61(($8 + [32]), $6)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $62(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $146($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $112 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [688])
	*(($4 = CALL $145([48])) + [32]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = *(*($3 + [4]))
	*($4 + [16]) = *(*($3 + [8]))
	*($4 + [24]) = *(*($3 + [12]))
	*($4 + [25]) = *(*($3 + [16]))
	*($8 + [56]) = (($8 + [16]) + [26])
	*($8 + [52]) = ($8 + [16])
	*($8 + [48]) = ($8 + [16])
	CALL $115(($8 + [48]), $4)
	$5 = *($4)
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)-4427730786020184064, $2, $5, ($8 + [16]), [26])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [48]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [48]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $117(($1 + [24]), ($8 + [48]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $146($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $145([48])) + [32]) = $0
	CALL $116(($8 + [32]), $6)
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $117(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $146($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $145($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $149($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $147($0)
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [800])
	CALL memcpy(($0 + [16]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [800])
	CALL memcpy(($0 + [17]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [816])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $83($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [800])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [800])
	CALL memcpy(($0 + [8]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($0 + [12]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [800])
	CALL memcpy(($0 + [16]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

int_64 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$6 = [0]
	*($11 + [24]) = [0]
	*($11 + [16]) = (int_64)0
	if ( ($1 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $110(($11 + [32]), *((((uint_32)$1 % (uint_32)[10]) + [2096])), ($11 + [16]))
	if ( (*($11 + [16]) & [1]) ){ goto $label$5 }
	*($11 + [16]) = [0]
	goto $label$4 
	
.LABEL $label$5
	*(*((($11 + [16]) + [8]))) = [0]
	*($11 + [20]) = [0]
	
.LABEL $label$4
	CALL $148(($11 + [16]), [0])
	*((($11 + [16]) + [8])) = *((($11 + [32]) + [8]))
	*($11 + [16]) = *($11 + [32])
	$6 = ((uint_32)$1 > (uint_32)[9])
	$1 = ((uint_32)$1 / (uint_32)[10])
	if ( $6 ){ goto $label$3 }
	$6 = *($11 + [20])
	$1 = *($11 + [16])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	if ( ((uint_32)( $6 ? uint_32(($1 & [254]) >> [1]) : ($1 & [1]) ) > (uint_32)[3]) ){ goto $label$6 }
	CALL $153(($11 + [32]), [2224], ($11 + [16]))
	if ( (*($11 + [16]) & [1]) ){ goto $label$8 }
	*($11 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*(($11 + [24]))) = [0]
	*($11 + [20]) = [0]
	
.LABEL $label$7
	CALL $148(($11 + [16]), [0])
	*((($11 + [16]) + [8])) = *((($11 + [32]) + [8]))
	*($11 + [16]) = *($11 + [32])
	
.LABEL $label$6
	*($11 + [8]) = *($0)
	CALL $109(($11 + [32]), ($11 + [8]))
	$1 = *($11 + [32])
	$6 = ($1 & [1])
	CALL $149(($11 + [16]), ( *($11 + [40]) ? (($11 + [32]) | [1]) : $6 ), ( *($11 + [36]) ? uint_32($1 >> [1]) : $6 ))
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $146(*(($11 + [40])))
	
.LABEL $label$9
	$2 = (*($11 + [16]) & [1])
	$3 = *(($11 + [24]))
	$1 = ( $3 ? (($11 + [16]) | [1]) : $2 )
	$6 = [-1]
	
.LOOP $label$10:
	$0 = ($1 + $6)
	$4 = ($6 + [1])
	$6 = $4
	if ( *(($0 + [1])) ){ goto $label$10 }
	$5 = (CASTING uint_64)(uint_32 $4)
	$8 = (int_64)0
	$7 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$11:
	$10 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$5) ){ goto $label$12 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$16 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$15 
	
.LABEL $label$16
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$15
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$11 }
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $146($3)
	
.LABEL $label$17
	*([0] + [4]) = ($11 + [48])
	return $9
}

int_32 .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = CALL strlen($1)
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$6 = CALL $145($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, $1, $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $149($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $145($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $146($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	return CALL $149($0, $1, CALL $158($1))
}

int_32 .FUNC $156 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $145($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $154 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $145($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $159 ()
{
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)8423677108051509248, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $35(($6 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)($6 + [8])), [176])
	if ( (*($3 + [36]) == 0) ){ goto $label$4 }
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) >= (uint_32)(*($3 + [32]) + [604800])) ){ goto $label$3 }
	CALL prints([368])
	$1 = *($6 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL prints([1136])
	$1 = *($6 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL prints([1168])
	$1 = *($6 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) >= (uint_32)(*(($3 + [32])) + [864000])) ){ goto $label$6 }
	CALL $77($0, $1, $2)
	$1 = *($6 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$6
	CALL prints([368])
	$1 = *($6 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $146($3)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($6 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $1
	
.LABEL $label$7
	*($5) = $1
	CALL $146($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($1))
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)8423677108051509248, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $35(($6 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)($6 + [8])), [176])
	if ( (*($3 + [36]) == 0) ){ goto $label$4 }
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) >= (uint_32)(*($3 + [32]) + [259200])) ){ goto $label$3 }
	CALL prints([368])
	$3 = *($6 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL prints([1136])
	$3 = *($6 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL prints([1168])
	$3 = *($6 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) >= (uint_32)(*(($3 + [32])) + [604800])) ){ goto $label$6 }
	CALL $77($0, $1, $2)
	$3 = *($6 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$6
	CALL prints([368])
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $146($1)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($6 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $3
	
.LABEL $label$7
	*($5) = $3
	CALL $146($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [816])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $60($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [800])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = [0]
	*($7 + [36]) = $1
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + $3)
	*($7 + [48]) = ($7 + [32])
	*($7 + [56]) = $7
	CALL $98(($7 + [56]), ($7 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$3 = *(($7 + [24]))
	$5 = *(($7 + [16]))
	$4 = *(($7 + [8]))
	*($7 + [32]) = *($7)
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 ($7 + [32])), (int_32 $4), (int_64 $5), (int_64 $3), (int_32 $6))
	*([0] + [4]) = ($7 + [64])
	return [1]
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [144])
	*([0] + [4]) = $7
	*($7 + [72]) = $2
	*($7 + [64]) = $3
	*($7 + [60]) = $4
	CALL require_auth(*($0))
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0)
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	*($7 + [88]) = $2
	*($7 + [96]) = $3
	*($7 + [80]) = *($1)
	CALL sha256(($7 + [80]), [24], ($7 + [112]))
	$3 = *($7 + [112])
	*($7 + [80]) = $3
	$4 = CALL db_find_i64($5, $5, (int_64)8423677108051509248, $3)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL $35(($7 + [16]), $4)
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)($7 + [16])), [176])
	$5 = *($0)
	*($7 + [112]) = ($7 + [60])
	CALL eosio_assert([1], [912])
	CALL $100(($7 + [16]), $1, $5, ($7 + [112]))
	CALL prints([2016])
	CALL printui(*($7 + [80]))
	CALL prints([880])
	$4 = *($7 + [40])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($7 + [116]) = $1
	*($7 + [112]) = ($7 + [80])
	*($7 + [120]) = ($7 + [72])
	*($7 + [124]) = ($7 + [64])
	*($7 + [128]) = ($7 + [60])
	CALL $99(($7 + [8]), ($7 + [16]), $5, ($7 + [112]))
	CALL prints([2016])
	CALL printui(*($7 + [80]))
	CALL prints([640])
	$4 = *($7 + [40])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $146($1)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($6) = $4
	CALL $146($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [144])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = [0]
	*($7 + [36]) = $1
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + $3)
	*($7 + [48]) = ($7 + [32])
	*($7 + [56]) = $7
	CALL $94(($7 + [56]), ($7 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$3 = *(($7 + [24]))
	$4 = *(($7 + [16]))
	$5 = *(($7 + [8]))
	*($7 + [32]) = *($7)
	*($7 + [56]) = $5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 ($7 + [32])), (int_32 ($7 + [56])), (int_32 $4), (int_64 ($3 & [65535])), (int_32 $6))
	*([0] + [4]) = ($7 + [64])
	return [1]
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	float_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [320])
	*([0] + [4]) = $18
	CALL require_auth(*($1))
	*((($18 + [264]) + [32])) = [0]
	*($18 + [280]) = (int_64)-1
	*($18 + [288]) = (int_64)0
	$12 = *($0)
	*($18 + [264]) = $12
	*($18 + [272]) = $12
	*((($18 + [224]) + [32])) = [0]
	*($18 + [232]) = $12
	*($18 + [224]) = $12
	*($18 + [240]) = (int_64)-1
	*($18 + [248]) = (int_64)0
	$17 = CALL db_find_i64($12, $12, (int_64)8423677108051509248, $3)
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$14 }
	$5 = CALL $35(($18 + [264]), $17)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($18 + [264])), [176])
	if ( (*($5 + [36]) == 0) ){ goto $label$13 }
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) >= (uint_32)(*($5 + [32]) + [259200])) ){ goto $label$12 }
	*($18 + [176]) = $3
	*($18 + [184]) = *($2)
	CALL sha256(($18 + [176]), [16], ($18 + [16]))
	$12 = *($18 + [16])
	$6 = *(($18 + [248]))
	$11 = *(($18 + [252]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$15 }
	$17 = ($11 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$16:
	if ( ((int_64)*(*($17)) == (int_64)$12) ){ goto $label$15 }
	$11 = $17
	$2 = ($17 + [-24])
	$17 = $2
	if ( ((int_32)($2 + $7) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$11 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [132]) == (int_32)($18 + [224])), [176])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$14
	CALL prints([1136])
	goto $label$2 
	
.LABEL $label$13
	CALL prints([1168])
	goto $label$2 
	
.LABEL $label$12
	CALL prints([368])
	goto $label$2 
	
.LABEL $label$11
	$17 = CALL db_find_i64(*($18 + [224]), *(($18 + [232])), (int_64)-4421659622822117376, $12)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $36(($18 + [224]), $17)
	CALL eosio_assert(((int_32)*($6 + [132]) == (int_32)($18 + [224])), [176])
	
.LABEL $label$10
	if ( ((uint_32)(*($6 + [28]) + [-9500]) >= (uint_32)[401]) ){ goto $label$8 }
	*(($18 + [208])) = [0]
	*($18 + [184]) = $12
	*($18 + [192]) = (int_64)-1
	*($18 + [200]) = (int_64)0
	*($18 + [176]) = *($0)
	*($18 + [128]) = $12
	*($18 + [144]) = $4
	*($18 + [136]) = *($1)
	CALL sha256(($18 + [128]), [20], ($18 + [16]))
	$12 = *($18 + [16])
	$8 = *($18 + [200])
	$11 = *(($18 + [204]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$17 }
	$17 = ($11 + [-24])
	$7 = ([0] - $8)
	
.LOOP $label$18:
	if ( ((int_64)*(*($17)) == (int_64)$12) ){ goto $label$17 }
	$11 = $17
	$2 = ($17 + [-24])
	$17 = $2
	if ( ((int_32)($2 + $7) != (int_32)[-24]) ){ goto $label$18 }
	
.LABEL $label$17
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$7 }
	$17 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [72]) == (int_32)($18 + [176])), [176])
	if ( $17 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	CALL prints([1200])
	goto $label$2 
	
.LABEL $label$8
	CALL prints([1232])
	goto $label$2 
	
.LABEL $label$7
	$17 = CALL db_find_i64(*($18 + [176]), *(($18 + [184])), (int_64)4520910338438201344, $12)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$5 }
	$17 = CALL $72(($18 + [176]), $17)
	CALL eosio_assert(((int_32)*($17 + [72]) == (int_32)($18 + [176])), [176])
	
.LABEL $label$6
	if ( (*($17 + [64]) == 0) ){ goto $label$4 }
	CALL prints([1968])
	$11 = *($18 + [200])
	if ( $11 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL prints([1936])
	$11 = *($18 + [200])
	if ( $11 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$14 = *($17 + [32])
	$3 = *($5 + [40])
	CALL prints([1312])
	$15 = (uint_64)$3 >> (uint_64)(int_64)8
	CALL printui(((int_64)$15) & (int_64)255))
	CALL prints([1328])
	CALL printui(((int_64)$3 & (int_64)255))
	CALL prints([1344])
	$11 = (CASTING uint_32)(uint_64 $15)
	$7 = (CASTING uint_32)(uint_64 $3)
	$2 = [0]
	if ( ($4 <= [3]) ){ goto $label$19 }
	$2 = [1]
	if ( ($4 <= [5]) ){ goto $label$19 }
	$2 = [2]
	if ( ($4 <= [36]) ){ goto $label$19 }
	$2 = [3]
	if ( ($4 <= [44]) ){ goto $label$19 }
	$2 = ( [4] ? [5] : ($4 <= [46]) )
	
.LABEL $label$19
	$3 = *((*($6 + [76]) + ($4 << [3])))
	$11 = CALL $78($4, ($11 & [255]), ($7 & [255]), *(*($6 + [52]) + [62]))
	if ( ((int_32)$11 != (int_32)[-100]) ){ goto $label$21 }
	*($18 + [168]) = (int_64)0
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$24 }
	$15 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *((*($6 + [40]) + ($2 << [3])))) * (float_64)((float_64)(CASTING float_64)(uint_32 *(($6 + [28]))) / (float_64)(float_64)1e4)))
	$16 = ((uint_64)((int_64)$15 * (int_64)$14) / (uint_64)$3)
	*($18 + [168]) = $16
	$9 = ((float_64)((float_64)(CASTING float_64)(uint_64 $14) * (float_64)(CASTING float_64)(uint_64 $15)) / (float_64)(CASTING float_64)(uint_64 $3))
	$13 = ((float_64)((float_64)(CASTING float_64)(uint_64 $16) / (float_64)$9) + (float_64)(float_64)-1)
	$13 = ( $13 ? (float_64)-1 : ((float_64)$13 > (float_64)(float_64)0) )
	if ( (((float_64)$13 <= (float_64)(float_64)0.0001) | ((float_64)$13 != (float_64)$13)) ){ goto $label$23 }
	CALL prints([1360])
	CALL printui(*($18 + [168]))
	CALL prints([1376])
	CALL printdf($9)
	*($18 + [168]) = (Rounds 0)($9)
	goto $label$22 
	
.LABEL $label$24
	*($18 + [168]) = $14
	if ( ((int_32)$11 != (int_32)[-50]) ){ goto $label$20 }
	*($18 + [168]) = (uint_64)$14 >> (uint_64)(int_64)1)
	goto $label$20 
	
.LABEL $label$23
	CALL prints([2000])
	
.LABEL $label$22
	if ( ((int_32)$11 != (int_32)[50]) ){ goto $label$20 }
	*($18 + [168]) = ((int_64)(uint_64)*($18 + [168]) >> (uint_64)(int_64)1) + (int_64)(uint_64)$14 >> (uint_64)(int_64)1))
	
.LABEL $label$20
	CALL prints([1408])
	CALL printui(*($18 + [168]))
	*($18 + [144]) = (int_64)-1
	*($18 + [152]) = [0]
	$3 = *($0)
	*($18 + [128]) = $3
	$14 = *($1)
	*($18 + [136]) = $14
	*(($18 + [156])) = [0]
	*(($18 + [160])) = [0]
	$2 = CALL db_find_i64($3, $14, (int_64)4520488125973135360, $12)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$25 }
	$2 = CALL $66(($18 + [128]), $2)
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)($18 + [128])), [176])
	$12 = *($0)
	*($18 + [16]) = ($18 + [168])
	CALL eosio_assert([1], [912])
	CALL $95(($18 + [128]), $2, $12, ($18 + [16]))
	
.LABEL $label$25
	$12 = *($0)
	*($18 + [16]) = ($18 + [168])
	CALL eosio_assert([1], [912])
	CALL $96(($18 + [176]), $17, $12, ($18 + [16]))
	$12 = *($0)
	*($18 + [16]) = ($18 + [168])
	CALL eosio_assert([1], [912])
	CALL $97(($18 + [224]), $6, $12, ($18 + [16]))
	$10 = *($18 + [168])
	if ( (int_64)($10 == 0) ){ goto $label$26 }
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1600])
	$12 = (int_64)5459781
	$17 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$2 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$2 = [0]
	
.LABEL $label$27
	CALL eosio_assert($2, [1424])
	$16 = *($0)
	$12 = (int_64)0
	$14 = (int_64)59
	$17 = [1456]
	$15 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$37 }
	$2 = *($17)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$2 = ($2 + [165])
	goto $label$35 
	
.LABEL $label$37
	$3 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$33
	$17 = ($17 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$3 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$32 }
	*($18 + [80]) = $15
	*($18 + [72]) = $16
	$12 = (int_64)0
	$14 = (int_64)59
	$17 = [16]
	$15 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$43 }
	$2 = *($17)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$2 = ($2 + [165])
	goto $label$41 
	
.LABEL $label$43
	$3 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$39
	$17 = ($17 + [1])
	$14 = ((int_64)$14 + (int_64)-5)
	$15 = ((int_64)$3 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$38 }
	$12 = (int_64)0
	$14 = (int_64)59
	$17 = [32]
	$16 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$49 }
	$2 = *($17)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$2 = ($2 + [165])
	goto $label$47 
	
.LABEL $label$49
	$3 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$45
	$17 = ($17 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$3 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$44 }
	*(($18 + [8])) = [0]
	*($18) = (int_64)0
	$17 = CALL strlen([1472])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$52 }
	*($18) = ($17 << [1])
	$2 = ($18 | [1])
	if ( $17 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$11 = (($17 + [16]) & [-16])
	$2 = CALL $145($11)
	*($18) = ($11 | [1])
	*($18 + [8]) = $2
	*($18 + [4]) = $17
	
.LABEL $label$51
	CALL memcpy($2, [1472], $17)
	
.LABEL $label$50
	*(($2 + $17)) = [0]
	*(($18 + [40])) = (int_64)1397703940
	*($18 + [24]) = *($1)
	$17 = ($18 + [8])
	*(($18 + [56])) = *($17)
	*($18 + [16]) = *($0)
	*($18 + [32]) = $10
	*($18 + [48]) = *($18)
	*($18) = [0]
	*($18 + [4]) = [0]
	*($17) = [0]
	$17 = CALL $80(($18 + [88]), ($18 + [72]), $15, $16, ($18 + [16]))
	CALL $81(($18 + [304]), $17)
	$2 = *($18 + [304])
	CALL send_inline($2, (*($18 + [308]) - $2))
	$2 = *($18 + [304])
	if ( ($2 == 0) ){ goto $label$53 }
	*($18 + [308]) = $2
	CALL $146($2)
	
.LABEL $label$53
	$2 = *($17 + [28])
	if ( ($2 == 0) ){ goto $label$54 }
	*(($17 + [32])) = $2
	CALL $146($2)
	
.LABEL $label$54
	$2 = *($17 + [16])
	if ( ($2 == 0) ){ goto $label$55 }
	*(($17 + [20])) = $2
	CALL $146($2)
	
.LABEL $label$55
	if ( ((*(($18 + [48])) & [1]) == 0) ){ goto $label$56 }
	CALL $146(*(($18 + [56])))
	
.LABEL $label$56
	if ( ((*($18) & [1]) == 0) ){ goto $label$26 }
	CALL $146(*(($18 + [8])))
	
.LABEL $label$26
	$11 = *($18 + [152])
	if ( ($11 == 0) ){ goto $label$57 }
	$0 = ($18 + [156])
	$17 = *($0)
	if ( ((int_32)$17 == (int_32)$11) ){ goto $label$59 }
	
.LOOP $label$60:
	$17 = ($17 + [-24])
	$2 = *($17)
	*($17) = [0]
	if ( ($2 == 0) ){ goto $label$61 }
	CALL $146($2)
	
.LABEL $label$61
	if ( ((int_32)$11 != (int_32)$17) ){ goto $label$60 }
	$17 = *(($18 + [152]))
	goto $label$58 
	
.LABEL $label$59
	$17 = $11
	
.LABEL $label$58
	*($0) = $11
	CALL $146($17)
	
.LABEL $label$57
	$11 = *($18 + [200])
	if ( ($11 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$0 = ($18 + [204])
	$17 = *($0)
	if ( ((int_32)$17 == (int_32)$11) ){ goto $label$63 }
	
.LOOP $label$64:
	$17 = ($17 + [-24])
	$2 = *($17)
	*($17) = [0]
	if ( ($2 == 0) ){ goto $label$65 }
	CALL $146($2)
	
.LABEL $label$65
	if ( ((int_32)$11 != (int_32)$17) ){ goto $label$64 }
	$17 = *(($18 + [200]))
	goto $label$62 
	
.LABEL $label$63
	$17 = $11
	
.LABEL $label$62
	*($0) = $11
	CALL $146($17)
	
.LABEL $label$2
	CALL $41(($18 + [248]))
	$11 = *($18 + [288])
	if ( ($11 == 0) ){ goto $label$66 }
	$0 = ($18 + [292])
	$17 = *($0)
	if ( ((int_32)$17 == (int_32)$11) ){ goto $label$68 }
	
.LOOP $label$69:
	$17 = ($17 + [-24])
	$2 = *($17)
	*($17) = [0]
	if ( ($2 == 0) ){ goto $label$70 }
	CALL $146($2)
	
.LABEL $label$70
	if ( ((int_32)$11 != (int_32)$17) ){ goto $label$69 }
	$17 = *(($18 + [288]))
	goto $label$67 
	
.LABEL $label$68
	$17 = $11
	
.LABEL $label$67
	*($0) = $11
	CALL $146($17)
	
.LABEL $label$66
	*([0] + [4]) = ($18 + [320])
	return (unreachable)
	
.LABEL $label$1
	CALL $147($18)
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [800])
	CALL memcpy(($7 + [8]), $5, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [800])
	$4 = (($7 + [8]) + [8])
	CALL memcpy($4, ($5 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	$3 = *($4)
	*($7 + [24]) = *($7 + [8])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 ($7 + [24])), (int_32 $3), (int_64 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	CALL require_auth(*($0))
	*((($13 + [128]) + [32])) = [0]
	*($13 + [144]) = (int_64)-1
	*($13 + [152]) = (int_64)0
	$4 = *($0)
	*($13 + [128]) = $4
	*($13 + [136]) = $4
	*((($13 + [88]) + [32])) = [0]
	*($13 + [96]) = $4
	*($13 + [88]) = $4
	*($13 + [104]) = (int_64)-1
	*($13 + [112]) = (int_64)0
	$12 = CALL db_find_i64($4, $4, (int_64)8423677108051509248, $2)
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$8 }
	$12 = CALL $35(($13 + [128]), $12)
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)($13 + [128])), [176])
	if ( (*($12 + [36]) == 0) ){ goto $label$7 }
	*($13) = $2
	*($13 + [8]) = *($1)
	CALL sha256($13, [16], ($13 + [48]))
	$4 = *($13 + [48])
	$7 = *(($13 + [112]))
	$3 = *(($13 + [116]))
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$9 }
	$12 = ($3 + [-24])
	$11 = ([0] - $7)
	
.LOOP $label$10:
	if ( ((int_64)*(*($12)) == (int_64)$4) ){ goto $label$9 }
	$3 = $12
	$1 = ($12 + [-24])
	$12 = $1
	if ( ((int_32)($1 + $11) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$6 }
	$10 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [132]) == (int_32)($13 + [88])), [176])
	if ( $10 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	CALL prints([1136])
	goto $label$1 
	
.LABEL $label$7
	CALL prints([1168])
	goto $label$1 
	
.LABEL $label$6
	$12 = CALL db_find_i64(*($13 + [88]), *(($13 + [96])), (int_64)-4421659622822117376, $4)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$4 }
	$10 = CALL $36(($13 + [88]), $12)
	CALL eosio_assert(((int_32)*($10 + [132]) == (int_32)($13 + [88])), [176])
	
.LABEL $label$5
	*((($13 + [48]) + [32])) = [0]
	*($13 + [64]) = (int_64)-1
	$2 = *($0)
	*($13 + [48]) = $2
	*($13 + [56]) = $4
	*($13 + [72]) = (int_64)0
	$12 = CALL db_lowerbound_i64($2, $4, (int_64)4520910338438201344, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$11 }
	$12 = CALL $72(($13 + [48]), $12)
	$5 = ($13 + [8])
	$6 = ($13 + [16])
	$7 = ($13 + [24])
	$8 = ($13 + [28])
	$9 = ($13 + [32])
	
.LOOP $label$12:
	$4 = *($12 + [16])
	*($5) = $4
	*($6) = (int_64)-1
	*($7) = [0]
	$2 = *($0)
	*($13) = $2
	*($8) = [0]
	*($9) = [0]
	$1 = CALL db_find_i64($2, $4, (int_64)4520488125973135360, *($12))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$13 }
	$1 = CALL $66($13, $1)
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$13), [176])
	CALL eosio_assert([1], [1712])
	CALL eosio_assert([1], [1504])
	$3 = CALL db_next_i64(*($1 + [76]), ($13 + [168]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$14 }
	CALL $66($13, $3)
	
.LABEL $label$14
	CALL $92($13, $1)
	
.LABEL $label$13
	CALL eosio_assert([1], [1504])
	$1 = CALL db_next_i64(*($12 + [76]), ($13 + [168]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$15 }
	CALL $72(($13 + [48]), $1)
	
.LABEL $label$15
	CALL eosio_assert([1], [1712])
	CALL eosio_assert([1], [1504])
	$11 = [0]
	$1 = CALL db_next_i64(*(($12 + [76])), ($13 + [168]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$16 }
	$11 = CALL $72(($13 + [48]), $1)
	
.LABEL $label$16
	CALL $93(($13 + [48]), $12)
	$3 = *($7)
	if ( ($3 == 0) ){ goto $label$17 }
	$12 = *($8)
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$12 = ($12 + [-24])
	$1 = *($12)
	*($12) = [0]
	if ( ($1 == 0) ){ goto $label$21 }
	CALL $146($1)
	
.LABEL $label$21
	if ( ((int_32)$3 != (int_32)$12) ){ goto $label$20 }
	$12 = *($7)
	goto $label$18 
	
.LABEL $label$19
	$12 = $3
	
.LABEL $label$18
	*($8) = $3
	CALL $146($12)
	
.LABEL $label$17
	$12 = $11
	if ( $11 ){ goto $label$12 }
	
.LABEL $label$11
	CALL eosio_assert([1], [1712])
	CALL eosio_assert([1], [1504])
	$12 = CALL db_next_i64(*($10 + [136]), $13)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$22 }
	CALL $36(($13 + [88]), $12)
	
.LABEL $label$22
	CALL $91(($13 + [88]), $10)
	$3 = *($13 + [72])
	if ( ($3 == 0) ){ goto $label$1 }
	$11 = ($13 + [76])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$23:
	$12 = ($12 + [-24])
	$1 = *($12)
	*($12) = [0]
	if ( ($1 == 0) ){ goto $label$24 }
	CALL $146($1)
	
.LABEL $label$24
	if ( ((int_32)$3 != (int_32)$12) ){ goto $label$23 }
	$12 = *(($13 + [72]))
	goto $label$2 
	
.LABEL $label$4
	CALL prints([1200])
	goto $label$1 
	
.LABEL $label$3
	$12 = $3
	
.LABEL $label$2
	*($11) = $3
	CALL $146($12)
	
.LABEL $label$1
	CALL $41(($13 + [112]))
	$3 = *($13 + [152])
	if ( ($3 == 0) ){ goto $label$25 }
	$11 = ($13 + [156])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$27 }
	
.LOOP $label$28:
	$12 = ($12 + [-24])
	$1 = *($12)
	*($12) = [0]
	if ( ($1 == 0) ){ goto $label$29 }
	CALL $146($1)
	
.LABEL $label$29
	if ( ((int_32)$3 != (int_32)$12) ){ goto $label$28 }
	$12 = *(($13 + [152]))
	goto $label$26 
	
.LABEL $label$27
	$12 = $3
	
.LABEL $label$26
	*($11) = $3
	CALL $146($12)
	
.LABEL $label$25
	*([0] + [4]) = ($13 + [176])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$5 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7) = (int_64)0
	*($7 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [800])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [800])
	$8 = ($7 + [8])
	CALL memcpy($8, ($5 + [8]), [1])
	CALL eosio_assert(((int_32)$1 != (int_32)[9]), [800])
	$4 = ($7 + [9])
	CALL memcpy($4, ($5 + [9]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($4)
	$8 = *($8)
	$3 = *($7)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($8 & [255])), (int_32 ($5 & [255])), (int_32 $6))
	*([0] + [4]) = ($7 + [16])
	return [1]
}

void .FUNC $26 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$5 = [0]
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$6 = *($0)
	*($7 + [8]) = $6
	*($7 + [16]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)8423677108051509248, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $35(($7 + [8]), $4)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($7 + [8])), [176])
	
.LABEL $label$1
	*($7 + [4]) = (($2 << [8]) | $3)
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = *($0)
	*($7) = ($7 + [4])
	CALL eosio_assert([1], [912])
	CALL $89(($7 + [8]), $5, $6, $7)
	CALL prints([1664])
	CALL printui($1)
	CALL prints([880])
	$2 = *($7 + [32])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL prints([1664])
	CALL printui($1)
	CALL prints([1696])
	$2 = *($7 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($7 + [36])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $146($5)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($7 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $2
	
.LABEL $label$5
	*($3) = $2
	CALL $146($0)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $145([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [2108]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $156($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $148($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	$4 = *($1)
	$5 = *(*($3))
	*($1) = $5
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$4 == (int_64)$5), [1072])
	CALL eosio_assert([1], [752])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [752])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [752])
	CALL memcpy(($6 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $6, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [752])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [688])
	*(($4 = CALL $145([88])) + [72]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = *(*($3 + [4]))
	*($4 + [16]) = *(*($3 + [8]))
	*($4 + [24]) = *(*($3 + [12]))
	*($4 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = CALL current_time()
	*($4 + [48]) = [1]
	*($4 + [44]) = ((uint_64)$5 / (uint_64)(int_64)1000000)
	*($4 + [32]) = *(*($3 + [16]))
	*($8 + [88]) = (($8 + [16]) + [58])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $69(($8 + [80]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)4520488125973135360, $2, $5, ($8 + [16]), [58])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [76])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [80]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $70(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $146($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $145(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $146($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $146($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [132]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	*($1 + [96]) = (*($1 + [96]) + *(*($3)))
	$4 = *($1)
	*(($5 = (*($1 + [76]) + (*(*($3 + [4])) << [3])))) = ((int_64)*($5) + (int_64)*(*($3 + [8])))
	*(($5 = (*($1 + [40]) + (*(*($3 + [12])) << [3])))) = ((int_64)*($5) + (int_64)*(*($3 + [8])))
	*($1 + [104]) = ((int_64)*($1 + [104]) + (int_64)*(*($3 + [8])))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1072])
	*(($3 = $6)) = [0]
	CALL $46($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $47($3, $1)
	CALL db_update_i64(*($1 + [136]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	*($11 + [56]) = $2
	*($11 + [48]) = $3
	*($11 + [46]) = $5
	*($11 + [32]) = $6
	$7 = *($1 + [24])
	$10 = *(($1 + [28]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$1 }
	$5 = ($10 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$1 }
	$10 = $5
	$9 = ($5 + [-24])
	$5 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$7 }
	$5 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$1), [176])
	$2 = *($0)
	if ( $5 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4520488125973135360, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $66($1, $5)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$1), [176])
	$2 = *($0)
	
.LABEL $label$6
	*($11 + [8]) = ($11 + [32])
	CALL eosio_assert([1], [912])
	CALL $67($1, $5, $2, ($11 + [8]))
	$5 = [0]
	goto $label$3 
	
.LABEL $label$5
	$2 = *($0)
	
.LABEL $label$4
	*($11 + [16]) = $4
	*($11 + [12]) = ($11 + [48])
	*($11 + [8]) = ($11 + [56])
	*($11 + [20]) = ($11 + [46])
	*($11 + [24]) = ($11 + [32])
	CALL $68($11, $1, $2, ($11 + [8]))
	$5 = [1]
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [64])
	return $5
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [44]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [48]) = (*($1 + [48]) + [1])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1072])
	*($5 + [72]) = ($5 + [58])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $69(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [58])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $145([88])) + [72]) = $0
	CALL $71(($8 + [32]), $6)
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $70(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $146($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $145(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $146($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	*($11 + [56]) = $2
	*($11 + [48]) = $3
	*($11 + [46]) = $5
	*($11 + [32]) = $6
	$7 = *($1 + [24])
	$10 = *(($1 + [28]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$1 }
	$5 = ($10 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$1 }
	$10 = $5
	$9 = ($5 + [-24])
	$5 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$7 }
	$5 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$1), [176])
	$2 = *($0)
	if ( $5 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4520910338438201344, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $72($1, $5)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$1), [176])
	$2 = *($0)
	
.LABEL $label$6
	*($11 + [8]) = ($11 + [32])
	CALL eosio_assert([1], [912])
	CALL $73($1, $5, $2, ($11 + [8]))
	$5 = [0]
	goto $label$3 
	
.LABEL $label$5
	$2 = *($0)
	
.LABEL $label$4
	*($11 + [16]) = $4
	*($11 + [12]) = ($11 + [48])
	*($11 + [8]) = ($11 + [56])
	*($11 + [20]) = ($11 + [46])
	*($11 + [24]) = ($11 + [32])
	CALL $74($11, $1, $2, ($11 + [8]))
	$5 = [1]
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [64])
	return $5
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $145(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $146($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $146($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [800])
	CALL memcpy(($0 + [8]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [800])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	*($1 + [32]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1072])
	*($5 + [56]) = ($5 + [48])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $90(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [688])
	*(($4 = CALL $145([56])) + [40]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = *(*($3 + [4]))
	*($4 + [16]) = *(*($3 + [8]))
	*($4 + [24]) = *(*($3 + [12]))
	*($4 + [32]) = *(*($3 + [16]))
	*($8 + [72]) = (($8 + [16]) + [33])
	*($8 + [68]) = ($8 + [16])
	*($8 + [64]) = ($8 + [16])
	CALL $106(($8 + [64]), $4)
	$5 = *($4)
	*($4 + [44]) = CALL db_store_i64(*($1 + [8]), (int_64)-4427730786915658880, $2, $5, ($8 + [16]), [33])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [64]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [44])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [64]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $108(($1 + [24]), ($8 + [64]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [64])
	*($8 + [64]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $146($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [80])
}

int_64 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	*($11 + [32]) = *($0)
	CALL $109(($11 + [16]), ($11 + [32]))
	CALL $151(($11 + [16]), [2080])
	$0 = [0]
	*($11 + [8]) = [0]
	*($11) = (int_64)0
	if ( ($1 == 0) ){ goto $label$2 }
	$6 = ($11 | [1])
	
.LOOP $label$3:
	CALL $110(($11 + [32]), *((((uint_32)$1 % (uint_32)[10]) + [2096])), $11)
	if ( (*($11) & [1]) ){ goto $label$5 }
	*($11) = [0]
	goto $label$4 
	
.LABEL $label$5
	*(*(($11 + [8]))) = [0]
	*($11 + [4]) = [0]
	
.LABEL $label$4
	CALL $148($11, [0])
	*(($11 + [8])) = *((($11 + [32]) + [8]))
	*($11) = *($11 + [32])
	$0 = ((uint_32)$1 > (uint_32)[9])
	$1 = ((uint_32)$1 / (uint_32)[10])
	if ( $0 ){ goto $label$3 }
	$3 = *(($11 + [8]))
	$0 = *($11 + [4])
	$1 = *($11)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($11 | [1])
	$3 = [0]
	$1 = [0]
	
.LABEL $label$1
	$5 = ($1 & [1])
	CALL $149(($11 + [16]), ( $3 ? $6 : $5 ), ( $0 ? uint_32(($1 & [254]) >> [1]) : $5 ))
	if ( ((*($11) & [1]) == 0) ){ goto $label$6 }
	CALL $146(*(($11 + [8])))
	
.LABEL $label$6
	$5 = (*($11 + [16]) & [1])
	$2 = *($11 + [24])
	$1 = ( $2 ? (($11 + [16]) | [1]) : $5 )
	$0 = [-1]
	
.LOOP $label$7:
	$6 = ($1 + $0)
	$3 = ($0 + [1])
	$0 = $3
	if ( *(($6 + [1])) ){ goto $label$7 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$8 = (int_64)0
	$7 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$8:
	$10 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$4) ){ goto $label$9 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$0 = ($0 + [165])
	goto $label$10 
	
.LABEL $label$11
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$13 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$12 
	
.LABEL $label$13
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$12
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $146($2)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [48])
	return $9
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	$4 = *($1)
	$5 = *(*($3))
	*($1) = $5
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	*($1 + [32]) = *(*($3 + [16]))
	CALL eosio_assert(((int_64)$4 == (int_64)$5), [1072])
	*($6 + [56]) = ($6 + [33])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $106(($6 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $6, [33])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $145([56])) + [40]) = $0
	CALL $107(($8 + [32]), $6)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $108(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $146($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	$4 = *($1)
	*($1 + [36]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [40]) = *(*($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1072])
	*($5 + [56]) = ($5 + [48])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $90(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((uint_32)$2 > (uint_32)[99]) ){ goto $label$1 }
	return int_32((([0] - CALL $88($1, $0, (([200] - $2) & [65535]))) << [24]) >> [24])
	
.LABEL $label$1
	$2 = ($2 + [-100])
	if ( ((uint_32)$2 > (uint_32)[9]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$13
	$2 = [156]
	if ( ($0 <= $1) ){ goto $label$2 }
	$2 = ( [0] ? [100] : ((int_32)$0 == (int_32)$1) )
	goto $label$2 
	
.LABEL $label$12
	$2 = [0]
	goto $label$2 
	
.LABEL $label$11
	$2 = [156]
	if ( ($0 <= $1) ){ goto $label$2 }
	$2 = ( [-50] ? [100] : ((int_32)$0 == (int_32)$1) )
	goto $label$2 
	
.LABEL $label$10
	$2 = ( [100] ? [-100] : ((uint_32)$0 > (uint_32)$1) )
	goto $label$2 
	
.LABEL $label$9
	$2 = [156]
	if ( ((uint_32)$0 <= (uint_32)$1) ){ goto $label$2 }
	$2 = ( [50] ? [100] : ((int_32)$0 == (int_32)($1 + [1])) )
	goto $label$2 
	
.LABEL $label$8
	$2 = [156]
	if ( ((uint_32)$0 <= (uint_32)$1) ){ goto $label$2 }
	$2 = ( [0] ? [100] : ((int_32)$0 == (int_32)($1 + [1])) )
	goto $label$2 
	
.LABEL $label$7
	$2 = [156]
	if ( ((uint_32)$0 <= (uint_32)$1) ){ goto $label$2 }
	$2 = ( [-50] ? [100] : ((int_32)$0 == (int_32)($1 + [1])) )
	goto $label$2 
	
.LABEL $label$6
	$2 = ( [100] ? [-100] : ((uint_32)$0 > (uint_32)($1 + [1])) )
	goto $label$2 
	
.LABEL $label$5
	$2 = [156]
	if ( ((uint_32)$0 <= (uint_32)($1 + [1])) ){ goto $label$2 }
	$2 = ( [50] ? [100] : ((int_32)$0 == (int_32)($1 + [2])) )
	goto $label$2 
	
.LABEL $label$4
	$2 = [156]
	if ( ((uint_32)$0 <= (uint_32)($1 + [1])) ){ goto $label$2 }
	$2 = ( [-50] ? [100] : ((int_32)$0 == (int_32)($1 + [2])) )
	goto $label$2 
	
.LABEL $label$3
	$2 = [156]
	if ( ((uint_32)$0 <= (uint_32)($1 + [1])) ){ goto $label$2 }
	$2 = ( [0] ? [100] : ((int_32)$0 == (int_32)($1 + [2])) )
	
.LABEL $label$2
	$2
	return int_32(($2 << [24]) >> [24])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [752])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [752])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [752])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [752])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $87(*($1), ($0 + [32]))
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [752])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [752])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [752])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [752])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [752])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $145($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $146($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [132]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	$4 = *($1)
	*($1 + [92]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1072])
	*(($7 = $6)) = [0]
	CALL $46($7, $1)
	$5 = *($7)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $47($7, $1)
	CALL db_update_i64(*($1 + [136]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $83($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [752])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [752])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $85(CALL $84($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $145([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $83($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $86(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $149 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $150($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $145(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $146($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $145 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10812])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10704])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10512]
	$1 = (((int_32)$2 * (int_32)[12]) + [10512])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $147 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $146 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $142([2320], $0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = $0
	CALL _ZN12sportlottery5applyEyy(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $143 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10806]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10808])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10806]) = [1]
	$7 = ($7 << [16])
	*([0] + [10808]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10808])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10808]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10806]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10806]) = [1]
	$3 = ($3 << [16])
	*([0] + [10808]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10808])
	
.LABEL $label$8
	*([0] + [10808]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $143($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10720])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $145([88])) + [72]) = $0
	CALL $71(($8 + [32]), $6)
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $75(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $146($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [44]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [48]) = (*($1 + [48]) + [1])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1072])
	*($5 + [72]) = ($5 + [58])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $69(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [58])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $145(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $146($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $146($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [800])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [800])
	CALL memcpy(($1 + [24]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [44]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [800])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [800])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $9) / (int_32)[12])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$2 }
	$8 = [357913941]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[12])
	if ( ((uint_32)$9 > (uint_32)[178956969]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$8 = ( $7 ? $9 : ($9 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $145(((int_32)$8 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$3 * (int_32)[12])))) = [0]
	*(($9 + [4])) = (int_64)0
	$1 = *($1)
	$2 = *($2)
	$4 = ($2 - $1)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($9) = ($4 << [1])
	$7 = ($9 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = (($4 + [16]) & [-16])
	$7 = CALL $145($5)
	*($9) = ($5 | [1])
	*(($3 = ($6 + ((int_32)$3 * (int_32)[12]))) + [8]) = $7
	*($3 + [4]) = $4
	
.LABEL $label$6
	$3 = ((int_32)$8 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$8 = $7
	
.LOOP $label$9:
	*($8) = *($1)
	$8 = ($8 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$7 = ($7 + $4)
	
.LABEL $label$8
	$4 = ($6 + $3)
	*($7) = [0]
	$7 = ($9 + [12])
	$1 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$11 }
	$2 = ([0] - $1)
	$1 = ($8 + [-12])
	
.LOOP $label$12:
	*(($9 + [-12])) = *($1)
	$8 = ($1 + [8])
	*(($9 + [-4])) = *($8)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($8) = [0]
	$9 = ($9 + [-12])
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $2) != (int_32)[-12]) ){ goto $label$12 }
	$1 = *(($0 + [4]))
	$8 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$8 = $1
	
.LABEL $label$10
	*($0) = $9
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$13 }
	$9 = ([0] - $8)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $146(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $9) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $146($8)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $147($9)
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	float_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	float_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	int_32 $32
	int_32 $33
	int_32 $34
	$5 = (*([0] + [4]) - [272])
	*([0] + [4]) = $5
	*(((($33 = $5) + [216]) + [32])) = [0]
	*($33 + [232]) = (int_64)-1
	*($33 + [240]) = (int_64)0
	$29 = *($0)
	*($33 + [216]) = $29
	*($33 + [224]) = $29
	*((($33 + [176]) + [32])) = [0]
	*($33 + [184]) = $29
	*($33 + [176]) = $29
	*($33 + [192]) = (int_64)-1
	*($33 + [200]) = (int_64)0
	$32 = CALL db_find_i64($29, $29, (int_64)8423677108051509248, $2)
	if ( ((int_32)$32 <= (int_32)[-1]) ){ goto $label$13 }
	$9 = CALL $35(($33 + [216]), $32)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)($33 + [216])), [176])
	if ( (*($9 + [36]) == 0) ){ goto $label$12 }
	*($33 + [128]) = $2
	*($33 + [136]) = *($1)
	CALL sha256(($33 + [128]), [16], ($33 + [16]))
	$29 = *($33 + [16])
	$3 = *(($33 + [200]))
	$14 = *(($33 + [204]))
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$14 }
	$32 = ($14 + [-24])
	$27 = ([0] - $3)
	
.LOOP $label$15:
	if ( ((int_64)*(*($32)) == (int_64)$29) ){ goto $label$14 }
	$14 = $32
	$15 = ($32 + [-24])
	$32 = $15
	if ( ((int_32)($15 + $27) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$11 }
	$3 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [132]) == (int_32)($33 + [176])), [176])
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	CALL prints([1136])
	goto $label$2 
	
.LABEL $label$12
	CALL prints([1168])
	goto $label$3 
	
.LABEL $label$11
	$32 = CALL db_find_i64(*($33 + [176]), *(($33 + [184])), (int_64)-4421659622822117376, $29)
	if ( ((int_32)$32 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $36(($33 + [176]), $32)
	CALL eosio_assert(((int_32)*($3 + [132]) == (int_32)($33 + [176])), [176])
	
.LABEL $label$10
	if ( ((uint_32)(*($3 + [28]) + [-9500]) >= (uint_32)[401]) ){ goto $label$8 }
	if ( (*($3 + [92]) == 0) ){ goto $label$7 }
	CALL prints([1280])
	goto $label$5 
	
.LABEL $label$9
	CALL prints([1200])
	goto $label$4 
	
.LABEL $label$8
	CALL prints([1232])
	goto $label$6 
	
.LABEL $label$7
	$2 = *($9 + [40])
	CALL prints([1312])
	$28 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL printui(((int_64)$28) & (int_64)255))
	CALL prints([1328])
	CALL printui(((int_64)$2 & (int_64)255))
	CALL prints([1344])
	$4 = $5
	$14 = ($5 + [-48])
	$32 = $14
	*([0] + [4]) = $32
	$5 = ($32 + [-96])
	*([0] + [4]) = $5
	$32 = [0]
	$16 = ((CASTING uint_32)(uint_64 $2) & [255])
	$17 = ((CASTING uint_32)(uint_64 $28) & [255])
	$18 = ($3 + [52])
	$27 = $5
	$8 = [0]
	$7 = [0]
	
.LOOP $label$16:
	$15 = [0]
	if ( ($32 <= [3]) ){ goto $label$17 }
	$15 = [1]
	if ( ($32 <= [5]) ){ goto $label$17 }
	$15 = [2]
	if ( ($32 <= [36]) ){ goto $label$17 }
	$15 = ( [3] ? [4] : ($32 <= [44]) )
	
.LABEL $label$17
	*($27) = $15
	$9 = CALL $78(($32 & [65535]), $17, $16, *(*($18) + [62]))
	*(($14 + $32)) = $9
	if ( ((int_32)$15 != (int_32)[1]) ){ goto $label$18 }
	$7 = ($7 | ($9 == 0))
	$8 = ($8 | ((int_32)$9 == (int_32)[50]))
	
.LABEL $label$18
	$27 = ($27 + [2])
	$32 = ($32 + [1])
	if ( ((int_32)$32 != (int_32)[46]) ){ goto $label$16 }
	$27 = [0]
	*((($33 + [128]) + [32])) = [0]
	*($33 + [144]) = (int_64)-1
	$2 = *($0)
	*($33 + [128]) = $2
	*($33 + [136]) = $29
	$13 = (int_64)0
	*($33 + [152]) = (int_64)0
	$32 = CALL db_lowerbound_i64($2, $29, (int_64)4520910338438201344, (int_64)0)
	if ( ((int_32)$32 <= (int_32)[-1]) ){ goto $label$19 }
	$6 = ($33 | [1])
	$19 = ($3 + [76])
	$18 = (($33 + [64]) + [8])
	$25 = (($33 + [16]) + [16])
	$16 = (($33 + [16]) + [32])
	$26 = ($16 + [4])
	$22 = (($33 + [80]) + [28])
	$24 = (($33 + [16]) + [40])
	$23 = ($33 + [100])
	$9 = CALL $72(($33 + [128]), $32)
	if ( *($9 + [64]) ){ goto $label$20 }
	$34 = [2]
	goto $label$1 
	
.LABEL $label$20
	$34 = [0]
	goto $label$1 
	
.LABEL $label$19
	$34 = [62]
	goto $label$1 
	
.LABEL $label$6
	$34 = [109]
	goto $label$1 
	
.LABEL $label$5
	$34 = [109]
	goto $label$1 
	
.LABEL $label$4
	$34 = [109]
	goto $label$1 
	
.LABEL $label$3
	$34 = [109]
	goto $label$1 
	
.LABEL $label$2
	$34 = [109]
	
.LABEL $label$1
	
.LOOP $label$21:
	goto $label$206 
	
.LABEL $label$266
	$10 = *($9 + [16])
	$15 = *($9 + [24])
	$32 = *(($14 + $15))
	if ( ((int_32)$32 != (int_32)[-100]) ){ goto $label$115 }
	$34 = [61]
	goto $label$21 
	
.LABEL $label$265
	*($33 + [120]) = (int_64)0
	goto $label$110 
	
.LABEL $label$264
	$29 = *($9 + [32])
	if ( ((int_32)$32 < (int_32)[1]) ){ goto $label$114 }
	$34 = [57]
	goto $label$21 
	
.LABEL $label$263
	$30 = *((*($19) + ($15 << [3])))
	$28 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *((*(($3 + [40])) + (*(($5 + ($15 << [1]))) << [3])))) * (float_64)((float_64)(CASTING float_64)(uint_32 *(($3 + [28]))) / (float_64)(float_64)1e4)))
	$2 = ((uint_64)((int_64)$28 * (int_64)$29) / (uint_64)$30)
	*($33 + [120]) = $2
	$11 = ((float_64)((float_64)(CASTING float_64)(uint_64 $29) * (float_64)(CASTING float_64)(uint_64 $28)) / (float_64)(CASTING float_64)(uint_64 $30))
	$20 = ((float_64)((float_64)(CASTING float_64)(uint_64 $2) / (float_64)$11) + (float_64)(float_64)-1)
	$20 = ( $20 ? (float_64)-1 : ((float_64)$20 > (float_64)(float_64)0) )
	if ( (((float_64)$20 <= (float_64)(float_64)0.0001) | ((float_64)$20 != (float_64)$20)) ){ goto $label$76 }
	$34 = [60]
	goto $label$21 
	
.LABEL $label$262
	CALL prints([1360])
	CALL printui(*($33 + [120]))
	CALL prints([1376])
	CALL printdf($11)
	$2 = (Rounds 0)($11)
	*($33 + [120]) = $2
	$34 = [58]
	goto $label$21 
	
.LABEL $label$261
	if ( ((int_32)$32 != (int_32)[50]) ){ goto $label$112 }
	$34 = [59]
	goto $label$21 
	
.LABEL $label$260
	*($33 + [120]) = ((int_64)(uint_64)$2 >> (uint_64)(int_64)1) + (int_64)(uint_64)$29 >> (uint_64)(int_64)1))
	goto $label$111 
	
.LABEL $label$259
	*($33 + [120]) = $29
	if ( ((int_32)$32 != (int_32)[-50]) ){ goto $label$113 }
	$34 = [56]
	goto $label$21 
	
.LABEL $label$258
	*($33 + [120]) = (uint_64)$29 >> (uint_64)(int_64)1)
	$34 = [5]
	goto $label$21 
	
.LABEL $label$257
	CALL prints([1408])
	CALL printui(*($33 + [120]))
	$29 = *($0)
	*($33 + [16]) = ($33 + [120])
	CALL eosio_assert([1], [912])
	CALL $79(($33 + [128]), $9, $29, ($33 + [16]))
	$12 = *($33 + [120])
	if ( (int_64)($12 == 0) ){ goto $label$117 }
	$34 = [6]
	goto $label$21 
	
.LABEL $label$256
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1600])
	$29 = (int_64)5459781
	$32 = [0]
	$34 = [7]
	goto $label$21 
	
.LABEL $label$255
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $29) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$106 }
	$34 = [52]
	goto $label$21 
	
.LABEL $label$254
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$77 }
	$34 = [54]
	goto $label$21 
	
.LABEL $label$253
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$107 }
	$34 = [55]
	goto $label$21 
	
.LABEL $label$252
	$32 = ($32 + [1])
	if ( ((int_32)$32 < (int_32)[7]) ){ goto $label$78 }
	$34 = [53]
	goto $label$21 
	
.LABEL $label$251
	$15 = [1]
	$32 = ($32 + [1])
	if ( ((int_32)$32 < (int_32)[7]) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$250
	$15 = [0]
	$34 = [9]
	goto $label$21 
	
.LABEL $label$249
	CALL eosio_assert($15, [1424])
	$31 = *($0)
	$29 = (int_64)0
	$28 = (int_64)59
	$32 = [1456]
	$30 = (int_64)0
	$34 = [10]
	goto $label$21 
	
.LABEL $label$248
	if ( ((uint_64)$29 > (uint_64)(int_64)5) ){ goto $label$104 }
	$34 = [48]
	goto $label$21 
	
.LABEL $label$247
	$15 = *($32)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$80 }
	$34 = [51]
	goto $label$21 
	
.LABEL $label$246
	$15 = ($15 + [165])
	goto $label$79 
	
.LABEL $label$245
	$2 = (int_64)0
	if ( ((uint_64)$29 <= (uint_64)(int_64)11) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$244
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	$34 = [50]
	goto $label$21 
	
.LABEL $label$243
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	$34 = [47]
	goto $label$21 
	
.LABEL $label$242
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	$34 = [12]
	goto $label$21 
	
.LABEL $label$241
	$32 = ($32 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$30 = ((int_64)$2 | (int_64)$30)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$105 }
	$34 = [13]
	goto $label$21 
	
.LABEL $label$240
	*($18) = $30
	*($33 + [64]) = $31
	$29 = (int_64)0
	$28 = (int_64)59
	$32 = [16]
	$30 = (int_64)0
	$34 = [14]
	goto $label$21 
	
.LABEL $label$239
	if ( ((uint_64)$29 > (uint_64)(int_64)10) ){ goto $label$100 }
	$34 = [43]
	goto $label$21 
	
.LABEL $label$238
	$15 = *($32)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$34 = [46]
	goto $label$21 
	
.LABEL $label$237
	$15 = ($15 + [165])
	goto $label$81 
	
.LABEL $label$236
	$2 = (int_64)0
	if ( ((int_64)$29 == (int_64)11) ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$235
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	$34 = [45]
	goto $label$21 
	
.LABEL $label$234
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	$34 = [42]
	goto $label$21 
	
.LABEL $label$233
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	$34 = [16]
	goto $label$21 
	
.LABEL $label$232
	$32 = ($32 + [1])
	$28 = ((int_64)$28 + (int_64)-5)
	$30 = ((int_64)$2 | (int_64)$30)
	$29 = ((int_64)$29 + (int_64)1)
	if ( ((int_64)$29 != (int_64)13) ){ goto $label$101 }
	$34 = [17]
	goto $label$21 
	
.LABEL $label$231
	$29 = (int_64)0
	$28 = (int_64)59
	$32 = [32]
	$31 = (int_64)0
	$34 = [18]
	goto $label$21 
	
.LABEL $label$230
	if ( ((uint_64)$29 > (uint_64)(int_64)7) ){ goto $label$96 }
	$34 = [38]
	goto $label$21 
	
.LABEL $label$229
	$15 = *($32)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$34 = [41]
	goto $label$21 
	
.LABEL $label$228
	$15 = ($15 + [165])
	goto $label$83 
	
.LABEL $label$227
	$2 = (int_64)0
	if ( ((uint_64)$29 <= (uint_64)(int_64)11) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$226
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	$34 = [40]
	goto $label$21 
	
.LABEL $label$225
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	$34 = [37]
	goto $label$21 
	
.LABEL $label$224
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	$34 = [20]
	goto $label$21 
	
.LABEL $label$223
	$32 = ($32 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$31 = ((int_64)$2 | (int_64)$31)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$97 }
	$34 = [21]
	goto $label$21 
	
.LABEL $label$222
	*(($15 = ($33 + [8]))) = [0]
	*($33) = (int_64)0
	$32 = CALL strlen([1472])
	if ( ((uint_32)$32 >= (uint_32)[-16]) ){ goto $label$93 }
	$34 = [22]
	goto $label$21 
	
.LABEL $label$221
	if ( ((uint_32)$32 >= (uint_32)[11]) ){ goto $label$92 }
	$34 = [35]
	goto $label$21 
	
.LABEL $label$220
	*($33) = ($32 << [1])
	$17 = $6
	if ( $32 ){ goto $label$90 }
	goto $label$91 
	
.LABEL $label$219
	$21 = (($32 + [16]) & [-16])
	$17 = CALL $145($21)
	*($15) = $17
	*($33) = ($21 | [1])
	*($33 + [4]) = $32
	$34 = [24]
	goto $label$21 
	
.LABEL $label$218
	CALL memcpy($17, [1472], $32)
	$34 = [25]
	goto $label$21 
	
.LABEL $label$217
	*(($17 + $32)) = [0]
	*((($33 + [16]) + [8])) = $10
	*($25) = $12
	*((($33 + [16]) + [24])) = (int_64)1397703940
	*($26) = *($33 + [4])
	*(($16 + [8])) = *($15)
	*($33 + [16]) = *($0)
	*($16) = *($33)
	*($33) = [0]
	*($33 + [4]) = [0]
	*($15) = [0]
	CALL $81(($33 + [256]), CALL $80(($33 + [80]), ($33 + [64]), $30, $31, ($33 + [16])))
	$32 = *($33 + [256])
	CALL send_inline($32, (*($33 + [260]) - $32))
	$32 = *($33 + [256])
	if ( ($32 == 0) ){ goto $label$89 }
	$34 = [26]
	goto $label$21 
	
.LABEL $label$216
	*($33 + [260]) = $32
	CALL $146($32)
	$34 = [27]
	goto $label$21 
	
.LABEL $label$215
	$32 = *($22)
	if ( ($32 == 0) ){ goto $label$88 }
	$34 = [28]
	goto $label$21 
	
.LABEL $label$214
	*((($33 + [80]) + [32])) = $32
	CALL $146($32)
	$34 = [29]
	goto $label$21 
	
.LABEL $label$213
	$32 = *((($33 + [80]) + [16]))
	if ( ($32 == 0) ){ goto $label$87 }
	$34 = [30]
	goto $label$21 
	
.LABEL $label$212
	*($23) = $32
	CALL $146($32)
	$34 = [31]
	goto $label$21 
	
.LABEL $label$211
	if ( ((*($16) & [1]) == 0) ){ goto $label$86 }
	$34 = [32]
	goto $label$21 
	
.LABEL $label$210
	CALL $146(*($24))
	$34 = [33]
	goto $label$21 
	
.LABEL $label$209
	if ( ((*($33) & [1]) == 0) ){ goto $label$119 }
	$34 = [34]
	goto $label$21 
	
.LABEL $label$208
	CALL $146(*($15))
	goto $label$118 
	
.LABEL $label$207
	$9 = CALL $72(($33 + [128]), $32)
	if ( (*($9 + [64]) == 0) ){ goto $label$116 }
	$34 = [0]
	goto $label$21 
	
.LABEL $label$206
	CALL eosio_assert([1], [1504])
	$32 = CALL db_next_i64(*($9 + [76]), ($33 + [16]))
	if ( ((int_32)$32 > (int_32)[-1]) ){ goto $label$120 }
	$34 = [62]
	goto $label$21 
	
.LABEL $label$205
	$17 = ($3 + [40])
	$18 = ($3 + [28])
	$25 = ($3 + [64])
	$26 = ($3 + [76])
	$32 = [0]
	goto $label$75 
	
.LABEL $label$204
	$29 = ((int_64)(uint_64)$2 >> (uint_64)(int_64)1) + (int_64)(CASTING uint_64)(uint_32 uint_32($16 >> [1])))
	goto $label$69 
	
.LABEL $label$203
	$15 = *($14)
	if ( ((int_32)$15 == (int_32)[156]) ){ goto $label$73 }
	$34 = [64]
	goto $label$21 
	
.LABEL $label$202
	$16 = *((*($25) + $27))
	$29 = (CASTING uint_64)(uint_32 $16)
	$9 = *($5)
	$2 = ((uint_64)((int_64)(Rounds 0)(((float_64)(CASTING float_64)(uint_64 *((*($17) + ($9 << [3])))) * (float_64)((float_64)(CASTING float_64)(uint_32 *($18)) / (float_64)(float_64)1e4))) * (int_64)$29) / (uint_64)*((*($26) + $32)))
	if ( ((int_32)$9 != (int_32)[1]) ){ goto $label$71 }
	$34 = [141]
	goto $label$21 
	
.LABEL $label$201
	if ( ($15 == 0) ){ goto $label$68 }
	$34 = [142]
	goto $label$21 
	
.LABEL $label$200
	if ( ((int_32)$15 == (int_32)[100]) ){ goto $label$72 }
	$34 = [143]
	goto $label$21 
	
.LABEL $label$199
	if ( ((int_32)$15 != (int_32)[206]) ){ goto $label$22 }
	$34 = [145]
	goto $label$21 
	
.LABEL $label$198
	$29 = (CASTING uint_64)(uint_32 uint_32($16 >> [1]))
	goto $label$70 
	
.LABEL $label$197
	$29 = $2
	$34 = [66]
	goto $label$21 
	
.LABEL $label$196
	$13 = ((int_64)$29 + (int_64)$13)
	$34 = [67]
	goto $label$21 
	
.LABEL $label$195
	$14 = ($14 + [1])
	$5 = ($5 + [2])
	$32 = ($32 + [8])
	$27 = ($27 + [4])
	if ( ((int_32)$27 != (int_32)[184]) ){ goto $label$74 }
	$34 = [68]
	goto $label$21 
	
.LABEL $label$194
	CALL prints([1536])
	CALL printui($13)
	$20 = ((float_64)((float_64)(CASTING float_64)(uint_32 *(($3 + [28]))) / (float_64)(float_64)-1e4) + (float_64)(float_64)1)
	$32 = *(($3 + [40]))
	$29 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 *($32)) * (float_64)$20) * (float_64)(float_64)0.5))
	if ( (($8 & [1]) == 0) ){ goto $label$67 }
	$34 = [140]
	goto $label$21 
	
.LABEL $label$193
	$29 = ((int_64)(Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 *($32 + [8])) * (float_64)$20) * (float_64)(float_64)0.5) * (float_64)(float_64)0.5)) + (int_64)$29)
	goto $label$65 
	
.LABEL $label$192
	if ( ($7 & [1]) ){ goto $label$66 }
	$34 = [70]
	goto $label$21 
	
.LABEL $label$191
	$29 = ((int_64)(Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 *($32 + [8])) * (float_64)$20) * (float_64)(float_64)0.5)) + (int_64)$29)
	$34 = [71]
	goto $label$21 
	
.LABEL $label$190
	$2 = *($32 + [32])
	$28 = *($32 + [24])
	$30 = *($32 + [16])
	CALL prints([1552])
	$12 = ((int_64)(Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 $2) * (float_64)$20) * (float_64)(float_64)0.5)) + (int_64)((int_64)(Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 $28) * (float_64)$20) * (float_64)(float_64)0.5)) + (int_64)((int_64)(Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 $30) * (float_64)$20) * (float_64)(float_64)0.5)) + (int_64)$29)))
	CALL printui($12)
	$29 = *($0)
	CALL eosio_assert([1], [912])
	CALL $82(($33 + [176]), $3, $29, ($33 + [16]))
	$31 = *($0)
	$29 = (int_64)0
	$28 = (int_64)59
	$32 = [1456]
	$30 = (int_64)0
	$34 = [72]
	goto $label$21 
	
.LABEL $label$189
	if ( ((uint_64)$29 > (uint_64)(int_64)5) ){ goto $label$63 }
	$34 = [136]
	goto $label$21 
	
.LABEL $label$188
	$15 = *($32)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$34 = [139]
	goto $label$21 
	
.LABEL $label$187
	$15 = ($15 + [165])
	goto $label$23 
	
.LABEL $label$186
	$2 = (int_64)0
	if ( ((uint_64)$29 <= (uint_64)(int_64)11) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$185
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	$34 = [138]
	goto $label$21 
	
.LABEL $label$184
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	$34 = [135]
	goto $label$21 
	
.LABEL $label$183
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	$34 = [74]
	goto $label$21 
	
.LABEL $label$182
	$32 = ($32 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$30 = ((int_64)$2 | (int_64)$30)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$64 }
	$34 = [75]
	goto $label$21 
	
.LABEL $label$181
	*($33 + [72]) = $30
	*($33 + [64]) = $31
	$29 = (int_64)0
	$28 = (int_64)59
	$32 = [16]
	$30 = (int_64)0
	$34 = [76]
	goto $label$21 
	
.LABEL $label$180
	if ( ((uint_64)$29 > (uint_64)(int_64)10) ){ goto $label$59 }
	$34 = [131]
	goto $label$21 
	
.LABEL $label$179
	$15 = *($32)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$34 = [134]
	goto $label$21 
	
.LABEL $label$178
	$15 = ($15 + [165])
	goto $label$25 
	
.LABEL $label$177
	$2 = (int_64)0
	if ( ((int_64)$29 == (int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$176
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	$34 = [133]
	goto $label$21 
	
.LABEL $label$175
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	$34 = [130]
	goto $label$21 
	
.LABEL $label$174
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	$34 = [78]
	goto $label$21 
	
.LABEL $label$173
	$32 = ($32 + [1])
	$28 = ((int_64)$28 + (int_64)-5)
	$30 = ((int_64)$2 | (int_64)$30)
	$29 = ((int_64)$29 + (int_64)1)
	if ( ((int_64)$29 != (int_64)13) ){ goto $label$60 }
	$34 = [79]
	goto $label$21 
	
.LABEL $label$172
	$29 = (int_64)0
	$28 = (int_64)59
	$32 = [32]
	$31 = (int_64)0
	$34 = [80]
	goto $label$21 
	
.LABEL $label$171
	if ( ((uint_64)$29 > (uint_64)(int_64)7) ){ goto $label$55 }
	$34 = [126]
	goto $label$21 
	
.LABEL $label$170
	$15 = *($32)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$34 = [129]
	goto $label$21 
	
.LABEL $label$169
	$15 = ($15 + [165])
	goto $label$27 
	
.LABEL $label$168
	$2 = (int_64)0
	if ( ((uint_64)$29 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$167
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	$34 = [128]
	goto $label$21 
	
.LABEL $label$166
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	$34 = [125]
	goto $label$21 
	
.LABEL $label$165
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	$34 = [82]
	goto $label$21 
	
.LABEL $label$164
	$32 = ($32 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$31 = ((int_64)$2 | (int_64)$31)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$56 }
	$34 = [83]
	goto $label$21 
	
.LABEL $label$163
	$2 = ((int_64)$12 + (int_64)$13)
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1600])
	$29 = (int_64)5459781
	$32 = [0]
	$34 = [84]
	goto $label$21 
	
.LABEL $label$162
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $29) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$34 = [121]
	goto $label$21 
	
.LABEL $label$161
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	$34 = [123]
	goto $label$21 
	
.LABEL $label$160
	$29 = (uint_64)$29 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$29) & (int_64)255) != (int_64)0) ){ goto $label$50 }
	$34 = [124]
	goto $label$21 
	
.LABEL $label$159
	$32 = ($32 + [1])
	if ( ((int_32)$32 < (int_32)[7]) ){ goto $label$30 }
	$34 = [122]
	goto $label$21 
	
.LABEL $label$158
	$15 = [1]
	$32 = ($32 + [1])
	if ( ((int_32)$32 < (int_32)[7]) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$157
	$15 = [0]
	$34 = [86]
	goto $label$21 
	
.LABEL $label$156
	CALL eosio_assert($15, [1424])
	*(($33 + [8])) = [0]
	*($33) = (int_64)0
	$32 = CALL strlen([1568])
	if ( ((uint_32)$32 >= (uint_32)[-16]) ){ goto $label$85 }
	$34 = [87]
	goto $label$21 
	
.LABEL $label$155
	if ( ((uint_32)$32 >= (uint_32)[11]) ){ goto $label$48 }
	$34 = [120]
	goto $label$21 
	
.LABEL $label$154
	*($33) = ($32 << [1])
	$15 = ($33 | [1])
	if ( $32 ){ goto $label$46 }
	goto $label$47 
	
.LABEL $label$153
	$14 = (($32 + [16]) & [-16])
	$15 = CALL $145($14)
	*($33) = ($14 | [1])
	*($33 + [8]) = $15
	*($33 + [4]) = $32
	$34 = [89]
	goto $label$21 
	
.LABEL $label$152
	CALL memcpy($15, [1568], $32)
	$34 = [90]
	goto $label$21 
	
.LABEL $label$151
	*(($15 + $32)) = [0]
	*(($33 + [40])) = (int_64)1397703940
	*($33 + [24]) = *($1)
	$32 = ($33 + [8])
	*(($33 + [56])) = *($32)
	*($33 + [16]) = *($0)
	*($33 + [32]) = $2
	*($33 + [48]) = *($33)
	*($33) = [0]
	*($33 + [4]) = [0]
	*($32) = [0]
	$32 = CALL $80(($33 + [80]), ($33 + [64]), $30, $31, ($33 + [16]))
	CALL $81(($33 + [256]), $32)
	$15 = *($33 + [256])
	CALL send_inline($15, (*($33 + [260]) - $15))
	$15 = *($33 + [256])
	if ( ($15 == 0) ){ goto $label$45 }
	$34 = [91]
	goto $label$21 
	
.LABEL $label$150
	*($33 + [260]) = $15
	CALL $146($15)
	$34 = [92]
	goto $label$21 
	
.LABEL $label$149
	$15 = *($32 + [28])
	if ( ($15 == 0) ){ goto $label$44 }
	$34 = [93]
	goto $label$21 
	
.LABEL $label$148
	*(($32 + [32])) = $15
	CALL $146($15)
	$34 = [94]
	goto $label$21 
	
.LABEL $label$147
	$15 = *($32 + [16])
	if ( ($15 == 0) ){ goto $label$43 }
	$34 = [95]
	goto $label$21 
	
.LABEL $label$146
	*(($32 + [20])) = $15
	CALL $146($15)
	$34 = [96]
	goto $label$21 
	
.LABEL $label$145
	if ( ((*(($33 + [48])) & [1]) == 0) ){ goto $label$42 }
	$34 = [97]
	goto $label$21 
	
.LABEL $label$144
	CALL $146(*(($33 + [56])))
	$34 = [98]
	goto $label$21 
	
.LABEL $label$143
	if ( ((*($33) & [1]) == 0) ){ goto $label$41 }
	$34 = [99]
	goto $label$21 
	
.LABEL $label$142
	CALL $146(*(($33 + [8])))
	$34 = [100]
	goto $label$21 
	
.LABEL $label$141
	$14 = *($33 + [152])
	if ( ($14 == 0) ){ goto $label$40 }
	$34 = [101]
	goto $label$21 
	
.LABEL $label$140
	$27 = ($33 + [156])
	$32 = *($27)
	if ( ((int_32)$32 == (int_32)$14) ){ goto $label$39 }
	$34 = [102]
	goto $label$21 
	
.LABEL $label$139
	$34 = [103]
	goto $label$21 
	
.LABEL $label$138
	$32 = ($32 + [-24])
	$15 = *($32)
	*($32) = [0]
	if ( ($15 == 0) ){ goto $label$37 }
	$34 = [104]
	goto $label$21 
	
.LABEL $label$137
	CALL $146($15)
	$34 = [105]
	goto $label$21 
	
.LABEL $label$136
	if ( ((int_32)$14 != (int_32)$32) ){ goto $label$38 }
	$34 = [106]
	goto $label$21 
	
.LABEL $label$135
	$32 = *(($33 + [152]))
	goto $label$36 
	
.LABEL $label$134
	$32 = $14
	$34 = [107]
	goto $label$21 
	
.LABEL $label$133
	*($27) = $14
	CALL $146($32)
	$34 = [108]
	goto $label$21 
	
.LABEL $label$132
	$4
	$34 = [109]
	goto $label$21 
	
.LABEL $label$131
	CALL $41(($33 + [200]))
	$14 = *($33 + [240])
	if ( ($14 == 0) ){ goto $label$35 }
	$34 = [110]
	goto $label$21 
	
.LABEL $label$130
	$27 = ($33 + [244])
	$32 = *($27)
	if ( ((int_32)$32 == (int_32)$14) ){ goto $label$34 }
	$34 = [111]
	goto $label$21 
	
.LABEL $label$129
	$34 = [112]
	goto $label$21 
	
.LABEL $label$128
	$32 = ($32 + [-24])
	$15 = *($32)
	*($32) = [0]
	if ( ($15 == 0) ){ goto $label$32 }
	$34 = [113]
	goto $label$21 
	
.LABEL $label$127
	CALL $146($15)
	$34 = [114]
	goto $label$21 
	
.LABEL $label$126
	if ( ((int_32)$14 != (int_32)$32) ){ goto $label$33 }
	$34 = [115]
	goto $label$21 
	
.LABEL $label$125
	$32 = *(($33 + [240]))
	goto $label$31 
	
.LABEL $label$124
	$32 = $14
	$34 = [116]
	goto $label$21 
	
.LABEL $label$123
	*($27) = $14
	CALL $146($32)
	$34 = [117]
	goto $label$21 
	
.LABEL $label$122
	*([0] + [4]) = ($33 + [272])
	return (unreachable)
	
.LABEL $label$121
	CALL $147($33)
	
.LABEL $label$120
	$34 = [1]
	goto $label$21 
	
.LABEL $label$119
	$34 = [0]
	goto $label$21 
	
.LABEL $label$118
	$34 = [0]
	goto $label$21 
	
.LABEL $label$117
	$34 = [0]
	goto $label$21 
	
.LABEL $label$116
	$34 = [2]
	goto $label$21 
	
.LABEL $label$115
	$34 = [3]
	goto $label$21 
	
.LABEL $label$114
	$34 = [4]
	goto $label$21 
	
.LABEL $label$113
	$34 = [5]
	goto $label$21 
	
.LABEL $label$112
	$34 = [5]
	goto $label$21 
	
.LABEL $label$111
	$34 = [5]
	goto $label$21 
	
.LABEL $label$110
	$34 = [5]
	goto $label$21 
	
.LABEL $label$109
	$34 = [7]
	goto $label$21 
	
.LABEL $label$108
	$34 = [9]
	goto $label$21 
	
.LABEL $label$107
	$34 = [8]
	goto $label$21 
	
.LABEL $label$106
	$34 = [8]
	goto $label$21 
	
.LABEL $label$105
	$34 = [10]
	goto $label$21 
	
.LABEL $label$104
	$34 = [11]
	goto $label$21 
	
.LABEL $label$103
	$34 = [47]
	goto $label$21 
	
.LABEL $label$102
	$34 = [12]
	goto $label$21 
	
.LABEL $label$101
	$34 = [14]
	goto $label$21 
	
.LABEL $label$100
	$34 = [15]
	goto $label$21 
	
.LABEL $label$99
	$34 = [42]
	goto $label$21 
	
.LABEL $label$98
	$34 = [16]
	goto $label$21 
	
.LABEL $label$97
	$34 = [18]
	goto $label$21 
	
.LABEL $label$96
	$34 = [19]
	goto $label$21 
	
.LABEL $label$95
	$34 = [37]
	goto $label$21 
	
.LABEL $label$94
	$34 = [20]
	goto $label$21 
	
.LABEL $label$93
	$34 = [36]
	goto $label$21 
	
.LABEL $label$92
	$34 = [23]
	goto $label$21 
	
.LABEL $label$91
	$34 = [25]
	goto $label$21 
	
.LABEL $label$90
	$34 = [24]
	goto $label$21 
	
.LABEL $label$89
	$34 = [27]
	goto $label$21 
	
.LABEL $label$88
	$34 = [29]
	goto $label$21 
	
.LABEL $label$87
	$34 = [31]
	goto $label$21 
	
.LABEL $label$86
	$34 = [33]
	goto $label$21 
	
.LABEL $label$85
	$34 = [36]
	goto $label$21 
	
.LABEL $label$84
	$34 = [39]
	goto $label$21 
	
.LABEL $label$83
	$34 = [40]
	goto $label$21 
	
.LABEL $label$82
	$34 = [44]
	goto $label$21 
	
.LABEL $label$81
	$34 = [45]
	goto $label$21 
	
.LABEL $label$80
	$34 = [49]
	goto $label$21 
	
.LABEL $label$79
	$34 = [50]
	goto $label$21 
	
.LABEL $label$78
	$34 = [54]
	goto $label$21 
	
.LABEL $label$77
	$34 = [53]
	goto $label$21 
	
.LABEL $label$76
	$34 = [58]
	goto $label$21 
	
.LABEL $label$75
	$34 = [63]
	goto $label$21 
	
.LABEL $label$74
	$34 = [63]
	goto $label$21 
	
.LABEL $label$73
	$34 = [67]
	goto $label$21 
	
.LABEL $label$72
	$34 = [65]
	goto $label$21 
	
.LABEL $label$71
	$34 = [65]
	goto $label$21 
	
.LABEL $label$70
	$34 = [66]
	goto $label$21 
	
.LABEL $label$69
	$34 = [66]
	goto $label$21 
	
.LABEL $label$68
	$34 = [66]
	goto $label$21 
	
.LABEL $label$67
	$34 = [69]
	goto $label$21 
	
.LABEL $label$66
	$34 = [71]
	goto $label$21 
	
.LABEL $label$65
	$34 = [71]
	goto $label$21 
	
.LABEL $label$64
	$34 = [72]
	goto $label$21 
	
.LABEL $label$63
	$34 = [73]
	goto $label$21 
	
.LABEL $label$62
	$34 = [135]
	goto $label$21 
	
.LABEL $label$61
	$34 = [74]
	goto $label$21 
	
.LABEL $label$60
	$34 = [76]
	goto $label$21 
	
.LABEL $label$59
	$34 = [77]
	goto $label$21 
	
.LABEL $label$58
	$34 = [130]
	goto $label$21 
	
.LABEL $label$57
	$34 = [78]
	goto $label$21 
	
.LABEL $label$56
	$34 = [80]
	goto $label$21 
	
.LABEL $label$55
	$34 = [81]
	goto $label$21 
	
.LABEL $label$54
	$34 = [125]
	goto $label$21 
	
.LABEL $label$53
	$34 = [82]
	goto $label$21 
	
.LABEL $label$52
	$34 = [84]
	goto $label$21 
	
.LABEL $label$51
	$34 = [86]
	goto $label$21 
	
.LABEL $label$50
	$34 = [85]
	goto $label$21 
	
.LABEL $label$49
	$34 = [85]
	goto $label$21 
	
.LABEL $label$48
	$34 = [88]
	goto $label$21 
	
.LABEL $label$47
	$34 = [90]
	goto $label$21 
	
.LABEL $label$46
	$34 = [89]
	goto $label$21 
	
.LABEL $label$45
	$34 = [92]
	goto $label$21 
	
.LABEL $label$44
	$34 = [94]
	goto $label$21 
	
.LABEL $label$43
	$34 = [96]
	goto $label$21 
	
.LABEL $label$42
	$34 = [98]
	goto $label$21 
	
.LABEL $label$41
	$34 = [100]
	goto $label$21 
	
.LABEL $label$40
	$34 = [108]
	goto $label$21 
	
.LABEL $label$39
	$34 = [119]
	goto $label$21 
	
.LABEL $label$38
	$34 = [103]
	goto $label$21 
	
.LABEL $label$37
	$34 = [105]
	goto $label$21 
	
.LABEL $label$36
	$34 = [107]
	goto $label$21 
	
.LABEL $label$35
	$34 = [117]
	goto $label$21 
	
.LABEL $label$34
	$34 = [118]
	goto $label$21 
	
.LABEL $label$33
	$34 = [112]
	goto $label$21 
	
.LABEL $label$32
	$34 = [114]
	goto $label$21 
	
.LABEL $label$31
	$34 = [116]
	goto $label$21 
	
.LABEL $label$30
	$34 = [123]
	goto $label$21 
	
.LABEL $label$29
	$34 = [122]
	goto $label$21 
	
.LABEL $label$28
	$34 = [127]
	goto $label$21 
	
.LABEL $label$27
	$34 = [128]
	goto $label$21 
	
.LABEL $label$26
	$34 = [132]
	goto $label$21 
	
.LABEL $label$25
	$34 = [133]
	goto $label$21 
	
.LABEL $label$24
	$34 = [137]
	goto $label$21 
	
.LABEL $label$23
	$34 = [138]
	goto $label$21 
	
.LABEL $label$22
	$34 = [144]
	goto $label$21 
	$34
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [688])
	*(($4 = CALL $145([88])) + [72]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = *(*($3 + [4]))
	*($4 + [16]) = *(*($3 + [8]))
	*($4 + [24]) = *(*($3 + [12]))
	*($4 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = CALL current_time()
	*($4 + [48]) = [1]
	*($4 + [44]) = ((uint_64)$5 / (uint_64)(int_64)1000000)
	*($4 + [32]) = *(*($3 + [16]))
	*($8 + [88]) = (($8 + [16]) + [58])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $69(($8 + [80]), $4)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)4520910338438201344, $2, $5, ($8 + [16]), [58])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [76])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [80]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $75(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $146($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $145(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $146($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [768])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $145([144])) + [40 align=4]) = (int_64)0
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [56 align=4]) = (int_64)0
	*($6 + [64 align=4]) = (int_64)0
	*($6 + [72 align=4]) = (int_64)0
	*($6 + [80]) = [0]
	*($6 + [84]) = [0]
	*($6 + [132]) = $0
	CALL $54(($8 + [32]), $6)
	*($6 + [136]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [136])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $43(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [76])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [80])) = $7
	CALL $146($7)
	
.LABEL $label$10
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [68])) = $7
	CALL $146($7)
	
.LABEL $label$11
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($4 + [56])) = $7
	CALL $146($7)
	
.LABEL $label$12
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($4 + [44])) = $7
	CALL $146($7)
	
.LABEL $label$13
	CALL $146($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [688])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $145([144])) + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72 align=4]) = (int_64)0
	*($3 + [80]) = [0]
	*($3 + [84]) = [0]
	*($3 + [132]) = $1
	CALL $42(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [136])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $43(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [76])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [80])) = $1
	CALL $146($1)
	
.LABEL $label$4
	$1 = *($3 + [64])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [68])) = $1
	CALL $146($1)
	
.LABEL $label$5
	$1 = *($3 + [52])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [56])) = $1
	CALL $146($1)
	
.LABEL $label$6
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$7 }
	*(($3 + [44])) = $1
	CALL $146($1)
	
.LABEL $label$7
	CALL $146($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$0 > (uint_32)[2]) ){ goto $label$3 }
	if ( $0 ){ goto $label$4 }
	if ( ((uint_32)$1 > (uint_32)$2) ){ goto $label$2 }
	
.LABEL $label$4
	if ( ((int_32)$0 != (int_32)[1]) ){ goto $label$5 }
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$5
	$3 = [156]
	if ( ((int_32)$0 != (int_32)[2]) ){ goto $label$1 }
	if ( ($1 <= $2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)$0 > (uint_32)[4]) ){ goto $label$6 }
	$3 = CALL $88($1, $2, $3)
	if ( ((int_32)$0 == (int_32)[3]) ){ goto $label$1 }
	$3 = ([0] - ($3 & [255]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((uint_32)$0 > (uint_32)[35]) ){ goto $label$11 }
	$3 = ($0 + [-26])
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$10 }
	goto $label$12 
	
.LABEL $label$12
	$3 = [156]
	if ( ($1 <= [4]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$11
	if ( ((uint_32)$0 > (uint_32)[43]) ){ goto $label$13 }
	$3 = [156]
	if ( ((int_32)($0 + [-36]) == (int_32)($2 + $1)) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$13
	$3 = [156]
	if ( ((uint_32)$0 >= (uint_32)[46]) ){ goto $label$1 }
	if ( ((int_32)($0 + [-44]) == (int_32)(($2 + $1) & [1])) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$10
	$3 = [156]
	$0 = (($2 + $1) & [255])
	if ( ((int_32)($0 + [-5]) == (int_32)((uint_32(((int_32)($0 + [1]) * (int_32)$0) >> [1]) + $2) & [255])) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$9
	$3 = [156]
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[2]) ){ goto $label$2 }
	if ( ((uint_32)$2 <= (uint_32)[5]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	$3 = [156]
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$2 }
	if ( ($2 <= [3]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$7
	$3 = [156]
	if ( ((int_32)$1 != (int_32)[2]) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)[5]) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = [100]
	
.LABEL $label$1
	$3
	return int_32(($3 << [24]) >> [24])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	*($1 + [56]) = *(*($3))
	$4 = *($1)
	*($1 + [64]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1072])
	*($5 + [72]) = ($5 + [58])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $69(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [58])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [224])
	*([0] + [4]) = $9
	*($9 + [222]) = $4
	*($9 + [208]) = $5
	$8 = [0]
	*((($9 + [168]) + [32])) = [0]
	*($9 + [184]) = (int_64)-1
	*($9 + [192]) = (int_64)0
	$5 = *($0)
	*($9 + [168]) = $5
	*($9 + [176]) = $5
	$4 = [0]
	$6 = CALL db_find_i64($5, $5, (int_64)8423677108051509248, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $35(($9 + [168]), $6)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($9 + [168])), [176])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [240])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) <= (uint_32)*($4 + [32])), [368])
	*((($9 + [128]) + [32])) = [0]
	*($9 + [144]) = (int_64)-1
	*($9 + [152]) = (int_64)0
	$7 = *($0)
	*($9 + [128]) = $7
	*($9 + [136]) = $7
	*($9 + [32]) = $3
	*($9 + [40]) = *($2)
	CALL sha256(($9 + [32]), [16], ($9 + [80]))
	$5 = *($9 + [80])
	$4 = CALL db_find_i64($7, $7, (int_64)-4421659622822117376, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $36(($9 + [128]), $4)
	CALL eosio_assert(((int_32)*($8 + [132]) == (int_32)($9 + [128])), [176])
	
.LABEL $label$2
	$7 = *($9 + [208])
	CALL eosio_assert(((uint_64)$7 > (uint_64)(int_64)999), [832])
	CALL eosio_assert(((uint_64)$7 <= (uint_64)*($8 + [124])), [848])
	$4 = *($9 + [222])
	*($9 + [32]) = $5
	*($9 + [48]) = $4
	*($9 + [40]) = *($1)
	CALL sha256(($9 + [32]), [20], ($9 + [80]))
	$3 = *($9 + [80])
	*((($9 + [80]) + [32])) = [0]
	*($9 + [88]) = $5
	*($9 + [96]) = (int_64)-1
	*($9 + [104]) = (int_64)0
	*($9 + [80]) = *($0)
	$2 = CALL $63($0, ($9 + [80]), $3, $5, $1, $4, $7)
	*($9 + [79]) = $2
	*($9 + [48]) = (int_64)-1
	*($9 + [56]) = [0]
	*($9 + [32]) = *($0)
	*($9 + [40]) = *($1)
	*(($9 + [60])) = [0]
	*((($9 + [32]) + [32])) = [0]
	CALL $64($0, ($9 + [32]), $3, $5, $1, $4, $7)
	CALL prints([896])
	CALL printui($3)
	CALL prints(( [640] ? [880] : $2 ))
	$1 = [0]
	if ( ($4 <= [3]) ){ goto $label$3 }
	$1 = [1]
	if ( ($4 <= [5]) ){ goto $label$3 }
	$1 = [2]
	if ( ($4 <= [36]) ){ goto $label$3 }
	$1 = [3]
	if ( ($4 <= [44]) ){ goto $label$3 }
	$1 = ( [4] ? [5] : ($4 <= [46]) )
	
.LABEL $label$3
	*($9 + [30]) = $1
	$5 = *($0)
	*($9 + [12]) = ($9 + [222])
	*($9 + [8]) = ($9 + [79])
	*($9 + [16]) = ($9 + [208])
	*($9 + [20]) = ($9 + [30])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [912])
	CALL $65(($9 + [128]), $8, $5, ($9 + [8]))
	$1 = *($9 + [56])
	if ( ($1 == 0) ){ goto $label$4 }
	$8 = ($9 + [60])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $146($4)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($9 + [56]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $1
	
.LABEL $label$5
	*($8) = $1
	CALL $146($0)
	
.LABEL $label$4
	$1 = *($9 + [104])
	if ( ($1 == 0) ){ goto $label$9 }
	$8 = ($9 + [108])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $146($4)
	
.LABEL $label$13
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($9 + [104]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $1
	
.LABEL $label$10
	*($8) = $1
	CALL $146($0)
	
.LABEL $label$9
	CALL $41(($9 + [152]))
	$1 = *($9 + [192])
	if ( ($1 == 0) ){ goto $label$14 }
	$8 = ($9 + [196])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$18 }
	CALL $146($4)
	
.LABEL $label$18
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($9 + [192]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $1
	
.LABEL $label$15
	*($8) = $1
	CALL $146($0)
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [224])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [288])
	*([0] + [4]) = $20
	*($20 + [280]) = $2
	*($20 + [272]) = $3
	$16 = [0]
	*($20 + [264]) = [0]
	*($20 + [256]) = (int_64)0
	$12 = (*($4 + [4]) - *($4))
	$19 = int_32($12 >> [1])
	if ( ($19 == 0) ){ goto $label$2 }
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$1 }
	$12 = CALL $145($12)
	*(($20 + [264])) = ($12 + ($19 << [1]))
	*($20 + [256]) = $12
	*($20 + [260]) = $12
	$15 = *($4)
	$19 = (*(($4 + [4])) - $15)
	if ( ((int_32)$19 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($12, $15, $19)
	*($20 + [260]) = ($12 + $19)
	
.LABEL $label$2
	*(($20 + [248])) = [0]
	*($20 + [232]) = (int_64)-1
	*($20 + [240]) = (int_64)0
	$14 = *($0)
	*($20 + [216]) = $14
	*($20 + [224]) = $14
	$12 = CALL db_find_i64($14, $14, (int_64)8423677108051509248, $2)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$16 = CALL $35(($20 + [216]), $12)
	CALL eosio_assert(((int_32)*($16 + [48]) == (int_32)($20 + [216])), [176])
	$3 = *($20 + [272])
	
.LABEL $label$3
	$12 = [0]
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [240])
	CALL eosio_assert(((int_32)(*(($4 + [4])) - *($4)) == (int_32)[72]), [272])
	CALL eosio_assert(((uint_64)$3 > (uint_64)(int_64)999999), [304])
	CALL eosio_assert((uint_64)($3 <= (int_64)1000000001), [336])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) <= (uint_32)*($16 + [32])), [368])
	$16 = *($4)
	$19 = *($16 + [62])
	$16 = *($16 + [64])
	*($20 + [212]) = $16
	$15 = ([10000] - $16)
	*($20 + [214]) = $15
	CALL eosio_assert(((($19 + [-91]) & [65535]) <= [19]), [384])
	CALL eosio_assert((($16 <= [6668]) & (($15 & [65535]) <= [6668])), [448])
	*(($5 = *($4)) + [62 align=2]) = [0]
	$7 = *($5 + [56])
	*($5 + [56]) = [0]
	$6 = *($5 + [58])
	$8 = *($5 + [68])
	$9 = *($5 + [70])
	*($5 + [58]) = [0]
	*($5 + [68]) = [0]
	*($5 + [70]) = [0]
	*(($10 = (($20 + [200]) + [8]))) = [0]
	*($20 + [200 align=4]) = (int_64)0
	*(($20 + [184])) = (int_64)0
	*(($20 + [176])) = (int_64)0
	*($20 + [168]) = (int_64)0
	*($20 + [160]) = (int_64)0
	*($20 + [152]) = (int_64)0
	$11 = (($20 + [200]) + [4])
	$18 = [0]
	
.LOOP $label$4:
	$13 = ([7] - $12)
	$16 = [0]
	$19 = [0]
	
.LOOP $label$5:
	$17 = ($15 & [255])
	$16 = *(($5 + (((uint_32(((int_32)($17 + [1]) * (int_32)$17) >> [1]) + $16) & [255]) << [1])))
	*(($17 = (($20 + [160]) + (($15 = ($16 + $12)) << [2])))) = (*($17) + $16)
	*(($15 = (($20 + [152]) | (($15 & [1]) << [2])))) = ($16 + *($15))
	*(($15 = ( ($20 + [200]) ? ( $11 ? $10 : ((int_32)$12 == (int_32)($15 = ($19 & [255]))) ) : ((uint_32)$12 > (uint_32)$15) ))) = ($16 + *($15))
	$18 = ($16 + $18)
	$19 = ($19 + [1])
	$16 = ($19 & [255])
	if ( ((int_32)$16 <= (int_32)$13) ){ goto $label$5 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)[8]) ){ goto $label$4 }
	$15 = [0]
	$12 = ($9 + $8)
	$16 = ($7 + $6)
	$19 = ([10000] - $18)
	$13 = (($19 - $16) - $12)
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [512])
	CALL eosio_assert(($13 <= [1000]), [544])
	*(($18 = (($20 + [200]) + [4]))) = (*($18) + $13)
	*($20 + [188]) = (*($20 + [188]) + $19)
	*($20 + [200]) = (*($20 + [200]) + $16)
	*(($19 = (($20 + [200]) + [8]))) = (*($19) + $12)
	*($20 + [152]) = ((($8 + $6) + $13) + *($20 + [152]))
	*($20 + [156]) = (($9 + $7) + *($20 + [156]))
	$19 = *($4)
	$18 = *($19 + [42])
	$17 = *($19 + [54])
	*($20) = *($20 + [280])
	*($20 + [8]) = *($1)
	CALL sha256($20, [16], ($20 + [96]))
	$2 = *($20 + [96])
	*($20 + [144]) = $2
	*(($20 + [128])) = [0]
	*($20 + [112]) = (int_64)-1
	*($20 + [120]) = (int_64)0
	$14 = *($0)
	*($20 + [96]) = $14
	*($20 + [104]) = $14
	$19 = CALL db_find_i64($14, $14, (int_64)-4421659622822117376, $2)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $36(($20 + [96]), $19) + [132]) == (int_32)($20 + [96])), [176])
	goto $label$6 
	
.LABEL $label$7
	$5 = ($17 + $12)
	$10 = ($18 + $16)
	*($20 + [88]) = [0]
	*($20 + [80]) = (int_64)0
	*($20 + [72]) = [0]
	*($20 + [64]) = (int_64)0
	*($20 + [56]) = [0]
	*($20 + [48]) = (int_64)0
	$17 = (($20 + [64]) + [8])
	$19 = [0]
	$16 = [0]
	
.LOOP $label$8:
	$3 = ((uint_64)((int_64)*(($16 + [656])) * (int_64)$3) / (uint_64)(int_64)200)
	*($20) = $3
	if ( ((int_32)$19 == (int_32)$15) ){ goto $label$12 }
	*($19) = $3
	*($20 + [84]) = ($19 + [8])
	if ( $16 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $38(($20 + [80]), $20)
	if ( ($16 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$18 = [0]
	$19 = [0]
	
.LOOP $label$13:
	$15 = (($16 & [255]) + [-1])
	if ( ((uint_32)$15 > (uint_32)[3]) ){ goto $label$14 }
	goto $label$18 
	
.LABEL $label$18
	$12 = *((($20 + [212]) + ($18 << [1])))
	goto $label$14 
	
.LABEL $label$17
	$12 = *((($20 + [160]) + ($18 << [2])))
	goto $label$14 
	
.LABEL $label$16
	$15 = (($19 & [255]) + [-21])
	if ( ((uint_32)$15 > (uint_32)[8]) ){ goto $label$20 }
	$12 = $13
	goto $label$14 
	
.LABEL $label$22
	$12 = $10
	goto $label$14 
	
.LABEL $label$21
	$12 = *(*($4) + [66])
	goto $label$14 
	
.LABEL $label$20
	$12 = *((*($4) + ($18 << [1])))
	goto $label$14 
	
.LABEL $label$19
	$12 = $5
	goto $label$14 
	
.LABEL $label$15
	$12 = *((($20 + [152]) + ($18 << [2])))
	
.LABEL $label$14
	$3 = (CASTING uint_64)(uint_32 $12)
	$14 = ((uint_64)((int_64)*($20) * (int_64)$3) / (uint_64)(int_64)10000)
	*($20 + [40]) = $14
	$15 = *($20 + [68])
	if ( ((uint_32)$15 >= (uint_32)*($17)) ){ goto $label$24 }
	*($15) = $14
	*($20 + [68]) = ($15 + [8])
	goto $label$23 
	
.LABEL $label$24
	CALL $39(($20 + [64]), ($20 + [40]))
	
.LABEL $label$23
	$18 = (CASTING uint_32)(uint_64 ((uint_64)((int_64)*($20) * (int_64)$3) / (uint_64)(int_64)10000))
	*($20 + [40]) = $18
	$15 = *($20 + [52])
	if ( ((uint_32)$15 >= (uint_32)*((($20 + [48]) + [8]))) ){ goto $label$26 }
	*($15) = $18
	*($20 + [52]) = ($15 + [4])
	goto $label$25 
	
.LABEL $label$26
	CALL $40(($20 + [48]), ($20 + [40]))
	
.LABEL $label$25
	$19 = ($19 + [1])
	$18 = ($19 & [255])
	if ( ($18 <= *(($16 + [672]))) ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$10
	$19 = [0]
	$15 = [0]
	
.LOOP $label$27:
	$12 = *((($20 + [200]) + ($19 << [2])))
	$3 = (CASTING uint_64)(uint_32 $12)
	$14 = ((uint_64)((int_64)*($20) * (int_64)$3) / (uint_64)(int_64)10000)
	*($20 + [40]) = $14
	$19 = *($20 + [68])
	if ( ((uint_32)$19 >= (uint_32)*($17)) ){ goto $label$29 }
	*($19) = $14
	*($20 + [68]) = ($19 + [8])
	goto $label$28 
	
.LABEL $label$29
	CALL $39(($20 + [64]), ($20 + [40]))
	
.LABEL $label$28
	$18 = (CASTING uint_32)(uint_64 ((uint_64)((int_64)*($20) * (int_64)$3) / (uint_64)(int_64)10000))
	*($20 + [40]) = $18
	$19 = *($20 + [52])
	if ( ((uint_32)$19 >= (uint_32)*((($20 + [48]) + [8]))) ){ goto $label$31 }
	*($19) = $18
	*($20 + [52]) = ($19 + [4])
	goto $label$30 
	
.LABEL $label$31
	CALL $40(($20 + [48]), ($20 + [40]))
	
.LABEL $label$30
	$15 = ($15 + [1])
	$19 = ($15 & [255])
	if ( ($19 <= *(($16 + [672]))) ){ goto $label$27 }
	
.LABEL $label$9
	$16 = ($16 + [1])
	if ( ((int_32)$16 == (int_32)[5]) ){ goto $label$32 }
	$15 = *((($20 + [80]) + [8]))
	$19 = *($20 + [84])
	$3 = *($20 + [272])
	goto $label$8 
	
.LABEL $label$32
	$16 = *($20 + [80])
	$12 = *($20 + [84])
	CALL prints([576])
	CALL printui((CASTING uint_64)(uint_32 int_32(($12 - $16) >> [3])))
	*($20 + [36]) = ((uint_64)*($20 + [272]) / (uint_64)(int_64)100)
	$3 = *($0)
	*($20 + [4]) = ($20 + [144])
	*($20) = ($20 + [80])
	*($20 + [8]) = ($20 + [280])
	*($20 + [16]) = ($20 + [272])
	*($20 + [20]) = ($20 + [256])
	*($20 + [24]) = ($20 + [48])
	*($20 + [12]) = $1
	*($20 + [28]) = ($20 + [64])
	*($20 + [32]) = ($20 + [36])
	CALL $37(($20 + [40]), ($20 + [96]), $3, $20)
	$3 = *($1)
	CALL prints([608])
	CALL printui(*($20 + [144]))
	CALL prints([624])
	CALL printn($3)
	CALL prints([624])
	CALL printui(*($20 + [280]))
	CALL prints([640])
	$16 = *($20 + [48])
	if ( ($16 == 0) ){ goto $label$33 }
	*($20 + [52]) = $16
	CALL $146($16)
	
.LABEL $label$33
	$16 = *($20 + [64])
	if ( ($16 == 0) ){ goto $label$34 }
	*($20 + [68]) = $16
	CALL $146($16)
	
.LABEL $label$34
	$16 = *($20 + [80])
	if ( ($16 == 0) ){ goto $label$6 }
	*($20 + [84]) = $16
	CALL $146($16)
	
.LABEL $label$6
	CALL $41(($20 + [120]))
	$19 = *($20 + [240])
	if ( ($19 == 0) ){ goto $label$35 }
	$15 = ($20 + [244])
	$16 = *($15)
	if ( ((int_32)$16 == (int_32)$19) ){ goto $label$37 }
	
.LOOP $label$38:
	$16 = ($16 + [-24])
	$12 = *($16)
	*($16) = [0]
	if ( ($12 == 0) ){ goto $label$39 }
	CALL $146($12)
	
.LABEL $label$39
	if ( ((int_32)$19 != (int_32)$16) ){ goto $label$38 }
	$16 = *(($20 + [240]))
	goto $label$36 
	
.LABEL $label$37
	$16 = $19
	
.LABEL $label$36
	*($15) = $19
	CALL $146($16)
	
.LABEL $label$35
	$16 = *($20 + [256])
	if ( ($16 == 0) ){ goto $label$40 }
	*($20 + [260]) = $16
	CALL $146($16)
	
.LABEL $label$40
	*([0] + [4]) = ($20 + [288])
	return (unreachable)
	
.LABEL $label$1
	CALL $154(($20 + [256]))
	$15
	$15
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	*($13 + [72]) = [0]
	*($13 + [64]) = (int_64)0
	$11 = *($0)
	if ( ((int_64)*($1) != (int_64)$11) ){ goto $label$1 }
	CALL prints([80])
	$11 = *($0)
	
.LABEL $label$1
	if ( ((int_64)*($1 + [8]) != (int_64)$11) ){ goto $label$3 }
	*($13 + [56]) = *($1)
	CALL $31(($13 + [64]), ($1 + [32]), [44])
	$3 = *($13 + [64])
	$9 = ((int_32)(*($13 + [68]) - $3) / (int_32)[12])
	if ( ((int_32)$9 == (int_32)[39]) ){ goto $label$5 }
	if ( ((int_32)$9 != (int_32)[5]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $155(($13 + [40]), ($3 + [12]))
	$3 = ($10 & [1])
	$10 = *($12 + [24])
	$12 = *($13 + [64])
	$10 = ( *(($12 + [28])) ? uint_32($10 >> [1]) : $3 )
	if ( ($10 == 0) ){ goto $label$7 }
	$12 = ( *(($12 + [32])) ? ($12 + [25]) : $3 )
	$5 = (int_64)0
	
.LOOP $label$8:
	$3 = *($12)
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$9 }
	$5 = ((int_64)((int_64)((int_64)$5 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$9
	$12 = ($12 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = (int_64)0
	
.LABEL $label$6
	if ( ((int_32)$9 == (int_32)[39]) ){ goto $label$13 }
	if ( ((int_32)$9 != (int_32)[5]) ){ goto $label$10 }
	$12 = *($13 + [40])
	$10 = CALL strlen([96])
	if ( ((int_32)$10 != (int_32)( *($13 + [44]) ? uint_32($12 >> [1]) : ($12 & [1]) )) ){ goto $label$10 }
	if ( CALL $152(($13 + [40]), [0], [-1], [96], $10) ){ goto $label$10 }
	$4 = *($13 + [64])
	if ( (*($4 + [36]) & [1]) ){ goto $label$12 }
	$12 = (($4 + [36]) + [1])
	goto $label$11 
	
.LABEL $label$13
	$12 = *($13 + [40])
	$10 = CALL strlen([144])
	if ( ((int_32)$10 != (int_32)( *($13 + [44]) ? uint_32($12 >> [1]) : ($12 & [1]) )) ){ goto $label$10 }
	if ( CALL $152(($13 + [40]), [0], [-1], [144], $10) ){ goto $label$10 }
	*($13 + [32]) = [0]
	*($13 + [24]) = (int_64)0
	$9 = [3]
	$4 = ($13 + [32])
	
.LOOP $label$14:
	$11 = (int_64)0
	$3 = ($10 & [1])
	$10 = *($12)
	$12 = (*($13 + [64]) + ((int_32)$9 * (int_32)[12]))
	$10 = ( *($12 + [4]) ? uint_32($10 >> [1]) : $3 )
	if ( ($10 == 0) ){ goto $label$15 }
	$12 = ( *($12 + [8]) ? ($12 + [1]) : $3 )
	$11 = (int_64)0
	
.LOOP $label$16:
	$3 = *($12)
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$17 }
	$11 = ((int_64)((int_64)((int_64)$11 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$17
	$12 = ($12 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$16 }
	
.LABEL $label$15
	$10 = (CASTING uint_32)(uint_64 $11)
	*($13 + [22]) = $10
	$12 = *($13 + [28])
	if ( ((uint_32)$12 >= (uint_32)*($4)) ){ goto $label$19 }
	*($12) = $10
	*($13 + [28]) = ($12 + [2])
	goto $label$18 
	
.LABEL $label$19
	CALL $34(($13 + [24]), ($13 + [22]))
	
.LABEL $label$18
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[39]) ){ goto $label$14 }
	CALL prints([160])
	*($13 + [8]) = (int_64)0
	*($13 + [16]) = [0]
	$11 = *($1 + [16])
	$12 = (*($13 + [28]) - *($13 + [24]))
	$10 = int_32($12 >> [1])
	if ( ($10 == 0) ){ goto $label$20 }
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$2 }
	$12 = CALL $145($12)
	*(($13 + [16])) = ($12 + ($10 << [1]))
	*($13 + [8]) = $12
	*($13 + [12]) = $12
	$3 = *($13 + [24])
	$10 = (*($13 + [28]) - $3)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($12, $3, $10)
	*($13 + [12]) = (*($13 + [12]) + $10)
	
.LABEL $label$20
	CALL $33($0, ($13 + [56]), $5, $11, ($13 + [8]))
	$12 = *($13 + [8])
	if ( ($12 == 0) ){ goto $label$21 }
	*($13 + [12]) = $12
	CALL $146($12)
	
.LABEL $label$21
	$12 = *($13 + [24])
	if ( ($12 == 0) ){ goto $label$10 }
	*($13 + [28]) = $12
	CALL $146($12)
	goto $label$10 
	
.LABEL $label$12
	$12 = *(($4 + [44]))
	
.LABEL $label$11
	$10 = [-1]
	
.LOOP $label$22:
	$3 = ($12 + $10)
	$9 = ($10 + [1])
	$10 = $9
	if ( *(($3 + [1])) ){ goto $label$22 }
	$2 = (CASTING uint_64)(uint_32 $9)
	$11 = (int_64)0
	$6 = (int_64)59
	$7 = (int_64)0
	
.LOOP $label$23:
	$8 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$2) ){ goto $label$24 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$10 = ($10 + [165])
	goto $label$25 
	
.LABEL $label$26
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$28 }
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$27 
	
.LABEL $label$28
	$8 = ((int_64)$8 & (int_64)15)
	
.LABEL $label$27
	$12 = ($12 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$23 }
	*($13 + [24]) = $7
	$12 = ($12 & [1])
	$12 = *($4 + [48])
	$10 = ( *(($4 + [52])) ? uint_32($12 >> [1]) : $12 )
	if ( ($10 == 0) ){ goto $label$30 }
	$12 = ( *(($4 + [56])) ? ($4 + [49]) : $12 )
	$11 = (int_64)0
	
.LOOP $label$31:
	$3 = *($12)
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$32 }
	$11 = ((int_64)((int_64)((int_64)$11 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$32
	$12 = ($12 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$11 = (int_64)0
	
.LABEL $label$29
	CALL prints([112])
	CALL printn($7)
	CALL prints([128])
	CALL printui(((int_64)$11 & (int_64)65535))
	CALL $32($0, ($13 + [56]), ($13 + [24]), $5, ((CASTING uint_32)(uint_64 $11) & [65535]), *($1 + [16]))
	
.LABEL $label$10
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$33 }
	CALL $146(*($13 + [48]))
	
.LABEL $label$33
	$3 = *($13 + [64])
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$3 }
	$12 = *($13 + [68])
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$35 }
	$10 = ([0] - $3)
	$12 = ($12 + [-12])
	
.LOOP $label$36:
	if ( ((*($12) & [1]) == 0) ){ goto $label$37 }
	CALL $146(*(($12 + [8])))
	
.LABEL $label$37
	$12 = ($12 + [-12])
	if ( ((int_32)($12 + $10) != (int_32)[-12]) ){ goto $label$36 }
	$12 = *($13 + [64])
	goto $label$34 
	
.LABEL $label$35
	$12 = $3
	
.LABEL $label$34
	*($13 + [68]) = $3
	CALL $146($12)
	
.LABEL $label$3
	*([0] + [4]) = ($13 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $154(($13 + [8]))
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($1)
	$8 = ($9 & [1])
	$3 = ( *($1 + [8]) ? ($1 + [1]) : $8 )
	*($10 + [24]) = $3
	$1 = ( *($1 + [4]) ? uint_32($9 >> [1]) : $8 )
	$9 = ($3 + $1)
	*($10 + [16]) = $9
	*($10 + [8]) = $3
	if ( ($1 == 0) ){ goto $label$3 }
	$2 = ($2 & [255])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	$1 = $3
	
.LOOP $label$4:
	if ( ((int_32)*($3) != (int_32)$2) ){ goto $label$5 }
	$9 = *($6)
	if ( ((uint_32)$9 >= (uint_32)*($5)) ){ goto $label$10 }
	*($9) = (int_64)0
	*(($9 + [8])) = [0]
	$4 = ($3 - $1)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$9 }
	*($9) = ($4 << [1])
	$8 = ($9 + [1])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	CALL $76($0, ($10 + [24]), ($10 + [8]))
	goto $label$6 
	
.LABEL $label$9
	$7 = (($4 + [16]) & [-16])
	$8 = CALL $145($7)
	*($9) = ($7 | [1])
	*($9 + [8]) = $8
	*($9 + [4]) = $4
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$7 }
	
.LABEL $label$8
	$9 = $8
	
.LOOP $label$11:
	*($9) = *($1)
	$9 = ($9 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$11 }
	$8 = ($8 + $4)
	
.LABEL $label$7
	*($8) = [0]
	*($6) = (*($6) + [12])
	
.LABEL $label$6
	$3 = *($10 + [8])
	$1 = ($3 + [1])
	*($10 + [24]) = $1
	$9 = *($10 + [16])
	
.LABEL $label$5
	$3 = ($3 + [1])
	*($10 + [8]) = $3
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$3 }
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)*($0 + [8])) ){ goto $label$14 }
	*($3) = (int_64)0
	*(($3 + [8])) = [0]
	$8 = ($9 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$13 }
	*($3) = ($8 << [1])
	$2 = ($3 + [1])
	goto $label$12 
	
.LABEL $label$14
	CALL $76($0, ($10 + [24]), ($10 + [16]))
	goto $label$3 
	
.LABEL $label$13
	$6 = (($8 + [16]) & [-16])
	$2 = CALL $145($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $8
	
.LABEL $label$12
	$3 = $2
	
.LOOP $label$15:
	*($3) = *($1)
	$3 = ($3 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$15 }
	*(($2 + $8)) = [0]
	*(($1 = ($0 + [4]))) = (*($1) + [12])
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $147($9)
	
.LABEL $label$1
	CALL $147($3)
	(unreachable)
}

void .FUNC $129 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [688])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $145([32])
	CALL $133($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $132(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $146($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1760])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1808])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1872])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $146($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $146($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}