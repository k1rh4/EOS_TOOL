(data (i32.const 8192) "PPP\00")
(data (i32.const 8196) "unable to find key\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8301) "max_supply is wrong!\00")
(data (i32.const 8322) "[bestpppdices]supply: \00")
(data (i32.const 8345) "[bestpppdices]max_supply: \00")
(data (i32.const 8372) "[bestpppdices]issuer: \00")
(data (i32.const 8395) "number param is wrong!\00")
(data (i32.const 8418) "roll param is wrong!\00")
(data (i32.const 8439) "EOS\00")
(data (i32.const 8443) "only support EOS!\00")
(data (i32.const 8461) "EOS amount is error!\00")
(data (i32.const 8482) "win\00")
(data (i32.const 8486) "loss\00")
(data (i32.const 8491) "result info format is wrong!\00")
(data (i32.const 8520) "----player: \00")
(data (i32.const 8533) "----quantity: \00")
(data (i32.const 8548) " ----hit it----\00")
(data (i32.const 8564) " ----player: \00")
(data (i32.const 8578) " ----quantity: \00")
(data (i32.const 8594) "no according transfer in\00")
(data (i32.const 8619) "game:roll\00")
(data (i32.const 8629) "transfer PPP\00")
(data (i32.const 8642) "transfer eos\00")
(data (i32.const 8656) "\"game\":\"dice\"\00")
(data (i32.const 8670) "\"seed\":\00")
(data (i32.const 8678) "\"lucknum\":\00")
(data (i32.const 8689) "Receiving transfer message: from: \00")
(data (i32.const 8724) " to: \00")
(data (i32.const 8730) " self: \00")
(data (i32.const 8738) " no to diceaccount: from: \00")
(data (i32.const 8765) " \00")
(data (i32.const 8767) "data not erased properly\00")
(data (i32.const 8792) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8856) "code: \00")
(data (i32.const 8863) " action: \00")
(data (i32.const 8873) "string is too long to be a valid symbol_code\00")
(data (i32.const 8918) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8971) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9020) "invalid symbol name\00")
(data (i32.const 9040) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9099) "attempt to subtract asset with different symbol\00")
(data (i32.const 9147) "subtraction underflow\00")
(data (i32.const 9169) "subtraction overflow\00")
(data (i32.const 9190) "write\00")
(data (i32.const 9196) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9247) "error reading iterator\00")
(data (i32.const 9270) "read\00")
(data (i32.const 9275) "-%lld.%s %s\00")
(data (i32.const 9287) "%lld.%s %s\00")
(data (i32.const 9298) "get\00")
(data (i32.const 9302) "cannot increment end iterator\00")
(data (i32.const 9332) "cannot create objects in table of another contract\00")
(data (i32.const 9383) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9435) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9489) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9537) "cannot pass end iterator to erase\00")
(data (i32.const 9571) "object passed to erase is not in multi_index\00")
(data (i32.const 9616) "cannot erase objects in table of another contract\00")
(data (i32.const 9666) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9719) "cannot pass end iterator to modify\00")
(data (i32.const 9754) "object passed to modify is not in multi_index\00")
(data (i32.const 9800) "cannot modify objects in table of another contract\00")
(data (i32.const 9851) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9910) "recv transfer in from: \00")
(data (i32.const 9934) " recv quantity in from: \00")
(data (i32.const 18384) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 18400) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 18416) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 18432) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "prints" (func $fimport$2 (param i32)))
(import "env" "prints_l" (func $fimport$3 (param i32 i32)))
(import "env" "printn" (func $fimport$4 (param i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_recipient" (func $fimport$6 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$11 (result i64)))
(import "env" "current_time" (func $fimport$12 (result i64)))
(import "env" "send_deferred" (func $fimport$13 (param i32 i64 i32 i32 i32)))
(import "env" "db_update_i64" (func $fimport$14 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$16 (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$20 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $30))
(export "_ZdlPv" (func $63))
(export "_Znwj" (func $61))
(export "_Znaj" (func $62))
(export "_ZdaPv" (func $64))
(export "_ZnwjSt11align_val_t" (func $65))
(export "_ZnajSt11align_val_t" (func $66))
(export "_ZdlPvSt11align_val_t" (func $67))
(export "_ZdaPvSt11align_val_t" (func $68))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $1 $27 $22 $6 $7 $85 $87)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18512))
(global $global$2 i32 (i32.const 18512))


int_32 .FUNC $94 (int_32 $0)
{
	return CALL $95([9980], $0)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $96($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8215])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9972]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9976])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9972]) = [1]
	$2 = ($2 << [16])
	*([0] + [9976]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9976])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9976]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9972]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9972]) = [1]
	$3 = ($3 << [16])
	*([0] + [9976]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9976])
	
.LABEL $label$10
	*([0] + [9976]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18364])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18172]
	$3 = (((int_32)$1 * (int_32)[12]) + [18172])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $76())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $93($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $94($1)
	
.LABEL $label$2
	*(CALL $76()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $94(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $97($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $70(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $70(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9298])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $9($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9270])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $49($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $73($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $73($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $69($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9190])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9190])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9190])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $40(CALL $39($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9190])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9190])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9190])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9190])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9190])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9190])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9190])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9190])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9270])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9270])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9270])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9270])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $48($0, ($1 + [32]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9270])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9270])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9270])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9270])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9270])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9190])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9190])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $40($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9247])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [44]) = $0
	CALL $47(($3 + [32]), $5)
	*($5 + [48]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $75($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11)
{
	CALL require_auth((int_64)4229331771834111360)
	CALL require_recipient($1)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11)
{
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	float_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	float_32 $23
	$12 = ($global$0 - [320])
	$global$0 = $12
	*($12 + [296]) = $1
	*($12 + [288]) = $4
	*($12 + [292]) = $3
	CALL require_auth((int_64)4229331771834111360)
	CALL eosio_assert((($3 + [-2]) <= [95]), [8395])
	CALL eosio_assert((((int_32)$4 > (int_32)[-1]) & ((int_32)$3 < (int_32)[101])), [8418])
	$3 = CALL $91([8439])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8873])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$13 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($3 + [8438]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8918])
	
.LABEL $label$6
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$13 = ((int_64)$13 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$13 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)((int_64)$13 | (int_64)4)), [8443])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [8461])
	$3 = [1]
	$4 = *($5)
	$14 = CALL $91([8482])
	if ( ((int_32)$14 != (int_32)( *($5 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$8 }
	if ( (CALL $74($5, [0], [-1], [8482], $14) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$4 = CALL $91([8486])
	$3 = *($5)
	$14 = ($3 & [1])
	$15 = uint_32($3 >> [1])
	$3 = [0]
	if ( ((int_32)$4 != (int_32)( *(($5 + [4])) ? $15 : $14 )) ){ goto $label$7 }
	$3 = (CALL $74($5, [0], [-1], [8486], $4) == 0)
	
.LABEL $label$7
	CALL eosio_assert($3, [8491])
	CALL prints([8520])
	CALL printn($1)
	CALL prints([8533])
	CALL $4($12, $2)
	$3 = *($12)
	$4 = ($3 & [1])
	CALL prints_l(( *($12 + [8]) ? ($12 | [1]) : $4 ), ( *($12 + [4]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($12) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($12 + [8])))
	
.LABEL $label$9
	$16 = CALL $2($12)
	*(($12 + [280])) = [0]
	*($12 + [264]) = (int_64)-1
	$13 = *($0)
	*($12 + [248]) = $13
	*($12 + [256]) = $13
	*($12 + [272]) = (int_64)0
	$3 = CALL db_lowerbound_i64($13, $13, (int_64)-5003011376160280576, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	$17 = ($12 | [1])
	$4 = CALL $8(($12 + [248]), $3)
	$13 = *($4 + [8])
	if ( ((int_64)$13 != (int_64)*($12 + [296])) ){ goto $label$12 }
	$18 = [4]
	goto $label$10 
	
.LABEL $label$12
	$18 = [0]
	goto $label$10 
	
.LABEL $label$11
	$18 = [228]
	
.LABEL $label$10
	
.LOOP $label$13:
	goto $label$405 
	
.LABEL $label$407
	CALL eosio_assert(((int_64)*(($4 + [24])) == (int_64)*(($2 + [8]))), [9040])
	$13 = *(($4 + [8]))
	if ( ((int_64)*($4 + [16]) != (int_64)*($2)) ){ goto $label$176 }
	goto $label$177 
	
.LABEL $label$406
	$4 = CALL $8(($12 + [248]), $3)
	$13 = *($4 + [8])
	if ( ((int_64)$13 == (int_64)*($12 + [296])) ){ goto $label$175 }
	$18 = [0]
	goto $label$13 
	
.LABEL $label$405
	CALL prints([8564])
	CALL printn($13)
	CALL prints([8578])
	CALL $4($12, ($4 + [16]))
	$3 = *($12)
	$14 = ($3 & [1])
	$15 = ($12 + [8])
	CALL prints_l(( *($15) ? $17 : $14 ), ( *($12 + [4]) ? uint_32($3 >> [1]) : $14 ))
	if ( ((*($12) & [1]) == 0) ){ goto $label$178 }
	$18 = [1]
	goto $label$13 
	
.LABEL $label$404
	CALL _ZdlPv(*($15))
	$18 = [2]
	goto $label$13 
	
.LABEL $label$403
	CALL eosio_assert([1], [9302])
	$3 = CALL db_next_i64(*($4 + [48]), $12)
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$174 }
	$18 = [228]
	goto $label$13 
	
.LABEL $label$402
	$4 = [0]
	$3 = [0]
	goto $label$173 
	
.LABEL $label$401
	CALL prints([8548])
	CALL printn($13)
	$3 = [1]
	$18 = [6]
	goto $label$13 
	
.LABEL $label$400
	CALL eosio_assert($3, [8594])
	*(($12 + [136])) = [0]
	*($12 + [128]) = (int_64)0
	$3 = CALL $91([8619])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$172 }
	$18 = [7]
	goto $label$13 
	
.LABEL $label$399
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$171 }
	$18 = [226]
	goto $label$13 
	
.LABEL $label$398
	*($12 + [128]) = ($3 << [1])
	$14 = (($12 + [128]) | [1])
	if ( $3 ){ goto $label$169 }
	goto $label$170 
	
.LABEL $label$397
	$15 = (($3 + [16]) & [-16])
	$14 = CALL _Znwj($15)
	*($12 + [128]) = ($15 | [1])
	*($12 + [136]) = $14
	*($12 + [132]) = $3
	$18 = [9]
	goto $label$13 
	
.LABEL $label$396
	CALL memcpy($14, [8619], $3)
	$18 = [10]
	goto $label$13 
	
.LABEL $label$395
	*(($14 + $3)) = [0]
	*(($14 = (($12 + [144]) + [24]))) = [0]
	*(($12 + [24])) = *(($2 + [8]))
	$3 = (($12 + [128]) + [8])
	*(($12 + [40])) = *($3)
	*($3) = [0]
	*($12 + [8]) = (int_64)4229331772035754384
	*($12) = (int_64)4229331771834111360
	*($12 + [144]) = (int_64)6138663591592764928
	*($12 + [152]) = (int_64)-3617168760277827584
	*($12 + [160]) = (int_64)0
	*($12 + [16]) = *($2)
	*($12 + [32]) = *($12 + [128])
	*($12 + [128]) = (int_64)0
	*(($3 = CALL _Znwj([16]))) = (int_64)4229331771834111360
	*($3 + [8]) = (int_64)3617214756542218240
	*((($12 + [144]) + [36])) = [0]
	$15 = ($3 + [16])
	*($14) = $15
	*(($12 + [164])) = $15
	*($12 + [160]) = $3
	*($12 + [172 align=4]) = (int_64)0
	$3 = *($12 + [32])
	$14 = ( *(($12 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($14 + [32])
	$13 = (CASTING uint_64)(uint_32 $14)
	$14 = ($12 + [172])
	$18 = [11]
	goto $label$13 
	
.LABEL $label$394
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$168 }
	$18 = [12]
	goto $label$13 
	
.LABEL $label$393
	if ( ($3 == 0) ){ goto $label$167 }
	$18 = [13]
	goto $label$13 
	
.LABEL $label$392
	CALL $9($14, $3)
	$14 = *(($12 + [176]))
	$3 = *(($12 + [172]))
	goto $label$166 
	
.LABEL $label$391
	$14 = [0]
	$3 = [0]
	$18 = [14]
	goto $label$13 
	
.LABEL $label$390
	*($12 + [212]) = $3
	*($12 + [208]) = $3
	*($12 + [216]) = $14
	*($12 + [304]) = ($12 + [208])
	*($12 + [312]) = $12
	CALL $10(($12 + [312]), ($12 + [304]))
	CALL $11(($12 + [208]), ($12 + [144]))
	$3 = *($12 + [208])
	CALL send_inline($3, (*($12 + [212]) - $3))
	$3 = *($12 + [208])
	if ( ($3 == 0) ){ goto $label$165 }
	$18 = [15]
	goto $label$13 
	
.LABEL $label$389
	*($12 + [212]) = $3
	CALL _ZdlPv($3)
	$18 = [16]
	goto $label$13 
	
.LABEL $label$388
	$3 = *($12 + [172])
	if ( ($3 == 0) ){ goto $label$164 }
	$18 = [17]
	goto $label$13 
	
.LABEL $label$387
	*(($12 + [176])) = $3
	CALL _ZdlPv($3)
	$18 = [18]
	goto $label$13 
	
.LABEL $label$386
	$3 = *($12 + [160])
	if ( ($3 == 0) ){ goto $label$163 }
	$18 = [19]
	goto $label$13 
	
.LABEL $label$385
	*(($12 + [164])) = $3
	CALL _ZdlPv($3)
	$18 = [20]
	goto $label$13 
	
.LABEL $label$384
	if ( ((*(($12 + [32])) & [1]) == 0) ){ goto $label$162 }
	$18 = [21]
	goto $label$13 
	
.LABEL $label$383
	CALL _ZdlPv(*(($12 + [40])))
	$18 = [22]
	goto $label$13 
	
.LABEL $label$382
	if ( ((*($12 + [128]) & [1]) == 0) ){ goto $label$161 }
	$18 = [23]
	goto $label$13 
	
.LABEL $label$381
	CALL _ZdlPv(*(($12 + [136])))
	$18 = [24]
	goto $label$13 
	
.LABEL $label$380
	$19 = CALL $78(((float_64)(CASTING float_64)(int_64 ((int_64)*($2) * (int_64)100)) / (float_64)CALL $81((float_64)2, (CASTING float_64)(int_32 ($16 + [-1])))))
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$160 }
	$18 = [224]
	goto $label$13 
	
.LABEL $label$379
	$20 = (int_64)-9223372036854775808
	goto $label$159 
	
.LABEL $label$378
	$20 = (Rounds 0)($19)
	$18 = [26]
	goto $label$13 
	
.LABEL $label$377
	$3 = CALL $91([8192])
	if ( ($3 <= [8]) ){ goto $label$158 }
	$18 = [223]
	goto $label$13 
	
.LABEL $label$376
	CALL eosio_assert([0], [8873])
	goto $label$156 
	
.LABEL $label$375
	if ( ($3 == 0) ){ goto $label$157 }
	$18 = [28]
	goto $label$13 
	
.LABEL $label$374
	$13 = (int_64)0
	$18 = [29]
	goto $label$13 
	
.LABEL $label$373
	$14 = *(($3 + [8191]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$154 }
	$18 = [221]
	goto $label$13 
	
.LABEL $label$372
	CALL eosio_assert([0], [8918])
	$18 = [30]
	goto $label$13 
	
.LABEL $label$371
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$155 }
	$18 = [31]
	goto $label$13 
	
.LABEL $label$370
	$1 = ((int_64)$13 << (int_64)8)
	$18 = [32]
	goto $label$13 
	
.LABEL $label$369
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8971])
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	$21 = ((int_64)$1 | (int_64)4)
	$3 = [0]
	$18 = [33]
	goto $label$13 
	
.LABEL $label$368
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$147 }
	$18 = [215]
	goto $label$13 
	
.LABEL $label$367
	$1 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$18 = [216]
	goto $label$13 
	
.LABEL $label$366
	$13 = $1
	$14 = [1]
	$15 = $3
	$3 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$150 }
	goto $label$149 
	
.LABEL $label$365
	$13 = $1
	$18 = [218]
	goto $label$13 
	
.LABEL $label$364
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$148 }
	$18 = [219]
	goto $label$13 
	
.LABEL $label$363
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_32)$3 < (int_32)[6])
	$15 = ($3 + [1])
	$3 = $15
	if ( $14 ){ goto $label$14 }
	$18 = [220]
	goto $label$13 
	
.LABEL $label$362
	$14 = [1]
	$3 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$152 }
	goto $label$151 
	
.LABEL $label$361
	$14 = [0]
	$18 = [35]
	goto $label$13 
	
.LABEL $label$360
	CALL eosio_assert($14, [9020])
	$3 = CALL $91([8192])
	if ( ($3 <= [8]) ){ goto $label$146 }
	$18 = [214]
	goto $label$13 
	
.LABEL $label$359
	CALL eosio_assert([0], [8873])
	goto $label$144 
	
.LABEL $label$358
	if ( ($3 == 0) ){ goto $label$145 }
	$18 = [37]
	goto $label$13 
	
.LABEL $label$357
	$13 = (int_64)0
	$18 = [38]
	goto $label$13 
	
.LABEL $label$356
	$14 = *(($3 + [8191]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$142 }
	$18 = [212]
	goto $label$13 
	
.LABEL $label$355
	CALL eosio_assert([0], [8918])
	$18 = [39]
	goto $label$13 
	
.LABEL $label$354
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$143 }
	$18 = [40]
	goto $label$13 
	
.LABEL $label$353
	$1 = ((int_64)$13 << (int_64)8)
	$18 = [41]
	goto $label$13 
	
.LABEL $label$352
	CALL eosio_assert([1], [8971])
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	$22 = ((int_64)$1 | (int_64)4)
	$3 = [0]
	$18 = [42]
	goto $label$13 
	
.LABEL $label$351
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$135 }
	$18 = [206]
	goto $label$13 
	
.LABEL $label$350
	$1 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$18 = [207]
	goto $label$13 
	
.LABEL $label$349
	$13 = $1
	$14 = [1]
	$15 = $3
	$3 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$348
	$13 = $1
	$18 = [209]
	goto $label$13 
	
.LABEL $label$347
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$136 }
	$18 = [210]
	goto $label$13 
	
.LABEL $label$346
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_32)$3 < (int_32)[6])
	$15 = ($3 + [1])
	$3 = $15
	if ( $14 ){ goto $label$16 }
	$18 = [211]
	goto $label$13 
	
.LABEL $label$345
	$14 = [1]
	$3 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$140 }
	goto $label$139 
	
.LABEL $label$344
	$14 = [0]
	$18 = [44]
	goto $label$13 
	
.LABEL $label$343
	CALL eosio_assert($14, [9020])
	CALL eosio_assert(((int_64)$21 == (int_64)$22), [9040])
	if ( ((int_64)$20 < (int_64)1) ){ goto $label$134 }
	$18 = [185]
	goto $label$13 
	
.LABEL $label$342
	*(($12 + [136])) = [0]
	*($12 + [128]) = (int_64)0
	$3 = CALL $91([8629])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$28 }
	$18 = [186]
	goto $label$13 
	
.LABEL $label$341
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$27 }
	$18 = [204]
	goto $label$13 
	
.LABEL $label$340
	*($12 + [128]) = ($3 << [1])
	$14 = (($12 + [128]) | [1])
	if ( $3 ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$339
	$15 = (($3 + [16]) & [-16])
	$14 = CALL _Znwj($15)
	*($12 + [128]) = ($15 | [1])
	*($12 + [136]) = $14
	*($12 + [132]) = $3
	$18 = [188]
	goto $label$13 
	
.LABEL $label$338
	CALL memcpy($14, [8629], $3)
	$18 = [189]
	goto $label$13 
	
.LABEL $label$337
	*(($14 + $3)) = [0]
	*((($12 + [144]) + [16])) = $21
	*(($14 = ($12 + [24]))) = [0]
	$3 = ($12 + [136])
	*(($12 + [176])) = *($3)
	*($3) = [0]
	*($12 + [152]) = $20
	*($12) = (int_64)4229331772105823536
	*($12 + [8]) = (int_64)8516769789752901632
	*($12 + [16]) = (int_64)0
	*($12 + [144]) = *($12 + [296])
	*($12 + [168]) = *($12 + [128])
	*($12 + [128]) = (int_64)0
	*(($3 = CALL _Znwj([16]))) = (int_64)4229331772105823536
	*($3 + [8]) = (int_64)3617214756542218240
	*(($12 + [36])) = [0]
	$15 = ($3 + [16])
	*($14) = $15
	*(($12 + [20])) = $15
	*($12 + [16]) = $3
	*($12 + [28 align=4]) = (int_64)0
	$3 = *($12 + [168])
	$14 = ( *((($12 + [144]) + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($14 + [24])
	$13 = (CASTING uint_64)(uint_32 $14)
	$15 = (($12 + [144]) + [24])
	$14 = ($12 + [28])
	$18 = [190]
	goto $label$13 
	
.LABEL $label$336
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$24 }
	$18 = [191]
	goto $label$13 
	
.LABEL $label$335
	if ( ($3 == 0) ){ goto $label$23 }
	$18 = [192]
	goto $label$13 
	
.LABEL $label$334
	CALL $9($14, $3)
	$14 = *(($12 + [32]))
	$3 = *(($12 + [28]))
	goto $label$22 
	
.LABEL $label$333
	$14 = [0]
	$3 = [0]
	$18 = [193]
	goto $label$13 
	
.LABEL $label$332
	*($12 + [212]) = $3
	*($12 + [208]) = $3
	*($12 + [216]) = $14
	CALL eosio_assert(((int_32)($14 - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($12 + [212]), ($12 + [144]), [8])
	$3 = (*($12 + [212]) + [8])
	*($12 + [212]) = $3
	CALL eosio_assert(((int_32)(*($12 + [216]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($12 + [212]), (($12 + [144]) + [8]), [8])
	$3 = (*($12 + [212]) + [8])
	*($12 + [212]) = $3
	*($12 + [312]) = *(($12 + [160]))
	CALL eosio_assert(((int_32)(*($12 + [216]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($12 + [212]), ($12 + [312]), [8])
	*($12 + [212]) = (*($12 + [212]) + [8])
	CALL $12(($12 + [208]), $15)
	CALL $11(($12 + [208]), $12)
	$3 = *($12 + [208])
	CALL send_inline($3, (*($12 + [212]) - $3))
	$3 = *($12 + [208])
	if ( ($3 == 0) ){ goto $label$21 }
	$18 = [194]
	goto $label$13 
	
.LABEL $label$331
	*($12 + [212]) = $3
	CALL _ZdlPv($3)
	$18 = [195]
	goto $label$13 
	
.LABEL $label$330
	$3 = *($12 + [28])
	if ( ($3 == 0) ){ goto $label$20 }
	$18 = [196]
	goto $label$13 
	
.LABEL $label$329
	*(($12 + [32])) = $3
	CALL _ZdlPv($3)
	$18 = [197]
	goto $label$13 
	
.LABEL $label$328
	$3 = *($12 + [16])
	if ( ($3 == 0) ){ goto $label$19 }
	$18 = [198]
	goto $label$13 
	
.LABEL $label$327
	*(($12 + [20])) = $3
	CALL _ZdlPv($3)
	$18 = [199]
	goto $label$13 
	
.LABEL $label$326
	if ( ((*(($12 + [168])) & [1]) == 0) ){ goto $label$18 }
	$18 = [200]
	goto $label$13 
	
.LABEL $label$325
	CALL _ZdlPv(*(($12 + [176])))
	$18 = [201]
	goto $label$13 
	
.LABEL $label$324
	if ( ((*($12 + [128]) & [1]) == 0) ){ goto $label$133 }
	$18 = [202]
	goto $label$13 
	
.LABEL $label$323
	CALL _ZdlPv(*(($12 + [136])))
	$18 = [45]
	goto $label$13 
	
.LABEL $label$322
	$3 = CALL $91([8439])
	if ( ($3 <= [8]) ){ goto $label$132 }
	$18 = [184]
	goto $label$13 
	
.LABEL $label$321
	CALL eosio_assert([0], [8873])
	goto $label$130 
	
.LABEL $label$320
	if ( ($3 == 0) ){ goto $label$131 }
	$18 = [47]
	goto $label$13 
	
.LABEL $label$319
	$13 = (int_64)0
	$18 = [48]
	goto $label$13 
	
.LABEL $label$318
	$14 = *(($3 + [8438]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$128 }
	$18 = [182]
	goto $label$13 
	
.LABEL $label$317
	CALL eosio_assert([0], [8918])
	$18 = [49]
	goto $label$13 
	
.LABEL $label$316
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$129 }
	$18 = [50]
	goto $label$13 
	
.LABEL $label$315
	$1 = ((int_64)$13 << (int_64)8)
	$18 = [51]
	goto $label$13 
	
.LABEL $label$314
	CALL eosio_assert([1], [8971])
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	$22 = ((int_64)$1 | (int_64)4)
	$3 = [0]
	$18 = [52]
	goto $label$13 
	
.LABEL $label$313
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$121 }
	$18 = [176]
	goto $label$13 
	
.LABEL $label$312
	$1 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$18 = [177]
	goto $label$13 
	
.LABEL $label$311
	$13 = $1
	$14 = [1]
	$15 = $3
	$3 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$124 }
	goto $label$123 
	
.LABEL $label$310
	$13 = $1
	$18 = [179]
	goto $label$13 
	
.LABEL $label$309
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$122 }
	$18 = [180]
	goto $label$13 
	
.LABEL $label$308
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_32)$3 < (int_32)[6])
	$15 = ($3 + [1])
	$3 = $15
	if ( $14 ){ goto $label$29 }
	$18 = [181]
	goto $label$13 
	
.LABEL $label$307
	$14 = [1]
	$3 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$306
	$14 = [0]
	$18 = [54]
	goto $label$13 
	
.LABEL $label$305
	CALL eosio_assert($14, [9020])
	$3 = *($5)
	$14 = CALL $91([8482])
	if ( ((int_32)$14 != (int_32)( *(($5 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$120 }
	$18 = [133]
	goto $label$13 
	
.LABEL $label$304
	if ( (CALL $74($5, [0], [-1], [8482], $14) == 0) ){ goto $label$119 }
	$18 = [55]
	goto $label$13 
	
.LABEL $label$303
	$19 = CALL $78(((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.015))
	$3 = CALL $91([8439])
	$14 = ($3 <= [8])
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$115 }
	$18 = [132]
	goto $label$13 
	
.LABEL $label$302
	$20 = (int_64)-9223372036854775808
	if ( ($14 == 0) ){ goto $label$113 }
	$18 = [57]
	goto $label$13 
	
.LABEL $label$301
	if ( $3 ){ goto $label$112 }
	$18 = [130]
	goto $label$13 
	
.LABEL $label$300
	$1 = (int_64)0
	goto $label$109 
	
.LABEL $label$299
	$20 = (Rounds 0)($19)
	if ( $14 ){ goto $label$114 }
	$18 = [131]
	goto $label$13 
	
.LABEL $label$298
	CALL eosio_assert([0], [8873])
	$18 = [58]
	goto $label$13 
	
.LABEL $label$297
	$13 = (int_64)0
	$18 = [59]
	goto $label$13 
	
.LABEL $label$296
	$14 = *(($3 + [8438]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$110 }
	$18 = [129]
	goto $label$13 
	
.LABEL $label$295
	CALL eosio_assert([0], [8918])
	$18 = [60]
	goto $label$13 
	
.LABEL $label$294
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$111 }
	$18 = [61]
	goto $label$13 
	
.LABEL $label$293
	$1 = ((int_64)$13 << (int_64)8)
	$18 = [62]
	goto $label$13 
	
.LABEL $label$292
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8971])
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	$21 = ((int_64)$1 | (int_64)4)
	$3 = [0]
	$18 = [63]
	goto $label$13 
	
.LABEL $label$291
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$103 }
	$18 = [123]
	goto $label$13 
	
.LABEL $label$290
	$1 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$58 }
	$18 = [124]
	goto $label$13 
	
.LABEL $label$289
	$13 = $1
	$14 = [1]
	$15 = $3
	$3 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$288
	$13 = $1
	$18 = [126]
	goto $label$13 
	
.LABEL $label$287
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$104 }
	$18 = [127]
	goto $label$13 
	
.LABEL $label$286
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_32)$3 < (int_32)[6])
	$15 = ($3 + [1])
	$3 = $15
	if ( $14 ){ goto $label$57 }
	$18 = [128]
	goto $label$13 
	
.LABEL $label$285
	$14 = [1]
	$3 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$108 }
	goto $label$107 
	
.LABEL $label$284
	$14 = [0]
	$18 = [65]
	goto $label$13 
	
.LABEL $label$283
	CALL eosio_assert($14, [9020])
	CALL eosio_assert(((int_64)$21 == (int_64)$22), [9040])
	if ( ((int_64)$20 < (int_64)1) ){ goto $label$102 }
	$18 = [110]
	goto $label$13 
	
.LABEL $label$282
	*(($12 + [24])) = $21
	*(($12 + [8])) = *(($2 + [8]))
	*($12 + [16]) = $20
	*($12) = *($2)
	$14 = CALL $70(($12 + [32]), $11)
	*(($15 = (($12 + [144]) + [24]))) = [0]
	*($12 + [152]) = (int_64)5371971556220076032
	*($12 + [144]) = (int_64)4229331771904667808
	*($12 + [160]) = (int_64)0
	*(($3 = CALL _Znwj([16]))) = (int_64)4229331771904667808
	*($3 + [8]) = (int_64)3617214756542218240
	*((($12 + [144]) + [36])) = [0]
	$17 = ($3 + [16])
	*($15) = $17
	*(($12 + [164])) = $17
	*($12 + [160]) = $3
	*($12 + [172 align=4]) = (int_64)0
	$3 = *($14)
	$14 = ( *(($12 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($14 + [32])
	$13 = (CASTING uint_64)(uint_32 $14)
	$14 = ($12 + [172])
	$18 = [111]
	goto $label$13 
	
.LABEL $label$281
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$64 }
	$18 = [112]
	goto $label$13 
	
.LABEL $label$280
	if ( ($3 == 0) ){ goto $label$63 }
	$18 = [113]
	goto $label$13 
	
.LABEL $label$279
	CALL $9($14, $3)
	$14 = *(($12 + [176]))
	$3 = *(($12 + [172]))
	goto $label$62 
	
.LABEL $label$278
	$14 = [0]
	$3 = [0]
	$18 = [114]
	goto $label$13 
	
.LABEL $label$277
	*($12 + [212]) = $3
	*($12 + [208]) = $3
	*($12 + [216]) = $14
	*($12 + [312]) = ($12 + [208])
	*($12 + [128]) = $12
	CALL $13(($12 + [128]), ($12 + [312]))
	CALL $11(($12 + [208]), ($12 + [144]))
	$3 = *($12 + [208])
	CALL send_inline($3, (*($12 + [212]) - $3))
	$3 = *($12 + [208])
	if ( ($3 == 0) ){ goto $label$61 }
	$18 = [115]
	goto $label$13 
	
.LABEL $label$276
	*($12 + [212]) = $3
	CALL _ZdlPv($3)
	$18 = [116]
	goto $label$13 
	
.LABEL $label$275
	$3 = *($12 + [172])
	if ( ($3 == 0) ){ goto $label$60 }
	$18 = [117]
	goto $label$13 
	
.LABEL $label$274
	*(($12 + [176])) = $3
	CALL _ZdlPv($3)
	$18 = [118]
	goto $label$13 
	
.LABEL $label$273
	$3 = *($12 + [160])
	if ( ($3 == 0) ){ goto $label$59 }
	$18 = [119]
	goto $label$13 
	
.LABEL $label$272
	*(($12 + [164])) = $3
	CALL _ZdlPv($3)
	$18 = [120]
	goto $label$13 
	
.LABEL $label$271
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$101 }
	$18 = [121]
	goto $label$13 
	
.LABEL $label$270
	CALL _ZdlPv(*(($12 + [40])))
	$18 = [66]
	goto $label$13 
	
.LABEL $label$269
	*(($15 = ($12 + [240]))) = [0]
	*($12 + [224]) = (int_64)-1
	*($12 + [232]) = (int_64)0
	$13 = *($0)
	*($12 + [208]) = $13
	*($12 + [216]) = $13
	*($12 + [8]) = $2
	*($12 + [20]) = $5
	*($12 + [24]) = $6
	*($12 + [28]) = $7
	*($12 + [32]) = $8
	*($12 + [36]) = $9
	*($12 + [4]) = ($12 + [296])
	*($12) = ($12 + [208])
	*($12 + [12]) = ($12 + [292])
	*($12 + [16]) = ($12 + [288])
	*($12 + [128]) = $13
	CALL eosio_assert(((int_64)$13 == (int_64)CALL eosio_assert1()), [9332])
	*($12 + [148]) = $12
	*($12 + [144]) = ($12 + [208])
	*($12 + [152]) = ($12 + [128])
	*(($3 = CALL _Znwj([112])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72 align=4]) = (int_64)0
	*($3 + [80 align=4]) = (int_64)0
	*($3 + [88 align=4]) = (int_64)0
	*($3 + [96]) = [0]
	*($3 + [100]) = ($12 + [208])
	CALL $14(($12 + [144]), $3)
	*($12 + [312]) = $3
	$13 = *($3)
	*($12 + [144]) = $13
	$17 = *($3 + [104])
	*($12 + [304]) = $17
	$16 = ($12 + [236])
	$14 = *($16)
	if ( ((uint_32)$14 >= (uint_32)*($15)) ){ goto $label$100 }
	$18 = [109]
	goto $label$13 
	
.LABEL $label$268
	*($14 + [8]) = $13
	*($14 + [16]) = $17
	*($12 + [312]) = [0]
	*($14) = $3
	*($16) = ($14 + [24])
	$3 = *($12 + [312])
	$14 = [0]
	*($12 + [312]) = [0]
	if ( ($3 == 0) ){ goto $label$98 }
	$18 = [68]
	goto $label$13 
	
.LABEL $label$267
	if ( (*($3 + [88]) & [1]) ){ goto $label$97 }
	$18 = [108]
	goto $label$13 
	
.LABEL $label$266
	if ( (*($3 + [76]) & [1]) ){ goto $label$96 }
	$18 = [107]
	goto $label$13 
	
.LABEL $label$265
	$15 = [1]
	if ( (*($3 + [64]) & [1]) ){ goto $label$94 }
	$18 = [106]
	goto $label$13 
	
.LABEL $label$264
	if ( (*($3 + [52]) & $15) ){ goto $label$92 }
	$18 = [105]
	goto $label$13 
	
.LABEL $label$263
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$90 }
	$18 = [73]
	goto $label$13 
	
.LABEL $label$262
	CALL _ZdlPv(*(($3 + [48])))
	$18 = [74]
	goto $label$13 
	
.LABEL $label$261
	CALL _ZdlPv($3)
	goto $label$87 
	
.LABEL $label$260
	CALL $15(($12 + [232]), ($12 + [312]), ($12 + [144]), ($12 + [304]))
	$3 = *($12 + [312])
	$14 = [0]
	*($12 + [312]) = [0]
	if ( $3 ){ goto $label$99 }
	$18 = [75]
	goto $label$13 
	
.LABEL $label$259
	$3 = ((int_32)$4 != (int_32)$14)
	CALL eosio_assert($3, [9537])
	CALL eosio_assert($3, [9302])
	$3 = CALL db_next_i64(*($4 + [48]), $12)
	if ( ((int_32)$3 < (int_32)$14) ){ goto $label$86 }
	$18 = [76]
	goto $label$13 
	
.LABEL $label$258
	CALL $8(($12 + [248]), $3)
	$18 = [77]
	goto $label$13 
	
.LABEL $label$257
	CALL $16(($12 + [248]), $4)
	$13 = CALL current_time()
	*(($12 + [172])) = (int_64)0
	*((($12 + [144]) + [44])) = (int_64)0
	*(($12 + [196])) = (int_64)0
	*($12 + [156]) = [0]
	*($12 + [160]) = [0]
	*($12 + [164 align=4]) = (int_64)0
	*($12 + [180 align=4]) = (int_64)0
	*($12 + [144]) = ((CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [136]) = (int_64)3617214756542218240
	*($12 + [128]) = *($0)
	*($12 + [312]) = (int_64)5445040692075053056
	*(($12 + [16])) = *(($2 + [8]))
	*($12) = *($12 + [296])
	*($12 + [8]) = *($2)
	*($12 + [24]) = *($12 + [292])
	*($12 + [28]) = *($12 + [288])
	CALL $70(($12 + [32]), $5)
	CALL $70(($12 + [44]), $6)
	CALL $70(($12 + [56]), $7)
	CALL $70(($12 + [68]), $8)
	CALL $70(($12 + [80]), $9)
	CALL $70(($12 + [92]), $10)
	CALL $70(($12 + [104]), $11)
	CALL $17(($12 + [180]), ($12 + [128]), $0, ($12 + [312]), $12)
	if ( (*($12 + [104]) & [1]) ){ goto $label$85 }
	$18 = [104]
	goto $label$13 
	
.LABEL $label$256
	if ( (*($12 + [92]) & [1]) ){ goto $label$84 }
	$18 = [103]
	goto $label$13 
	
.LABEL $label$255
	$3 = [1]
	if ( (*($12 + [80]) & [1]) ){ goto $label$82 }
	$18 = [102]
	goto $label$13 
	
.LABEL $label$254
	if ( (*($12 + [68]) & $3) ){ goto $label$80 }
	$18 = [101]
	goto $label$13 
	
.LABEL $label$253
	$3 = [1]
	if ( (*($12 + [56]) & [1]) ){ goto $label$78 }
	$18 = [100]
	goto $label$13 
	
.LABEL $label$252
	if ( (*($12 + [44]) & $3) ){ goto $label$76 }
	$18 = [99]
	goto $label$13 
	
.LABEL $label$251
	$3 = [1]
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$74 }
	$18 = [84]
	goto $label$13 
	
.LABEL $label$250
	CALL _ZdlPv(*(($12 + [40])))
	$18 = [85]
	goto $label$13 
	
.LABEL $label$249
	*(($12 + [164])) = [0]
	*($12 + [8]) = (int_64)0
	*($12) = *($4)
	$13 = *($0)
	CALL $18(($12 + [128]), ($12 + [144]))
	$4 = *($12 + [128])
	CALL send_deferred($12, $13, $4, (*($12 + [132]) - $4), $3)
	$3 = *($12 + [128])
	if ( ($3 == 0) ){ goto $label$71 }
	$18 = [86]
	goto $label$13 
	
.LABEL $label$248
	*($12 + [132]) = $3
	CALL _ZdlPv($3)
	$18 = [87]
	goto $label$13 
	
.LABEL $label$247
	CALL $19(($12 + [144]))
	CALL $20(($12 + [232]))
	$14 = *($12 + [272])
	if ( ($14 == 0) ){ goto $label$70 }
	$18 = [88]
	goto $label$13 
	
.LABEL $label$246
	$2 = ($12 + [276])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$69 }
	$18 = [89]
	goto $label$13 
	
.LABEL $label$245
	$18 = [90]
	goto $label$13 
	
.LABEL $label$244
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$67 }
	$18 = [91]
	goto $label$13 
	
.LABEL $label$243
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$66 }
	$18 = [92]
	goto $label$13 
	
.LABEL $label$242
	CALL _ZdlPv(*(($4 + [40])))
	$18 = [93]
	goto $label$13 
	
.LABEL $label$241
	CALL _ZdlPv($4)
	$18 = [94]
	goto $label$13 
	
.LABEL $label$240
	if ( ((int_32)$14 != (int_32)$3) ){ goto $label$68 }
	$18 = [95]
	goto $label$13 
	
.LABEL $label$239
	$3 = *(($12 + [272]))
	goto $label$65 
	
.LABEL $label$238
	CALL _ZdlPv(*(($12 + [112])))
	if ( ((*($12 + [92]) & [1]) == 0) ){ goto $label$83 }
	$18 = [79]
	goto $label$13 
	
.LABEL $label$237
	CALL _ZdlPv(*(($12 + [100])))
	$3 = [1]
	if ( ((*($12 + [80]) & [1]) == 0) ){ goto $label$81 }
	$18 = [80]
	goto $label$13 
	
.LABEL $label$236
	CALL _ZdlPv(*(($12 + [88])))
	if ( ((*($12 + [68]) & $3) == 0) ){ goto $label$79 }
	$18 = [81]
	goto $label$13 
	
.LABEL $label$235
	CALL _ZdlPv(*(($12 + [76])))
	$3 = [1]
	if ( ((*($12 + [56]) & [1]) == 0) ){ goto $label$77 }
	$18 = [82]
	goto $label$13 
	
.LABEL $label$234
	CALL _ZdlPv(*(($12 + [64])))
	if ( ((*($12 + [44]) & $3) == 0) ){ goto $label$75 }
	$18 = [83]
	goto $label$13 
	
.LABEL $label$233
	CALL _ZdlPv(*(($12 + [52])))
	$3 = [1]
	if ( (*($12 + [32]) & [1]) ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$232
	CALL _ZdlPv(*(($3 + [96])))
	if ( ((*($3 + [76]) & [1]) == 0) ){ goto $label$95 }
	$18 = [70]
	goto $label$13 
	
.LABEL $label$231
	CALL _ZdlPv(*(($3 + [84])))
	$15 = [1]
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$93 }
	$18 = [71]
	goto $label$13 
	
.LABEL $label$230
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [52]) & $15) == 0) ){ goto $label$91 }
	$18 = [72]
	goto $label$13 
	
.LABEL $label$229
	CALL _ZdlPv(*(($3 + [60])))
	if ( (*($3 + [40]) & [1]) ){ goto $label$88 }
	goto $label$89 
	
.LABEL $label$228
	$3 = $14
	$18 = [96]
	goto $label$13 
	
.LABEL $label$227
	*($2) = $14
	CALL _ZdlPv($3)
	$18 = [97]
	goto $label$13 
	
.LABEL $label$226
	$global$0 = ($12 + [320])
	return (unreachable)
	
.LABEL $label$225
	$1 = (int_64)0
	goto $label$153 
	
.LABEL $label$224
	$1 = (int_64)0
	goto $label$141 
	
.LABEL $label$223
	$1 = (int_64)0
	goto $label$127 
	
.LABEL $label$222
	$19 = CALL $78((CASTING float_64)(int_32 ((int_32)[985000] / (int_32)(*($12 + [292]) + [-1]))))
	$23 = CALL $79(((float_32)(CASTING float_32)(int_64 *($2)) * (float_32)(DEMOTE float_32)(float_64 ((float_64)$19 / (float_64)(float_64)1e4))))
	$3 = CALL $91([8439])
	$14 = ($3 <= [8])
	if ( ((float_32)(float_32)|$23| < (float_32)(float_32)9223372036854775808) ){ goto $label$56 }
	$18 = [175]
	goto $label$13 
	
.LABEL $label$221
	$20 = (int_64)-9223372036854775808
	if ( ($14 == 0) ){ goto $label$54 }
	$18 = [136]
	goto $label$13 
	
.LABEL $label$220
	if ( $3 ){ goto $label$53 }
	$18 = [173]
	goto $label$13 
	
.LABEL $label$219
	$1 = (int_64)0
	goto $label$50 
	
.LABEL $label$218
	$20 = (Rounds 0)($23)
	if ( $14 ){ goto $label$55 }
	$18 = [174]
	goto $label$13 
	
.LABEL $label$217
	CALL eosio_assert([0], [8873])
	$18 = [137]
	goto $label$13 
	
.LABEL $label$216
	$13 = (int_64)0
	$18 = [138]
	goto $label$13 
	
.LABEL $label$215
	$14 = *(($3 + [8438]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$51 }
	$18 = [172]
	goto $label$13 
	
.LABEL $label$214
	CALL eosio_assert([0], [8918])
	$18 = [139]
	goto $label$13 
	
.LABEL $label$213
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$52 }
	$18 = [140]
	goto $label$13 
	
.LABEL $label$212
	$1 = ((int_64)$13 << (int_64)8)
	$18 = [141]
	goto $label$13 
	
.LABEL $label$211
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8971])
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	$21 = ((int_64)$1 | (int_64)4)
	$3 = [0]
	$18 = [142]
	goto $label$13 
	
.LABEL $label$210
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$44 }
	$18 = [166]
	goto $label$13 
	
.LABEL $label$209
	$1 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$18 = [167]
	goto $label$13 
	
.LABEL $label$208
	$13 = $1
	$14 = [1]
	$15 = $3
	$3 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$207
	$13 = $1
	$18 = [169]
	goto $label$13 
	
.LABEL $label$206
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$45 }
	$18 = [170]
	goto $label$13 
	
.LABEL $label$205
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$14 = ((int_32)$3 < (int_32)[6])
	$15 = ($3 + [1])
	$3 = $15
	if ( $14 ){ goto $label$31 }
	$18 = [171]
	goto $label$13 
	
.LABEL $label$204
	$14 = [1]
	$3 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$203
	$14 = [0]
	$18 = [144]
	goto $label$13 
	
.LABEL $label$202
	CALL eosio_assert($14, [9020])
	CALL eosio_assert(((int_64)$21 == (int_64)$22), [9040])
	if ( ((int_64)$20 < (int_64)1) ){ goto $label$118 }
	$18 = [145]
	goto $label$13 
	
.LABEL $label$201
	*(($12 + [136])) = [0]
	*($12 + [128]) = (int_64)0
	$3 = CALL $91([8642])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$43 }
	$18 = [146]
	goto $label$13 
	
.LABEL $label$200
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$42 }
	$18 = [164]
	goto $label$13 
	
.LABEL $label$199
	*($12 + [128]) = ($3 << [1])
	$14 = (($12 + [128]) | [1])
	if ( $3 ){ goto $label$40 }
	goto $label$41 
	
.LABEL $label$198
	$15 = (($3 + [16]) & [-16])
	$14 = CALL _Znwj($15)
	*($12 + [128]) = ($15 | [1])
	*($12 + [136]) = $14
	*($12 + [132]) = $3
	$18 = [148]
	goto $label$13 
	
.LABEL $label$197
	CALL memcpy($14, [8642], $3)
	$18 = [149]
	goto $label$13 
	
.LABEL $label$196
	*(($14 + $3)) = [0]
	*(($12 + [24])) = $21
	*(($14 = (($12 + [144]) + [24]))) = [0]
	$3 = ($12 + [136])
	*(($12 + [40])) = *($3)
	*($3) = [0]
	*($12) = (int_64)4229331772035754384
	*($12 + [16]) = $20
	*($12 + [144]) = (int_64)6138663591592764928
	*($12 + [152]) = (int_64)-3617168760277827584
	*($12 + [160]) = (int_64)0
	*($12 + [8]) = *($12 + [296])
	*($12 + [32]) = *($12 + [128])
	*($12 + [128]) = (int_64)0
	*(($3 = CALL _Znwj([16]))) = (int_64)4229331772035754384
	*($3 + [8]) = (int_64)3617214756542218240
	*((($12 + [144]) + [36])) = [0]
	$15 = ($3 + [16])
	*($14) = $15
	*(($12 + [164])) = $15
	*($12 + [160]) = $3
	*($12 + [172 align=4]) = (int_64)0
	$3 = *($12 + [32])
	$14 = ( *(($12 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($14 + [32])
	$13 = (CASTING uint_64)(uint_32 $14)
	$14 = ($12 + [172])
	$18 = [150]
	goto $label$13 
	
.LABEL $label$195
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$39 }
	$18 = [151]
	goto $label$13 
	
.LABEL $label$194
	if ( ($3 == 0) ){ goto $label$38 }
	$18 = [152]
	goto $label$13 
	
.LABEL $label$193
	CALL $9($14, $3)
	$14 = *(($12 + [176]))
	$3 = *(($12 + [172]))
	goto $label$37 
	
.LABEL $label$192
	$14 = [0]
	$3 = [0]
	$18 = [153]
	goto $label$13 
	
.LABEL $label$191
	*($12 + [212]) = $3
	*($12 + [208]) = $3
	*($12 + [216]) = $14
	*($12 + [304]) = ($12 + [208])
	*($12 + [312]) = $12
	CALL $10(($12 + [312]), ($12 + [304]))
	CALL $11(($12 + [208]), ($12 + [144]))
	$3 = *($12 + [208])
	CALL send_inline($3, (*($12 + [212]) - $3))
	$3 = *($12 + [208])
	if ( ($3 == 0) ){ goto $label$36 }
	$18 = [154]
	goto $label$13 
	
.LABEL $label$190
	*($12 + [212]) = $3
	CALL _ZdlPv($3)
	$18 = [155]
	goto $label$13 
	
.LABEL $label$189
	$3 = *($12 + [172])
	if ( ($3 == 0) ){ goto $label$35 }
	$18 = [156]
	goto $label$13 
	
.LABEL $label$188
	*(($12 + [176])) = $3
	CALL _ZdlPv($3)
	$18 = [157]
	goto $label$13 
	
.LABEL $label$187
	$3 = *($12 + [160])
	if ( ($3 == 0) ){ goto $label$34 }
	$18 = [158]
	goto $label$13 
	
.LABEL $label$186
	*(($12 + [164])) = $3
	CALL _ZdlPv($3)
	$18 = [159]
	goto $label$13 
	
.LABEL $label$185
	if ( ((*(($12 + [32])) & [1]) == 0) ){ goto $label$33 }
	$18 = [160]
	goto $label$13 
	
.LABEL $label$184
	CALL _ZdlPv(*(($12 + [40])))
	$18 = [161]
	goto $label$13 
	
.LABEL $label$183
	if ( ((*($12 + [128]) & [1]) == 0) ){ goto $label$116 }
	$18 = [162]
	goto $label$13 
	
.LABEL $label$182
	CALL _ZdlPv(*(($12 + [136])))
	goto $label$117 
	
.LABEL $label$181
	CALL $69(($12 + [128]))
	
.LABEL $label$180
	CALL $69(($12 + [128]))
	
.LABEL $label$179
	CALL $69(($12 + [128]))
	
.LABEL $label$178
	$18 = [2]
	goto $label$13 
	
.LABEL $label$177
	$18 = [5]
	goto $label$13 
	
.LABEL $label$176
	$18 = [0]
	goto $label$13 
	
.LABEL $label$175
	$18 = [4]
	goto $label$13 
	
.LABEL $label$174
	$18 = [3]
	goto $label$13 
	
.LABEL $label$173
	$18 = [6]
	goto $label$13 
	
.LABEL $label$172
	$18 = [227]
	goto $label$13 
	
.LABEL $label$171
	$18 = [8]
	goto $label$13 
	
.LABEL $label$170
	$18 = [10]
	goto $label$13 
	
.LABEL $label$169
	$18 = [9]
	goto $label$13 
	
.LABEL $label$168
	$18 = [11]
	goto $label$13 
	
.LABEL $label$167
	$18 = [225]
	goto $label$13 
	
.LABEL $label$166
	$18 = [14]
	goto $label$13 
	
.LABEL $label$165
	$18 = [16]
	goto $label$13 
	
.LABEL $label$164
	$18 = [18]
	goto $label$13 
	
.LABEL $label$163
	$18 = [20]
	goto $label$13 
	
.LABEL $label$162
	$18 = [22]
	goto $label$13 
	
.LABEL $label$161
	$18 = [24]
	goto $label$13 
	
.LABEL $label$160
	$18 = [25]
	goto $label$13 
	
.LABEL $label$159
	$18 = [26]
	goto $label$13 
	
.LABEL $label$158
	$18 = [27]
	goto $label$13 
	
.LABEL $label$157
	$18 = [222]
	goto $label$13 
	
.LABEL $label$156
	$18 = [28]
	goto $label$13 
	
.LABEL $label$155
	$18 = [29]
	goto $label$13 
	
.LABEL $label$154
	$18 = [30]
	goto $label$13 
	
.LABEL $label$153
	$18 = [32]
	goto $label$13 
	
.LABEL $label$152
	$18 = [33]
	goto $label$13 
	
.LABEL $label$151
	$18 = [35]
	goto $label$13 
	
.LABEL $label$150
	$18 = [33]
	goto $label$13 
	
.LABEL $label$149
	$18 = [35]
	goto $label$13 
	
.LABEL $label$148
	$18 = [34]
	goto $label$13 
	
.LABEL $label$147
	$18 = [34]
	goto $label$13 
	
.LABEL $label$146
	$18 = [36]
	goto $label$13 
	
.LABEL $label$145
	$18 = [213]
	goto $label$13 
	
.LABEL $label$144
	$18 = [37]
	goto $label$13 
	
.LABEL $label$143
	$18 = [38]
	goto $label$13 
	
.LABEL $label$142
	$18 = [39]
	goto $label$13 
	
.LABEL $label$141
	$18 = [41]
	goto $label$13 
	
.LABEL $label$140
	$18 = [42]
	goto $label$13 
	
.LABEL $label$139
	$18 = [44]
	goto $label$13 
	
.LABEL $label$138
	$18 = [42]
	goto $label$13 
	
.LABEL $label$137
	$18 = [44]
	goto $label$13 
	
.LABEL $label$136
	$18 = [43]
	goto $label$13 
	
.LABEL $label$135
	$18 = [43]
	goto $label$13 
	
.LABEL $label$134
	$18 = [45]
	goto $label$13 
	
.LABEL $label$133
	$18 = [45]
	goto $label$13 
	
.LABEL $label$132
	$18 = [46]
	goto $label$13 
	
.LABEL $label$131
	$18 = [183]
	goto $label$13 
	
.LABEL $label$130
	$18 = [47]
	goto $label$13 
	
.LABEL $label$129
	$18 = [48]
	goto $label$13 
	
.LABEL $label$128
	$18 = [49]
	goto $label$13 
	
.LABEL $label$127
	$18 = [51]
	goto $label$13 
	
.LABEL $label$126
	$18 = [52]
	goto $label$13 
	
.LABEL $label$125
	$18 = [54]
	goto $label$13 
	
.LABEL $label$124
	$18 = [52]
	goto $label$13 
	
.LABEL $label$123
	$18 = [54]
	goto $label$13 
	
.LABEL $label$122
	$18 = [53]
	goto $label$13 
	
.LABEL $label$121
	$18 = [53]
	goto $label$13 
	
.LABEL $label$120
	$18 = [55]
	goto $label$13 
	
.LABEL $label$119
	$18 = [134]
	goto $label$13 
	
.LABEL $label$118
	$18 = [55]
	goto $label$13 
	
.LABEL $label$117
	$18 = [55]
	goto $label$13 
	
.LABEL $label$116
	$18 = [55]
	goto $label$13 
	
.LABEL $label$115
	$18 = [56]
	goto $label$13 
	
.LABEL $label$114
	$18 = [57]
	goto $label$13 
	
.LABEL $label$113
	$18 = [131]
	goto $label$13 
	
.LABEL $label$112
	$18 = [58]
	goto $label$13 
	
.LABEL $label$111
	$18 = [59]
	goto $label$13 
	
.LABEL $label$110
	$18 = [60]
	goto $label$13 
	
.LABEL $label$109
	$18 = [62]
	goto $label$13 
	
.LABEL $label$108
	$18 = [63]
	goto $label$13 
	
.LABEL $label$107
	$18 = [65]
	goto $label$13 
	
.LABEL $label$106
	$18 = [63]
	goto $label$13 
	
.LABEL $label$105
	$18 = [65]
	goto $label$13 
	
.LABEL $label$104
	$18 = [64]
	goto $label$13 
	
.LABEL $label$103
	$18 = [64]
	goto $label$13 
	
.LABEL $label$102
	$18 = [66]
	goto $label$13 
	
.LABEL $label$101
	$18 = [66]
	goto $label$13 
	
.LABEL $label$100
	$18 = [67]
	goto $label$13 
	
.LABEL $label$99
	$18 = [68]
	goto $label$13 
	
.LABEL $label$98
	$18 = [75]
	goto $label$13 
	
.LABEL $label$97
	$18 = [69]
	goto $label$13 
	
.LABEL $label$96
	$18 = [70]
	goto $label$13 
	
.LABEL $label$95
	$18 = [107]
	goto $label$13 
	
.LABEL $label$94
	$18 = [71]
	goto $label$13 
	
.LABEL $label$93
	$18 = [106]
	goto $label$13 
	
.LABEL $label$92
	$18 = [72]
	goto $label$13 
	
.LABEL $label$91
	$18 = [105]
	goto $label$13 
	
.LABEL $label$90
	$18 = [74]
	goto $label$13 
	
.LABEL $label$89
	$18 = [74]
	goto $label$13 
	
.LABEL $label$88
	$18 = [73]
	goto $label$13 
	
.LABEL $label$87
	$18 = [75]
	goto $label$13 
	
.LABEL $label$86
	$18 = [77]
	goto $label$13 
	
.LABEL $label$85
	$18 = [78]
	goto $label$13 
	
.LABEL $label$84
	$18 = [79]
	goto $label$13 
	
.LABEL $label$83
	$18 = [103]
	goto $label$13 
	
.LABEL $label$82
	$18 = [80]
	goto $label$13 
	
.LABEL $label$81
	$18 = [102]
	goto $label$13 
	
.LABEL $label$80
	$18 = [81]
	goto $label$13 
	
.LABEL $label$79
	$18 = [101]
	goto $label$13 
	
.LABEL $label$78
	$18 = [82]
	goto $label$13 
	
.LABEL $label$77
	$18 = [100]
	goto $label$13 
	
.LABEL $label$76
	$18 = [83]
	goto $label$13 
	
.LABEL $label$75
	$18 = [99]
	goto $label$13 
	
.LABEL $label$74
	$18 = [85]
	goto $label$13 
	
.LABEL $label$73
	$18 = [85]
	goto $label$13 
	
.LABEL $label$72
	$18 = [84]
	goto $label$13 
	
.LABEL $label$71
	$18 = [87]
	goto $label$13 
	
.LABEL $label$70
	$18 = [97]
	goto $label$13 
	
.LABEL $label$69
	$18 = [98]
	goto $label$13 
	
.LABEL $label$68
	$18 = [90]
	goto $label$13 
	
.LABEL $label$67
	$18 = [94]
	goto $label$13 
	
.LABEL $label$66
	$18 = [93]
	goto $label$13 
	
.LABEL $label$65
	$18 = [96]
	goto $label$13 
	
.LABEL $label$64
	$18 = [111]
	goto $label$13 
	
.LABEL $label$63
	$18 = [122]
	goto $label$13 
	
.LABEL $label$62
	$18 = [114]
	goto $label$13 
	
.LABEL $label$61
	$18 = [116]
	goto $label$13 
	
.LABEL $label$60
	$18 = [118]
	goto $label$13 
	
.LABEL $label$59
	$18 = [120]
	goto $label$13 
	
.LABEL $label$58
	$18 = [125]
	goto $label$13 
	
.LABEL $label$57
	$18 = [126]
	goto $label$13 
	
.LABEL $label$56
	$18 = [135]
	goto $label$13 
	
.LABEL $label$55
	$18 = [136]
	goto $label$13 
	
.LABEL $label$54
	$18 = [174]
	goto $label$13 
	
.LABEL $label$53
	$18 = [137]
	goto $label$13 
	
.LABEL $label$52
	$18 = [138]
	goto $label$13 
	
.LABEL $label$51
	$18 = [139]
	goto $label$13 
	
.LABEL $label$50
	$18 = [141]
	goto $label$13 
	
.LABEL $label$49
	$18 = [142]
	goto $label$13 
	
.LABEL $label$48
	$18 = [144]
	goto $label$13 
	
.LABEL $label$47
	$18 = [142]
	goto $label$13 
	
.LABEL $label$46
	$18 = [144]
	goto $label$13 
	
.LABEL $label$45
	$18 = [143]
	goto $label$13 
	
.LABEL $label$44
	$18 = [143]
	goto $label$13 
	
.LABEL $label$43
	$18 = [165]
	goto $label$13 
	
.LABEL $label$42
	$18 = [147]
	goto $label$13 
	
.LABEL $label$41
	$18 = [149]
	goto $label$13 
	
.LABEL $label$40
	$18 = [148]
	goto $label$13 
	
.LABEL $label$39
	$18 = [150]
	goto $label$13 
	
.LABEL $label$38
	$18 = [163]
	goto $label$13 
	
.LABEL $label$37
	$18 = [153]
	goto $label$13 
	
.LABEL $label$36
	$18 = [155]
	goto $label$13 
	
.LABEL $label$35
	$18 = [157]
	goto $label$13 
	
.LABEL $label$34
	$18 = [159]
	goto $label$13 
	
.LABEL $label$33
	$18 = [161]
	goto $label$13 
	
.LABEL $label$32
	$18 = [168]
	goto $label$13 
	
.LABEL $label$31
	$18 = [169]
	goto $label$13 
	
.LABEL $label$30
	$18 = [178]
	goto $label$13 
	
.LABEL $label$29
	$18 = [179]
	goto $label$13 
	
.LABEL $label$28
	$18 = [205]
	goto $label$13 
	
.LABEL $label$27
	$18 = [187]
	goto $label$13 
	
.LABEL $label$26
	$18 = [189]
	goto $label$13 
	
.LABEL $label$25
	$18 = [188]
	goto $label$13 
	
.LABEL $label$24
	$18 = [190]
	goto $label$13 
	
.LABEL $label$23
	$18 = [203]
	goto $label$13 
	
.LABEL $label$22
	$18 = [193]
	goto $label$13 
	
.LABEL $label$21
	$18 = [195]
	goto $label$13 
	
.LABEL $label$20
	$18 = [197]
	goto $label$13 
	
.LABEL $label$19
	$18 = [199]
	goto $label$13 
	
.LABEL $label$18
	$18 = [201]
	goto $label$13 
	
.LABEL $label$17
	$18 = [208]
	goto $label$13 
	
.LABEL $label$16
	$18 = [209]
	goto $label$13 
	
.LABEL $label$15
	$18 = [217]
	goto $label$13 
	
.LABEL $label$14
	$18 = [218]
	goto $label$13 
	$18
	(unreachable)
	(unreachable)
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [9275] ? [9287] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $88($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $91($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $69($0)
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9247])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $45(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $46(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	float_64 $11
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth((int_64)4229331771834111360)
	$2 = CALL $91([8192])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8873])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8918])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	*(($1 + [40])) = [0]
	*($1 + [16]) = $3
	*($1 + [8]) = (int_64)4229331772105823536
	*($1 + [24]) = (int_64)-1
	$3 = (int_64)0
	*($1 + [32]) = (int_64)0
	$2 = CALL $91([8192])
	if ( ($2 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8873])
	goto $label$8 
	
.LABEL $label$9
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = (int_64)0
	
.LOOP $label$10:
	$4 = *(($2 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8918])
	
.LABEL $label$11
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$10 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	
.LABEL $label$7
	$5 = CALL $3(($1 + [8]), $3, [8196])
	CALL eosio_assert(((int_64)*($5 + [16]) > (int_64)0), [8301])
	CALL prints([8322])
	CALL $4(($1 + [48]), $5)
	$4 = *($1 + [48])
	$6 = ($4 & [1])
	$2 = (($1 + [48]) | [1])
	CALL prints_l(( *($1 + [56]) ? $2 : $6 ), ( *($1 + [52]) ? uint_32($4 >> [1]) : $6 ))
	$7 = ($5 + [16])
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$12
	CALL prints([8345])
	CALL $4(($1 + [48]), $7)
	$4 = *($1 + [48])
	$6 = ($4 & [1])
	CALL prints_l(( *($1 + [56]) ? $2 : $6 ), ( *($1 + [52]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$13
	$3 = *($5 + [32])
	CALL prints([8372])
	CALL printn($3)
	$2 = CALL $91([8192])
	if ( ($2 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [8873])
	goto $label$16 
	
.LABEL $label$17
	if ( ($2 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$3 = (int_64)0
	
.LOOP $label$18:
	$4 = *(($2 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$19 }
	CALL eosio_assert([0], [8918])
	
.LABEL $label$19
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$18 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	goto $label$14 
	
.LABEL $label$15
	$3 = (int_64)0
	
.LABEL $label$14
	CALL eosio_assert([1], [8971])
	$2 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$3 = $8
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$3 = $8
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$24 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$4 = [0]
	
.LABEL $label$20
	CALL eosio_assert($4, [9020])
	$2 = CALL $91([8192])
	if ( ($2 <= [8]) ){ goto $label$28 }
	CALL eosio_assert([0], [8873])
	goto $label$27 
	
.LABEL $label$28
	if ( ($2 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	$3 = (int_64)0
	
.LOOP $label$29:
	$4 = *(($2 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$30 }
	CALL eosio_assert([0], [8918])
	
.LABEL $label$30
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$29 }
	$9 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$25 
	
.LABEL $label$26
	$9 = (int_64)4
	
.LABEL $label$25
	CALL eosio_assert([1], [8971])
	$3 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$3 = $8
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$3 = $8
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$35 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$4 = [0]
	
.LABEL $label$31
	CALL eosio_assert($4, [9020])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)$9), [9040])
	$10 = [1]
	$3 = *($5)
	if ( ((int_64)$3 < (int_64)22000000000000) ){ goto $label$36 }
	CALL eosio_assert(((int_64)$9 == (int_64)*(($5 + [8]))), [9099])
	$10 = [1]
	CALL eosio_assert([1], [9147])
	CALL eosio_assert(((int_64)$3 < (int_64)4611708018427387904), [9169])
	$3 = ((int_64)$3 + (int_64)-22000000000000)
	if ( (int_64)($3 == 0) ){ goto $label$36 }
	$11 = ((float_64)(CASTING float_64)(int_64 $3) / (float_64)((float_64)(CASTING float_64)(int_64 *($7)) * (float_64)(float_64)0.05))
	if ( (((float_64)$11 < (float_64)(float_64)4294967296) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$38 }
	$2 = [0]
	goto $label$37 
	
.LABEL $label$38
	$2 = (CASTING uint_32)(float_64 $11)
	
.LABEL $label$37
	$10 = ($2 + [1])
	
.LABEL $label$36
	$6 = *($1 + [32])
	if ( ($6 == 0) ){ goto $label$39 }
	$5 = ($1 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$41 }
	
.LOOP $label$42:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$43 }
	CALL _ZdlPv($4)
	
.LABEL $label$43
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$42 }
	$2 = *(($1 + [32]))
	goto $label$40 
	
.LABEL $label$41
	$2 = $6
	
.LABEL $label$40
	*($5) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$39
	$global$0 = ($1 + [64])
	return $10
}

int_32 .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [9196])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $5($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [9196])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_auth((int_64)4229331771834111360)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)4229853266458836992, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $28($6, $8)
	*($3 + [4]) = [0]
	*($3) = $6
	$7 = *(*(CALL $50($3) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9383])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	$6 = *($5 + [8])
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	*($1 + [32]) = *(*($5 + [12]))
	*($1 + [36]) = *(*($5 + [16]))
	CALL $71(($1 + [40]), *($5 + [20]))
	CALL $71(($1 + [52]), *($5 + [24]))
	CALL $71(($1 + [64]), *($5 + [28]))
	CALL $71(($1 + [76]), *($5 + [32]))
	CALL $71(($1 + [88]), *($5 + [36]))
	*($3) = [0]
	CALL $51($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$5 = CALL $94($6)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $6)
	CALL $52($3, $1)
	$7 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($4 + [8]), (int_64)4229853266458836992, *(*($0 + [8])), $7, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $97($5)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $54(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [9571])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [9616])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9666])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	$3 = [0]
	*(($8 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$10 = ($2 + [16])
	*($8) = $10
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $10
	*($5 + [24]) = ($5 + [16])
	*($5 + [16]) = [32]
	*($5) = $4
	$9 = ((int_32)$9 * (int_32)[40])
	CALL $55($5, ($5 + [24]))
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = ($7 + [28])
	CALL $9($1, $2)
	$3 = *(($7 + [32]))
	$2 = *($1)
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	$11 = ($6 + $9)
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $3
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $56(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$8 }
	$10 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$9:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($9 + [-24])
	*($4) = *($3)
	$4 = ($9 + [-16])
	*($6) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($9 + [-12])
	*($4) = *($6)
	*($3) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($6) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$9 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$4 = $2
	
.LABEL $label$7
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$12 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$12
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$13 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$2 = $9
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9190])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9190])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9190])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $12(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $9($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9190])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9190])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $40(CALL $39($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9190])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9190])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9190])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9190])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9190])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $12(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $75 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $41($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $9($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $42($2, $1)
	CALL $44(CALL $43(CALL $43($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9190])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $12($0, ($1 + [32]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	if ( (*($3 + [88]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [76]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [96])))
	if ( ((*($3 + [76]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [84])))
	$2 = [1]
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = [1]
	if ( (*($3 + [64]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($3 + [52]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [52]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [60])))
	if ( (*($3 + [40]) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$2
	CALL _ZdlPv($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [104]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9489])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229853266458836992)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9435])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9435])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $28(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [40])
	*($0) = $2
	$3 = *($1 + [40])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [40]))
	$3 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [52])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [56])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [52]))
	$3 = ( *(($1 + [56])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [64])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$3 = *(($1 + [64]))
	$3 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$6
	$3 = *($1 + [76])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [80])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	*($0) = $2
	$3 = *(($1 + [76]))
	$3 = ( *(($1 + [80])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$8
	$3 = *($1 + [88])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [92])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	$1 = *(($1 + [88]))
	$1 = ( *(($1 + [92])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$10 }
	*($0) = ($1 + $2)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9190])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9190])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9190])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $12(CALL $12(CALL $12(CALL $12(CALL $12($0, ($1 + [40])), ($1 + [52])), ($1 + [64])), ($1 + [76])), ($1 + [88]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9270])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9270])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9270])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9270])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9270])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9270])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $48(CALL $48(CALL $48(CALL $48(CALL $48($0, ($1 + [40])), ($1 + [52])), ($1 + [64])), ($1 + [76])), ($1 + [88]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [96])))
	if ( ((*($1 + [76]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($1 + [76]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [84])))
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [72])))
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [60])))
	if ( (*($1 + [40]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	return $0
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [200]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = (int_64)0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = (int_64)0
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $5)
	*($4 + [224]) = ($4 + [64])
	*($4 + [24]) = ($4 + [80])
	CALL $35(($4 + [24]), ($4 + [224]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [72])
	*($4 + [8]) = *($4 + [64])
	*(($6 = (($4 + [208]) + [8]))) = *($3)
	*($4 + [208]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [224]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [208])
	*($4 + [40]) = $0
	*($4 + [224]) = $0
	*($4 + [228]) = ($4 + [200])
	*($4 + [224]) = ($4 + [24])
	CALL $36(($4 + [224]), ($4 + [80]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$18 }
	$2 = [1]
	if ( (*($4 + [184]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $97($2)
	$2 = [1]
	if ( ((*($4 + [184]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [192])))
	if ( ((*($4 + [172]) & $2) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	if ( (*($4 + [172]) & $2) ){ goto $label$14 }
	
.LABEL $label$15
	$2 = [1]
	if ( (*($4 + [160]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($4 + [180])))
	$2 = [1]
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [168])))
	if ( ((*($4 + [148]) & $2) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($4 + [148]) & $2) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = [1]
	if ( (*($4 + [136]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [156])))
	$2 = [1]
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [144])))
	if ( ((*($4 + [124]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [124]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [132])))
	$2 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [120])))
	$global$0 = ($4 + [240])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [240])
	return $2
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9190])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9190])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9190])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9190])
	CALL memcpy(*($0 + [4]), ($4 + [24]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9190])
	CALL memcpy(*($0 + [4]), ($4 + [28]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $12(*($1), ($4 + [32]))
	CALL $12(*($1), ($4 + [44]))
	CALL $12(*($1), ($4 + [56]))
	CALL $12(*($1), ($4 + [68]))
	CALL $12(*($1), ($4 + [80]))
	CALL $12(*($1), ($4 + [92]))
	CALL $12(*($1), ($4 + [104]))
	$global$0 = ($2 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = *($0 + [80])
	$0 = *($0)
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [84])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	$2 = *($1)
	$1 = *($2)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$4 = *(($0 + [80]))
	$4 = ( *(($0 + [84])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($0 + [92])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [96])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$4 = *(($0 + [92]))
	$4 = ( *(($0 + [96])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$4 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($0 + [104])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [108])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [104]))
	$0 = ( *(($0 + [108])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9270])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9270])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9270])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [16])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9270])
	CALL memcpy(($4 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9270])
	CALL memcpy(($4 + [28]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $48(*($1), ($4 + [32]))
	CALL $48(*($1), ($4 + [44]))
	CALL $48(*($1), ($4 + [56]))
	CALL $48(*($1), ($4 + [68]))
	CALL $48(*($1), ($4 + [80]))
	CALL $48(*($1), ($4 + [92]))
	CALL $48(*($1), ($4 + [104]))
	$global$0 = ($2 + [16])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [9571])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert1()), [9616])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9666])
	$5 = ($3 + [-24])
	$7 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($5 + [24])
	CALL $59($5, $8)
	$3 = ($5 + [48])
	$5 = $8
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$8 }
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = $5
	
.LABEL $label$6
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($5 + [96])))
	if ( ((*($5 + [76]) & [1]) == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((*($5 + [76]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($5 + [84])))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($5 + [72])))
	if ( ((*($5 + [52]) & [1]) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*($5 + [52]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($5 + [60])))
	if ( (*($5 + [40]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$11
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [104]))
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9247])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80 align=4]) = (int_64)0
	*($5 + [88 align=4]) = (int_64)0
	*($5 + [96]) = [0]
	*($5 + [100]) = $0
	CALL $53(($3 + [32]), $5)
	*($5 + [104]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [88]) & [1]) ){ goto $label$18 }
	if ( (*($1 + [76]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($1 + [96])))
	if ( ((*($1 + [76]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($1 + [84])))
	$4 = [1]
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$4 = [1]
	if ( (*($1 + [64]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($1 + [52]) & $4) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [72])))
	if ( ((*($1 + [52]) & $4) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [60])))
	if ( (*($1 + [40]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$0 = *($3 + [32])
	$3 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *(($3 + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$5 = *($1)
	$0 = *($5)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($5) = $0
	$6 = *(($3 + [32]))
	$6 = ( *(($3 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$2 }
	$0 = ($6 + $0)
	*($5) = $0
	
.LABEL $label$2
	$6 = *($3 + [44])
	$4 = (CASTING uint_64)(uint_32 ( *(($3 + [48])) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($5) = $0
	$6 = *(($3 + [44]))
	$6 = ( *(($3 + [48])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$4 }
	$0 = ($6 + $0)
	*($5) = $0
	
.LABEL $label$4
	$6 = *($3 + [56])
	$4 = (CASTING uint_64)(uint_32 ( *(($3 + [60])) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$5:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($5) = $0
	$6 = *(($3 + [56]))
	$6 = ( *(($3 + [60])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$6 }
	$0 = ($6 + $0)
	*($5) = $0
	
.LABEL $label$6
	$6 = *($3 + [68])
	$4 = (CASTING uint_64)(uint_32 ( *(($3 + [72])) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$7:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	*($5) = $0
	$6 = *(($3 + [68]))
	$6 = ( *(($3 + [72])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$8 }
	*($5) = ($6 + $0)
	
.LABEL $label$8
	*($2 + [8]) = $3
	CALL $57(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( (*($1) & [1]) ){ goto $label$2 }
	$2 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($1 + [8])
	
.LABEL $label$1
	CALL prints([8655])
	CALL prints($2)
	$2 = *($1)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = ($1 + [1])
	$2 = CALL $91([8656])
	if ( ($2 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$3 = *($1 + [4])
	$4 = *($1 + [8])
	$2 = CALL $91([8656])
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = [0]
	if ( ((int_32)$3 < (int_32)$2) ){ goto $label$3 }
	$6 = ($4 + $3)
	$7 = $4
	
.LOOP $label$7:
	$3 = (($3 - $2) + [1])
	if ( ($3 == 0) ){ goto $label$3 }
	$3 = CALL $89($7, [34], $3)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (CALL $90($3, [8656], $2) == 0) ){ goto $label$8 }
	$7 = ($3 + [1])
	$3 = ($6 - $7)
	if ( ((int_32)$3 >= (int_32)$2) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$3 }
	if ( ((int_32)($3 - $4) < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = *($1)
	if ( ($2 & [1]) ){ goto $label$11 }
	$3 = uint_32($2 >> [1])
	$4 = ($1 + [1])
	$2 = CALL $91([8670])
	if ( ($2 == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$3 = *($1 + [4])
	$4 = *($1 + [8])
	$2 = CALL $91([8670])
	if ( ($2 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$5 = [0]
	if ( ((int_32)$3 < (int_32)$2) ){ goto $label$3 }
	$6 = ($4 + $3)
	$7 = $4
	
.LOOP $label$12:
	$3 = (($3 - $2) + [1])
	if ( ($3 == 0) ){ goto $label$3 }
	$3 = CALL $89($7, [34], $3)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (CALL $90($3, [8670], $2) == 0) ){ goto $label$13 }
	$7 = ($3 + [1])
	$3 = ($6 - $7)
	if ( ((int_32)$3 >= (int_32)$2) ){ goto $label$12 }
	goto $label$3 
	
.LABEL $label$13
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$3 }
	if ( ((int_32)($3 - $4) < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$9
	$2 = *($1)
	if ( ($2 & [1]) ){ goto $label$16 }
	$3 = uint_32($2 >> [1])
	$6 = ($1 + [1])
	$2 = CALL $91([8678])
	if ( ($2 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = *($1 + [4])
	$6 = *($1 + [8])
	$2 = CALL $91([8678])
	if ( $2 ){ goto $label$14 }
	
.LABEL $label$15
	return [1]
	
.LABEL $label$14
	if ( ((int_32)$3 < (int_32)$2) ){ goto $label$17 }
	$7 = ($6 + $3)
	$1 = $6
	
.LOOP $label$18:
	$3 = (($3 - $2) + [1])
	if ( ($3 == 0) ){ goto $label$17 }
	$3 = CALL $89($1, [34], $3)
	if ( ($3 == 0) ){ goto $label$17 }
	if ( (CALL $90($3, [8678], $2) == 0) ){ goto $label$19 }
	$1 = ($3 + [1])
	$3 = ($7 - $1)
	if ( ((int_32)$3 >= (int_32)$2) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$17 }
	$5 = [1]
	if ( ((int_32)($3 - $6) > (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$17
	$5 = [0]
	
.LABEL $label$3
	return $5
}

int_32 .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [96])))
	if ( ((*($3 + [76]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [76]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [84])))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [60])))
	if ( (*($3 + [40]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9247])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9270])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9270])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [176])
	$global$0 = $5
	*($5 + [128]) = $1
	$6 = *($0)
	CALL prints([8689])
	CALL printn($1)
	CALL prints([8724])
	CALL printn($2)
	CALL prints([8730])
	CALL printn($6)
	if ( ((int_64)$2 != (int_64)4229331771834111360) ){ goto $label$5 }
	if ( ((int_64)$1 == (int_64)4229331771834111360) ){ goto $label$5 }
	$7 = CALL $91([8439])
	if ( ($7 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8873])
	goto $label$8 
	
.LABEL $label$9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = (int_64)0
	
.LOOP $label$10:
	$8 = *(($7 + [8438]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8918])
	
.LABEL $label$11
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$10 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$6 
	
.LABEL $label$7
	$6 = (int_64)0
	
.LABEL $label$6
	if ( ((int_64)*($3 + [8]) != (int_64)((int_64)$6 | (int_64)4)) ){ goto $label$5 }
	if ( ((int_64)$1 <= (int_64)4229331772100719135) ){ goto $label$4 }
	if ( ((int_64)$1 > (int_64)4229331772100719167) ){ goto $label$3 }
	if ( ((int_64)$1 == (int_64)4229331772100719136) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)4229331772100719152) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL prints([8738])
	CALL printn($1)
	CALL prints([8724])
	CALL printn($2)
	CALL prints([8765])
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$1 == (int_64)4229331771904512528) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)4229331771904512544) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)4229331772100719120) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$1 == (int_64)4229331772100719184) ){ goto $label$2 }
	if ( ((int_64)$1 != (int_64)4229331772100719168) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = CALL $70(($5 + [112]), $4)
	$8 = CALL $21($7, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$1 }
	*($5 + [104]) = (int_64)0
	*((($5 + [64]) + [32])) = [0]
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	$6 = *($0)
	*($5 + [64]) = $6
	*($5 + [72]) = $6
	$7 = CALL db_lowerbound_i64($6, $6, (int_64)-5003134532638605312, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$14 }
	$7 = CALL $23(($5 + [64]), $7)
	$1 = *($0)
	CALL eosio_assert([1], [9719])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($5 + [64])), [9754])
	CALL eosio_assert(((int_64)*($5 + [64]) == (int_64)CALL eosio_assert1()), [9800])
	$2 = ((int_64)*($7 + [8]) + (int_64)1)
	*($7 + [8]) = $2
	$6 = *($7)
	*($5 + [104]) = $2
	CALL eosio_assert(((int_64)$6 == (int_64)*($7)), [9851])
	CALL eosio_assert([1], [9190])
	CALL memcpy(($5 + [16]), $7, [8])
	CALL eosio_assert([1], [9190])
	CALL memcpy((($5 + [16]) | [8]), ($7 + [8]), [8])
	CALL db_update_i64(*($7 + [20]), $1, ($5 + [16]), [16])
	$7 = (($5 + [64]) + [16])
	if ( (uint_64)($6 <= *($7)) ){ goto $label$13 }
	*($7) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	goto $label$13 
	
.LABEL $label$14
	$1 = *($0)
	CALL eosio_assert(((int_64)*($5 + [64]) == (int_64)CALL eosio_assert1()), [9332])
	*(($7 = CALL _Znwj([32])) + [16]) = ($5 + [64])
	*($7 + [8]) = (int_64)0
	*($7) = (int_64)1
	*($5 + [104]) = (int_64)0
	CALL eosio_assert([1], [9190])
	CALL memcpy(($5 + [16]), $7, [8])
	CALL eosio_assert([1], [9190])
	CALL memcpy((($5 + [16]) | [8]), ($7 + [8]), [8])
	$6 = *($7)
	$9 = CALL db_store_i64(*((($5 + [64]) + [8])), (int_64)-5003134532638605312, $1, $6, ($5 + [16]), [16])
	*($7 + [20]) = $9
	$8 = (($5 + [64]) + [16])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$15 }
	*($8) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($5) = $7
	$6 = *($7)
	*($5 + [16]) = $6
	*($5 + [144]) = $9
	$10 = ($5 + [92])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($5 + [96]))) ){ goto $label$17 }
	*($8 + [8]) = $6
	*($8 + [16]) = $9
	*($5) = [0]
	*($8) = $7
	*($10) = ($8 + [24])
	$7 = *($5)
	*($5) = [0]
	if ( $7 ){ goto $label$16 }
	goto $label$13 
	
.LABEL $label$17
	CALL $24(($5 + [88]), $5, ($5 + [16]), ($5 + [144]))
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	
.LABEL $label$16
	CALL _ZdlPv($7)
	
.LABEL $label$13
	*(($9 = ($5 + [48]))) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$6 = *($0)
	*($5 + [16]) = $6
	*($5 + [24]) = $6
	*($5 + [8]) = $3
	*($5 + [12]) = $4
	*($5 + [4]) = ($5 + [128])
	*($5) = ($5 + [104])
	*($5 + [168]) = $6
	CALL eosio_assert(((int_64)$6 == (int_64)CALL eosio_assert1()), [9332])
	*($5 + [148]) = $5
	*($5 + [144]) = ($5 + [16])
	*($5 + [152]) = ($5 + [168])
	*(($7 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [32 align=4]) = (int_64)0
	*($7 + [40]) = [0]
	*($7 + [44]) = ($5 + [16])
	CALL $25(($5 + [144]), $7)
	*($5 + [160]) = $7
	$6 = *($7)
	*($5 + [144]) = $6
	$0 = *($7 + [48])
	*($5 + [140]) = $0
	$3 = ($5 + [44])
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)*($9)) ){ goto $label$20 }
	*($8 + [8]) = $6
	*($8 + [16]) = $0
	*($5 + [160]) = [0]
	*($8) = $7
	*($3) = ($8 + [24])
	$7 = *($5 + [160])
	*($5 + [160]) = [0]
	if ( $7 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL $26(($5 + [40]), ($5 + [160]), ($5 + [144]), ($5 + [140]))
	$7 = *($5 + [160])
	*($5 + [160]) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($7 + [40])))
	
.LABEL $label$21
	CALL _ZdlPv($7)
	
.LABEL $label$18
	$0 = *($5 + [40])
	if ( ($0 == 0) ){ goto $label$22 }
	$3 = ($5 + [44])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$24 }
	
.LOOP $label$25:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$26 }
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($8 + [40])))
	
.LABEL $label$27
	CALL _ZdlPv($8)
	
.LABEL $label$26
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$25 }
	$7 = *(($5 + [40]))
	goto $label$23 
	
.LABEL $label$24
	$7 = $0
	
.LABEL $label$23
	*($3) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$22
	$0 = *($5 + [88])
	if ( ($0 == 0) ){ goto $label$1 }
	$3 = ($5 + [92])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$29 }
	
.LOOP $label$30:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$31 }
	CALL _ZdlPv($8)
	
.LABEL $label$31
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$30 }
	$7 = *(($5 + [88]))
	goto $label$28 
	
.LABEL $label$29
	$7 = $0
	
.LABEL $label$28
	*($3) = $0
	CALL _ZdlPv($7)
	$global$0 = ($5 + [176])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [176])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$4 = *($0)
	$5 = *($3 + [8])
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [16]) = *($5)
	$6 = ($1 + [32])
	CALL $71($6, *($3 + [12]))
	$7 = *(*($3 + [4]))
	CALL prints([9910])
	CALL printn($7)
	$3 = *($3 + [8])
	CALL prints([9934])
	$5 = $2
	CALL $4($5, $3)
	$3 = *($5)
	$8 = ($3 & [1])
	CALL prints_l(( *($5 + [8]) ? ($5 | [1]) : $8 ), ( *($5 + [4]) ? uint_32($3 >> [1]) : $8 ))
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$1
	$3 = *($6)
	$6 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [32])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$2 = CALL $94($3)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = ($2 + $3)
	CALL $58($5, $1)
	$7 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)-5003011376160280576, *(*($0 + [8])), $7, $2, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $97($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL require_auth((int_64)4229331771834111360)
	*((($1 + [48]) + [32])) = [0]
	*($1 + [64]) = (int_64)-1
	$2 = *($0)
	*($1 + [48]) = $2
	*($1 + [56]) = $2
	*($1 + [72]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)-5003011376160280576, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $8(($1 + [48]), $3)
	$4 = ($1 + [56])
	
.LOOP $label$2:
	CALL eosio_assert([1], [9537])
	CALL eosio_assert([1], [9302])
	$5 = CALL db_next_i64(*($3 + [48]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	CALL $8(($1 + [48]), $5)
	
.LABEL $label$3
	CALL $16(($1 + [48]), $3)
	CALL eosio_assert([1], [8767])
	$3 = CALL db_lowerbound_i64(*($1 + [48]), *($4), (int_64)-5003011376160280576, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $8(($1 + [48]), $3)
	goto $label$2 
	
.LABEL $label$1
	*((($1 + [8]) + [32])) = [0]
	*($1 + [24]) = (int_64)-1
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	*($1 + [32]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)4229853266458836992, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $28(($1 + [8]), $3)
	$4 = ($1 + [16])
	
.LOOP $label$5:
	CALL eosio_assert([1], [9537])
	CALL eosio_assert([1], [9302])
	$5 = CALL db_next_i64(*($3 + [104]), ($1 + [88]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $28(($1 + [8]), $5)
	
.LABEL $label$6
	CALL $29(($1 + [8]), $3)
	CALL eosio_assert([1], [8767])
	$3 = CALL db_lowerbound_i64(*($1 + [8]), *($4), (int_64)4229853266458836992, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $28(($1 + [8]), $3)
	goto $label$5 
	
.LABEL $label$4
	CALL $20(($1 + [32]))
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$7 }
	$0 = ($1 + [76])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($1 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $4
	
.LABEL $label$8
	*($0) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$global$0 = ($1 + [96])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $75($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $69 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $92(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9960])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $92(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $97($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $94($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9960])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $94($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $60 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11)
{
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$12 = ($global$0 - [144])
	$global$0 = $12
	$0 = *($0 + [4])
	$13 = *($0 + [4])
	$14 = (*($0) + int_32($13 >> [1]))
	$15 = *($0)
	if ( (($13 & [1]) == 0) ){ goto $label$1 }
	$15 = *((*($14) + $15))
	
.LABEL $label$1
	*(($13 = (($12 + [128]) + [8]))) = *(($2 + [8]))
	*($12 + [128]) = *($2)
	$2 = CALL $70(($12 + [112]), $5)
	$0 = CALL $70(($12 + [96]), $6)
	$5 = CALL $70(($12 + [80]), $7)
	$6 = CALL $70(($12 + [64]), $8)
	$7 = CALL $70(($12 + [48]), $9)
	$8 = CALL $70(($12 + [32]), $10)
	$9 = CALL $70(($12 + [16]), $11)
	*(($12 + [8])) = *($13)
	*($12) = *($12 + [128])
	CALL void $14((int_32 $1), (int_64 $12), (int_32 $3), (int_32 $4), (int_32 $2), (int_32 $0), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_32 $9), (int_32 $15))
	if ( (*($9) & [1]) ){ goto $label$14 }
	if ( (*($8) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($8 + [8]))
	$8 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$8 = [1]
	if ( (*($7) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($6) & $8) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $8) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($6 + [8]))
	$6 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = [1]
	if ( (*($5) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($0) & $6) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($0) & $6) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($0 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($2) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($12 + [144])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($12 + [144])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $97($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $84([7], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [6] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $86($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $86($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $86($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $86($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18432]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $86($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $86($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $86($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_64 .FUNC $83 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_64 .FUNC $82 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $81 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $83($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $80($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [18400])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [18384]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [18416]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $82($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $80 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $72($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $76 ()
{
	return [9964]
}

void .FUNC $77 (int_32 $0)
{
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $90(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9190])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9190])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9190])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [144])
	$global$0 = $2
	*(($3 = (($2 + [128]) + [8]))) = *(($1 + [16]))
	*($2 + [128]) = *($1 + [8])
	$4 = *($1)
	$5 = *($1 + [24])
	$6 = *($1 + [28])
	$7 = CALL $70(($2 + [112]), ($1 + [32]))
	$8 = CALL $70(($2 + [96]), ($1 + [44]))
	$9 = CALL $70(($2 + [80]), ($1 + [56]))
	$10 = CALL $70(($2 + [64]), ($1 + [68]))
	$11 = CALL $70(($2 + [48]), ($1 + [80]))
	$12 = CALL $70(($2 + [32]), ($1 + [92]))
	$1 = CALL $70(($2 + [16]), ($1 + [104]))
	*(($2 + [8])) = *($3)
	*($2) = *($2 + [128])
	CALL $60($0, $4, $2, $5, $6, $7, $8, $9, $10, $11, $12, $1)
	if ( (*($1) & [1]) ){ goto $label$13 }
	if ( (*($12) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($12) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($12 + [8]))
	$1 = [1]
	if ( ((*($11) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($11) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($10) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($10) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($10 + [8]))
	$1 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($9) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($8) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($7) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [144])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($7 + [8]))
	$global$0 = ($2 + [144])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9270])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9270])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9270])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9270])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $48(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_64 .FUNC $78 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : ((int_64)$2 < (int_64)0) ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $4
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$4 + (float_64)$0)
	if ( ((int_32)((float_64)$4 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $79 (float_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$2 = (CASTING int_32)(float_32 $0)
	$3 = (uint_32($2 >> [23]) & [255])
	if ( ((uint_32)$3 > (uint_32)[149]) ){ goto $label$1 }
	if ( ($3 <= [127]) ){ goto $label$3 }
	$3 = ($3 + [-127])
	$4 = uint_32([8388607] >> $3)
	if ( (($4 & $2) == 0) ){ goto $label$1 }
	*($1 + [12]) = ((float_32)$0 + (float_32)(float_32)1329227995784915872903807e12)
	$3 = (((int_32($2 >> [31]) & $4) + $2) & int_32([-8388608] >> $3))
	goto $label$2 
	
.LABEL $label$3
	*($1 + [8]) = ((float_32)$0 + (float_32)(float_32)1329227995784915872903807e12)
	$3 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$2 }
	$3 = ( [-1082130432] ? $2 : ($2 & [2147483647]) )
	
.LABEL $label$2
	$0 = (CASTING float_32)(int_32 $3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $97($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [16]) = ($4 + [72])
	CALL $37(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [64])
	*($4) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4)
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $38(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $97($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [8792])
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$5 }
	if ( ((int_64)$2 <= (int_64)5445040692075053055) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)5445040692075053056) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)5445040702200496128) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)7746191359077253120) ){ goto $label$2 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3 + [8]) = *($3 + [72])
	CALL $31($1, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4930993837989429248) ){ goto $label$2 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [32]) = *($3 + [48])
	CALL $32($1, $1, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$7 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3) = *($3 + [56])
	CALL $33($0, (int_64)6138663591592764928, $3)
	goto $label$2 
	
.LABEL $label$7
	CALL prints([8856])
	CALL printn($1)
	CALL prints([8863])
	CALL printn($2)
	CALL prints([8765])
	goto $label$2 
	
.LABEL $label$4
	*($3 + [44]) = [0]
	*($3 + [40]) = [4]
	*($3 + [24]) = *($3 + [40])
	CALL $34($1, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [68]) = [0]
	*($3 + [64]) = [5]
	*($3 + [16]) = *($3 + [64])
	CALL $34($1, $1, ($3 + [16]))
	
.LABEL $label$2
	CALL $77([0])
	$global$0 = ($3 + [80])
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9270])
	CALL memcpy(($4 + [56]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9270])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [9270])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*(($4 + [36])) = ($2 + [24])
	*((($4 + [16]) + [24])) = ($2 + $7)
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*(($4 + [8])) = $1
	$1 = *($4 + [96])
	*($4) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $97($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}