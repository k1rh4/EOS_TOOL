(data (i32.const 4) "\b0h\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "sell\00")
(data (i32.const 160) "destroy\00")
(data (i32.const 176) "claim\00")
(data (i32.const 192) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 256) "game 404 no found\00")
(data (i32.const 288) "no, pls claim after game over\00")
(data (i32.const 320) "sorry, you are so bad\00")
(data (i32.const 352) "get out\00")
(data (i32.const 368) "cannot pass end iterator to modify\00")
(data (i32.const 416) "active\00")
(data (i32.const 432) "claim reward\00")
(data (i32.const 448) "write\00")
(data (i32.const 464) "object passed to modify is not in multi_index\00")
(data (i32.const 512) "cannot modify objects in table of another contract\00")
(data (i32.const 576) "updater cannot change primary key when modifying an object\00")
(data (i32.const 640) "error reading iterator\00")
(data (i32.const 672) "read\00")
(data (i32.const 688) "invalid symbol name\00")
(data (i32.const 720) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 784) "cannot destroy negative byte\00")
(data (i32.const 816) "no resource row\00")
(data (i32.const 832) "insufficient quota\00")
(data (i32.const 864) "please wait a moment\00")
(data (i32.const 896) "must destroy less than max operate amount\00")
(data (i32.const 944) "must payout a positive amount\00")
(data (i32.const 976) "attempt to subtract asset with different symbol\00")
(data (i32.const 1024) "subtraction underflow\00")
(data (i32.const 1056) "subtraction overflow\00")
(data (i32.const 1088) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1152) "destroy payout\00")
(data (i32.const 1168) "shit happens\00")
(data (i32.const 1184) "shit happens again\00")
(data (i32.const 1216) "hero reward\00")
(data (i32.const 1232) "cannot create objects in table of another contract\00")
(data (i32.const 1296) "air drop reward\00")
(data (i32.const 1312) "invalid sell\00")
(data (i32.const 1328) "invalid conversion\00")
(data (i32.const 1360) "unexpected asset symbol input\00")
(data (i32.const 1392) "attempt to add asset with different symbol\00")
(data (i32.const 1440) "addition underflow\00")
(data (i32.const 1472) "addition overflow\00")
(data (i32.const 1504) "cannot sell negative byte\00")
(data (i32.const 1536) "sell payout\00")
(data (i32.const 1552) "nescafe12345\00")
(data (i32.const 1568) "sell fee\00")
(data (i32.const 1584) "chaingamefee\00")
(data (i32.const 1600) "dev fee\00")
(data (i32.const 1616) "get\00")
(data (i32.const 1632) "The game will start at 2018-08-11 12:00:00\00")
(data (i32.const 1680) "Invalid token transfer\00")
(data (i32.const 1712) "Quantity must be positive\00")
(data (i32.const 1744) "must purchase a positive amount\00")
(data (i32.const 1776) "buy fee\00")
(data (i32.const 1792) "must reserve a positive amount\00")
(data (i32.const 1824) "must reserve less than max operate amount\00")
(data (i32.const 10272) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10368) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10384) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10400) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$9 (param i32 i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$12 (param i64)))
(import "env" "require_auth2" (func $fimport$13 (param i64 i64)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $84))
(export "free" (func $87))
(export "pow" (func $94))
(export "sqrt" (func $95))
(export "fabs" (func $96))
(export "scalbn" (func $97))
(export "memcmp" (func $98))
(export "strlen" (func $99))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $100 $7 $11 $9 $12)



int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [10384])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [10368]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10400]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $90 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $88(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $89($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $92 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $88($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [272])
	*([0] + [4]) = $13
	*($13 + [248]) = $1
	$12 = ($0 + [104])
	$7 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $14($12, $6)
	
.LABEL $label$1
	*($13 + [240]) = $12
	*($13 + [244]) = $7
	$9 = *($7 + [8])
	$3 = *(($0 + [168]))
	$5 = *(($0 + [172]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$12 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$3:
	if ( ((int_64)*(*($12)) == (int_64)$9) ){ goto $label$2 }
	$5 = $12
	$6 = ($12 + [-24])
	$12 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$4 = ($0 + [144])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	$12 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [168]) == (int_32)$4), [192])
	goto $label$4 
	
.LABEL $label$5
	$12 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)7035924439720001536, $9)
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$6 }
	$12 = CALL $15($4, $12)
	CALL eosio_assert(((int_32)*($12 + [168]) == (int_32)$4), [192])
	goto $label$4 
	
.LABEL $label$6
	$12 = [0]
	
.LABEL $label$4
	*($13 + [236]) = $12
	*($13 + [232]) = $4
	$6 = [0]
	*(($13 + [224])) = [0]
	*($13 + [216]) = (int_64)0
	*($13 + [208]) = (int_64)-1
	$9 = *($0)
	*($13 + [192]) = $9
	*($13 + [200]) = $1
	$5 = CALL db_find_i64($9, $1, (int_64)-3020376800539705344, *($7 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $16(($13 + [192]), $5)
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)($13 + [192])), [192])
	$12 = *($13 + [236])
	
.LABEL $label$7
	$9 = *($12 + [16])
	if ( (int_64)($9 == 0) ){ goto $label$9 }
	if ( ((int_64)((uint_64)$9 % (uint_64)*($0 + [64])) != (int_64)0) ){ goto $label$9 }
	*(($5 = ($13 + [184]))) = *(($6 + [56]))
	*($13 + [176]) = *($6 + [48])
	$12 = *($13 + [236])
	$9 = *($12 + [80])
	$1 = *(($12 + [88]))
	CALL eosio_assert(((int_64)*(($12 + [104])) == (int_64)$1), [976])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($9 - *($12 + [96]))) > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$1 == (int_64)*($5)), [1088])
	if ( ((int_64)*($13 + [176]) <= (int_64)$9) ){ goto $label$10 }
	*($5) = $1
	*($13 + [176]) = $9
	
.LABEL $label$10
	$9 = *($13 + [248])
	*($13 + [24]) = ($13 + [176])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [368])
	CALL $45(($13 + [192]), $6, $9, ($13 + [24]))
	$9 = *(*($13 + [244]) + [8])
	$3 = *(($0 + [208]))
	$5 = *(($0 + [212]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$11 }
	$12 = ($5 + [-24])
	$7 = ([0] - $3)
	
.LOOP $label$12:
	if ( ((int_64)*(*($12)) == (int_64)$9) ){ goto $label$11 }
	$5 = $12
	$6 = ($12 + [-24])
	$12 = $6
	if ( ((int_32)($6 + $7) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = ($0 + [184])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$14 }
	$12 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [72]) == (int_32)$6), [192])
	goto $label$13 
	
.LABEL $label$14
	$12 = [0]
	$5 = CALL db_find_i64(*(($0 + [184])), *(($0 + [192])), (int_64)-7949128890230767616, $9)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	$12 = CALL $34($6, $5)
	CALL eosio_assert(((int_32)*($12 + [72]) == (int_32)$6), [192])
	
.LABEL $label$13
	*($13 + [28]) = ($13 + [176])
	*($13 + [24]) = ($13 + [168])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [368])
	$9 = (int_64)0
	CALL $46($6, $12, (int_64)0, ($13 + [24]))
	$12 = *($13 + [236])
	*($13 + [28]) = ($13 + [176])
	*($13 + [24]) = ($13 + [168])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [368])
	CALL $47($4, $12, (int_64)0, ($13 + [24]))
	*($13 + [144]) = (int_64)-1
	$1 = *($0)
	*($13 + [128]) = $1
	*($13 + [136]) = *(*($13 + [244]) + [8])
	*($13 + [152]) = [0]
	*(($13 + [156])) = [0]
	*(($13 + [160])) = [0]
	*($13 + [28]) = ($13 + [240])
	*($13 + [24]) = ($13 + [232])
	*($13 + [32]) = ($13 + [248])
	*($13 + [36]) = ($13 + [176])
	*($13 + [40]) = ($13 + [168])
	CALL $48(($13 + [88]), ($13 + [128]), $1, ($13 + [24]))
	if ( ((int_64)*($13 + [176]) < (int_64)1) ){ goto $label$15 }
	$11 = *($0)
	$8 = (int_64)59
	$12 = [416]
	$10 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$21 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$6 = ($6 + [165])
	goto $label$19 
	
.LABEL $label$21
	$1 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$17
	$12 = ($12 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$1 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$16 }
	*($13 + [80]) = $10
	*($13 + [72]) = $11
	$9 = (int_64)0
	$8 = (int_64)59
	$12 = [112]
	$10 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$27 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$6 = ($6 + [165])
	goto $label$25 
	
.LABEL $label$27
	$1 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$23
	$12 = ($12 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$1 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$22 }
	$9 = (int_64)0
	$8 = (int_64)59
	$12 = [128]
	$11 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$33 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$6 = ($6 + [165])
	goto $label$31 
	
.LABEL $label$33
	$1 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$29
	$12 = ($12 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$1 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$28 }
	*(($13 + [16])) = [0]
	*($13 + [8]) = (int_64)0
	$12 = CALL strlen([1296])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$36 }
	*($13 + [8]) = ($12 << [1])
	$6 = (($13 + [8]) | [1])
	if ( $12 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$5 = (($12 + [16]) & [-16])
	$6 = CALL $88($5)
	*($13 + [8]) = ($5 | [1])
	*($13 + [16]) = $6
	*($13 + [12]) = $12
	
.LABEL $label$35
	CALL memcpy($6, [1296], $12)
	
.LABEL $label$34
	*(($6 + $12)) = [0]
	*(($13 + [44])) = *($13 + [180])
	*($13 + [24]) = *($0)
	*($13 + [32]) = *($13 + [248])
	*(($13 + [52])) = *(($13 + [188]))
	*(($13 + [48])) = *((($13 + [176]) + [8]))
	*($13 + [40]) = *($13 + [176])
	$12 = (($13 + [8]) + [8])
	*(($13 + [64])) = *($12)
	*($13 + [56]) = *($13 + [8])
	*($13 + [8]) = [0]
	*($13 + [12]) = [0]
	*($12) = [0]
	$12 = CALL $18(($13 + [88]), ($13 + [72]), $10, $11, ($13 + [24]))
	CALL $19(($13 + [256]), $12)
	$6 = *($13 + [256])
	CALL send_inline($6, (*($13 + [260]) - $6))
	$6 = *($13 + [256])
	if ( ($6 == 0) ){ goto $label$37 }
	*($13 + [260]) = $6
	CALL $89($6)
	
.LABEL $label$37
	$6 = *($12 + [28])
	if ( ($6 == 0) ){ goto $label$38 }
	*(($12 + [32])) = $6
	CALL $89($6)
	
.LABEL $label$38
	$6 = *($12 + [16])
	if ( ($6 == 0) ){ goto $label$39 }
	*(($12 + [20])) = $6
	CALL $89($6)
	
.LABEL $label$39
	if ( ((*(($13 + [56])) & [1]) == 0) ){ goto $label$40 }
	CALL $89(*(($13 + [64])))
	
.LABEL $label$40
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $89(*(($13 + [16])))
	
.LABEL $label$15
	$5 = *($13 + [152])
	if ( ($5 == 0) ){ goto $label$9 }
	$0 = ($13 + [156])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$42 }
	
.LOOP $label$43:
	$12 = ($12 + [-24])
	$6 = *($12)
	*($12) = [0]
	if ( ($6 == 0) ){ goto $label$44 }
	CALL $89($6)
	
.LABEL $label$44
	if ( ((int_32)$5 != (int_32)$12) ){ goto $label$43 }
	$12 = *(($13 + [152]))
	goto $label$41 
	
.LABEL $label$42
	$12 = $5
	
.LABEL $label$41
	*($0) = $5
	CALL $89($12)
	
.LABEL $label$9
	$5 = *($13 + [216])
	if ( ($5 == 0) ){ goto $label$45 }
	$0 = ($13 + [220])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$47 }
	
.LOOP $label$48:
	$12 = ($12 + [-24])
	$6 = *($12)
	*($12) = [0]
	if ( ($6 == 0) ){ goto $label$49 }
	CALL $89($6)
	
.LABEL $label$49
	if ( ((int_32)$5 != (int_32)$12) ){ goto $label$48 }
	$12 = *(($13 + [216]))
	goto $label$46 
	
.LABEL $label$47
	$12 = $5
	
.LABEL $label$46
	*($0) = $5
	CALL $89($12)
	
.LABEL $label$45
	*([0] + [4]) = ($13 + [272])
	return (unreachable)
	
.LABEL $label$8
	CALL $90(($13 + [8]))
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1397703940
	CALL eosio_assert([1], [720])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [688])
	*($0 + [48]) = $1
	$4 = *($2 + [4])
	*($0) = *(*(*($4) + [4]) + [16])
	$5 = *($2)
	*($0 + [8]) = *(*(*($4 + [4]) + [4]) + [8])
	*($0 + [16]) = *(*($4 + [8]))
	$1 = *($4 + [12])
	*($0 + [24]) = *($1)
	*(($0 + [32])) = *(($1 + [8]))
	*($0 + [40]) = *(*($4 + [16]))
	*($6 + [56]) = ($6 + [48])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $51(($6 + [48]), $0)
	$3 = *($0)
	*($0 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)4406679876405297152, *(*($2 + [8])), $3, $6, [48])
	if ( (uint_64)($3 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [64])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1232])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $88([64])
	CALL $49($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $50(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $89($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [208])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1232])
	$4 = CALL $88([184])
	$6 = CALL $29($4)
	*($4 + [168]) = $1
	*($4 + [16]) = (int_64)0
	*($4) = *(*(*($3) + [4]) + [8])
	$3 = *($3 + [4])
	$5 = *($3 + [8])
	*($4 + [24]) = $5
	*($4 + [40]) = $5
	$5 = *($3 + [16])
	*($4 + [80]) = $5
	*($4 + [96]) = $5
	*($8 + [200]) = (($8 + [16]) + [168])
	*($8 + [196]) = ($8 + [16])
	*($8 + [192]) = ($8 + [16])
	CALL $43(($8 + [192]), $6)
	$5 = *($4)
	*($4 + [172]) = CALL db_store_i64(*($1 + [8]), (int_64)7035924439720001536, $2, $5, ($8 + [16]), [168])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [192]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [172])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [192]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $31(($1 + [24]), ($8 + [192]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [192])
	*($8 + [192]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $89($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [208])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$4 = *($1)
	CALL eosio_assert([1], [576])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $44(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [192])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [8]) = (int_64)1
	$5 = *($3)
	*($1 + [128]) = *($5)
	*(($1 + [136])) = *(($5 + [8]))
	$4 = *($1)
	$5 = *($3 + [4])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [88]))), [976])
	$6 = (int_64)
	*($1 + [80]) = $6(*($1 + [80]) - *($5)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1056])
	*($1 + [160]) = *(*($3 + [8]))
	$3 = *($3 + [4])
	*($1 + [144]) = *($3)
	*(($1 + [152])) = *(($3 + [8]))
	*($1 + [72]) = CALL current_time()
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($7 + [184]) = ($7 + [168])
	*($7 + [180]) = $7
	*($7 + [176]) = $7
	CALL $43(($7 + [176]), $1)
	CALL db_update_i64(*($1 + [172]), $2, $7, [168])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [192])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [192])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($3)))
	$4 = *($1)
	*($1 + [48]) = (int_64))(*($1 + [48]) - *(*($3)))
	$5 = *($3 + [4])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [88]))), [976])
	$6 = (int_64)
	*($1 + [80]) = $6(*($1 + [80]) - *($5)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1056])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($7 + [184]) = ($7 + [168])
	*($7 + [180]) = $7
	*($7 + [176]) = $7
	CALL $43(($7 + [176]), $1)
	CALL db_update_i64(*($1 + [172]), $2, $7, [168])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [192])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1)
	CALL $52($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($5 + [72]) = ($5 + [64])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $53(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1)
	CALL $56($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $25(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [720])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [688])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $67(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $68(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $89(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [288])
	*([0] + [4]) = $21
	*($21 + [264]) = $2
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$2 > (int_64)0), [1504])
	$12 = [0]
	$11 = [0]
	$14 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $14(($0 + [104]), $14)
	
.LABEL $label$1
	*(($21 + [256])) = [0]
	*($21 + [248]) = (int_64)0
	*($21 + [240]) = (int_64)-1
	$2 = *($0)
	*($21 + [224]) = $2
	*($21 + [232]) = $1
	$14 = CALL db_find_i64($2, $1, (int_64)-3020376800539705344, *($11 + [8]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$2 }
	$12 = CALL $16(($21 + [224]), $14)
	CALL eosio_assert(((int_32)*($12 + [96]) == (int_32)($21 + [224])), [192])
	
.LABEL $label$2
	$3 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($3, [816])
	CALL eosio_assert(((int_64)*($12 + [16]) >= (int_64)*($21 + [264])), [832])
	CALL eosio_assert(((uint_64)((uint_64)(int_64))(CALL $fimport$3() - *($12 + [40])) / (uint_64)(int_64)1000000) > (uint_64)*($0 + [72])), [864])
	$2 = *(($11 + [8]))
	$20 = *(($0 + [168]))
	$13 = *(($0 + [172]))
	if ( ((int_32)$13 == (int_32)$20) ){ goto $label$3 }
	$14 = ($13 + [-24])
	$5 = ([0] - $20)
	
.LOOP $label$4:
	if ( ((int_64)*(*($14)) == (int_64)$2) ){ goto $label$3 }
	$13 = $14
	$10 = ($14 + [-24])
	$14 = $10
	if ( ((int_32)($10 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$4 = ($0 + [144])
	if ( ((int_32)$13 == (int_32)$20) ){ goto $label$6 }
	$20 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($20 + [168]) == (int_32)$4), [192])
	goto $label$5 
	
.LABEL $label$6
	$20 = [0]
	$14 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$5 }
	$20 = CALL $15($4, $14)
	CALL eosio_assert(((int_32)*($20 + [168]) == (int_32)$4), [192])
	
.LABEL $label$5
	*($21 + [216]) = (int_64)1398362884
	*($21 + [208]) = (int_64)0
	CALL eosio_assert([1], [720])
	$2 = (uint_64)*($21 + [216]) >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$10 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	
.LABEL $label$7
	CALL eosio_assert($10, [688])
	$2 = *(($11 + [8]))
	$11 = *(($0 + [208]))
	$13 = *(($0 + [212]))
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$12 }
	$14 = ($13 + [-24])
	$5 = ([0] - $11)
	
.LOOP $label$13:
	if ( ((int_64)*(*($14)) == (int_64)$2) ){ goto $label$12 }
	$13 = $14
	$10 = ($14 + [-24])
	$14 = $10
	if ( ((int_32)($10 + $5) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$10 = ($0 + [184])
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$15 }
	$14 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [72]) == (int_32)$10), [192])
	goto $label$14 
	
.LABEL $label$15
	$14 = [0]
	$13 = CALL db_find_i64(*(($0 + [184])), *(($0 + [192])), (int_64)-7949128890230767616, $2)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$14 }
	$14 = CALL $34($10, $13)
	CALL eosio_assert(((int_32)*($14 + [72]) == (int_32)$10), [192])
	
.LABEL $label$14
	*($21 + [92]) = ($21 + [264])
	*($21 + [88]) = ($21 + [208])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [368])
	$2 = (int_64)0
	CALL $62($10, $14, (int_64)0, ($21 + [88]))
	CALL eosio_assert(((int_64)*($21 + [208]) > (int_64)0), [944])
	*($21 + [200]) = ((int_64)*($21 + [264]) / (int_64)100)
	$17 = *($20 + [80])
	$15 = *(($20 + [88]))
	CALL eosio_assert(((int_64)*(($20 + [104])) == (int_64)$15), [976])
	$17 = (int_64)
	CALL eosio_assert(((int_64)$17($17 - *($20 + [96]))) > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [1056])
	$14 = ($21 + [216])
	CALL eosio_assert(((int_64)$15 == (int_64)*($14)), [1088])
	if ( ((int_64)*($21 + [208]) <= (int_64)$17) ){ goto $label$16 }
	*($14) = $15
	*($21 + [208]) = $17
	
.LABEL $label$16
	*($21 + [92]) = ($21 + [200])
	*($21 + [88]) = ($21 + [208])
	*($21 + [96]) = ($21 + [264])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [368])
	CALL $63($4, $20, (int_64)0, ($21 + [88]))
	$19 = *($21 + [208])
	$6 = ((int_64)$19 + (int_64)199)
	$7 = ((int_64)$6 / (int_64)200)
	*($21 + [192]) = $7
	$8 = *($14)
	*($21 + [92]) = ($21 + [192])
	*($21 + [88]) = ($21 + [264])
	*($21 + [96]) = ($21 + [208])
	CALL eosio_assert($3, [368])
	CALL $64(($21 + [224]), $12, $1, ($21 + [88]))
	$9 = (int_64))($19 - $7)
	$18 = *($0)
	$15 = (int_64)59
	$14 = [416]
	$16 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$22 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$10 = ($10 + [165])
	goto $label$20 
	
.LABEL $label$22
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$18
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$17 }
	*($21 + [144]) = $16
	*($21 + [136]) = $18
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [112]
	$16 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$28 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$10 = ($10 + [165])
	goto $label$26 
	
.LABEL $label$28
	$17 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$24
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$23 }
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [128]
	$18 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$34 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$10 = ($10 + [165])
	goto $label$32 
	
.LABEL $label$34
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$30
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$29 }
	*(($21 + [80])) = [0]
	*($21 + [72]) = (int_64)0
	$14 = CALL strlen([1536])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$40 }
	*($21 + [72]) = ($14 << [1])
	$10 = (($21 + [72]) | [1])
	if ( $14 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$13 = (($14 + [16]) & [-16])
	$10 = CALL $88($13)
	*($21 + [72]) = ($13 | [1])
	*($21 + [80]) = $10
	*($21 + [76]) = $14
	
.LABEL $label$39
	CALL memcpy($10, [1536], $14)
	
.LABEL $label$38
	*(($10 + $14)) = [0]
	*(($21 + [112])) = $8
	*(($21 + [124])) = *($21 + [76])
	*($21 + [96]) = $1
	$14 = ($21 + [80])
	*(($21 + [128])) = *($14)
	*($21 + [88]) = *($0)
	*($21 + [104]) = $9
	*($21 + [120]) = *($21 + [72])
	*($21 + [72]) = [0]
	*($21 + [76]) = [0]
	*($14) = [0]
	$14 = CALL $18(($21 + [152]), ($21 + [136]), $16, $18, ($21 + [88]))
	CALL $19(($21 + [272]), $14)
	$10 = *($21 + [272])
	CALL send_inline($10, (*($21 + [276]) - $10))
	$10 = *($21 + [272])
	if ( ($10 == 0) ){ goto $label$41 }
	*($21 + [276]) = $10
	CALL $89($10)
	
.LABEL $label$41
	$10 = *($14 + [28])
	if ( ($10 == 0) ){ goto $label$42 }
	*(($14 + [32])) = $10
	CALL $89($10)
	
.LABEL $label$42
	$10 = *($14 + [16])
	if ( ($10 == 0) ){ goto $label$43 }
	*(($14 + [20])) = $10
	CALL $89($10)
	
.LABEL $label$43
	if ( ((*(($21 + [120])) & [1]) == 0) ){ goto $label$44 }
	CALL $89(*(($21 + [128])))
	
.LABEL $label$44
	if ( ((*($21 + [72]) & [1]) == 0) ){ goto $label$45 }
	CALL $89(*(($21 + [80])))
	
.LABEL $label$45
	if ( ((int_64)$19 < (int_64)1) ){ goto $label$46 }
	$8 = ((int_64)$6 / (int_64)400)
	$7 = (int_64))($7 - $8)
	$18 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [416]
	$16 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$52 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$10 = ($10 + [165])
	goto $label$50 
	
.LABEL $label$52
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$48
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$47 }
	*($21 + [144]) = $16
	*($21 + [136]) = $18
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [112]
	$16 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$58 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$10 = ($10 + [165])
	goto $label$56 
	
.LABEL $label$58
	$17 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$54
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$53 }
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [128]
	$18 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$64 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$10 = ($10 + [165])
	goto $label$62 
	
.LABEL $label$64
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$60
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$59 }
	$2 = (int_64)0
	$17 = (int_64)59
	$14 = [1552]
	$19 = (int_64)0
	
.LOOP $label$65:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$66 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$68 }
	$10 = ($10 + [165])
	goto $label$67 
	
.LABEL $label$68
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$67
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$66
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$15 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$65 }
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [720])
	$2 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$72 }
	
.LOOP $label$73:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$70 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$73 }
	
.LABEL $label$72
	$10 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$10 = [0]
	
.LABEL $label$69
	CALL eosio_assert($10, [688])
	*(($21 + [80])) = [0]
	*($21 + [72]) = (int_64)0
	$14 = CALL strlen([1568])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$76 }
	*($21 + [72]) = ($14 << [1])
	$10 = (($21 + [72]) | [1])
	if ( $14 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$13 = (($14 + [16]) & [-16])
	$10 = CALL $88($13)
	*($21 + [72]) = ($13 | [1])
	*($21 + [80]) = $10
	*($21 + [76]) = $14
	
.LABEL $label$75
	CALL memcpy($10, [1568], $14)
	
.LABEL $label$74
	*(($10 + $14)) = [0]
	*(($21 + [112])) = (int_64)1397703940
	*(($21 + [124])) = *($21 + [76])
	*($21 + [96]) = $19
	$14 = ($21 + [80])
	*(($21 + [128])) = *($14)
	*($21 + [88]) = *($0)
	*($21 + [104]) = $7
	*($21 + [120]) = *($21 + [72])
	*($21 + [72]) = [0]
	*($21 + [76]) = [0]
	*($14) = [0]
	$14 = CALL $18(($21 + [152]), ($21 + [136]), $16, $18, ($21 + [88]))
	CALL $19(($21 + [272]), $14)
	$10 = *($21 + [272])
	CALL send_inline($10, (*($21 + [276]) - $10))
	$10 = *($21 + [272])
	if ( ($10 == 0) ){ goto $label$77 }
	*($21 + [276]) = $10
	CALL $89($10)
	
.LABEL $label$77
	$10 = *($14 + [28])
	if ( ($10 == 0) ){ goto $label$78 }
	*(($14 + [32])) = $10
	CALL $89($10)
	
.LABEL $label$78
	$10 = *($14 + [16])
	if ( ($10 == 0) ){ goto $label$79 }
	*(($14 + [20])) = $10
	CALL $89($10)
	
.LABEL $label$79
	if ( ((*(($21 + [120])) & [1]) == 0) ){ goto $label$80 }
	CALL $89(*(($21 + [128])))
	
.LABEL $label$80
	if ( ((*($21 + [72]) & [1]) == 0) ){ goto $label$81 }
	CALL $89(*(($21 + [80])))
	
.LABEL $label$81
	if ( ((int_64)$6 < (int_64)400) ){ goto $label$46 }
	$18 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [416]
	$16 = (int_64)0
	
.LOOP $label$82:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$87 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$10 = ($10 + [165])
	goto $label$85 
	
.LABEL $label$87
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$86
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$84
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$83
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$82 }
	*($21 + [144]) = $16
	*($21 + [136]) = $18
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [112]
	$16 = (int_64)0
	
.LOOP $label$88:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$93 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$92 }
	$10 = ($10 + [165])
	goto $label$91 
	
.LABEL $label$93
	$17 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$92
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$91
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$90
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$89
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$88 }
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [128]
	$18 = (int_64)0
	
.LOOP $label$94:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$99 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$98 }
	$10 = ($10 + [165])
	goto $label$97 
	
.LABEL $label$99
	$17 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$98
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$97
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$96
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$95
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$94 }
	$2 = (int_64)0
	$17 = (int_64)59
	$14 = [1584]
	$19 = (int_64)0
	
.LOOP $label$100:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$101 }
	$10 = *($14)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$103 }
	$10 = ($10 + [165])
	goto $label$102 
	
.LABEL $label$103
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$102
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$101
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$15 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$100 }
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [720])
	$2 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$106:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$105 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$107 }
	
.LOOP $label$108:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$105 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$108 }
	
.LABEL $label$107
	$10 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$106 }
	goto $label$104 
	
.LABEL $label$105
	$10 = [0]
	
.LABEL $label$104
	CALL eosio_assert($10, [688])
	*(($21 + [80])) = [0]
	*($21 + [72]) = (int_64)0
	$14 = CALL strlen([1600])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$35 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$111 }
	*($21 + [72]) = ($14 << [1])
	$10 = (($21 + [72]) | [1])
	if ( $14 ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$111
	$13 = (($14 + [16]) & [-16])
	$10 = CALL $88($13)
	*($21 + [72]) = ($13 | [1])
	*($21 + [80]) = $10
	*($21 + [76]) = $14
	
.LABEL $label$110
	CALL memcpy($10, [1600], $14)
	
.LABEL $label$109
	*(($10 + $14)) = [0]
	*(($21 + [112])) = (int_64)1397703940
	*(($21 + [124])) = *($21 + [76])
	*($21 + [96]) = $19
	$14 = ($21 + [80])
	*(($21 + [128])) = *($14)
	*($21 + [88]) = *($0)
	*($21 + [104]) = $8
	*($21 + [120]) = *($21 + [72])
	*($21 + [72]) = [0]
	*($21 + [76]) = [0]
	*($14) = [0]
	$14 = CALL $18(($21 + [152]), ($21 + [136]), $16, $18, ($21 + [88]))
	CALL $19(($21 + [272]), $14)
	$10 = *($21 + [272])
	CALL send_inline($10, (*($21 + [276]) - $10))
	$10 = *($21 + [272])
	if ( ($10 == 0) ){ goto $label$112 }
	*($21 + [276]) = $10
	CALL $89($10)
	
.LABEL $label$112
	$10 = *($14 + [28])
	if ( ($10 == 0) ){ goto $label$113 }
	*(($14 + [32])) = $10
	CALL $89($10)
	
.LABEL $label$113
	$10 = *($14 + [16])
	if ( ($10 == 0) ){ goto $label$114 }
	*(($14 + [20])) = $10
	CALL $89($10)
	
.LABEL $label$114
	if ( ((*(($21 + [120])) & [1]) == 0) ){ goto $label$115 }
	CALL $89(*(($21 + [128])))
	
.LABEL $label$115
	if ( ((*($21 + [72]) & [1]) == 0) ){ goto $label$46 }
	CALL $89(*(($21 + [80])))
	
.LABEL $label$46
	$14 = (($21 + [208]) + [8])
	$2 = *($14)
	*((($21 + [56]) + [8])) = $2
	*((($21 + [24]) + [8])) = $2
	$2 = *($21 + [208])
	*($21 + [56]) = $2
	*($21 + [24]) = $2
	CALL $38($0, $1, ($21 + [24]))
	$2 = *($14)
	*((($21 + [40]) + [8])) = $2
	*((($21 + [8]) + [8])) = $2
	$2 = *($21 + [208])
	*($21 + [40]) = $2
	*($21 + [8]) = $2
	CALL $39($0, $1, ($21 + [8]))
	$0 = *($21 + [248])
	if ( ($0 == 0) ){ goto $label$116 }
	$13 = ($21 + [252])
	$14 = *($13)
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$118 }
	
.LOOP $label$119:
	$14 = ($14 + [-24])
	$10 = *($14)
	*($14) = [0]
	if ( ($10 == 0) ){ goto $label$120 }
	CALL $89($10)
	
.LABEL $label$120
	if ( ((int_32)$0 != (int_32)$14) ){ goto $label$119 }
	$14 = *(($21 + [248]))
	goto $label$117 
	
.LABEL $label$118
	$14 = $0
	
.LABEL $label$117
	*($13) = $0
	CALL $89($14)
	
.LABEL $label$116
	*([0] + [4]) = ($21 + [288])
	return (unreachable)
	
.LABEL $label$37
	CALL $90(($21 + [72]))
	
.LABEL $label$36
	CALL $90(($21 + [72]))
	
.LABEL $label$35
	CALL $90(($21 + [72]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($0 + [8]) = (int_64)671088
	*($0) = $1
	*($0 + [16]) = (int_64)100000000
	*($0 + [24]) = (int_64)90
	*($0 + [32]) = (int_64)10
	*($0 + [40]) = (int_64)10
	*($0 + [48]) = (int_64)50
	*($0 + [56]) = (int_64)90
	*($0 + [64]) = (int_64)1000
	*($0 + [72]) = (int_64)15
	*($0 + [80]) = (int_64)1
	*($0 + [88]) = (int_64)1533960000000000
	*($0 + [96]) = (int_64)50000000
	*($0 + [104]) = $1
	*(($0 + [112])) = $1
	*(($0 + [120])) = (int_64)-1
	*(($0 + [128])) = [0]
	*(($0 + [132])) = [0]
	*(($0 + [136])) = [0]
	*($0 + [144]) = $1
	*(($0 + [152])) = $1
	*(($0 + [160])) = (int_64)-1
	*(($0 + [168])) = [0]
	*(($0 + [172])) = [0]
	*(($0 + [176])) = [0]
	*($0 + [184]) = $1
	*(($0 + [192])) = $1
	*(($0 + [200])) = (int_64)-1
	*(($0 + [208])) = [0]
	*(($0 + [212])) = [0]
	*(($0 + [216])) = [0]
	$6 = ($0 + [104])
	$4 = CALL db_lowerbound_i64($1, $1, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	*($8 + [28]) = CALL $14($6, $4)
	*($8 + [24]) = $6
	$5 = (($8 + [24]) | [4])
	goto $label$1 
	
.LABEL $label$2
	*($8 + [28]) = [0]
	*($8 + [24]) = $6
	$1 = *($0)
	*($8 + [8]) = $0
	CALL $80(($8 + [16]), $6, $1, ($8 + [8]))
	*($8 + [24]) = *($8 + [16])
	$5 = (($8 + [24]) | [4])
	
.LABEL $label$1
	$1 = *(*($5) + [8])
	$2 = *(($0 + [168]))
	$7 = *(($0 + [172]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$4:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$3 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$6 = ($0 + [144])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$7 }
	$4 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [168]) == (int_32)$6), [192])
	if ( $4 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$4 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $15($6, $4) + [168]) == (int_32)$6), [192])
	goto $label$5 
	
.LABEL $label$6
	$1 = *($0)
	*($8 + [12]) = $0
	*($8 + [8]) = ($8 + [24])
	CALL $81(($8 + [16]), $6, $1, ($8 + [8]))
	
.LABEL $label$5
	$1 = *(*($5) + [8])
	$5 = *(($0 + [208]))
	$7 = *(($0 + [212]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$8 }
	$6 = ($7 + [-24])
	$3 = ([0] - $5)
	
.LOOP $label$9:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$8 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = ($0 + [184])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$12 }
	$4 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$6), [192])
	if ( $4 ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$4 = CALL db_find_i64(*(($0 + [184])), *(($0 + [192])), (int_64)-7949128890230767616, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $34($6, $4) + [72]) == (int_32)$6), [192])
	goto $label$10 
	
.LABEL $label$11
	$1 = *($0)
	*($8 + [12]) = $0
	*($8 + [8]) = ($8 + [24])
	CALL $82(($8 + [16]), $6, $1, ($8 + [8]))
	
.LABEL $label$10
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	CALL eosio_assert(((uint_64)CALL $fimport$3() > (uint_64)*($0 + [88])), [1632])
	$6 = *($3 + [8])
	$8 = [0]
	$5 = *($3)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [1680])
	CALL eosio_assert(((int_64)$5 > (int_64)0), [1712])
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$1 }
	$2 = *(($3 + [8]))
	*((($9 + [16]) + [8])) = $2
	$6 = *($3)
	*(($9 + [8])) = $2
	*($9 + [16]) = $6
	*($9 + [4]) = *($9 + [20])
	*($9) = *($9 + [16])
	CALL $71($0, $1, $9)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [32])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [288])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$46 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$42
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$41 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL $6(($9 + [64]), $0)
	if ( ((int_64)$2 > (int_64)4921564679018381311) ){ goto $label$50 }
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$49 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$47 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [1]
	*($9) = *($9 + [56])
	CALL $8($4, $9)
	goto $label$47 
	
.LABEL $label$50
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)5382254363446083584) ){ goto $label$47 }
	*($9 + [44]) = [0]
	*($9 + [40]) = [2]
	*($9 + [16 align=4]) = *($9 + [40])
	CALL $10($4, ($9 + [16]))
	goto $label$47 
	
.LABEL $label$49
	*($9 + [52]) = [0]
	*($9 + [48]) = [3]
	*($9 + [8 align=4]) = *($9 + [48])
	CALL $10($4, ($9 + [8]))
	goto $label$47 
	
.LABEL $label$48
	*($9 + [36]) = [0]
	*($9 + [32]) = [4]
	*($9 + [24 align=4]) = *($9 + [32])
	CALL $10($4, ($9 + [24]))
	
.LABEL $label$47
	CALL $13($4)
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [288])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [640])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $88([112])) + [96]) = $0
	*($6) = (int_64)0
	CALL $32(($8 + [32]), $6)
	*($6 + [100]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [100])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $33(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [640])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $88([184])
	$4 = CALL $29($6)
	*($6 + [168]) = $0
	CALL $30(($8 + [32]), $4)
	*($6 + [172]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [172])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $31(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [640])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $88([112])
	$4 = CALL $26($6)
	*($6 + [96]) = $0
	CALL $27(($8 + [32]), $4)
	*($6 + [100]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [100])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $28(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [24]) = (int_64)1
	$4 = *($1)
	CALL eosio_assert([1], [576])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $25(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [672])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [672])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [304])
	*([0] + [4]) = $16
	*($16 + [280]) = $2
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$2 > (int_64)0), [784])
	$8 = [0]
	$7 = [0]
	$10 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $14(($0 + [104]), $10)
	
.LABEL $label$1
	*(($16 + [272])) = [0]
	*($16 + [264]) = (int_64)0
	*($16 + [256]) = (int_64)-1
	$2 = *($0)
	*($16 + [240]) = $2
	*($16 + [248]) = $1
	$10 = CALL db_find_i64($2, $1, (int_64)-3020376800539705344, *($7 + [8]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $16(($16 + [240]), $10)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)($16 + [240])), [192])
	
.LABEL $label$2
	$3 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($3, [816])
	CALL eosio_assert(((int_64)*($8 + [16]) >= (int_64)*($16 + [280])), [832])
	CALL eosio_assert(((uint_64)((uint_64)(int_64))(CALL $fimport$3() - *($8 + [40])) / (uint_64)(int_64)1000000) > (uint_64)*($0 + [72])), [864])
	$2 = *(($7 + [8]))
	$15 = *(($0 + [168]))
	$9 = *(($0 + [172]))
	if ( ((int_32)$9 == (int_32)$15) ){ goto $label$3 }
	$10 = ($9 + [-24])
	$5 = ([0] - $15)
	
.LOOP $label$4:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$3 }
	$9 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$4 = ($0 + [144])
	if ( ((int_32)$9 == (int_32)$15) ){ goto $label$6 }
	$15 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [168]) == (int_32)$4), [192])
	goto $label$5 
	
.LABEL $label$6
	$15 = [0]
	$10 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	$15 = CALL $15($4, $10)
	CALL eosio_assert(((int_32)*($15 + [168]) == (int_32)$4), [192])
	
.LABEL $label$5
	CALL eosio_assert((uint_64)(*($16 + [280]) <= ((int_64)((uint_64)*($15 + [40]) / (uint_64)(int_64)100) * (int_64)*($0 + [80]))), [896])
	*($16 + [232]) = (int_64)1398362884
	*($16 + [224]) = (int_64)0
	CALL eosio_assert([1], [720])
	$2 = (uint_64)*($16 + [232]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [688])
	$2 = *(($7 + [8]))
	$7 = *(($0 + [208]))
	$9 = *(($0 + [212]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$12 }
	$10 = ($9 + [-24])
	$5 = ([0] - $7)
	
.LOOP $label$13:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$12 }
	$9 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$6 = ($0 + [184])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$15 }
	$10 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)$6), [192])
	goto $label$14 
	
.LABEL $label$15
	$10 = [0]
	$9 = CALL db_find_i64(*(($0 + [184])), *(($0 + [192])), (int_64)-7949128890230767616, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	$10 = CALL $34($6, $9)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)$6), [192])
	
.LABEL $label$14
	*($16 + [92]) = ($16 + [280])
	*($16 + [88]) = ($16 + [224])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [368])
	$2 = (int_64)0
	CALL $35($6, $10, (int_64)0, ($16 + [88]))
	$6 = (($16 + [224]) + [8])
	*(($10 = (($16 + [208]) + [8]))) = *($6)
	*($16 + [208]) = *($16 + [224])
	$13 = ((int_64)((int_64)*($16 + [224]) / (int_64)100) * (int_64)*($0 + [24]))
	*($16 + [208]) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)0), [944])
	$13 = *($15 + [80])
	$11 = *(($15 + [88]))
	CALL eosio_assert(((int_64)*(($15 + [104])) == (int_64)$11), [976])
	$13 = (int_64)
	CALL eosio_assert(((int_64)$13($13 - *($15 + [96]))) > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$11 == (int_64)*($10)), [1088])
	if ( ((int_64)*($16 + [208]) <= (int_64)$13) ){ goto $label$16 }
	*($10) = $11
	*($16 + [208]) = $13
	
.LABEL $label$16
	*($16 + [92]) = ($16 + [208])
	*($16 + [88]) = ($16 + [280])
	CALL eosio_assert($3, [368])
	CALL $36(($16 + [240]), $8, $1, ($16 + [88]))
	$13 = *($6)
	*((($16 + [192]) + [8])) = $13
	*($16 + [192]) = *($16 + [224])
	CALL eosio_assert(((int_64)$13 == (int_64)*($10)), [976])
	$13 = (int_64)
	*($16 + [192]) = $13(*($16 + [192]) - *($16 + [208])))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [1056])
	*($16 + [92]) = ($16 + [280])
	*($16 + [88]) = ($16 + [192])
	*($16 + [96]) = ($16 + [208])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [368])
	CALL $37($4, $15, (int_64)0, ($16 + [88]))
	$14 = *($0)
	$11 = (int_64)59
	$10 = [416]
	$12 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$22 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$22
	$13 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$18
	$10 = ($10 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$17 }
	*($16 + [144]) = $12
	*($16 + [136]) = $14
	$2 = (int_64)0
	$11 = (int_64)59
	$10 = [112]
	$12 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$28 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$6 = ($6 + [165])
	goto $label$26 
	
.LABEL $label$28
	$13 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$24
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$23 }
	$2 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$14 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$34 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$6 = ($6 + [165])
	goto $label$32 
	
.LABEL $label$34
	$13 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$30
	$10 = ($10 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$29 }
	*(($16 + [80])) = [0]
	*($16 + [72]) = (int_64)0
	$10 = CALL strlen([1152])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$35 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$38 }
	*($16 + [72]) = ($10 << [1])
	$6 = (($16 + [72]) | [1])
	if ( $10 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$9 = (($10 + [16]) & [-16])
	$6 = CALL $88($9)
	*($16 + [72]) = ($9 | [1])
	*($16 + [80]) = $6
	*($16 + [76]) = $10
	
.LABEL $label$37
	CALL memcpy($6, [1152], $10)
	
.LABEL $label$36
	*(($6 + $10)) = [0]
	*(($16 + [108])) = *($16 + [212])
	*($16 + [96]) = $1
	*(($16 + [116])) = *(($16 + [220]))
	*(($16 + [112])) = *((($16 + [208]) + [8]))
	*($16 + [88]) = *($0)
	*($16 + [104]) = *($16 + [208])
	$10 = (($16 + [72]) + [8])
	*(($16 + [128])) = *($10)
	*($16 + [120]) = *($16 + [72])
	*($16 + [72]) = [0]
	*($16 + [76]) = [0]
	*($10) = [0]
	$10 = CALL $18(($16 + [152]), ($16 + [136]), $12, $14, ($16 + [88]))
	CALL $19(($16 + [288]), $10)
	$6 = *($16 + [288])
	CALL send_inline($6, (*($16 + [292]) - $6))
	$6 = *($16 + [288])
	if ( ($6 == 0) ){ goto $label$39 }
	*($16 + [292]) = $6
	CALL $89($6)
	
.LABEL $label$39
	$6 = *($10 + [28])
	if ( ($6 == 0) ){ goto $label$40 }
	*(($10 + [32])) = $6
	CALL $89($6)
	
.LABEL $label$40
	$6 = *($10 + [16])
	if ( ($6 == 0) ){ goto $label$41 }
	*(($10 + [20])) = $6
	CALL $89($6)
	
.LABEL $label$41
	if ( ((*(($16 + [120])) & [1]) == 0) ){ goto $label$42 }
	CALL $89(*(($16 + [128])))
	
.LABEL $label$42
	if ( ((*($16 + [72]) & [1]) == 0) ){ goto $label$43 }
	CALL $89(*(($16 + [80])))
	
.LABEL $label$43
	$10 = (($16 + [208]) + [8])
	$2 = *($10)
	*((($16 + [56]) + [8])) = $2
	*((($16 + [24]) + [8])) = $2
	$2 = *($16 + [208])
	*($16 + [56]) = $2
	*($16 + [24]) = $2
	CALL $38($0, $1, ($16 + [24]))
	$2 = *($10)
	*((($16 + [40]) + [8])) = $2
	*((($16 + [8]) + [8])) = $2
	$2 = *($16 + [208])
	*($16 + [40]) = $2
	*($16 + [8]) = $2
	CALL $39($0, $1, ($16 + [8]))
	$0 = *($16 + [264])
	if ( ($0 == 0) ){ goto $label$44 }
	$9 = ($16 + [268])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$46 }
	
.LOOP $label$47:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$48 }
	CALL $89($6)
	
.LABEL $label$48
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$47 }
	$10 = *(($16 + [264]))
	goto $label$45 
	
.LABEL $label$46
	$10 = $0
	
.LABEL $label$45
	*($9) = $0
	CALL $89($10)
	
.LABEL $label$44
	*([0] + [4]) = ($16 + [304])
	return (unreachable)
	
.LABEL $label$35
	CALL $90(($16 + [72]))
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [176])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$9 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	CALL $14(($0 + [104]), $9)
	
.LABEL $label$1
	$3 = *(($0 + [168]))
	$7 = *(($0 + [172]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$9 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$3:
	if ( ((int_64)*(*($9)) == (int_64)$2) ){ goto $label$2 }
	$7 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = ($0 + [144])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [168]) == (int_32)$9), [192])
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $15($9, $7)
	CALL eosio_assert(((int_32)*($8 + [168]) == (int_32)$9), [192])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [256])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)1), [288])
	*(($14 + [152])) = [0]
	*($14 + [136]) = (int_64)-1
	*($14 + [144]) = (int_64)0
	$12 = *($0)
	*($14 + [120]) = $12
	*($14 + [128]) = $1
	$9 = [0]
	$7 = CALL db_find_i64($12, $1, (int_64)-3020376800539705344, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$9 = CALL $16(($14 + [120]), $7)
	CALL eosio_assert(((int_32)*($9 + [96]) == (int_32)($14 + [120])), [192])
	
.LABEL $label$6
	$7 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($7, [320])
	CALL eosio_assert((int_64)(*($9 + [24]) == 0), [352])
	$5 = *(($8 + [136]))
	$2 = *($9 + [16])
	$12 = *($8 + [128])
	CALL eosio_assert($7, [368])
	CALL $17(($14 + [120]), $9, $1, ($14 + [16]))
	$6 = ((int_64)$2 * (int_64)$12)
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$8 }
	$13 = *($0)
	$2 = (int_64)0
	$10 = (int_64)59
	$9 = [416]
	$11 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$14 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$8 = ($8 + [165])
	goto $label$12 
	
.LABEL $label$14
	$12 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$10
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$9 }
	*($14 + [72]) = $11
	*($14 + [64]) = $13
	$2 = (int_64)0
	$10 = (int_64)59
	$9 = [112]
	$11 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$20 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$8 = ($8 + [165])
	goto $label$18 
	
.LABEL $label$20
	$12 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$16
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$15 }
	$2 = (int_64)0
	$10 = (int_64)59
	$9 = [128]
	$13 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$26 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$8 = ($8 + [165])
	goto $label$24 
	
.LABEL $label$26
	$12 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$22
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$21 }
	*(($14 + [8])) = [0]
	*($14) = (int_64)0
	$9 = CALL strlen([432])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$29 }
	*($14) = ($9 << [1])
	$8 = ($14 | [1])
	if ( $9 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$7 = (($9 + [16]) & [-16])
	$8 = CALL $88($7)
	*($14) = ($7 | [1])
	*($14 + [8]) = $8
	*($14 + [4]) = $9
	
.LABEL $label$28
	CALL memcpy($8, [432], $9)
	
.LABEL $label$27
	*(($8 + $9)) = [0]
	*(($14 + [40])) = $5
	*(($14 + [52])) = *($14 + [4])
	*($14 + [24]) = $1
	$9 = ($14 + [8])
	*(($14 + [56])) = *($9)
	*($14 + [16]) = *($0)
	*($14 + [32]) = $6
	*($14 + [48]) = *($14)
	*($14) = [0]
	*($14 + [4]) = [0]
	*($9) = [0]
	$9 = CALL $18(($14 + [80]), ($14 + [64]), $11, $13, ($14 + [16]))
	CALL $19(($14 + [160]), $9)
	$8 = *($14 + [160])
	CALL send_inline($8, (*($14 + [164]) - $8))
	$8 = *($14 + [160])
	if ( ($8 == 0) ){ goto $label$30 }
	*($14 + [164]) = $8
	CALL $89($8)
	
.LABEL $label$30
	$8 = *($9 + [28])
	if ( ($8 == 0) ){ goto $label$31 }
	*(($9 + [32])) = $8
	CALL $89($8)
	
.LABEL $label$31
	$8 = *($9 + [16])
	if ( ($8 == 0) ){ goto $label$32 }
	*(($9 + [20])) = $8
	CALL $89($8)
	
.LABEL $label$32
	if ( ((*(($14 + [48])) & [1]) == 0) ){ goto $label$33 }
	CALL $89(*(($14 + [56])))
	
.LABEL $label$33
	if ( ((*($14) & [1]) == 0) ){ goto $label$8 }
	CALL $89(*(($14 + [8])))
	
.LABEL $label$8
	$7 = *($14 + [144])
	if ( ($7 == 0) ){ goto $label$34 }
	$4 = ($14 + [148])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$36 }
	
.LOOP $label$37:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$38 }
	CALL $89($8)
	
.LABEL $label$38
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$37 }
	$9 = *(($14 + [144]))
	goto $label$35 
	
.LABEL $label$36
	$9 = $7
	
.LABEL $label$35
	*($4) = $7
	CALL $89($9)
	
.LABEL $label$34
	*([0] + [4]) = ($14 + [176])
	return (unreachable)
	
.LABEL $label$7
	CALL $90($14)
}

int_32 .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [208]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [212])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $89($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [208]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $89($4)
	
.LABEL $label$1
	$1 = *(($0 + [168]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [172])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $89($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [168]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $89($4)
	
.LABEL $label$6
	$1 = *(($0 + [128]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [132])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $89($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [128]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $89($4)
	
.LABEL $label$11
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1232])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $88([112])
	CALL $26($3)
	*($3 + [96]) = $1
	CALL $79(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [100])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $28(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $89($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $88([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $20($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $23(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $20($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [448])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [448])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $22(CALL $21($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(*($0 + [4]))
	*($5 + [16]) = $2
	*($5 + [24]) = (int_64)22042220187046660
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [720])
	$3 = [0]
	$2 = (int_64)86102422605651
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [688])
	*(($5 + [8])) = *((($5 + [16]) + [8]))
	*($5) = *($5 + [16])
	CALL $54(($5 + [32]), $1, $5, (int_64)1397703940)
	*(($3 = *($0))) = *($5 + [32])
	*(($3 + [8])) = *((($5 + [32]) + [8]))
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $59 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [688])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [688])
	*($0 + [48]) = (int_64)0
	*(($0 + [40])) = (int_64)4602678819172646912
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [688])
	*(($0 + [64])) = (int_64)4602678819172646912
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $92($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*(($5 = (($6 + [80]) + [12]))) = *(($4 + [12]))
	*(($2 = (($6 + [80]) + [8]))) = *(($4 + [8]))
	*($6 + [80]) = *($4)
	*($6 + [84]) = *(($4 + [4]))
	*((($6 + [32]) + [12])) = *($5)
	*((($6 + [32]) + [8])) = *($2)
	*($6 + [36]) = *($6 + [84])
	*($6 + [32]) = *($6 + [80])
	CALL $54(($6 + [96]), $1, ($6 + [32]), (int_64)22042220187046660)
	*(*($0)) = *($6 + [96])
	$3 = *(*($0))
	if ( ((int_64)$3 <= (int_64)0) ){ goto $label$1 }
	*($6 + [72]) = (int_64)22042220187046660
	*($6 + [64]) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [720])
	$3 = (int_64)86102422605651
	$4 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [688])
	*((($6 + [16]) + [8])) = *((($6 + [64]) + [8]))
	*($6 + [16]) = *($6 + [64])
	CALL $54(($6 + [96]), $1, ($6 + [16]), (int_64)1397703940)
	*(($4 = *(($0 + [4])))) = *($6 + [96])
	*(($4 + [8])) = *((($6 + [96]) + [8]))
	$3 = *(*($0))
	*($6 + [48]) = $3
	*($6 + [56]) = (int_64)22042220187046660
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [720])
	$3 = (int_64)86102422605651
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [688])
	*(($6 + [8])) = *((($6 + [48]) + [8]))
	*($6) = *($6 + [48])
	CALL $54(($6 + [96]), $1, $6, (int_64)1397703940)
	*(($4 = *(($0 + [4])))) = *($6 + [96])
	*(($4 + [8])) = *((($6 + [96]) + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [112])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$5 = *(($1 + [56]))
	$7 = *(($1 + [32]))
	$4 = *($2 + [8])
	if ( ((int_64)$4 != (int_64)*(($1 + [16]))) ){ goto $label$10 }
	if ( ((int_64)$7 != (int_64)$3) ){ goto $label$9 }
	$9 = ($2 + [8])
	*(($8 = (($10 + [80]) + [8]))) = *($9)
	$7 = *($2)
	*((($10 + [16]) + [12])) = *((($10 + [80]) + [12]))
	*((($10 + [16]) + [8])) = *($8)
	*($10 + [80]) = $7
	*($10 + [20]) = *($10 + [84])
	*($10 + [16]) = *($10 + [80])
	CALL $55(($10 + [96]), $1, ($1 + [24]), ($10 + [16]))
	*($9) = *((($10 + [96]) + [8]))
	*($2) = *($10 + [96])
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$4 != (int_64)$7) ){ goto $label$8 }
	$4 = *($1 + [8])
	$8 = ($1 + [24])
	$7 = *($2)
	$6 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $7) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$7))) + (float_64)(float_64)1), ((float_64)*(($1 + [40])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$7 + (int_64)*($8))
	$4 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $6))
	*($1 + [8]) = ((int_64)$4) + (int_64)*($1 + [8]))
	$5 = *(($1 + [16]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [720])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_64)$5 != (int_64)$3) ){ goto $label$5 }
	$9 = ($2 + [8])
	*(($8 = (($10 + [64]) + [8]))) = *($9)
	$7 = *($2)
	*((($10 + [32]) + [12])) = *((($10 + [64]) + [12]))
	*((($10 + [32]) + [8])) = *($8)
	*($10 + [64]) = $7
	*($10 + [36]) = *($10 + [68])
	*($10 + [32]) = *($10 + [64])
	CALL $55(($10 + [96]), $1, ($1 + [48]), ($10 + [32]))
	*($9) = *((($10 + [96]) + [8]))
	*($2) = *($10 + [96])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$4 != (int_64)$5) ){ goto $label$4 }
	$4 = *($1 + [8])
	$8 = ($1 + [48])
	$7 = *($2)
	$6 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $7) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$7))) + (float_64)(float_64)1), ((float_64)*(($1 + [64])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$7 + (int_64)*($8))
	$4 = (Rounds 0)(!(float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64))((float_64)1 - $6))
	*($1 + [8]) = ((int_64)$4) + (int_64)*($1 + [8]))
	$5 = *(($1 + [16]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [720])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$14 }
	goto $label$2 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [688])
	*(($2 + [8])) = $5
	*($2) = $4
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [1328])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [1312])
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [688])
	*(($2 + [8])) = $5
	*($2) = $4
	
.LABEL $label$1
	$8 = ($2 + [8])
	if ( ((int_64)*($8) != (int_64)$3) ){ goto $label$18 }
	*($0) = *($2)
	*(($0 + [8])) = *($8)
	goto $label$17 
	
.LABEL $label$18
	$7 = *($8)
	*((($10 + [48]) + [8])) = $7
	$4 = *($2)
	*(($10 + [8])) = $7
	*($10 + [48]) = $4
	*($10 + [4]) = *($10 + [52])
	*($10) = *($10 + [48])
	CALL $54($0, $1, $10, $3)
	
.LABEL $label$17
	*([0] + [4]) = ($10 + [112])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [640])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [8]) = $0
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	$6 = CALL $88([88])
	CALL $59($6)
	*($6 + [72]) = $0
	CALL $60(($8 + [8]), $6)
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [8]) = $5
	$7 = *($6 + [76])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $61(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$0 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [72]))), [1392])
	$2 = ((int_64)*($1 + [64]) + (int_64)*($0))
	*($1 + [64]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [1472])
	CALL eosio_assert([1], [720])
	$0 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [688])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = (int_64)0
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	if ( ((int_64)*(*($0)) < (int_64)50001) ){ goto $label$1 }
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	
.LABEL $label$1
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($0 + [4])))
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($0 + [4])))
	*($1 + [48]) = (int_64))(*($1 + [48]) - *(*($0 + [4])))
	$2 = *($0 + [8])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [88]))), [976])
	$3 = (int_64)
	*($1 + [80]) = $3(*($1 + [80]) - *($2)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1056])
	$0 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [120]))), [1392])
	$3 = ((int_64)*($1 + [112]) + (int_64)*($0))
	*($1 + [112]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [112]) < (int_64)4611686018427387904), [1472])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1)
	CALL $58($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($5 + [72]) = ($5 + [64])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $53(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC $29 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	$1 = CALL current_time()
	*($0 + [80]) = (int_64)0
	*($0 + [64]) = $1
	*(($2 = ($0 + [88]))) = (int_64)1397703940
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [688])
	*(($2 = ($0 + [104]))) = (int_64)1397703940
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [688])
	*(($2 = ($0 + [120]))) = (int_64)1397703940
	*($0 + [112]) = (int_64)0
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [688])
	*(($2 = ($0 + [136]))) = (int_64)1397703940
	*($0 + [128]) = (int_64)0
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [688])
	*(($2 = ($0 + [152]))) = (int_64)1397703940
	*($0 + [144]) = (int_64)0
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [688])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $92($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [1360])
	$4 = *($2)
	$6 = *($3)
	$5 = CALL pow(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1 + [8]) - $6))) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)*($2 + [16])))
	*($1 + [8]) = (int_64))(*($1 + [8]) - $6)
	$6 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $4) * (float_64)((float_64)$5 + (float_64)(float_64)-1)))
	*($0) = $6
	*($2) = (int_64))(*($2) - $6)
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [720])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [688])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [448])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $88($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $92($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $89($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $24(*($1), ($0 + [32]))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $26 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	$1 = CALL current_time()
	*($0 + [48]) = (int_64)0
	*($0 + [40]) = $1
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [688])
	*(($2 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [688])
	*(($2 = ($0 + [88]))) = (int_64)1397703940
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [720])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [688])
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $70($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $91($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $88($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $91($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $89($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $90($7)
	return (unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $93(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $93(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $89(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $89(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($1 + [16]) = (int_64))(*($1 + [16]) - *(*($0)))
	*($1 + [40]) = CALL current_time()
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$2 = *(*($0 + [4]))
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [720])
	$4 = [0]
	$3 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [688])
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($1 + [56]))), [1392])
	$3 = ((int_64)*($1 + [48]) + (int_64)$2)
	*($1 + [48]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [1472])
	$4 = *($0 + [8])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [72]))), [1392])
	$3 = ((int_64)*($1 + [64]) + (int_64)*($4))
	*($1 + [64]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [1472])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1)
	CALL $65($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $25(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), ($0 + [32]))
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(*($0 + [4]))
	*($5 + [16]) = $2
	*($5 + [24]) = (int_64)22042220187046660
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [720])
	$3 = [0]
	$2 = (int_64)86102422605651
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [688])
	*(($5 + [8])) = *((($5 + [16]) + [8]))
	*($5) = *($5 + [16])
	CALL $54(($5 + [32]), $1, $5, (int_64)1397703940)
	*(($3 = *($0))) = *($5 + [32])
	*(($3 + [8])) = *((($5 + [32]) + [8]))
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $92($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [32]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [40]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [56]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [64]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($1 + [76]) = *(*($0 + [8]))
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1)
	if ( ((int_64)*(*($3)) < (int_64)50001) ){ goto $label$1 }
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	
.LABEL $label$1
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [4])))
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($3 + [4])))
	*($1 + [48]) = (int_64))(*($1 + [48]) - *(*($3 + [8])))
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [88]))), [976])
	$5 = (int_64)
	*($1 + [80]) = $5(*($1 + [80]) - *($3)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	$7 = $7
	$3 = ($7 + [-176])
	*([0] + [4]) = $3
	*($6 + [4]) = $3
	*($6) = $3
	*($6 + [8]) = ($7 + [-8])
	CALL $43($6, $1)
	CALL db_update_i64(*($1 + [172]), $2, $3, [168])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1)
	CALL $66($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($5 + [72]) = ($5 + [64])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $53(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $5, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $100 ()
{
	(unreachable)
}

void .FUNC $89 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10364])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10252])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10060]
	$1 = (((int_32)$2 * (int_32)[12]) + [10060])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10358]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10360])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10358]) = [1]
	$7 = ($7 << [16])
	*([0] + [10360]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10360])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10360]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10358]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10358]) = [1]
	$3 = ($3 << [16])
	*([0] + [10360]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10360])
	
.LABEL $label$8
	*([0] + [10360]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $86($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10272])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $85([1868], $0)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	*($0 + [96]) = $1
	*($0) = (int_64)0
	$1 = *($2 + [4])
	*($0 + [8]) = (int_64)0
	$1 = *($1)
	*($0 + [16]) = *($1 + [64])
	$3 = *($2)
	*($0 + [24]) = *($1 + [24])
	*($0 + [40]) = *($1 + [32])
	*($0 + [32]) = *($1 + [40])
	*($0 + [48]) = *($1 + [48])
	*($0 + [56]) = *($1 + [56])
	*($0 + [64]) = *($1 + [72])
	*($0 + [72]) = *($1 + [80])
	*($0 + [80]) = *($1 + [96])
	*($0 + [88]) = *($1 + [88])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $44(($5 + [96]), $0)
	$4 = *($0)
	*($0 + [100]) = CALL db_store_i64(*($3 + [8]), (int_64)7235159537265672192, *(*($2 + [8])), $4, $5, [96])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1232])
	$4 = CALL $88([88])
	$6 = CALL $59($4)
	*($4 + [72]) = $1
	*($4 + [8]) = (int_64)100000000000000
	*($4) = *(*(*($3) + [4]) + [8])
	*($4 + [16]) = (int_64)5280562163272995588
	$3 = *($3 + [4])
	$5 = *($3 + [8])
	*($4 + [32]) = (int_64)22042220187046660
	*($4 + [24]) = $5
	$5 = *($3 + [16])
	*($4 + [56]) = (int_64)1397703940
	*($4 + [48]) = $5
	*($8 + [88]) = (($8 + [16]) + [64])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $53(($8 + [80]), $6)
	$5 = *($4)
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)-7949128890230767616, $2, $5, ($8 + [16]), [64])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [76])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [80]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $61(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $89($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [208])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1232])
	$4 = CALL $88([184])
	$6 = CALL $29($4)
	*($4 + [168]) = $1
	*($4) = *(*(*($3) + [4]) + [8])
	$3 = *($3 + [4])
	$5 = *($3 + [8])
	*($4 + [24]) = $5
	*($4 + [40]) = $5
	$5 = *($3 + [16])
	*($4 + [80]) = $5
	*($4 + [96]) = $5
	*($8 + [200]) = (($8 + [16]) + [168])
	*($8 + [196]) = ($8 + [16])
	*($8 + [192]) = ($8 + [16])
	CALL $43(($8 + [192]), $6)
	$5 = *($4)
	*($4 + [172]) = CALL db_store_i64(*($1 + [8]), (int_64)7035924439720001536, $2, $5, ($8 + [16]), [168])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [192]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [172])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [192]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $31(($1 + [24]), ($8 + [192]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [192])
	*($8 + [192]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $89($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [208])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1232])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $88([112])
	CALL $83($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [100])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $33(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $89($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1)
	$5 = *($3 + [4])
	*(($6 = (($8 + [80]) + [12]))) = *(($5 + [12]))
	*(($7 = (($8 + [80]) + [8]))) = *(($5 + [8]))
	*($8 + [80]) = *($5)
	*($8 + [84]) = *(($5 + [4]))
	*(($8 + [12])) = *($6)
	*(($8 + [8])) = *($7)
	*($8 + [4]) = *($8 + [84])
	*($8) = *($8 + [80])
	CALL $54(($8 + [96]), $1, $8, (int_64)22042220187046660)
	*(*($3)) = *($8 + [96])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($8 + [104]) = (($8 + [16]) + [64])
	*($8 + [100]) = ($8 + [16])
	*($8 + [96]) = ($8 + [16])
	CALL $53(($8 + [96]), $1)
	CALL db_update_i64(*($1 + [76]), $2, ($8 + [16]), [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1)
	if ( ((int_64)*(*($3)) < (int_64)50001) ){ goto $label$1 }
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	
.LABEL $label$1
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [4])))
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($3 + [4])))
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3 + [8])))
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [88]))), [1392])
	$5 = ((int_64)*($1 + [80]) + (int_64)*($3))
	*($1 + [80]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1472])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	$7 = $7
	$3 = ($7 + [-176])
	*([0] + [4]) = $3
	*($6 + [4]) = $3
	*($6) = $3
	*($6 + [8]) = ($7 + [-8])
	CALL $43($6, $1)
	CALL db_update_i64(*($1 + [172]), $2, $3, [168])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1616])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $20($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [672])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $71 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [256])
	*([0] + [4]) = $16
	*($16 + [232]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1744])
	$8 = ($0 + [104])
	$10 = [0]
	$9 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $14($8, $9)
	
.LABEL $label$1
	*($16 + [224]) = $8
	$3 = *(($0 + [208]))
	$9 = *(($0 + [212]))
	*($16 + [228]) = $10
	$1 = *($10 + [8])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$2 }
	$10 = ($9 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$3:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$2 }
	$9 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$4 = ($0 + [184])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$5 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)$4), [192])
	goto $label$4 
	
.LABEL $label$5
	$9 = [0]
	$10 = CALL db_find_i64(*(($0 + [184])), *(($0 + [192])), (int_64)-7949128890230767616, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $34($4, $10)
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)$4), [192])
	
.LABEL $label$4
	$13 = *($2)
	$5 = *($2 + [8])
	*($16 + [216]) = $5
	$1 = ((int_64)((int_64)$13 + (int_64)199) / (int_64)200)
	*($16 + [208]) = $1
	*(($16 + [200])) = *($2 + [8])
	$11 = *($2)
	*($16 + [192]) = $11
	*($16 + [192]) = (int_64))($11 - $1)
	if ( ((int_64)$13 < (int_64)1) ){ goto $label$8 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)1
	$7 = (int_64))($1 - $6))
	$14 = *($0)
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [416]
	$12 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$14 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$8 = ($8 + [165])
	goto $label$12 
	
.LABEL $label$14
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$10
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$9 }
	*($16 + [144]) = $12
	*($16 + [136]) = $14
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [112]
	$12 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$20 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$8 = ($8 + [165])
	goto $label$18 
	
.LABEL $label$20
	$13 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$16
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$15 }
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$14 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$26 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$8 = ($8 + [165])
	goto $label$24 
	
.LABEL $label$26
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$22
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$21 }
	$1 = (int_64)0
	$13 = (int_64)59
	$10 = [1552]
	$15 = (int_64)0
	
.LOOP $label$27:
	$11 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$28 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$8 = ($8 + [165])
	goto $label$29 
	
.LABEL $label$30
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$28
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$11 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$27 }
	*(($16 + [80])) = [0]
	*($16 + [72]) = (int_64)0
	$10 = CALL strlen([1776])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$33 }
	*($16 + [72]) = ($10 << [1])
	$8 = (($16 + [72]) | [1])
	if ( $10 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$3 = (($10 + [16]) & [-16])
	$8 = CALL $88($3)
	*($16 + [72]) = ($3 | [1])
	*($16 + [80]) = $8
	*($16 + [76]) = $10
	
.LABEL $label$32
	CALL memcpy($8, [1776], $10)
	
.LABEL $label$31
	*(($8 + $10)) = [0]
	*(($16 + [112])) = $5
	*(($16 + [124])) = *($16 + [76])
	*($16 + [96]) = $15
	$10 = ($16 + [80])
	*(($16 + [128])) = *($10)
	*($16 + [88]) = *($0)
	*($16 + [104]) = $7
	*($16 + [120]) = *($16 + [72])
	*($16 + [72]) = [0]
	*($16 + [76]) = [0]
	*($10) = [0]
	$10 = CALL $18(($16 + [152]), ($16 + [136]), $12, $14, ($16 + [88]))
	CALL $19(($16 + [240]), $10)
	$8 = *($16 + [240])
	CALL send_inline($8, (*($16 + [244]) - $8))
	$8 = *($16 + [240])
	if ( ($8 == 0) ){ goto $label$34 }
	*($16 + [244]) = $8
	CALL $89($8)
	
.LABEL $label$34
	$8 = *($10 + [28])
	if ( ($8 == 0) ){ goto $label$35 }
	*(($10 + [32])) = $8
	CALL $89($8)
	
.LABEL $label$35
	$8 = *($10 + [16])
	if ( ($8 == 0) ){ goto $label$36 }
	*(($10 + [20])) = $8
	CALL $89($8)
	
.LABEL $label$36
	if ( ((*(($16 + [120])) & [1]) == 0) ){ goto $label$37 }
	CALL $89(*(($16 + [128])))
	
.LABEL $label$37
	if ( ((*($16 + [72]) & [1]) == 0) ){ goto $label$38 }
	CALL $89(*(($16 + [80])))
	
.LABEL $label$38
	if ( (int_64)($6 == 0) ){ goto $label$8 }
	$14 = *($0)
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [416]
	$12 = (int_64)0
	
.LOOP $label$39:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$44 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$8 = ($8 + [165])
	goto $label$42 
	
.LABEL $label$44
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$41
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$40
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$39 }
	*($16 + [144]) = $12
	*($16 + [136]) = $14
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [112]
	$12 = (int_64)0
	
.LOOP $label$45:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$50 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$8 = ($8 + [165])
	goto $label$48 
	
.LABEL $label$50
	$13 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$47
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$46
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$45 }
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$14 = (int_64)0
	
.LOOP $label$51:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$56 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$8 = ($8 + [165])
	goto $label$54 
	
.LABEL $label$56
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$55
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$52
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$51 }
	$1 = (int_64)0
	$13 = (int_64)59
	$10 = [1584]
	$15 = (int_64)0
	
.LOOP $label$57:
	$11 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$58 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$8 = ($8 + [165])
	goto $label$59 
	
.LABEL $label$60
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$58
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$11 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$57 }
	*(($16 + [80])) = [0]
	*($16 + [72]) = (int_64)0
	$10 = CALL strlen([1600])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$63 }
	*($16 + [72]) = ($10 << [1])
	$8 = (($16 + [72]) | [1])
	if ( $10 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$3 = (($10 + [16]) & [-16])
	$8 = CALL $88($3)
	*($16 + [72]) = ($3 | [1])
	*($16 + [80]) = $8
	*($16 + [76]) = $10
	
.LABEL $label$62
	CALL memcpy($8, [1600], $10)
	
.LABEL $label$61
	*(($8 + $10)) = [0]
	*(($16 + [112])) = $5
	*(($16 + [124])) = *($16 + [76])
	*($16 + [96]) = $15
	$10 = ($16 + [80])
	*(($16 + [128])) = *($10)
	*($16 + [88]) = *($0)
	*($16 + [104]) = $6
	*($16 + [120]) = *($16 + [72])
	*($16 + [72]) = [0]
	*($16 + [76]) = [0]
	*($10) = [0]
	$10 = CALL $18(($16 + [152]), ($16 + [136]), $12, $14, ($16 + [88]))
	CALL $19(($16 + [240]), $10)
	$8 = *($16 + [240])
	CALL send_inline($8, (*($16 + [244]) - $8))
	$8 = *($16 + [240])
	if ( ($8 == 0) ){ goto $label$64 }
	*($16 + [244]) = $8
	CALL $89($8)
	
.LABEL $label$64
	$8 = *($10 + [28])
	if ( ($8 == 0) ){ goto $label$65 }
	*(($10 + [32])) = $8
	CALL $89($8)
	
.LABEL $label$65
	$8 = *($10 + [16])
	if ( ($8 == 0) ){ goto $label$66 }
	*(($10 + [20])) = $8
	CALL $89($8)
	
.LABEL $label$66
	if ( ((*(($16 + [120])) & [1]) == 0) ){ goto $label$67 }
	CALL $89(*(($16 + [128])))
	
.LABEL $label$67
	if ( ((*($16 + [72]) & [1]) == 0) ){ goto $label$8 }
	CALL $89(*(($16 + [80])))
	
.LABEL $label$8
	*($16 + [92]) = ($16 + [192])
	*($16 + [88]) = ($16 + [136])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [368])
	CALL $72($4, $9, (int_64)0, ($16 + [88]))
	CALL eosio_assert(((int_64)*($16 + [136]) > (int_64)0), [1792])
	$1 = *(*($16 + [228]) + [8])
	$3 = *(($0 + [168]))
	$9 = *(($0 + [172]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$68 }
	$10 = ($9 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$69:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$68 }
	$9 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$69 }
	
.LABEL $label$68
	$8 = ($0 + [144])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$71 }
	$10 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [168]) == (int_32)$8), [192])
	goto $label$70 
	
.LABEL $label$71
	$10 = [0]
	$9 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$70 }
	$10 = CALL $15($8, $9)
	CALL eosio_assert(((int_32)*($10 + [168]) == (int_32)$8), [192])
	
.LABEL $label$70
	CALL eosio_assert((uint_64)(*($16 + [136]) <= ((int_64)((uint_64)*($10 + [40]) / (uint_64)(int_64)100) * (int_64)*($0 + [80]))), [1824])
	*($16 + [240]) = ((int_64)*($16 + [136]) / (int_64)100)
	*($16 + [92]) = ($16 + [240])
	*($16 + [88]) = ($16 + [192])
	*($16 + [96]) = ($16 + [136])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [368])
	CALL $73($8, $10, (int_64)0, ($16 + [88]))
	$1 = *($16 + [232])
	$13 = *($0)
	*($16 + [88]) = $13
	*($16 + [104]) = (int_64)-1
	*($16 + [112]) = [0]
	*($16 + [96]) = $1
	*((($16 + [88]) + [28])) = [0]
	*((($16 + [88]) + [32])) = [0]
	$10 = CALL db_find_i64($13, $1, (int_64)-3020376800539705344, *(*($16 + [228]) + [8]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$73 }
	$10 = CALL $16(($16 + [88]), $10)
	CALL eosio_assert(((int_32)*($10 + [96]) == (int_32)($16 + [88])), [192])
	CALL eosio_assert(((uint_64)((uint_64)(int_64))(CALL $fimport$3() - *($10 + [40])) / (uint_64)(int_64)1000000) > (uint_64)*($0 + [72])), [864])
	$1 = *($16 + [232])
	*($16 + [160]) = $2
	*($16 + [156]) = ($16 + [208])
	*($16 + [152]) = ($16 + [136])
	CALL eosio_assert([1], [368])
	CALL $74(($16 + [88]), $10, $1, ($16 + [152]))
	goto $label$72 
	
.LABEL $label$73
	$1 = *($16 + [232])
	*($16 + [168]) = $2
	*($16 + [156]) = ($16 + [232])
	*($16 + [152]) = ($16 + [224])
	*($16 + [160]) = ($16 + [136])
	*($16 + [164]) = ($16 + [208])
	CALL $75(($16 + [72]), ($16 + [88]), $1, ($16 + [152]))
	*($16 + [168]) = (int_64)-1
	$1 = *($0)
	*($16 + [152]) = $1
	*($16 + [160]) = *(*($16 + [228]) + [8])
	*($16 + [176]) = [0]
	*((($16 + [152]) + [28])) = [0]
	*((($16 + [152]) + [32])) = [0]
	*($16 + [64]) = ($16 + [232])
	CALL $76(($16 + [72]), ($16 + [152]), $1, ($16 + [64]))
	$9 = *($16 + [176])
	if ( ($9 == 0) ){ goto $label$72 }
	$4 = ($16 + [180])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$75 }
	
.LOOP $label$76:
	$10 = ($10 + [-24])
	$8 = *($10)
	*($10) = [0]
	if ( ($8 == 0) ){ goto $label$77 }
	CALL $89($8)
	
.LABEL $label$77
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$76 }
	$10 = *(($16 + [176]))
	goto $label$74 
	
.LABEL $label$75
	$10 = $9
	
.LABEL $label$74
	*($4) = $9
	CALL $89($10)
	
.LABEL $label$72
	$10 = (($16 + [192]) + [12])
	*((($16 + [48]) + [12])) = *($10)
	$9 = (($16 + [192]) + [8])
	*(($8 = (($16 + [48]) + [8]))) = *($9)
	$1 = *($16 + [232])
	*($16 + [48]) = *($16 + [192])
	*((($16 + [16]) + [8])) = *($8)
	*($16 + [16]) = *($16 + [48])
	CALL $38($0, $1, ($16 + [16]))
	*((($16 + [32]) + [12])) = *($10)
	*(($10 = (($16 + [32]) + [8]))) = *($9)
	$1 = *($16 + [232])
	*($16 + [32]) = *($16 + [192])
	*(($16 + [8])) = *($10)
	*($16) = *($16 + [32])
	CALL $39($0, $1, $16)
	$0 = *($16 + [112])
	if ( ($0 == 0) ){ goto $label$78 }
	$9 = ($16 + [116])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$80 }
	
.LOOP $label$81:
	$10 = ($10 + [-24])
	$8 = *($10)
	*($10) = [0]
	if ( ($8 == 0) ){ goto $label$82 }
	CALL $89($8)
	
.LABEL $label$82
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$81 }
	$10 = *(($16 + [112]))
	goto $label$79 
	
.LABEL $label$80
	$10 = $0
	
.LABEL $label$79
	*($9) = $0
	CALL $89($10)
	
.LABEL $label$78
	*([0] + [4]) = ($16 + [256])
	return (unreachable)
	
.LABEL $label$7
	CALL $90(($16 + [72]))
	
.LABEL $label$6
	CALL $90(($16 + [72]))
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1232])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $88([32])
	CALL $77($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $78(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $89($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = CALL current_time()
	*($0 + [16]) = $1
	*($0 + [8]) = $3
	*($0) = *(*(*($2 + [4])))
	$1 = *($2)
	CALL eosio_assert([1], [448])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-6030912142679474176, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [40]) = CALL current_time()
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$5 = *($3 + [4])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [56]))), [1392])
	$6 = ((int_64)*($1 + [48]) + (int_64)*($5))
	*($1 + [48]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [1472])
	$3 = *($3 + [8])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [88]))), [1392])
	$6 = ((int_64)*($1 + [80]) + (int_64)*($3))
	*($1 + [80]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1472])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($7 + [104]) = ($7 + [96])
	*($7 + [100]) = $7
	*($7 + [96]) = $7
	CALL $25(($7 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $7, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [112])
}

void .FUNC $39 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [192])
	*([0] + [4]) = $13
	*($13 + [168]) = $1
	$3 = ($0 + [104])
	$8 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $14($3, $6)
	
.LABEL $label$1
	*($13 + [160]) = $3
	$4 = *(($0 + [168]))
	$7 = *(($0 + [172]))
	*($13 + [164]) = $8
	$1 = *($8 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	$8 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$3:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$2 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = ($0 + [144])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [168]) == (int_32)$5), [192])
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $15($5, $8)
	CALL eosio_assert(((int_32)*($7 + [168]) == (int_32)$5), [192])
	
.LABEL $label$4
	$1 = ((uint_64)*($7 + [40]) / (uint_64)(int_64)100)
	if ( ((uint_64)*($7 + [32]) >= (uint_64)((int_64)((uint_64)*($7 + [24]) / (uint_64)(int_64)100) * (int_64)*($0 + [48]))) ){ goto $label$8 }
	if ( (uint_64)(*($7 + [48]) <= ((int_64)$1 * (int_64)*($0 + [56]))) ){ goto $label$7 }
	
.LABEL $label$8
	*(($8 = (($13 + [144]) + [8]))) = *(($2 + [8]))
	$1 = *($2)
	*($13 + [144]) = $1
	$1 = ((int_64)$1 * (int_64)*($0 + [32]))
	*($13 + [144]) = $1
	$9 = *($7 + [80])
	$11 = *(($7 + [88]))
	CALL eosio_assert(((int_64)*(($7 + [104])) == (int_64)$11), [976])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($9 - *($7 + [96]))) > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [1056])
	$12 = *($0 + [40])
	$10 = *($8)
	CALL eosio_assert(((int_64)$11 == (int_64)$10), [1088])
	$9 = ((int_64)$12 * (int_64)((int_64)$9 / (int_64)100))
	if ( ((int_64)$1 <= (int_64)$9) ){ goto $label$9 }
	*($8) = $11
	*($13 + [144]) = $9
	$10 = $11
	$1 = $9
	
.LABEL $label$9
	$11 = *($0 + [96])
	if ( ((uint_64)$1 <= (uint_64)$11) ){ goto $label$10 }
	*($13 + [144]) = $11
	$1 = $11
	
.LABEL $label$10
	$11 = *(($7 + [80]))
	$9 = *(($7 + [88]))
	CALL eosio_assert(((int_64)*(($7 + [104])) == (int_64)$9), [976])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($11 - *(($7 + [96])))) > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$10 == (int_64)$9), [976])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($11 - $1)) > (int_64)-4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [1056])
	$1 = (int_64)0
	CALL eosio_assert(((int_64)$11 > (int_64)0), [1168])
	*($13 + [136]) = $9
	*($13 + [128]) = $11
	$9 = ((int_64)*($7 + [56]) + (int_64)*(($7 + [48])))
	if ( (int_64)($9 == 0) ){ goto $label$11 }
	$11 = ((uint_64)$11 / (uint_64)$9)
	*($13 + [128]) = $11
	
.LABEL $label$11
	CALL eosio_assert(((int_64)$11 > (int_64)0), [1184])
	$12 = *($0)
	$9 = (int_64)59
	$8 = [416]
	$10 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$17 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$17
	$11 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$12 }
	*($13 + [80]) = $10
	*($13 + [72]) = $12
	$1 = (int_64)0
	$9 = (int_64)59
	$8 = [112]
	$10 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$23 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$6 = ($6 + [165])
	goto $label$21 
	
.LABEL $label$23
	$11 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$18 }
	$1 = (int_64)0
	$9 = (int_64)59
	$8 = [128]
	$12 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$29 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$6 = ($6 + [165])
	goto $label$27 
	
.LABEL $label$29
	$11 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$25
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$24 }
	*(($13 + [16])) = [0]
	*($13 + [8]) = (int_64)0
	$8 = CALL strlen([1216])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$32 }
	*($13 + [8]) = ($8 << [1])
	$6 = (($13 + [8]) | [1])
	if ( $8 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$4 = (($8 + [16]) & [-16])
	$6 = CALL $88($4)
	*($13 + [8]) = ($4 | [1])
	*($13 + [16]) = $6
	*($13 + [12]) = $8
	
.LABEL $label$31
	CALL memcpy($6, [1216], $8)
	
.LABEL $label$30
	*(($6 + $8)) = [0]
	*(($13 + [44])) = *($13 + [148])
	*($13 + [24]) = *($0)
	*($13 + [32]) = *($13 + [168])
	*(($13 + [52])) = *(($13 + [156]))
	*(($13 + [48])) = *((($13 + [144]) + [8]))
	*($13 + [40]) = *($13 + [144])
	$8 = (($13 + [8]) + [8])
	*(($13 + [64])) = *($8)
	*($13 + [56]) = *($13 + [8])
	*($13 + [8]) = [0]
	*($13 + [12]) = [0]
	*($8) = [0]
	$8 = CALL $18(($13 + [88]), ($13 + [72]), $10, $12, ($13 + [24]))
	CALL $19(($13 + [176]), $8)
	$6 = *($13 + [176])
	CALL send_inline($6, (*($13 + [180]) - $6))
	$6 = *($13 + [176])
	if ( ($6 == 0) ){ goto $label$33 }
	*($13 + [180]) = $6
	CALL $89($6)
	
.LABEL $label$33
	$6 = *($8 + [28])
	if ( ($6 == 0) ){ goto $label$34 }
	*(($8 + [32])) = $6
	CALL $89($6)
	
.LABEL $label$34
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$35 }
	*(($8 + [20])) = $6
	CALL $89($6)
	
.LABEL $label$35
	if ( ((*(($13 + [56])) & [1]) == 0) ){ goto $label$36 }
	CALL $89(*(($13 + [64])))
	
.LABEL $label$36
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$37 }
	CALL $89(*(($13 + [16])))
	
.LABEL $label$37
	*($13 + [28]) = ($13 + [144])
	*($13 + [24]) = ($13 + [128])
	*($13 + [32]) = ($13 + [168])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [368])
	CALL $40($5, $7, (int_64)0, ($13 + [24]))
	$8 = *($13 + [164])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [368])
	CALL $41($3, $8, (int_64)0, ($13 + [24]))
	$1 = *($0)
	*($13 + [28]) = $0
	*($13 + [24]) = ($13 + [160])
	CALL $42(($13 + [88]), $5, $1, ($13 + [24]))
	
.LABEL $label$7
	*([0] + [4]) = ($13 + [192])
	return (unreachable)
	
.LABEL $label$6
	CALL $90(($13 + [8]))
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [16]) = (int_64))(*($1 + [16]) - *(*($3)))
	$4 = *($1)
	*($1 + [40]) = CALL current_time()
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [72]))), [1392])
	$5 = ((int_64)*($1 + [64]) + (int_64)*($3))
	*($1 + [64]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [1472])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($6 + [104]) = ($6 + [96])
	*($6 + [100]) = $6
	*($6 + [96]) = $6
	CALL $25(($6 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $6, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [112])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [192])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1)
	CALL $57($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($5 + [184]) = ($5 + [168])
	*($5 + [180]) = $5
	*($5 + [176]) = $5
	CALL $43(($5 + [176]), $1)
	CALL db_update_i64(*($1 + [172]), $2, $5, [168])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [192])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $92($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*(*($4) + [4]) + [8])
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($4 + [8]))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$5 = *($4 + [12])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [56]))), [1392])
	$3 = ((int_64)*($1 + [48]) + (int_64)*($5))
	*($1 + [48]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [1472])
	$4 = *($4 + [16])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [88]))), [1392])
	$3 = ((int_64)*($1 + [80]) + (int_64)*($4))
	*($1 + [80]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1440])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1472])
	*($6 + [104]) = ($6 + [96])
	*($6 + [100]) = $6
	*($6 + [96]) = $6
	CALL $25(($6 + [96]), $1)
	$3 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020376800539705344, *(*($0 + [8])), $3, $6, [96])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [112])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $92($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $92($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}