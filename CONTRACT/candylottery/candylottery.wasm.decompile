(data (i32.const 4) "\f0f\00\00")
(data (i32.const 16) "init price must be positive.\00")
(data (i32.const 48) "only EOS support.\00")
(data (i32.const 80) "invalid token transfer.\00")
(data (i32.const 112) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 176) "whale already exists.\00")
(data (i32.const 208) "cannot create objects in table of another contract\00")
(data (i32.const 272) "write\00")
(data (i32.const 288) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 352) "invalid symbol name\00")
(data (i32.const 384) "error reading iterator\00")
(data (i32.const 416) "read\00")
(data (i32.const 432) "whale not found.\00")
(data (i32.const 464) "cannot pass end iterator to erase\00")
(data (i32.const 512) "cannot increment end iterator\00")
(data (i32.const 544) "object passed to erase is not in multi_index\00")
(data (i32.const 592) "cannot erase objects in table of another contract\00")
(data (i32.const 656) "attempt to remove object that was not in multi_index\00")
(data (i32.const 720) "BID:\00")
(data (i32.const 736) "wrong whale account name.\00")
(data (i32.const 768) "the bid is not start yet.\00")
(data (i32.const 800) "the bid already ended.\00")
(data (i32.const 832) "you already bidded.\00")
(data (i32.const 864) "multiplication overflow\00")
(data (i32.const 896) "multiplication underflow\00")
(data (i32.const 928) "divide by zero\00")
(data (i32.const 944) "signed division overflow\00")
(data (i32.const 976) "active\00")
(data (i32.const 992) "eosio.token\00")
(data (i32.const 1008) "transfer\00")
(data (i32.const 1024) "someone has a higher bid.\00")
(data (i32.const 1056) "bid reward.\00")
(data (i32.const 1072) "occollection\00")
(data (i32.const 1088) "bid income.\00")
(data (i32.const 1104) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1168) "not enough quantity to bid.\00")
(data (i32.const 1200) "object passed to modify is not in multi_index\00")
(data (i32.const 1248) "cannot modify objects in table of another contract\00")
(data (i32.const 1312) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1376) "onerror\00")
(data (i32.const 1392) "eosio\00")
(data (i32.const 1408) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 1472) "get\00")
(data (i32.const 9872) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "is_account" (func $fimport$12 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN10datebidderC2Ey" (func $5))
(export "_ZN10datebidder6createEyN5eosio5assetEyy" (func $6))
(export "_ZN10datebidder5closeEy" (func $12))
(export "_ZN10datebidder8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $14))
(export "apply" (func $22))
(export "malloc" (func $31))
(export "free" (func $34))
(export "isspace" (func $43))
(export "memchr" (func $44))
(export "strlen" (func $45))
(export "memcmp" (func $46))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $47 $14 $6 $12)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [272])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [272])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [272])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [272])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [272])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $30($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $38($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $35($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $38($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $36($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $37($7)
	return (unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $41(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $41(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $36(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $36(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [272])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [272])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [272])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [272])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [272])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [272])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $21(*($1), ($0 + [32]))
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [288])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [352])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $27(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $28(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $36(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1376]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1392]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [1408])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [992]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$16 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$14 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1008]
	$9 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$27 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$22 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [64])) = $0
	*(($11 + [72])) = (int_64)-1
	*(($11 + [80])) = (int_64)0
	*(($11 + [88])) = [0]
	*($11 + [56]) = $0
	*($11 + [48]) = $0
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)4929617502180212736) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$28 }
	*($11 + [44]) = [0]
	*($11 + [40]) = [1]
	*($11) = *($11 + [40])
	CALL $23(($11 + [48]), $11)
	goto $label$28 
	
.LABEL $label$30
	*($11 + [36]) = [0]
	*($11 + [32]) = [2]
	*($11 + [8 align=4]) = *($11 + [32])
	CALL $24(($11 + [48]), ($11 + [8]))
	goto $label$28 
	
.LABEL $label$29
	*($11 + [28]) = [0]
	*($11 + [24]) = [3]
	*($11 + [16 align=4]) = *($11 + [24])
	CALL $25(($11 + [48]), ($11 + [16]))
	
.LABEL $label$28
	$4 = *(($11 + [80]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [84])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$32 }
	
.LOOP $label$33:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$34 }
	CALL $36($3)
	
.LABEL $label$34
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$33 }
	$6 = *(($11 + [80]))
	goto $label$31 
	
.LABEL $label$32
	$6 = $4
	
.LABEL $label$31
	*($5) = $4
	CALL $36($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [96])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [416])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [112])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = [0]
	$7 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $3)
	
.LABEL $label$1
	*(($11 + [40])) = (int_64)1397703940
	*($11 + [32]) = (int_64)0
	*($11 + [24]) = (int_64)0
	CALL eosio_assert([1], [288])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [352])
	*($11 + [56]) = (int_64)0
	*($11 + [48]) = (int_64)0
	*($11 + [100]) = $7
	*($11 + [96]) = $7
	*($11 + [104]) = ($7 + $3)
	*($11 + [64]) = ($11 + [96])
	*($11 + [80]) = ($11 + [24])
	CALL $26(($11 + [80]), ($11 + [64]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	*(($1 = (($11 + [64]) + [8]))) = *(($11 + [40]))
	$8 = *($11 + [24])
	*($11 + [64]) = *($11 + [32])
	$5 = *(($11 + [56]))
	$4 = *(($11 + [48]))
	*((($11 + [80]) + [8])) = *($1)
	*($11 + [80]) = *($11 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$10 = *((*($1) + $10))
	
.LABEL $label$9
	$6 = *((($11 + [80]) + [8]))
	*((($11 + [96]) + [8])) = $6
	*((($11 + [8]) + [8])) = $6
	$6 = *($11 + [80])
	*($11 + [96]) = $6
	*($11 + [8]) = $6
	CALL void $1((int_32 $8), (int_64 ($11 + [8])), (int_32 $4), (int_64 $5), (int_64 $10))
	*([0] + [4]) = ($11 + [112])
	return [1]
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $29(*($1), ($0 + [32]))
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $35($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $35($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $40 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $47 ()
{
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $8 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [352])
	*($0 + [48]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	CALL eosio_assert([1], [288])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [352])
	return $0
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [272])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [272])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [272])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [272])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [272])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [272])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [272])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [272])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [272])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN10datebidder6createEyN5eosio5assetEyy (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [112])
	*([0] + [4]) = $12
	CALL require_auth(*($0))
	$9 = *($2)
	CALL eosio_assert(((int_64)$9 > (int_64)0), [16])
	$8 = *($2 + [8])
	CALL eosio_assert(((int_64)$8 == (int_64)1397703940), [48])
	$7 = [0]
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [80])
	$5 = *(($0 + [32]))
	$11 = *(($0 + [36]))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$6 }
	$10 = ($11 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$7:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$6 }
	$11 = $10
	$7 = ($10 + [-24])
	$10 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = ($0 + [8])
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$9 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)$7), [112])
	$6 = ($0 + [16])
	goto $label$8 
	
.LABEL $label$9
	$10 = [0]
	$6 = ($0 + [16])
	$11 = CALL db_find_i64(*(($0 + [8])), *($6), (int_64)8526756653867991040, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $7($7, $11)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)$7), [112])
	
.LABEL $label$8
	CALL eosio_assert(($10 == 0), [176])
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [208])
	$10 = CALL $35([88])
	$11 = CALL $8($10)
	*($10 + [72]) = $7
	*($10) = $1
	*(($10 + [20])) = *(($2 + [12]))
	*(($10 + [16])) = *(($2 + [8]))
	*(($10 + [12])) = *(($2 + [4]))
	*($10 + [8]) = *($2)
	*($10 + [24]) = $3
	*($10 + [32]) = $4
	*($12 + [104]) = (($12 + [16]) + [72])
	*($12 + [100]) = ($12 + [16])
	*($12 + [96]) = ($12 + [16])
	CALL $9(($12 + [96]), $11)
	$9 = *($10)
	$11 = CALL db_store_i64(*($6), (int_64)8526756653867991040, $8, $9, ($12 + [16]), [72])
	*($10 + [76]) = $11
	$7 = ($0 + [24])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$10 }
	*($7) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($12 + [96]) = $10
	$9 = *($10)
	*($12 + [16]) = $9
	*($12 + [12]) = $11
	$6 = ($0 + [36])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [40]))) ){ goto $label$12 }
	*($7 + [8]) = $9
	*($7 + [16]) = $11
	*($12 + [96]) = [0]
	*($7) = $10
	*($6) = ($7 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $10(($0 + [32]), ($12 + [96]), ($12 + [16]), ($12 + [12]))
	
.LABEL $label$11
	$10 = *($12 + [96])
	*($12 + [96]) = [0]
	if ( ($10 == 0) ){ goto $label$13 }
	CALL $36($10)
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [112])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [384])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $35([88])
	$4 = CALL $8($6)
	*($6 + [72]) = $0
	CALL $11(($8 + [32]), $4)
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $10(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $36($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN10datebidderC2Ey (int_32 $0, int_64 $1)
{
	*($0 + [8]) = $1
	*($0) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	return $0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN10datebidder8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [256])
	*([0] + [4]) = $19
	$15 = *($0)
	if ( ((int_64)$15 == (int_64)$1) ){ goto $label$5 }
	if ( ((int_64)$15 != (int_64)$2) ){ goto $label$5 }
	CALL require_auth($1)
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$5 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$5 }
	$14 = *($4)
	if ( ($14 & [1]) ){ goto $label$7 }
	$11 = uint_32($14 >> [1])
	$12 = ($4 + [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	$12 = *($4 + [8])
	
.LABEL $label$6
	$14 = CALL strlen([720])
	if ( ($14 == 0) ){ goto $label$8 }
	if ( ((int_32)$11 < (int_32)$14) ){ goto $label$5 }
	$5 = ($12 + $11)
	$6 = $12
	
.LOOP $label$9:
	$11 = (($11 - $14) + [1])
	if ( ($11 == 0) ){ goto $label$5 }
	$11 = CALL memchr($6, [66], $11)
	if ( ($11 == 0) ){ goto $label$5 }
	if ( (CALL memcmp($11, [720], $14) == 0) ){ goto $label$10 }
	$6 = ($11 + [1])
	$11 = ($5 - $6)
	if ( ((int_32)$11 >= (int_32)$14) ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$10
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$5 }
	if ( ((int_32)($11 - $12) == (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$8
	$2 = *($3)
	CALL eosio_assert(((int_64)$2 > (int_64)0), [16])
	$11 = [0]
	if ( ((uint_64)((int_64)$2 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$2 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$11 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$11 = [0]
	
.LABEL $label$11
	CALL eosio_assert($11, [80])
	$14 = *($4)
	if ( ($14 & [1]) ){ goto $label$17 }
	$6 = uint_32($14 >> [1])
	$12 = ($4 + [1])
	goto $label$16 
	
.LABEL $label$17
	$6 = *($4 + [4])
	$12 = *($4 + [8])
	
.LABEL $label$16
	$11 = CALL strlen([720])
	if ( ($11 == 0) ){ goto $label$19 }
	$5 = ($12 + $6)
	$14 = $5
	if ( ((int_32)$6 < (int_32)$11) ){ goto $label$20 }
	$14 = $12
	
.LOOP $label$22:
	$6 = (($6 - $11) + [1])
	if ( ($6 == 0) ){ goto $label$21 }
	$14 = CALL memchr($14, [66], $6)
	if ( ($14 == 0) ){ goto $label$21 }
	if ( (CALL memcmp($14, [720], $11) == 0) ){ goto $label$20 }
	$14 = ($14 + [1])
	$6 = ($5 - $14)
	if ( ((int_32)$6 >= (int_32)$11) ){ goto $label$22 }
	
.LABEL $label$21
	$14 = $5
	
.LABEL $label$20
	$14 = ( [-1] ? ($14 - $12) : ((int_32)$14 == (int_32)$5) )
	goto $label$18 
	
.LABEL $label$19
	$14 = [0]
	
.LABEL $label$18
	CALL $42(($19 + [144]), $4, ($14 + [4]), [-1], $4)
	$6 = *($19 + [144])
	$14 = ($6 & [1])
	$5 = (($19 + [144]) | [1])
	$12 = *($19 + [152])
	$11 = ( $12 ? $5 : $14 )
	$4 = $11
	$14 = ( *($19 + [148]) ? uint_32($6 >> [1]) : $14 )
	if ( ($14 == 0) ){ goto $label$23 }
	$6 = ($11 + $14)
	$4 = $11
	
.LOOP $label$25:
	if ( (CALL isspace(*($4)) == 0) ){ goto $label$24 }
	$4 = ($4 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$25 }
	$4 = $6
	
.LABEL $label$24
	$12 = *(($19 + [152]))
	$6 = *($19 + [144])
	
.LABEL $label$23
	CALL $39(($19 + [144]), ($11 - ( $12 ? $5 : ($6 & [1]) )), ($4 - $11))
	$13 = *($19 + [148])
	$4 = ( $13 ? uint_32($14 >> [1]) : $4 )
	$14 = *($19 + [144])
	$4 = ($14 & [1])
	$10 = ($19 + [152])
	$12 = *($10)
	$6 = ( $12 ? $5 : $4 )
	$11 = ($6 + $4)
	if ( ($4 == 0) ){ goto $label$26 }
	
.LOOP $label$28:
	$14 = (($6 + $4) + [-1])
	if ( (CALL isspace(*($14)) == 0) ){ goto $label$27 }
	$11 = $14
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$28 }
	
.LABEL $label$27
	$12 = *(($19 + [152]))
	$13 = *($19 + [148])
	$14 = *($19 + [144])
	
.LABEL $label$26
	$4 = ($14 & [1])
	$6 = ( $12 ? $5 : $4 )
	CALL $39(($19 + [144]), ($11 - $6), (($6 + ( $13 ? uint_32(($14 & [254]) >> [1]) : $4 )) - $11))
	$4 = ( *($10) ? $5 : (*($19 + [144]) & [1]) )
	$14 = [-1]
	
.LOOP $label$29:
	$11 = ($4 + $14)
	$6 = ($14 + [1])
	$14 = $6
	if ( *(($11 + [1])) ){ goto $label$29 }
	$17 = (CASTING uint_64)(uint_32 $6)
	$2 = (int_64)0
	$15 = (int_64)59
	$7 = (int_64)0
	
.LOOP $label$30:
	$16 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$17) ){ goto $label$31 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$14 = ($14 + [165])
	goto $label$32 
	
.LABEL $label$33
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$35 }
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$34 
	
.LABEL $label$35
	$16 = ((int_64)$16 & (int_64)15)
	
.LABEL $label$34
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$16 | (int_64)$7)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$30 }
	CALL eosio_assert(CALL $fimport$12($7), [736])
	$5 = *(($0 + [32]))
	$11 = *(($0 + [36]))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$36 }
	$4 = ($11 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$37:
	if ( ((int_64)*(*($4)) == (int_64)$7) ){ goto $label$36 }
	$11 = $4
	$14 = ($4 + [-24])
	$4 = $14
	if ( ((int_32)($14 + $6) != (int_32)[-24]) ){ goto $label$37 }
	
.LABEL $label$36
	$6 = ($0 + [8])
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$39 }
	$11 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)$6), [112])
	goto $label$38 
	
.LABEL $label$39
	$11 = [0]
	$4 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)8526756653867991040, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$38 }
	$11 = CALL $7($6, $4)
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)$6), [112])
	
.LABEL $label$38
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [432])
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)*($11 + [32])), [768])
	if ( (int_64)(*($11 + [40]) == 0) ){ goto $label$47 }
	CALL eosio_assert(((uint_64)((int_64)*($11 + [24]) + (int_64)*($11 + [64])) > (uint_64)((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [800])
	CALL eosio_assert(((int_64)*(($11 + [40])) != (int_64)$1), [832])
	$2 = (int_64)0
	$15 = *($11 + [48])
	CALL __multi3(($19 + [56]), $15, (int_64)$15 >> (int_64)63), (int_64)130, (int_64)0)
	$8 = *(($11 + [56]))
	$15 = *(($19 + [64]))
	$16 = *($19 + [56])
	CALL eosio_assert(( (uint_64)($16 <= (int_64)4611686018427387904) ? ((int_64)$15 < (int_64)0) : (int_64)($15 == 0) ), [864])
	CALL eosio_assert(( ((uint_64)$16 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$15 > (int_64)-1) : ((int_64)$15 == (int_64)-1) ), [896])
	CALL eosio_assert([1], [928])
	CALL eosio_assert([1], [944])
	$9 = ((int_64)$16 / (int_64)100)
	$18 = *($0)
	$16 = (int_64)59
	$4 = [976]
	$17 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$53 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$14 = ($14 + [165])
	goto $label$51 
	
.LABEL $label$53
	$15 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$49
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$15 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$48 }
	*($19 + [96]) = $17
	*($19 + [88]) = $18
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [992]
	$17 = (int_64)0
	
.LOOP $label$54:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$59 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$14 = ($14 + [165])
	goto $label$57 
	
.LABEL $label$59
	$15 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$55
	$4 = ($4 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$17 = ((int_64)$15 | (int_64)$17)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$54 }
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [1008]
	$18 = (int_64)0
	
.LOOP $label$60:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$65 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$14 = ($14 + [165])
	goto $label$63 
	
.LABEL $label$65
	$15 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$64
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$62
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$61
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$15 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$60 }
	$2 = *(($11 + [48]))
	CALL __multi3(($19 + [40]), $2, (int_64)$2 >> (int_64)63), (int_64)120, (int_64)0)
	$16 = *(($11 + [56]))
	$2 = *((($19 + [40]) + [8]))
	$15 = *($19 + [40])
	CALL eosio_assert(( (uint_64)($15 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [864])
	CALL eosio_assert(( ((uint_64)$15 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [896])
	CALL eosio_assert([1], [928])
	CALL eosio_assert([1], [944])
	*((($19 + [72]) + [8])) = [0]
	*($19 + [72]) = (int_64)0
	$2 = ((int_64)$15 / (int_64)100)
	$4 = CALL strlen([1024])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$46 }
	*($19 + [72]) = ($4 << [1])
	$14 = (($19 + [72]) | [1])
	if ( $4 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$8 = *(($11 + [16]))
	$9 = *($11 + [8])
	$18 = *($0)
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [976]
	$17 = (int_64)0
	
.LOOP $label$66:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$71 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$14 = ($14 + [165])
	goto $label$69 
	
.LABEL $label$71
	$15 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$70
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$68
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$67
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$15 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$66 }
	*($19 + [96]) = $17
	*($19 + [88]) = $18
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [992]
	$17 = (int_64)0
	
.LOOP $label$72:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$77 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$14 = ($14 + [165])
	goto $label$75 
	
.LABEL $label$77
	$15 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$74
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$73
	$4 = ($4 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$17 = ((int_64)$15 | (int_64)$17)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$72 }
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [1008]
	$18 = (int_64)0
	
.LOOP $label$78:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$83 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$14 = ($14 + [165])
	goto $label$81 
	
.LABEL $label$83
	$15 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$82
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$80
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$79
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$15 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$78 }
	*((($19 + [72]) + [8])) = [0]
	*($19 + [72]) = (int_64)0
	$4 = CALL strlen([1056])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	$14 = ($11 + [8])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$43 }
	*($19 + [72]) = ($4 << [1])
	$5 = (($19 + [72]) | [1])
	if ( $4 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$46
	$5 = (($4 + [16]) & [-16])
	$14 = CALL $35($5)
	*($19 + [72]) = ($5 | [1])
	*($19 + [80]) = $14
	*($19 + [76]) = $4
	
.LABEL $label$45
	CALL memcpy($14, [1024], $4)
	
.LABEL $label$44
	*(($14 + $4)) = [0]
	$15 = *(($11 + [40]))
	*(($19 + [184])) = $16
	*(($19 + [196])) = *($19 + [76 align=4])
	*($19 + [160]) = *($0)
	*($19 + [168]) = $15
	*($19 + [176]) = $2
	*($19 + [192]) = *($19 + [72])
	*($19 + [72]) = [0]
	*($19 + [76]) = [0]
	*(($19 + [80])) = [0]
	$4 = CALL $15(($19 + [104]), ($19 + [88]), $17, $18, ($19 + [160]))
	CALL $16(($19 + [240]), $4)
	$14 = *($19 + [240])
	CALL send_inline($14, (*($19 + [244]) - $14))
	$14 = *($19 + [240])
	if ( ($14 == 0) ){ goto $label$84 }
	*($19 + [244]) = $14
	CALL $36($14)
	
.LABEL $label$84
	$14 = *($4 + [28])
	if ( ($14 == 0) ){ goto $label$85 }
	*(($4 + [32])) = $14
	CALL $36($14)
	
.LABEL $label$85
	$14 = *($4 + [16])
	if ( ($14 == 0) ){ goto $label$86 }
	*(($4 + [20])) = $14
	CALL $36($14)
	
.LABEL $label$86
	if ( ((*(($19 + [192])) & [1]) == 0) ){ goto $label$87 }
	CALL $36(*(($19 + [200])))
	
.LABEL $label$87
	if ( ((*($19 + [72]) & [1]) == 0) ){ goto $label$88 }
	CALL $36(*(($19 + [80])))
	
.LABEL $label$88
	$18 = *($0)
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [976]
	$17 = (int_64)0
	
.LOOP $label$89:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$94 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$93 }
	$14 = ($14 + [165])
	goto $label$92 
	
.LABEL $label$94
	$15 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$93
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$92
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$91
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$90
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$15 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$89 }
	*($19 + [96]) = $17
	*($19 + [88]) = $18
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [992]
	$17 = (int_64)0
	
.LOOP $label$95:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$100 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$99 }
	$14 = ($14 + [165])
	goto $label$98 
	
.LABEL $label$100
	$15 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$99
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$98
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$97
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$96
	$4 = ($4 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$17 = ((int_64)$15 | (int_64)$17)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$95 }
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [1008]
	$18 = (int_64)0
	
.LOOP $label$101:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$106 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$14 = ($14 + [165])
	goto $label$104 
	
.LABEL $label$106
	$15 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$105
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$103
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$102
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$15 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$101 }
	$2 = *(($11 + [48]))
	CALL __multi3(($19 + [24]), $2, (int_64)$2 >> (int_64)63), (int_64)5, (int_64)0)
	$16 = *(($11 + [56]))
	$2 = *((($19 + [24]) + [8]))
	$15 = *($19 + [24])
	CALL eosio_assert(( (uint_64)($15 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [864])
	CALL eosio_assert(( ((uint_64)$15 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [896])
	CALL eosio_assert([1], [928])
	CALL eosio_assert([1], [944])
	*((($19 + [72]) + [8])) = [0]
	*($19 + [72]) = (int_64)0
	$2 = ((int_64)$15 / (int_64)100)
	$4 = CALL strlen([1056])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$109 }
	*($19 + [72]) = ($4 << [1])
	$14 = (($19 + [72]) | [1])
	if ( $4 ){ goto $label$108 }
	goto $label$107 
	
.LABEL $label$109
	$5 = (($4 + [16]) & [-16])
	$14 = CALL $35($5)
	*($19 + [72]) = ($5 | [1])
	*($19 + [80]) = $14
	*($19 + [76]) = $4
	
.LABEL $label$108
	CALL memcpy($14, [1056], $4)
	
.LABEL $label$107
	*(($14 + $4)) = [0]
	*(($19 + [184])) = $16
	*(($19 + [196])) = *($19 + [76])
	*($19 + [168]) = $7
	$4 = ($19 + [80])
	*(($19 + [200])) = *($4)
	*($19 + [160]) = *($0)
	*($19 + [176]) = $2
	*($19 + [192]) = *($19 + [72])
	*($19 + [72]) = [0]
	*($19 + [76]) = [0]
	*($4) = [0]
	$4 = CALL $15(($19 + [104]), ($19 + [88]), $17, $18, ($19 + [160]))
	CALL $16(($19 + [240]), $4)
	$14 = *($19 + [240])
	CALL send_inline($14, (*($19 + [244]) - $14))
	$14 = *($19 + [240])
	if ( ($14 == 0) ){ goto $label$110 }
	*($19 + [244]) = $14
	CALL $36($14)
	
.LABEL $label$110
	$14 = *($4 + [28])
	if ( ($14 == 0) ){ goto $label$111 }
	*(($4 + [32])) = $14
	CALL $36($14)
	
.LABEL $label$111
	$14 = *($4 + [16])
	if ( ($14 == 0) ){ goto $label$112 }
	*(($4 + [20])) = $14
	CALL $36($14)
	
.LABEL $label$112
	if ( ((*(($19 + [192])) & [1]) == 0) ){ goto $label$113 }
	CALL $36(*(($19 + [200])))
	
.LABEL $label$113
	if ( ((*($19 + [72]) & [1]) == 0) ){ goto $label$114 }
	CALL $36(*(($19 + [80])))
	
.LABEL $label$114
	$17 = *($0)
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [976]
	$7 = (int_64)0
	
.LOOP $label$115:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$120 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$119 }
	$14 = ($14 + [165])
	goto $label$118 
	
.LABEL $label$120
	$15 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$118
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$117
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$116
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$15 | (int_64)$7)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$115 }
	*($19 + [96]) = $7
	*($19 + [88]) = $17
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [992]
	$7 = (int_64)0
	
.LOOP $label$121:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$126 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$125 }
	$14 = ($14 + [165])
	goto $label$124 
	
.LABEL $label$126
	$15 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$125
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$124
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$123
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$122
	$4 = ($4 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$7 = ((int_64)$15 | (int_64)$7)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$121 }
	$2 = (int_64)0
	$16 = (int_64)59
	$4 = [1008]
	$17 = (int_64)0
	
.LOOP $label$127:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$132 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$131 }
	$14 = ($14 + [165])
	goto $label$130 
	
.LABEL $label$132
	$15 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$129 }
	goto $label$128 
	
.LABEL $label$131
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$130
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$129
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$128
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$15 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$127 }
	$2 = (int_64)0
	$15 = (int_64)59
	$4 = [1072]
	$18 = (int_64)0
	
.LOOP $label$133:
	$16 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$134 }
	$14 = *($4)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$136 }
	$14 = ($14 + [165])
	goto $label$135 
	
.LABEL $label$136
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$135
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($14 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$134
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$16 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$133 }
	$2 = *(($11 + [48]))
	CALL __multi3(($19 + [8]), $2, (int_64)$2 >> (int_64)63), (int_64)5, (int_64)0)
	$16 = *(($11 + [56]))
	$2 = *((($19 + [8]) + [8]))
	$15 = *($19 + [8])
	CALL eosio_assert(( (uint_64)($15 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [864])
	CALL eosio_assert(( ((uint_64)$15 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [896])
	CALL eosio_assert([1], [928])
	CALL eosio_assert([1], [944])
	*((($19 + [72]) + [8])) = [0]
	*($19 + [72]) = (int_64)0
	$2 = ((int_64)$15 / (int_64)100)
	$4 = CALL strlen([1088])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$139 }
	*($19 + [72]) = ($4 << [1])
	$14 = (($19 + [72]) | [1])
	if ( $4 ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$139
	$5 = (($4 + [16]) & [-16])
	$14 = CALL $35($5)
	*($19 + [72]) = ($5 | [1])
	*($19 + [80]) = $14
	*($19 + [76]) = $4
	
.LABEL $label$138
	CALL memcpy($14, [1088], $4)
	
.LABEL $label$137
	*(($14 + $4)) = [0]
	*(($19 + [184])) = $16
	*(($19 + [196])) = *($19 + [76])
	*($19 + [168]) = $18
	$4 = ($19 + [80])
	*(($19 + [200])) = *($4)
	*($19 + [160]) = *($0)
	*($19 + [176]) = $2
	*($19 + [192]) = *($19 + [72])
	*($19 + [72]) = [0]
	*($19 + [76]) = [0]
	*($4) = [0]
	$4 = CALL $15(($19 + [104]), ($19 + [88]), $7, $17, ($19 + [160]))
	CALL $16(($19 + [240]), $4)
	$14 = *($19 + [240])
	CALL send_inline($14, (*($19 + [244]) - $14))
	$14 = *($19 + [240])
	if ( ($14 == 0) ){ goto $label$140 }
	*($19 + [244]) = $14
	CALL $36($14)
	
.LABEL $label$140
	$14 = *($4 + [28])
	if ( ($14 == 0) ){ goto $label$141 }
	*(($4 + [32])) = $14
	CALL $36($14)
	
.LABEL $label$141
	$14 = *($4 + [16])
	if ( ($14 == 0) ){ goto $label$142 }
	*(($4 + [20])) = $14
	CALL $36($14)
	
.LABEL $label$142
	if ( ((*(($19 + [192])) & [1]) == 0) ){ goto $label$143 }
	CALL $36(*(($19 + [200])))
	
.LABEL $label$143
	if ( ((*($19 + [72]) & [1]) == 0) ){ goto $label$40 }
	CALL $36(*(($19 + [80])))
	goto $label$40 
	
.LABEL $label$43
	$12 = (($4 + [16]) & [-16])
	$5 = CALL $35($12)
	*($19 + [72]) = ($12 | [1])
	*($19 + [80]) = $5
	*($19 + [76]) = $4
	
.LABEL $label$42
	CALL memcpy($5, [1056], $4)
	
.LABEL $label$41
	*(($5 + $4)) = [0]
	*($19 + [168]) = $7
	*(($19 + [188])) = *(($14 + [12]))
	*(($19 + [184])) = *(($14 + [8]))
	*(($19 + [180])) = *(($14 + [4]))
	*($19 + [160]) = *($0)
	*($19 + [176]) = *($14)
	$4 = (($19 + [72]) + [8])
	*(($19 + [200])) = *($4)
	*($19 + [192]) = *($19 + [72])
	*($19 + [72]) = [0]
	*($19 + [76]) = [0]
	*($4) = [0]
	$4 = CALL $15(($19 + [104]), ($19 + [88]), $17, $18, ($19 + [160]))
	CALL $16(($19 + [240]), $4)
	$14 = *($19 + [240])
	CALL send_inline($14, (*($19 + [244]) - $14))
	$14 = *($19 + [240])
	if ( ($14 == 0) ){ goto $label$144 }
	*($19 + [244]) = $14
	CALL $36($14)
	
.LABEL $label$144
	$14 = *($4 + [28])
	if ( ($14 == 0) ){ goto $label$145 }
	*(($4 + [32])) = $14
	CALL $36($14)
	
.LABEL $label$145
	$14 = *($4 + [16])
	if ( ($14 == 0) ){ goto $label$146 }
	*(($4 + [20])) = $14
	CALL $36($14)
	
.LABEL $label$146
	if ( ((*(($19 + [192])) & [1]) == 0) ){ goto $label$147 }
	CALL $36(*(($19 + [200])))
	
.LABEL $label$147
	if ( ((*($19 + [72]) & [1]) == 0) ){ goto $label$40 }
	CALL $36(*(($19 + [80])))
	
.LABEL $label$40
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)$8), [1104])
	CALL eosio_assert(((int_64)*($3) >= (int_64)$9), [1168])
	$15 = *($0)
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)$6), [1200])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [1248])
	*(($11 + [40])) = $1
	$2 = *($11)
	$16 = CALL current_time()
	*(($11 + [48])) = $9
	*(($11 + [56])) = $8
	*(($11 + [64])) = ((int_64)((uint_64)$16 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$2 == (int_64)*($11)), [1312])
	*($19 + [112]) = (($19 + [160]) + [72])
	*($19 + [108]) = ($19 + [160])
	*($19 + [104]) = ($19 + [160])
	CALL $9(($19 + [104]), $11)
	CALL db_update_i64(*($11 + [76]), $15, ($19 + [160]), [72])
	$4 = ($0 + [24])
	if ( (uint_64)($2 <= *($4)) ){ goto $label$148 }
	*($4) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$148
	if ( ((*($19 + [144]) & [1]) == 0) ){ goto $label$5 }
	CALL $36(*(($19 + [152])))
	
.LABEL $label$5
	*([0] + [4]) = ($19 + [256])
	return (unreachable)
	
.LABEL $label$4
	CALL $37(($19 + [72]))
	
.LABEL $label$3
	CALL $37(($19 + [72]))
	
.LABEL $label$2
	CALL $37(($19 + [72]))
	
.LABEL $label$1
	CALL $37(($19 + [72]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $35([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $17($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $20(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $17($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [272])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [272])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $19(CALL $18($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $35($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $40($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $36($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $35(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $36($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $36($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN10datebidder5closeEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$4), [112])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $7($4, $6)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$4), [112])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [432])
	CALL eosio_assert($6, [464])
	CALL eosio_assert($6, [512])
	$6 = CALL db_next_i64(*($5 + [76]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $7($4, $6)
	
.LABEL $label$5
	CALL $13($4, $5)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [544])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [592])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [656])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $36($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $36($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

void .FUNC $36 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $37 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9860])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9668]
	$1 = (((int_32)$2 * (int_32)[12]) + [9668])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9964])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $33($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9872])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9958]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9960])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9958]) = [1]
	$7 = ($7 << [16])
	*([0] + [9960]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9960])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9960]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9958]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9958]) = [1]
	$3 = ($3 << [16])
	*([0] + [9960]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9960])
	
.LABEL $label$8
	*([0] + [9960]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1472])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $17($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [416])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $32([1476], $0)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $35(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $36($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}