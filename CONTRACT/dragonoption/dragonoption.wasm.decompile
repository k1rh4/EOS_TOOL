(data (i32.const 8192) "unexpected error in fixed_bytes constructor\00failed to allocate pages\00\00\01\02\04\07\03\06\05\00read_transaction failed\00")
(data (i32.const 8294) "write\00stoi\00%x\00")
(data (i32.const 8320) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 8448) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8705) "stoull\00;\00")
(data (i32.const 8714) "%d\00purchase_pair_price must be greater than 0\00")
(data (i32.const 8760) "%u\00pair_price_timestamp must be greater than 0\00")
(data (i32.const 8807) "%llu\00contract is not involved in this transfer\00")
(data (i32.const 8854) ": no conversion\00\' must not exceed \00")
(data (i32.const 8889) ": out of range\00option_max_amount must be positive\00")
(data (i32.const 8939) "0\00")
(data (i32.const 8941) "gensettings not found\00")
(data (i32.const 8963) "execoptions is disabled\00")
(data (i32.const 8987) ";Payout from Dragon Option / \e9\a3\9e\e9\be\99\e6\9c\9f\e6\9d\83\e6\94\b6\e7\9b\8a. ID: \00")
(data (i32.const 9041) "Payout from Dragon Option / \e9\a3\9e\e9\be\99\e6\9c\9f\e6\9d\83\e6\94\b6\e7\9b\8a. ID: \00")
(data (i32.const 9094) "option_id must be greater than 0\00")
(data (i32.const 9127) "DRAGON\00")
(data (i32.const 9134) "invalid user_id\00")
(data (i32.const 9150) "invalid option_type\00")
(data (i32.const 9170) "invalid quantity\00")
(data (i32.const 9187) "only positive quantity allowed\00")
(data (i32.const 9218) "current balance (\00")
(data (i32.const 9236) ") is too small\00")
(data (i32.const 9251) "request is too old\00")
(data (i32.const 9270) "execution_interval must be greater than 1 and less or equal than 10\00")
(data (i32.const 9338) "pair settings \'\00")
(data (i32.const 9354) "/\00")
(data (i32.const 9356) "\' not found\00")
(data (i32.const 9368) "option_price for the pair \'\00")
(data (i32.const 9396) "option_payout_percent must be positive\00")
(data (i32.const 9435) "unable to find key\00")
(data (i32.const 9454) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9505) "error reading iterator\00")
(data (i32.const 9528) "<%\00\00")
(data (i32.const 9532) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9565) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9614) "invalid symbol name\00")
(data (i32.const 9634) "write\00")
(data (i32.const 9640) "string is too long to be a valid symbol_code\00")
(data (i32.const 9685) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9738) "string is too long to be a valid name\00")
(data (i32.const 9776) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9843) "character is not in allowed character set for names\00")
(data (i32.const 9895) "updown\00")
(data (i32.const 9902) "%lld%s%s %s\00")
(data (i32.const 9914) ".\00")
(data (i32.const 9917) "dragonoption;\00")
(data (i32.const 9931) "cannot increment end iterator\00")
(data (i32.const 9961) "read\00")
(data (i32.const 9966) "cannot pass end iterator to modify\00")
(data (i32.const 10001) "object passed to modify is not in multi_index\00")
(data (i32.const 10047) "cannot modify objects in table of another contract\00")
(data (i32.const 10098) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10157) "cannot create objects in table of another contract\00")
(data (i32.const 10208) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10260) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10314) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10362) "cannot pass end iterator to erase\00")
(data (i32.const 10396) "object passed to erase is not in multi_index\00")
(data (i32.const 10441) "cannot erase objects in table of another contract\00")
(data (i32.const 10491) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10544) "get\00")
(data (i32.const 0) "8)\00\00")
(import "env" "transaction_size" (func $fimport$0 (result i32)))
(import "env" "read_transaction" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "assert_sha256" (func $fimport$3 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$4 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$5 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$6 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$7 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$8 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$9 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$10 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$11 (param i32 i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "recover_key" (func $fimport$13 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$14 (param i32 i32 i32 i32 i32)))
(import "env" "prints_l" (func $fimport$15 (param i32 i32)))
(import "env" "abort" (func $fimport$16))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$19 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$20 (param i32 i32)))
(import "env" "__multf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$22 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$25 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$30 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$32 (param i64 i64) (result f32)))
(import "env" "__unordtf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$36 (param i64)))
(import "env" "db_find_i64" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$38 (param i32 i32)))
(import "env" "require_recipient" (func $fimport$39 (param i64)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$40 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$41 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$42 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$43 (result i64)))
(import "env" "get_active_producers" (func $fimport$44 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$45 (result i64)))
(import "env" "db_idx64_lowerbound" (func $fimport$46 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$48 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$49 (result i32)))
(import "env" "read_action_data" (func $fimport$50 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$51 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$52 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$53 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$54 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$55 (param i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$56 (param i32 i64 i32 i32)))
(import "env" "db_idx64_update" (func $fimport$57 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$58 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$59 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$60 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$61 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$62 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$63 (param i32)))
(export "apply" (func $1))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $5 $8)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 10548))
(global $global$2 i32 (i32.const 10548))


int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [44])
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [9931])
	$2 = *(($0 + [4]))
	$3 = *($2 + [44])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6224682584866760320, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [44]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = [0]
	$5 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$6 = *($1 + [8])
	$2 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$8:
	$3 = ($2 + [-24])
	$4 = *($3)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$7 }
	$2 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)*($4 + [36]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9454])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL $97($7, CALL $fimport$37(*($7), *($7 + [8]), (int_64)-6224682584866760320, $6))
	if ( ((int_32)*($4 + [36]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$5
	*($4 + [44]) = $5
	
.LABEL $label$4
	*(($0 + [4])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $99 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [88]) = $2
	*($5 + [96]) = $1
	*($5 + [76]) = $4
	*($5 + [80]) = $3
	CALL require_auth(*($0))
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$3 }
	$6 = [0]
	if ( ((int_32)$4 <= (int_32)[0]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8904])
	$6 = [0]
	if ( ((int_32)$4 > (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert($6, [9396])
	
.LABEL $label$1
	*(($5 + [64])) = $6
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [68]) = $6
	$3 = *($0 + [8])
	*($5 + [32]) = $3
	*($5 + [40]) = $3
	$6 = CALL $91($6, ($5 + [32]), $1, $2)
	if ( ($6 == 0) ){ goto $label$12 }
	$3 = *($6)
	$4 = *(($5 + [60]))
	$7 = *(($5 + [56]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$13:
	$6 = ($4 + [-24])
	$8 = *($6)
	if ( ((int_64)*($8) == (int_64)$3) ){ goto $label$11 }
	$4 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$13 }
	goto $label$10 
	
.LABEL $label$12
	$3 = *($0)
	*($5 + [12]) = ($5 + [96])
	*($5 + [8]) = ($5 + [32])
	*($5 + [16]) = ($5 + [88])
	*($5 + [20]) = ($5 + [80])
	*($5 + [24]) = ($5 + [76])
	*($5 + [136]) = $3
	if ( ((int_64)CALL current_receiver() == (int_64)*($5 + [32])) ){ goto $label$14 }
	CALL eosio_assert([0], [10157])
	
.LABEL $label$14
	*($5 + [116]) = ($5 + [8])
	*($5 + [112]) = ($5 + [32])
	*($5 + [120]) = ($5 + [136])
	*(($6 = CALL $16([56])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [36]) = ($5 + [32])
	CALL $100(($5 + [112]), $6)
	*($5 + [128]) = $6
	$3 = *($6)
	*($5 + [112]) = $3
	$8 = *($6 + [40])
	*($5 + [108]) = $8
	$7 = ($5 + [60])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [64]))) ){ goto $label$8 }
	*($4 + [8]) = $3
	*($4 + [16]) = $8
	*($5 + [128]) = [0]
	*($4) = $6
	*($7) = ($4 + [24])
	$6 = *($5 + [128])
	*($5 + [128]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)*($8 + [36]) == (int_32)($5 + [32])) ){ goto $label$9 }
	CALL eosio_assert([0], [9454])
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	$6 = CALL db_find_i64(*($5 + [32]), *(($5 + [40])), (int_64)-6224682584866760320, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$8 = CALL $97(($5 + [32]), $6)
	if ( ((int_32)*($8 + [36]) == (int_32)($5 + [32])) ){ goto $label$9 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$9
	$3 = *($0)
	*($5 + [12]) = ($5 + [76])
	*($5 + [8]) = ($5 + [80])
	if ( $8 ){ goto $label$15 }
	CALL eosio_assert([0], [9966])
	
.LABEL $label$15
	CALL $101(($5 + [32]), $8, $3, ($5 + [8]))
	$8 = *($5 + [56])
	if ( $8 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	CALL $102(($5 + [56]), ($5 + [128]), ($5 + [112]), ($5 + [108]))
	$6 = *($5 + [128])
	*($5 + [128]) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $18($6)
	
.LABEL $label$6
	$8 = *($5 + [56])
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = ($5 + [60])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$17 }
	
.LOOP $label$18:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL $18($4)
	
.LABEL $label$19
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$18 }
	$6 = *(($5 + [56]))
	goto $label$16 
	
.LABEL $label$17
	$6 = $8
	
.LABEL $label$16
	*($7) = $8
	CALL $18($6)
	
.LABEL $label$4
	$global$0 = ($5 + [144])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL $16(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $56($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $18($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [9738])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9843])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9776])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9843])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $24($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($5 + [16]) & [-16])
	$5 = CALL $16($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $43($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $33($0)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9505])
	
.LABEL $label$5
	$4 = CALL $10($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $16([56])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [36]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $143(($3 + [40]), ($3 + [32]))
	*($5 + [40]) = $1
	*($5 + [44 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $102(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $11($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $18($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [400])
	$global$0 = $3
	CALL $53(($3 + [112]), *($1 + [8]))
	$4 = [0]
	$5 = CALL $45(($3 + [112]), [0], [9917])
	$6 = ($5 + [8])
	*((($3 + [128]) + [8])) = *($6)
	*($3 + [128]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = CALL $42(($3 + [128]), [8712])
	$6 = ($5 + [8])
	*((($3 + [144]) + [8])) = *($6)
	*($3 + [144]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	CALL $53(($3 + [96]), *($1 + [16]))
	$5 = *($3 + [96])
	$6 = ($5 & [1])
	$5 = CALL $43(($3 + [144]), ( *($3 + [104]) ? (($3 + [96]) | [1]) : $6 ), ( *($3 + [100]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($3 + [160]) + [8])) = *($6)
	*($3 + [160]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = CALL $42(($3 + [160]), [8712])
	$6 = ($5 + [8])
	*((($3 + [176]) + [8])) = *($6)
	*($3 + [176]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$7 = *($1 + [24])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$4 }
	$6 = *([0] + [9528])
	
.LOOP $label$6:
	*((($3 + [384]) + ($5 = $4))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$4 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [88])) = [0]
	*($3 + [80]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [80]) = ($4 << [1])
	$6 = (($3 + [80]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*((($3 + [80]) + [8])) = [0]
	*($3 + [80]) = (int_64)0
	*($3 + [80]) = [0]
	$8 = (($3 + [80]) | [1])
	$5 = $8
	goto $label$1 
	
.LABEL $label$3
	$8 = (($4 + [16]) & [-16])
	$6 = CALL $16($8)
	*($3 + [80]) = ($8 | [1])
	*($3 + [88]) = $6
	*($3 + [84]) = $4
	
.LABEL $label$2
	$8 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$7:
	*(($6 + $5)) = *((($3 + [384]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$7 }
	$5 = ($6 + $4)
	$8 = (($3 + [80]) | [1])
	
.LABEL $label$1
	$4 = [0]
	*($5) = [0]
	$5 = *($3 + [80])
	$6 = ($5 & [1])
	$5 = CALL $43(($3 + [176]), ( *($3 + [88]) ? $8 : $6 ), ( *($3 + [84]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($3 + [192]) + [8])) = *($6)
	*($3 + [192]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = CALL $42(($3 + [192]), [8712])
	$6 = ($5 + [8])
	*((($3 + [208]) + [8])) = *($6)
	*($3 + [208]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	CALL $53(($3 + [64]), *($1 + [32]))
	$5 = *($3 + [64])
	$6 = ($5 & [1])
	$5 = CALL $43(($3 + [208]), ( *($3 + [72]) ? (($3 + [64]) | [1]) : $6 ), ( *($3 + [68]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($3 + [224]) + [8])) = *($6)
	*($3 + [224]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = CALL $42(($3 + [224]), [8712])
	$6 = ($5 + [8])
	*((($3 + [240]) + [8])) = *($6)
	*($3 + [240]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	CALL $52(($3 + [48]), *($1 + [40]))
	$5 = *($3 + [48])
	$6 = ($5 & [1])
	$5 = CALL $43(($3 + [240]), ( *($3 + [56]) ? (($3 + [48]) | [1]) : $6 ), ( *($3 + [52]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($3 + [256]) + [8])) = *($6)
	*($3 + [256]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = CALL $42(($3 + [256]), [8712])
	$6 = ($5 + [8])
	*((($3 + [272]) + [8])) = *($6)
	*($3 + [272]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$7 = *($1 + [48])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$11 }
	$6 = *([0] + [9528])
	
.LOOP $label$13:
	*((($3 + [384]) + ($5 = $4))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$4 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$12 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$10 }
	*($3 + [32]) = ($4 << [1])
	$6 = (($3 + [32]) | [1])
	goto $label$9 
	
.LABEL $label$11
	*((($3 + [32]) + [8])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [32]) = [0]
	$6 = (($3 + [32]) | [1])
	$5 = $6
	goto $label$8 
	
.LABEL $label$10
	$8 = (($4 + [16]) & [-16])
	$6 = CALL $16($8)
	*($3 + [32]) = ($8 | [1])
	*($3 + [40]) = $6
	*($3 + [36]) = $4
	
.LABEL $label$9
	$8 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$14:
	*(($6 + $5)) = *((($3 + [384]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$14 }
	$5 = ($6 + $4)
	$6 = (($3 + [32]) | [1])
	
.LABEL $label$8
	*($5) = [0]
	$5 = *($3 + [32])
	$4 = ($5 & [1])
	$5 = CALL $43(($3 + [272]), ( *($3 + [40]) ? $6 : $4 ), ( *($3 + [36]) ? uint_32($5 >> [1]) : $4 ))
	$4 = ($5 + [8])
	*((($3 + [288]) + [8])) = *($4)
	*($3 + [288]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	$5 = CALL $42(($3 + [288]), [8712])
	$4 = ($5 + [8])
	*((($3 + [304]) + [8])) = *($4)
	*($3 + [304]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	$5 = CALL $42(($3 + [304]), [9895])
	$4 = ($5 + [8])
	*((($3 + [320]) + [8])) = *($4)
	*($3 + [320]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	$5 = CALL $42(($3 + [320]), [8712])
	$4 = ($5 + [8])
	*((($3 + [336]) + [8])) = *($4)
	*($3 + [336]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	CALL $51(($3 + [16]), *($1 + [60]))
	$5 = *($3 + [16])
	$4 = ($5 & [1])
	$5 = CALL $43(($3 + [336]), ( *($3 + [24]) ? (($3 + [16]) | [1]) : $4 ), ( *($3 + [20]) ? uint_32($5 >> [1]) : $4 ))
	$4 = ($5 + [8])
	*((($3 + [352]) + [8])) = *($4)
	*($3 + [352]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	$5 = CALL $42(($3 + [352]), [8712])
	$4 = ($5 + [8])
	*((($3 + [368]) + [8])) = *($4)
	*($3 + [368]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	CALL $51($3, *($1 + [61]))
	$5 = *($3)
	$4 = ($5 & [1])
	$5 = CALL $43(($3 + [368]), ( *($3 + [8]) ? ($3 | [1]) : $4 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $4 ))
	$4 = ($5 + [8])
	*((($3 + [384]) + [8])) = *($4)
	*($3 + [384]) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	if ( (*($3) & [1]) ){ goto $label$66 }
	if ( (*($3 + [368]) & [1]) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	CALL $18(*(($3 + [8])))
	if ( ((*($3 + [368]) & [1]) == 0) ){ goto $label$64 }
	
.LABEL $label$65
	CALL $18(*($3 + [376]))
	$5 = [1]
	if ( ((*($3 + [352]) & [1]) == 0) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	$5 = [1]
	if ( (*($3 + [352]) & [1]) ){ goto $label$62 }
	
.LABEL $label$63
	if ( (*($3 + [16]) & $5) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	CALL $18(*($3 + [360]))
	if ( ((*($3 + [16]) & $5) == 0) ){ goto $label$60 }
	
.LABEL $label$61
	CALL $18(*(($3 + [24])))
	$5 = [1]
	if ( ((*($3 + [336]) & [1]) == 0) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$5 = [1]
	if ( (*($3 + [336]) & [1]) ){ goto $label$58 }
	
.LABEL $label$59
	if ( (*($3 + [320]) & $5) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	CALL $18(*($3 + [344]))
	if ( ((*($3 + [320]) & $5) == 0) ){ goto $label$56 }
	
.LABEL $label$57
	CALL $18(*($3 + [328]))
	$5 = [1]
	if ( ((*($3 + [304]) & [1]) == 0) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$5 = [1]
	if ( (*($3 + [304]) & [1]) ){ goto $label$54 }
	
.LABEL $label$55
	if ( (*($3 + [288]) & $5) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	CALL $18(*($3 + [312]))
	if ( ((*($3 + [288]) & $5) == 0) ){ goto $label$52 }
	
.LABEL $label$53
	CALL $18(*($3 + [296]))
	$5 = [1]
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$5 = [1]
	if ( (*($3 + [32]) & [1]) ){ goto $label$50 }
	
.LABEL $label$51
	if ( (*($3 + [272]) & $5) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	CALL $18(*(($3 + [40])))
	if ( ((*($3 + [272]) & $5) == 0) ){ goto $label$48 }
	
.LABEL $label$49
	CALL $18(*($3 + [280]))
	$5 = [1]
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$5 = [1]
	if ( (*($3 + [256]) & [1]) ){ goto $label$46 }
	
.LABEL $label$47
	if ( (*($3 + [48]) & $5) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	CALL $18(*($3 + [264]))
	if ( ((*($3 + [48]) & $5) == 0) ){ goto $label$44 }
	
.LABEL $label$45
	CALL $18(*(($3 + [56])))
	$5 = [1]
	if ( ((*($3 + [240]) & [1]) == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$5 = [1]
	if ( (*($3 + [240]) & [1]) ){ goto $label$42 }
	
.LABEL $label$43
	if ( (*($3 + [224]) & $5) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	CALL $18(*($3 + [248]))
	if ( ((*($3 + [224]) & $5) == 0) ){ goto $label$40 }
	
.LABEL $label$41
	CALL $18(*($3 + [232]))
	$5 = [1]
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$5 = [1]
	if ( (*($3 + [64]) & [1]) ){ goto $label$38 }
	
.LABEL $label$39
	if ( (*($3 + [208]) & $5) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	CALL $18(*(($3 + [72])))
	if ( ((*($3 + [208]) & $5) == 0) ){ goto $label$36 }
	
.LABEL $label$37
	CALL $18(*($3 + [216]))
	$5 = [1]
	if ( ((*($3 + [192]) & [1]) == 0) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$5 = [1]
	if ( (*($3 + [192]) & [1]) ){ goto $label$34 }
	
.LABEL $label$35
	if ( (*($3 + [80]) & $5) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	CALL $18(*($3 + [200]))
	if ( ((*($3 + [80]) & $5) == 0) ){ goto $label$32 }
	
.LABEL $label$33
	CALL $18(*(($3 + [88])))
	$5 = [1]
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$5 = [1]
	if ( (*($3 + [176]) & [1]) ){ goto $label$30 }
	
.LABEL $label$31
	if ( (*($3 + [160]) & $5) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	CALL $18(*($3 + [184]))
	if ( ((*($3 + [160]) & $5) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	CALL $18(*($3 + [168]))
	$5 = [1]
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$5 = [1]
	if ( (*($3 + [96]) & [1]) ){ goto $label$26 }
	
.LABEL $label$27
	if ( (*($3 + [144]) & $5) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL $18(*(($3 + [104])))
	if ( ((*($3 + [144]) & $5) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL $18(*($3 + [152]))
	$5 = [1]
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$5 = [1]
	if ( (*($3 + [128]) & [1]) ){ goto $label$22 }
	
.LABEL $label$23
	if ( (*($3 + [112]) & $5) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $18(*($3 + [136]))
	if ( ((*($3 + [112]) & $5) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL $18(*($3 + [120]))
	if ( $2 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( ($2 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL $96(($3 + [368]), ($3 + [384]), [8712])
	$5 = *($1 + [64])
	$4 = ($5 & [1])
	$5 = CALL $43(($3 + [368]), ( *(($1 + [72])) ? ($1 + [65]) : $4 ), ( *(($1 + [68])) ? uint_32($5 >> [1]) : $4 ))
	*($0) = *($5)
	$4 = ($5 + [8])
	*(($0 + [8])) = *($4)
	*($5) = (int_64)0
	*($4) = [0]
	if ( (*($3 + [368]) & [1]) ){ goto $label$17 }
	if ( (*($3 + [384]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	CALL $34($0, ($3 + [384]))
	if ( ((*($3 + [384]) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	CALL $18(*($3 + [376]))
	if ( ((*($3 + [384]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $18(*($3 + [392]))
	$global$0 = ($3 + [400])
	return 
	
.LABEL $label$15
	$global$0 = ($3 + [400])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [8]) = $1
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $2
	$5 = [0]
	$6 = CALL db_idx64_lowerbound(*($1), *($1 + [8]), (int_64)-6224682584866760320, ($4 + [16]), ($4 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = *($4 + [24])
	$9 = *(($1 + [28]))
	$8 = *($1 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$10 = ($9 + [-24])
	$5 = *($10)
	if ( ((int_64)*($5) == (int_64)$7) ){ goto $label$4 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($5 + [36]) == (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [9454])
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	$10 = CALL db_find_i64(*($1), *(($1 + [8])), (int_64)-6224682584866760320, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $97($1, $10)
	if ( ((int_32)*($5 + [36]) == (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$2
	*($5 + [44]) = $6
	
.LABEL $label$1
	*($4 + [4]) = $5
	*($4) = ($4 + [8])
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((int_64)*($5 + [8]) != (int_64)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	if ( ((int_64)*($5 + [16]) == (int_64)$3) ){ goto $label$6 }
	CALL $98($4)
	$5 = *($4 + [4])
	if ( ((int_64)*($5 + [8]) == (int_64)$2) ){ goto $label$8 }
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return $5
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	float_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-6524895285083111424, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $73($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $140(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [16])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [10208])
	$7 = *(($6 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	$6 = *($5 + [4])
	*($1 + [16]) = *($6 + [16])
	*($1 + [8]) = *($6 + [8])
	*($1 + [24]) = *($6 + [24])
	*($1 + [32]) = *(*($5 + [8]))
	$6 = *($5 + [12])
	$7 = *($6)
	*($1 + [48]) = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	*($1 + [40]) = $7
	$6 = *($5 + [4])
	*($1 + [56]) = *($6 + [32])
	*($1 + [64]) = *($6 + [48])
	*(($1 + [72])) = *($6 + [56])
	*(($1 + [73])) = *($6 + [60])
	*(($1 + [80])) = (int_64)0
	*(($1 + [88])) = (int_64)0
	*(($1 + [96])) = ((int_32)*($6 + [61]) != (int_32)[0])
	$6 = *(*(*($5 + [16])) + [32])
	*($1 + [104]) = $6
	$9 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_32 $6) / (float_64)(float_64)100) + (float_64)(float_64)1) * (float_64)(CASTING float_64)(int_64 $7))
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$6 }
	$7 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$7 = (Rounds 0)($9)
	
.LABEL $label$5
	*($1 + [112]) = $7
	*($1 + [120]) = *(*($5 + [20]))
	$6 = ($1 + [124])
	CALL $64(($3 + [32]))
	if ( (*($1 + [124]) & [1]) ){ goto $label$8 }
	*($6) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*(($1 + [132]))) = [0]
	*(($1 + [128])) = [0]
	
.LABEL $label$7
	$8 = ($1 + [120])
	$10 = ($1 + [112])
	$11 = ($1 + [104])
	$12 = ($1 + [56])
	$13 = ($1 + [40])
	$14 = ($1 + [16])
	$15 = ($1 + [8])
	CALL $38($6, [0])
	*(($6 + [8])) = *((($3 + [32]) + [8]))
	*($6) = *($3 + [32])
	$5 = *(($1 + [73]))
	$16 = *(($1 + [120]))
	*($1 + [152]) = [0]
	*($1 + [136]) = ((int_32)($5 + ((uint_32)$16 / (uint_32)[60])) * (int_32)[60])
	$5 = *(($1 + [124]))
	$16 = ( *(($1 + [128])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($16 + [112])
	$7 = (CASTING uint_64)(uint_32 $16)
	$16 = ($1 + [152])
	$17 = ($1 + [136])
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$9 }
	$18 = *($1 + [140])
	$18 = ( *(($1 + [144])) ? uint_32($18 >> [1]) : ($18 & [1]) )
	$5 = ($18 + $5)
	$7 = (CASTING uint_64)(uint_32 $18)
	$18 = ($1 + [140])
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$10 }
	if ( ($5 <= [513]) ){ goto $label$12 }
	$2 = CALL $10($5)
	goto $label$11 
	
.LABEL $label$12
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$11
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $15
	*($3 + [32]) = $1
	*($3 + [40]) = $14
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = ($1 + [32])
	*($3 + [52]) = $13
	*($3 + [56]) = ($1 + [48])
	*($3 + [60]) = $12
	*($3 + [64]) = ($1 + [64])
	*($3 + [68]) = $11
	*($3 + [72]) = $10
	*($3 + [76]) = $8
	*($3 + [80]) = $6
	*($3 + [84]) = $17
	*($3 + [88]) = $18
	*($3 + [92]) = $16
	CALL $137(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [160]) = CALL db_store_i64(*($4 + [8]), (int_64)-6524895285083111424, *(*($0 + [8])), $7, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$13 }
	CALL $11($2)
	
.LABEL $label$13
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$14 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$5 = ($4 + [8])
	$7 = *($5)
	$6 = *(($0 + [8]))
	$19 = *($6)
	$20 = *($1)
	*($3 + [32]) = *(($1 + [136]))
	*($1 + [164]) = CALL db_idx64_store($7, (int_64)-6524895285083111424, $19, $20, ($3 + [32]))
	$7 = *($6)
	$19 = *($5)
	$20 = *($1)
	*($3 + [32]) = *(($1 + [32]))
	*(($1 + [168])) = CALL db_idx64_store($19, (int_64)-6524895285083111423, $7, $20, ($3 + [32]))
	$7 = *($6)
	$19 = *($5)
	$20 = *($1)
	*($3 + [32]) = *(($1 + [152]))
	*(($1 + [172])) = CALL db_idx64_store($19, (int_64)-6524895285083111422, $7, $20, ($3 + [32]))
	$7 = *($6)
	$19 = *($5)
	$20 = *($1)
	*($3 + [32]) = *(($1 + [16]))
	*(($1 + [176])) = CALL db_idx64_store($19, (int_64)-6524895285083111421, $7, $20, ($3 + [32]))
	$7 = *($6)
	$19 = *($5)
	$20 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*(($1 + [180])) = CALL db_idx64_store($19, (int_64)-6524895285083111420, $7, $20, ($3 + [32]))
	$global$0 = ($3 + [96])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $16(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $56($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [140]) & [1]) == 0) ){ goto $label$11 }
	CALL $18(*(($1 + [148])))
	
.LABEL $label$11
	if ( ((*($1 + [124]) & [1]) == 0) ){ goto $label$12 }
	CALL $18(*(($1 + [132])))
	
.LABEL $label$12
	CALL $18($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $18($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9634])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9634])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$3 = ($1 + [9])
	if ( ((int_32)(*($6) - $4) > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert([0], [9634])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [16])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9634])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [24])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9634])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [15]) = *($1 + [32])
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [9634])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	*($3) = (*($3) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10544])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [3])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $124($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [8])
	$2 = (*($6) + [8])
	*($6) = $2
	$7 = ($7 + [8])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [4])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$4 }
	$3 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$3 = int_32($2 >> [3])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $16(($3 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	$3 = (*($0) + [16])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $56($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [4]))
	$5 = ($2 + ($5 << [4]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [4]))
	$1 = *($0)
	$7 = ($0 + [4])
	$3 = (*($7) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $18($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $122 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $10($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	CALL $123(($3 + [64]), ($3 + [48]))
	*(($4 = ($3 + [8]))) = *($3 + [72])
	*($3) = *($3 + [64])
	$4 = *($4)
	*((($3 + [80]) + [8])) = $4
	*(($5 = (($3 + [96]) + [8]))) = $4
	$6 = *($3)
	*($3 + [96]) = $6
	*($3 + [80]) = $6
	$4 = *($5)
	*((($3 + [112]) + [8])) = $4
	*(($3 + [40])) = $4
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$0 = *($3 + [96])
	*($3 + [32]) = $0
	*($3 + [112]) = $0
	CALL $107(($3 + [16]), ($3 + [48]))
	$4 = *($3 + [48])
	if ( ($4 == 0) ){ goto $label$4 }
	*($3 + [52]) = $4
	CALL $18($4)
	
.LABEL $label$4
	$global$0 = ($3 + [128])
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9634])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9634])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9634])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9634])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9634])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $16(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $56($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $18($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $18($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $16(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $56($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $18($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $18($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9634])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9634])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10544])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $70($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)*($6) != (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$3 = ($1 + [9])
	if ( ((int_32)*($6) != (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [16])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [24])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	if ( ((int_32)*(($0 + [8])) != (int_32)$4) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy(($2 + [15]), $4, [1])
	*($3) = (*($3) + [1])
	*(($1 + [32])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [24]))
	$5 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $138(*($1), *($0 + [32]))
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$9 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$11 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	CALL $134(*($1), *($0 + [48]))
	$3 = *($0 + [52])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$12 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	CALL $134(*($1), *($0 + [56]))
	$4 = *($0 + [60])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert([0], [9634])
	$1 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($1, $4, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $121($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $16($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $38($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $38($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $33($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $18($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $16(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $18($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $126 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $10($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*(($3 + [20])) = $2
	*(($3 + [24])) = ($2 + $4)
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	CALL $111($3)
	$global$0 = ($3 + [32])
}

void .FUNC $49 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $96($1, $0, [8854])
	CALL $55()
	(unreachable)
}

void .FUNC $48 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $96($1, $0, [8889])
	CALL $54()
	(unreachable)
}

void .FUNC $125 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $10($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [40]), $2, [8])
	*($3 + [8]) = (int_64)0
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$6
	CALL memcpy(($3 + [8]), $6, [8])
	$7 = *($3 + [8])
	*(($3 + [32])) = $5
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [16])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	CALL $109(($3 + [8]), *($3 + [40]), $7)
	$global$0 = ($3 + [48])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $37($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $24($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $37($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $16($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $18($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $41($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $24([8300])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $16($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8300], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $13())
	*(CALL $13()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $32($4, ($3 + [12]), $2)
	$5 = CALL $13()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $18(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $48($3)
	
.LABEL $label$1
	CALL $49($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $25(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $44($0, $1, $2, CALL $24($2))
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $37($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $16(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $56($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $18($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [8]), $5, [8])
	*($3) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [16])
	$0 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)*($1 + [8]) != (int_32)$0) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$0 = *(($1 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [7]), $0, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	*($4) = ((int_32)*($2 + [7]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $4([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $4([2], $0, [-1], $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $6($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $6($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $6($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $6($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [8320]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $6($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $6($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $6($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8192])
	
.LABEL $label$4
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$5 }
	if ( ($1 <= [2]) ){ goto $label$6 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$6
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = *($0)
	*($3 + [131]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($3 + [130]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($3 + [129]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($3 + [128]) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = *(($0 + [8]))
	*($3 + [123]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($3 + [122]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($3 + [121]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($3 + [120]) = (uint_64)$5 >> (uint_64)(int_64)56)
	$6 = (CASTING uint_32)(uint_64 $4)
	*($3 + [135]) = $6
	*($3 + [134]) = uint_32($6 >> [8])
	*($3 + [133]) = uint_32($6 >> [16])
	*($3 + [132]) = uint_32($6 >> [24])
	$6 = (CASTING uint_32)(uint_64 $5)
	*($3 + [127]) = $6
	*($3 + [126]) = uint_32($6 >> [8])
	*($3 + [125]) = uint_32($6 >> [16])
	*($3 + [124]) = uint_32($6 >> [24])
	$4 = *(($0 + [24]))
	*($3 + [143]) = $4
	$5 = *($0 + [16])
	*($3 + [147]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($3 + [146]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($3 + [145]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($3 + [144]) = (uint_64)$5 >> (uint_64)(int_64)56)
	*($3 + [139]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($3 + [138]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($3 + [137]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($3 + [136]) = (uint_64)$4 >> (uint_64)(int_64)56)
	$0 = (CASTING uint_32)(uint_64 $4)
	*($3 + [142]) = uint_32($0 >> [8])
	*($3 + [141]) = uint_32($0 >> [16])
	*($3 + [140]) = uint_32($0 >> [24])
	$0 = (CASTING uint_32)(uint_64 $5)
	*($3 + [151]) = $0
	*($3 + [150]) = uint_32($0 >> [8])
	*($3 + [149]) = uint_32($0 >> [16])
	*($3 + [148]) = uint_32($0 >> [24])
	$7 = ($3 + [118])
	$4 = *($1)
	$6 = ($3 + [48])
	
.LOOP $label$2:
	$0 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($3) = (($8) << [7]) | ($0 & [127]))
	$0 = $6
	if ( ((int_32)($7 - $0) <= (int_32)[0]) ){ goto $label$3 }
	CALL memcpy($0, $3, [1])
	$6 = ($0 + [1])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8294])
	CALL memcpy($0, $3, [1])
	$6 = ($0 + [1])
	if ( $8 ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($1 + [4])
	if ( ((int_32)($7 - $6) > (int_32)[64]) ){ goto $label$4 }
	CALL eosio_assert([0], [8294])
	
.LABEL $label$4
	CALL memcpy($6, $8, [65])
	$1 = ($0 + [66])
	$7 = ($3 + [38])
	$4 = *($2)
	$6 = $3
	
.LOOP $label$5:
	$0 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($3 + [159]) = (($8) << [7]) | ($0 & [127]))
	$0 = $6
	if ( ((int_32)($7 - $0) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [8294])
	
.LABEL $label$6
	CALL memcpy($0, ($3 + [159]), [1])
	$6 = ($0 + [1])
	if ( $8 ){ goto $label$5 }
	$8 = ($2 + [4])
	if ( ((int_32)($7 - $6) > (int_32)[32]) ){ goto $label$7 }
	CALL eosio_assert([0], [8294])
	
.LABEL $label$7
	CALL memcpy($6, $8, [33])
	CALL assert_recover_key(($3 + [120]), ($3 + [48]), ($1 - ($3 + [48])), $3, (($0 + [34]) - $3))
	$global$0 = ($3 + [160])
}

void .FUNC $0 ()
{
	CALL $12()
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	CALL $0()
	CALL $113($0, $1)
	CALL $116($0, $1)
	CALL $117($0, $1)
	CALL $118($0, $1)
	CALL $119($0, $1)
	CALL $122($0, $1)
	CALL $125($0, $1)
	CALL $126($0, $1)
	CALL eosio_assert_code([0], (int_64)8000000000000000000)
	CALL eosio_assert_code([0], (int_64)8000000000000000001)
	CALL $127($0, $1)
	CALL $63([0])
	((int_64)$0 == (int_64)$1)
	((int_64)6292806686392774656 == (int_64)$2)
	((int_64)-4416999176951469232 == (int_64)$2)
	((int_64)9015414805623734272 == (int_64)$2)
	((int_64)-4417085786088275968 == (int_64)$2)
	((int_64)-4417251341222658048 == (int_64)$2)
	((int_64)6182744453794834304 == (int_64)$2)
	((int_64)6182744472029655552 == (int_64)$2)
	((int_64)6182744310354719632 == (int_64)$2)
	((int_64)$0 != (int_64)6138663577826885632)
	((int_64)6138663577826885632 == (int_64)$1)
	((int_64)-6569208335818555392 == (int_64)$2)
	((int_64)-3617168760277827584 == (int_64)$2)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $10($1)
	
.LABEL $label$2
	*(CALL $13()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $10(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $11($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $13())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $14($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $10($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8424])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $10($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $17 (int_32 $0)
{
	return CALL $16($0)
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8412]) + $1)
	*([0] + [8412]) = $2
	$3 = *([0] + [8404])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8404]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8412]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8236])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $11 (int_32 $0)
{
}

void .FUNC $12 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8404]) = $0
	*([0] + [8400]) = $0
	*([0] + [8412]) = (current_memory)
}

int_32 .FUNC $13 ()
{
	return [8416]
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [164])
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [9931])
	$2 = *(($0 + [4]))
	$3 = *($2 + [164])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6524895285083111424, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [164]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = [0]
	$5 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$6 = *($1 + [8])
	$2 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$8:
	$3 = ($2 + [-24])
	$4 = *($3)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$7 }
	$2 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)*(($4 + [156])) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9454])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL $73($7, CALL $fimport$37(*($7), *($7 + [8]), (int_64)-6524895285083111424, $6))
	if ( ((int_32)*($4 + [156]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$5
	*($4 + [164]) = $5
	
.LABEL $label$4
	*(($0 + [4])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $18 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $11($0)
	
.LABEL $label$1
}

void .FUNC $19 (int_32 $0)
{
	CALL $18($0)
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	$1 = int_32($0 >> [31])
	return ((int_32)($0 + $1) ^ (int_32)$1)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*((($2 = ($global$0 - [32])) + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$2 }
	$1 = ($1 + [1])
	
.LOOP $label$4:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$4 }
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = $0
	
.LOOP $label$6:
	if ( ((*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) == 0) ){ goto $label$1 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$5
	return ($4 - $0)
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	$1 = ($0 + [-1])
	
.LOOP $label$7:
	$1 = ($1 + [1])
	if ( ((int_32)*($1) == (int_32)$3) ){ goto $label$7 }
	return ($1 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_64 .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $24([8705])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $16($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8705], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $13())
	*(CALL $13()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $31($4, ($3 + [12]), $2)
	$0 = CALL $13()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $18(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $48($3)
	
.LABEL $label$1
	CALL $49($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $40(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $9(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8714], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $40(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $40(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $40(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $9(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8760], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $40(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $40(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $53 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $40(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $9(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8807], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $40(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $40(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $54 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $16($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $56 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $57 ()
{
	int_64 $0
	if ( (*([0] + [8428]) == 0) ){ goto $label$1 }
	return *([0] + [8432])
	
.LABEL $label$1
	$0 = CALL current_time()
	*([0] + [8428]) = [1]
	*([0] + [8432]) = $0
	return $0
}

void .FUNC $116 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $10($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [72])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [72])
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [9961])
	
.LABEL $label$1
	CALL memcpy($5, $2, [8])
	$5 = ($2 + [8])
	$4 = ($4 & [-8])
	if ( ((int_32)$4 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$6
	CALL memcpy(($3 + [64]), $5, [8])
	*($3 + [56]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$4 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$7
	CALL memcpy(($3 + [56]), $5, [8])
	$5 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$8
	CALL memcpy(($3 + [48]), $5, [8])
	$5 = ($2 + [32])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$9 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$9
	CALL memcpy(($3 + [40]), $5, [8])
	*(($3 + [32])) = $6
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [40])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	CALL $79(($3 + [8]), *($3 + [72]), *($3 + [64]), *($3 + [56]), *($3 + [48]), *($3 + [40]))
	$global$0 = ($3 + [80])
}

void .FUNC $117 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $10($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$5
	CALL memcpy(($3 + [56]), $2, [8])
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [48]), $5, [8])
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $5, [8])
	*((($3 + [8]) + [24])) = $4
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [24])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	CALL $81(($3 + [8]), *($3 + [56]), *($3 + [48]), $0)
	$global$0 = ($3 + [64])
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10544])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$4 = *($1 + [4])
	$6 = int_32(($4 - $7) >> [4])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $115($1, ($2 - $6))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$4 = ($7 + ($2 << [4]))
	*(($1 + [4])) = $4
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = ($0 + [4])
	$6 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($5) - $6) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	$6 = *($2)
	
.LABEL $label$8
	CALL memcpy($7, $6, [8])
	$6 = (*($2) + [8])
	*($2) = $6
	if ( ((uint_32)(*($5) - $6) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9961])
	$6 = *($2)
	
.LABEL $label$9
	CALL memcpy(($7 + [8]), $6, [8])
	$6 = (*($2) + [8])
	*($2) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $16($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*(($1 + [28])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10396])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10441])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10491])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [12]) & [1]) == 0) ){ goto $label$13 }
	CALL $18(*(($5 + [20])))
	
.LABEL $label$13
	CALL $18($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((*($8 + [12]) & [1]) == 0) ){ goto $label$16 }
	CALL $18(*(($8 + [20])))
	
.LABEL $label$16
	CALL $18($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC $113 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $10($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	*($3 + [72]) = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$2 = *($3 + [68])
	
.LABEL $label$5
	CALL memcpy(($3 + [60]), $2, [4])
	*($3 + [68]) = ($2 + [4])
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	CALL $114(($3 + [64]), ($3 + [48]))
	*(($2 = ($3 + [8]))) = *((($3 + [64]) + [8]))
	*($3) = *($3 + [64])
	$2 = *($2)
	*((($3 + [80]) + [8])) = $2
	*(($4 = (($3 + [96]) + [8]))) = $2
	$5 = *($3)
	*($3 + [96]) = $5
	*($3 + [80]) = $5
	$2 = *($4)
	*((($3 + [112]) + [8])) = $2
	*(($3 + [40])) = $2
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$0 = *($3 + [96])
	*($3 + [32]) = $0
	*($3 + [112]) = $0
	CALL $65(($3 + [16]), *($3 + [60]), ($3 + [48]))
	$2 = *($3 + [48])
	if ( ($2 == 0) ){ goto $label$6 }
	*($3 + [52]) = $2
	CALL $18($2)
	
.LABEL $label$6
	$global$0 = ($3 + [128])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [36]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10396])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10441])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10491])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $18($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $18($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
	$9 = *($1 + [44])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6224682584866760320, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$9 = *(($1 + [48]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6224682584866760319, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$global$0 = ($2 + [16])
}

void .FUNC $111 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = [0]
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	$3 = *($0 + [8])
	*($1) = $3
	*($1 + [8]) = $3
	*($1 + [24]) = (int_64)0
	$0 = CALL db_find_i64($3, $3, (int_64)7108797215037665280, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$2 = CALL $76($1, $0)
	if ( ((int_32)*($2 + [28]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [9454])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [10362])
	CALL eosio_assert([0], [9931])
	
.LABEL $label$1
	$0 = CALL db_next_i64(*($2 + [32]), ($1 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL $76($1, $0)
	
.LABEL $label$3
	CALL $112($1, $2)
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($1 + [28])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$9 }
	CALL $18(*(($0 + [20])))
	
.LABEL $label$9
	CALL $18($0)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$7 }
	$2 = *(($1 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$2 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL $18($2)
	
.LABEL $label$4
	$global$0 = ($1 + [48])
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($1)
	$5 = *($0)
	*($2 + [8]) = *($5 + [8])
	$0 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9634])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($5 + [16])
	$1 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $1) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9634])
	$1 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($1, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $118 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $10($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$5
	CALL memcpy(($3 + [56]), $2, [8])
	*($3 + [8]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$6
	CALL memcpy(($3 + [8]), $5, [8])
	$5 = ($2 + [16])
	$7 = *($3 + [8])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$7
	$6 = ($2 + $4)
	CALL memcpy(($3 + [48]), $5, [8])
	$5 = ($2 + [24])
	if ( ((int_32)($4 & [-4]) != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$8
	CALL memcpy(($3 + [44]), $5, [4])
	*((($3 + [8]) + [24])) = $6
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [28])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	CALL $99(($3 + [8]), *($3 + [56]), $7, *($3 + [48]), *($3 + [44]))
	$global$0 = ($3 + [64])
}

void .FUNC $119 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $10($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [84]) = $2
	*($3 + [80]) = $2
	*($3 + [88]) = ($2 + $4)
	if ( $4 ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$2 = *($3 + [84])
	
.LABEL $label$5
	CALL memcpy(($3 + [79]), $2, [1])
	*($3 + [84]) = ($2 + [1])
	*($3 + [72]) = [0]
	*($3 + [64]) = (int_64)0
	CALL $120(($3 + [80]), ($3 + [64]))
	$2 = *($3 + [84])
	$4 = ($3 + [88])
	if ( ((int_32)*($4) != (int_32)$2) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	$2 = *($3 + [84])
	
.LABEL $label$6
	CALL memcpy(($3 + [32]), $2, [1])
	$2 = (*($3 + [84]) + [1])
	*($3 + [84]) = $2
	$5 = *($3 + [32])
	if ( ((int_32)*($4) != (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	$2 = *($3 + [84])
	
.LABEL $label$7
	CALL memcpy(($3 + [32]), $2, [1])
	*($3 + [84]) = (*($3 + [84]) + [1])
	$4 = *($3 + [32])
	*(($2 = (($3 + [16]) + [8]))) = *((($3 + [80]) + [8]))
	*($3 + [16]) = *($3 + [80])
	$2 = *($2)
	*((($3 + [96]) + [8])) = $2
	*(($6 = (($3 + [112]) + [8]))) = $2
	$7 = *($3 + [16])
	*($3 + [112]) = $7
	*($3 + [96]) = $7
	$2 = *($6)
	*((($3 + [128]) + [8])) = $2
	*(($3 + [56])) = $2
	*($3 + [32]) = $0
	*($3 + [40]) = $1
	$0 = *($3 + [112])
	*($3 + [48]) = $0
	*($3 + [128]) = $0
	$2 = CALL $34($3, ($3 + [64]))
	CALL $103(($3 + [32]), *($3 + [79]), $2, ((int_32)($5 & [255]) != (int_32)[0]), ((int_32)$4 != (int_32)[0]))
	if ( (*($2) & [1]) ){ goto $label$10 }
	if ( (*($3 + [64]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $18(*($2 + [8]))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $18(*(($3 + [72])))
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [144])
}

int_32 .FUNC $29 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $27($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $55 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = (int_64)0
	*(($2 + [48])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$5 = *($1)
	$4 = *($1 + [4])
	$1 = ((int_32)$4 == (int_32)$5)
	if ( ($1 == 0) ){ goto $label$4 }
	$1 = CALL db_lowerbound_i64($3, $3, (int_64)-6524895285083111424, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $73(($2 + [8]), $1)
	
.LOOP $label$5:
	$1 = [0]
	$6 = CALL db_next_i64(*($0 + [160]), ($2 + [56]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$1 = CALL $73(($2 + [8]), $6)
	
.LABEL $label$6
	CALL $108(($2 + [8]), $0)
	$0 = $1
	if ( $1 ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	if ( $1 ){ goto $label$7 }
	$7 = (($2 + [8]) + [8])
	$8 = ($2 + [32])
	$9 = ($2 + [36])
	$10 = [0]
	$0 = [0]
	$3 = *($5)
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$8 }
	$11 = [2]
	goto $label$1 
	
.LABEL $label$8
	$11 = [0]
	goto $label$1 
	
.LABEL $label$7
	$11 = [10]
	goto $label$1 
	
.LABEL $label$3
	$11 = [10]
	goto $label$1 
	
.LABEL $label$2
	$11 = [10]
	
.LABEL $label$1
	
.LOOP $label$9:
	goto $label$55 
	
.LABEL $label$56
	$3 = *($5)
	$0 = *($9)
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$28 }
	$11 = [0]
	goto $label$9 
	
.LABEL $label$55
	$1 = ($0 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)$3) ){ goto $label$24 }
	$11 = [1]
	goto $label$9 
	
.LABEL $label$54
	$0 = $1
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$53
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$27 }
	$11 = [25]
	goto $label$9 
	
.LABEL $label$52
	if ( ((int_32)*(($6 + [156])) == (int_32)($2 + [8])) ){ goto $label$10 }
	$11 = [26]
	goto $label$9 
	
.LABEL $label$51
	CALL eosio_assert([0], [9454])
	$11 = [27]
	goto $label$9 
	
.LABEL $label$50
	if ( $6 ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$49
	$1 = CALL db_find_i64(*($2 + [8]), *($7), (int_64)-6524895285083111424, $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$21 }
	$11 = [3]
	goto $label$9 
	
.LABEL $label$48
	$6 = CALL $73(($2 + [8]), $1)
	if ( ((int_32)*($6 + [156]) == (int_32)($2 + [8])) ){ goto $label$20 }
	$11 = [4]
	goto $label$9 
	
.LABEL $label$47
	CALL eosio_assert([0], [9454])
	$11 = [5]
	goto $label$9 
	
.LABEL $label$46
	$1 = CALL db_next_i64(*($6 + [160]), ($2 + [56]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$19 }
	$11 = [6]
	goto $label$9 
	
.LABEL $label$45
	CALL $73(($2 + [8]), $1)
	$11 = [7]
	goto $label$9 
	
.LABEL $label$44
	CALL $108(($2 + [8]), $6)
	$11 = [8]
	goto $label$9 
	
.LABEL $label$43
	$5 = ($5 + [8])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$18 }
	$11 = [10]
	goto $label$9 
	
.LABEL $label$42
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$17 }
	$11 = [11]
	goto $label$9 
	
.LABEL $label$41
	$10 = ($2 + [36])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$16 }
	$11 = [12]
	goto $label$9 
	
.LABEL $label$40
	$11 = [13]
	goto $label$9 
	
.LABEL $label$39
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$14 }
	$11 = [14]
	goto $label$9 
	
.LABEL $label$38
	if ( ((*($1 + [140]) & [1]) == 0) ){ goto $label$13 }
	$11 = [15]
	goto $label$9 
	
.LABEL $label$37
	CALL $18(*(($1 + [148])))
	$11 = [16]
	goto $label$9 
	
.LABEL $label$36
	if ( ((*($1 + [124]) & [1]) == 0) ){ goto $label$12 }
	$11 = [17]
	goto $label$9 
	
.LABEL $label$35
	CALL $18(*(($1 + [132])))
	$11 = [18]
	goto $label$9 
	
.LABEL $label$34
	CALL $18($1)
	$11 = [19]
	goto $label$9 
	
.LABEL $label$33
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$15 }
	$11 = [20]
	goto $label$9 
	
.LABEL $label$32
	$1 = *(($2 + [32]))
	goto $label$11 
	
.LABEL $label$31
	$1 = $6
	$11 = [21]
	goto $label$9 
	
.LABEL $label$30
	*($10) = $6
	CALL $18($1)
	$11 = [22]
	goto $label$9 
	
.LABEL $label$29
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$28
	$11 = [2]
	goto $label$9 
	
.LABEL $label$27
	$11 = [2]
	goto $label$9 
	
.LABEL $label$26
	$11 = [8]
	goto $label$9 
	
.LABEL $label$25
	$11 = [5]
	goto $label$9 
	
.LABEL $label$24
	$11 = [24]
	goto $label$9 
	
.LABEL $label$23
	$11 = [2]
	goto $label$9 
	
.LABEL $label$22
	$11 = [0]
	goto $label$9 
	
.LABEL $label$21
	$11 = [8]
	goto $label$9 
	
.LABEL $label$20
	$11 = [5]
	goto $label$9 
	
.LABEL $label$19
	$11 = [7]
	goto $label$9 
	
.LABEL $label$18
	$11 = [9]
	goto $label$9 
	
.LABEL $label$17
	$11 = [22]
	goto $label$9 
	
.LABEL $label$16
	$11 = [23]
	goto $label$9 
	
.LABEL $label$15
	$11 = [13]
	goto $label$9 
	
.LABEL $label$14
	$11 = [19]
	goto $label$9 
	
.LABEL $label$13
	$11 = [16]
	goto $label$9 
	
.LABEL $label$12
	$11 = [18]
	goto $label$9 
	
.LABEL $label$11
	$11 = [21]
	goto $label$9 
	
.LABEL $label$10
	$11 = [27]
	goto $label$9 
	$11
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $16(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $56($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL $18(*(($1 + [20])))
	
.LABEL $label$11
	CALL $18($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $18($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	return CALL $20($0, $1)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $15(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8424])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $15(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	CALL $22($0, $1)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $11($0)
	
.LABEL $label$1
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $26($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $109 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = [0]
	$4 = *($0 + [8])
	*($3) = $4
	*($3 + [8]) = $4
	$0 = CALL $91($0, $3, $1, $2)
	if ( ($0 == 0) ){ goto $label$1 }
	$1 = *($0)
	$6 = *(($3 + [28]))
	$5 = *(($3 + [24]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$0 = ($6 + [-24])
	$7 = *($0)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$6 = $0
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	if ( ((int_32)*($7 + [36]) == (int_32)$3) ){ goto $label$7 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$7
	if ( $7 ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$0 = CALL db_find_i64(*($3), *(($3 + [8])), (int_64)-6224682584866760320, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $97($3, $0)
	if ( ((int_32)*($7 + [36]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9454])
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [10362])
	CALL eosio_assert([0], [9931])
	
.LABEL $label$2
	$0 = CALL db_next_i64(*($7 + [40]), ($3 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	CALL $97($3, $0)
	
.LABEL $label$8
	CALL $110($3, $7)
	
.LABEL $label$1
	$7 = *($3 + [24])
	if ( ($7 == 0) ){ goto $label$9 }
	$5 = ($3 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $18($6)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($3 + [24]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $7
	
.LABEL $label$10
	*($5) = $7
	CALL $18($0)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $5, [8])
	*($3) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $136(*($1), *($0 + [32]))
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$9 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$11 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	CALL $120(*($1), *($0 + [48]))
	$3 = *($0 + [52])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$12 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	CALL $120(*($1), *($0 + [56]))
	$4 = *($0 + [60])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$13 }
	CALL eosio_assert([0], [9961])
	$1 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($4, $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $69 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	*($2 + [16]) = $0
	*($2 + [8]) = (int_64)5606078067295712128
	$4 = CALL db_find_i64((int_64)5606078067295712128, $0, (int_64)-3735870687670489088, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $77(($2 + [8]), $4)
	if ( ((int_32)*($3 + [36]) == (int_32)($2 + [8])) ){ goto $label$5 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$5
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	CALL $18($7)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [9435])
	
.LABEL $label$3
	$global$0 = ($2 + [48])
	return $3
	
.LABEL $label$2
	$4 = $5
	
.LABEL $label$1
	*($6) = $5
	CALL $18($4)
	$global$0 = ($2 + [48])
	return $3
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6524895285083111424, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*(($4 + [156])) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9454])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $73($7, CALL $fimport$37(*($7), *($7 + [8]), (int_64)-6524895285083111424, $6))
	if ( ((int_32)*($4 + [156]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$2
	*($4 + [164]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*(($1 + [156])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10396])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10441])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10491])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [140]) & [1]) == 0) ){ goto $label$13 }
	CALL $18(*(($6 + [148])))
	
.LABEL $label$13
	if ( ((*($6 + [124]) & [1]) == 0) ){ goto $label$14 }
	CALL $18(*(($6 + [132])))
	
.LABEL $label$14
	CALL $18($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$16 }
	if ( ((*($9 + [140]) & [1]) == 0) ){ goto $label$17 }
	CALL $18(*(($9 + [148])))
	
.LABEL $label$17
	if ( ((*($9 + [124]) & [1]) == 0) ){ goto $label$18 }
	CALL $18(*(($9 + [132])))
	
.LABEL $label$18
	CALL $18($9)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [160]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $146(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]), ($0 + [40]))
	$global$0 = ($2 + [16])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_64 $34
	int_64 $35
	$3 = ($global$0 - [496])
	$global$0 = $3
	CALL require_auth(*($0))
	*((($3 + [440]) + [32])) = [0]
	*($3 + [456]) = (int_64)-1
	$4 = *($0 + [8])
	*($3 + [440]) = $4
	*($3 + [448]) = $4
	*($3 + [464]) = (int_64)0
	$5 = CALL $66(($3 + [440]), (int_64)0, [8941])
	*((($3 + [408]) + [8])) = *(($5 + [8]))
	*($3 + [408]) = *($5)
	$6 = CALL $34((($3 + [408]) + [12]), ($5 + [12]))
	$5 = *($5 + [24])
	*($3 + [432]) = $5
	if ( ($5 & [255]) ){ goto $label$1 }
	CALL eosio_assert([0], [8963])
	
.LABEL $label$1
	*((($3 + [360]) + [32])) = (int_64)0
	*((($3 + [360]) + [40])) = [0]
	*($3 + [376]) = (int_64)-1
	*($3 + [384]) = (int_64)0
	$4 = *(($0 + [8]))
	*($3 + [360]) = $4
	*($3 + [368]) = $4
	*($3 + [352]) = ($3 + [360])
	*($3 + [160]) = (CASTING uint_64)(uint_32 $1)
	CALL $67(($3 + [344]), ($3 + [352]), ($3 + [160]))
	CALL $64(($3 + [328]))
	*($3 + [160]) = (int_64)0
	CALL $68(($3 + [320]), ($3 + [352]), ($3 + [160]))
	$5 = *($3 + [324])
	if ( ((int_32)$5 == (int_32)*($3 + [348])) ){ goto $label$2 }
	$7 = (($3 + [48]) + [28])
	$8 = ($3 + [32])
	$9 = (($3 + [88]) | [1])
	$10 = (($3 + [104]) | [1])
	$11 = (($3 + [120]) | [1])
	$12 = (($3 + [160]) + [140])
	$13 = (($3 + [160]) + [124])
	$14 = ($3 + [296])
	$15 = ($3 + [312])
	$16 = ($2 + [4])
	$17 = ($3 + [224])
	$18 = ($3 + [256])
	$19 = ($3 + [208])
	$20 = ($3 + [272])
	$21 = ($3 + [68])
	$22 = ($3 + [40])
	$23 = ($3 + [292])
	$24 = ($3 + [308])
	
.LOOP $label$3:
	CALL memcpy(($3 + [160]), $5, [124])
	CALL $34($13, ($5 + [124]))
	*($14) = *($5 + [136])
	CALL $34($12, ($5 + [140]))
	$5 = *($5 + [152])
	*($15) = $5
	if ( $5 ){ goto $label$6 }
	*($3 + [159]) = [0]
	$1 = *($16)
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$4 = *($17)
	
.LOOP $label$9:
	if ( ((int_64)*($5) == (int_64)$4) ){ goto $label$7 }
	$5 = ($5 + [16])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	*($3 + [152]) = [0]
	goto $label$6 
	
.LABEL $label$7
	*($3 + [152]) = $5
	if ( ($5 == 0) ){ goto $label$6 }
	$1 = *($3 + [324])
	if ( *(($1 + [72])) ){ goto $label$6 }
	if ( (int_64)(*(($1 + [80])) == 0) ){ goto $label$6 }
	$1 = *($18)
	$25 = *(($5 + [8]))
	$4 = *((($3 + [160]) + [80]))
	if ( ((uint_64)$4 >= (uint_64)$25) ){ goto $label$18 }
	if ( (($1 & [255]) == 0) ){ goto $label$18 }
	*($3 + [159]) = [1]
	goto $label$17 
	
.LABEL $label$18
	if ( ((uint_64)$4 <= (uint_64)$25) ){ goto $label$16 }
	*($3 + [159]) = ((int_32)$1 ^ (int_32)[1])
	if ( ($1 & [255]) ){ goto $label$10 }
	
.LABEL $label$17
	$5 = CALL $69(*($0), *($19))
	$26 = *($5 + [16])
	$27 = *($5 + [8])
	$25 = *($5)
	$28 = (($3 + [160]) + [32])
	if ( ((int_64)*($28) != (int_64)5606078067295712128) ){ goto $label$19 }
	$4 = *($0)
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$15 }
	$1 = [0]
	$29 = *([0] + [9528])
	
.LOOP $label$21:
	*(($3 + ($5 = $1))) = *(($29 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$1 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$20 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$21 }
	
.LABEL $label$20
	*(($30 = (($3 + [120]) + [8]))) = [0]
	*($3 + [120]) = (int_64)0
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$14 }
	*($3 + [120]) = ($1 << [1])
	$29 = $11
	goto $label$13 
	
.LABEL $label$19
	CALL $53($3, *((($3 + [160]) + [16])))
	$5 = CALL $45($3, [0], [9041])
	$1 = ($5 + [8])
	*((($3 + [136]) + [8])) = *($1)
	*($3 + [136]) = *($5)
	*($5) = (int_64)0
	*($1) = [0]
	if ( ((*($3) & [1]) == 0) ){ goto $label$11 }
	CALL $18(*(($3 + [8])))
	goto $label$11 
	
.LABEL $label$16
	*($3 + [159]) = [0]
	goto $label$10 
	
.LABEL $label$15
	*((($3 + [120]) + [8])) = [0]
	*($3 + [120]) = (int_64)0
	*($3 + [120]) = [0]
	$5 = $11
	goto $label$12 
	
.LABEL $label$14
	$31 = (($1 + [16]) & [-16])
	$29 = CALL $16($31)
	*($30) = $29
	*($3 + [120]) = ($31 | [1])
	*($3 + [124]) = $1
	
.LABEL $label$13
	$30 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$22:
	*(($29 + $5)) = *(($3 + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$30 != (int_32)$5) ){ goto $label$22 }
	$5 = ($29 + $1)
	
.LABEL $label$12
	*($5) = [0]
	$5 = CALL $42(($3 + [120]), [8712])
	$1 = ($5 + [8])
	*(($29 = (($3 + [480]) + [8]))) = *($1)
	*($3 + [480]) = *($5)
	*($5) = (int_64)0
	*($1) = [0]
	CALL $53(($3 + [104]), *((($3 + [160]) + [8])))
	$5 = *($3 + [104])
	$1 = ($5 & [1])
	$31 = (($3 + [104]) + [8])
	$5 = CALL $43(($3 + [480]), ( *($31) ? $10 : $1 ), ( *($3 + [108]) ? uint_32($5 >> [1]) : $1 ))
	$1 = ($5 + [8])
	*(($30 = (($3 + [48]) + [8]))) = *($1)
	*($3 + [48]) = *($5)
	*($5) = (int_64)0
	*($1) = [0]
	$5 = CALL $42(($3 + [48]), [8987])
	$1 = ($5 + [8])
	*(($32 = ($3 + [8]))) = *($1)
	*($3) = *($5)
	*($5) = (int_64)0
	*($1) = [0]
	CALL $53(($3 + [88]), *((($3 + [160]) + [16])))
	$5 = *($3 + [88])
	$1 = ($5 & [1])
	$33 = (($3 + [88]) + [8])
	$5 = CALL $43($3, ( *($33) ? $9 : $1 ), ( *($3 + [92]) ? uint_32($5 >> [1]) : $1 ))
	$1 = ($5 + [8])
	*((($3 + [136]) + [8])) = *($1)
	*($3 + [136]) = *($5)
	*($5) = (int_64)0
	*($1) = [0]
	if ( (*($3 + [88]) & [1]) ){ goto $label$32 }
	if ( (*($3) & [1]) ){ goto $label$30 }
	goto $label$31 
	
.LABEL $label$32
	CALL $18(*($33))
	if ( (*($3) & [1]) ){ goto $label$30 }
	
.LABEL $label$31
	if ( (*($3 + [48]) & [1]) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$30
	CALL $18(*($32))
	if ( (*($3 + [48]) & [1]) ){ goto $label$28 }
	
.LABEL $label$29
	if ( (*($3 + [104]) & [1]) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$28
	CALL $18(*($30))
	if ( (*($3 + [104]) & [1]) ){ goto $label$26 }
	
.LABEL $label$27
	if ( (*($3 + [480]) & [1]) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$26
	CALL $18(*($31))
	if ( (*($3 + [480]) & [1]) ){ goto $label$24 }
	
.LABEL $label$25
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$11 }
	goto $label$23 
	
.LABEL $label$24
	CALL $18(*($29))
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$23
	CALL $18(*((($3 + [120]) + [8])))
	
.LABEL $label$11
	$4 = ((int_64)$25 << (int_64)8)
	$34 = *($0)
	$35 = *($20)
	if ( (uint_64)(((int_64)$35 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$33 }
	CALL eosio_assert([0], [9565])
	
.LABEL $label$33
	$26 = ((int_64)$4 | (int_64)$26)
	$4 = ((int_64)$25 & (int_64)72057594037927935)
	$5 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$25 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$37 }
	$4 = $25
	$1 = $5
	$5 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$4 = $25
	
.LOOP $label$38:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$35 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = ((int_32)$5 < (int_32)[6])
	$29 = ($5 + [1])
	$5 = $29
	if ( $1 ){ goto $label$38 }
	$5 = ($29 + [1])
	if ( ((int_32)$29 < (int_32)[6]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	CALL eosio_assert([0], [9614])
	
.LABEL $label$34
	*(($3 + [16])) = $35
	*(($3 + [24])) = $26
	*(($3 + [8])) = *($28)
	*($3) = $34
	CALL $34($8, ($3 + [136]))
	*((($3 + [48]) + [8])) = (int_64)-3617168760277827584
	*(($1 = (($3 + [48]) + [16]))) = (int_64)0
	*(($29 = (($3 + [48]) + [24]))) = [0]
	*($3 + [48]) = $27
	$5 = CALL $16([16])
	*($1) = $5
	*($5) = $34
	*($5 + [8]) = (int_64)3617214756542218240
	*($7) = (int_64)0
	*((($3 + [48]) + [36])) = [0]
	$5 = ($5 + [16])
	*($29) = $5
	*($21) = $5
	$5 = *($8)
	$29 = ( *(($3 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($29 + [32])
	$4 = (CASTING uint_64)(uint_32 $29)
	
.LOOP $label$39:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$39 }
	if ( ($5 == 0) ){ goto $label$41 }
	CALL $70($7, $5)
	$29 = *((($3 + [48]) + [32]))
	$5 = *($7)
	goto $label$40 
	
.LABEL $label$41
	$29 = [0]
	$5 = [0]
	
.LABEL $label$40
	*((($3 + [480]) + [8])) = $29
	*($3 + [484]) = $5
	*($3 + [480]) = $5
	*($3 + [104]) = ($3 + [480])
	*($3 + [120]) = $3
	CALL $71(($3 + [120]), ($3 + [104]))
	CALL $72(($3 + [48]))
	$5 = *($7)
	if ( ($5 == 0) ){ goto $label$42 }
	*((($3 + [48]) + [32])) = $5
	CALL $18($5)
	
.LABEL $label$42
	$5 = *($1)
	if ( ($5 == 0) ){ goto $label$43 }
	*($21) = $5
	CALL $18($5)
	
.LABEL $label$43
	if ( ((*($8) & [1]) == 0) ){ goto $label$44 }
	CALL $18(*($22))
	
.LABEL $label$44
	if ( ((*($3 + [136]) & [1]) == 0) ){ goto $label$10 }
	CALL $18(*((($3 + [136]) + [8])))
	
.LABEL $label$10
	$4 = *($3 + [160])
	$1 = *((($3 + [360]) + [28]))
	$30 = *((($3 + [360]) + [24]))
	if ( ((int_32)$30 == (int_32)$1) ){ goto $label$46 }
	
.LOOP $label$48:
	$5 = ($1 + [-24])
	$29 = *($5)
	if ( ((int_64)*($29) == (int_64)$4) ){ goto $label$47 }
	$1 = $5
	if ( ((int_32)$30 != (int_32)$5) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	if ( ((int_32)$30 == (int_32)$1) ){ goto $label$46 }
	if ( ((int_32)*(($29 + [156])) == (int_32)($3 + [360])) ){ goto $label$49 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$49
	if ( $29 ){ goto $label$45 }
	goto $label$6 
	
.LABEL $label$46
	$5 = CALL db_find_i64(*($3 + [360]), *((($3 + [360]) + [8])), (int_64)-6524895285083111424, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$29 = CALL $73(($3 + [360]), $5)
	if ( ((int_32)*($29 + [156]) == (int_32)($3 + [360])) ){ goto $label$45 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$45
	$4 = *($0)
	*(($3 + [8])) = ($3 + [159])
	*($3 + [4]) = ($3 + [328])
	*($3) = ($3 + [152])
	CALL $74(($3 + [360]), $29, $4, $3)
	if ( (*($12) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($12) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $18(*($24))
	
.LABEL $label$4
	if ( ((*($13) & [1]) == 0) ){ goto $label$50 }
	CALL $18(*($23))
	
.LABEL $label$50
	CALL $75(($3 + [320]))
	$5 = *($3 + [324])
	if ( ((int_32)$5 != (int_32)*($3 + [348])) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((*($3 + [328]) & [1]) == 0) ){ goto $label$51 }
	CALL $18(*($3 + [336]))
	
.LABEL $label$51
	$13 = *($3 + [384])
	if ( ($13 == 0) ){ goto $label$52 }
	$12 = ($3 + [388])
	$1 = *($12)
	if ( ((int_32)$1 == (int_32)$13) ){ goto $label$54 }
	
.LOOP $label$55:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$56 }
	if ( ((*($5 + [140]) & [1]) == 0) ){ goto $label$57 }
	CALL $18(*(($5 + [148])))
	
.LABEL $label$57
	if ( ((*($5 + [124]) & [1]) == 0) ){ goto $label$58 }
	CALL $18(*(($5 + [132])))
	
.LABEL $label$58
	CALL $18($5)
	
.LABEL $label$56
	if ( ((int_32)$13 != (int_32)$1) ){ goto $label$55 }
	$5 = *(($3 + [384]))
	goto $label$53 
	
.LABEL $label$54
	$5 = $13
	
.LABEL $label$53
	*($12) = $13
	CALL $18($5)
	
.LABEL $label$52
	if ( ((*($6) & [1]) == 0) ){ goto $label$59 }
	CALL $18(*(($3 + [428])))
	
.LABEL $label$59
	$13 = *($3 + [464])
	if ( ($13 == 0) ){ goto $label$60 }
	$12 = ($3 + [468])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$62 }
	
.LOOP $label$63:
	$5 = ($5 + [-24])
	$1 = *($5)
	*($5) = [0]
	if ( ($1 == 0) ){ goto $label$64 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$65 }
	CALL $18(*(($1 + [20])))
	
.LABEL $label$65
	CALL $18($1)
	
.LABEL $label$64
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$63 }
	$5 = *(($3 + [464]))
	goto $label$61 
	
.LABEL $label$62
	$5 = $13
	
.LABEL $label$61
	*($12) = $13
	CALL $18($5)
	
.LABEL $label$60
	$global$0 = ($3 + [496])
}

void .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$1 = ($global$0 - [80])
	$2 = $1
	$global$0 = $1
	$3 = CALL transaction_size()
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	$4 = CALL read_transaction($1, $3)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8270])
	
.LABEL $label$1
	CALL $2(($2 + [48]), $1, $4)
	$5 = *($2 + [48])
	*($2 + [27]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$5 >> (uint_64)(int_64)56)
	$6 = *($2 + [56])
	*($2 + [19]) = (uint_64)$6 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$6 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$6 >> (uint_64)(int_64)48)
	$3 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)56)
	*($2 + [16]) = $3)
	$1 = (CASTING uint_32)(uint_64 $5)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $6)
	*($2 + [23]) = $1
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$5 = *((($2 + [48]) + [24]))
	*($2 + [39]) = $5
	$6 = *($2 + [64])
	*($2 + [43]) = (uint_64)$6 >> (uint_64)(int_64)32)
	*($2 + [42]) = (uint_64)$6 >> (uint_64)(int_64)40)
	*($2 + [41]) = (uint_64)$6 >> (uint_64)(int_64)48)
	*($2 + [40]) = (uint_64)$6 >> (uint_64)(int_64)56)
	*($2 + [35]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($2 + [34]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($2 + [33]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($2 + [32]) = (uint_64)$5 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $5)
	*($2 + [38]) = uint_32($1 >> [8])
	*($2 + [37]) = uint_32($1 >> [16])
	*($2 + [36]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $6)
	*($2 + [47]) = $1
	*($2 + [46]) = uint_32($1 >> [8])
	*($2 + [45]) = uint_32($1 >> [16])
	*($2 + [44]) = uint_32($1 >> [24])
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$1 = [1]
	
.LOOP $label$2:
	*($2) = ($3 & [255])
	if ( ((int_32)CALL $7(($2 + [14]), [8305], $2) != (int_32)[1]) ){ goto $label$3 }
	CALL $42($0, [8939])
	
.LABEL $label$3
	CALL $42($0, ($2 + [14]))
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$4 }
	$3 = *((($2 + [16]) + $1))
	$1 = ($1 + [1])
	goto $label$2 
	
.LABEL $label$4
	$global$0 = ($2 + [80])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)-6524895285083111424, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*(($4 + [156])) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9454])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $73($7, CALL $fimport$37(*($7), *($7 + [8]), (int_64)-6524895285083111424, $6))
	if ( ((int_32)*($4 + [156]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$2
	*($4 + [164]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*(($6 + [28])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9454])
	return $6
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7108797215037665280, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $76($0, $5)
	if ( ((int_32)*($6 + [28]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9454])
	return $6
	
.LABEL $label$5
	CALL eosio_assert([0], $2)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$3 }
	CALL memset($2, [0], [32])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($1 + [1])
	
.LOOP $label$5:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = $0
	
.LOOP $label$6:
	if ( (*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) ){ goto $label$2 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL $60($0, $3)
	goto $label$1 
	
.LABEL $label$2
	$4 = $1
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	return ($4 - $0)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	($0 + CALL $24($0))
	$2 = ($1 & [255])
	if ( ($2 == 0) ){ goto $label$1 }
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 == (int_32)($1 & [255])) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ($0 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = *($0)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$2 = ((int_32)$2 * (int_32)[16843009])
	
.LOOP $label$6:
	$3 = ((int_32)$3 ^ (int_32)$2)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$3 = *($0 + [4])
	$0 = ($0 + [4])
	if ( (((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$6 }
	
.LABEL $label$5
	$0 = ($0 + [-1])
	
.LOOP $label$7:
	$0 = ($0 + [1])
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)($1 & [255])) ){ goto $label$7 }
	
.LABEL $label$2
	return $0
	return .LABEL $label$1
}

void .FUNC $63 (int_32 $0)
{
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( $0 ){ goto $label$2 }
	$2 = [0]
	$0 = *([0] + [8440])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($0 + CALL $59($0, $1))
	if ( (*($2) == 0) ){ goto $label$4 }
	$0 = ($2 + CALL $61($2, $1))
	*([0] + [8440]) = $0
	if ( (*($0) == 0) ){ goto $label$3 }
	*([0] + [8440]) = ($0 + [1])
	*($0) = [0]
	return $2
	
.LABEL $label$4
	*([0] + [8440]) = [0]
	return [0]
	
.LABEL $label$3
	*([0] + [8440]) = [0]
	
.LABEL $label$1
	return $2
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [36]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10001])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10047])
	
.LABEL $label$2
	*($1 + [32]) = *(*(($3 + [4])))
	$6 = ($1 + [8])
	*($5 + [16]) = *($6)
	$7 = ($1 + [16])
	*($5 + [24]) = *($7)
	*($1 + [24]) = *(*($3))
	$8 = *($1)
	$4 = $4
	$3 = ($4 + [-48])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-12])
	*($5 + [32]) = $5
	*($5 + [44]) = $6
	*($5 + [40]) = $1
	*($5 + [48]) = $7
	*($5 + [52]) = ($1 + [24])
	*($5 + [56]) = ($1 + [32])
	CALL $142(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [40]), $2, $3, [36])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$3 = (($5 + [16]) + [8])
	*($5 + [40]) = *($6)
	if ( (CALL $25(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$4 }
	$4 = *($1 + [44])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6224682584866760320, ($5 + [32]), $8)
	*(($1 + [44])) = $4
	
.LABEL $label$5
	CALL db_idx64_update($4, $2, ($5 + [40]))
	
.LABEL $label$4
	*($5 + [40]) = *(($1 + [16]))
	if ( (CALL $25($3, ($5 + [40]), [8]) == 0) ){ goto $label$6 }
	$3 = ($1 + [48])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6224682584866760319, ($5 + [32]), $8)
	*($3) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$6
	$global$0 = ($5 + [64])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-6224682584866760320, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $97($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $141(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [16])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [10208])
	$7 = *(($6 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [32]) = *(*($5 + [16]))
	*($1 + [24]) = *(*($5 + [12]))
	$6 = $2
	$5 = ($6 + [-48])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($6 + [-12])
	*($3 + [16]) = $3
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$2 = ($1 + [16])
	*($3 + [32]) = $2
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [32])
	CALL $142(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($4 + [8]), (int_64)-6224682584866760320, *(*($0 + [8])), $7, $5, [36])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = ($4 + [8])
	$7 = *($5)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($3 + [24]) = *($6)
	*($1 + [44]) = CALL db_idx64_store($7, (int_64)-6224682584866760320, $9, $10, ($3 + [24]))
	$7 = *($0)
	$9 = *($5)
	$10 = *($1)
	*($3 + [24]) = *($2)
	*(($1 + [48])) = CALL db_idx64_store($9, (int_64)-6224682584866760319, $7, $10, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	*($5 + [58]) = $3
	*($5 + [59]) = $1
	*($5 + [57]) = $4
	CALL require_auth(*($0))
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	$6 = *($0 + [8])
	*($5 + [16]) = $6
	*($5 + [24]) = $6
	*($5 + [40]) = (int_64)0
	$4 = CALL db_find_i64($6, $6, (int_64)7108797215037665280, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $76(($5 + [16]), $4)
	if ( ((int_32)*($4 + [28]) == (int_32)($5 + [16])) ){ goto $label$4 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$4
	$6 = *($0)
	*($5 + [4]) = $2
	*($5) = ($5 + [59])
	*($5 + [8]) = ($5 + [58])
	*($5 + [12]) = ($5 + [57])
	CALL $104(($5 + [16]), $4, $6, $5)
	$1 = *($5 + [40])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = *($0)
	*($5 + [4]) = $2
	*($5) = ($5 + [59])
	*($5 + [8]) = ($5 + [58])
	*($5 + [12]) = ($5 + [57])
	*($5 + [88]) = $6
	if ( ((int_64)CALL current_receiver() == (int_64)*($5 + [16])) ){ goto $label$5 }
	CALL eosio_assert([0], [10157])
	
.LABEL $label$5
	*($5 + [68]) = $5
	*($5 + [64]) = ($5 + [16])
	*($5 + [72]) = ($5 + [88])
	*(($0 = CALL $16([40])) + [20]) = [0]
	*($0 + [12 align=4]) = (int_64)0
	*($0 + [28]) = ($5 + [16])
	CALL $105(($5 + [64]), $0)
	*($5 + [80]) = $0
	$6 = *($0)
	*($5 + [64]) = $6
	$1 = *($0 + [32])
	*($5 + [60]) = $1
	$3 = ($5 + [44])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [48]))) ){ goto $label$8 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($5 + [80]) = [0]
	*($4) = $0
	*($3) = ($4 + [24])
	$0 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($5 + [40]), ($5 + [80]), ($5 + [64]), ($5 + [60]))
	$0 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$7
	$1 = *($5 + [40])
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$9 }
	CALL $18(*(($0 + [20])))
	
.LABEL $label$9
	CALL $18($0)
	$1 = *($5 + [40])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($5 + [44])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	if ( ((*($4 + [12]) & [1]) == 0) ){ goto $label$14 }
	CALL $18(*(($4 + [20])))
	
.LABEL $label$14
	CALL $18($4)
	
.LABEL $label$13
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($5 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $1
	
.LABEL $label$10
	*($3) = $1
	CALL $18($0)
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $16(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $56($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $18($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $18($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)0
	$4 = *($0 + [4])
	*($1 + [8]) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [12])
	CALL $36($6, *($4 + [4]))
	*($1 + [24]) = *(*($4 + [8]))
	*($1 + [25]) = *(*($4 + [12]))
	$4 = *($1 + [12])
	$7 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [11])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [25])
	$9 = ($1 + [24])
	$10 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $10($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $10
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	CALL $145(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($5 + [8]), (int_64)7108797215037665280, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $11($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [28])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10001])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10047])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	$7 = ($1 + [12])
	CALL $36($7, *($3 + [4]))
	*($1 + [24]) = *(*($3 + [8]))
	*($1 + [25]) = *(*($3 + [12]))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$3
	$8 = ($1 + [25])
	$9 = ($1 + [24])
	$10 = ($1 + [8])
	$3 = *($7)
	$11 = ( *(($1 + [16])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($11 + [11])
	$12 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $10($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $10
	*($5 + [32]) = $7
	*($5 + [36]) = $9
	*($5 + [40]) = $8
	*($5 + [24]) = $1
	CALL $145(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [32]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $11($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$2 = $10
	$global$0 = $2
	*(($11 = ($10 + $5))) = [0]
	$12 = *($1)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : ((int_64)$12 < (int_64)0) ) * (int_64)((int_64)$12 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($11 + [-1])
	
.LOOP $label$5:
	$13 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$13 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $13
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$11 = ($2 - (($5 + [47]) & [496]))
	$global$0 = $11
	$14 = ( [9914] ? [9916] : *($10) )
	$9 = ((int_64)$12 / (int_64)$9)
	$15 = ($5 + [32])
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL $16($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*(($3 + [16])) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	*($3 + [12]) = $10
	*($3 + [8]) = $14
	*($3) = $9
	CALL $9($11, $15, [9902], $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL $18(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $24($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL $16($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $33($0)
}

void .FUNC $88 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	$5 = CALL db_find_i64($1, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $85(($4 + [8]), $5)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [8])) ){ goto $label$5 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$5
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $18($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [9435])
	*(($0 + [8])) = *([0] + [8])
	*($0) = *([0])
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$0 = $6
	
.LABEL $label$1
	*($7) = $6
	CALL $18($0)
	$global$0 = ($4 + [48])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [160])
	$global$0 = $2
	*($2 + [152]) = [0]
	*($2 + [144]) = (int_64)0
	if ( (*($1) & [1]) ){ goto $label$4 }
	$3 = [8712]
	$1 = CALL $62(($1 + [1]), [8712])
	*($2 + [64]) = $1
	if ( ($1 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = [8712]
	$1 = CALL $62(*($1 + [8]), [8712])
	*($2 + [64]) = $1
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$3
	$1 = [0]
	$5 = [0]
	$6 = [4]
	goto $label$1 
	
.LABEL $label$2
	$4 = ($2 + [152])
	$5 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$5 }
	$6 = [2]
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$117 
	
.LABEL $label$118
	$5 = *($2 + [148])
	if ( ((int_32)$5 == (int_32)*($4)) ){ goto $label$51 }
	$6 = [0]
	goto $label$6 
	
.LABEL $label$117
	*($5) = $1
	*($2 + [148]) = (*($2 + [148]) + [4])
	$1 = CALL $62([0], $3)
	*($2 + [64]) = $1
	if ( $1 ){ goto $label$49 }
	goto $label$50 
	
.LABEL $label$116
	CALL $94(($2 + [144]), ($2 + [64]))
	$1 = CALL $62([0], $3)
	*($2 + [64]) = $1
	if ( $1 ){ goto $label$48 }
	$6 = [3]
	goto $label$6 
	
.LABEL $label$115
	$1 = *($2 + [144])
	$5 = *($2 + [148])
	goto $label$47 
	
.LABEL $label$114
	if ( ((uint_32)int_32(($5 - $1) >> [2]) > (uint_32)[10]) ){ goto $label$46 }
	$6 = [66]
	goto $label$6 
	
.LABEL $label$113
	*($0 + [8]) = (int_64)0
	*($0) = [0]
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = [0]
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = [0]
	*($0 + [60]) = [0]
	*($0 + [64 align=4]) = (int_64)0
	*(($0 + [72])) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	$6 = [49]
	goto $label$6 
	
.LABEL $label$112
	*($2 + [148]) = $1
	CALL $18($1)
	$6 = [50]
	goto $label$6 
	
.LABEL $label$111
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$110
	*(($2 + [136])) = [0]
	*($2 + [72]) = (int_64)0
	*($2 + [64]) = [1]
	*($2 + [80]) = (int_64)0
	*($2 + [88]) = (int_64)0
	*($2 + [96]) = (int_64)0
	*($2 + [104]) = [0]
	*($2 + [112]) = (int_64)0
	*($2 + [120]) = [0]
	*($2 + [124]) = [0]
	*($2 + [128]) = (int_64)0
	$3 = *($1 + [4])
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$1 = CALL $24($3)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$45 }
	$6 = [6]
	goto $label$6 
	
.LABEL $label$109
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$44 }
	$6 = [64]
	goto $label$6 
	
.LABEL $label$108
	*($2 + [48]) = ($1 << [1])
	$5 = (($2 + [48]) | [1])
	if ( $1 ){ goto $label$42 }
	goto $label$43 
	
.LABEL $label$107
	$4 = (($1 + [16]) & [-16])
	$5 = CALL $16($4)
	*($2 + [48]) = ($4 | [1])
	*($2 + [56]) = $5
	*($2 + [52]) = $1
	$6 = [8]
	goto $label$6 
	
.LABEL $label$106
	CALL memcpy($5, $3, $1)
	$6 = [9]
	goto $label$6 
	
.LABEL $label$105
	*(($5 + $1)) = [0]
	*((($2 + [64]) + [8])) = CALL $50(($2 + [48]), [0], [10])
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$41 }
	$6 = [10]
	goto $label$6 
	
.LABEL $label$104
	CALL $18(*($2 + [56]))
	$6 = [11]
	goto $label$6 
	
.LABEL $label$103
	$3 = *(*($2 + [144]) + [8])
	*((($2 + [48]) + [8])) = [0]
	*($2 + [48]) = (int_64)0
	$1 = CALL $24($3)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$40 }
	$6 = [12]
	goto $label$6 
	
.LABEL $label$102
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$39 }
	$6 = [62]
	goto $label$6 
	
.LABEL $label$101
	*($2 + [48]) = ($1 << [1])
	$5 = (($2 + [48]) | [1])
	if ( $1 ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$100
	$4 = (($1 + [16]) & [-16])
	$5 = CALL $16($4)
	*($2 + [48]) = ($4 | [1])
	*($2 + [56]) = $5
	*($2 + [52]) = $1
	$6 = [14]
	goto $label$6 
	
.LABEL $label$99
	CALL memcpy($5, $3, $1)
	$6 = [15]
	goto $label$6 
	
.LABEL $label$98
	*(($5 + $1)) = [0]
	*(($2 + [80])) = CALL $50(($2 + [48]), [0], [10])
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$36 }
	$6 = [16]
	goto $label$6 
	
.LABEL $label$97
	CALL $18(*($2 + [56]))
	$6 = [17]
	goto $label$6 
	
.LABEL $label$96
	$1 = *(*($2 + [144]) + [12])
	*($2 + [40]) = $1
	*($2 + [44]) = CALL $24($1)
	*($2 + [8]) = *($2 + [40])
	*(($2 + [88])) = *(CALL $95(($2 + [48]), ($2 + [8])))
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$3 = *(*($2 + [144]) + [16])
	$1 = CALL $24($3)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$35 }
	$6 = [18]
	goto $label$6 
	
.LABEL $label$95
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$34 }
	$6 = [60]
	goto $label$6 
	
.LABEL $label$94
	*($2 + [48]) = ($1 << [1])
	$5 = (($2 + [48]) | [1])
	if ( $1 ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$93
	$4 = (($1 + [16]) & [-16])
	$5 = CALL $16($4)
	*($2 + [48]) = ($4 | [1])
	*($2 + [56]) = $5
	*($2 + [52]) = $1
	$6 = [20]
	goto $label$6 
	
.LABEL $label$92
	CALL memcpy($5, $3, $1)
	$6 = [21]
	goto $label$6 
	
.LABEL $label$91
	*(($5 + $1)) = [0]
	*(($2 + [96])) = CALL $50(($2 + [48]), [0], [10])
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$31 }
	$6 = [22]
	goto $label$6 
	
.LABEL $label$90
	CALL $18(*($2 + [56]))
	$6 = [23]
	goto $label$6 
	
.LABEL $label$89
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$3 = *(*($2 + [144]) + [20])
	$1 = CALL $24($3)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$30 }
	$6 = [24]
	goto $label$6 
	
.LABEL $label$88
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$29 }
	$6 = [58]
	goto $label$6 
	
.LABEL $label$87
	*($2 + [48]) = ($1 << [1])
	$5 = (($2 + [48]) | [1])
	if ( $1 ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$86
	$4 = (($1 + [16]) & [-16])
	$5 = CALL $16($4)
	*($2 + [48]) = ($4 | [1])
	*($2 + [56]) = $5
	*($2 + [52]) = $1
	$6 = [26]
	goto $label$6 
	
.LABEL $label$85
	CALL memcpy($5, $3, $1)
	$6 = [27]
	goto $label$6 
	
.LABEL $label$84
	*(($5 + $1)) = [0]
	*(($2 + [104])) = CALL $47(($2 + [48]), [0], [10])
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$26 }
	$6 = [28]
	goto $label$6 
	
.LABEL $label$83
	CALL $18(*($2 + [56]))
	$6 = [29]
	goto $label$6 
	
.LABEL $label$82
	$1 = *(*($2 + [144]) + [24])
	*($2 + [32]) = $1
	*($2 + [36]) = CALL $24($1)
	*($2) = *($2 + [32])
	*(($2 + [112])) = *(CALL $95(($2 + [48]), $2))
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$3 = *(*($2 + [144]) + [28])
	$1 = CALL $24($3)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$25 }
	$6 = [30]
	goto $label$6 
	
.LABEL $label$81
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$24 }
	$6 = [56]
	goto $label$6 
	
.LABEL $label$80
	*($2 + [16]) = ($1 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $1 ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$79
	$4 = (($1 + [16]) & [-16])
	$5 = CALL $16($4)
	*($2 + [16]) = ($4 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $1
	$6 = [32]
	goto $label$6 
	
.LABEL $label$78
	CALL memcpy($5, $3, $1)
	$6 = [33]
	goto $label$6 
	
.LABEL $label$77
	*(($5 + $1)) = [0]
	$1 = [-1]
	$5 = ($5 & [1])
	$5 = *($2 + [16])
	$3 = CALL $24([9895])
	if ( ((int_32)$3 != (int_32)( *($2 + [20]) ? uint_32($5 >> [1]) : $5 )) ){ goto $label$21 }
	$6 = [55]
	goto $label$6 
	
.LABEL $label$76
	$1 = ( [-1] ? [0] : CALL $46(($2 + [16]), [0], [-1], [9895], $3) )
	$5 = (*($2 + [16]) & [1])
	$6 = [34]
	goto $label$6 
	
.LABEL $label$75
	*(($2 + [120])) = $1
	if ( ($5 == 0) ){ goto $label$20 }
	$6 = [35]
	goto $label$6 
	
.LABEL $label$74
	CALL $18(*($2 + [24]))
	$6 = [36]
	goto $label$6 
	
.LABEL $label$73
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$3 = *(*($2 + [144]) + [32])
	$1 = CALL $24($3)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$19 }
	$6 = [37]
	goto $label$6 
	
.LABEL $label$72
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$18 }
	$6 = [53]
	goto $label$6 
	
.LABEL $label$71
	*($2 + [48]) = ($1 << [1])
	$5 = (($2 + [48]) | [1])
	if ( $1 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$70
	$4 = (($1 + [16]) & [-16])
	$5 = CALL $16($4)
	*($2 + [48]) = ($4 | [1])
	*($2 + [56]) = $5
	*($2 + [52]) = $1
	$6 = [39]
	goto $label$6 
	
.LABEL $label$69
	CALL memcpy($5, $3, $1)
	$6 = [40]
	goto $label$6 
	
.LABEL $label$68
	*(($5 + $1)) = [0]
	*(($2 + [124])) = CALL $47(($2 + [48]), [0], [10])
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$15 }
	$6 = [41]
	goto $label$6 
	
.LABEL $label$67
	CALL $18(*($2 + [56]))
	$6 = [42]
	goto $label$6 
	
.LABEL $label$66
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$5 = *(*($2 + [144]) + [36])
	$1 = CALL $24($5)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	$6 = [43]
	goto $label$6 
	
.LABEL $label$65
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$13 }
	$6 = [51]
	goto $label$6 
	
.LABEL $label$64
	*($2 + [48]) = ($1 << [1])
	$3 = (($2 + [48]) | [1])
	if ( $1 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$63
	$4 = (($1 + [16]) & [-16])
	$3 = CALL $16($4)
	*($2 + [48]) = ($4 | [1])
	*($2 + [56]) = $3
	*($2 + [52]) = $1
	$6 = [45]
	goto $label$6 
	
.LABEL $label$62
	CALL memcpy($3, $5, $1)
	$6 = [46]
	goto $label$6 
	
.LABEL $label$61
	$5 = ($2 + [128])
	*(($3 + $1)) = [0]
	*(($2 + [125])) = CALL $47(($2 + [48]), [0], [10])
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$10 }
	$6 = [47]
	goto $label$6 
	
.LABEL $label$60
	CALL $18(*($2 + [56]))
	$6 = [48]
	goto $label$6 
	
.LABEL $label$59
	CALL $39($5, *(*($2 + [144]) + [40]))
	*(($0 + [54])) = *((($2 + [64]) + [54]))
	*(($0 + [48])) = *((($2 + [64]) + [48]))
	*(($0 + [40])) = *((($2 + [64]) + [40]))
	*(($0 + [32])) = *((($2 + [64]) + [32]))
	*(($0 + [24])) = *((($2 + [64]) + [24]))
	*(($0 + [16])) = *((($2 + [64]) + [16]))
	*(($0 + [8])) = *((($2 + [64]) + [8]))
	*($0) = *($2 + [64])
	*($0 + [64 align=4]) = *($5)
	*(($0 + [72])) = *(($5 + [8]))
	$1 = *($2 + [144])
	if ( $1 ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$58
	CALL $33(($2 + [48]))
	
.LABEL $label$57
	CALL $33(($2 + [48]))
	
.LABEL $label$56
	CALL $33(($2 + [48]))
	
.LABEL $label$55
	CALL $33(($2 + [48]))
	
.LABEL $label$54
	CALL $33(($2 + [16]))
	
.LABEL $label$53
	CALL $33(($2 + [48]))
	
.LABEL $label$52
	CALL $33(($2 + [48]))
	
.LABEL $label$51
	$6 = [2]
	goto $label$6 
	
.LABEL $label$50
	$6 = [3]
	goto $label$6 
	
.LABEL $label$49
	$6 = [1]
	goto $label$6 
	
.LABEL $label$48
	$6 = [1]
	goto $label$6 
	
.LABEL $label$47
	$6 = [4]
	goto $label$6 
	
.LABEL $label$46
	$6 = [5]
	goto $label$6 
	
.LABEL $label$45
	$6 = [65]
	goto $label$6 
	
.LABEL $label$44
	$6 = [7]
	goto $label$6 
	
.LABEL $label$43
	$6 = [9]
	goto $label$6 
	
.LABEL $label$42
	$6 = [8]
	goto $label$6 
	
.LABEL $label$41
	$6 = [11]
	goto $label$6 
	
.LABEL $label$40
	$6 = [63]
	goto $label$6 
	
.LABEL $label$39
	$6 = [13]
	goto $label$6 
	
.LABEL $label$38
	$6 = [15]
	goto $label$6 
	
.LABEL $label$37
	$6 = [14]
	goto $label$6 
	
.LABEL $label$36
	$6 = [17]
	goto $label$6 
	
.LABEL $label$35
	$6 = [61]
	goto $label$6 
	
.LABEL $label$34
	$6 = [19]
	goto $label$6 
	
.LABEL $label$33
	$6 = [21]
	goto $label$6 
	
.LABEL $label$32
	$6 = [20]
	goto $label$6 
	
.LABEL $label$31
	$6 = [23]
	goto $label$6 
	
.LABEL $label$30
	$6 = [59]
	goto $label$6 
	
.LABEL $label$29
	$6 = [25]
	goto $label$6 
	
.LABEL $label$28
	$6 = [27]
	goto $label$6 
	
.LABEL $label$27
	$6 = [26]
	goto $label$6 
	
.LABEL $label$26
	$6 = [29]
	goto $label$6 
	
.LABEL $label$25
	$6 = [57]
	goto $label$6 
	
.LABEL $label$24
	$6 = [31]
	goto $label$6 
	
.LABEL $label$23
	$6 = [33]
	goto $label$6 
	
.LABEL $label$22
	$6 = [32]
	goto $label$6 
	
.LABEL $label$21
	$6 = [34]
	goto $label$6 
	
.LABEL $label$20
	$6 = [36]
	goto $label$6 
	
.LABEL $label$19
	$6 = [54]
	goto $label$6 
	
.LABEL $label$18
	$6 = [38]
	goto $label$6 
	
.LABEL $label$17
	$6 = [40]
	goto $label$6 
	
.LABEL $label$16
	$6 = [39]
	goto $label$6 
	
.LABEL $label$15
	$6 = [42]
	goto $label$6 
	
.LABEL $label$14
	$6 = [52]
	goto $label$6 
	
.LABEL $label$13
	$6 = [44]
	goto $label$6 
	
.LABEL $label$12
	$6 = [46]
	goto $label$6 
	
.LABEL $label$11
	$6 = [45]
	goto $label$6 
	
.LABEL $label$10
	$6 = [48]
	goto $label$6 
	
.LABEL $label$9
	$6 = [50]
	goto $label$6 
	
.LABEL $label$8
	$6 = [49]
	goto $label$6 
	
.LABEL $label$7
	$6 = [50]
	goto $label$6 
	$6
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [512])
	$global$0 = $5
	*($5 + [504]) = $1
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	$4 = CALL $34(($5 + [408]), $4)
	CALL $87(($5 + [424]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL $18(*($4 + [8]))
	
.LABEL $label$2
	if ( (*($5 + [424]) == 0) ){ goto $label$3 }
	if ( ((int_64)*($5 + [432]) == (int_64)0) ){ goto $label$8 }
	if ( ((int_32)*($5 + [480]) == (int_32)[-1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [9134])
	if ( ((int_32)*($5 + [480]) != (int_32)[-1]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [9150])
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)*($0) == (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8812])
	
.LABEL $label$4
	$1 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$1 = $6
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	$1 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$7 = ($0 + [1])
	$0 = $7
	if ( $4 ){ goto $label$15 }
	$0 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = (int_64)0
	if ( ((int_64)*($3) <= (int_64)0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert([0], [9170])
	$1 = (int_64)0
	if ( ((int_64)*($3) > (int_64)0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert([0], [9187])
	
.LABEL $label$9
	*(($5 + [400])) = [0]
	*($5 + [376]) = $2
	*($5 + [368]) = $2
	*($5 + [384]) = (int_64)-1
	*($5 + [392]) = $1
	$0 = CALL $66(($5 + [368]), $1, [8941])
	*((($5 + [336]) + [8])) = *(($0 + [8]))
	*($5 + [336]) = *($0)
	$8 = CALL $34((($5 + [336]) + [12]), ($0 + [12]))
	*($5 + [360]) = *($0 + [24])
	$0 = ($3 + [8])
	$4 = CALL $69($2, (uint_64)*($0) >> (uint_64)(int_64)8)
	$6 = *($4) + [24])
	CALL $88(($5 + [320]), *($4 + [8]), $2, (uint_64)*($0) >> (uint_64)(int_64)8))
	$9 = *($5 + [320])
	CALL $89(($5 + [64]), ($5 + [320]))
	$0 = CALL $45(($5 + [64]), [0], [9218])
	$4 = ($0 + [8])
	*((($5 + [248]) + [8])) = *($4)
	*($5 + [248]) = *($0)
	*($0) = $1
	*($4) = [0]
	$0 = CALL $42(($5 + [248]), [9236])
	$4 = ($0 + [8])
	*((($5 + [160]) + [8])) = *($4)
	*($5 + [160]) = *($0)
	*($0) = $1
	*($4) = [0]
	if ( (uint_64)($9 <= $6) ){ goto $label$22 }
	$0 = [1]
	if ( (*($5 + [160]) & [1]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL eosio_assert([0], ( *($5 + [168]) ? (($5 + [160]) | [1]) : (*($5 + [160]) & [1]) ))
	$0 = [1]
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL $18(*($5 + [168]))
	if ( ((*($5 + [248]) & $0) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( (*($5 + [248]) & $0) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$18
	CALL $18(*($5 + [256]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL $18(*($5 + [72]))
	
.LABEL $label$16
	$0 = (CASTING uint_32)(uint_64 ((int_64)CALL $57() / (int_64)1000000))
	*($5 + [316]) = $0
	if ( *($5 + [361]) ){ goto $label$23 }
	if ( ((int_32)CALL $58((*($5 + [464]) - $0)) < (int_32)*($5 + [344])) ){ goto $label$24 }
	CALL eosio_assert([0], [9251])
	
.LABEL $label$24
	$7 = CALL $34(($5 + [232]), ($5 + [488]))
	$0 = ($5 + [248])
	$10 = ($5 + [168])
	$4 = [0]
	
.LOOP $label$25:
	*($0) = CALL $47(CALL $35(($5 + [160]), $7, $4, [2], $7), [0], [16])
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$26 }
	CALL $18(*($10))
	
.LABEL $label$26
	$0 = ($0 + [1])
	$4 = ($4 + [2])
	if ( ((int_32)$4 != (int_32)[130]) ){ goto $label$25 }
	if ( ((*($7) & [1]) == 0) ){ goto $label$27 }
	CALL $18(*($7 + [8]))
	
.LABEL $label$27
	*($5 + [160]) = [0]
	CALL memcpy((($5 + [160]) | [4]), ($5 + [248]), [65])
	$7 = CALL $34(($5 + [104]), $8)
	$0 = ($5 + [120])
	$10 = ($5 + [72])
	$4 = [0]
	
.LOOP $label$28:
	*($0) = CALL $47(CALL $35(($5 + [64]), $7, $4, [2], $7), [0], [16])
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$29 }
	CALL $18(*($10))
	
.LABEL $label$29
	$0 = ($0 + [1])
	$4 = ($4 + [2])
	if ( ((int_32)$4 != (int_32)[66]) ){ goto $label$28 }
	if ( ((*($7) & [1]) == 0) ){ goto $label$30 }
	CALL $18(*($7 + [8]))
	
.LABEL $label$30
	*(($5 + [76])) = *((($5 + [120]) + [8]))
	*(($5 + [84])) = *(($5 + [136]))
	*(($5 + [92])) = *(($5 + [144]))
	*(($5 + [100])) = *(($5 + [152]))
	*($5 + [64]) = [0]
	*($5 + [68 align=4]) = *($5 + [120])
	CALL $90(($5 + [48]), ($5 + [424]), [0])
	$0 = *($5 + [48])
	$4 = ($0 & [1])
	CALL $2(($5 + [16]), ( *($5 + [56]) ? (($5 + [48]) | [1]) : $4 ), ( *($5 + [52]) ? uint_32($0 >> [1]) : $4 ))
	CALL $3(($5 + [16]), ($5 + [160]), ($5 + [64]))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$23 }
	CALL $18(*((($5 + [48]) + [8])))
	
.LABEL $label$23
	if ( (((*($5 + [484]) + [-2]) & [255]) <= [9]) ){ goto $label$31 }
	CALL eosio_assert([0], [9270])
	
.LABEL $label$31
	$4 = [0]
	*(($5 + [280])) = [0]
	*($5 + [256]) = $2
	*($5 + [248]) = $2
	*($5 + [264]) = (int_64)-1
	*($5 + [284]) = [0]
	*($5 + [272]) = (int_64)0
	$11 = CALL $91($5, ($5 + [248]), *($5 + [472]), (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	*($5 + [12]) = $11)
	$1 = *($5 + [472])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$35 }
	$7 = *([0] + [9528])
	
.LOOP $label$37:
	*((($5 + [160]) + ($0 = $4))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$0 == (int_32)[12]) )))))
	$4 = ($0 + [1])
	if ( ((uint_32)$0 > (uint_32)[11]) ){ goto $label$36 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$37 }
	
.LABEL $label$36
	*(($5 + [56])) = [0]
	*($5 + [48]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$34 }
	*($5 + [48]) = ($4 << [1])
	$7 = (($5 + [48]) | [1])
	goto $label$33 
	
.LABEL $label$35
	*((($5 + [48]) + [8])) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [48]) = [0]
	$0 = (($5 + [48]) | [1])
	goto $label$32 
	
.LABEL $label$34
	$10 = (($4 + [16]) & [-16])
	$7 = CALL $16($10)
	*($5 + [48]) = ($10 | [1])
	*($5 + [56]) = $7
	*($5 + [52]) = $4
	
.LABEL $label$33
	$10 = ($0 + [1])
	$0 = [0]
	
.LOOP $label$38:
	*(($7 + $0)) = *((($5 + [160]) + $0))
	$0 = ($0 + [1])
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$38 }
	$0 = ($7 + $4)
	
.LABEL $label$32
	$4 = [0]
	*($0) = [0]
	$0 = CALL $45(($5 + [48]), [0], [9338])
	$7 = ($0 + [8])
	*((($5 + [16]) + [8])) = *($7)
	*($5 + [16]) = *($0)
	*($0) = (int_64)0
	*($7) = [0]
	$0 = CALL $42(($5 + [16]), [9354])
	$7 = ($0 + [8])
	*((($5 + [120]) + [8])) = *($7)
	*($5 + [120]) = *($0)
	*($0) = (int_64)0
	*($7) = [0]
	$1 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8
	if ( (int_64)($1) == 0) ){ goto $label$42 }
	
.LOOP $label$44:
	*((($5 + [160]) + ($0 = $4))) = $1
	$4 = ($0 + [1])
	if ( ((uint_32)$0 > (uint_32)[5]) ){ goto $label$43 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$44 }
	
.LABEL $label$43
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$41 }
	*($5) = ($4 << [1])
	$7 = ($5 | [1])
	goto $label$40 
	
.LABEL $label$42
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	*($5) = [0]
	$0 = ($5 | [1])
	$4 = $0
	goto $label$39 
	
.LABEL $label$41
	$10 = (($4 + [16]) & [-16])
	$7 = CALL $16($10)
	*($5) = ($10 | [1])
	*($5 + [8]) = $7
	*($5 + [4]) = $4
	
.LABEL $label$40
	$10 = ($0 + [1])
	$0 = [0]
	
.LOOP $label$45:
	*(($7 + $0)) = *((($5 + [160]) + $0))
	$0 = ($0 + [1])
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$45 }
	$4 = ($7 + $4)
	$0 = ($5 | [1])
	
.LABEL $label$39
	*($4) = [0]
	$4 = *($5)
	$7 = ($4 & [1])
	$0 = CALL $43(($5 + [120]), ( *($5 + [8]) ? $0 : $7 ), ( *($5 + [4]) ? uint_32($4 >> [1]) : $7 ))
	$4 = ($0 + [8])
	*((($5 + [64]) + [8])) = *($4)
	*($5 + [64]) = *($0)
	*($0) = (int_64)0
	*($4) = [0]
	$0 = CALL $42(($5 + [64]), [9356])
	$4 = ($0 + [8])
	*((($5 + [160]) + [8])) = *($4)
	*($5 + [160]) = *($0)
	*($0) = (int_64)0
	*($4) = [0]
	if ( ($11 == 0) ){ goto $label$58 }
	if ( (*($5 + [160]) & [1]) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	CALL eosio_assert([0], ( *($5 + [168]) ? (($5 + [160]) | [1]) : (*($5 + [160]) & [1]) ))
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$56 }
	
.LABEL $label$57
	CALL $18(*($5 + [168]))
	$0 = [1]
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$0 = [1]
	if ( (*($5 + [64]) & [1]) ){ goto $label$54 }
	
.LABEL $label$55
	if ( (*($5) & $0) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	CALL $18(*($5 + [72]))
	if ( ((*($5) & $0) == 0) ){ goto $label$52 }
	
.LABEL $label$53
	CALL $18(*(($5 + [8])))
	$0 = [1]
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$0 = [1]
	if ( (*($5 + [120]) & [1]) ){ goto $label$50 }
	
.LABEL $label$51
	if ( (*($5 + [16]) & $0) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	CALL $18(*($5 + [128]))
	if ( ((*($5 + [16]) & $0) == 0) ){ goto $label$48 }
	
.LABEL $label$49
	CALL $18(*($5 + [24]))
	if ( (*($5 + [48]) & [1]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL $18(*($5 + [56]))
	
.LABEL $label$46
	$6 = *($3)
	$9 = *(*($5 + [12]) + [24])
	$1 = *(($5 + [472]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$62 }
	$4 = [0]
	$7 = *([0] + [9528])
	
.LOOP $label$64:
	*((($5 + [160]) + ($0 = $4))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$0 == (int_32)[12]) )))))
	$4 = ($0 + [1])
	if ( ((uint_32)$0 > (uint_32)[11]) ){ goto $label$63 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$64 }
	
.LABEL $label$63
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$61 }
	*($5 + [16]) = ($4 << [1])
	$7 = (($5 + [16]) | [1])
	goto $label$60 
	
.LABEL $label$62
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	*($5 + [16]) = [0]
	$0 = (($5 + [16]) | [1])
	goto $label$59 
	
.LABEL $label$61
	$10 = (($4 + [16]) & [-16])
	$7 = CALL $16($10)
	*($5 + [16]) = ($10 | [1])
	*($5 + [24]) = $7
	*($5 + [20]) = $4
	
.LABEL $label$60
	$10 = ($0 + [1])
	$0 = [0]
	
.LOOP $label$65:
	*(($7 + $0)) = *((($5 + [160]) + $0))
	$0 = ($0 + [1])
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$65 }
	$0 = ($7 + $4)
	
.LABEL $label$59
	*($0) = [0]
	$0 = CALL $45(($5 + [16]), [0], [9368])
	$4 = ($0 + [8])
	*((($5 + [120]) + [8])) = *($4)
	*($5 + [120]) = *($0)
	*($0) = (int_64)0
	*($4) = [0]
	$0 = CALL $42(($5 + [120]), [8870])
	$4 = ($0 + [8])
	*((($5 + [64]) + [8])) = *($4)
	*($5 + [64]) = *($0)
	*($0) = (int_64)0
	*($4) = [0]
	CALL $53(($5 + [48]), *(*($5 + [12]) + [24]))
	$0 = *($5 + [48])
	$4 = ($0 & [1])
	$0 = CALL $43(($5 + [64]), ( *($5 + [56]) ? (($5 + [48]) | [1]) : $4 ), ( *($5 + [52]) ? uint_32($0 >> [1]) : $4 ))
	$4 = ($0 + [8])
	*((($5 + [160]) + [8])) = *($4)
	*($5 + [160]) = *($0)
	*($0) = (int_64)0
	*($4) = [0]
	if ( ((uint_64)$6 > (uint_64)$9) ){ goto $label$76 }
	if ( (*($5 + [160]) & [1]) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	CALL eosio_assert([0], ( *($5 + [168]) ? (($5 + [160]) | [1]) : (*($5 + [160]) & [1]) ))
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$74 }
	
.LABEL $label$75
	CALL $18(*($5 + [168]))
	$0 = [1]
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	$0 = [1]
	if ( (*($5 + [48]) & [1]) ){ goto $label$72 }
	
.LABEL $label$73
	if ( (*($5 + [64]) & $0) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$72
	CALL $18(*(($5 + [56])))
	if ( ((*($5 + [64]) & $0) == 0) ){ goto $label$70 }
	
.LABEL $label$71
	CALL $18(*($5 + [72]))
	$0 = [1]
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$0 = [1]
	if ( (*($5 + [120]) & [1]) ){ goto $label$68 }
	
.LABEL $label$69
	if ( ((*($5 + [16]) & $0) == 0) ){ goto $label$66 }
	goto $label$67 
	
.LABEL $label$68
	CALL $18(*($5 + [128]))
	if ( ((*($5 + [16]) & $0) == 0) ){ goto $label$66 }
	
.LABEL $label$67
	CALL $18(*($5 + [24]))
	
.LABEL $label$66
	CALL require_recipient((int_64)5606078076466343568)
	*(($7 = ($5 + [192]))) = (int_64)0
	*(($5 + [200])) = [0]
	*($5 + [168]) = $2
	*($5 + [160]) = $2
	*($5 + [176]) = (int_64)-1
	*($5 + [184]) = (int_64)0
	*($5 + [76]) = $3
	*($5 + [68]) = ($5 + [424])
	*($5 + [64]) = ($5 + [160])
	*($5 + [72]) = ($5 + [504])
	*($5 + [80]) = ($5 + [12])
	*($5 + [84]) = ($5 + [316])
	*($5 + [16]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($5 + [160])) ){ goto $label$77 }
	CALL eosio_assert([0], [10157])
	
.LABEL $label$77
	*($5 + [124]) = ($5 + [64])
	*($5 + [120]) = ($5 + [160])
	*($5 + [128]) = ($5 + [16])
	*(($0 = CALL $16([184])) + [32]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [124 align=4]) = (int_64)0
	*($0 + [132]) = [0]
	*($0 + [140 align=4]) = (int_64)0
	*($0 + [148]) = [0]
	*($0 + [156]) = ($5 + [160])
	CALL $92(($5 + [120]), $0)
	*($5 + [48]) = $0
	$1 = *($0)
	*($5 + [120]) = $1
	$10 = *($0 + [160])
	*($5) = $10
	$3 = ($5 + [188])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*($7)) ){ goto $label$82 }
	*($4 + [8]) = $1
	*($4 + [16]) = $10
	*($5 + [48]) = [0]
	*($4) = $0
	*($3) = ($4 + [24])
	$0 = *($5 + [48])
	*($5 + [48]) = [0]
	if ( ($0 == 0) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	CALL $93(($5 + [184]), ($5 + [48]), ($5 + [120]), $5)
	$0 = *($5 + [48])
	*($5 + [48]) = [0]
	if ( $0 ){ goto $label$80 }
	
.LABEL $label$81
	$7 = *($5 + [184])
	if ( ($7 == 0) ){ goto $label$78 }
	goto $label$79 
	
.LABEL $label$80
	if ( ((*($0 + [140]) & [1]) == 0) ){ goto $label$83 }
	CALL $18(*(($0 + [148])))
	
.LABEL $label$83
	if ( ((*($0 + [124]) & [1]) == 0) ){ goto $label$84 }
	CALL $18(*(($0 + [132])))
	
.LABEL $label$84
	CALL $18($0)
	$7 = *($5 + [184])
	if ( ($7 == 0) ){ goto $label$78 }
	
.LABEL $label$79
	$10 = ($5 + [188])
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$86 }
	
.LOOP $label$87:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$88 }
	if ( ((*($0 + [140]) & [1]) == 0) ){ goto $label$89 }
	CALL $18(*(($0 + [148])))
	
.LABEL $label$89
	if ( ((*($0 + [124]) & [1]) == 0) ){ goto $label$90 }
	CALL $18(*(($0 + [132])))
	
.LABEL $label$90
	CALL $18($0)
	
.LABEL $label$88
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$87 }
	$0 = *(($5 + [184]))
	goto $label$85 
	
.LABEL $label$86
	$0 = $7
	
.LABEL $label$85
	*($10) = $7
	CALL $18($0)
	
.LABEL $label$78
	$7 = *($5 + [272])
	if ( ($7 == 0) ){ goto $label$91 }
	$10 = ($5 + [276])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$93 }
	
.LOOP $label$94:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$95 }
	CALL $18($4)
	
.LABEL $label$95
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$94 }
	$0 = *(($5 + [272]))
	goto $label$92 
	
.LABEL $label$93
	$0 = $7
	
.LABEL $label$92
	*($10) = $7
	CALL $18($0)
	
.LABEL $label$91
	if ( ((*($8) & [1]) == 0) ){ goto $label$96 }
	CALL $18(*(($5 + [356])))
	
.LABEL $label$96
	$7 = *($5 + [392])
	if ( ($7 == 0) ){ goto $label$3 }
	$10 = ($5 + [396])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$98 }
	
.LOOP $label$99:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$100 }
	if ( ((*($4 + [12]) & [1]) == 0) ){ goto $label$101 }
	CALL $18(*(($4 + [20])))
	
.LABEL $label$101
	CALL $18($4)
	
.LABEL $label$100
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$99 }
	$0 = *(($5 + [392]))
	goto $label$97 
	
.LABEL $label$98
	$0 = $7
	
.LABEL $label$97
	*($10) = $7
	CALL $18($0)
	
.LABEL $label$3
	if ( ((*($5 + [488]) & [1]) == 0) ){ goto $label$1 }
	CALL $18(*(($5 + [496])))
	
.LABEL $label$1
	$global$0 = ($5 + [512])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9505])
	
.LABEL $label$5
	$2 = CALL $10($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $16([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $133(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $11($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $18($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [80])
	$global$0 = $5
	*($5 + [40]) = [0]
	*($5 + [32]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$9 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($9 == 0) ){ goto $label$2 }
	$6 = int_32($9 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $16($9)
	$6 = ($8 + ($6 << [4]))
	*((($5 + [32]) + [8])) = $6
	*($5 + [32]) = $8
	*($5 + [36]) = $8
	$9 = *(($1 + [8]))
	$7 = (*(($1 + [12])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $9, $7)
	$7 = ($8 + $7)
	*($5 + [36]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*($0) = *($1)
	*($0 + [8]) = (int_64)-6533262907872903168
	*($0 + [16]) = $8
	*(($0 + [20])) = $7
	*(($0 + [24])) = $6
	*(($5 + [40])) = [0]
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($5 + [24]) = *($4)
	CALL $70(($0 + [28]), [24])
	$1 = *(($0 + [32]))
	$0 = *($0 + [28])
	*($5 + [52]) = $0
	*($5 + [48]) = $0
	*($5 + [56]) = $1
	*($5 + [64]) = ($5 + [48])
	*($5 + [72]) = ($5 + [8])
	CALL $139(($5 + [72]), ($5 + [64]))
	$0 = *($5 + [32])
	if ( ($0 == 0) ){ goto $label$4 }
	*($5 + [36]) = $0
	CALL $18($0)
	
.LABEL $label$4
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $56(($5 + [32]))
}

int_32 .FUNC $83 (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	$5 = CALL db_find_i64($0, $1, (int_64)3607749779137757184, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = [1]
	if ( ((int_32)*(CALL $85(($3 + [8]), $5) + [16]) == (int_32)($3 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$1
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($3 + [36])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $18($8)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	$5 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$5 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL $18($5)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
	return $4
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9505])
	
.LABEL $label$5
	$2 = CALL $10($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $16([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $132(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $11($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $18($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $81 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [48]) = $1
	CALL require_auth($1)
	if ( ((int_64)$1 != (int_64)5606078067295712128) ){ goto $label$5 }
	$5 = [0]
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = $2
	*($4 + [56]) = (int_64)5606078067295712128
	$6 = CALL db_find_i64((int_64)5606078067295712128, $2, (int_64)3904810955002871808, (int_64)86102404846148)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$5 = [1]
	if ( ((int_32)*(CALL $82(($4 + [56]), $6) + [16]) == (int_32)($4 + [56])) ){ goto $label$6 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$6
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = ($4 + [84])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$11 }
	CALL $18($9)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($4 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL $18($6)
	
.LABEL $label$7
	if ( ($5 == 0) ){ goto $label$4 }
	$1 = *($4 + [48])
	
.LABEL $label$5
	$6 = CALL $24([9127])
	if ( ($6 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9640])
	goto $label$12 
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (int_64)0
	
.LOOP $label$14:
	$9 = *(($6 + [9126]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9685])
	
.LABEL $label$15
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$14 }
	$10 = (int_64)6138577376031695152
	if ( CALL $83((int_64)6138577376031695152, $1, ((int_64)$2 & (int_64)72057594037927935)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL require_recipient((int_64)5606078076466343568)
	$global$0 = ($4 + [96])
	return 
	
.LABEL $label$3
	$10 = (int_64)6138577376031695152
	if ( CALL $83((int_64)6138577376031695152, $1, (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	*($4 + [24]) = $10
	$2 = *($0)
	*(($6 = CALL $16([16]))) = $2
	*($6 + [8]) = (int_64)3617214756542218240
	$9 = ($6 + [16])
	*((($4 + [24]) + [16])) = $9
	*(($4 + [36])) = $9
	*($4 + [32]) = $6
	$6 = CALL $24([9127])
	if ( ($6 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9640])
	goto $label$18 
	
.LABEL $label$19
	if ( ($6 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$2 = (int_64)0
	
.LOOP $label$20:
	$9 = *(($6 + [9126]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9685])
	
.LABEL $label$21
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$20 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$16 
	
.LABEL $label$17
	$2 = (int_64)4
	
.LABEL $label$16
	*($4 + [16]) = $2
	*($4 + [8]) = *($0)
	CALL $84(($4 + [56]), ($4 + [24]), ($4 + [48]), ($4 + [16]), ($4 + [8]))
	CALL $72(($4 + [56]))
	$6 = *($4 + [84])
	if ( ($6 == 0) ){ goto $label$22 }
	*(($4 + [88])) = $6
	CALL $18($6)
	
.LABEL $label$22
	$6 = *($4 + [72])
	if ( ($6 == 0) ){ goto $label$23 }
	*(($4 + [76])) = $6
	CALL $18($6)
	
.LABEL $label$23
	CALL require_recipient((int_64)5606078076466343568)
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	*(($4 + [36])) = $6
	CALL $18($6)
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [156])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10001])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10047])
	
.LABEL $label$2
	$6 = ($1 + [136])
	*($5 + [16]) = *($6)
	*($5 + [24]) = *(($1 + [32]))
	$7 = ($1 + [152])
	*($5 + [32]) = *($7)
	$8 = ($1 + [16])
	*($5 + [40]) = *($8)
	$9 = ($1 + [8])
	*($5 + [48]) = *($9)
	*(($1 + [80])) = *(*($3))
	$3 = *($1 + [124])
	$10 = ( *(($1 + [128])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($10 + [112])
	$11 = (CASTING uint_64)(uint_32 $10)
	$10 = ($1 + [124])
	$12 = *($1)
	$13 = (($5 + [16]) + [32])
	$14 = ($5 + [40])
	$15 = (($5 + [16]) + [16])
	$16 = (($5 + [16]) + [8])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	$17 = *($1 + [140])
	$17 = ( *(($1 + [144])) ? uint_32($17 >> [1]) : ($17 & [1]) )
	$3 = ($17 + $3)
	$11 = (CASTING uint_64)(uint_32 $17)
	$17 = ($1 + [140])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $10($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [56]) = $5
	*($5 + [68]) = $9
	*($5 + [72]) = $8
	*($5 + [112]) = $10
	*($5 + [116]) = $6
	*($5 + [120]) = $17
	*($5 + [124]) = $7
	*($5 + [64]) = $1
	*($5 + [76]) = ($1 + [24])
	*($5 + [80]) = ($1 + [32])
	*($5 + [84]) = ($1 + [40])
	*($5 + [88]) = ($1 + [48])
	*($5 + [92]) = ($1 + [56])
	*($5 + [96]) = ($1 + [64])
	*($5 + [100]) = ($1 + [104])
	*($5 + [104]) = ($1 + [112])
	*($5 + [108]) = ($1 + [120])
	CALL $137(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [160]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $11($4)
	
.LABEL $label$7
	if ( (uint_64)($12 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [64]) = *($6)
	if ( (CALL $25(($5 + [16]), ($5 + [64]), [8]) == 0) ){ goto $label$9 }
	$3 = *($1 + [164])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111424, ($5 + [56]), $12)
	*(($1 + [164])) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$9
	*($5 + [64]) = *(($1 + [32]))
	if ( (CALL $25($16, ($5 + [64]), [8]) == 0) ){ goto $label$11 }
	$4 = ($1 + [168])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$12 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111423, ($5 + [56]), $12)
	*($4) = $3
	
.LABEL $label$12
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$11
	*($5 + [64]) = *($7)
	if ( (CALL $25($15, ($5 + [64]), [8]) == 0) ){ goto $label$13 }
	$4 = ($1 + [172])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$14 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111422, ($5 + [56]), $12)
	*($4) = $3
	
.LABEL $label$14
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$13
	*($5 + [64]) = *($8)
	if ( (CALL $25($14, ($5 + [64]), [8]) == 0) ){ goto $label$15 }
	$4 = ($1 + [176])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$16 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111421, ($5 + [56]), $12)
	*($4) = $3
	
.LABEL $label$16
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$15
	*($5 + [64]) = *($9)
	if ( (CALL $25($13, ($5 + [64]), [8]) == 0) ){ goto $label$17 }
	$1 = ($1 + [180])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$18 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111420, ($5 + [56]), $12)
	*($1) = $3
	
.LABEL $label$18
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$17
	$global$0 = ($5 + [128])
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	CALL $134(*($1), *($0 + [8]))
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [12]))
	$5 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [15]), [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$1 = *($1)
	*($2 + [14]) = *(*($0 + [16]))
	$0 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $0) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [9634])
	$0 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, ($2 + [14]), [1])
	*(($0 = ($1 + [4]))) = (*($0) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	CALL $120(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [15]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy(($2 + [14]), $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*($4) = ((int_32)*($2 + [14]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [16])
	$global$0 = $6
	$7 = *($0)
	$8 = *($7 + [4])
	$9 = *($8 + [164])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$2 }
	$9 = *($7)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-6524895285083111424, ($6 + [8]), *($8))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($9)
	
.LABEL $label$1
	$7 = *($0)
	$8 = *($7 + [4])
	$9 = *(($8 + [168]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$4 }
	$9 = *($7)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-6524895285083111423, ($6 + [8]), *($8))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($9)
	
.LABEL $label$3
	$7 = *($0)
	$8 = *($7 + [4])
	$9 = *(($8 + [172]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$6 }
	$9 = *($7)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-6524895285083111422, ($6 + [8]), *($8))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($9)
	
.LABEL $label$5
	$7 = *($0)
	$8 = *($7 + [4])
	$9 = *(($8 + [176]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$8 }
	$9 = *($7)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-6524895285083111421, ($6 + [8]), *($8))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($9)
	
.LABEL $label$7
	$9 = *($0)
	$7 = *($9 + [4])
	$0 = *(($7 + [180]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$10 }
	$0 = *($9)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111420, ($6 + [8]), *($7))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($0)
	
.LABEL $label$9
	$global$0 = ($6 + [16])
}

int_32 .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [40]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10314])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6224682584866760320)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10260])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10260])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $97(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $140 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [160]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10314])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6524895285083111424)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10260])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10260])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $73(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9961])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [8]))
	$5 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9634])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $70($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $78(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $18($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9505])
	
.LABEL $label$5
	$4 = CALL $10($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $16([184])) + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [124 align=4]) = (int_64)0
	*($5 + [132]) = [0]
	*($5 + [140 align=4]) = (int_64)0
	*($5 + [148]) = [0]
	*($5 + [156]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [104])
	*($3 + [72]) = ($5 + [112])
	*($3 + [76]) = ($5 + [120])
	*($3 + [80]) = ($5 + [124])
	*($3 + [84]) = ($5 + [136])
	*($3 + [88]) = ($5 + [140])
	*($3 + [92]) = ($5 + [152])
	CALL $135(($3 + [32]), ($3 + [24]))
	*($5 + [160]) = $1
	*($5 + [164 align=4]) = (int_64)-1
	*($5 + [172 align=4]) = (int_64)-1
	*($5 + [180]) = [-1]
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $93(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $11($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [140]) & [1]) == 0) ){ goto $label$11 }
	CALL $18(*(($1 + [148])))
	
.LABEL $label$11
	if ( ((*($1 + [124]) & [1]) == 0) ){ goto $label$12 }
	CALL $18(*(($1 + [132])))
	
.LABEL $label$12
	CALL $18($1)
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $16($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $56($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $18($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9634])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9634])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9634])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9634])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $134(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9505])
	
.LABEL $label$5
	$4 = CALL $10($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $16([40])) + [20]) = [0]
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [28]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [12])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [25])
	CALL $144(($3 + [40]), ($3 + [32]))
	*($5 + [32]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $106(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $11($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL $18(*(($1 + [20])))
	
.LABEL $label$11
	CALL $18($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9505])
	
.LABEL $label$5
	$4 = CALL $10($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $16([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [36]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $128(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = [-1]
	*($5 + [40]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $129(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $11($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $18($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [156])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10001])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10047])
	
.LABEL $label$2
	*(($1 + [88])) = *(*(*($3)) + [8])
	$6 = ($1 + [136])
	*($5 + [16]) = *($6)
	*($5 + [24]) = *(($1 + [32]))
	$7 = ($1 + [152])
	*($5 + [32]) = *($7)
	$8 = ($1 + [16])
	*($5 + [40]) = *($8)
	$9 = ($1 + [8])
	*($5 + [48]) = *($9)
	$10 = *($1)
	$11 = ($1 + [140])
	CALL $36($11, *($3 + [4]))
	*($7) = ( [1] ? [2] : *(*($3 + [8])) )
	if ( ((int_64)$10 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [10098])
	
.LABEL $label$3
	$12 = (($5 + [16]) + [32])
	$13 = ($5 + [40])
	$14 = (($5 + [16]) + [16])
	$15 = (($5 + [16]) + [8])
	$3 = *($1 + [124])
	$16 = ( *(($1 + [128])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($16 + [112])
	$17 = (CASTING uint_64)(uint_32 $16)
	$16 = ($1 + [124])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$17 = (uint_64)$17 >> (uint_64)(int_64)7
	if ( ((int_64)$17) != (int_64)0) ){ goto $label$4 }
	$18 = *(($1 + [140]))
	$18 = ( *(($1 + [144])) ? uint_32($18 >> [1]) : ($18 & [1]) )
	$3 = ($18 + $3)
	$17 = (CASTING uint_64)(uint_32 $18)
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$17 = (uint_64)$17 >> (uint_64)(int_64)7
	if ( ((int_64)$17) != (int_64)0) ){ goto $label$5 }
	if ( ($3 <= [513]) ){ goto $label$7 }
	$4 = CALL $10($3)
	goto $label$6 
	
.LABEL $label$7
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$6
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [56]) = $5
	*($5 + [68]) = $9
	*($5 + [72]) = $8
	*($5 + [112]) = $16
	*($5 + [116]) = $6
	*($5 + [120]) = $11
	*($5 + [124]) = $7
	*($5 + [64]) = $1
	*($5 + [76]) = ($1 + [24])
	*($5 + [80]) = ($1 + [32])
	*($5 + [84]) = ($1 + [40])
	*($5 + [88]) = ($1 + [48])
	*($5 + [92]) = ($1 + [56])
	*($5 + [96]) = ($1 + [64])
	*($5 + [100]) = ($1 + [104])
	*($5 + [104]) = ($1 + [112])
	*($5 + [108]) = ($1 + [120])
	CALL $137(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [160]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL $11($4)
	
.LABEL $label$8
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [64]) = *($6)
	if ( (CALL $25(($5 + [16]), ($5 + [64]), [8]) == 0) ){ goto $label$10 }
	$3 = *($1 + [164])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$11 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111424, ($5 + [56]), $10)
	*(($1 + [164])) = $3
	
.LABEL $label$11
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$10
	*($5 + [64]) = *(($1 + [32]))
	if ( (CALL $25($15, ($5 + [64]), [8]) == 0) ){ goto $label$12 }
	$4 = ($1 + [168])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$13 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111423, ($5 + [56]), $10)
	*($4) = $3
	
.LABEL $label$13
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$12
	*($5 + [64]) = *($7)
	if ( (CALL $25($14, ($5 + [64]), [8]) == 0) ){ goto $label$14 }
	$4 = ($1 + [172])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$15 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111422, ($5 + [56]), $10)
	*($4) = $3
	
.LABEL $label$15
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$14
	*($5 + [64]) = *($8)
	if ( (CALL $25($13, ($5 + [64]), [8]) == 0) ){ goto $label$16 }
	$4 = ($1 + [176])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$17 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111421, ($5 + [56]), $10)
	*($4) = $3
	
.LABEL $label$17
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$16
	*($5 + [64]) = *($9)
	if ( (CALL $25($12, ($5 + [64]), [8]) == 0) ){ goto $label$18 }
	$1 = ($1 + [180])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$19 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6524895285083111420, ($5 + [56]), $10)
	*($1) = $3
	
.LABEL $label$19
	CALL db_idx64_update($3, $2, ($5 + [64]))
	
.LABEL $label$18
	$global$0 = ($5 + [128])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $24($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $37($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $37($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $37($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $16($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $18($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $131(CALL $130($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9634])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9634])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $79 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [64])
	$global$0 = $6
	*($6 + [56]) = $4
	CALL require_auth(*($0))
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$5 }
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert([0], [9094])
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [8717])
	$4 = (int_64)0
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = (int_64)0
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8763])
	
.LABEL $label$1
	*(($6 + [40])) = $4
	*(($6 + [48])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = $4
	$4 = *($0 + [8])
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	$7 = CALL db_find_i64($4, $4, (int_64)-6524895285083111424, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $73(($6 + [8]), $7)
	if ( ((int_32)*($7 + [156]) == (int_32)($6 + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [9454])
	
.LABEL $label$7
	if ( ((int_64)*($7 + [16]) != (int_64)$2) ){ goto $label$6 }
	if ( ((int_64)*($7 + [64]) != (int_64)$3) ){ goto $label$6 }
	$4 = *($0)
	*($6) = ($6 + [56])
	CALL $80(($6 + [8]), $7, $4, $6)
	
.LABEL $label$6
	$8 = *($6 + [32])
	if ( ($8 == 0) ){ goto $label$8 }
	$9 = ($6 + [36])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	if ( ((*($0 + [140]) & [1]) == 0) ){ goto $label$13 }
	CALL $18(*(($0 + [148])))
	
.LABEL $label$13
	if ( ((*($0 + [124]) & [1]) == 0) ){ goto $label$14 }
	CALL $18(*(($0 + [132])))
	
.LABEL $label$14
	CALL $18($0)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$11 }
	$0 = *(($6 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $8
	
.LABEL $label$9
	*($9) = $8
	CALL $18($0)
	
.LABEL $label$8
	$global$0 = ($6 + [64])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $28($3, (int_64)0)
	$4 = CALL $30($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

void .FUNC $33 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $29($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $13()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $29($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [8449]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $28($0, (int_64)0)
	*(CALL $13()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $29($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $29($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $29($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $29($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [8449])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [8449]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8449]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $29($0)
	$5 = *(($6 + [8449]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $29($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [8449]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8261]))
	$8 = (int_64)0
	$5 = *(($6 + [8449]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8449]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $29($0)
	$5 = *(($6 + [8449]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $29($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [8449]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $28($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [8449]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [8449]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $29($0) + [8449]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $13()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $13()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $13()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $28($3, (int_64)0)
	$4 = CALL $30($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $16(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $56($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $18($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $18($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $127 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $10($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	$5 = ($2 + $4)
	*($3 + [152]) = $5
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9961])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [128]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9961])
	$5 = *((($3 + [144]) + [8]))
	$2 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [128]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9961])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$7
	CALL memcpy(($3 + [112]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9961])
	$2 = *($3 + [148])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*(($5 = (($3 + [112]) + [8]))) = *($3 + [64])
	*($3 + [148]) = ($2 + [8])
	*($3 + [104]) = [0]
	*($3 + [96]) = (int_64)0
	CALL $120(($3 + [144]), ($3 + [96]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [48]) = *($3 + [144])
	$2 = *($2)
	*((($3 + [160]) + [8])) = $2
	*(($4 = (($3 + [176]) + [8]))) = $2
	$6 = *($3 + [48])
	*($3 + [176]) = $6
	*($3 + [160]) = $6
	$2 = *($4)
	*((($3 + [192]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [176])
	*($3 + [80]) = $0
	*($3 + [192]) = $0
	*(($4 = (($3 + [32]) + [8]))) = *($5)
	*($3 + [32]) = *($3 + [112])
	$0 = *($3 + [128])
	$1 = *($3 + [136])
	$2 = CALL $34(($3 + [16]), ($3 + [96]))
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [32])
	CALL $86(($3 + [64]), $1, $0, $3, $2)
	if ( (*($2) & [1]) ){ goto $label$11 }
	if ( (*($3 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $18(*($2 + [8]))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $18(*(($3 + [104])))
	$global$0 = ($3 + [208])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [208])
}