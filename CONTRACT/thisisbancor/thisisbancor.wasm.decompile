(data (i32.const 8220) "failed to allocate pages\00\00")
(data (i32.const 8246) " \00")
(data (i32.const 8248) ",\00")
(data (i32.const 8250) ";\00")
(data (i32.const 8252) ":\00")
(data (i32.const 8254) "convert\00")
(data (i32.const 8262) "invalid quantity in transfer\00")
(data (i32.const 8291) "zero quantity is disallowed in transfer\00")
(data (i32.const 8331) "bad path format\00")
(data (i32.const 8347) "converter doesn\'t exist\00")
(data (i32.const 8371) "the destination account must by either the sender, or the BancorX contract account\00")
(data (i32.const 8454) "string is too long to be a valid name\00")
(data (i32.const 8492) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8559) "character is not in allowed character set for names\00")
(data (i32.const 8611) "write\00")
(data (i32.const 8617) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8668) "error reading iterator\00")
(data (i32.const 8691) "read\00")
(data (i32.const 8696) "singleton does not exist\00")
(data (i32.const 8721) "get\00")
(data (i32.const 0) "\18\"\00\00")
(import "env" "abort" (func $fimport$0))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$5 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$11 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$16 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$18 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$21 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$23 (param i64)))
(import "env" "send_inline" (func $fimport$24 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "action_data_size" (func $fimport$26 (result i32)))
(import "env" "read_action_data" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$28 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$29 (param i32 i32 i32) (result i32)))
(export "apply" (func $44))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $38 $37)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 8725))
(global $global$2 i32 (i32.const 8725))


void .FUNC $18 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $9($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [16]) = $1
	*($2 + [8]) = $1
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = CALL db_find_i64($1, $1, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)*(CALL $43(($2 + [8]), $4) + [16]) == (int_32)($2 + [8])) ){ goto $label$3 }
	CALL eosio_assert([0], [8617])
	
.LABEL $label$3
	$4 = *(($2 + [36]))
	if ( ((int_32)$4 == (int_32)*(($2 + [32]))) ){ goto $label$5 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [16]) == (int_32)($2 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [8617])
	
.LABEL $label$6
	if ( $4 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	$4 = CALL db_find_i64(*($2 + [8]), *(($2 + [16])), (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $43(($2 + [8]), $4)
	if ( ((int_32)*($4 + [16]) == (int_32)($2 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [8617])
	
.LABEL $label$4
	$3 = ((int_32)*($4) != (int_32)[0])
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL $11($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL $11($4)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return $3
	
.LABEL $label$1
	CALL eosio_assert([0], [8696])
	return (unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL $9(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $26($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $19(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $11(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL $11($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($2 + [1])
	$6 = ($1 + [1])
	$7 = *($1 + [4])
	$8 = *($1)
	$9 = ($2 + [4])
	
.LOOP $label$1:
	$10 = ($8 & [1])
	$7 = ( $7 ? uint_32(($8 & [254]) >> [1]) : $10 )
	if ( ($7 <= $4) ){ goto $label$3 }
	$11 = $4
	$13 = ($8 & [1])
	$8 = *($2)
	$8 = ( *($9) ? uint_32($8 >> [1]) : $13 )
	if ( ($8 == 0) ){ goto $label$2 }
	$7 = ($12 + $4)
	$12 = ( *(($1 + [8])) ? $6 : $10 )
	$10 = ($12 + $7)
	$11 = ($10 - $7)
	if ( ((int_32)$11 < (int_32)$8) ){ goto $label$3 }
	$14 = ( *(($2 + [8])) ? $5 : $13 )
	$13 = *($14)
	
.LOOP $label$4:
	$11 = (($11 - $8) + [1])
	if ( ($11 == 0) ){ goto $label$3 }
	$11 = CALL $1($7, $13, $11)
	if ( ($11 == 0) ){ goto $label$3 }
	if ( (CALL $2($11, $14, $8) == 0) ){ goto $label$5 }
	$7 = ($11 + [1])
	$11 = ($10 - $7)
	if ( ((int_32)$11 >= (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$11 = ($11 - $12)
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$6 }
	$11 = uint_32($8 >> [1])
	goto $label$2 
	
.LABEL $label$6
	$11 = *(($1 + [4]))
	
.LABEL $label$2
	$8 = CALL $20($3, $1, $4, ($11 - $4), $1)
	$4 = ($0 + [4])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $19($7, $8)
	*($4) = (*($4) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $29($0, $8)
	
.LABEL $label$7
	$4 = *($2)
	$10 = *($9)
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL $11(*(($3 + [8])))
	
.LABEL $label$9
	$8 = *($1)
	$7 = *(($1 + [4]))
	$13 = ( $7 ? uint_32($8 >> [1]) : ($8 & [1]) )
	if ( ((uint_32)$11 >= (uint_32)$13) ){ goto $label$10 }
	$4 = (( $10 ? uint_32($4 >> [1]) : ($4 & [1]) ) + $11)
	if ( ($4 <= $13) ){ goto $label$1 }
	
.LABEL $label$10
	$global$0 = ($3 + [16])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $22($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $9($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $9(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $11($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $9($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $11($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $2(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $17($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $22($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $22($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $27 (int_32 $0)
{
}

void .FUNC $26 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $49 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = $global$0
	$3 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	CALL require_auth($0)
	$global$0 = $3
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $19(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $19(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $11(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $11(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8668])
	
.LABEL $label$5
	$2 = CALL $3($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $9([32])) + [16]) = $0
	if ( $4 ){ goto $label$7 }
	CALL eosio_assert([0], [8691])
	
.LABEL $label$7
	CALL memcpy(($3 + [16]), $2, [1])
	*($5) = ((int_32)*($3 + [16]) != (int_32)[0])
	$7 = ($5 + [8])
	$8 = ($2 + [1])
	if ( ((uint_32)($4 + [-1]) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8691])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-4417020450001911808
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = (int_64)-4417020450001911808
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $53(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $4($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $11($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $51(CALL $50($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8611])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8611])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8611])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8611])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8611])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8611])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $52(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $9($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $26($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8691])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8691])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8691])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8691])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $54(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $4($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $47(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $48(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $4($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $11(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3 + [8]) = *($3 + [24])
	CALL $45($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [20]) = [0]
	*($3 + [16]) = [2]
	*($3) = *($3 + [16])
	CALL $46($1, $1, $3)
	
.LABEL $label$1
	CALL $27([0])
	$global$0 = ($3 + [32])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8611])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8611])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $6())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $7($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $3($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $3($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $6 ()
{
	return [8208]
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $3($1)
	
.LABEL $label$2
	*(CALL $6()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $3(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $4($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $4 (int_32 $0)
{
}

void .FUNC $5 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $0 ()
{
	CALL $5()
}

int_32 .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	return CALL $13($0, $1)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $4($0)
	
.LABEL $label$1
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	CALL $15($0, $1)
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $10 (int_32 $0)
{
	return CALL $9($0)
}

void .FUNC $11 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $4($0)
	
.LABEL $label$1
}

void .FUNC $12 (int_32 $0)
{
	CALL $11($0)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $8(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $8(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	if ( (*($0 + [60]) & [1]) ){ goto $label$11 }
	if ( (*($0 + [48]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $11(*(($0 + [68])))
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $11(*(($0 + [56])))
	$1 = [1]
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($0 + [36]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($0 + [24]) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $11(*(($0 + [44])))
	if ( ((*($0 + [24]) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $11(*(($0 + [32])))
	$2 = *($0 + [12])
	if ( ($2 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$2 = *($0 + [12])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$4
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = ($0 + [16])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($1 + [-24])
	if ( ((*(($1 + [-16])) & [1]) == 0) ){ goto $label$14 }
	CALL $11(*(($1 + [-8])))
	
.LABEL $label$14
	$1 = $3
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	$1 = *(($0 + [12]))
	*($4) = $2
	CALL $11($1)
	$2 = *($0)
	if ( $2 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$12
	*($4) = $2
	CALL $11($2)
	$2 = *($0)
	if ( $2 ){ goto $label$1 }
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$16 }
	
.LOOP $label$17:
	$1 = ($3 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$18 }
	CALL $11(*(($3 + [-4])))
	
.LABEL $label$18
	$3 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	$1 = *($0)
	goto $label$15 
	
.LABEL $label$16
	$1 = $2
	
.LABEL $label$15
	*(($0 + [4])) = $2
	CALL $11($1)
	return $0
}

void .FUNC $37 (int_32 $0)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8454])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [8559])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8492])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8559])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[24])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL $9(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $26($0)
	
.LABEL $label$1
	*(($4 = ($2 + ((int_32)$3 * (int_32)[24])))) = *($1)
	CALL $19(($4 + [8]), ($1 + [8]))
	$6 = ($2 + ((int_32)$5 * (int_32)[24]))
	$7 = ($4 + [24])
	$5 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$6 }
	$9 = ($5 - $8)
	$5 = [0]
	
.LOOP $label$7:
	$2 = ($8 + $5)
	*((($1 = ($4 + $5)) + [-24])) = *(($2 + [-24]))
	$3 = ($2 + [-8])
	*(($1 + [-8])) = *($3)
	$1 = ($2 + [-16])
	*(($1 + [-16])) = *($1)
	*($1) = (int_64)0
	*($3) = [0]
	$5 = ($5 + [-24])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$7 }
	$4 = ($4 + $5)
	$5 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $5
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = ($5 + [-24])
	if ( ((*(($5 + [-16])) & [1]) == 0) ){ goto $label$10 }
	CALL $11(*(($5 + [-8])))
	
.LABEL $label$10
	$5 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $11($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $21($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $19($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL $11($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL $9($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $19($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $26($0)
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[24])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[24])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($4 + [-24])
	if ( ((*(($4 + [-16])) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*(($4 + [-8])))
	
.LABEL $label$8
	$4 = $6
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$4 = ($1 + ((int_32)$7 * (int_32)[24]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	*($5) = *($1)
	CALL $21(($5 + [8]), ($1 + [8]))
	$5 = ($5 + [24])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$5 = ($0 + [4])
	$1 = *($5)
	
.LOOP $label$12:
	*($1) = *($4)
	CALL $19(($1 + [8]), ($4 + [8]))
	$1 = (*($5) + [24])
	*($5) = $1
	$4 = ($4 + [24])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$6 = ($0 + [4])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($1 + [-24])
	if ( ((*(($1 + [-16])) & [1]) == 0) ){ goto $label$15 }
	CALL $11(*(($1 + [-8])))
	
.LABEL $label$15
	$1 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$14 }
	
.LABEL $label$13
	*($6) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL $11($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = [178956970]
	$4 = ((int_32)$4 / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[24])
	$5 = CALL $9($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	*($5) = *($1)
	CALL $19(($5 + [8]), ($1 + [8]))
	$5 = (*($4) + [24])
	*($4) = $5
	$1 = ($1 + [24])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $26($0)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [128])
	$global$0 = $2
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [48 align=4]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($2 + [48])) = [0]
	*($2 + [40]) = (int_64)0
	$3 = CALL $17([8250])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*($2 + [40]) = ($3 << [1])
	$4 = (($2 + [40]) | [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $9($5)
	*($2 + [40]) = ($5 | [1])
	*($2 + [48]) = $4
	*($2 + [44]) = $3
	
.LABEL $label$6
	CALL memcpy($4, [8250], $3)
	
.LABEL $label$5
	*(($4 + $3)) = [0]
	CALL $28(($2 + [112]), $1, ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*($2 + [48]))
	
.LABEL $label$8
	$1 = *($2 + [112])
	*(($2 + [48])) = [0]
	*($2 + [40]) = (int_64)0
	$3 = CALL $17([8248])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$11 }
	*($2 + [40]) = ($3 << [1])
	$4 = (($2 + [40]) | [1])
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $9($5)
	*($2 + [40]) = ($5 | [1])
	*($2 + [48]) = $4
	*($2 + [44]) = $3
	
.LABEL $label$10
	CALL memcpy($4, [8248], $3)
	
.LABEL $label$9
	*(($4 + $3)) = [0]
	CALL $28(($2 + [96]), $1, ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL $11(*($2 + [48]))
	
.LABEL $label$12
	CALL $21(($0 + [24]), *($2 + [96]))
	$4 = *($2 + [96])
	*(($2 + [48])) = [0]
	*($2 + [40]) = (int_64)0
	$3 = CALL $17([8246])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$1 = ($4 + [12])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$15 }
	*($2 + [40]) = ($3 << [1])
	$4 = (($2 + [40]) | [1])
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $9($5)
	*($2 + [40]) = ($5 | [1])
	*($2 + [48]) = $4
	*($2 + [44]) = $3
	
.LABEL $label$14
	CALL memcpy($4, [8246], $3)
	
.LABEL $label$13
	*(($4 + $3)) = [0]
	CALL $28(($2 + [80]), $1, ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $11(*($2 + [48]))
	
.LABEL $label$16
	$3 = *($2 + [80])
	if ( ((int_32)(*($2 + [84]) - $3) != (int_32)[12]) ){ goto $label$18 }
	$4 = *($3)
	$1 = CALL $17([8245])
	if ( ((int_32)$1 != (int_32)( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$18 }
	if ( (CALL $25($3, [0], [-1], [8245], $1) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	if ( ((int_32)$0 == (int_32)($2 + [80])) ){ goto $label$1 }
	CALL $31($0, *($2 + [80]), *($2 + [84]))
	goto $label$1 
	
.LABEL $label$17
	CALL $32($0, [0], [0])
	goto $label$1 
	
.LABEL $label$4
	CALL $18(($2 + [40]))
	
.LABEL $label$3
	CALL $18(($2 + [40]))
	
.LABEL $label$2
	CALL $18(($2 + [40]))
	
.LABEL $label$1
	$6 = ($0 + [12])
	CALL $33($6, [0], [0])
	$4 = *($0)
	$7 = ($0 + [4])
	if ( ((int_32)*($7) == (int_32)$4) ){ goto $label$19 }
	$8 = (($2 + [16]) | [1])
	$5 = (($2 + [40]) + [8])
	$9 = (($2 + [40]) | [1])
	$10 = (($2 + [40]) + [16])
	$11 = ($0 + [20])
	$12 = [0]
	
.LOOP $label$20:
	*($5) = [0]
	*($2 + [40]) = (int_64)0
	$3 = CALL $17([8252])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$24 }
	$1 = ($4 + ((int_32)$12 * (int_32)[12]))
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$27 }
	*($2 + [40]) = ($3 << [1])
	$4 = $9
	if ( $3 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$13 = (($3 + [16]) & [-16])
	$4 = CALL $9($13)
	*($5) = $4
	*($2 + [40]) = ($13 | [1])
	*($2 + [44]) = $3
	
.LABEL $label$26
	CALL memcpy($4, [8252], $3)
	
.LABEL $label$25
	*(($4 + $3)) = [0]
	CALL $28(($2 + [64]), $1, ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$28 }
	CALL $11(*($5))
	
.LABEL $label$28
	*($10) = (int_64)0
	*($5) = (int_64)0
	*($10) = [0]
	*($2 + [40]) = (int_64)0
	$3 = *($2 + [64])
	if ( (*($3) & [1]) ){ goto $label$30 }
	$3 = ($3 + [1])
	goto $label$29 
	
.LABEL $label$30
	$3 = *($3 + [8])
	
.LABEL $label$29
	*($2 + [32]) = $3
	*($2 + [36]) = CALL $17($3)
	*($2 + [8]) = *($2 + [32])
	CALL $34(($2 + [16]), ($2 + [8]))
	*($2 + [40]) = *($2 + [16])
	$3 = *($2 + [64])
	if ( (((int_32)(*($2 + [68]) - $3) / (int_32)[12]) <= [2]) ){ goto $label$32 }
	CALL $19(($2 + [16]), ($3 + [12]))
	if ( (*($5) & [1]) ){ goto $label$31 }
	goto $label$22 
	
.LABEL $label$32
	*(($1 = (($2 + [16]) + [8]))) = [0]
	*($2 + [16]) = (int_64)0
	$3 = CALL $17([8245])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$35 }
	*($2 + [16]) = ($3 << [1])
	$4 = $8
	if ( $3 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$13 = (($3 + [16]) & [-16])
	$4 = CALL $9($13)
	*($1) = $4
	*($2 + [16]) = ($13 | [1])
	*($2 + [20]) = $3
	
.LABEL $label$34
	CALL memcpy($4, [8245], $3)
	
.LABEL $label$33
	*(($4 + $3)) = [0]
	if ( ((*($5) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$31
	*(*($10)) = [0]
	*((($2 + [40]) + [12])) = [0]
	goto $label$21 
	
.LABEL $label$24
	CALL $18(($2 + [40]))
	
.LABEL $label$23
	CALL $18(($2 + [16]))
	
.LABEL $label$22
	*($5) = [0]
	
.LABEL $label$21
	CALL $23($5, [0])
	*(($5 + [8])) = *((($2 + [16]) + [8]))
	*($5) = *($2 + [16])
	$3 = ($0 + [16])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)*($11)) ){ goto $label$38 }
	*($4) = *($2 + [40])
	CALL $19(($4 + [8]), $5)
	*($3) = (*($3) + [24])
	if ( ((*($5) & [1]) == 0) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$38
	CALL $35($6, ($2 + [40]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$36 }
	
.LABEL $label$37
	CALL $11(*($10))
	
.LABEL $label$36
	$1 = *($2 + [64])
	if ( ($1 == 0) ){ goto $label$39 }
	$4 = *($2 + [68])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$41 }
	
.LOOP $label$42:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$43 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$43
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$42 }
	$3 = *($2 + [64])
	goto $label$40 
	
.LABEL $label$41
	$3 = $1
	
.LABEL $label$40
	*($2 + [68]) = $1
	CALL $11($3)
	
.LABEL $label$39
	$4 = *($0)
	$12 = ($12 + [2])
	if ( ($12 <= ((int_32)(*($7) - $4) / (int_32)[12])) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = *($2 + [112])
	if ( ((int_32)(*($2 + [116]) - $3) != (int_32)[24]) ){ goto $label$45 }
	CALL $21(($0 + [60]), ($3 + [12]))
	goto $label$44 
	
.LABEL $label$45
	CALL $24(($0 + [60]), [8254])
	
.LABEL $label$44
	CALL $21(($0 + [36]), (*($2 + [96]) + [24]))
	CALL $21(($0 + [48]), (*($2 + [96]) + [36]))
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$46 }
	$4 = *($2 + [84])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$48 }
	
.LOOP $label$49:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$50 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$50
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$49 }
	$3 = *($2 + [80])
	goto $label$47 
	
.LABEL $label$48
	$3 = $1
	
.LABEL $label$47
	*($2 + [84]) = $1
	CALL $11($3)
	
.LABEL $label$46
	$1 = *($2 + [96])
	if ( ($1 == 0) ){ goto $label$51 }
	$4 = *($2 + [100])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$53 }
	
.LOOP $label$54:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$55 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$55
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$54 }
	$3 = *($2 + [96])
	goto $label$52 
	
.LABEL $label$53
	$3 = $1
	
.LABEL $label$52
	*($2 + [100]) = $1
	CALL $11($3)
	
.LABEL $label$51
	$1 = *($2 + [112])
	if ( ($1 == 0) ){ goto $label$56 }
	$4 = *($2 + [116])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$58 }
	
.LOOP $label$59:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$60 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$60
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$59 }
	$3 = *($2 + [112])
	goto $label$57 
	
.LABEL $label$58
	$3 = $1
	
.LABEL $label$57
	*($2 + [116]) = $1
	CALL $11($3)
	
.LABEL $label$56
	$global$0 = ($2 + [128])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $21($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $19($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $11(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL $11($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL $9($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $19($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $26($0)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8611])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8611])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8611])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [240])
	$global$0 = $5
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)6138663590285017088) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)6138663591134630912) ){ goto $label$1 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $7
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$6 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [8262])
	
.LABEL $label$2
	if ( ((int_64)*($3) != (int_64)0) ){ goto $label$7 }
	CALL eosio_assert([0], [8291])
	
.LABEL $label$7
	$6 = CALL $19(($5 + [112]), $4)
	CALL $30(($5 + [128]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $11(*($6 + [8]))
	
.LABEL $label$8
	if ( ((uint_32)((int_32)(*($5 + [132]) - *($5 + [128])) / (int_32)[12]) > (uint_32)[1]) ){ goto $label$9 }
	CALL eosio_assert([0], [8331])
	
.LABEL $label$9
	$7 = *(*($5 + [140]))
	if ( CALL $39($6, $7) ){ goto $label$10 }
	CALL eosio_assert([0], [8347])
	
.LABEL $label$10
	$6 = ( *(($5 + [184])) ? ($5 + [177]) : (*($5 + [176]) & [1]) )
	*($5 + [96]) = $6
	*($5 + [100]) = CALL $17($6)
	*($5) = *($5 + [96])
	$2 = *(CALL $34(($5 + [104]), $5))
	if ( ((int_64)$2 == (int_64)$1) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)4154159849952422272) ){ goto $label$11 }
	if ( CALL $39($6, $1) ){ goto $label$11 }
	CALL eosio_assert([0], [8371])
	
.LABEL $label$11
	$1 = *($0 + [8])
	$2 = *($0)
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $7
	*($5 + [8]) = $2
	*($5 + [24]) = *($3)
	$8 = CALL $19((($5 + [8]) + [32]), $4)
	*($5 + [64]) = (int_64)-3617168760277827584
	*($5 + [56]) = $1
	*(($6 = CALL $9([16]))) = $2
	*($6 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$9 = ($6 + [16])
	*((($5 + [56]) + [24])) = $9
	*(($5 + [76])) = $9
	*($5 + [72]) = $6
	*($5 + [84 align=4]) = (int_64)0
	$6 = *($8)
	$8 = ( *((($5 + [8]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [32])
	$2 = (CASTING uint_64)(uint_32 $8)
	$8 = ($5 + [84])
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$12 }
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $40($8, $6)
	$8 = *(($5 + [88]))
	$6 = *(($5 + [84]))
	goto $label$13 
	
.LABEL $label$14
	$8 = [0]
	$6 = [0]
	
.LABEL $label$13
	*($5 + [220]) = $6
	*($5 + [216]) = $6
	*($5 + [224]) = $8
	*($5 + [232]) = ($5 + [216])
	*($5 + [200]) = ($5 + [8])
	CALL $41(($5 + [200]), ($5 + [232]))
	*($5 + [208]) = [0]
	*($5 + [200]) = (int_64)0
	$6 = [16]
	$9 = *((($5 + [56]) + [16]))
	$8 = *(($5 + [76]))
	$0 = ($8 - $9)
	$2 = (CASTING uint_64)(uint_32 int_32($0 >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$15 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$16 }
	$6 = (($0 & [-16]) + $6)
	
.LABEL $label$16
	$9 = *(($5 + [84]))
	$8 = *(($5 + [88]))
	$6 = (($6 + $8) - $9)
	$2 = (CASTING uint_64)(uint_32 ($8 - $9))
	
.LOOP $label$17:
	$6 = ($6 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$17 }
	if ( ($6 == 0) ){ goto $label$19 }
	CALL $40(($5 + [200]), $6)
	$8 = *($5 + [204])
	$6 = *($5 + [200])
	goto $label$18 
	
.LABEL $label$19
	$8 = [0]
	$6 = [0]
	
.LABEL $label$18
	*($5 + [220]) = $6
	*($5 + [216]) = $6
	*($5 + [224]) = $8
	CALL $42(($5 + [216]), ($5 + [56]))
	$6 = *($5 + [200])
	CALL send_inline($6, (*($5 + [204]) - $6))
	$6 = *($5 + [200])
	if ( ($6 == 0) ){ goto $label$20 }
	*($5 + [204]) = $6
	CALL $11($6)
	
.LABEL $label$20
	$6 = *($5 + [84])
	if ( ($6 == 0) ){ goto $label$21 }
	*(($5 + [88])) = $6
	CALL $11($6)
	
.LABEL $label$21
	$6 = *($5 + [72])
	if ( ($6 == 0) ){ goto $label$22 }
	*(($5 + [76])) = $6
	CALL $11($6)
	
.LABEL $label$22
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$23 }
	CALL $11(*(($5 + [48])))
	
.LABEL $label$23
	CALL $36(($5 + [128]))
	
.LABEL $label$1
	$global$0 = ($5 + [240])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8611])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8611])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $9(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $26($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $11($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $55($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $9($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $23($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $23($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $18($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $11($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8721])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $40($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8691])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}