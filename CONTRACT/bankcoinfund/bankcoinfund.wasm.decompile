(data (i32.const 8192) "charge\00")
(data (i32.const 8199) "distribute\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8296) "must transfer with EOS token\00")
(data (i32.const 8325) "deposit\00")
(data (i32.const 8333) "memo should be deposit\00")
(data (i32.const 8356) "owner auth required\00")
(data (i32.const 8376) "refund request not found\00")
(data (i32.const 8401) "refund is not available yet\00")
(data (i32.const 8429) "amount of refund should equal zero\00")
(data (i32.const 8464) "eosio.token\00")
(data (i32.const 8476) "transfer\00")
(data (i32.const 8485) "refund from bankcoinfund\00")
(data (i32.const 8510) "amount of total fund should be positive or zero\00")
(data (i32.const 8558) "amount of max_invest should be positive or zero\00")
(data (i32.const 8606) "max_invest should be more than min_invest\00")
(data (i32.const 8648) "reserve should be less than or equal percent precision\00")
(data (i32.const 8703) "reserve should be positive or zero\00")
(data (i32.const 8738) "fee should be less than or equal percent precision\00")
(data (i32.const 8789) "fee should be positive or zero\00")
(data (i32.const 8820) "management fee should be less than or equal percent precision\00")
(data (i32.const 8882) "management fee should be positive or zero\00")
(data (i32.const 8924) "history should be positive or zero\00")
(data (i32.const 8959) "management fee should be less than distribute profit\00")
(data (i32.const 9012) "management fee\00")
(data (i32.const 9027) "divide by zero\00")
(data (i32.const 9042) "signed division overflow\00")
(data (i32.const 9067) "multiplication overflow\00")
(data (i32.const 9091) "multiplication underflow\00")
(data (i32.const 9116) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9175) "attempt to add asset with different symbol\00")
(data (i32.const 9218) "addition underflow\00")
(data (i32.const 9237) "addition overflow\00")
(data (i32.const 9255) "amount of investment should be less than maximum requirement of investment\00")
(data (i32.const 9330) "reserve percent should be less than 100%%\00")
(data (i32.const 9372) "bankcoinfund reserve\00")
(data (i32.const 9393) "account profit should be less than or equal fund profit\00")
(data (i32.const 9449) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9498) "invalid symbol name\00")
(data (i32.const 9518) "amount of investment should be more than minimal requirement\00")
(data (i32.const 9579) "amount of investment should be less than left of fund\00")
(data (i32.const 9633) "amount of investment should be less than total fund\00")
(data (i32.const 9685) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9736) "error reading iterator\00")
(data (i32.const 9759) "read\00")
(data (i32.const 9764) "amount of net profit should be positive or zero\00")
(data (i32.const 9812) "amount of pi should be more than invested\00")
(data (i32.const 9854) "overdrawn invest account\00")
(data (i32.const 9879) "overdrawn profit account\00")
(data (i32.const 9904) "amount of left should be more than minimal requirement of investment\00")
(data (i32.const 9973) "refund quantity should be less than 20000 EOS\00")
(data (i32.const 10019) "amount of fee should be more than zero\00")
(data (i32.const 10058) "withdraw fee\00")
(data (i32.const 10071) "withdraw from bankcoinfund\00")
(data (i32.const 10098) "amount of withdraw should be positive or zero\00")
(data (i32.const 10144) "amount of raised should be positive or zero\00")
(data (i32.const 10188) "amount of profit left in fund should be positive or zero\00")
(data (i32.const 10245) "cannot pass end iterator to erase\00")
(data (i32.const 10279) "cannot increment end iterator\00")
(data (i32.const 10309) "object passed to erase is not in multi_index\00")
(data (i32.const 10354) "cannot erase objects in table of another contract\00")
(data (i32.const 10404) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10457) "cannot pass end iterator to modify\00")
(data (i32.const 10492) "object passed to modify is not in multi_index\00")
(data (i32.const 10538) "cannot modify objects in table of another contract\00")
(data (i32.const 10589) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10648) "write\00")
(data (i32.const 10654) "cannot create objects in table of another contract\00")
(data (i32.const 10705) "attempt to subtract asset with different symbol\00")
(data (i32.const 10753) "subtraction underflow\00")
(data (i32.const 10775) "subtraction overflow\00")
(data (i32.const 10796) "refund should not be ended\00")
(data (i32.const 10823) "get\00")
(data (i32.const 10827) "singleton does not exist\00")
(import "env" "current_time" (func $fimport$0 (result i64)))
(import "env" "require_auth2" (func $fimport$1 (param i64 i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "__multi3" (func $fimport$3 (param i32 i64 i64 i64 i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$5 (param i32 i32)))
(import "env" "__divti3" (func $fimport$6 (param i32 i64 i64 i64 i64)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "has_auth" (func $fimport$8 (param i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "cancel_deferred" (func $fimport$10 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$11 (param i32 i64 i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$13 (param i64)))
(import "env" "eosio_exit" (func $fimport$14 (param i32)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$18))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$20 (result i64)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$23 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $35))
(export "_Znwj" (func $86))
(export "_ZdlPv" (func $88))
(export "_Znaj" (func $87))
(export "_ZdaPv" (func $89))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $1 $15 $26 $33)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19260))
(global $global$2 i32 (i32.const 19260))


int_32 .FUNC $98 (int_32 $0)
{
	return CALL $99([10864], $0)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $100($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8210])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $94 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $95 (int_32 $0)
{
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $90 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $96(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $98($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9759])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $101($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [10654])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9498])
	*($5 + [24]) = $1
	CALL $53(($4 + [16]), $5)
	*($4 + [32]) = $5
	*($4 + [16]) = (int_64)-5001342326447013888
	$7 = *($5 + [28])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = (int_64)-5001342326447013888
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $54(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10492])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10538])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [10589])
	CALL eosio_assert([1], [10648])
	CALL memcpy($4, $1, [4])
	CALL eosio_assert([1], [10648])
	CALL memcpy(($4 | [4]), $6, [8])
	CALL eosio_assert([1], [10648])
	CALL memcpy(($4 | [12]), $5, [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [20])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-5001342326447013888) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-5001342326447013887
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9449])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9498])
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9498])
	*(($0 + [40])) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$4 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [9498])
	*($0 + [56]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $85(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9759])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9759])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [24]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $91(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $91(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9759])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $83(*($1), ($0 + [32]))
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10309])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10354])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [10404])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9736])
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$5 }
	$7 = CALL $98($6)
	CALL db_get_i64($1, $7, $6)
	CALL $101($7)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	CALL db_get_i64($1, $7, $6)
	
.LABEL $label$4
	$8 = ($0 + [24])
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [9449])
	$10 = ($9 + [8])
	$11 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9498])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [9759])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [9759])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	$11 = (uint_64)*(($9 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $11)
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $46($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $9
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$4) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$5 }
	$5 = ($3 - ($1 + [40]))
	$4 = ($1 + ((int_32)((int_32)$5 / (int_32)[40]) * (int_32)[40]))
	if ( ((uint_32)$4 >= (uint_32)$3) ){ goto $label$7 }
	$6 = ($0 + [4])
	$7 = $3
	
.LOOP $label$8:
	*($7) = *($4)
	*(($7 + [32])) = *(($4 + [32]))
	*(($7 + [24])) = *(($4 + [24]))
	*(($7 + [16])) = *(($4 + [16]))
	*(($7 + [8])) = *(($4 + [8]))
	$7 = (*($6) + [40])
	*($6) = $7
	$4 = ($4 + [40])
	if ( ($4 <= $3) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($5 == 0) ){ goto $label$9 }
	CALL memmove(($3 + ((int_32)((int_32)$5 / (int_32)[-40]) * (int_32)[40])), $1, $5)
	
.LABEL $label$9
	if ( ((uint_32)$1 > (uint_32)$2) ){ goto $label$10 }
	$2 = ( ($2 + [40]) ? $2 : ((uint_32)*(($0 + [4])) > (uint_32)$2) )
	
.LABEL $label$10
	*($1) = *($2)
	*(($1 + [32])) = *(($2 + [32]))
	*(($1 + [24])) = *(($2 + [24]))
	*(($1 + [16])) = *(($2 + [16]))
	*(($1 + [8])) = *(($2 + [8]))
	return $1
	
.LABEL $label$6
	$7 = *($0)
	$3 = (((int_32)($3 - $7) / (int_32)[40]) + [1])
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$2 }
	$4 = ((int_32)($4 - $7) / (int_32)[40])
	if ( ((uint_32)$4 >= (uint_32)[53687091]) ){ goto $label$13 }
	$6 = ((int_32)($1 - $7) / (int_32)[40])
	$4 = ($4 << [1])
	$7 = ( $3 ? $4 : ($4 <= $3) )
	if ( $7 ){ goto $label$12 }
	$7 = [0]
	$3 = [0]
	goto $label$11 
	
.LABEL $label$13
	$6 = ((int_32)($1 - $7) / (int_32)[40])
	$7 = [107374182]
	
.LABEL $label$12
	$3 = CALL _Znwj(((int_32)$7 * (int_32)[40]))
	
.LABEL $label$11
	$8 = ((int_32)$6 * (int_32)[40])
	$4 = ($3 + $8)
	$5 = ($3 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$3 }
	$7 = ((int_32)$8 / (int_32)[40])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$4 }
	$4 = ($4 + ((int_32)((int_32)($7 + [1]) / (int_32)[-2]) * (int_32)[40]))
	goto $label$3 
	
.LABEL $label$5
	*($1) = *($2)
	*(($1 + [32])) = *(($2 + [32]))
	*(($1 + [24])) = *(($2 + [24]))
	*(($1 + [16])) = *(($2 + [16]))
	*(($1 + [8])) = *(($2 + [8]))
	*(($4 = ($0 + [4]))) = (*($4) + [40])
	return $1
	
.LABEL $label$4
	$7 = ( ($7 << [1]) ? [1] : $8 )
	if ( ($7 == 0) ){ goto $label$15 }
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$1 }
	$6 = CALL _Znwj(((int_32)$7 * (int_32)[40]))
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	
.LABEL $label$14
	$4 = ($6 + ((int_32)uint_32($7 >> [2]) * (int_32)[40]))
	$5 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	*($4) = *($2)
	*(($4 + [32])) = *(($2 + [32]))
	*(($4 + [24])) = *(($2 + [24]))
	*(($4 + [16])) = *(($2 + [16]))
	*(($4 + [8])) = *(($2 + [8]))
	$3 = *($0)
	$7 = ($1 - $3)
	$6 = ($4 + ((int_32)((int_32)$7 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($6, $3, $7)
	
.LABEL $label$16
	$7 = ($4 + [40])
	$2 = ($0 + [4])
	$3 = (*($2) - $1)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($7, $1, $3)
	$7 = ($7 + ((int_32)((uint_32)$3 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$17
	*($2) = $7
	$7 = *($0)
	*($0) = $6
	*(($0 + [8])) = $5
	if ( ($7 == 0) ){ goto $label$18 }
	CALL _ZdlPv($7)
	
.LABEL $label$18
	return $4
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	CALL abort()
	(unreachable)
	return (unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$0), [9685])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6820297015373594624, (int_64)6820297015373594624)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $67($0, $4)
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$0), [9685])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10457])
	CALL $79($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $80($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = [0]
	*(($3 + [88])) = [0]
	*($3 + [64]) = $2
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	$5 = *($1)
	*($3 + [56]) = $5
	*($3 + [16]) = (int_64)1397703940
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$1 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $1 ){ goto $label$5 }
	$1 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [9498])
	*((($3 + [8]) + [24])) = (int_64)1397703940
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $6
	$1 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $1 ){ goto $label$10 }
	$1 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	
.LABEL $label$6
	CALL eosio_assert($1, [9498])
	*(($3 + [48])) = (int_64)1397703940
	*($3 + [40]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $6
	$1 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $1 ){ goto $label$15 }
	$1 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$1 = [0]
	
.LABEL $label$11
	CALL eosio_assert($1, [9498])
	CALL $30($0, ($3 + [56]), $5, ($3 + [8]))
	$7 = *($3 + [80])
	if ( ($7 == 0) ){ goto $label$16 }
	$0 = ($3 + [84])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$20 }
	CALL _ZdlPv($1)
	
.LABEL $label$20
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($3 + [80]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $7
	
.LABEL $label$17
	*($0) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$global$0 = ($3 + [96])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $31($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10648])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10648])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $61(CALL $62($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ($0 + [120])
	$4 = *($0 + [120])
	$5 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ((int_32)$4 == (int_32)*(($0 + [124]))) ){ goto $label$3 }
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((int_32)*($4) != (int_32)($6 - ((uint_32)$6 % (uint_32)[86400]))) ){ goto $label$2 }
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*(($4 + [32]))), [9175])
	$5 = ((int_64)*($4 + [24]) + (int_64)*($1))
	*($4 + [24]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)*($4 + [24]) < (int_64)4611686018427387904), [9237])
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL current_time()
	*(($2 + [24])) = *(($0 + [88]))
	*(($2 + [40])) = *(($1 + [8]))
	*($2 + [16]) = *($0 + [80])
	*($2 + [32]) = *($1)
	$4 = (CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000))
	*($2 + [8]) = ($4 - ((uint_32)$4 % (uint_32)[86400]))
	CALL $44($3, *($3), ($2 + [8]))
	goto $label$1 
	
.LABEL $label$2
	$5 = *($4 + [8])
	$7 = ($4 + [16])
	$8 = *($7)
	$6 = ($0 + [88])
	CALL eosio_assert(((int_64)*($6) == (int_64)$8), [9175])
	$5 = ((int_64)$5 + (int_64)*($0 + [80]))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9237])
	CALL eosio_assert([1], [9027])
	CALL eosio_assert([1], [9042])
	*($7) = $8
	*($4 + [8]) = ((int_64)$5 / (int_64)2)
	$5 = CALL current_time()
	*((($2 + [8]) + [16])) = *($6)
	*(($2 + [40])) = *(($1 + [8]))
	*($2 + [16]) = *($0 + [80])
	*($2 + [32]) = *($1)
	$4 = (CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000))
	*($2 + [8]) = ($4 - ((uint_32)$4 % (uint_32)[86400]))
	CALL $44($3, *(($0 + [120])), ($2 + [8]))
	
.LABEL $label$1
	$4 = ($0 + [124])
	$1 = *($4)
	if ( ((int_64)((int_64)*($0 + [72]) + (int_64)1) >= (int_64)(CASTING uint_64)(uint_32 ((int_32)($1 - *(($0 + [120]))) / (int_32)[40]))) ){ goto $label$4 }
	*($4) = ($1 + [-40])
	
.LABEL $label$4
	$global$0 = ($2 + [48])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [144])
	$global$0 = $2
	*($2 + [16]) = (int_64)1397703940
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9498])
	*((($2 + [8]) + [24])) = (int_64)1397703940
	*($2 + [24]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [9498])
	*(($2 + [48])) = (int_64)1397703940
	*($2 + [40]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$3 = $5
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$15 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [9498])
	*(($2 + [96])) = (int_64)1397703940
	*($2 + [64]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [72]) = (int_64)0
	*($2 + [80]) = (int_64)7
	*($2 + [88]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$3 = $5
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$20 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$6 = [0]
	
.LABEL $label$16
	CALL eosio_assert($6, [9498])
	*(($2 + [112])) = (int_64)1397703940
	*($2 + [104]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$3 = $5
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$25 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$6 = [0]
	
.LABEL $label$21
	CALL eosio_assert($6, [9498])
	*(($2 + [136])) = [0]
	*($2 + [120]) = (int_64)0
	*($2 + [128]) = (int_64)0
	CALL $34($0, ($1 + [48]), *($1), ($2 + [8]))
	$4 = *($2 + [128])
	if ( ($4 == 0) ){ goto $label$26 }
	*(($2 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$26
	$global$0 = ($2 + [144])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $31($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $32(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $2 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$3 = ($global$0 - [752])
	$global$0 = $3
	CALL $4(($3 + [512]), $0)
	CALL $9(($3 + [464]), $0, $1)
	$4 = *((($3 + [464]) + [40]))
	*((($3 + [400]) + [40])) = $4
	$5 = *((($3 + [464]) + [32]))
	*((($3 + [400]) + [32])) = $5
	$6 = *((($3 + [464]) + [24]))
	*((($3 + [400]) + [24])) = $6
	$7 = (($3 + [464]) + [16])
	$8 = *($7)
	*((($3 + [400]) + [16])) = $8
	$9 = (($3 + [464]) + [8])
	$10 = *($9)
	*((($3 + [400]) + [8])) = $10
	*((($3 + [64]) + [8])) = $10
	*((($3 + [64]) + [16])) = $8
	*((($3 + [64]) + [24])) = $6
	*((($3 + [64]) + [32])) = $5
	*((($3 + [64]) + [40])) = $4
	$4 = *($3 + [464])
	*($3 + [64]) = $4
	*($3 + [400]) = $4
	CALL $10(($3 + [448]), ($3 + [512]), ($3 + [64]))
	$11 = ($2 + [8])
	$5 = *($11)
	*((($3 + [384]) + [8])) = $5
	$4 = *($2)
	*((($3 + [48]) + [8])) = $5
	*($3 + [48]) = $4
	*($3 + [384]) = $4
	CALL $11(($3 + [512]), ($3 + [48]))
	$4 = *($3 + [464])
	$6 = *($9)
	$5 = *($11)
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9175])
	$8 = *($2)
	$4 = ((int_64)$4 + (int_64)$8)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [9237])
	CALL eosio_assert(((int_64)$6 == (int_64)*((($3 + [512]) + [24]))), [9116])
	CALL eosio_assert(((int_64)$4 <= (int_64)*($3 + [528])), [9255])
	CALL eosio_assert(((int_64)$5 == (int_64)*($9)), [9175])
	$4 = ((int_64)$8 + (int_64)*($3 + [464]))
	*($3 + [464]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)*($3 + [464]) < (int_64)4611686018427387904), [9237])
	$2 = [0]
	*((($3 + [344]) + [32])) = [0]
	*($3 + [352]) = $1
	*($3 + [360]) = (int_64)-1
	*($3 + [368]) = (int_64)0
	$4 = *($0)
	*($3 + [344]) = $4
	$11 = CALL db_find_i64($4, $1, (int_64)-5001342326447013888, (int_64)-5001342326447013888)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $12(($3 + [344]), $11) + [24]) == (int_32)($3 + [344])), [9685])
	if ( ((int_64)*($3 + [480]) != (int_64)0) ){ goto $label$1 }
	$11 = *(($3 + [372]))
	if ( ((int_32)$11 == (int_32)*(($3 + [368]))) ){ goto $label$3 }
	$11 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($3 + [344])), [9685])
	goto $label$2 
	
.LABEL $label$3
	$11 = [0]
	$12 = CALL db_find_i64(*($3 + [344]), *(($3 + [352])), (int_64)-5001342326447013888, (int_64)-5001342326447013888)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$2 }
	$11 = CALL $12(($3 + [344]), $12)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($3 + [344])), [9685])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [10827])
	$4 = *(($11 + [16]))
	*((($3 + [648]) + [16])) = $4
	$5 = *($11)
	$6 = *(($11 + [8]))
	*($7) = $6
	*((($3 + [648]) + [8])) = $6
	*(($7 + [8])) = $4
	*($3 + [648]) = $5
	
.LABEL $label$1
	$4 = *($3 + [464])
	$4 = *($3 + [624])
	CALL __multi3(($3 + [32]), $4, (int_64)$4 >> (int_64)63), $4, (int_64)$4 >> (int_64)63))
	$4 = *((($3 + [32]) + [8]))
	$5 = *($3 + [32])
	$6 = ((int_64)$5 + (int_64)999999999999)
	CALL __divti3(($3 + [16]), $6, ((int_64)$4 + (int_64)(CASTING uint_64)(uint_32 (uint_64)($6 <= $5))), (int_64)1000000000000, (int_64)0)
	$6 = *($9)
	CALL eosio_assert(( (uint_64)($5 <= (int_64)-999999999999) ? ((int_64)$4 < (int_64)249999999999) : ((int_64)$4 == (int_64)249999999999) ), [9067])
	CALL eosio_assert(( ((uint_64)$5 > (uint_64)(int_64)-999999999999) ? ((int_64)$4 > (int_64)-250000000001) : ((int_64)$4 == (int_64)-250000000001) ), [9091])
	$8 = *($3 + [16])
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9449])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$4 = $5
	$9 = [1]
	$11 = $2
	$2 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$4 = $5
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$2 < (int_32)[6])
	$11 = ($2 + [1])
	$2 = $11
	if ( $9 ){ goto $label$8 }
	$9 = [1]
	$2 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$9 = [0]
	
.LABEL $label$4
	CALL eosio_assert($9, [9498])
	CALL eosio_assert(((int_64)*($3 + [456]) == (int_64)$6), [9175])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4(*($3 + [448]) - $8)) > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [9237])
	*(($2 = (($3 + [464]) + [40]))) = $6
	*($3 + [496]) = $4
	$9 = (($3 + [464]) + [8])
	CALL eosio_assert(((int_64)*($9) == (int_64)*((($3 + [512]) + [24]))), [9116])
	CALL eosio_assert(((int_64)*($3 + [464]) <= (int_64)*((($3 + [512]) + [16]))), [9255])
	*(($11 = (($3 + [296]) + [40]))) = *($2)
	*(($2 = (($3 + [296]) + [32]))) = *($3 + [496])
	*(($7 = (($3 + [296]) + [24]))) = *((($3 + [464]) + [24]))
	*(($12 = (($3 + [296]) + [16]))) = *((($3 + [464]) + [16]))
	*(($13 = (($3 + [296]) + [8]))) = *($9)
	*($3 + [296]) = *($3 + [464])
	*((($3 + [648]) + [40])) = *($11)
	*((($3 + [648]) + [32])) = *($2)
	*((($3 + [648]) + [24])) = *($7)
	*((($3 + [648]) + [16])) = *($12)
	*((($3 + [648]) + [8])) = *($13)
	*($3 + [648]) = *($3 + [296])
	*((($3 + [696]) + [32])) = [0]
	*($3 + [704]) = $1
	*($3 + [712]) = (int_64)-1
	*($3 + [720]) = (int_64)0
	$4 = *($0)
	*($3 + [696]) = $4
	CALL $13(($3 + [696]), ($3 + [648]), $4)
	$11 = *($3 + [720])
	if ( ($11 == 0) ){ goto $label$9 }
	$7 = ($3 + [724])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($2 + [-24])
	$9 = *($2)
	*($2) = [0]
	if ( ($9 == 0) ){ goto $label$13 }
	CALL _ZdlPv($9)
	
.LABEL $label$13
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($3 + [720]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $11
	
.LABEL $label$10
	*($7) = $11
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$4 = *($3 + [560])
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$15 }
	CALL eosio_assert(((int_64)$4 < (int_64)10001), [9330])
	$8 = *($0)
	$4 = (int_64)0
	$1 = (int_64)59
	$2 = [8464]
	$6 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$21 }
	$9 = *($2)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$9 = ($9 + [-91])
	goto $label$19 
	
.LABEL $label$21
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$17
	$2 = ($2 + [1])
	$1 = ((int_64)$1 + (int_64)4294967291)
	$6 = ((int_64)$5 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$16 }
	CALL $14(($3 + [280]), $0, $8, $6, (int_64)5459781)
	$4 = (int_64)
	$4 = *($3 + [592])
	CALL __multi3($3, $4, (int_64)$4 >> (int_64)63), $4((int_64)10000 - *(($3 + [560])))), (int_64)$4 >> (int_64)63))
	$1 = *(($3 + [600]))
	$4 = *(($3 + [8]))
	$5 = *($3)
	CALL eosio_assert(( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [9067])
	CALL eosio_assert(( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [9091])
	CALL eosio_assert([1], [9027])
	CALL eosio_assert([1], [9042])
	$4 = *($3 + [280])
	$14 = *($3 + [288])
	CALL eosio_assert(((int_64)$1 == (int_64)$14), [10705])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($4 - ((int_64)$5 / (int_64)10000))) > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [10775])
	if ( ((int_64)$10 < (int_64)1) ){ goto $label$15 }
	$5 = *($0)
	$4 = (int_64)6
	
.LOOP $label$22:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$22 }
	*($3 + [272]) = (int_64)3617214756542218240
	*($3 + [264]) = $5
	$4 = (int_64)0
	$1 = (int_64)59
	$2 = [8464]
	$6 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$28 }
	$9 = *($2)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$9 = ($9 + [-91])
	goto $label$26 
	
.LABEL $label$28
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$24
	$2 = ($2 + [1])
	$1 = ((int_64)$1 + (int_64)4294967291)
	$6 = ((int_64)$5 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$23 }
	$4 = (int_64)0
	$1 = (int_64)59
	$2 = [8476]
	$8 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$34 }
	$9 = *($2)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$9 = ($9 + [-91])
	goto $label$32 
	
.LABEL $label$34
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$30
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$8 = ((int_64)$5 | (int_64)$8)
	$1 = ((int_64)$1 + (int_64)4294967291)
	if ( ((int_64)$1 != (int_64)55834574842) ){ goto $label$29 }
	*(($3 + [256])) = [0]
	*($3 + [248]) = (int_64)0
	$2 = CALL $97([9372])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$37 }
	*($3 + [248]) = ($2 << [1])
	$9 = (($3 + [248]) | [1])
	if ( $2 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$11 = (($2 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*($3 + [248]) = ($11 | [1])
	*($3 + [256]) = $9
	*($3 + [252]) = $2
	
.LABEL $label$36
	CALL memcpy($9, [9372], $2)
	
.LABEL $label$35
	*(($9 + $2)) = [0]
	*(($3 + [672])) = $14
	$2 = ($3 + [256])
	*(($3 + [688])) = *($2)
	*($2) = [0]
	*($3 + [656]) = (int_64)4154302010520163712
	*($3 + [664]) = $10
	*($3 + [648]) = *($0)
	*($3 + [680]) = *($3 + [248])
	*($3 + [248]) = (int_64)0
	$2 = CALL $5(($3 + [696]), ($3 + [264]), $6, $8, ($3 + [648]))
	CALL $6(($3 + [736]), $2)
	$9 = *($3 + [736])
	CALL send_inline($9, (*($3 + [740]) - $9))
	$9 = *($3 + [736])
	if ( ($9 == 0) ){ goto $label$38 }
	*($3 + [740]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$38
	$9 = *($2 + [28])
	if ( ($9 == 0) ){ goto $label$39 }
	*(($2 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$39
	$9 = *($2 + [16])
	if ( ($9 == 0) ){ goto $label$40 }
	*(($2 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$40
	if ( ((*(($3 + [680])) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($3 + [688])))
	
.LABEL $label$41
	if ( ((*($3 + [248]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [256])))
	
.LABEL $label$15
	CALL memcpy(($3 + [112]), ($3 + [512]), [120])
	*(($3 + [240])) = [0]
	*($3 + [232]) = (int_64)0
	$2 = (*(($3 + [636])) - *($3 + [632]))
	$9 = ((int_32)$2 / (int_32)[40])
	if ( ($2 == 0) ){ goto $label$43 }
	if ( ((uint_32)$9 >= (uint_32)[107374183]) ){ goto $label$42 }
	$2 = CALL _Znwj($2)
	*((($3 + [112]) + [120])) = $2
	*(($11 = (($3 + [112]) + [124]))) = $2
	*(($3 + [240])) = ($2 + ((int_32)$9 * (int_32)[40]))
	$7 = *((($3 + [512]) + [120]))
	$9 = (*((($3 + [512]) + [124])) - $7)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$43 }
	CALL memcpy($2, $7, $9)
	*($11) = (*($11) + ((int_32)((uint_32)$9 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$43
	CALL $8(($0 + [48]), ($3 + [112]), *($0))
	$2 = *($3 + [232])
	if ( ($2 == 0) ){ goto $label$44 }
	*(($3 + [236])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$44
	$11 = *($3 + [368])
	if ( ($11 == 0) ){ goto $label$45 }
	$0 = ($3 + [372])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$47 }
	
.LOOP $label$48:
	$2 = ($2 + [-24])
	$9 = *($2)
	*($2) = [0]
	if ( ($9 == 0) ){ goto $label$49 }
	CALL _ZdlPv($9)
	
.LABEL $label$49
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$48 }
	$2 = *(($3 + [368]))
	goto $label$46 
	
.LABEL $label$47
	$2 = $11
	
.LABEL $label$46
	*($0) = $11
	CALL _ZdlPv($2)
	
.LABEL $label$45
	$2 = *($3 + [632])
	if ( ($2 == 0) ){ goto $label$50 }
	*(($3 + [636])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$50
	$global$0 = ($3 + [752])
	return (unreachable)
	
.LABEL $label$42
	CALL $94((($3 + [112]) + [120]))
	
.LABEL $label$14
	CALL $90(($3 + [248]))
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [480])
	$global$0 = $2
	CALL $4(($2 + [328]), $0)
	$4 = *($2 + [392])
	$3 = *($1)
	CALL __multi3(($2 + [56]), $3, (int_64)$3 >> (int_64)63), $4, (int_64)$4 >> (int_64)63))
	$5 = *($1 + [8])
	$4 = *((($2 + [56]) + [8]))
	$6 = *($2 + [56])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [9067])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [9091])
	CALL eosio_assert([1], [9027])
	CALL eosio_assert([1], [9042])
	CALL eosio_assert([1], [9116])
	$7 = ((int_64)$6 / (int_64)10000)
	CALL eosio_assert(((int_64)$7 < (int_64)$3), [8959])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8882])
	$4 = $5
	if ( ((int_64)$6 < (int_64)10000) ){ goto $label$2 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$3:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$3 }
	*($2 + [280]) = (int_64)3617214756542218240
	*($2 + [272]) = $4
	$3 = (int_64)0
	$6 = (int_64)59
	$8 = [8464]
	$9 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$9 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$10 = ($10 + [-91])
	goto $label$7 
	
.LABEL $label$9
	$4 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$5
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)4294967291)
	$9 = ((int_64)$4 | (int_64)$9)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$4 }
	$3 = (int_64)0
	$6 = (int_64)59
	$8 = [8476]
	$11 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$15 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$10 = ($10 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$11 = ((int_64)$4 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$10 }
	*(($2 + [216])) = [0]
	*($2 + [208]) = (int_64)0
	$8 = CALL $97([9012])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$18 }
	*($2 + [208]) = ($8 << [1])
	$10 = (($2 + [208]) | [1])
	if ( $8 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$12 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($12)
	*($2 + [208]) = ($12 | [1])
	*($2 + [216]) = $10
	*($2 + [212]) = $8
	
.LABEL $label$17
	CALL memcpy($10, [9012], $8)
	
.LABEL $label$16
	*(($10 + $8)) = [0]
	*(($2 + [248])) = $5
	$8 = ($2 + [216])
	*(($2 + [264])) = *($8)
	*($8) = [0]
	*($2 + [232]) = (int_64)8200272320026416512
	*($2 + [240]) = $7
	*($2 + [224]) = *($0)
	*($2 + [256]) = *($2 + [208])
	*($2 + [208]) = (int_64)0
	$8 = CALL $5(($2 + [288]), ($2 + [272]), $9, $11, ($2 + [224]))
	CALL $6(($2 + [464]), $8)
	$10 = *($2 + [464])
	CALL send_inline($10, (*($2 + [468]) - $10))
	$10 = *($2 + [464])
	if ( ($10 == 0) ){ goto $label$19 }
	*($2 + [468]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$19
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$20 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$20
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$21 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$21
	if ( ((*(($2 + [256])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($2 + [264])))
	
.LABEL $label$22
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($2 + [216])))
	
.LABEL $label$23
	$4 = *(($1 + [8]))
	$3 = *($1)
	
.LABEL $label$2
	$3 = (int_64)
	CALL __multi3(($2 + [24]), $3($3 - $7)), (int_64)$3 >> (int_64)63), (int_64)1000000000000, (int_64)0)
	CALL eosio_assert(((int_64)$5 == (int_64)$4), [10705])
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [10775])
	CALL eosio_assert(((int_64)$4 == (int_64)*(($2 + [432]))), [9175])
	$6 = ((int_64)*($2 + [424]) + (int_64)$3)
	*($2 + [424]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)*($2 + [424]) < (int_64)4611686018427387904), [9237])
	$6 = *($2 + [408])
	CALL __divti3(($2 + [8]), *($2 + [24]), *((($2 + [24]) + [8])), $6, (int_64)$6 >> (int_64)63))
	$6 = *((($2 + [8]) + [8]))
	$9 = *($2 + [8])
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [9067])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9091])
	*((($2 + [40]) + [8])) = $4
	*($2 + [224]) = $3
	*($2 + [232]) = $4
	*($2 + [40]) = $3
	*($2 + [440]) = ((int_64)$9 + (int_64)*($2 + [440]))
	CALL $7(($2 + [328]), ($2 + [40]))
	CALL memcpy(($2 + [72]), ($2 + [328]), [120])
	*(($2 + [200])) = [0]
	*($2 + [192]) = (int_64)0
	$8 = (*(($2 + [452])) - *($2 + [448]))
	$10 = ((int_32)$8 / (int_32)[40])
	if ( ($8 == 0) ){ goto $label$25 }
	if ( ((uint_32)$10 >= (uint_32)[107374183]) ){ goto $label$24 }
	$8 = CALL _Znwj($8)
	*((($2 + [72]) + [120])) = $8
	*(($1 = (($2 + [72]) + [124]))) = $8
	*(($2 + [200])) = ($8 + ((int_32)$10 * (int_32)[40]))
	$12 = *((($2 + [328]) + [120]))
	$10 = (*((($2 + [328]) + [124])) - $12)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$25 }
	CALL memcpy($8, $12, $10)
	*($1) = (*($1) + ((int_32)((uint_32)$10 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$25
	CALL $8(($0 + [48]), ($2 + [72]), *($0))
	$8 = *($2 + [192])
	if ( ($8 == 0) ){ goto $label$26 }
	*(($2 + [196])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$26
	$8 = *($2 + [448])
	if ( ($8 == 0) ){ goto $label$27 }
	*(($2 + [452])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$27
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$24
	CALL $94((($2 + [72]) + [120]))
	
.LABEL $label$1
	CALL $90(($2 + [208]))
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [64])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$2 }
	$8 = *($4)
	$7 = CALL $97([8192])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$3 }
	if ( (CALL $93($4, [0], [-1], [8192], $7) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = *($4)
	$7 = ($4 + [4])
	$9 = CALL $97([8199])
	if ( ((int_32)$9 != (int_32)( *($7) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$4 }
	if ( (CALL $93($4, [0], [-1], [8199], $9) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [8296])
	$8 = [0]
	$7 = *($4)
	$9 = CALL $97([8325])
	if ( ((int_32)$9 != (int_32)( *($7) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$5 }
	$8 = (CALL $93($4, [0], [-1], [8325], $9) == 0)
	
.LABEL $label$5
	CALL eosio_assert($8, [8333])
	$6 = *(($3 + [8]))
	*((($5 + [32]) + [8])) = $6
	$2 = *($3)
	*((($5 + [16]) + [8])) = $6
	*($5 + [16]) = $2
	*($5 + [32]) = $2
	CALL $2($0, $1, ($5 + [16]))
	
.LABEL $label$2
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$1
	$2 = *(($3 + [8]))
	*((($5 + [48]) + [8])) = $2
	$1 = *($3)
	*(($5 + [8])) = $2
	*($5 + [48]) = $1
	*($5) = $1
	CALL $3($0, $5)
	$global$0 = ($5 + [64])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = [0]
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	*($5 + [16]) = $2
	*($5 + [8]) = $3
	$7 = CALL db_find_i64($3, $2, (int_64)3607749779137757184, $4)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $45(($5 + [8]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($5 + [8])), [9685])
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	$7 = *($5 + [32])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($5 + [36])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($5 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9449])
	$3 = (int_64)5459781
	
.LOOP $label$8:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $2
	$8 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = $2
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$0 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $0 ){ goto $label$10 }
	$8 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($8, [9498])
	
.LABEL $label$3
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$2
	$6 = $7
	
.LABEL $label$1
	*($8) = $7
	CALL _ZdlPv($6)
	$global$0 = ($5 + [48])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [1]
	if ( CALL has_auth($1) ){ goto $label$1 }
	if ( CALL has_auth((int_64)3631284093736285296) ){ goto $label$1 }
	$5 = CALL has_auth(*($0))
	
.LABEL $label$1
	CALL eosio_assert($5, [8356])
	$6 = *(($2 + [8]))
	*((($4 + [16]) + [8])) = $6
	$7 = *($2)
	*(($4 + [8])) = $6
	*($4) = $7
	*($4 + [16]) = $7
	CALL $16($0, $1, $4, $3)
	$global$0 = ($4 + [32])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [752])
	$global$0 = $4
	*($4 + [688]) = $1
	CALL $4(($4 + [552]), $0)
	CALL $9(($4 + [504]), $0, $1)
	$1 = *((($4 + [504]) + [40]))
	*((($4 + [440]) + [40])) = $1
	$5 = *((($4 + [504]) + [32]))
	*((($4 + [440]) + [32])) = $5
	$6 = *((($4 + [504]) + [24]))
	*((($4 + [440]) + [24])) = $6
	$7 = *((($4 + [504]) + [16]))
	*((($4 + [440]) + [16])) = $7
	$8 = (($4 + [504]) + [8])
	$9 = *($8)
	*((($4 + [440]) + [8])) = $9
	*((($4 + [64]) + [8])) = $9
	*((($4 + [64]) + [16])) = $7
	*((($4 + [64]) + [24])) = $6
	*((($4 + [64]) + [32])) = $5
	*((($4 + [64]) + [40])) = $1
	$1 = *($4 + [504])
	*($4 + [64]) = $1
	*($4 + [440]) = $1
	CALL $10(($4 + [488]), ($4 + [552]), ($4 + [64]))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($4 + [488]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9764])
	$1 = *($4 + [504])
	$5 = *($8)
	CALL eosio_assert(((int_64)*($4 + [496]) == (int_64)$5), [9175])
	$1 = ((int_64)$1 + (int_64)*($4 + [488]))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9237])
	CALL eosio_assert(((int_64)$5 == (int_64)*($8)), [9116])
	CALL eosio_assert(((int_64)$1 >= (int_64)*($4 + [504])), [9812])
	$9 = *($2)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$1 }
	*($2 + [8]) = $5
	*($2) = $1
	$9 = $1
	
.LABEL $label$1
	CALL eosio_assert([1], [9449])
	$1 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $5
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$1 = $5
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$6 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$10 = [0]
	
.LABEL $label$2
	CALL eosio_assert($10, [9498])
	CALL eosio_assert([1], [9449])
	$1 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $5
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$1 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$11 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	
.LABEL $label$7
	CALL eosio_assert($10, [9498])
	$8 = ($4 + [496])
	$12 = *($2 + [8])
	CALL eosio_assert(((int_64)$12 == (int_64)*($8)), [9116])
	if ( ((int_64)$9 >= (int_64)*($4 + [488])) ){ goto $label$15 }
	CALL eosio_assert([1], [9449])
	$1 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$1 = $5
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$16 }
	goto $label$13 
	
.LABEL $label$17
	$1 = $5
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$18 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$16 }
	goto $label$13 
	
.LABEL $label$15
	CALL eosio_assert(((int_64)*($8) == (int_64)$12), [10705])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($9 - *($4 + [488]))) > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [10775])
	$6 = *($8)
	$13 = *($4 + [488])
	$5 = $12
	goto $label$12 
	
.LABEL $label$14
	$10 = [0]
	
.LABEL $label$13
	CALL eosio_assert($10, [9498])
	$5 = (int_64)1397703940
	$1 = (int_64)0
	$13 = $9
	$6 = $12
	
.LABEL $label$12
	*((($4 + [48]) + [8])) = $5
	*((($4 + [32]) + [8])) = $6
	*($4 + [432]) = $5
	*($4 + [424]) = $1
	*($4 + [408]) = $13
	*($4 + [416]) = $6
	*($4 + [48]) = $1
	*($4 + [32]) = $13
	CALL $17(($4 + [552]), ($4 + [48]), ($4 + [32]))
	$14 = *($4 + [504])
	$7 = *((($4 + [504]) + [8]))
	CALL eosio_assert(((int_64)$5 == (int_64)$7), [10705])
	$5 = (int_64)
	CALL eosio_assert(((int_64)$5($14 - $1)) > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [10775])
	$1 = *($4 + [488])
	$14 = *((($4 + [488]) + [8]))
	CALL eosio_assert(((int_64)$6 == (int_64)$14), [10705])
	$13 = (int_64)
	CALL eosio_assert(((int_64)$13($1 - $13)) > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [10775])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9854])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9879])
	if ( (int_64)($5 == 0) ){ goto $label$22 }
	CALL eosio_assert(((int_64)$7 == (int_64)*(($4 + [592]))), [9116])
	CALL eosio_assert(((int_64)$5 >= (int_64)*($4 + [584])), [9904])
	$1 = *($4 + [664])
	CALL __multi3(($4 + [16]), $1, (int_64)$1 >> (int_64)63), $5, (int_64)$5 >> (int_64)63))
	$1 = *((($4 + [16]) + [8]))
	$6 = *($4 + [16])
	$15 = ((int_64)$6 + (int_64)999999999999)
	CALL __divti3($4, $15, ((int_64)$1 + (int_64)(CASTING uint_64)(uint_32 (uint_64)($15 <= $6))), (int_64)1000000000000, (int_64)0)
	CALL eosio_assert(( (uint_64)($6 <= (int_64)-999999999999) ? ((int_64)$1 < (int_64)249999999999) : ((int_64)$1 == (int_64)249999999999) ), [9067])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-999999999999) ? ((int_64)$1 > (int_64)-250000000001) : ((int_64)$1 == (int_64)-250000000001) ), [9091])
	$15 = *($4)
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9449])
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$1 = $6
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$1 = $6
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$27 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$10 = [0]
	
.LABEL $label$23
	CALL eosio_assert($10, [9498])
	CALL eosio_assert(((int_64)$14 == (int_64)$7), [9175])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($13 - $15)) > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9237])
	*(($8 = (($4 + [504]) + [8]))) = $7
	*($4 + [504]) = $5
	$5 = $7
	if ( ($3 == 0) ){ goto $label$28 }
	CALL eosio_assert(((int_64)$12 == (int_64)*(($4 + [528]))), [9175])
	$5 = ((int_64)*($4 + [520]) + (int_64)$9)
	*($4 + [520]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)*($4 + [520]) < (int_64)4611686018427387904), [9237])
	$5 = *($8)
	
.LABEL $label$28
	*(($10 = (($4 + [504]) + [40]))) = $7
	*($4 + [536]) = $1
	CALL eosio_assert(((int_64)$5 == (int_64)*((($4 + [552]) + [24]))), [9116])
	CALL eosio_assert(((int_64)*($4 + [504]) <= (int_64)*($4 + [568])), [9255])
	*(($11 = (($4 + [360]) + [8]))) = *($8)
	*(($8 = (($4 + [360]) + [16]))) = *((($4 + [504]) + [16]))
	*(($16 = (($4 + [360]) + [24]))) = *((($4 + [504]) + [24]))
	*(($17 = (($4 + [360]) + [32]))) = *($4 + [536])
	*(($18 = (($4 + [360]) + [40]))) = *($10)
	*($4 + [360]) = *($4 + [504])
	$1 = *($4 + [688])
	*((($4 + [144]) + [40])) = *($18)
	*((($4 + [144]) + [32])) = *($17)
	*((($4 + [144]) + [24])) = *($16)
	*((($4 + [144]) + [16])) = *($8)
	*((($4 + [144]) + [8])) = *($11)
	*($4 + [144]) = *($4 + [360])
	*((($4 + [696]) + [32])) = [0]
	*($4 + [704]) = $1
	*($4 + [712]) = (int_64)-1
	*($4 + [720]) = (int_64)0
	$1 = *($0)
	*($4 + [696]) = $1
	CALL $13(($4 + [696]), ($4 + [144]), $1)
	$11 = *($4 + [720])
	if ( ($11 == 0) ){ goto $label$19 }
	$16 = ($4 + [724])
	$8 = *($16)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$21 }
	
.LOOP $label$29:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$30 }
	CALL _ZdlPv($10)
	
.LABEL $label$30
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$29 }
	$8 = *(($4 + [720]))
	goto $label$20 
	
.LABEL $label$22
	CALL $18($0, *($4 + [688]))
	goto $label$19 
	
.LABEL $label$21
	$8 = $11
	
.LABEL $label$20
	*($16) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$19
	CALL memcpy(($4 + [224]), ($4 + [552]), [120])
	*(($4 + [352])) = [0]
	*($4 + [344]) = (int_64)0
	$8 = (*(($4 + [676])) - *($4 + [672]))
	$10 = ((int_32)$8 / (int_32)[40])
	if ( ($8 == 0) ){ goto $label$34 }
	if ( ((uint_32)$10 >= (uint_32)[107374183]) ){ goto $label$33 }
	$8 = CALL _Znwj($8)
	*((($4 + [224]) + [120])) = $8
	*(($11 = (($4 + [224]) + [124]))) = $8
	*(($4 + [352])) = ($8 + ((int_32)$10 * (int_32)[40]))
	$16 = *((($4 + [552]) + [120]))
	$10 = (*((($4 + [552]) + [124])) - $16)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$34 }
	CALL memcpy($8, $16, $10)
	*($11) = (*($11) + ((int_32)((uint_32)$10 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$34
	CALL $8(($0 + [48]), ($4 + [224]), *($0))
	$8 = *($4 + [344])
	if ( ($8 == 0) ){ goto $label$35 }
	*(($4 + [348])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$35
	if ( ($3 == 0) ){ goto $label$43 }
	*(($4 + [728])) = [0]
	*($4 + [712]) = (int_64)-1
	*($4 + [720]) = (int_64)0
	$1 = *($0)
	*($4 + [696]) = $1
	$5 = *($4 + [688])
	*($4 + [704]) = $5
	$8 = CALL db_find_i64($1, $5, (int_64)-5001342326447013888, (int_64)-5001342326447013888)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$42 }
	CALL eosio_assert(((int_32)*(CALL $12(($4 + [696]), $8) + [24]) == (int_32)($4 + [696])), [9685])
	$8 = *(($4 + [724]))
	if ( ((int_32)$8 == (int_32)*(($4 + [720]))) ){ goto $label$41 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($4 + [696])), [9685])
	goto $label$40 
	
.LABEL $label$43
	$1 = ((int_64)*($4 + [608]) * (int_64)$9)
	$13 = ( ((int_64)$1 / (int_64)10000) ? (int_64)1 : ((uint_64)((int_64)$1 + (int_64)9999) > (uint_64)(int_64)19998) )
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9449])
	$1 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$47 }
	$1 = $5
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$47
	$1 = $5
	
.LOOP $label$48:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$45 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$48 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$10 = [0]
	
.LABEL $label$44
	CALL eosio_assert($10, [9498])
	CALL eosio_assert(((int_64)$13 > (int_64)0), [10019])
	$5 = *($0)
	$1 = (int_64)6
	
.LOOP $label$49:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$49 }
	*($4 + [136]) = (int_64)3617214756542218240
	*($4 + [128]) = $5
	$1 = (int_64)0
	$6 = (int_64)59
	$8 = [8464]
	$7 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$55 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$10 = ($10 + [-91])
	goto $label$53 
	
.LABEL $label$55
	$5 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$51
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)4294967291)
	$7 = ((int_64)$5 | (int_64)$7)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$50 }
	$1 = (int_64)0
	$6 = (int_64)59
	$8 = [8476]
	$9 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$61 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$10 = ($10 + [-91])
	goto $label$59 
	
.LABEL $label$61
	$5 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$57
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$5 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$56 }
	*(($4 + [120])) = [0]
	*($4 + [112]) = (int_64)0
	$8 = CALL $97([10058])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$64 }
	*($4 + [112]) = ($8 << [1])
	$10 = (($4 + [112]) | [1])
	if ( $8 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($4 + [112]) = ($11 | [1])
	*($4 + [120]) = $10
	*($4 + [116]) = $8
	
.LABEL $label$63
	CALL memcpy($10, [10058], $8)
	
.LABEL $label$62
	*(($10 + $8)) = [0]
	*(($4 + [168])) = (int_64)1397703940
	$8 = ($4 + [120])
	*(($4 + [184])) = *($8)
	*($8) = [0]
	*($4 + [152]) = (int_64)8200272320026416512
	*($4 + [160]) = $13
	*($4 + [144]) = *($0)
	*($4 + [176]) = *($4 + [112])
	*($4 + [112]) = (int_64)0
	$8 = CALL $5(($4 + [696]), ($4 + [128]), $7, $9, ($4 + [144]))
	CALL $6(($4 + [736]), $8)
	$10 = *($4 + [736])
	CALL send_inline($10, (*($4 + [740]) - $10))
	$10 = *($4 + [736])
	if ( ($10 == 0) ){ goto $label$65 }
	*($4 + [740]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$65
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$66 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$66
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$67 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$67
	if ( ((*(($4 + [176])) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$68
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*(($4 + [120])))
	
.LABEL $label$69
	$5 = *($0)
	$1 = (int_64)6
	
.LOOP $label$70:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$70 }
	*($4 + [136]) = (int_64)3617214756542218240
	*($4 + [128]) = $5
	$1 = (int_64)0
	$6 = (int_64)59
	$8 = [8464]
	$7 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$76 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$10 = ($10 + [-91])
	goto $label$74 
	
.LABEL $label$76
	$5 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$72
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)4294967291)
	$7 = ((int_64)$5 | (int_64)$7)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$71 }
	$1 = (int_64)0
	$6 = (int_64)59
	$8 = [8476]
	$9 = (int_64)0
	
.LOOP $label$77:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$82 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$10 = ($10 + [-91])
	goto $label$80 
	
.LABEL $label$82
	$5 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$81
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$79
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$78
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$5 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$77 }
	$1 = *($2)
	$5 = *(($2 + [8]))
	CALL eosio_assert(((int_64)$5 == (int_64)1397703940), [10705])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($1 - $13)) > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [10775])
	*((($4 + [112]) + [8])) = [0]
	*($4 + [112]) = (int_64)0
	$8 = CALL $97([10071])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$85 }
	*($4 + [112]) = ($8 << [1])
	$10 = (($4 + [112]) | [1])
	if ( $8 ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$85
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($4 + [112]) = ($11 | [1])
	*($4 + [120]) = $10
	*($4 + [116]) = $8
	
.LABEL $label$84
	CALL memcpy($10, [10071], $8)
	
.LABEL $label$83
	*(($10 + $8)) = [0]
	*(($4 + [168])) = $5
	$8 = ($4 + [120])
	*(($4 + [184])) = *($8)
	*($8) = [0]
	*($4 + [160]) = $1
	*($4 + [144]) = *($0)
	*($4 + [152]) = *($4 + [688])
	*($4 + [176]) = *($4 + [112])
	*($4 + [112]) = (int_64)0
	$8 = CALL $5(($4 + [696]), ($4 + [128]), $7, $9, ($4 + [144]))
	CALL $6(($4 + [736]), $8)
	$10 = *($4 + [736])
	CALL send_inline($10, (*($4 + [740]) - $10))
	$10 = *($4 + [736])
	if ( ($10 == 0) ){ goto $label$86 }
	*($4 + [740]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$86
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$87 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$87
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$88 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$88
	if ( ((*(($4 + [176])) & [1]) == 0) ){ goto $label$89 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$89
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($4 + [120])))
	$8 = *($4 + [672])
	if ( $8 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$42
	$1 = CALL current_time()
	*(($4 + [160])) = *(($2 + [8]))
	$5 = *($2)
	*($4 + [152]) = $5
	*($4 + [144]) = ((uint_64)$1 / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$5 < (int_64)200000001), [9973])
	CALL $19(($4 + [696]), ($4 + [144]), *($0))
	goto $label$39 
	
.LABEL $label$41
	$8 = [0]
	$10 = CALL db_find_i64(*($4 + [696]), *(($4 + [704])), (int_64)-5001342326447013888, (int_64)-5001342326447013888)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$40 }
	$8 = CALL $12(($4 + [696]), $10)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($4 + [696])), [9685])
	
.LABEL $label$40
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10827])
	*(($11 = (($4 + [144]) + [16]))) = *(($8 + [16]))
	*(($10 = (($4 + [144]) + [8]))) = *(($8 + [8]))
	*($4 + [144]) = *($8)
	*($4 + [144]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$12 == (int_64)*($11)), [9175])
	$1 = ((int_64)*($10) + (int_64)$9)
	*($10) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [9237])
	CALL eosio_assert(((int_64)*($10) < (int_64)200000001), [9973])
	CALL $19(($4 + [696]), ($4 + [144]), *($0))
	
.LABEL $label$39
	*(($8 = (($4 + [208]) + [8]))) = *(($2 + [8]))
	*($4 + [208]) = *($2)
	*((($4 + [144]) + [8])) = *($8)
	*($4 + [144]) = *($4 + [208])
	$8 = ($0 + [8])
	$10 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-5001342331490271232, (int_64)0)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$91 }
	$10 = CALL $20($8, $10)
	$1 = *($0)
	*($4 + [128]) = ($4 + [144])
	CALL eosio_assert([1], [10457])
	CALL $21($8, $10, $1, ($4 + [128]))
	goto $label$90 
	
.LABEL $label$91
	$1 = *($0)
	*($4 + [736]) = ($4 + [144])
	CALL $22(($4 + [128]), $8, $1, ($4 + [736]))
	
.LABEL $label$90
	$1 = CALL current_time()
	*(($4 + [172])) = (int_64)0
	*(($4 + [188])) = (int_64)0
	*(($4 + [196])) = (int_64)0
	*($4 + [156]) = [0]
	*($4 + [160]) = [0]
	*($4 + [164 align=4]) = (int_64)0
	*($4 + [180 align=4]) = (int_64)0
	*($4 + [144]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	$8 = ($4 + [180])
	$5 = *($0)
	$1 = (int_64)6
	
.LOOP $label$92:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$92 }
	*($4 + [136]) = (int_64)3617214756542218240
	*($4 + [128]) = $5
	$1 = (int_64)6
	
.LOOP $label$93:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$93 }
	*($4 + [736]) = (int_64)-5001342339331915776
	CALL $23($8, ($4 + [128]), $0, ($4 + [736]), ($4 + [688]))
	$1 = *($4 + [688])
	*(($4 + [164])) = [259200]
	*($4 + [136]) = (int_64)0
	*($4 + [128]) = $1
	CALL cancel_deferred(($4 + [128]))
	*($4 + [136]) = (int_64)0
	*($4 + [128]) = *($4 + [688])
	$1 = *($0)
	CALL $24(($4 + [736]), ($4 + [144]))
	$8 = *($4 + [736])
	CALL send_deferred(($4 + [128]), $1, $8, (*($4 + [740]) - $8), [1])
	$8 = *($4 + [736])
	if ( ($8 == 0) ){ goto $label$94 }
	*($4 + [740]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$94
	CALL $25(($4 + [144]))
	$11 = *($4 + [720])
	if ( ($11 == 0) ){ goto $label$38 }
	$0 = ($4 + [724])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$96 }
	
.LOOP $label$97:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$98 }
	CALL _ZdlPv($10)
	
.LABEL $label$98
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$97 }
	$8 = *(($4 + [720]))
	goto $label$95 
	
.LABEL $label$96
	$8 = $11
	
.LABEL $label$95
	*($0) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$38
	$8 = *($4 + [672])
	if ( ($8 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	*(($4 + [676])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$36
	$global$0 = ($4 + [752])
	return (unreachable)
	
.LABEL $label$33
	CALL $94((($4 + [224]) + [120]))
	
.LABEL $label$32
	CALL $90(($4 + [112]))
	
.LABEL $label$31
	CALL $90(($4 + [112]))
	(unreachable)
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	$3 = *($1)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [10098])
	$1 = ($0 + [88])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($1)), [10705])
	$3 = (int_64)
	*($0 + [80]) = $3(*($0 + [80]) - $3))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)*($0 + [80]) < (int_64)4611686018427387904), [10775])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($0 + [80]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [10144])
	CALL eosio_assert(((int_64)*($1) == (int_64)*($0 + [8])), [9116])
	CALL eosio_assert(((int_64)*($0 + [80]) <= (int_64)*($0)), [9633])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($0 + [104]))), [10705])
	$3 = (int_64)
	*($0 + [96]) = $3(*($0 + [96]) - *($2)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)*($0 + [96]) < (int_64)4611686018427387904), [10775])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($0 + [96]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [10188])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($1 + [112])
	$4 = *($2)
	CALL __multi3(($3 + [32]), $4, (int_64)$4 >> (int_64)63), $4, (int_64)$4 >> (int_64)63))
	$4 = *((($3 + [32]) + [8]))
	$5 = *($3 + [32])
	CALL eosio_assert(( (uint_64)($5 <= (int_64)-999999999999) ? ((int_64)$4 < (int_64)249999999999) : ((int_64)$4 == (int_64)249999999999) ), [9067])
	CALL eosio_assert(( ((uint_64)$5 > (uint_64)(int_64)999999999999) ? ((int_64)$4 > (int_64)-250000000000) : ((int_64)$4 == (int_64)-250000000000) ), [9091])
	$6 = *($2 + [32])
	CALL __multi3(($3 + [16]), $6, (int_64)$6 >> (int_64)63), (int_64)1000000000000, (int_64)0)
	$4 = ((int_64)((int_64)$4 + (int_64)*((($3 + [16]) + [8]))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($5 <= $6)))
	$6 = *($3 + [16])
	$5 = ((int_64)$5 + (int_64)$6)
	CALL __divti3($3, $5, $4, (int_64)1000000000000, (int_64)0)
	CALL eosio_assert(( (uint_64)($5 <= (int_64)-999999999999) ? ((int_64)$4 < (int_64)249999999999) : ((int_64)$4 == (int_64)249999999999) ), [9067])
	CALL eosio_assert(( ((uint_64)$5 > (uint_64)(int_64)999999999999) ? ((int_64)$4 > (int_64)-250000000000) : ((int_64)$4 == (int_64)-250000000000) ), [9091])
	$6 = *($3)
	*($0) = $6
	$7 = *($2 + [8])
	*($0 + [8]) = $7
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9449])
	$4 = (uint_64)$7 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$0 = [1]
	$8 = $2
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$0 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $0 ){ goto $label$5 }
	$0 = [1]
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [9498])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($1 + [104]))), [9116])
	CALL eosio_assert(((int_64)*($1 + [96]) >= (int_64)$6), [9393])
	$global$0 = ($3 + [48])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	$2 = *($1 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)*(($0 + [40]))), [9116])
	$3 = *($1)
	CALL eosio_assert(((int_64)$3 >= (int_64)*($0 + [32])), [9518])
	$4 = *($0)
	$5 = *($0 + [8])
	$1 = ($0 + [88])
	CALL eosio_assert(((int_64)*($1) == (int_64)$5), [10705])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($4 - *($0 + [80]))) > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [10775])
	CALL eosio_assert(((int_64)$2 == (int_64)$5), [9116])
	CALL eosio_assert(((int_64)$3 <= (int_64)$4), [9579])
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [9175])
	$2 = ((int_64)$3 + (int_64)*($0 + [80]))
	*($0 + [80]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)*($0 + [80]) < (int_64)4611686018427387904), [9237])
	CALL eosio_assert(((int_64)*($1) == (int_64)*($0 + [8])), [9116])
	CALL eosio_assert(((int_64)*($0 + [80]) <= (int_64)*($0)), [9633])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9736])
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$5 }
	$7 = CALL $98($6)
	CALL db_get_i64($1, $7, $6)
	CALL $101($7)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	CALL db_get_i64($1, $7, $6)
	
.LABEL $label$4
	$8 = ($0 + [24])
	*(($9 = CALL _Znwj([40])) + [16]) = (int_64)1397703940
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$10 = ($9 + [16])
	$11 = ($9 + [8])
	$12 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $13
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$12 = $13
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9498])
	*($9 + [24]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[3]), [9759])
	CALL memcpy($9, $7, [4])
	CALL eosio_assert(((uint_32)($6 + [-4]) > (uint_32)[7]), [9759])
	CALL memcpy($11, ($7 + [4]), [8])
	CALL eosio_assert(((uint_32)($6 + [-12]) > (uint_32)[7]), [9759])
	CALL memcpy($10, ($7 + [12]), [8])
	*($9 + [28]) = $1
	*($3 + [24]) = $9
	*($3 + [16]) = (int_64)-5001342326447013888
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = (int_64)-5001342326447013888
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $54($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [9685])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, (int_64)3607749779137757184)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $27($0, $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [9685])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10457])
	CALL $65($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $66($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [9449])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9498])
	*(($1 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9498])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9498])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9498])
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $1
	$0 = CALL db_find_i64($3, $1, (int_64)3607749779137757184, (int_64)3607749779137757184)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $27($2, $0)
	CALL eosio_assert(((int_32)*($0 + [48]) == (int_32)$2), [9685])
	CALL eosio_assert([1], [10245])
	CALL eosio_assert([1], [10279])
	$4 = CALL db_next_i64(*($0 + [52]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $27($2, $4)
	
.LABEL $label$2
	CALL $47($2, $0)
	
.LABEL $label$1
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [9685])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5001342326447013888, (int_64)-5001342326447013888)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $12($0, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [9685])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10457])
	CALL $48($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $49($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10648])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [10648])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [10648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [10648])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [10648])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [10648])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10648])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10648])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10648])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $61(CALL $62($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9449])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9498])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9498])
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$1 = $3
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$16 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert($6, [9498])
	return $0
	
.LABEL $label$12
	CALL eosio_assert([0], [9498])
	return $0
	
.LABEL $label$11
	CALL eosio_assert([0], [9498])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9759])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9759])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [9759])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [16]))
	*(($6 = ($1 + [8]))) = *(($4 + [8]))
	CALL eosio_assert([1], [10648])
	CALL memcpy($2, $1, [4])
	CALL eosio_assert([1], [10648])
	CALL memcpy(($2 | [4]), $6, [8])
	CALL eosio_assert([1], [10648])
	CALL memcpy(($2 | [12]), $5, [8])
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-5001342326447013888, *(*($0 + [8])), (int_64)-5001342326447013888, $2, [20])
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)-5001342326447013888) ){ goto $label$1 }
	*(($3 + [16])) = (int_64)-5001342326447013887
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$6 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [136]) == (int_32)$1), [9685])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6820297015373594624, (int_64)6820297015373594624)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $67($1, $5)
	CALL eosio_assert(((int_32)*($5 + [136]) == (int_32)$1), [9685])
	
.LABEL $label$5
	*(($1 = CALL memcpy($0, $5, [120])) + [120 align=4]) = (int_64)0
	*(($1 + [128])) = [0]
	$0 = (*(($5 + [124])) - *($5 + [120]))
	$3 = ((int_32)$0 / (int_32)[40])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$2 }
	$0 = CALL _Znwj($0)
	*(($1 + [120])) = $0
	*(($1 + [128])) = ($0 + ((int_32)$3 * (int_32)[40]))
	*(($1 = ($1 + [124]))) = $0
	$3 = *(($5 + [120]))
	$5 = (*(($5 + [124])) - $3)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($0, $3, $5)
	*($1) = (*($1) + ((int_32)((uint_32)$5 / (uint_32)[40]) * (int_32)[40]))
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$4
	*($4 + [8]) = $3
	CALL $68($4, $1, $2, ($4 + [8]))
	*(($5 = CALL memcpy($0, ($1 = *($4 + [4])), [120])) + [120 align=4]) = (int_64)0
	*(($5 + [128])) = [0]
	$0 = (*(($1 + [124])) - *($1 + [120]))
	$3 = ((int_32)$0 / (int_32)[40])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$1 }
	$0 = CALL _Znwj($0)
	*(($5 + [120])) = $0
	*(($5 + [128])) = ($0 + ((int_32)$3 * (int_32)[40]))
	*(($5 = ($5 + [124]))) = $0
	$3 = *(($1 + [120]))
	$1 = (*(($1 + [124])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($0, $3, $1)
	*($5) = (*($5) + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$3
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $94(($1 + [120]))
	
.LABEL $label$1
	CALL $94(($5 + [120]))
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL memory()
	*(($3 + [88])) = $0
	*(($3 + [96])) = (int_64)-1
	$4 = (int_64)0
	*(($3 + [104])) = (int_64)0
	*(($3 + [112])) = [0]
	*(($3 + [128])) = $0
	*(($3 + [136])) = (int_64)-1
	*(($3 + [144])) = (int_64)0
	*(($3 + [152])) = [0]
	*($3 + [80]) = $0
	*($3 + [72]) = $0
	*($3 + [120]) = $0
	$5 = (int_64)59
	$6 = [8464]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$13 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8476]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$19 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$8 = ($8 + [-91])
	goto $label$17 
	
.LABEL $label$19
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$13 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [1]
	*($3 + [8]) = *($3 + [64])
	CALL $36(($3 + [72]), ($3 + [8]))
	$10 = *(($3 + [144]))
	if ( ($10 == 0) ){ goto $label$12 }
	$11 = ($3 + [148])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$11 }
	
.LOOP $label$20:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	$12 = *($8 + [120])
	if ( ($12 == 0) ){ goto $label$22 }
	*(($8 + [124])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$22
	CALL _ZdlPv($8)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$20 }
	$6 = *(($3 + [144]))
	goto $label$10 
	
.LABEL $label$13
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$9 }
	
.LABEL $label$12
	$12 = *(($3 + [104]))
	if ( ($12 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$11
	$6 = $10
	
.LABEL $label$10
	*($11) = $10
	CALL _ZdlPv($6)
	$12 = *(($3 + [104]))
	if ( $12 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)4982871460870242304) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$23 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [2]
	*($3 + [16]) = *($3 + [56])
	CALL $37(($3 + [72]), ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$25
	*($3 + [52]) = [0]
	*($3 + [48]) = [3]
	*($3 + [24]) = *($3 + [48])
	CALL $38(($3 + [72]), ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$24
	*($3 + [44]) = [0]
	*($3 + [40]) = [4]
	*($3 + [32]) = *($3 + [40])
	CALL $39(($3 + [72]), ($3 + [32]))
	
.LABEL $label$23
	CALL eosio_exit([0])
	
.LABEL $label$8
	$10 = ($3 + [108])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$27 }
	
.LOOP $label$28:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$29 }
	CALL _ZdlPv($8)
	
.LABEL $label$29
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$28 }
	$6 = *(($3 + [104]))
	goto $label$26 
	
.LABEL $label$27
	$6 = $12
	
.LABEL $label$26
	*($10) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$7
	CALL $95([0])
	$global$0 = ($3 + [160])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10309])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10354])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [10404])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10492])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10538])
	$5 = *($1)
	$6 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [10705])
	$7 = (int_64)
	*($1 + [8]) = $7(*($1 + [8]) - *($3)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [10775])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10589])
	CALL eosio_assert([1], [10648])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [10648])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [10648])
	CALL memcpy(($4 + [16]), $6, [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1) = (int_64)0
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1 + [8]) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [8]))
	CALL eosio_assert([1], [10648])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [10648])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [10648])
	CALL memcpy(($2 + [16]), $5, [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-5001342331490271232, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10492])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10538])
	$5 = *($1)
	$6 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [9175])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9218])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9237])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10589])
	CALL eosio_assert([1], [10648])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [10648])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [10648])
	CALL memcpy(($4 + [16]), $6, [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9736])
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$5 }
	$7 = CALL $98($6)
	CALL db_get_i64($1, $7, $6)
	CALL $101($7)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	CALL db_get_i64($1, $7, $6)
	
.LABEL $label$4
	$8 = ($0 + [24])
	*(($9 = CALL _Znwj([40])) + [16]) = (int_64)1397703940
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$10 = ($9 + [16])
	$11 = ($9 + [8])
	$12 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $13
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$12 = $13
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9498])
	*($9 + [24]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [9759])
	CALL memcpy($9, $7, [8])
	$5 = ($6 & [-8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [9759])
	CALL memcpy($11, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[16]), [9759])
	CALL memcpy($10, ($7 + [16]), [8])
	*($9 + [28]) = $1
	*($3 + [24]) = $9
	$12 = *($9)
	*($3 + [16]) = $12
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $12
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $56($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $31(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [10648])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [10654])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9498])
	*($5 + [24]) = $1
	CALL $55(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [28])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $56(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $57($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $31($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $58($2, $1)
	CALL $60(CALL $59(CALL $59($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9736])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $98($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $101($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([64])
	CALL $50($5)
	*($5 + [48]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $51(($3 + [32]), ($3 + [24]))
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)3607749779137757184
	*($3 + [4]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)3607749779137757184
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $52(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [256])
	$global$0 = $2
	$3 = [1]
	if ( CALL has_auth($1) ){ goto $label$1 }
	if ( CALL has_auth((int_64)3631284093736285296) ){ goto $label$1 }
	$3 = CALL has_auth(*($0))
	
.LABEL $label$1
	CALL eosio_assert($3, [8356])
	*(($2 + [144])) = [0]
	*($2 + [128]) = (int_64)-1
	*($2 + [136]) = (int_64)0
	$4 = *($0)
	*($2 + [112]) = $4
	*($2 + [120]) = $1
	$3 = [0]
	$5 = CALL db_find_i64($4, $1, (int_64)-5001342326447013888, (int_64)-5001342326447013888)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $12(($2 + [112]), $5)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($2 + [112])), [9685])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8376])
	$3 = *(($2 + [140]))
	if ( ((int_32)$3 == (int_32)*(($2 + [136]))) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($2 + [112])), [9685])
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	$5 = CALL db_find_i64(*($2 + [112]), *(($2 + [120])), (int_64)-5001342326447013888, (int_64)-5001342326447013888)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $12(($2 + [112]), $5)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($2 + [112])), [9685])
	
.LABEL $label$3
	$6 = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [10827])
	$7 = *(($3 + [16]))
	$8 = *($3 + [8])
	CALL eosio_assert(((uint_32)(*($3) + [259200]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$0() / (uint_64)(int_64)1000000))), [8401])
	*(($2 + [184])) = [0]
	*($2 + [168]) = (int_64)-1
	*($2 + [176]) = (int_64)0
	$4 = *($0)
	*($2 + [152]) = $4
	*($2 + [160]) = $1
	$3 = CALL db_find_i64($4, $1, (int_64)3607749779137757184, (int_64)3607749779137757184)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $27(($2 + [152]), $3)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($2 + [152])), [9685])
	
.LABEL $label$5
	$9 = *($2 + [176])
	if ( ($9 == 0) ){ goto $label$6 }
	$10 = ($2 + [180])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($2 + [176]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $9
	
.LABEL $label$7
	*($10) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $9(($2 + [64]), $0, $1)
	$3 = (($2 + [64]) + [24])
	CALL eosio_assert(((int_64)$7 == (int_64)*($3)), [10705])
	$4 = (int_64)
	*($2 + [80]) = $4(*($2 + [80]) - $8))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10753])
	CALL eosio_assert(((int_64)*($2 + [80]) < (int_64)4611686018427387904), [10775])
	CALL eosio_assert((int_64)(*($2 + [80]) == 0), [8429])
	*(($5 = (($2 + [16]) + [40]))) = *((($2 + [64]) + [40]))
	*(($9 = (($2 + [16]) + [32]))) = *((($2 + [64]) + [32]))
	*(($6 = (($2 + [16]) + [24]))) = *($3)
	*(($3 = (($2 + [16]) + [16]))) = *($2 + [80])
	*(($10 = (($2 + [16]) + [8]))) = *((($2 + [64]) + [8]))
	*($2 + [16]) = *($2 + [64])
	*((($2 + [152]) + [40])) = *($5)
	*((($2 + [152]) + [32])) = *($9)
	*((($2 + [152]) + [24])) = *($6)
	*((($2 + [152]) + [16])) = *($3)
	*((($2 + [152]) + [8])) = *($10)
	*($2 + [152]) = *($2 + [16])
	*((($2 + [200]) + [32])) = [0]
	*($2 + [208]) = $1
	*($2 + [216]) = (int_64)-1
	*($2 + [224]) = (int_64)0
	$4 = *($0)
	*($2 + [200]) = $4
	CALL $13(($2 + [200]), ($2 + [152]), $4)
	$9 = *($2 + [224])
	if ( ($9 == 0) ){ goto $label$11 }
	$6 = ($2 + [228])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($2 + [224]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $9
	
.LABEL $label$12
	*($6) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$11
	*($2 + [160]) = $7
	*($2 + [152]) = $8
	$5 = ($0 + [8])
	$3 = [0]
	$9 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-5001342331490271232, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$16 }
	$3 = CALL $20($5, $9)
	
.LABEL $label$16
	$9 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($9, [10796])
	$4 = *($0)
	*($2 + [64]) = ($2 + [152])
	CALL eosio_assert($9, [10457])
	CALL $28($5, $3, $4, ($2 + [64]))
	$11 = *($0)
	$4 = (int_64)6
	
.LOOP $label$17:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$17 }
	*($2 + [208]) = (int_64)3617214756542218240
	*($2 + [200]) = $11
	$4 = (int_64)0
	$12 = (int_64)59
	$3 = [8464]
	$13 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$23 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$5 = ($5 + [-91])
	goto $label$21 
	
.LABEL $label$23
	$11 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$19
	$3 = ($3 + [1])
	$12 = ((int_64)$12 + (int_64)4294967291)
	$13 = ((int_64)$11 | (int_64)$13)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$18 }
	$4 = (int_64)0
	$12 = (int_64)59
	$3 = [8476]
	$14 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$29 }
	$5 = *($3)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$5 = ($5 + [-91])
	goto $label$27 
	
.LABEL $label$29
	$11 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$25
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$14 = ((int_64)$11 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$24 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $97([8485])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$33 }
	*($2) = ($3 << [1])
	$5 = ($2 | [1])
	if ( $3 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$9 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2) = ($9 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $3
	
.LABEL $label$32
	CALL memcpy($5, [8485], $3)
	
.LABEL $label$31
	*(($5 + $3)) = [0]
	*(($2 + [176])) = $7
	$3 = ($2 + [8])
	*(($2 + [192])) = *($3)
	*($3) = [0]
	*($2 + [160]) = $1
	*($2 + [168]) = $8
	*($2 + [152]) = *($0)
	*($2 + [184]) = *($2)
	*($2) = (int_64)0
	$3 = CALL $5(($2 + [64]), ($2 + [200]), $13, $14, ($2 + [152]))
	CALL $6(($2 + [240]), $3)
	$5 = *($2 + [240])
	CALL send_inline($5, (*($2 + [244]) - $5))
	$5 = *($2 + [240])
	if ( ($5 == 0) ){ goto $label$34 }
	*($2 + [244]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$34
	$5 = *($3 + [28])
	if ( ($5 == 0) ){ goto $label$35 }
	*(($3 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$35
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$36 }
	*(($3 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$36
	if ( ((*(($2 + [184])) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($2 + [192])))
	
.LABEL $label$37
	if ( ((*($2) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$38
	$3 = *(($2 + [140]))
	if ( ((int_32)$3 == (int_32)*(($2 + [136]))) ){ goto $label$41 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($2 + [112])), [9685])
	if ( $3 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$3 = CALL db_find_i64(*($2 + [112]), *(($2 + [120])), (int_64)-5001342326447013888, (int_64)-5001342326447013888)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$39 }
	$3 = CALL $12(($2 + [112]), $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($2 + [112])), [9685])
	
.LABEL $label$40
	CALL eosio_assert([1], [10245])
	CALL eosio_assert([1], [10279])
	$5 = CALL db_next_i64(*($3 + [28]), ($2 + [152]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$42 }
	CALL $12(($2 + [112]), $5)
	
.LABEL $label$42
	CALL $29(($2 + [112]), $3)
	
.LABEL $label$39
	$9 = *($2 + [136])
	if ( ($9 == 0) ){ goto $label$43 }
	$0 = ($2 + [140])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$45 }
	
.LOOP $label$46:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$47 }
	CALL _ZdlPv($5)
	
.LABEL $label$47
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$46 }
	$3 = *(($2 + [136]))
	goto $label$44 
	
.LABEL $label$45
	$3 = $9
	
.LABEL $label$44
	*($0) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$43
	$global$0 = ($2 + [256])
	return (unreachable)
	
.LABEL $label$30
	CALL $90($2)
}

int_32 .FUNC $69 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9449])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9498])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9498])
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$1 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [9498])
	*(($2 = ($0 + [88]))) = (int_64)1397703940
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$1 = $3
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [9498])
	*(($2 = ($0 + [104]))) = (int_64)1397703940
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$1 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$25 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [9498])
	*(($0 + [128])) = [0]
	*($0 + [120 align=4]) = (int_64)0
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [10654])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([152])
	CALL $69($3)
	*($3 + [136]) = $1
	CALL $70(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)6820297015373594624
	$5 = *($3 + [140])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)6820297015373594624
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $71(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [120])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [124])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10492])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10538])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [40])) = *(($3 + [40]))
	*(($5 = ($1 + [32]))) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	*(($6 = ($1 + [16]))) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [10589])
	*($4 + [64]) = ($4 + [48])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = $6
	*($4 + [80]) = $1
	*($4 + [88]) = $5
	CALL $64(($4 + [80]), ($4 + [72]))
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3607749779137757184) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)3607749779137757185
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [10648])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [10648])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [10648])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9736])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $98($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $101($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([152])
	CALL $69($5)
	*($5 + [136]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	*($3 + [44]) = ($5 + [48])
	*($3 + [48]) = ($5 + [56])
	*($3 + [52]) = ($5 + [64])
	*($3 + [56]) = ($5 + [72])
	*($3 + [60]) = ($5 + [80])
	*($3 + [64]) = ($5 + [96])
	*($3 + [68]) = ($5 + [112])
	*($3 + [72]) = ($5 + [120])
	CALL $72(($3 + [32]), ($3 + [24]))
	*($5 + [140]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)6820297015373594624
	*($3 + [4]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)6820297015373594624
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $71(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$7
	$4 = *($1 + [120])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [124])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [10654])
	$5 = CALL _Znwj([64])
	CALL $50($5)
	*($5 + [48]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*(($6 = ($5 + [16]))) = *(($3 + [16]))
	*(($5 + [24])) = *(($3 + [24]))
	*(($7 = ($5 + [32]))) = *(($3 + [32]))
	*(($5 + [40])) = *(($3 + [40]))
	*($4 + [64]) = ($4 + [48])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = $6
	*($4 + [80]) = $5
	*($4 + [88]) = $7
	CALL $64(($4 + [80]), ($4 + [72]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, $2, (int_64)3607749779137757184, $4, [48])
	*($5 + [52]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3607749779137757184) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3607749779137757185
	
.LABEL $label$1
	*($4 + [80]) = $5
	*($4) = (int_64)3607749779137757184
	*($4 + [56]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3607749779137757184
	*($3 + [16]) = $6
	*($4 + [80]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $52(($1 + [24]), ($4 + [80]), $4, ($4 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10648])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10648])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10648])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [10648])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $61($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [10654])
	$5 = CALL _Znwj([64])
	CALL $50($5)
	*($5 + [48]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*(($6 = ($5 + [16]))) = *(($3 + [16]))
	*(($5 + [24])) = *(($3 + [24]))
	*(($7 = ($5 + [32]))) = *(($3 + [32]))
	*(($5 + [40])) = *(($3 + [40]))
	*($4 + [64]) = ($4 + [48])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = $6
	*($4 + [80]) = $5
	*($4 + [88]) = $7
	CALL $64(($4 + [80]), ($4 + [72]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, $2, (int_64)3607749779137757184, $4, [48])
	*($5 + [52]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3607749779137757184) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3607749779137757185
	
.LABEL $label$1
	*($4 + [80]) = $5
	*($4) = (int_64)3607749779137757184
	*($4 + [56]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3607749779137757184
	*($3 + [16]) = $6
	*($4 + [80]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $52(($1 + [24]), ($4 + [80]), $4, ($4 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10648])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10648])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10648])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19248])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19056]
	$3 = (((int_32)$1 * (int_32)[12]) + [19056])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10856]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10860])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10856]) = [1]
	$2 = ($2 << [16])
	*([0] + [10860]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10860])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10860]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10856]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10856]) = [1]
	$3 = ($3 << [16])
	*([0] + [10860]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10860])
	
.LABEL $label$10
	*([0] + [10860]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $101($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $98($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10852])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $98($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9759])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9759])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9759])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy(($3 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy(($3 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy(($3 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy(($3 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10823])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $31($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9759])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $84($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $92($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $92($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $90($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10648])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10648])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = [120]
	$6 = *(*($0 + [4]))
	$1 = CALL memcpy($1, $6, [120])
	$7 = ($1 + [120])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$1 }
	CALL $76($7, *($6 + [120]), *(($6 + [124])))
	
.LABEL $label$1
	$8 = *($1 + [120])
	$6 = *(($1 + [124]))
	$9 = ($6 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[40]))
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$5 = ((((int_32)((uint_32)($9 + [-40]) / (uint_32)[40]) * (int_32)[36]) + $5) + [36])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$6 = CALL $98($5)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [16])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = ($1 + [48])
	*($3 + [48]) = ($1 + [56])
	*($3 + [52]) = ($1 + [64])
	*($3 + [56]) = ($1 + [72])
	*($3 + [60]) = ($1 + [80])
	*($3 + [64]) = ($1 + [96])
	*($3 + [68]) = ($1 + [112])
	*($3 + [72]) = $7
	CALL $77(($3 + [32]), ($3 + [24]))
	*($1 + [140]) = CALL db_store_i64(*($4 + [8]), (int_64)6820297015373594624, *(*($0 + [8])), (int_64)6820297015373594624, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)6820297015373594624) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $101($6)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)6820297015373594624) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)6820297015373594625
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [10654])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([152])
	CALL $69($3)
	*($3 + [136]) = $1
	CALL $81(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)6820297015373594624
	$5 = *($3 + [140])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)6820297015373594624
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $71(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [120])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [124])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9759])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9759])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9759])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9759])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9759])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9759])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$5 = *($0 + [40])
	$4 = *($1)
	$1 = *($4 + [4])
	$3 = [0]
	$6 = (int_64)0
	$2 = ($4 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($1 <= *(($4 + [8]))), [10823])
	$1 = *($2)
	$0 = *($1)
	$1 = ($1 + [1])
	*($2) = $1
	$3 = ($3 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($0 & [128]) ){ goto $label$1 }
	$3 = (CASTING uint_32)(uint_64 $6)
	$0 = *($5)
	$1 = *($5 + [4])
	$2 = ((int_32)($1 - $0) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$4 }
	CALL $73($5, ($3 - $2))
	$1 = *(($5 + [4]))
	$0 = *($5)
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$5 }
	$1 = ($0 + ((int_32)$3 * (int_32)[40]))
	*(($5 + [4])) = $1
	
.LABEL $label$5
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $74($4, $0)
	$0 = ($0 + [40])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$6 }
	
.LABEL $label$2
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	CALL $75($3)
	$3 = (*($0) + [40])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $94($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[40]))
	$5 = ($2 + ((int_32)$5 * (int_32)[40]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	CALL $75($3)
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = [120]
	$6 = *(*($0 + [4]))
	$1 = CALL memcpy($1, $6, [120])
	$7 = ($1 + [120])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$1 }
	CALL $76($7, *($6 + [120]), *(($6 + [124])))
	
.LABEL $label$1
	$8 = *($1 + [120])
	$6 = *(($1 + [124]))
	$9 = ($6 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[40]))
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$5 = ((((int_32)((uint_32)($9 + [-40]) / (uint_32)[40]) * (int_32)[36]) + $5) + [36])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$6 = CALL $98($5)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [16])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = ($1 + [48])
	*($3 + [48]) = ($1 + [56])
	*($3 + [52]) = ($1 + [64])
	*($3 + [56]) = ($1 + [72])
	*($3 + [60]) = ($1 + [80])
	*($3 + [64]) = ($1 + [96])
	*($3 + [68]) = ($1 + [112])
	*($3 + [72]) = $7
	CALL $77(($3 + [32]), ($3 + [24]))
	*($1 + [140]) = CALL db_store_i64(*($4 + [8]), (int_64)6820297015373594624, *(*($0 + [8])), (int_64)6820297015373594624, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)6820297015373594624) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $101($6)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)6820297015373594624) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)6820297015373594625
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [120])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [124])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[40])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($5 - $6) / (int_32)[40])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$1 }
	$6 = [107374182]
	$2 = ((int_32)$5 / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$6 * (int_32)[40])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[40]) * (int_32)[40]))
	goto $label$3 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$7 = ( ($1 + ((int_32)$3 * (int_32)[40])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	$8 = ((int_32)$5 / (int_32)[40])
	if ( ($5 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + ((int_32)$8 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$1
	CALL $94($0)
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$6 = *($0 + [40])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($6 + [4]) - *($6)) / (int_32)[40]))
	$5 = *($1)
	$1 = *($5 + [4])
	$0 = ($5 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($3) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($5 + [8])) - $1) > (int_32)[0]), [10648])
	CALL memcpy(*($0), ($2 + [15]), [1])
	$1 = (*($0) + [1])
	*($0) = $1
	if ( $3 ){ goto $label$1 }
	$1 = *(($6 + [4]))
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $78($5, $0)
	$0 = ($0 + [40])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9759])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9759])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9759])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9759])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9759])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [272])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $98($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $43(($3 + [48]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $101($2)
	
.LABEL $label$5
	*(($1 = (($3 + [160]) + [8]))) = *((($3 + [48]) + [8]))
	*(($2 = (($3 + [144]) + [8]))) = *(($3 + [72]))
	*(($6 = (($3 + [128]) + [8]))) = *(($3 + [88]))
	*($3 + [160]) = *($3 + [48])
	*($3 + [144]) = *($3 + [64])
	*($3 + [128]) = *($3 + [80])
	$7 = *($3 + [96])
	$8 = *($3 + [104])
	$9 = *($3 + [112])
	$10 = *($3 + [120])
	*((($3 + [208]) + [8])) = *($6)
	*((($3 + [192]) + [8])) = *($2)
	*((($3 + [176]) + [8])) = *($1)
	*($3 + [208]) = *($3 + [128])
	*($3 + [192]) = *($3 + [144])
	*($3 + [176]) = *($3 + [160])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$11 = *((($3 + [176]) + [8]))
	*((($3 + [256]) + [8])) = $11
	$12 = *((($3 + [192]) + [8]))
	*((($3 + [240]) + [8])) = $12
	$13 = *((($3 + [208]) + [8]))
	*((($3 + [224]) + [8])) = $13
	*((($3 + [32]) + [8])) = $11
	*((($3 + [16]) + [8])) = $12
	*(($3 + [8])) = $13
	$11 = *($3 + [176])
	*($3 + [256]) = $11
	$12 = *($3 + [192])
	*($3 + [240]) = $12
	$13 = *($3 + [208])
	*($3 + [224]) = $13
	*($3 + [32]) = $11
	*($3 + [16]) = $12
	*($3) = $13
	CALL void $1((int_32 ($3 + [32])), (int_32 ($3 + [16])), (int_32 $3), (int_32 $7), (int_64 $8), (int_64 $9), (int_64 $10), (int_64 $5))
	$global$0 = ($3 + [272])
	return [1]
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $98($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1397703940
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9498])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $40(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $101($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $41(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $98($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)1397703940
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9449])
	$8 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9498])
	*($3 + [40]) = [0]
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = ($3 + [16])
	CALL $42(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $101($6)
	
.LABEL $label$9
	*(($1 = (($3 + [48]) + [8]))) = *(($3 + [32]))
	*($3 + [48]) = *($3 + [24])
	$2 = *(($3 + [40]))
	$8 = *($3 + [16])
	*((($3 + [64]) + [8])) = *($1)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($1) + $5))
	
.LABEL $label$10
	$9 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $9
	*(($3 + [8])) = $9
	$9 = *($3 + [64])
	*($3) = $9
	*($3 + [80]) = $9
	CALL void $1((int_32 $8), (int_64 $3), (int_32 ((int_32)($2 & [255]) != (int_32)[0])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10648])
	CALL memcpy(*($0 + [4]), $1, [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10648])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10648])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10648])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10648])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [10492])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10538])
	$6 = [120]
	$3 = *($3)
	$1 = CALL memcpy($1, $3, [120])
	$7 = ($1 + [120])
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $76($7, *($3 + [120]), *(($3 + [124])))
	
.LABEL $label$1
	CALL eosio_assert([1], [10589])
	$8 = *($1 + [120])
	$3 = *(($1 + [124]))
	$9 = ($3 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[40]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$3 }
	$6 = ((((int_32)((uint_32)($9 + [-40]) / (uint_32)[40]) * (int_32)[36]) + $6) + [36])
	
.LABEL $label$3
	if ( ($6 <= [513]) ){ goto $label$5 }
	$3 = CALL $98($6)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $6)
	*($5 + [24]) = ($5 + [8])
	*($5 + [72]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [32])
	*($5 + [44]) = ($1 + [48])
	*($5 + [48]) = ($1 + [56])
	*($5 + [52]) = ($1 + [64])
	*($5 + [56]) = ($1 + [72])
	*($5 + [60]) = ($1 + [80])
	*($5 + [64]) = ($1 + [96])
	*($5 + [68]) = ($1 + [112])
	CALL $77(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [140]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)6820297015373594624) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $101($3)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)6820297015373594624) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = (int_64)6820297015373594625
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [80])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10648])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [10648])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $82(*($1), ($0 + [32]))
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4, int_64 $5, int_64 $6, int_64 $7)
{
	int_32 $8
	int_64 $9
	int_32 $10
	$8 = ($global$0 - [272])
	$global$0 = $8
	CALL require_auth((int_64)3631284093736285296)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($1) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8510])
	$9 = *($2)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8558])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($3 + [8])), [9116])
	CALL eosio_assert(((int_64)$9 > (int_64)*($3)), [8606])
	CALL eosio_assert(((int_64)$4 < (int_64)10001), [8648])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8703])
	CALL eosio_assert(((int_64)$5 < (int_64)10001), [8738])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8789])
	CALL eosio_assert(((int_64)$6 < (int_64)10001), [8820])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8882])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8924])
	CALL $4(($8 + [136]), $0)
	*((($8 + [136]) + [8])) = *(($1 + [8]))
	*(($8 + [160])) = *($2 + [8])
	*((($8 + [136]) + [40])) = *($3 + [8])
	*($8 + [184]) = $4
	*($8 + [192]) = $5
	*($8 + [200]) = $6
	*($8 + [208]) = $7
	*($8 + [136]) = *($1)
	*($8 + [152]) = *($2)
	*($8 + [168]) = *($3)
	*((($8 = CALL memcpy($8, ($8 + [136]), [120])) + [128])) = [0]
	*($8 + [120]) = (int_64)0
	$3 = (*(($8 + [260])) - *($8 + [256]))
	$2 = ((int_32)$3 / (int_32)[40])
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[107374183]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($8 + [120])) = $3
	*(($1 = ($8 + [124]))) = $3
	*(($8 + [128])) = ($3 + ((int_32)$2 * (int_32)[40]))
	$10 = *((($8 + [136]) + [120]))
	$2 = (*((($8 + [136]) + [124])) - $10)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $10, $2)
	*($1) = (*($1) + ((int_32)((uint_32)$2 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$2
	CALL $8(($0 + [48]), $8, *($0))
	$3 = *($8 + [120])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($8 + [124])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$3 = *($8 + [256])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($8 + [260])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($8 + [272])
	return (unreachable)
	
.LABEL $label$1
	CALL $94(($8 + [120]))
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$1), [9685])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3607749779137757184, (int_64)3607749779137757184)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $27($1, $5)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$1), [9685])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [40])) = *(($5 + [40]))
	*(($0 + [32])) = *(($5 + [32]))
	*(($0 + [24])) = *(($5 + [24]))
	*(($0 + [16])) = *(($5 + [16]))
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $63($4, $1, $2, ($4 + [8]))
	$5 = *($4 + [4])
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	*(($0 + [16])) = *(($5 + [16]))
	*(($0 + [24])) = *(($5 + [24]))
	*(($0 + [32])) = *(($5 + [32]))
	*(($0 + [40])) = *(($5 + [40]))
	$global$0 = ($4 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $94($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}