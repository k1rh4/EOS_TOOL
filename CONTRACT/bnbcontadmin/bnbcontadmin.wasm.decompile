(data (i32.const 8192) "invalid op quantity\00")
(data (i32.const 8212) "invalid tp quantity\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8318) "BNB\00")
(data (i32.const 8322) "opquantity only BNB token allowed\00")
(data (i32.const 8356) "EOS\00")
(data (i32.const 8360) "tpquantity only BNB or EOS token allowed\00")
(data (i32.const 8401) "must issue positive quantity\00")
(data (i32.const 8430) "string is too long to be a valid symbol_code\00")
(data (i32.const 8475) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8528) "write\00")
(data (i32.const 8534) "invalid fp quantity\00")
(data (i32.const 8554) "fquantity only BNB token allowed\00")
(data (i32.const 8587) "read\00")
(data (i32.const 8592) "get\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "send_inline" (func $fimport$4 (param i32 i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$6))
(import "env" "memset" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$9 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$16 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$17 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$18 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$19 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$20 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$21 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$24 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$26 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$27 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$28 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $22))
(export "_Znwj" (func $20))
(export "_Znaj" (func $21))
(export "_ZdaPv" (func $23))
(export "_ZnwjSt11align_val_t" (func $24))
(export "_ZnajSt11align_val_t" (func $25))
(export "_ZdlPvSt11align_val_t" (func $26))
(export "_ZdaPvSt11align_val_t" (func $27))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $2 $4)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17012))
(global $global$2 i32 (i32.const 17012))


int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $32())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $36($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $28 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $33 (int_32 $0)
{
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $35(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8596])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $35(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $32 ()
{
	return [8600]
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $13($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	$1 = ($1 - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [8528])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [8528])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [24]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [8528])
	CALL memcpy(($7 + [16]), ($5 + [24]), [8])
	*($5 + [12]) = ($7 + [24])
	CALL $14(($5 + [8]), $6)
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $13($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8528])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8528])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $17(CALL $16($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8587])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8587])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8587])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8587])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8587])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $18(*($1), ($0 + [40]))
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [160])
	$global$0 = $2
	*(($3 = (($2 + [64]) + [8]))) = *(($1 + [16]))
	*(($4 = (($2 + [48]) + [8]))) = *(($1 + [32]))
	*($2 + [64]) = *($1 + [8])
	*($2 + [48]) = *($1 + [24])
	$5 = *($1)
	$1 = CALL $29(($2 + [32]), ($1 + [40]))
	*((($2 + [96]) + [8])) = *($4)
	*((($2 + [80]) + [8])) = *($3)
	*($2 + [96]) = *($2 + [48])
	*($2 + [80]) = *($2 + [64])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [144]) + [8]))) = *((($2 + [80]) + [8]))
	*(($7 = (($2 + [128]) + [8]))) = *((($2 + [96]) + [8]))
	*($2 + [144]) = *($2 + [80])
	*($2 + [128]) = *($2 + [96])
	$4 = CALL $29(($2 + [112]), $1)
	*((($2 + [16]) + [8])) = *($6)
	*(($2 + [8])) = *($7)
	*($2 + [16]) = *($2 + [144])
	*($2) = *($2 + [128])
	CALL void $3((int_32 $5), (int_64 ($2 + [16])), (int_32 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [112]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [160])
}

void .FUNC $4 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_64 $17
	$8 = ($global$0 - [128])
	$global$0 = $8
	CALL require_auth(*($0))
	$9 = [0]
	$10 = [0]
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$12 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$14 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$12 = $14
	$10 = [1]
	$15 = $13
	$13 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$12 = $14
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$10 = ((int_32)$13 < (int_32)[6])
	$15 = ($13 + [1])
	$13 = $15
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$13 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8192])
	$16 = *($3)
	if ( ((uint_64)((int_64)$16 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$12 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$14 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $14
	$9 = [1]
	$10 = $13
	$13 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$12 = $14
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$10 = ((int_32)$13 < (int_32)[6])
	$15 = ($13 + [1])
	$13 = $15
	if ( $10 ){ goto $label$10 }
	$9 = [1]
	$13 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8212])
	$10 = [0]
	$17 = *($6)
	if ( ((uint_64)((int_64)$17 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$12 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$14 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$12 = $14
	$10 = [1]
	$15 = $13
	$13 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$12 = $14
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$10 = ((int_32)$13 < (int_32)[6])
	$15 = ($13 + [1])
	$13 = $15
	if ( $10 ){ goto $label$15 }
	$10 = [1]
	$13 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$10 = [0]
	
.LABEL $label$11
	CALL eosio_assert($10, [8534])
	$14 = *($2 + [8])
	$13 = CALL $34([8318])
	if ( ($13 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [8430])
	goto $label$18 
	
.LABEL $label$19
	if ( ($13 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$12 = (int_64)0
	
.LOOP $label$20:
	$10 = *(($13 + [8317]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [8475])
	
.LABEL $label$21
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$20 }
	$12 = ((int_64)$12 << (int_64)8)
	goto $label$16 
	
.LABEL $label$17
	$12 = (int_64)0
	
.LABEL $label$16
	CALL eosio_assert(((int_64)$14 == (int_64)((int_64)$12 | (int_64)4)), [8322])
	$14 = *($6 + [8])
	$13 = CALL $34([8318])
	if ( ($13 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [8430])
	goto $label$24 
	
.LABEL $label$25
	if ( ($13 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$12 = (int_64)0
	
.LOOP $label$26:
	$10 = *(($13 + [8317]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [8475])
	
.LABEL $label$27
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$26 }
	$12 = ((int_64)$12 << (int_64)8)
	goto $label$22 
	
.LABEL $label$23
	$12 = (int_64)0
	
.LABEL $label$22
	CALL eosio_assert(((int_64)$14 == (int_64)((int_64)$12 | (int_64)4)), [8554])
	$14 = *($3 + [8])
	$13 = CALL $34([8318])
	if ( ($13 <= [8]) ){ goto $label$33 }
	CALL eosio_assert([0], [8430])
	goto $label$32 
	
.LABEL $label$33
	if ( ($13 == 0) ){ goto $label$31 }
	
.LABEL $label$32
	$12 = (int_64)0
	
.LOOP $label$34:
	$10 = *(($13 + [8317]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$35 }
	CALL eosio_assert([0], [8475])
	
.LABEL $label$35
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$34 }
	if ( ((int_64)$14 != (int_64)((int_64)((int_64)$12 << (int_64)8) | (int_64)4)) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	if ( ((int_64)$14 == (int_64)((int_64)0 | (int_64)4)) ){ goto $label$29 }
	
.LABEL $label$30
	$13 = CALL $34([8356])
	if ( ($13 <= [8]) ){ goto $label$39 }
	CALL eosio_assert([0], [8430])
	goto $label$38 
	
.LABEL $label$39
	if ( ($13 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	$12 = (int_64)0
	
.LOOP $label$40:
	$10 = *(($13 + [8355]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$41 }
	CALL eosio_assert([0], [8475])
	
.LABEL $label$41
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$40 }
	$12 = ((int_64)$12 << (int_64)8)
	goto $label$36 
	
.LABEL $label$37
	$12 = (int_64)0
	
.LABEL $label$36
	CALL eosio_assert(((int_64)$14 == (int_64)((int_64)$12 | (int_64)4)), [8360])
	goto $label$28 
	
.LABEL $label$29
	CALL eosio_assert([1], [8360])
	
.LABEL $label$28
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8401])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$16 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8401])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$17 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8401])
	if ( ((int_64)$11 < (int_64)1) ){ goto $label$42 }
	*($8 + [104]) = (int_64)3617214756542218240
	*($8 + [96]) = (int_64)4381591560169862304
	*(($8 + [72])) = *(($2 + [8]))
	*($8 + [56]) = $1
	*($8 + [64]) = *($2)
	CALL $29(($8 + [80]), $4)
	$13 = CALL $8(($8 + [8]), ($8 + [96]), (int_64)4381605656971711792, (int_64)8516769789752901632, ($8 + [56]))
	CALL $9(($8 + [112]), $13)
	$10 = *($8 + [112])
	CALL send_inline($10, (*($8 + [116]) - $10))
	$10 = *($8 + [112])
	if ( ($10 == 0) ){ goto $label$43 }
	*($8 + [116]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$43
	$10 = *($13 + [28])
	if ( ($10 == 0) ){ goto $label$44 }
	*(($13 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$44
	$10 = *($13 + [16])
	if ( ($10 == 0) ){ goto $label$45 }
	*(($13 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$45
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($8 + [88])))
	
.LABEL $label$42
	if ( ((int_64)$17 < (int_64)1) ){ goto $label$46 }
	*($8 + [104]) = (int_64)3617214756542218240
	*($8 + [96]) = (int_64)4381591560169862304
	*(($8 + [72])) = *(($6 + [8]))
	*($8 + [56]) = $5
	*($8 + [64]) = *($6)
	CALL $29(($8 + [80]), $7)
	$13 = CALL $8(($8 + [8]), ($8 + [96]), (int_64)4381605656971711792, (int_64)8516769789752901632, ($8 + [56]))
	CALL $9(($8 + [112]), $13)
	$10 = *($8 + [112])
	CALL send_inline($10, (*($8 + [116]) - $10))
	$10 = *($8 + [112])
	if ( ($10 == 0) ){ goto $label$47 }
	*($8 + [116]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$47
	$10 = *($13 + [28])
	if ( ($10 == 0) ){ goto $label$48 }
	*(($13 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$48
	$10 = *($13 + [16])
	if ( ($10 == 0) ){ goto $label$49 }
	*(($13 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$49
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($8 + [88])))
	
.LABEL $label$46
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$50 }
	$13 = CALL $34([8356])
	if ( ($13 <= [8]) ){ goto $label$55 }
	CALL eosio_assert([0], [8430])
	goto $label$54 
	
.LABEL $label$55
	if ( ($13 == 0) ){ goto $label$53 }
	
.LABEL $label$54
	$12 = (int_64)0
	
.LOOP $label$56:
	$10 = *(($13 + [8355]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$57 }
	CALL eosio_assert([0], [8475])
	
.LABEL $label$57
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$56 }
	if ( ((int_64)$14 != (int_64)((int_64)((int_64)$12 << (int_64)8) | (int_64)4)) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	if ( ((int_64)$14 == (int_64)4) ){ goto $label$51 }
	
.LABEL $label$52
	*($8 + [104]) = (int_64)3617214756542218240
	$12 = *($0)
	*($8 + [96]) = $12
	*(($8 + [32])) = *(($3 + [8]))
	*($8 + [16]) = $1
	*($8 + [8]) = $12
	*($8 + [24]) = *($3)
	CALL $29(($8 + [40]), $4)
	$13 = CALL $10(($8 + [56]), ($8 + [96]), (int_64)4381605656971711792, (int_64)-3617168760277827584, ($8 + [8]))
	CALL $9(($8 + [112]), $13)
	$10 = *($8 + [112])
	CALL send_inline($10, (*($8 + [116]) - $10))
	$10 = *($8 + [112])
	if ( ($10 == 0) ){ goto $label$58 }
	*($8 + [116]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$58
	$10 = *($13 + [28])
	if ( ($10 == 0) ){ goto $label$59 }
	*(($13 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$59
	$10 = *($13 + [16])
	if ( ($10 == 0) ){ goto $label$60 }
	*(($13 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$60
	if ( ((*($8 + [40]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($8 + [48])))
	goto $label$50 
	
.LABEL $label$51
	*($8 + [104]) = (int_64)3617214756542218240
	$12 = *($0)
	*($8 + [96]) = $12
	*(($8 + [32])) = *(($3 + [8]))
	*($8 + [16]) = $1
	*($8 + [8]) = $12
	*($8 + [24]) = *($3)
	CALL $29(($8 + [40]), $4)
	$13 = CALL $10(($8 + [56]), ($8 + [96]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($8 + [8]))
	CALL $9(($8 + [112]), $13)
	$10 = *($8 + [112])
	CALL send_inline($10, (*($8 + [116]) - $10))
	$10 = *($8 + [112])
	if ( ($10 == 0) ){ goto $label$61 }
	*($8 + [116]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$61
	$10 = *($13 + [28])
	if ( ($10 == 0) ){ goto $label$62 }
	*(($13 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$62
	$10 = *($13 + [16])
	if ( ($10 == 0) ){ goto $label$63 }
	*(($13 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$63
	if ( ((*($8 + [40]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($8 + [48])))
	$global$0 = ($8 + [128])
	return 
	
.LABEL $label$50
	$global$0 = ($8 + [128])
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $37($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [144])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [192]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $11(($4 + [24]), ($4 + [192]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [176]) + [8]))) = *($3)
	*($4 + [176]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [176])
	*($4 + [40]) = $0
	*($4 + [192]) = $0
	*($4 + [196]) = ($4 + [168])
	*($4 + [192]) = ($4 + [24])
	CALL $12(($4 + [192]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	$2 = [1]
	if ( (*($4 + [152]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $40($2)
	$2 = [1]
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [160])))
	if ( (*($4 + [112]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [112]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [120])))
	
.LABEL $label$4
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $2 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	$5 = ($global$0 - [128])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = [0]
	$7 = [0]
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $11
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8192])
	$13 = *($3)
	if ( ((uint_64)((int_64)$13 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$9 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$9 = $11
	$6 = [1]
	$7 = $10
	$10 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$9 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$10 }
	$6 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8212])
	$11 = *($2 + [8])
	$10 = CALL $34([8318])
	if ( ($10 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [8430])
	goto $label$13 
	
.LABEL $label$14
	if ( ($10 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$9 = (int_64)0
	
.LOOP $label$15:
	$7 = *(($10 + [8317]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [8475])
	
.LABEL $label$16
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$15 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$11 
	
.LABEL $label$12
	$9 = (int_64)0
	
.LABEL $label$11
	CALL eosio_assert(((int_64)$11 == (int_64)((int_64)$9 | (int_64)4)), [8322])
	$11 = *($3 + [8])
	$10 = CALL $34([8318])
	if ( ($10 <= [8]) ){ goto $label$22 }
	CALL eosio_assert([0], [8430])
	goto $label$21 
	
.LABEL $label$22
	if ( ($10 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$9 = (int_64)0
	
.LOOP $label$23:
	$7 = *(($10 + [8317]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$24 }
	CALL eosio_assert([0], [8475])
	
.LABEL $label$24
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$23 }
	if ( ((int_64)$11 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( ((int_64)$11 == (int_64)((int_64)0 | (int_64)4)) ){ goto $label$18 }
	
.LABEL $label$19
	$10 = CALL $34([8356])
	if ( ($10 <= [8]) ){ goto $label$28 }
	CALL eosio_assert([0], [8430])
	goto $label$27 
	
.LABEL $label$28
	if ( ($10 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	$9 = (int_64)0
	
.LOOP $label$29:
	$7 = *(($10 + [8355]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$30 }
	CALL eosio_assert([0], [8475])
	
.LABEL $label$30
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$29 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$25 
	
.LABEL $label$26
	$9 = (int_64)0
	
.LABEL $label$25
	CALL eosio_assert(((int_64)$11 == (int_64)((int_64)$9 | (int_64)4)), [8360])
	goto $label$17 
	
.LABEL $label$18
	CALL eosio_assert([1], [8360])
	
.LABEL $label$17
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8401])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8401])
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$31 }
	*($5 + [104]) = (int_64)3617214756542218240
	*($5 + [96]) = (int_64)4381591560169862304
	*(($5 + [72])) = *(($2 + [8]))
	*($5 + [56]) = $1
	*($5 + [64]) = *($2)
	CALL $29(($5 + [80]), $4)
	$10 = CALL $8(($5 + [8]), ($5 + [96]), (int_64)4381605656971711792, (int_64)8516769789752901632, ($5 + [56]))
	CALL $9(($5 + [112]), $10)
	$7 = *($5 + [112])
	CALL send_inline($7, (*($5 + [116]) - $7))
	$7 = *($5 + [112])
	if ( ($7 == 0) ){ goto $label$32 }
	*($5 + [116]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$32
	$7 = *($10 + [28])
	if ( ($7 == 0) ){ goto $label$33 }
	*(($10 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$33
	$7 = *($10 + [16])
	if ( ($7 == 0) ){ goto $label$34 }
	*(($10 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$34
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$31
	if ( ((int_64)$13 < (int_64)1) ){ goto $label$35 }
	$10 = CALL $34([8356])
	if ( ($10 <= [8]) ){ goto $label$40 }
	CALL eosio_assert([0], [8430])
	goto $label$39 
	
.LABEL $label$40
	if ( ($10 == 0) ){ goto $label$38 }
	
.LABEL $label$39
	$9 = (int_64)0
	
.LOOP $label$41:
	$7 = *(($10 + [8355]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$42 }
	CALL eosio_assert([0], [8475])
	
.LABEL $label$42
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$41 }
	if ( ((int_64)$11 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	if ( ((int_64)$11 == (int_64)4) ){ goto $label$36 }
	
.LABEL $label$37
	*($5 + [104]) = (int_64)3617214756542218240
	$9 = *($0)
	*($5 + [96]) = $9
	*(($5 + [32])) = *(($3 + [8]))
	*($5 + [16]) = $1
	*($5 + [8]) = $9
	*($5 + [24]) = *($3)
	CALL $29(($5 + [40]), $4)
	$10 = CALL $10(($5 + [56]), ($5 + [96]), (int_64)4381605656971711792, (int_64)-3617168760277827584, ($5 + [8]))
	CALL $9(($5 + [112]), $10)
	$7 = *($5 + [112])
	CALL send_inline($7, (*($5 + [116]) - $7))
	$7 = *($5 + [112])
	if ( ($7 == 0) ){ goto $label$43 }
	*($5 + [116]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$43
	$7 = *($10 + [28])
	if ( ($7 == 0) ){ goto $label$44 }
	*(($10 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$44
	$7 = *($10 + [16])
	if ( ($7 == 0) ){ goto $label$45 }
	*(($10 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$45
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($5 + [48])))
	goto $label$35 
	
.LABEL $label$36
	*($5 + [104]) = (int_64)3617214756542218240
	$9 = *($0)
	*($5 + [96]) = $9
	*(($5 + [32])) = *(($3 + [8]))
	*($5 + [16]) = $1
	*($5 + [8]) = $9
	*($5 + [24]) = *($3)
	CALL $29(($5 + [40]), $4)
	$10 = CALL $10(($5 + [56]), ($5 + [96]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($5 + [8]))
	CALL $9(($5 + [112]), $10)
	$7 = *($5 + [112])
	CALL send_inline($7, (*($5 + [116]) - $7))
	$7 = *($5 + [112])
	if ( ($7 == 0) ){ goto $label$46 }
	*($5 + [116]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$46
	$7 = *($10 + [28])
	if ( ($7 == 0) ){ goto $label$47 }
	*(($10 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$47
	$7 = *($10 + [16])
	if ( ($7 == 0) ){ goto $label$48 }
	*(($10 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$48
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($5 + [48])))
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$35
	$global$0 = ($5 + [128])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $37($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*(($4 + [96])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $6(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4)
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $7(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $40($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)-2039333636190765056) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $3($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [20]) = [0]
	*($3 + [16]) = [2]
	*($3 + [8]) = *($3 + [16])
	CALL $5($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $33([0])
	$global$0 = ($3 + [32])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8528])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8528])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8528])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8528])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8528])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8528])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $14(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8528])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8528])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8528])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8528])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $13($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $15(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8587])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8587])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8587])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [16])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8587])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8587])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [32])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $18(*($1), ($4 + [40]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8587])
	CALL memcpy(($4 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8587])
	CALL memcpy(($4 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8587])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [72])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $18(*($1), ($4 + [80]))
	$global$0 = ($2 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [256])
	$global$0 = $2
	*(($3 = (($2 + [112]) + [8]))) = *(($1 + [16]))
	*(($4 = (($2 + [96]) + [8]))) = *(($1 + [32]))
	*($2 + [112]) = *($1 + [8])
	*($2 + [96]) = *($1 + [24])
	$5 = *($1)
	$6 = CALL $29(($2 + [80]), ($1 + [40]))
	*(($7 = (($2 + [64]) + [8]))) = *(($1 + [72]))
	*($2 + [64]) = *($1 + [64])
	$8 = *($1 + [56])
	$1 = CALL $29(($2 + [48]), ($1 + [80]))
	*((($2 + [160]) + [8])) = *($7)
	*((($2 + [144]) + [8])) = *($4)
	*((($2 + [128]) + [8])) = *($3)
	*($2 + [160]) = *($2 + [64])
	*($2 + [144]) = *($2 + [96])
	*($2 + [128]) = *($2 + [112])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($9 = (($2 + [240]) + [8]))) = *((($2 + [128]) + [8]))
	*(($10 = (($2 + [224]) + [8]))) = *((($2 + [144]) + [8]))
	*($2 + [240]) = *($2 + [128])
	*($2 + [224]) = *($2 + [144])
	$4 = CALL $29(($2 + [208]), $6)
	*(($11 = (($2 + [192]) + [8]))) = *((($2 + [160]) + [8]))
	*($2 + [192]) = *($2 + [160])
	$7 = CALL $29(($2 + [176]), $1)
	*((($2 + [32]) + [8])) = *($9)
	*((($2 + [16]) + [8])) = *($10)
	*(($2 + [8])) = *($11)
	*($2 + [32]) = *($2 + [240])
	*($2 + [16]) = *($2 + [224])
	*($2) = *($2 + [192])
	CALL void $3((int_32 $5), (int_64 ($2 + [32])), (int_32 ($2 + [16])), (int_32 $4), (int_32 $8), (int_64 $2), (int_32 $7), (int_32 $0))
	if ( (*($2 + [176]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [208]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($6) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($6) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [256])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [256])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $31($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $37($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8596])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $37($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $40($0)
	
.LABEL $label$1
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $19($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $30($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $30($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $28($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8592])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $13($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8587])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $40($0)
	
.LABEL $label$1
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $37($1)
	
.LABEL $label$2
	*(CALL $32()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $37(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $40($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $31 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $37 (int_32 $0)
{
	return CALL $38([8616], $0)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $39($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8232])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17000])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16808]
	$3 = (((int_32)$1 * (int_32)[12]) + [16808])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8608]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8612])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8608]) = [1]
	$2 = ($2 << [16])
	*([0] + [8612]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8612])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8612]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8608]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8608]) = [1]
	$3 = ($3 << [16])
	*([0] + [8612]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8612])
	
.LABEL $label$10
	*([0] + [8612]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}