(data (i32.const 16908) "eosio.token\00")
(data (i32.const 16920) "zlkgrobtoken\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 17019) "recharge artificial notification\00")
(data (i32.const 17052) "invalid quantity\00")
(data (i32.const 17069) "must deposit positive quantity\00")
(data (i32.const 17100) "have been betting\00")
(data (i32.const 17118) "matching\00")
(data (i32.const 17127) "EOS\00")
(data (i32.const 17131) "ROB\00")
(data (i32.const 17135) "zlkgrobthrow\00")
(data (i32.const 17149) "delalldb error\00")
(data (i32.const 17164) "settlement error\00")
(data (i32.const 17181) "player1Iter error\00")
(data (i32.const 17199) "player2Iter error\00")
(data (i32.const 17217) "symbol error\00")
(data (i32.const 17230) "zlkgroballoc\00")
(data (i32.const 17243) "{\"settlement\" : {\"qishu\":%, \"settle_current_players\":%, \"timestamp\":%, \"symbol\":\"%\", \"bet\":%,  \"player1\":\"%\", \"player1_id\":%, \"player1_winbet\":%, \"player2\":\"%\", \"player2_id\":%, \"player2_winbet\":%} } \n\00")
(data (i32.const 17444) "==========my====%==%==%===%=\00")
(data (i32.const 17473) "string is too long to be a valid symbol_code\00")
(data (i32.const 17518) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17571) "string is too long to be a valid name\00")
(data (i32.const 17609) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17676) "character is not in allowed character set for names\00")
(data (i32.const 17728) "write\00")
(data (i32.const 17734) "cannot create objects in table of another contract\00")
(data (i32.const 17785) "error reading iterator\00")
(data (i32.const 17808) "read\00")
(data (i32.const 17813) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17864) "cannot pass end iterator to modify\00")
(data (i32.const 17899) "object passed to modify is not in multi_index\00")
(data (i32.const 17945) "cannot modify objects in table of another contract\00")
(data (i32.const 17996) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18055) "get\00")
(data (i32.const 18059) "cannot pass end iterator to erase\00")
(data (i32.const 18093) "cannot increment end iterator\00")
(data (i32.const 18123) "object passed to erase is not in multi_index\00")
(data (i32.const 18168) "cannot erase objects in table of another contract\00")
(data (i32.const 18218) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18271) "-%lld.%s %s\00")
(data (i32.const 18283) "%lld.%s %s\00")
(data (i32.const 18304) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$8 (param i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "prints_l" (func $fimport$10 (param i32 i32)))
(import "env" "printui" (func $fimport$11 (param i64)))
(import "env" "printdf" (func $fimport$12 (param f64)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "printn" (func $fimport$14 (param i64)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "current_time" (func $fimport$19 (result i64)))
(import "env" "abort" (func $fimport$20))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$33 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$34 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$37 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$39 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$40 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$41 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $26))
(export "_ZdlPv" (func $51))
(export "_Znwj" (func $49))
(export "_Znaj" (func $50))
(export "_ZdaPv" (func $52))
(export "_ZnwjSt11align_val_t" (func $53))
(export "_ZnajSt11align_val_t" (func $54))
(export "_ZdlPvSt11align_val_t" (func $55))
(export "_ZdaPvSt11align_val_t" (func $56))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $23 $1 $67 $69)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18384))
(global $global$2 i32 (i32.const 18384))


int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8504]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8508])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8504]) = [1]
	$2 = ($2 << [16])
	*([0] + [8508]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8508])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8508]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8504]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8504]) = [1]
	$3 = ($3 << [16])
	*([0] + [8508]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8508])
	
.LABEL $label$10
	*([0] + [8508]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $62 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *(*($4) + [4])
	*($1) = *($5 + [40])
	$6 = *($0)
	$7 = ($1 + [8])
	CALL $59($7, ($5 + [96]))
	$4 = *(*($4) + [4])
	*($1 + [40]) = *($4 + [112])
	*($1 + [32]) = *($4 + [16])
	*($1 + [24]) = *($4 + [8])
	*(($1 + [48])) = *(($4 + [120]))
	*($1 + [56]) = *($4 + [72])
	*($1 + [72]) = *($4 + [144])
	*($1 + [64]) = *($4 + [80])
	*(($1 + [80])) = *(($4 + [152]))
	*($1 + [88]) = *($4 + [88])
	*($1 + [96]) = *($4 + [24])
	*($1 + [112]) = *($4 + [128])
	*($1 + [104]) = *($4 + [32])
	*(($1 + [120])) = *(($4 + [136]))
	$4 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [112])
	$8 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [104])
	$9 = ($1 + [88])
	$10 = ($1 + [64])
	$11 = ($1 + [32])
	$12 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $77($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $7
	*($3 + [32]) = $1
	*($3 + [40]) = $12
	*($3 + [44]) = $11
	*($3 + [48]) = ($1 + [40])
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = $10
	*($3 + [60]) = ($1 + [72])
	*($3 + [64]) = $9
	*($3 + [68]) = ($1 + [96])
	*($3 + [72]) = $5
	*($3 + [76]) = ($1 + [112])
	CALL $47(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($6 + [8]), (int_64)-6030912130159137136, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($6 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $81($2)
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [80])
}

int_32 .FUNC $77 (int_32 $0)
{
	return CALL $78([8512], $0)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $77($1)
	
.LABEL $label$2
	*(CALL $63()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $77(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $81($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [3] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $68($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $68($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $68($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $68($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18304]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $68($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $68($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $68($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $73([8228])
	$3 = *([0] + [8236])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8240])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8244]
	*([0] + [8236]) = [8244]
	$4 = *([0] + [8240])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $80([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8236])
	*([0] + [8236]) = $3
	*([0] + [8240]) = [0]
	
.LABEL $label$2
	*([0] + [8240]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $74([8228])
	return [0]
	
.LABEL $label$1
	CALL $74([8228])
	return [-1]
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18055])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $21($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17808])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $73 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [17734])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $35(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $36(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [18271] ? [18283] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $70($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $72($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $57($0)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $62($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, float_64 $3, int_64 $4, int_64 $5, float_64 $6)
{
	int_32 $7
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$2 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$2
	CALL printn($1)
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$4 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	goto $label$5 
	
.LABEL $label$4
	CALL printui($2)
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	
.LOOP $label$7:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	goto $label$7 
	
.LABEL $label$6
	CALL printdf($3)
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	
.LOOP $label$9:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$8 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	goto $label$9 
	
.LABEL $label$8
	CALL printn($4)
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	
.LOOP $label$11:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$10 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	goto $label$11 
	
.LABEL $label$10
	CALL printui($5)
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	
.LOOP $label$13:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$12 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$1 }
	goto $label$13 
	
.LABEL $label$12
	CALL printdf($6)
	CALL prints(($0 + [1]))
	
.LABEL $label$1
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [32])
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-4823918150867222528, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $3($3, $5)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [17149])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL eosio_assert([1], [18059])
	CALL eosio_assert([1], [18093])
	$5 = [0]
	$6 = CALL db_next_i64(*($4 + [28]), $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $3($3, $6)
	
.LABEL $label$4
	CALL $24($3, $4)
	$4 = $5
	if ( $5 ){ goto $label$3 }
	
.LABEL $label$2
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$7 = *($0)
	*($2) = $7
	*($2 + [8]) = $7
	*($2 + [24]) = (int_64)0
	$5 = CALL db_lowerbound_i64($7, $7, (int_64)7035927880338305920, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $4($2, $5)
	
.LOOP $label$6:
	CALL eosio_assert([1], [18059])
	CALL eosio_assert([1], [18093])
	$5 = [0]
	$3 = CALL db_next_i64(*($4 + [20]), ($2 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $4($2, $3)
	
.LABEL $label$7
	CALL $25($2, $4)
	$4 = $5
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$5
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$8 }
	$6 = ($2 + [28])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$11 }
	$5 = *(($2 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$5 = $3
	
.LABEL $label$9
	*($6) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$global$0 = ($2 + [48])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $41(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18123])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18168])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18218])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [18123])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18168])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18218])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $77($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $32(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	CALL $27(($3 + [144]))
	$5 = *(($3 + [168]))
	*(($4 = (($3 + [128]) + [8]))) = $5
	*($3 + [128]) = *($3 + [160])
	$6 = *($3 + [152])
	$7 = *($3 + [144])
	*((($3 + [192]) + [8])) = *($4)
	*($3 + [192]) = *($3 + [128])
	$8 = ($3 + [160])
	$4 = [17444]
	$9 = *([17444])
	if ( ($9 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)$9 == (int_32)[37]) ){ goto $label$3 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$2 }
	goto $label$4 
	
.LABEL $label$3
	CALL printn($7)
	*(($9 = (($3 + [208]) + [8]))) = *((($3 + [192]) + [8]))
	*($3 + [208]) = *($3 + [192])
	*((($3 + [224]) + [8])) = *($9)
	*($3 + [224]) = *($3 + [208])
	$4 = ($4 + [1])
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$2 }
	
.LOOP $label$6:
	if ( ((int_32)$9 == (int_32)[37]) ){ goto $label$5 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$2 }
	goto $label$6 
	
.LABEL $label$5
	CALL printn($6)
	*(($9 = (($3 + [240]) + [8]))) = *((($3 + [224]) + [8]))
	*($3 + [240]) = *($3 + [224])
	*((($3 + [16]) + [8])) = *($9)
	*($3 + [16]) = *($3 + [240])
	$4 = ($4 + [1])
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$2 }
	
.LOOP $label$8:
	if ( ((int_32)$9 == (int_32)[37]) ){ goto $label$7 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$2 }
	goto $label$8 
	
.LABEL $label$7
	CALL $28(($3 + [256]), ($3 + [16]))
	$9 = *($3 + [256])
	$10 = ($9 & [1])
	CALL prints_l(( *($3 + [264]) ? (($3 + [256]) | [1]) : $10 ), ( *($3 + [260]) ? uint_32($9 >> [1]) : $10 ))
	$4 = ($4 + [1])
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [264])))
	
.LABEL $label$9
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$2 }
	
.LOOP $label$11:
	if ( ((int_32)$9 == (int_32)[37]) ){ goto $label$10 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$2 }
	goto $label$11 
	
.LABEL $label$10
	CALL printui($5)
	CALL prints(($4 + [1]))
	
.LABEL $label$2
	if ( ((int_64)*($3 + [144]) != (int_64)$0) ){ goto $label$13 }
	if ( (*(($3 + [176])) & [1]) ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$13
	*(($3 + [40])) = [0]
	*(($3 + [56])) = $0
	*(($3 + [64])) = (int_64)-1
	*(($3 + [72])) = (int_64)0
	*(($3 + [80])) = [0]
	*(($3 + [96])) = $0
	*(($3 + [104])) = (int_64)-1
	*(($3 + [112])) = (int_64)0
	*(($3 + [120])) = [0]
	*($3 + [24]) = $1
	*($3 + [16]) = $0
	*($3 + [32]) = (int_64)0
	*($3 + [48]) = $0
	*($3 + [88]) = $0
	$4 = ($3 + [48])
	$9 = CALL db_lowerbound_i64($0, $0, (int_64)-4823918150867222528, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	CALL $3($4, $9)
	goto $label$14 
	
.LABEL $label$15
	CALL $29(($3 + [240]), $4, $0, ($3 + [224]))
	
.LABEL $label$14
	$4 = ($3 + [176])
	CALL $2(($3 + [16]), *($3 + [144]), *(($3 + [152])), $8, $4)
	CALL $30(($3 + [16]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)5377976101005950976) ){ goto $label$16 }
	*($3 + [12]) = [0]
	*($3 + [8]) = [1]
	*($3) = *($3 + [8])
	CALL $31($0, $0, $3)
	
.LABEL $label$16
	CALL $64([0])
	$global$0 = ($3 + [272])
}

void .FUNC $74 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $77($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $77($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $48 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8192]) = (int_64)0
	*([0] + [8200]) = [0]
	$0 = CALL $72([16908])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$5 }
	*([0] + [8192]) = ($0 << [1])
	$1 = [8193]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8192]) = ($2 | [1])
	*([0] + [8200]) = $1
	*([0] + [8196]) = $0
	
.LABEL $label$4
	CALL memcpy($1, [16908], $0)
	
.LABEL $label$3
	*(($1 + $0)) = [0]
	*([0] + [8204 align=4]) = (int_64)0
	*([0] + [8212]) = [0]
	$0 = CALL $72([16920])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$8 }
	*([0] + [8204]) = ($0 << [1])
	$1 = [8205]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8204]) = ($2 | [1])
	*([0] + [8212]) = $1
	*([0] + [8208]) = $0
	
.LABEL $label$7
	CALL memcpy($1, [16920], $0)
	
.LABEL $label$6
	*(($1 + $0)) = [0]
	CALL $65([2], [0], [8192])
	return (unreachable)
	
.LABEL $label$2
	CALL $57([8192])
	
.LABEL $label$1
	CALL $57([8204])
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $78([8512], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [17899])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [17945])
	$3 = *($3)
	*($1 + [8]) = (int_64))(*($1 + [8]) - *($3))
	*(($1 + [16])) = *($3 + [8])
	$6 = *($1)
	CALL eosio_assert([1], [17996])
	$3 = *($1 + [32])
	$7 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [32])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $77($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [44]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [24])
	CALL $40(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $81($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [18123])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18168])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18218])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17728])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17728])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $41(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $41(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [17728])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), *($0 + [28]))
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), *($0 + [44]))
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17808])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17808])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [17808])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $41(*($1), *($0 + [28]))
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $41(*($1), *($0 + [44]))
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17728])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17728])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [17728])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [24]) = *(*(*($4 + [4]) + [4]) + [8])
	$5 = *($4 + [8])
	*($1 + [8]) = (int_64))(*($5) - *(*(*($4 + [12]) + [4]) + [8]))
	*(($1 + [16])) = *($5 + [8])
	$5 = *($0)
	$6 = ($1 + [32])
	CALL $59($6, *($4 + [16]))
	$4 = *($1 + [32])
	$7 = ( *(($1 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $77($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	*($3 + [44]) = $6
	CALL $40(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($5 + [8]), (int_64)-6712989215988121600, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $81($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $81($0)
	
.LABEL $label$1
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $79($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16933])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $66([4], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $81 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16896])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16704]
	$3 = (((int_32)$1 * (int_32)[12]) + [16704])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $63())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $76($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	$6 = *(*($4 + [4]) + [4])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [17864])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($5 + [32])), [17899])
	CALL eosio_assert(((int_64)*($5 + [32]) == (int_64)CALL $fimport$4()), [17945])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)1)
	$7 = *($6)
	CALL eosio_assert([1], [17996])
	CALL eosio_assert([1], [17728])
	$8 = $2
	CALL memcpy(($8 + [48]), $6, [8])
	CALL eosio_assert([1], [17728])
	CALL memcpy((($8 + [48]) | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [17728])
	CALL memcpy((($8 + [48]) + [16]), ($6 + [16]), [8])
	CALL db_update_i64(*($6 + [28]), (int_64)0, ($8 + [48]), [24])
	$6 = ($5 + [48])
	if ( (uint_64)($7 <= *($6)) ){ goto $label$1 }
	*($6) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$6 = ($4 + [4])
	$7 = *(*(*($6) + [4]) + [8])
	*($1 + [40]) = $7
	*($1) = $7
	*($1 + [24]) = *(*($4 + [8]))
	$9 = ($1 + [56])
	CALL $59($9, *($4 + [12]))
	$10 = *(*($4 + [16]) + [4])
	*($1 + [72]) = *($10)
	$11 = ($1 + [96])
	CALL $59($11, ($10 + [32]))
	*($1 + [8]) = *(*(*($6) + [4]) + [16])
	$10 = *($4 + [20])
	$13 = *($10)
	$6 = *($4 + [16])
	$12 = *($6 + [4])
	$7 = *($12 + [8])
	if ( ((int_64)$7 != (int_64)$13) ){ goto $label$3 }
	$5 = *($4 + [24])
	$7 = *($6)
	$6 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	$10 = ((int_32)$6) != (int_32)[0]
	CALL eosio_assert($10), [18059])
	CALL eosio_assert($10, [18093])
	$10 = CALL db_next_i64(*($6 + [48]), ($8 + [48]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	CALL $6((CASTING uint_32)(uint_64 $7), $10)
	
.LABEL $label$4
	CALL $42($5, $6)
	$4 = *(($4 + [20]))
	*(($1 + [120])) = *($4 + [8])
	*($1 + [112]) = *($4)
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$7 <= (int_64)$13) ){ goto $label$5 }
	*(($1 + [120])) = *($10 + [8])
	*($1 + [112]) = *($10)
	$6 = *(($6 + [4]))
	$4 = *($4 + [24])
	*($8 + [48]) = $10
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [17864])
	CALL $43($4, $6, (int_64)0, ($8 + [48]))
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_64)$7 >= (int_64)$13) ){ goto $label$2 }
	*(($1 + [120])) = *(($12 + [16]))
	*($1 + [112]) = *($12 + [8])
	$12 = *($4 + [24])
	$7 = *($5)
	$5 = *(($4 + [8]))
	*($8 + [52]) = *($4 + [28])
	*($8 + [48]) = $5
	*($8 + [56]) = $10
	*($8 + [60]) = $6
	*($8 + [64]) = *(($4 + [12]))
	*($8 + [40]) = $7
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$4()), [17734])
	*($8 + [16]) = $12
	*($8 + [20]) = ($8 + [48])
	*($8 + [24]) = ($8 + [40])
	*(($6 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40]) = [0]
	*($6 + [44]) = $12
	CALL $44(($8 + [16]), $6)
	*($8 + [32]) = $6
	$7 = *($6)
	*($8 + [16]) = $7
	$10 = *($6 + [48])
	*($8 + [12]) = $10
	$14 = ($12 + [28])
	$5 = *($14)
	if ( ((uint_32)$5 >= (uint_32)*(($12 + [32]))) ){ goto $label$8 }
	*($5 + [8]) = $7
	*($5 + [16]) = $10
	*($8 + [32]) = [0]
	*($5) = $6
	*($14) = ($5 + [24])
	$6 = *($8 + [32])
	$5 = [0]
	*($8 + [32]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(($12 + [24]), ($8 + [32]), ($8 + [16]), ($8 + [12]))
	$6 = *($8 + [32])
	$5 = [0]
	*($8 + [32]) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($6 + [40])))
	
.LABEL $label$9
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$6 = *(($4 + [24]))
	$7 = *(*(($4 + [16])))
	$4 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	$10 = ((int_32)$4) != (int_32)$5
	CALL eosio_assert($10), [18059])
	CALL eosio_assert($10, [18093])
	$10 = CALL db_next_i64(*($4 + [48]), ($8 + [48]))
	if ( ((int_32)$10 < (int_32)$5) ){ goto $label$10 }
	CALL $6((CASTING uint_32)(uint_64 $7), $10)
	
.LABEL $label$10
	CALL $42($6, $4)
	
.LABEL $label$2
	$5 = ($1 + [8])
	$10 = ($1 + [40])
	$4 = *(($1 + [56]))
	$6 = ( *(($1 + [60])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [128])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$11:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$11 }
	$6 = *(($1 + [96]))
	$6 = ( *(($1 + [100])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$4 = ($6 + $4)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$12:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$12 }
	if ( ($4 <= [513]) ){ goto $label$14 }
	$6 = CALL $77($4)
	goto $label$13 
	
.LABEL $label$14
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$13
	*($8 + [20]) = $6
	*($8 + [16]) = $6
	*($8 + [24]) = ($6 + $4)
	*($8 + [40]) = ($8 + [16])
	*($8 + [52]) = $5
	*($8 + [48]) = $1
	*($8 + [56]) = ($1 + [16])
	*($8 + [60]) = ($1 + [24])
	*($8 + [64]) = ($1 + [32])
	*($8 + [68]) = $10
	*($8 + [72]) = ($1 + [48])
	*($8 + [76]) = $9
	*($8 + [80]) = ($1 + [72])
	*($8 + [84]) = ($1 + [80])
	*($8 + [88]) = ($1 + [88])
	*($8 + [92]) = $11
	*($8 + [96]) = ($1 + [112])
	*($8 + [100]) = ($1 + [128])
	*($8 + [104]) = ($1 + [144])
	CALL $45(($8 + [48]), ($8 + [40]))
	$7 = *(($1 + [40]))
	*($1 + [164]) = CALL db_store_i64(*($3 + [8]), (int_64)-4823507884463095808, *(*($0 + [8])), $7, $6, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$17 }
	if ( ((uint_64)$7 >= (uint_64)*($3 + [16])) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $81($6)
	if ( (uint_64)($7 <= *($3 + [16])) ){ goto $label$15 }
	
.LABEL $label$16
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($8 + [112])
	return 
	
.LABEL $label$15
	$global$0 = ($8 + [112])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17785])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $77($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [44]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [32])
	CALL $37(($3 + [32]), ($3 + [24]))
	*($5 + [48]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $81($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [24]) = *(*(*($4 + [4]) + [4]) + [8])
	$5 = *($4 + [8])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*($5))
	*(($1 + [16])) = *($5 + [8])
	$5 = *($0)
	$6 = ($1 + [32])
	CALL $59($6, *($4 + [12]))
	$4 = *($1 + [32])
	$7 = ( *(($1 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $77($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	*($3 + [44]) = $6
	CALL $40(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($5 + [8]), (int_64)-6712989215988121600, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $81($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17785])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $77($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17808])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17808])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $5(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $81($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	float_64 $12
	$5 = ($global$0 - [336])
	$global$0 = $5
	*($5 + [312]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [17019])
	$6 = [0]
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $9
	$7 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [17052])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [17069])
	$7 = ($0 + [32])
	$8 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-4823918150867222528, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $3($7, $8)
	
.LABEL $label$6
	*($5 + [308]) = $6
	*($5 + [304]) = $7
	*((($5 + [264]) + [32])) = [0]
	*($5 + [280]) = (int_64)-1
	*($5 + [288]) = (int_64)0
	$2 = *($0)
	*($5 + [264]) = $2
	*($5 + [272]) = $2
	$8 = CALL db_find_i64($2, $2, (int_64)7035927880338305920, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$8 = CALL $4(($5 + [264]), $8)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [264])), [17813])
	*($5 + [260]) = $8
	*($5 + [256]) = ($5 + [264])
	goto $label$7 
	
.LABEL $label$8
	*($5 + [260]) = [0]
	$8 = *($5 + [308])
	*($5 + [256]) = ($5 + [264])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [17864])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$7), [17899])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$4()), [17945])
	*($8 + [16]) = ((int_64)*($8 + [16]) + (int_64)1)
	$2 = *($8)
	CALL eosio_assert([1], [17996])
	CALL eosio_assert([1], [17728])
	CALL memcpy(($5 + [64]), $8, [8])
	CALL eosio_assert([1], [17728])
	$7 = (($5 + [64]) | [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert([1], [17728])
	CALL memcpy((($5 + [64]) + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), (int_64)0, ($5 + [64]), [24])
	$8 = ($0 + [48])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$9 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$9 = *($0)
	CALL eosio_assert(((int_64)*($5 + [264]) == (int_64)CALL $fimport$4()), [17734])
	*(($8 = CALL _Znwj([32])) + [16]) = ($5 + [264])
	*($8) = *($5 + [312])
	*($8 + [8]) = *(*($5 + [308]) + [16])
	CALL eosio_assert([1], [17728])
	CALL memcpy(($5 + [64]), $8, [8])
	CALL eosio_assert([1], [17728])
	CALL memcpy($7, ($8 + [8]), [8])
	$2 = *($8)
	$10 = CALL db_store_i64(*((($5 + [264]) + [8])), (int_64)7035927880338305920, $9, $2, ($5 + [64]), [16])
	*($8 + [20]) = $10
	if ( (uint_64)($2 <= *((($5 + [264]) + [16]))) ){ goto $label$10 }
	*(($5 + [280])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($5 + [216]) = $8
	$2 = *($8)
	*($5 + [64]) = $2
	*($5 + [168]) = $10
	$6 = ($5 + [292])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($5 + [296]))) ){ goto $label$13 }
	*($7 + [8]) = $2
	*($7 + [16]) = $10
	*($5 + [216]) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	$7 = *($5 + [216])
	*($5 + [216]) = [0]
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $5(($5 + [288]), ($5 + [216]), ($5 + [64]), ($5 + [168]))
	$7 = *($5 + [216])
	*($5 + [216]) = [0]
	if ( ($7 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($7)
	
.LABEL $label$11
	*($5 + [260]) = $8
	*($5 + [256]) = ($5 + [264])
	
.LABEL $label$7
	$8 = [0]
	*(($5 + [248])) = [0]
	*($5 + [232]) = (int_64)-1
	*($5 + [240]) = (int_64)0
	$2 = *($0)
	*($5 + [216]) = $2
	$9 = *($3 + [8])
	*($5 + [224]) = $9
	$7 = CALL db_find_i64($2, $9, (int_64)-6712989215988121600, *($5 + [312]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	$8 = CALL $6(($5 + [216]), $7)
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)($5 + [216])), [17813])
	
.LABEL $label$14
	CALL eosio_assert(($8 == 0), [17100])
	$8 = CALL db_lowerbound_i64(*($5 + [216]), *(($5 + [224])), (int_64)-6712989215988121600, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$25 }
	*($5 + [212]) = CALL $6(($5 + [216]), $8)
	$7 = *(($5 + [244]))
	$10 = *(($5 + [240]))
	*($5 + [208]) = ($5 + [216])
	$2 = *($5 + [312])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$23 }
	
.LOOP $label$26:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$24 }
	$7 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$26 }
	goto $label$23 
	
.LABEL $label$25
	*($5 + [212]) = [0]
	*($5 + [208]) = ($5 + [216])
	$2 = *($0)
	*($5 + [72]) = $3
	*($5 + [76]) = $4
	*($5 + [68]) = ($5 + [256])
	*($5 + [64]) = ($5 + [312])
	*($5 + [152]) = $2
	CALL eosio_assert(((int_64)*($5 + [216]) == (int_64)CALL $fimport$4()), [17734])
	*($5 + [172]) = ($5 + [64])
	*($5 + [168]) = ($5 + [216])
	*($5 + [176]) = ($5 + [152])
	*(($8 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32 align=4]) = (int_64)0
	*($8 + [40]) = [0]
	*($8 + [44]) = ($5 + [216])
	CALL $7(($5 + [168]), $8)
	*($5 + [320]) = $8
	$2 = *($8)
	*($5 + [168]) = $2
	$10 = *($8 + [48])
	*($5 + [32]) = $10
	$0 = ($5 + [244])
	$7 = *($0)
	if ( ((uint_32)$7 >= (uint_32)*(($5 + [248]))) ){ goto $label$21 }
	*($7 + [8]) = $2
	*($7 + [16]) = $10
	*($5 + [320]) = [0]
	*($7) = $8
	*($0) = ($7 + [24])
	$7 = *($5 + [320])
	*($5 + [320]) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$24
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)($5 + [216])), [17813])
	if ( $6 ){ goto $label$15 }
	goto $label$22 
	
.LABEL $label$23
	$8 = CALL db_find_i64(*($5 + [216]), *(($5 + [224])), (int_64)-6712989215988121600, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$22 }
	CALL eosio_assert(((int_32)*(CALL $6(($5 + [216]), $8) + [44]) == (int_32)($5 + [216])), [17813])
	goto $label$15 
	
.LABEL $label$22
	$2 = *($0)
	*($5 + [64]) = $0
	*($5 + [76]) = $4
	*($5 + [84]) = $3
	*($5 + [68]) = ($5 + [304])
	*($5 + [72]) = ($5 + [312])
	*($5 + [80]) = ($5 + [208])
	*($5 + [88]) = ($5 + [216])
	*($5 + [92]) = ($5 + [256])
	*($5 + [152]) = $2
	CALL eosio_assert(((int_64)*($0 + [72]) == (int_64)CALL $fimport$4()), [17734])
	$7 = ($0 + [72])
	*($5 + [168]) = $7
	*($5 + [172]) = ($5 + [64])
	*($5 + [176]) = ($5 + [152])
	*(($8 = CALL _Znwj([176])) + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [56 align=4]) = (int_64)0
	*($8 + [64]) = [0]
	*($8 + [72]) = (int_64)0
	*($8 + [96 align=4]) = (int_64)0
	*($8 + [104]) = [0]
	*($8 + [112]) = (int_64)0
	*($8 + [120]) = (int_64)0
	*($8 + [128]) = (int_64)0
	*($8 + [136]) = (int_64)0
	*($8 + [144]) = (int_64)0
	*($8 + [152]) = (int_64)0
	*($8 + [160]) = $7
	CALL $8(($5 + [168]), $8)
	*($5 + [320]) = $8
	$2 = *($8 + [40])
	*($5 + [168]) = $2
	$10 = *($8 + [164])
	*($5 + [32]) = $10
	$6 = ($0 + [100])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [104]))) ){ goto $label$20 }
	*($7 + [8]) = $2
	*($7 + [16]) = $10
	*($5 + [320]) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	$7 = *($5 + [320])
	*($5 + [320]) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$21
	CALL $9(($5 + [240]), ($5 + [320]), ($5 + [168]), ($5 + [32]))
	$7 = *($5 + [320])
	*($5 + [320]) = [0]
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$20
	CALL $10(($0 + [96]), ($5 + [320]), ($5 + [168]), ($5 + [32]))
	$7 = *($5 + [320])
	*($5 + [320]) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($7 + [104])))
	
.LABEL $label$27
	if ( ((*($7 + [56]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($7 + [64])))
	
.LABEL $label$28
	CALL _ZdlPv($7)
	
.LABEL $label$18
	CALL $11($0, *(($8 + [24])), *(($8 + [72])), *(($8 + [40])))
	goto $label$15 
	
.LABEL $label$17
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($7 + [40])))
	
.LABEL $label$29
	CALL _ZdlPv($7)
	
.LABEL $label$16
	*($5 + [212]) = $8
	*($5 + [208]) = ($5 + [216])
	CALL prints([17118])
	
.LABEL $label$15
	$2 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8
	if ( (int_64)($2) == 0) ){ goto $label$33 }
	$7 = [0]
	
.LOOP $label$35:
	*((($5 + [168]) + ($8 = $7))) = $2
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$34 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$35 }
	
.LABEL $label$34
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$32 }
	*($5 + [64]) = ($7 << [1])
	$10 = (($5 + [64]) | [1])
	goto $label$31 
	
.LABEL $label$33
	*((($5 + [64]) + [8])) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [64]) = [0]
	$8 = (($5 + [64]) | [1])
	goto $label$30 
	
.LABEL $label$32
	$0 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($0)
	*($5 + [64]) = ($0 | [1])
	*($5 + [72]) = $10
	*($5 + [68]) = $7
	
.LABEL $label$31
	$0 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$36:
	*(($10 + $8)) = *((($5 + [168]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$36 }
	$8 = ($10 + $7)
	
.LABEL $label$30
	*($8) = [0]
	*(($5 + [176])) = [0]
	*($5 + [168]) = (int_64)0
	$8 = CALL $72([17127])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$42 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$45 }
	*($5 + [168]) = ($8 << [1])
	$7 = (($5 + [168]) | [1])
	if ( $8 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$10 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($5 + [168]) = ($10 | [1])
	*($5 + [176]) = $7
	*($5 + [172]) = $8
	
.LABEL $label$44
	CALL memcpy($7, [17127], $8)
	
.LABEL $label$43
	$0 = [0]
	*(($7 + $8)) = [0]
	$6 = ($8 & [1])
	$8 = *($5 + [168])
	$10 = ($8 & [1])
	$8 = *($5 + [64])
	$11 = uint_32($8 >> [1])
	$4 = ( *($5 + [68]) ? $11 : $10 )
	if ( ((int_32)$4 != (int_32)( *($5 + [172]) ? uint_32($8 >> [1]) : $6 )) ){ goto $label$48 }
	$8 = ( *($5 + [176]) ? (($5 + [168]) | [1]) : $6 )
	$7 = (($5 + [64]) | [1])
	if ( $10 ){ goto $label$50 }
	if ( ($4 == 0) ){ goto $label$49 }
	$0 = [0]
	$10 = ([0] - $11)
	
.LOOP $label$51:
	if ( ((int_32)*($7) != (int_32)*($8)) ){ goto $label$48 }
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	if ( ($4 == 0) ){ goto $label$49 }
	$0 = (CALL $71(( *($5 + [72]) ? $7 : $10 ), $8, $4) == 0)
	if ( (*($5 + [168]) & [1]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	$0 = [1]
	
.LABEL $label$48
	if ( ($6 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv(*($5 + [176]))
	
.LABEL $label$46
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*($5 + [72]))
	
.LABEL $label$52
	if ( ($0 == 0) ){ goto $label$38 }
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$8 = CALL $72([17131])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$41 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$55 }
	*($5 + [64]) = ($8 << [1])
	$10 = (($5 + [64]) | [1])
	$7 = $10
	if ( $8 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$10 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($5 + [64]) = ($10 | [1])
	*($5 + [72]) = $7
	*($5 + [68]) = $8
	$10 = (($5 + [64]) | [1])
	
.LABEL $label$54
	CALL memcpy($7, [17131], $8)
	
.LABEL $label$53
	*(($7 + $8)) = [0]
	$0 = ( *($5 + [72]) ? $10 : (*($5 + [64]) & [1]) )
	$8 = CALL $72($0)
	if ( ($8 <= [8]) ){ goto $label$58 }
	CALL eosio_assert([0], [17473])
	goto $label$57 
	
.LABEL $label$58
	if ( ($8 == 0) ){ goto $label$56 }
	
.LABEL $label$57
	$2 = (int_64)0
	
.LOOP $label$59:
	$10 = (($0 + $8) + [-1])
	$7 = *($10)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$60 }
	CALL eosio_assert([0], [17518])
	$7 = *($10)
	
.LABEL $label$60
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$59 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$56
	$2 = (int_64)4
	if ( (*($5 + [64]) & [1]) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	CALL $57(($5 + [168]))
	
.LABEL $label$41
	CALL $57(($5 + [64]))
	
.LABEL $label$40
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$39
	$9 = *($3)
	*($5 + [136]) = [17135]
	*($5 + [140]) = CALL $72([17135])
	*($5 + [24]) = *($5 + [136])
	$8 = CALL $12(($5 + [144]), ($5 + [24]))
	*($5 + [160]) = (int_64)3617214756542218240
	*($5 + [152]) = *($8)
	*($5 + [120]) = [16920]
	*($5 + [124]) = CALL $72([16920])
	*($5 + [16]) = *($5 + [120])
	$10 = CALL $12(($5 + [128]), ($5 + [16]))
	*($5 + [48]) = [17135]
	*($5 + [52]) = CALL $72([17135])
	*($5 + [8]) = *($5 + [48])
	$0 = CALL $12(($5 + [56]), ($5 + [8]))
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$8 = CALL $72([17148])
	$7 = ($8 <= [-16])
	$12 = ((float_64)(CASTING float_64)(int_64 $9) * (float_64)(float_64)0.2)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$62 }
	$9 = (int_64)-9223372036854775808
	if ( $7 ){ goto $label$61 }
	goto $label$37 
	
.LABEL $label$62
	$9 = (Rounds 0)($12)
	if ( ($7 == 0) ){ goto $label$37 }
	
.LABEL $label$61
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$65 }
	*($5 + [32]) = ($8 << [1])
	$7 = (($5 + [32]) | [1])
	if ( $8 ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	$3 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($3)
	*($5 + [32]) = ($3 | [1])
	*($5 + [40]) = $7
	*($5 + [36]) = $8
	
.LABEL $label$64
	CALL memcpy($7, [17148], $8)
	
.LABEL $label$63
	*(($7 + $8)) = [0]
	*(($5 + [88])) = $2
	$8 = ($5 + [40])
	*(($5 + [104])) = *($8)
	*($8) = [0]
	*($5 + [80]) = $9
	*($5 + [64]) = *($0)
	*($5 + [72]) = *($5 + [312])
	*($5 + [96]) = *($5 + [32])
	*($5 + [32]) = (int_64)0
	$8 = CALL $13(($5 + [168]), ($5 + [152]), *($10), (int_64)-3617168760277827584, ($5 + [64]))
	CALL $14(($5 + [320]), $8)
	$7 = *($5 + [320])
	CALL send_inline($7, (*($5 + [324]) - $7))
	$7 = *($5 + [320])
	if ( ($7 == 0) ){ goto $label$66 }
	*($5 + [324]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$66
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$67 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$67
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$68 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$68
	if ( ((*(($5 + [96])) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$69
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$38
	$10 = *($5 + [240])
	if ( ($10 == 0) ){ goto $label$70 }
	$0 = ($5 + [244])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$72 }
	
.LOOP $label$73:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$74 }
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*(($7 + [40])))
	
.LABEL $label$75
	CALL _ZdlPv($7)
	
.LABEL $label$74
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$73 }
	$8 = *(($5 + [240]))
	goto $label$71 
	
.LABEL $label$72
	$8 = $10
	
.LABEL $label$71
	*($0) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$70
	$10 = *($5 + [288])
	if ( ($10 == 0) ){ goto $label$76 }
	$0 = ($5 + [292])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$78 }
	
.LOOP $label$79:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$80 }
	CALL _ZdlPv($7)
	
.LABEL $label$80
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$79 }
	$8 = *(($5 + [288]))
	goto $label$77 
	
.LABEL $label$78
	$8 = $10
	
.LABEL $label$77
	*($0) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$76
	$global$0 = ($5 + [336])
	return (unreachable)
	
.LABEL $label$37
	CALL $57(($5 + [32]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17785])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $77($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17808])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [17808])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [17808])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $81($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC memory ()
{
	CALL $48()
}

void .FUNC $1 (int_32 $0)
{
	if ( (*([0] + [8204]) & [1]) ){ goto $label$3 }
	if ( (*([0] + [8192]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*([0] + [8212]))
	if ( ((*([0] + [8192]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*([0] + [8200]))
	return 
	
.LABEL $label$1
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $21($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17728])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17728])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $34(CALL $33($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17785])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $77($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([176])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [72]) = (int_64)0
	*($5 + [96 align=4]) = (int_64)0
	*($5 + [104]) = [0]
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [144]) = (int_64)0
	*($5 + [152]) = (int_64)0
	*($5 + [160]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [72])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [88])
	*($3 + [76]) = ($5 + [96])
	*($3 + [80]) = ($5 + [112])
	*($3 + [84]) = ($5 + [128])
	*($3 + [88]) = ($5 + [144])
	CALL $46(($3 + [32]), ($3 + [24]))
	*($5 + [164]) = $1
	*($3 + [24]) = $5
	$6 = *($5 + [40])
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $10(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $81($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$10
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [17899])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [17945])
	$6 = *($1 + [40])
	*($1 + [16]) = CALL current_time()
	$8 = *(*($3) + [4])
	$7 = *($1 + [24])
	if ( ((int_64)$7 == (int_64)*($8)) ){ goto $label$1 }
	$9 = ($1 + [56])
	$8 = CALL $58(($5 + [32]), $9)
	$10 = ($1 + [96])
	CALL $59($9, $10)
	CALL $59($10, $8)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$2
	$8 = *(*($3) + [4])
	$7 = *($8)
	
.LABEL $label$1
	*(($1 + [24])) = $7
	*($1 + [32]) = *($8 + [8])
	$9 = *(*($3 + [4]) + [4])
	*($1 + [72]) = *($9)
	$8 = *($3 + [8])
	*($1 + [128]) = *($8)
	*($1 + [80]) = *($9 + [8])
	*(($1 + [136])) = *($8 + [8])
	$3 = *($3 + [12])
	*($1 + [144]) = *($3)
	*(($1 + [152])) = *($3 + [8])
	$11 = *($3)
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)$11) ){ goto $label$4 }
	$7 = (int_64)1
	*($1 + [48]) = (int_64)1
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_64)$7 <= (int_64)$11) ){ goto $label$5 }
	*(($1 + [48])) = (int_64)2
	$7 = (int_64)0
	goto $label$3 
	
.LABEL $label$5
	*(($1 + [48])) = (int_64)0
	$7 = (int_64)2
	
.LABEL $label$3
	$9 = ($1 + [16])
	$10 = ($1 + [40])
	$12 = ($1 + [80])
	$13 = ($1 + [32])
	*($1 + [88]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [40]))), [17996])
	$3 = *($1 + [56])
	$8 = ( *(($1 + [60])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [128])
	$7 = (CASTING uint_64)(uint_32 $8)
	$14 = ($1 + [56])
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	$8 = *($1 + [96])
	$8 = ( *(($1 + [100])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$3 = ($8 + $3)
	$7 = (CASTING uint_64)(uint_32 $8)
	$15 = ($1 + [96])
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	if ( ($3 <= [513]) ){ goto $label$9 }
	$8 = CALL $77($3)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$8
	*($5 + [12]) = $8
	*($5 + [8]) = $8
	*($5 + [16]) = ($8 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [40]) = $9
	*($5 + [48]) = $13
	*($5 + [52]) = $10
	*($5 + [60]) = $14
	*($5 + [68]) = $12
	*($5 + [76]) = $15
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [44]) = ($1 + [24])
	*($5 + [56]) = ($1 + [48])
	*($5 + [64]) = ($1 + [72])
	*($5 + [72]) = ($1 + [88])
	*($5 + [80]) = ($1 + [112])
	*($5 + [84]) = ($1 + [128])
	*($5 + [88]) = ($1 + [144])
	CALL $45(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $8, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$12 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $81($8)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$10
	$global$0 = ($5 + [96])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *(*($4) + [4])
	*($1) = *($5 + [40])
	$6 = *($0)
	$7 = ($1 + [8])
	CALL $59($7, ($5 + [56]))
	$4 = *(*($4) + [4])
	*($1 + [40]) = *($4 + [112])
	*($1 + [32]) = *($4 + [16])
	*($1 + [24]) = *($4 + [8])
	*(($1 + [48])) = *(($4 + [120]))
	*($1 + [56]) = *($4 + [24])
	*($1 + [72]) = *($4 + [128])
	*($1 + [64]) = *($4 + [32])
	*(($1 + [80])) = *(($4 + [136]))
	*($1 + [88]) = *($4 + [48])
	*($1 + [96]) = *($4 + [72])
	*($1 + [112]) = *($4 + [144])
	*($1 + [104]) = *($4 + [80])
	*(($1 + [120])) = *(($4 + [152]))
	$4 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [112])
	$8 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [104])
	$9 = ($1 + [88])
	$10 = ($1 + [64])
	$11 = ($1 + [32])
	$12 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $77($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $7
	*($3 + [32]) = $1
	*($3 + [40]) = $12
	*($3 + [44]) = $11
	*($3 + [48]) = ($1 + [40])
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = $10
	*($3 + [60]) = ($1 + [72])
	*($3 + [64]) = $9
	*($3 + [68]) = ($1 + [96])
	*($3 + [72]) = $5
	*($3 + [76]) = ($1 + [112])
	CALL $47(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($6 + [8]), (int_64)-6030912130159137136, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($6 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $81($2)
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [80])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$11
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	float_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	float_64 $18
	float_32 $19
	float_32 $20
	float_64 $21
	int_64 $22
	$4 = ($global$0 - [528])
	$global$0 = $4
	$5 = ($0 + [72])
	$7 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9 + [40]) == (int_64)$3) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [160]) == (int_32)$5), [17813])
	*($4 + [508]) = $9
	*($4 + [504]) = $5
	$10 = (($4 + [504]) | [4])
	goto $label$1 
	
.LABEL $label$2
	$8 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)-4823507884463095808, $3)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$5 }
	$9 = CALL $15($5, $8)
	CALL eosio_assert(((int_32)*($9 + [160]) == (int_32)$5), [17813])
	*($4 + [508]) = $9
	*($4 + [504]) = $5
	$10 = (($4 + [504]) | [4])
	goto $label$1 
	
.LABEL $label$5
	$9 = [0]
	*($4 + [508]) = [0]
	*($4 + [504]) = $5
	$10 = (($4 + [504]) | [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [17164])
	*(($4 + [496])) = [0]
	*($4 + [480]) = (int_64)-1
	*($4 + [488]) = (int_64)0
	$3 = *($0)
	*($4 + [464]) = $3
	*($4 + [472]) = $3
	$8 = CALL db_find_i64($3, $3, (int_64)7035927880338305920, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$9 }
	$8 = CALL $4(($4 + [464]), $8)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($4 + [464])), [17813])
	*($4 + [460]) = $8
	$7 = *(($4 + [492]))
	$9 = *(($4 + [488]))
	*($4 + [456]) = ($4 + [464])
	$11 = ($4 + [448])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$10:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$8 }
	$7 = $8
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	*($4 + [460]) = [0]
	*($4 + [456]) = ($4 + [464])
	$11 = ($4 + [448])
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($4 + [464])), [17813])
	*($4 + [452]) = $6
	*($4 + [448]) = ($4 + [464])
	$11 = ($4 + [448])
	goto $label$6 
	
.LABEL $label$7
	$8 = CALL db_find_i64(*($4 + [464]), *(($4 + [472])), (int_64)7035927880338305920, $2)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$11 }
	$8 = CALL $4(($4 + [464]), $8)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($4 + [464])), [17813])
	*($4 + [452]) = $8
	*($4 + [448]) = ($4 + [464])
	goto $label$6 
	
.LABEL $label$11
	*($4 + [452]) = [0]
	*($4 + [448]) = ($4 + [464])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)*($4 + [460]) != (int_32)[0]), [17181])
	CALL eosio_assert(((int_32)*($4 + [452]) != (int_32)[0]), [17199])
	$13 = *(*($4 + [452]) + [8])
	$12 = *(*($4 + [460]) + [8])
	if ( ((uint_64)$12 >= (uint_64)$13) ){ goto $label$12 }
	*($4 + [456]) = *($4 + [448])
	$7 = *(($4 + [492]))
	$6 = *(($4 + [488]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$16:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$15 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($4 + [464])), [17813])
	goto $label$13 
	
.LABEL $label$14
	$9 = [0]
	$8 = CALL db_find_i64(*($4 + [464]), *(($4 + [472])), (int_64)7035927880338305920, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$13 }
	$9 = CALL $4(($4 + [464]), $8)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($4 + [464])), [17813])
	
.LABEL $label$13
	*($11 + [4]) = $9
	*($4 + [448]) = ($4 + [464])
	$13 = *($9 + [8])
	$12 = *(*($4 + [460]) + [8])
	
.LABEL $label$12
	*($4 + [432]) = (int_64)0
	*($4 + [416]) = (int_64)0
	$8 = *($10)
	$1 = *(($8 + [120]))
	*($4 + [440]) = $1
	*($4 + [424]) = $1
	$3 = *($8 + [112])
	*($4 + [408]) = [0]
	*($4 + [400]) = (int_64)0
	$14 = ((float_64)(CASTING float_64)(int_64 ((int_64)$3 << (int_64)1)) * (float_64)(float_64)0.015)
	if ( ((float_64)(float_64)|$14| < (float_64)(float_64)9223372036854775808) ){ goto $label$20 }
	$15 = (int_64)-9223372036854775808
	$2 = (int_64)8
	$3 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$15 = (Rounds 0)($14)
	$2 = (int_64)8
	$3 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)($3) == 0) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	*(($4 + [304])) = [0]
	*($4 + [296]) = (int_64)0
	*($4 + [296]) = [0]
	$8 = (($4 + [296]) | [1])
	goto $label$17 
	
.LABEL $label$18
	$7 = [0]
	
.LOOP $label$22:
	*((($4 + [136]) + ($8 = $7))) = $3
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$21 }
	$3 = (uint_64)$3 >> (uint_64)$2
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$22 }
	
.LABEL $label$21
	*(($4 + [304])) = [0]
	*($4 + [296]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$24 }
	*($4 + [296]) = ($7 << [1])
	$9 = (($4 + [296]) | [1])
	goto $label$23 
	
.LABEL $label$24
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($4 + [296]) = ($6 | [1])
	*($4 + [304]) = $9
	*($4 + [300]) = $7
	
.LABEL $label$23
	$6 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$25:
	*(($9 + $8)) = *((($4 + [136]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$25 }
	$8 = ($9 + $7)
	
.LABEL $label$17
	*($8) = [0]
	*(($4 + [368])) = [0]
	*($4 + [360]) = (int_64)0
	$8 = CALL $72([17127])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$35 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$38 }
	*($4 + [360]) = ($8 << [1])
	$7 = (($4 + [360]) | [1])
	if ( $8 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$9 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4 + [360]) = ($9 | [1])
	*($4 + [368]) = $7
	*($4 + [364]) = $8
	
.LABEL $label$37
	CALL memcpy($7, [17127], $8)
	
.LABEL $label$36
	$6 = [0]
	*(($7 + $8)) = [0]
	$11 = ($8 & [1])
	$8 = *($4 + [360])
	$9 = ($8 & [1])
	$8 = *($4 + [296])
	$16 = uint_32($8 >> [1])
	$17 = ( *($4 + [300]) ? $16 : $9 )
	if ( ((int_32)$17 != (int_32)( *($4 + [364]) ? uint_32($8 >> [1]) : $11 )) ){ goto $label$41 }
	$8 = ( *($4 + [368]) ? (($4 + [360]) | [1]) : $11 )
	$7 = (($4 + [296]) | [1])
	if ( $9 ){ goto $label$43 }
	if ( ($17 == 0) ){ goto $label$42 }
	$6 = [0]
	$9 = ([0] - $16)
	
.LOOP $label$44:
	if ( ((int_32)*($7) != (int_32)*($8)) ){ goto $label$41 }
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	if ( ($17 == 0) ){ goto $label$42 }
	$6 = (CALL $71(( *($4 + [304]) ? $7 : $9 ), $8, $17) == 0)
	if ( (*($4 + [360]) & [1]) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$6 = [1]
	
.LABEL $label$41
	if ( ($11 == 0) ){ goto $label$39 }
	
.LABEL $label$40
	CALL _ZdlPv(*($4 + [368]))
	
.LABEL $label$39
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*($4 + [304]))
	
.LABEL $label$45
	if ( ($6 == 0) ){ goto $label$47 }
	CALL $59(($4 + [400]), [8192])
	goto $label$46 
	
.LABEL $label$47
	$3 = (uint_64)*((*($10) + [120])) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$51 }
	$7 = [0]
	
.LOOP $label$53:
	*((($4 + [136]) + ($8 = $7))) = $3
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$52 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$53 }
	
.LABEL $label$52
	*(($4 + [304])) = [0]
	*($4 + [296]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$50 }
	*($4 + [296]) = ($7 << [1])
	$9 = (($4 + [296]) | [1])
	goto $label$49 
	
.LABEL $label$51
	*(($4 + [304])) = [0]
	*($4 + [296]) = (int_64)0
	*($4 + [296]) = [0]
	$8 = (($4 + [296]) | [1])
	goto $label$48 
	
.LABEL $label$50
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($4 + [296]) = ($6 | [1])
	*($4 + [304]) = $9
	*($4 + [300]) = $7
	
.LABEL $label$49
	$6 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$54:
	*(($9 + $8)) = *((($4 + [136]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$54 }
	$8 = ($9 + $7)
	
.LABEL $label$48
	*($8) = [0]
	*(($4 + [368])) = [0]
	*($4 + [360]) = (int_64)0
	$8 = CALL $72([17131])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$57 }
	*($4 + [360]) = ($8 << [1])
	$7 = (($4 + [360]) | [1])
	if ( $8 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$9 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4 + [360]) = ($9 | [1])
	*($4 + [368]) = $7
	*($4 + [364]) = $8
	
.LABEL $label$56
	CALL memcpy($7, [17131], $8)
	
.LABEL $label$55
	$6 = [0]
	*(($7 + $8)) = [0]
	$11 = ($8 & [1])
	$8 = *($4 + [360])
	$9 = ($8 & [1])
	$8 = *($4 + [296])
	$16 = uint_32($8 >> [1])
	$17 = ( *($4 + [300]) ? $16 : $9 )
	if ( ((int_32)$17 != (int_32)( *($4 + [364]) ? uint_32($8 >> [1]) : $11 )) ){ goto $label$60 }
	$8 = ( *($4 + [368]) ? (($4 + [360]) | [1]) : $11 )
	$7 = (($4 + [296]) | [1])
	if ( $9 ){ goto $label$62 }
	if ( ($17 == 0) ){ goto $label$61 }
	$6 = [0]
	$9 = ([0] - $16)
	
.LOOP $label$63:
	if ( ((int_32)*($7) != (int_32)*($8)) ){ goto $label$60 }
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	if ( ($17 == 0) ){ goto $label$61 }
	$6 = (CALL $71(( *($4 + [304]) ? $7 : $9 ), $8, $17) == 0)
	if ( (*($4 + [360]) & [1]) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$6 = [1]
	
.LABEL $label$60
	if ( ($11 == 0) ){ goto $label$58 }
	
.LABEL $label$59
	CALL _ZdlPv(*($4 + [368]))
	
.LABEL $label$58
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*($4 + [304]))
	
.LABEL $label$64
	if ( ($6 == 0) ){ goto $label$46 }
	CALL $59(($4 + [400]), [8204])
	
.LABEL $label$46
	$8 = *($4 + [400])
	CALL eosio_assert(((int_32)( *($4 + [404]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)[0]), [17217])
	$2 = (int_64)
	$18 = (CASTING float_64)(uint_64 $2($12 - $13))
	$8 = *($10)
	$3 = *($8 + [8])
	$14 = ((float_64)(CASTING float_64)(uint_64 $3) * (float_64)(float_64)0.5)
	if ( ((int_32)((float_64)$14 < (float_64)$18)) ^ (int_32)[1]) ){ goto $label$88 }
	$20 = (CASTING float_32)(int_64 *($8 + [112]))
	$19 = (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(uint_64 (int_64))($3 - $2)) / (float_64)((float_64)$14 + (float_64)( (float_64)-1 ? (float_64)-0.5 : (int_64)(((int_64)$3 & (int_64)1) == 0) )))
	$14 = ((float_64)(PROMOTE float_64)(float_32 ((float_32)((float_32)$19) + (float_32)(float_32)1) * (float_32)$20)) * (float_64)(float_64)0.985
	if ( ((float_64)(float_64)|$14)| < (float_64)(float_64)9223372036854775808) ){ goto $label$87 }
	$3 = (int_64)-9223372036854775808
	*($4 + [416]) = (int_64)-9223372036854775808
	if ( ((float_32)$19 != (float_32)(float_32)1) ){ goto $label$86 }
	goto $label$75 
	
.LABEL $label$88
	if ( ((int_32)((float_64)$14 > (float_64)$18) ^ (int_32)[1]) ){ goto $label$85 }
	$20 = (CASTING float_32)(int_64 *($8 + [112]))
	$19 = (DEMOTE float_32)(float_64 ((float_64)$18 / (float_64)((float_64)$14 + (float_64)( (float_64)-1 ? (float_64)-0.5 : (int_64)(((int_64)$3 & (int_64)1) == 0) ))))
	$14 = ((float_64)(PROMOTE float_64)(float_32 ((float_32)((float_32)$19 + (float_32)(float_32)1) * (float_32)$20)) * (float_64)(float_64)0.985)
	if ( ((float_64)(float_64)|$14| < (float_64)(float_64)9223372036854775808) ){ goto $label$82 }
	$3 = (int_64)-9223372036854775808
	*($4 + [432]) = (int_64)-9223372036854775808
	if ( ((float_32)$19 != (float_32)(float_32)1) ){ goto $label$81 }
	goto $label$66 
	
.LABEL $label$87
	$3 = (Rounds 0)($14)
	*($4 + [416]) = $3
	if ( ((float_32)$19 == (float_32)(float_32)1) ){ goto $label$75 }
	
.LABEL $label$86
	$14 = ((float_64)(PROMOTE float_64)(float_32 ((float_32)(float_32))((float_32)1 - $19) * (float_32)$20)) * (float_64)(float_64)0.985
	if ( ((float_64)(float_64)|$14)| < (float_64)(float_64)9223372036854775808) ){ goto $label$84 }
	*($4 + [432]) = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 >= (int_64)1) ){ goto $label$83 }
	goto $label$75 
	
.LABEL $label$85
	$14 = ((float_64)(CASTING float_64)(int_64 *($8 + [112])) * (float_64)(float_64)0.985)
	if ( ((float_64)(float_64)|$14| < (float_64)(float_64)9223372036854775808) ){ goto $label$80 }
	$3 = (int_64)-9223372036854775808
	goto $label$79 
	
.LABEL $label$84
	$2 = (Rounds 0)($14)
	*($4 + [432]) = $2
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$75 }
	
.LABEL $label$83
	*($4 + [184]) = (int_64)3617214756542218240
	*($4 + [176]) = *($0)
	$8 = ( *((($4 + [400]) + [8])) ? (($4 + [400]) | [1]) : (*($4 + [400]) & [1]) )
	*($4 + [344]) = $8
	*($4 + [348]) = CALL $72($8)
	*($4 + [32]) = *($4 + [344])
	$9 = CALL $12(($4 + [352]), ($4 + [32]))
	$6 = *($4 + [460])
	*((($4 + [120]) + [8])) = [0]
	*($4 + [120]) = (int_64)0
	$8 = CALL $72([17148])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$78 }
	*($4 + [120]) = ($8 << [1])
	$7 = (($4 + [120]) | [1])
	if ( $8 ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$82
	$3 = (Rounds 0)($14)
	*($4 + [432]) = $3
	if ( ((float_32)$19 == (float_32)(float_32)1) ){ goto $label$66 }
	
.LABEL $label$81
	$14 = ((float_64)(PROMOTE float_64)(float_32 ((float_32)(float_32))((float_32)1 - $19) * (float_32)$20)) * (float_64)(float_64)0.985
	if ( ((float_64)(float_64)|$14)| < (float_64)(float_64)9223372036854775808) ){ goto $label$74 }
	*($4 + [416]) = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 >= (int_64)1) ){ goto $label$73 }
	goto $label$66 
	
.LABEL $label$80
	$3 = (Rounds 0)($14)
	
.LABEL $label$79
	*($4 + [432]) = $3
	*($4 + [416]) = $3
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$65 }
	*($4 + [184]) = (int_64)3617214756542218240
	*($4 + [176]) = *($0)
	$9 = (($4 + [400]) | [1])
	$8 = ( *((($4 + [400]) + [8])) ? $9 : (*($4 + [400]) & [1]) )
	*($4 + [232]) = $8
	*($4 + [236]) = CALL $72($8)
	*($4 + [64]) = *($4 + [232])
	$6 = CALL $12(($4 + [240]), ($4 + [64]))
	$11 = *($4 + [460])
	*((($4 + [120]) + [8])) = [0]
	*($4 + [120]) = (int_64)0
	$8 = CALL $72([17148])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$72 }
	*($4 + [120]) = ($8 << [1])
	$7 = (($4 + [120]) | [1])
	if ( $8 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$78
	$11 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($4 + [120]) = ($11 | [1])
	*($4 + [128]) = $7
	*($4 + [124]) = $8
	
.LABEL $label$77
	CALL memcpy($7, [17148], $8)
	
.LABEL $label$76
	*(($7 + $8)) = [0]
	$3 = *($6)
	*(($4 + [320])) = *((($4 + [432]) + [8]))
	$8 = (($4 + [120]) + [8])
	*(($4 + [336])) = *($8)
	*($8) = [0]
	*($4 + [296]) = *($0)
	$2 = *($4 + [120])
	*($4 + [120]) = (int_64)0
	*($4 + [312]) = *($4 + [432])
	*($4 + [328]) = $2
	*($4 + [304]) = $3
	$8 = CALL $13(($4 + [360]), ($4 + [176]), *($9), (int_64)-3617168760277827584, ($4 + [296]))
	CALL $14(($4 + [136]), $8)
	$7 = *($4 + [136])
	CALL send_inline($7, (*($4 + [140]) - $7))
	$7 = *($4 + [136])
	if ( ($7 == 0) ){ goto $label$89 }
	*($4 + [140]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$89
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$90 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$90
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$91 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$91
	if ( ((*(($4 + [328])) & [1]) == 0) ){ goto $label$92 }
	CALL _ZdlPv(*(($4 + [336])))
	
.LABEL $label$92
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$93 }
	CALL _ZdlPv(*(($4 + [128])))
	
.LABEL $label$93
	$3 = *($4 + [416])
	
.LABEL $label$75
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$65 }
	*($4 + [184]) = (int_64)3617214756542218240
	*($4 + [176]) = *($0)
	$8 = ( *((($4 + [400]) + [8])) ? (($4 + [400]) | [1]) : (*($4 + [400]) & [1]) )
	*($4 + [280]) = $8
	*($4 + [284]) = CALL $72($8)
	*($4 + [24]) = *($4 + [280])
	$9 = CALL $12(($4 + [288]), ($4 + [24]))
	$6 = *($4 + [452])
	*((($4 + [120]) + [8])) = [0]
	*($4 + [120]) = (int_64)0
	$8 = CALL $72([17148])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$96 }
	*($4 + [120]) = ($8 << [1])
	$7 = (($4 + [120]) | [1])
	if ( $8 ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$96
	$11 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($4 + [120]) = ($11 | [1])
	*($4 + [128]) = $7
	*($4 + [124]) = $8
	
.LABEL $label$95
	CALL memcpy($7, [17148], $8)
	
.LABEL $label$94
	*(($7 + $8)) = [0]
	$3 = *($6)
	*(($4 + [320])) = *((($4 + [416]) + [8]))
	$8 = (($4 + [120]) + [8])
	*(($4 + [336])) = *($8)
	*($8) = [0]
	*($4 + [296]) = *($0)
	$2 = *($4 + [120])
	*($4 + [120]) = (int_64)0
	*($4 + [312]) = *($4 + [416])
	*($4 + [328]) = $2
	*($4 + [304]) = $3
	$8 = CALL $13(($4 + [360]), ($4 + [176]), *($9), (int_64)-3617168760277827584, ($4 + [296]))
	CALL $14(($4 + [136]), $8)
	$7 = *($4 + [136])
	CALL send_inline($7, (*($4 + [140]) - $7))
	$7 = *($4 + [136])
	if ( ($7 == 0) ){ goto $label$97 }
	*($4 + [140]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$97
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$98 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$98
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$99 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$99
	if ( ((*(($4 + [328])) & [1]) == 0) ){ goto $label$100 }
	CALL _ZdlPv(*(($4 + [336])))
	
.LABEL $label$100
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($4 + [128])))
	goto $label$65 
	
.LABEL $label$74
	$2 = (Rounds 0)($14)
	*($4 + [416]) = $2
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$66 }
	
.LABEL $label$73
	*($4 + [184]) = (int_64)3617214756542218240
	*($4 + [176]) = *($0)
	$8 = ( *((($4 + [400]) + [8])) ? (($4 + [400]) | [1]) : (*($4 + [400]) & [1]) )
	*($4 + [264]) = $8
	*($4 + [268]) = CALL $72($8)
	*($4 + [48]) = *($4 + [264])
	$9 = CALL $12(($4 + [272]), ($4 + [48]))
	$6 = *($4 + [452])
	*((($4 + [120]) + [8])) = [0]
	*($4 + [120]) = (int_64)0
	$8 = CALL $72([17148])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$69 }
	*($4 + [120]) = ($8 << [1])
	$7 = (($4 + [120]) | [1])
	if ( $8 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$72
	$17 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($17)
	*($4 + [120]) = ($17 | [1])
	*($4 + [128]) = $7
	*($4 + [124]) = $8
	
.LABEL $label$71
	CALL memcpy($7, [17148], $8)
	
.LABEL $label$70
	*(($7 + $8)) = [0]
	$3 = *($11)
	*(($4 + [320])) = *((($4 + [432]) + [8]))
	$8 = (($4 + [120]) + [8])
	*(($4 + [336])) = *($8)
	*($8) = [0]
	*($4 + [296]) = *($0)
	$2 = *($4 + [120])
	*($4 + [120]) = (int_64)0
	*($4 + [312]) = *($4 + [432])
	*($4 + [328]) = $2
	*($4 + [304]) = $3
	$8 = CALL $13(($4 + [360]), ($4 + [176]), *($6), (int_64)-3617168760277827584, ($4 + [296]))
	CALL $14(($4 + [136]), $8)
	$7 = *($4 + [136])
	CALL send_inline($7, (*($4 + [140]) - $7))
	$7 = *($4 + [136])
	if ( ($7 == 0) ){ goto $label$101 }
	*($4 + [140]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$101
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$102 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$102
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$103 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$103
	if ( ((*(($4 + [328])) & [1]) == 0) ){ goto $label$104 }
	CALL _ZdlPv(*(($4 + [336])))
	
.LABEL $label$104
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$105 }
	CALL _ZdlPv(*(($4 + [128])))
	
.LABEL $label$105
	*($4 + [184]) = (int_64)3617214756542218240
	*($4 + [176]) = *($0)
	$8 = ( *((($4 + [400]) + [8])) ? $9 : (*($4 + [400]) & [1]) )
	*($4 + [216]) = $8
	*($4 + [220]) = CALL $72($8)
	*($4 + [56]) = *($4 + [216])
	$9 = CALL $12(($4 + [224]), ($4 + [56]))
	$6 = *($4 + [452])
	*((($4 + [120]) + [8])) = [0]
	*($4 + [120]) = (int_64)0
	$8 = CALL $72([17148])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$108 }
	*($4 + [120]) = ($8 << [1])
	$7 = (($4 + [120]) | [1])
	if ( $8 ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$108
	$11 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($4 + [120]) = ($11 | [1])
	*($4 + [128]) = $7
	*($4 + [124]) = $8
	
.LABEL $label$107
	CALL memcpy($7, [17148], $8)
	
.LABEL $label$106
	*(($7 + $8)) = [0]
	$3 = *($6)
	*(($4 + [320])) = *((($4 + [416]) + [8]))
	$8 = (($4 + [120]) + [8])
	*(($4 + [336])) = *($8)
	*($8) = [0]
	*($4 + [296]) = *($0)
	$2 = *($4 + [120])
	*($4 + [120]) = (int_64)0
	*($4 + [312]) = *($4 + [416])
	*($4 + [328]) = $2
	*($4 + [304]) = $3
	$8 = CALL $13(($4 + [360]), ($4 + [176]), *($9), (int_64)-3617168760277827584, ($4 + [296]))
	CALL $14(($4 + [136]), $8)
	$7 = *($4 + [136])
	CALL send_inline($7, (*($4 + [140]) - $7))
	$7 = *($4 + [136])
	if ( ($7 == 0) ){ goto $label$109 }
	*($4 + [140]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$109
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$110 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$110
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$111 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$111
	if ( ((*(($4 + [328])) & [1]) == 0) ){ goto $label$112 }
	CALL _ZdlPv(*(($4 + [336])))
	
.LABEL $label$112
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($4 + [128])))
	goto $label$65 
	
.LABEL $label$69
	$11 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($4 + [120]) = ($11 | [1])
	*($4 + [128]) = $7
	*($4 + [124]) = $8
	
.LABEL $label$68
	CALL memcpy($7, [17148], $8)
	
.LABEL $label$67
	*(($7 + $8)) = [0]
	$3 = *($6)
	*(($4 + [320])) = *((($4 + [416]) + [8]))
	$8 = (($4 + [120]) + [8])
	*(($4 + [336])) = *($8)
	*($8) = [0]
	*($4 + [296]) = *($0)
	$2 = *($4 + [120])
	*($4 + [120]) = (int_64)0
	*($4 + [312]) = *($4 + [416])
	*($4 + [328]) = $2
	*($4 + [304]) = $3
	$8 = CALL $13(($4 + [360]), ($4 + [176]), *($9), (int_64)-3617168760277827584, ($4 + [296]))
	CALL $14(($4 + [136]), $8)
	$7 = *($4 + [136])
	CALL send_inline($7, (*($4 + [140]) - $7))
	$7 = *($4 + [136])
	if ( ($7 == 0) ){ goto $label$113 }
	*($4 + [140]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$113
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$114 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$114
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$115 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$115
	if ( ((*(($4 + [328])) & [1]) == 0) ){ goto $label$116 }
	CALL _ZdlPv(*(($4 + [336])))
	
.LABEL $label$116
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$117 }
	CALL _ZdlPv(*(($4 + [128])))
	
.LABEL $label$117
	$3 = *($4 + [432])
	
.LABEL $label$66
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$65 }
	*($4 + [184]) = (int_64)3617214756542218240
	*($4 + [176]) = *($0)
	$8 = ( *((($4 + [400]) + [8])) ? (($4 + [400]) | [1]) : (*($4 + [400]) & [1]) )
	*($4 + [248]) = $8
	*($4 + [252]) = CALL $72($8)
	*($4 + [40]) = *($4 + [248])
	$9 = CALL $12(($4 + [256]), ($4 + [40]))
	$6 = *($4 + [460])
	*((($4 + [120]) + [8])) = [0]
	*($4 + [120]) = (int_64)0
	$8 = CALL $72([17148])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$120 }
	*($4 + [120]) = ($8 << [1])
	$7 = (($4 + [120]) | [1])
	if ( $8 ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$11 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($4 + [120]) = ($11 | [1])
	*($4 + [128]) = $7
	*($4 + [124]) = $8
	
.LABEL $label$119
	CALL memcpy($7, [17148], $8)
	
.LABEL $label$118
	*(($7 + $8)) = [0]
	$3 = *($6)
	*(($4 + [320])) = *((($4 + [432]) + [8]))
	$8 = (($4 + [120]) + [8])
	*(($4 + [336])) = *($8)
	*($8) = [0]
	*($4 + [296]) = *($0)
	$2 = *($4 + [120])
	*($4 + [120]) = (int_64)0
	*($4 + [312]) = *($4 + [432])
	*($4 + [328]) = $2
	*($4 + [304]) = $3
	$8 = CALL $13(($4 + [360]), ($4 + [176]), *($9), (int_64)-3617168760277827584, ($4 + [296]))
	CALL $14(($4 + [136]), $8)
	$7 = *($4 + [136])
	CALL send_inline($7, (*($4 + [140]) - $7))
	$7 = *($4 + [136])
	if ( ($7 == 0) ){ goto $label$121 }
	*($4 + [140]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$121
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$122 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$122
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$123 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$123
	if ( ((*(($4 + [328])) & [1]) == 0) ){ goto $label$124 }
	CALL _ZdlPv(*(($4 + [336])))
	
.LABEL $label$124
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($4 + [128])))
	
.LABEL $label$65
	$8 = *($4 + [508])
	*($4 + [300]) = ($4 + [448])
	*($4 + [296]) = ($4 + [456])
	*($4 + [304]) = ($4 + [432])
	*($4 + [308]) = ($4 + [416])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [17864])
	CALL $16($5, $8, (int_64)0, ($4 + [296]))
	*(($9 = (($4 + [360]) + [32]))) = [0]
	*($4 + [376]) = (int_64)-1
	*($4 + [384]) = (int_64)0
	$2 = *(*($4 + [460]))
	$3 = *($0)
	*($4 + [360]) = $3
	*($4 + [368]) = $2
	*((($4 + [176]) + [32])) = [0]
	*($4 + [192]) = (int_64)-1
	*($4 + [200]) = (int_64)0
	$2 = *(*($4 + [452]))
	*($4 + [176]) = $3
	*($4 + [184]) = $2
	*($4 + [72]) = ($4 + [504])
	*($4 + [136]) = $3
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$4()), [17734])
	*($4 + [300]) = ($4 + [72])
	*($4 + [296]) = ($4 + [360])
	*($4 + [304]) = ($4 + [136])
	*(($8 = CALL _Znwj([144])) + [16]) = [0]
	*($8 + [8 align=4]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [72]) = (int_64)0
	*($8 + [80]) = (int_64)0
	*($8 + [96]) = (int_64)0
	*($8 + [112]) = (int_64)0
	*($8 + [120]) = (int_64)0
	*($8 + [128]) = ($4 + [360])
	CALL $17(($4 + [296]), $8)
	*($4 + [120]) = $8
	$3 = *($8)
	*($4 + [296]) = $3
	$6 = *($8 + [132])
	*($4 + [512]) = $6
	$5 = ($4 + [388])
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*($9)) ){ goto $label$125 }
	*($7 + [8]) = $3
	*($7 + [16]) = $6
	*($4 + [120]) = [0]
	*($7) = $8
	*($5) = ($7 + [24])
	$8 = *($4 + [120])
	$7 = [0]
	*($4 + [120]) = [0]
	if ( ($8 == 0) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$125
	CALL $18(($4 + [384]), ($4 + [120]), ($4 + [296]), ($4 + [512]))
	$8 = *($4 + [120])
	$7 = [0]
	*($4 + [120]) = [0]
	if ( $8 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$35
	CALL $57(($4 + [360]))
	
.LABEL $label$34
	CALL $57(($4 + [360]))
	
.LABEL $label$33
	CALL $57(($4 + [120]))
	
.LABEL $label$32
	CALL $57(($4 + [120]))
	
.LABEL $label$31
	CALL $57(($4 + [120]))
	
.LABEL $label$30
	CALL $57(($4 + [120]))
	
.LABEL $label$29
	CALL $57(($4 + [120]))
	
.LABEL $label$28
	CALL $57(($4 + [120]))
	
.LABEL $label$27
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$126 }
	CALL _ZdlPv(*(($8 + [16])))
	
.LABEL $label$126
	CALL _ZdlPv($8)
	
.LABEL $label$26
	$3 = *($0)
	*($4 + [72]) = ($4 + [504])
	*($4 + [136]) = $3
	CALL eosio_assert(((int_64)*($4 + [176]) == (int_64)CALL $fimport$4()), [17734])
	*($4 + [300]) = ($4 + [72])
	*($4 + [296]) = ($4 + [176])
	*($4 + [304]) = ($4 + [136])
	*(($8 = CALL _Znwj([144])) + [16]) = $7
	*($8 + [8 align=4]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [72]) = (int_64)0
	*($8 + [80]) = (int_64)0
	*($8 + [96]) = (int_64)0
	*($8 + [112]) = (int_64)0
	*($8 + [120]) = (int_64)0
	*($8 + [128]) = ($4 + [176])
	CALL $19(($4 + [296]), $8)
	*($4 + [120]) = $8
	$3 = *($8)
	*($4 + [296]) = $3
	$9 = *($8 + [132])
	*($4 + [512]) = $9
	$6 = ($4 + [204])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($4 + [208]))) ){ goto $label$129 }
	*($7 + [8]) = $3
	*($7 + [16]) = $9
	*($4 + [120]) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	$8 = *($4 + [120])
	$7 = [0]
	*($4 + [120]) = [0]
	if ( ($8 == 0) ){ goto $label$127 }
	goto $label$128 
	
.LABEL $label$129
	CALL $18(($4 + [200]), ($4 + [120]), ($4 + [296]), ($4 + [512]))
	$8 = *($4 + [120])
	$7 = [0]
	*($4 + [120]) = [0]
	if ( ($8 == 0) ){ goto $label$127 }
	
.LABEL $label$128
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$130 }
	CALL _ZdlPv(*(($8 + [16])))
	
.LABEL $label$130
	CALL _ZdlPv($8)
	
.LABEL $label$127
	*($4 + [128]) = (int_64)3617214756542218240
	*($4 + [120]) = *($0)
	$8 = ( *((($4 + [400]) + [8])) ? (($4 + [400]) | [1]) : (*($4 + [400]) & [1]) )
	*($4 + [104]) = $8
	*($4 + [108]) = CALL $72($8)
	*($4 + [16]) = *($4 + [104])
	$9 = CALL $12(($4 + [112]), ($4 + [16]))
	*($4 + [88]) = [17230]
	*($4 + [92]) = CALL $72([17230])
	*($4 + [8]) = *($4 + [88])
	$6 = CALL $12(($4 + [96]), ($4 + [8]))
	*((($4 + [72]) + [8])) = $7
	*($4 + [72]) = (int_64)0
	$8 = CALL $72([17148])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$131 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$134 }
	*($4 + [72]) = ($8 << [1])
	$7 = (($4 + [72]) | [1])
	if ( $8 ){ goto $label$133 }
	goto $label$132 
	
.LABEL $label$134
	$5 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($5)
	*($4 + [72]) = ($5 | [1])
	*($4 + [80]) = $7
	*($4 + [76]) = $8
	
.LABEL $label$133
	CALL memcpy($7, [17148], $8)
	
.LABEL $label$132
	*(($7 + $8)) = [0]
	*(($4 + [320])) = $1
	$8 = ($4 + [80])
	*(($4 + [336])) = *($8)
	*($8) = [0]
	*($4 + [312]) = $15
	*($4 + [296]) = *($0)
	*($4 + [304]) = *($6)
	*($4 + [328]) = *($4 + [72])
	*($4 + [72]) = (int_64)0
	$8 = CALL $13(($4 + [136]), ($4 + [120]), *($9), (int_64)-3617168760277827584, ($4 + [296]))
	CALL $14(($4 + [512]), $8)
	$7 = *($4 + [512])
	CALL send_inline($7, (*($4 + [516]) - $7))
	$7 = *($4 + [512])
	if ( ($7 == 0) ){ goto $label$135 }
	*($4 + [516]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$135
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$136 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$136
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$137 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$137
	if ( ((*(($4 + [328])) & [1]) == 0) ){ goto $label$138 }
	CALL _ZdlPv(*(($4 + [336])))
	
.LABEL $label$138
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$139 }
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$139
	$8 = *($10)
	$12 = *($8 + [16])
	$1 = *($8 + [8])
	$2 = *($8 + [40])
	$3 = (uint_64)*(($8 + [120])) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$143 }
	$7 = [0]
	
.LOOP $label$145:
	*((($4 + [136]) + ($8 = $7))) = $3
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$144 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$145 }
	
.LABEL $label$144
	*(($4 + [304])) = [0]
	*($4 + [296]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$142 }
	*($4 + [296]) = ($7 << [1])
	$9 = (($4 + [296]) | [1])
	goto $label$141 
	
.LABEL $label$143
	*(($4 + [304])) = [0]
	*($4 + [296]) = (int_64)0
	*($4 + [296]) = [0]
	$7 = (($4 + [296]) | [1])
	$9 = $7
	goto $label$140 
	
.LABEL $label$142
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($4 + [296]) = ($6 | [1])
	*($4 + [304]) = $9
	*($4 + [300]) = $7
	
.LABEL $label$141
	$6 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$146:
	*(($9 + $8)) = *((($4 + [136]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$146 }
	$9 = ($9 + $7)
	$7 = (($4 + [296]) | [1])
	$8 = *($10)
	
.LABEL $label$140
	*($9) = [0]
	$9 = ( *($4 + [304]) ? $7 : (*($4 + [296]) & [1]) )
	$14 = ((float_64)(CASTING float_64)(int_64 *($8 + [144])) / (float_64)(float_64)1e4)
	$18 = ((float_64)(CASTING float_64)(int_64 *($8 + [128])) / (float_64)(float_64)1e4)
	$21 = ((float_64)(CASTING float_64)(int_64 *($8 + [112])) / (float_64)(float_64)1e4)
	$3 = *($8 + [80])
	$13 = *($8 + [72])
	$15 = *($8 + [32])
	$22 = *($8 + [24])
	$8 = [17243]
	$7 = *([17243])
	if ( ($7 == 0) ){ goto $label$147 }
	
.LOOP $label$149:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$148 }
	CALL prints_l($8, [1])
	$8 = ($8 + [1])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$147 }
	goto $label$149 
	
.LABEL $label$148
	CALL printui($2)
	$8 = ($8 + [1])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$147 }
	
.LOOP $label$151:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$150 }
	CALL prints_l($8, [1])
	$8 = ($8 + [1])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$147 }
	goto $label$151 
	
.LABEL $label$150
	CALL printui($1)
	$8 = ($8 + [1])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$147 }
	
.LOOP $label$153:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$152 }
	CALL prints_l($8, [1])
	$8 = ($8 + [1])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$147 }
	goto $label$153 
	
.LABEL $label$152
	CALL printui($12)
	$8 = ($8 + [1])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$147 }
	
.LOOP $label$155:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$154 }
	CALL prints_l($8, [1])
	$8 = ($8 + [1])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$147 }
	goto $label$155 
	
.LABEL $label$154
	CALL prints($9)
	$8 = ($8 + [1])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$147 }
	
.LOOP $label$157:
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$156 }
	CALL prints_l($8, [1])
	$8 = ($8 + [1])
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$147 }
	goto $label$157 
	
.LABEL $label$156
	CALL printdf($21)
	CALL $20(($8 + [1]), $22, $15, $18, $13, $3, $14)
	
.LABEL $label$147
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$158 }
	CALL _ZdlPv(*(($4 + [304])))
	
.LABEL $label$158
	$9 = *($4 + [200])
	if ( ($9 == 0) ){ goto $label$159 }
	$6 = ($4 + [204])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$161 }
	
.LOOP $label$162:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$163 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$164 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$164
	CALL _ZdlPv($7)
	
.LABEL $label$163
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$162 }
	$8 = *(($4 + [200]))
	goto $label$160 
	
.LABEL $label$161
	$8 = $9
	
.LABEL $label$160
	*($6) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$159
	$9 = *($4 + [384])
	if ( ($9 == 0) ){ goto $label$165 }
	$6 = ($4 + [388])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$167 }
	
.LOOP $label$168:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$169 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$170 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$170
	CALL _ZdlPv($7)
	
.LABEL $label$169
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$168 }
	$8 = *(($4 + [384]))
	goto $label$166 
	
.LABEL $label$167
	$8 = $9
	
.LABEL $label$166
	*($6) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$165
	if ( ((*($4 + [400]) & [1]) == 0) ){ goto $label$171 }
	CALL _ZdlPv(*(($4 + [408])))
	
.LABEL $label$171
	$9 = *($4 + [488])
	if ( ($9 == 0) ){ goto $label$172 }
	$6 = ($4 + [492])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$174 }
	
.LOOP $label$175:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$176 }
	CALL _ZdlPv($7)
	
.LABEL $label$176
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$175 }
	$8 = *(($4 + [488]))
	goto $label$173 
	
.LABEL $label$174
	$8 = $9
	
.LABEL $label$173
	*($6) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$172
	$global$0 = ($4 + [528])
	return (unreachable)
	
.LABEL $label$131
	CALL $57(($4 + [72]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17571])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17676])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17609])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17676])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $21($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $22(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17808])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17728])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17728])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1) = (int_64)2
	*($1 + [16]) = (int_64)0
	$3 = *($0)
	CALL eosio_assert([1], [17728])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [17728])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [17728])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-4823918150867222528, *(*($0 + [8])), $4, $2, [24])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17808])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17808])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17728])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17728])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17728])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [104])))
	
.LABEL $label$6
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$4 = *(($0 + [96]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$8 }
	$2 = ($0 + [60])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($0 + [56]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $1
	
.LABEL $label$9
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $77($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17808])
	CALL memcpy(($4 + [120]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	$3 = ($4 + [40])
	$8 = CALL db_lowerbound_i64($0, $0, (int_64)-4823918150867222528, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	CALL $3($3, $8)
	goto $label$4 
	
.LABEL $label$5
	CALL $29(($4 + [136]), $3, $0, ($4 + [128]))
	
.LABEL $label$4
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [120])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $81($2)
	
.LABEL $label$7
	CALL $30(($4 + [8]))
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $60($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $63 ()
{
	return [8220]
}

void .FUNC $64 (int_32 $0)
{
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $39($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $61($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $61($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $57($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $75(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $75(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $81($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $57 (int_32 $0)
{
	CALL abort()
	(unreachable)
}